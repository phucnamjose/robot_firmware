
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0801b5f8  0801b5f8  0002b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c140  0801c140  00031034  2**0
                  CONTENTS
  4 .ARM          00000008  0801c140  0801c140  0002c140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c148  0801c148  00031034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c148  0801c148  0002c148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c14c  0801c14c  0002c14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001034  20000000  0801c150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20001038  0801d184  00031038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e8c  0801d184  00036e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e185  00000000  00000000  00031064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006211  00000000  00000000  0005f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  00065400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae0  00000000  00000000  00067138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299d0  00000000  00000000  00068c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f1d9  00000000  00000000  000925e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dca51  00000000  00000000  000b17c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d70  00000000  00000000  0018e290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001038 	.word	0x20001038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b5dc 	.word	0x0801b5dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000103c 	.word	0x2000103c
 80001cc:	0801b5dc 	.word	0x0801b5dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b6      	sub	sp, #216	; 0xd8
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f014 fc8a 	bl	80158d8 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b0      	ldr	r1, [pc, #704]	; (8001294 <commandRead+0x2ec>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f015 fbd7 	bl	8016788 <siscanf>
 8000fda:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bac      	ldr	r3, [pc, #688]	; (8001298 <commandRead+0x2f0>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <commandRead+0x6a>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 800100e:	2300      	movs	r3, #0
 8001010:	e3a6      	b.n	8001760 <commandRead+0x7b8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001012:	4ba1      	ldr	r3, [pc, #644]	; (8001298 <commandRead+0x2f0>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8d7 	bl	80001d0 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10a      	bne.n	800103e <commandRead+0x96>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 800103a:	2301      	movs	r3, #1
 800103c:	e390      	b.n	8001760 <commandRead+0x7b8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 800103e:	4b96      	ldr	r3, [pc, #600]	; (8001298 <commandRead+0x2f0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c1 	bl	80001d0 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d145      	bne.n	80010e0 <commandRead+0x138>
		if (3 == result) {
 8001054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001058:	2b03      	cmp	r3, #3
 800105a:	d112      	bne.n	8001082 <commandRead+0xda>
			result = sscanf( para, "%lf %lf",
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8001068:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800106c:	498b      	ldr	r1, [pc, #556]	; (800129c <commandRead+0x2f4>)
 800106e:	f015 fb8b 	bl	8016788 <siscanf>
 8001072:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 8001076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <commandRead+0xde>
				return CMD_ERROR;
 800107e:	2315      	movs	r3, #21
 8001080:	e36e      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001082:	2315      	movs	r3, #21
 8001084:	e36c      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->target_point.x = 250;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	4c84      	ldr	r4, [pc, #528]	; (80012a0 <commandRead+0x2f8>)
 800108e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = -200;
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	4c82      	ldr	r4, [pc, #520]	; (80012a4 <commandRead+0x2fc>)
 800109a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		duty_cmd->target_point.z = 120;
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	4c80      	ldr	r4, [pc, #512]	; (80012a8 <commandRead+0x300>)
 80010a6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		duty_cmd->target_point.roll = 0;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	f04f 0400 	mov.w	r4, #0
 80010b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

		duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	745a      	strb	r2, [r3, #17]
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	735a      	strb	r2, [r3, #13]
		duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	73da      	strb	r2, [r3, #15]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 80010dc:	2302      	movs	r3, #2
 80010de:	e33f      	b.n	8001760 <commandRead+0x7b8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <commandRead+0x2f0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f870 	bl	80001d0 <strcmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d158      	bne.n	80011a8 <commandRead+0x200>
		if (3 == result) {
 80010f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d147      	bne.n	800118e <commandRead+0x1e6>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0678 	add.w	r6, r3, #120	; 0x78
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3380      	adds	r3, #128	; 0x80
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	3288      	adds	r2, #136	; 0x88
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8001118:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800111c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001120:	9004      	str	r0, [sp, #16]
 8001122:	f107 004f 	add.w	r0, r7, #79	; 0x4f
 8001126:	9003      	str	r0, [sp, #12]
 8001128:	9102      	str	r1, [sp, #8]
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4633      	mov	r3, r6
 8001130:	462a      	mov	r2, r5
 8001132:	495e      	ldr	r1, [pc, #376]	; (80012ac <commandRead+0x304>)
 8001134:	4620      	mov	r0, r4
 8001136:	f015 fb27 	bl	8016788 <siscanf>
 800113a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800113e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001142:	2b07      	cmp	r3, #7
 8001144:	d001      	beq.n	800114a <commandRead+0x1a2>
				return CMD_ERROR;
 8001146:	2315      	movs	r3, #21
 8001148:	e30a      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	739a      	strb	r2, [r3, #14]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	735a      	strb	r2, [r3, #13]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001156:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <commandRead+0x1c8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 8001164:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 800116e:	e010      	b.n	8001192 <commandRead+0x1ea>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001170:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <commandRead+0x1e2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 800117e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001188:	e003      	b.n	8001192 <commandRead+0x1ea>
			} else {
				return CMD_ERROR;
 800118a:	2315      	movs	r3, #21
 800118c:	e2e8      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 800118e:	2315      	movs	r3, #21
 8001190:	e2e6      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_LINE;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e2db      	b.n	8001760 <commandRead+0x7b8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <commandRead+0x2f0>)
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f80c 	bl	80001d0 <strcmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d17a      	bne.n	80012b4 <commandRead+0x30c>
		if (3 == result) {
 80011be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d158      	bne.n	8001278 <commandRead+0x2d0>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f103 0e70 	add.w	lr, r3, #112	; 0x70
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 0878 	add.w	r8, r3, #120	; 0x78
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3380      	adds	r3, #128	; 0x80
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	3288      	adds	r2, #136	; 0x88
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f501 7194 	add.w	r1, r1, #296	; 0x128
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80011e8:	687c      	ldr	r4, [r7, #4]
 80011ea:	f504 749c 	add.w	r4, r4, #312	; 0x138
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 80011ee:	687d      	ldr	r5, [r7, #4]
 80011f0:	3514      	adds	r5, #20
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	f506 76cc 	add.w	r6, r6, #408	; 0x198
 80011f8:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 80011fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	9606      	str	r6, [sp, #24]
 800120a:	9505      	str	r5, [sp, #20]
 800120c:	9404      	str	r4, [sp, #16]
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	9102      	str	r1, [sp, #8]
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4643      	mov	r3, r8
 800121a:	4672      	mov	r2, lr
 800121c:	4924      	ldr	r1, [pc, #144]	; (80012b0 <commandRead+0x308>)
 800121e:	4660      	mov	r0, ip
 8001220:	f015 fab2 	bl	8016788 <siscanf>
 8001224:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 8001228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800122c:	2b0b      	cmp	r3, #11
 800122e:	d001      	beq.n	8001234 <commandRead+0x28c>
				return CMD_ERROR;
 8001230:	2315      	movs	r3, #21
 8001232:	e295      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	739a      	strb	r2, [r3, #14]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	735a      	strb	r2, [r3, #13]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001240:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <commandRead+0x2b2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 800124e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001258:	e010      	b.n	800127c <commandRead+0x2d4>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 800125a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <commandRead+0x2cc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 8001268:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001272:	e003      	b.n	800127c <commandRead+0x2d4>
			} else {
				return CMD_ERROR;
 8001274:	2315      	movs	r3, #21
 8001276:	e273      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001278:	2315      	movs	r3, #21
 800127a:	e271      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_CIRCLE;
 800128e:	2304      	movs	r3, #4
 8001290:	e266      	b.n	8001760 <commandRead+0x7b8>
 8001292:	bf00      	nop
 8001294:	0801b6d8 	.word	0x0801b6d8
 8001298:	20000000 	.word	0x20000000
 800129c:	0801b6e4 	.word	0x0801b6e4
 80012a0:	406f4000 	.word	0x406f4000
 80012a4:	c0690000 	.word	0xc0690000
 80012a8:	405e0000 	.word	0x405e0000
 80012ac:	0801b6ec 	.word	0x0801b6ec
 80012b0:	0801b708 	.word	0x0801b708

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 80012b4:	4bba      	ldr	r3, [pc, #744]	; (80015a0 <commandRead+0x5f8>)
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff86 	bl	80001d0 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d158      	bne.n	800137c <commandRead+0x3d4>
		if (3 == result) {
 80012ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d147      	bne.n	8001362 <commandRead+0x3ba>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0570 	add.w	r5, r3, #112	; 0x70
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 0678 	add.w	r6, r3, #120	; 0x78
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3380      	adds	r3, #128	; 0x80
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3288      	adds	r2, #136	; 0x88
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 80012ec:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012f4:	9004      	str	r0, [sp, #16]
 80012f6:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 80012fa:	9003      	str	r0, [sp, #12]
 80012fc:	9102      	str	r1, [sp, #8]
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4633      	mov	r3, r6
 8001304:	462a      	mov	r2, r5
 8001306:	49a7      	ldr	r1, [pc, #668]	; (80015a4 <commandRead+0x5fc>)
 8001308:	4620      	mov	r0, r4
 800130a:	f015 fa3d 	bl	8016788 <siscanf>
 800130e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001316:	2b07      	cmp	r3, #7
 8001318:	d001      	beq.n	800131e <commandRead+0x376>
				return CMD_ERROR;
 800131a:	2315      	movs	r3, #21
 800131c:	e220      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	735a      	strb	r2, [r3, #13]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	73da      	strb	r2, [r3, #15]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800132a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <commandRead+0x39c>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 8001338:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001342:	e010      	b.n	8001366 <commandRead+0x3be>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001344:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <commandRead+0x3b6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 8001352:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800135c:	e003      	b.n	8001366 <commandRead+0x3be>
			} else {
				return CMD_ERROR;
 800135e:	2315      	movs	r3, #21
 8001360:	e1fe      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001362:	2315      	movs	r3, #21
 8001364:	e1fc      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

		return CMD_MOVE_JOINT;
 8001378:	2305      	movs	r3, #5
 800137a:	e1f1      	b.n	8001760 <commandRead+0x7b8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <commandRead+0x5f8>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d151      	bne.n	8001436 <commandRead+0x48e>
		if (3 == result) {
 8001392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001396:	2b03      	cmp	r3, #3
 8001398:	d140      	bne.n	800141c <commandRead+0x474>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f103 0114 	add.w	r1, r3, #20
			result = sscanf( para, "%d %lf %lf %d %lf",
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0418 	add.w	r4, r3, #24
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80013ac:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80013b0:	f107 0220 	add.w	r2, r7, #32
 80013b4:	9202      	str	r2, [sp, #8]
 80013b6:	f107 021f 	add.w	r2, r7, #31
 80013ba:	9201      	str	r2, [sp, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	460a      	mov	r2, r1
 80013c2:	4979      	ldr	r1, [pc, #484]	; (80015a8 <commandRead+0x600>)
 80013c4:	f015 f9e0 	bl	8016788 <siscanf>
 80013c8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 80013cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d001      	beq.n	80013d8 <commandRead+0x430>
				return CMD_ERROR;
 80013d4:	2315      	movs	r3, #21
 80013d6:	e1c3      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	735a      	strb	r2, [r3, #13]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	73da      	strb	r2, [r3, #15]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80013e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <commandRead+0x456>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 80013f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 80013fc:	e010      	b.n	8001420 <commandRead+0x478>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80013fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <commandRead+0x470>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 800140c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001416:	e003      	b.n	8001420 <commandRead+0x478>
			} else {
				return CMD_ERROR;
 8001418:	2315      	movs	r3, #21
 800141a:	e1a1      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 800141c:	2315      	movs	r3, #21
 800141e:	e19f      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

		return CMD_ROTATE_SINGLE;
 8001432:	2306      	movs	r3, #6
 8001434:	e194      	b.n	8001760 <commandRead+0x7b8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <commandRead+0x5f8>)
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fec5 	bl	80001d0 <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d112      	bne.n	8001472 <commandRead+0x4ca>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f103 0214 	add.w	r2, r3, #20
 8001452:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001456:	4955      	ldr	r1, [pc, #340]	; (80015ac <commandRead+0x604>)
 8001458:	4618      	mov	r0, r3
 800145a:	f015 f995 	bl	8016788 <siscanf>
 800145e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

		if (1 != result) {
 8001462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <commandRead+0x4c6>
			return CMD_ERROR;
 800146a:	2315      	movs	r3, #21
 800146c:	e178      	b.n	8001760 <commandRead+0x7b8>
		}

		return CMD_OUTPUT;
 800146e:	2307      	movs	r3, #7
 8001470:	e176      	b.n	8001760 <commandRead+0x7b8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <commandRead+0x5f8>)
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <commandRead+0x4e4>
		return CMD_READ_STATUS;
 8001488:	2308      	movs	r3, #8
 800148a:	e169      	b.n	8001760 <commandRead+0x7b8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <commandRead+0x5f8>)
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe9a 	bl	80001d0 <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <commandRead+0x4fe>
			return CMD_READ_POSITION;
 80014a2:	2309      	movs	r3, #9
 80014a4:	e15c      	b.n	8001760 <commandRead+0x7b8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <commandRead+0x5f8>)
 80014a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe8d 	bl	80001d0 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d136      	bne.n	800152a <commandRead+0x582>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 80014bc:	f107 031e 	add.w	r3, r7, #30
 80014c0:	f107 021d 	add.w	r2, r7, #29
 80014c4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <commandRead+0x608>)
 80014ca:	f015 f95d 	bl	8016788 <siscanf>
 80014ce:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 80014d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d001      	beq.n	80014de <commandRead+0x536>
			return CMD_ERROR;
 80014da:	2315      	movs	r3, #21
 80014dc:	e140      	b.n	8001760 <commandRead+0x7b8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 80014de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <commandRead+0x546>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	731a      	strb	r2, [r3, #12]
 80014ec:	e009      	b.n	8001502 <commandRead+0x55a>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 80014ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d103      	bne.n	80014fe <commandRead+0x556>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	731a      	strb	r2, [r3, #12]
 80014fc:	e001      	b.n	8001502 <commandRead+0x55a>
		} else {
			return CMD_ERROR;
 80014fe:	2315      	movs	r3, #21
 8001500:	e12e      	b.n	8001760 <commandRead+0x7b8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001502:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <commandRead+0x56a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	741a      	strb	r2, [r3, #16]
 8001510:	e009      	b.n	8001526 <commandRead+0x57e>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001512:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d103      	bne.n	8001522 <commandRead+0x57a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	741a      	strb	r2, [r3, #16]
 8001520:	e001      	b.n	8001526 <commandRead+0x57e>
		} else {
			return CMD_ERROR;
 8001522:	2315      	movs	r3, #21
 8001524:	e11c      	b.n	8001760 <commandRead+0x7b8>
		}
		return CMD_SETTING;
 8001526:	230a      	movs	r3, #10
 8001528:	e11a      	b.n	8001760 <commandRead+0x7b8>

	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_METHOD_CHANGE])) {
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <commandRead+0x5f8>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe4b 	bl	80001d0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d139      	bne.n	80015b4 <commandRead+0x60c>
		int8_t method;
		result = sscanf( para, "%d",
 8001540:	f107 021c 	add.w	r2, r7, #28
 8001544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <commandRead+0x604>)
 800154a:	4618      	mov	r0, r3
 800154c:	f015 f91c 	bl	8016788 <siscanf>
 8001550:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&method);
		if (1 != result) {
 8001554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <commandRead+0x5b8>
			return CMD_ERROR;
 800155c:	2315      	movs	r3, #21
 800155e:	e0ff      	b.n	8001760 <commandRead+0x7b8>
		}
		if (SCARA_METHOD_MANUAL == method) {
 8001560:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <commandRead+0x5c8>
			duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
 800156e:	e011      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001570:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d103      	bne.n	8001580 <commandRead+0x5d8>
			duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	705a      	strb	r2, [r3, #1]
 800157e:	e009      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_AUTO == method) {
 8001580:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d103      	bne.n	8001590 <commandRead+0x5e8>
			duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	705a      	strb	r2, [r3, #1]
 800158e:	e001      	b.n	8001594 <commandRead+0x5ec>
		} else {
			return CMD_ERROR;
 8001590:	2315      	movs	r3, #21
 8001592:	e0e5      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->change_method = TRUE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		return CMD_METHOD_CHANGE;
 800159a:	230b      	movs	r3, #11
 800159c:	e0e0      	b.n	8001760 <commandRead+0x7b8>
 800159e:	bf00      	nop
 80015a0:	20000000 	.word	0x20000000
 80015a4:	0801b6ec 	.word	0x0801b6ec
 80015a8:	0801b734 	.word	0x0801b734
 80015ac:	0801b748 	.word	0x0801b748
 80015b0:	0801b74c 	.word	0x0801b74c
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_NEW])) {
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <commandRead+0x7c4>)
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe06 	bl	80001d0 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d107      	bne.n	80015da <commandRead+0x632>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_NEW;
 80015d6:	230c      	movs	r3, #12
 80015d8:	e0c2      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_DELETE])) {
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <commandRead+0x7c4>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fdf3 	bl	80001d0 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <commandRead+0x658>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_DELETE;
 80015fc:	230d      	movs	r3, #13
 80015fe:	e0af      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_LINE])) {
 8001600:	4b5a      	ldr	r3, [pc, #360]	; (800176c <commandRead+0x7c4>)
 8001602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001604:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fde0 	bl	80001d0 <strcmp>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <commandRead+0x67e>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_LINE;
 8001622:	230e      	movs	r3, #14
 8001624:	e09c      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_JOINT])) {
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <commandRead+0x7c4>)
 8001628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdcd 	bl	80001d0 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <commandRead+0x6a4>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_JOINT;
 8001648:	230f      	movs	r3, #15
 800164a:	e089      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_OUTPUT])) {
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <commandRead+0x7c4>)
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdba 	bl	80001d0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <commandRead+0x6ca>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_OUTPUT;
 800166e:	2310      	movs	r3, #16
 8001670:	e076      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_TEST])) {
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <commandRead+0x7c4>)
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001676:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <commandRead+0x6f0>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_TEST;
 8001694:	2311      	movs	r3, #17
 8001696:	e063      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_RUN])) {
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <commandRead+0x7c4>)
 800169a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800169c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd94 	bl	80001d0 <strcmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <commandRead+0x716>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_RUN;
 80016ba:	2312      	movs	r3, #18
 80016bc:	e050      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_KEYBOARD])) {
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <commandRead+0x7c4>)
 80016c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd81 	bl	80001d0 <strcmp>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11c      	bne.n	800170e <commandRead+0x766>
		int8_t key_num;
		result = sscanf( para, "%d",
 80016d4:	f107 021b 	add.w	r2, r7, #27
 80016d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016dc:	4924      	ldr	r1, [pc, #144]	; (8001770 <commandRead+0x7c8>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f015 f852 	bl	8016788 <siscanf>
 80016e4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&key_num);
		if (1 != result) {
 80016e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d001      	beq.n	80016f4 <commandRead+0x74c>
			return CMD_ERROR;
 80016f0:	2315      	movs	r3, #21
 80016f2:	e035      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->keyboard = (SCARA_KeyTypeDef)key_num;
 80016f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	70da      	strb	r2, [r3, #3]
		duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		return CMD_KEYBOARD;
 800170a:	2313      	movs	r3, #19
 800170c:	e028      	b.n	8001760 <commandRead+0x7b8>
	}
	else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_KEY_SPEED])) {
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <commandRead+0x7c4>)
 8001710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strcmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11c      	bne.n	800175e <commandRead+0x7b6>
		int32_t speed;
		result = sscanf( para, "%d",
 8001724:	f107 0214 	add.w	r2, r7, #20
 8001728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <commandRead+0x7c8>)
 800172e:	4618      	mov	r0, r3
 8001730:	f015 f82a 	bl	8016788 <siscanf>
 8001734:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&speed);
		if (1 != result) {
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173c:	2b01      	cmp	r3, #1
 800173e:	d001      	beq.n	8001744 <commandRead+0x79c>
			return CMD_ERROR;
 8001740:	2315      	movs	r3, #21
 8001742:	e00d      	b.n	8001760 <commandRead+0x7b8>
		}
		// check limit
		if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPPED_MAX)) {
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dd02      	ble.n	8001750 <commandRead+0x7a8>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b07      	cmp	r3, #7
 800174e:	dd01      	ble.n	8001754 <commandRead+0x7ac>
			return CMD_ERROR;
 8001750:	2315      	movs	r3, #21
 8001752:	e005      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->key_speed = speed;
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
		return CMD_KEY_SPEED;
 800175a:	2314      	movs	r3, #20
 800175c:	e000      	b.n	8001760 <commandRead+0x7b8>
	}
	// Error command
	else {
		return CMD_ERROR;
 800175e:	2315      	movs	r3, #21
	}
}
 8001760:	4618      	mov	r0, r3
 8001762:	37b0      	adds	r7, #176	; 0xb0
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	0801b748 	.word	0x0801b748

08001774 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001774:	b082      	sub	sp, #8
 8001776:	b5b0      	push	{r4, r5, r7, lr}
 8001778:	b0de      	sub	sp, #376	; 0x178
 800177a:	af2c      	add	r7, sp, #176	; 0xb0
 800177c:	4601      	mov	r1, r0
 800177e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001782:	e880 000c 	stmia.w	r0, {r2, r3}
 8001786:	460b      	mov	r3, r1
 8001788:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b15      	cmp	r3, #21
 800178e:	f200 811e 	bhi.w	80019ce <commandReply+0x25a>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <commandReply+0x24>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017f1 	.word	0x080017f1
 800179c:	080017f1 	.word	0x080017f1
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	080017f1 	.word	0x080017f1
 80017ac:	080017f1 	.word	0x080017f1
 80017b0:	080017f1 	.word	0x080017f1
 80017b4:	080017f9 	.word	0x080017f9
 80017b8:	08001863 	.word	0x08001863
 80017bc:	08001897 	.word	0x08001897
 80017c0:	080018c5 	.word	0x080018c5
 80017c4:	0800197f 	.word	0x0800197f
 80017c8:	080019eb 	.word	0x080019eb
 80017cc:	080019eb 	.word	0x080019eb
 80017d0:	080019eb 	.word	0x080019eb
 80017d4:	080019eb 	.word	0x080019eb
 80017d8:	080019eb 	.word	0x080019eb
 80017dc:	080019eb 	.word	0x080019eb
 80017e0:	08001987 	.word	0x08001987
 80017e4:	0800198f 	.word	0x0800198f
 80017e8:	08001997 	.word	0x08001997
 80017ec:	080019af 	.word	0x080019af
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80017f0:	2309      	movs	r3, #9
 80017f2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80017f6:	e0f9      	b.n	80019ec <commandReply+0x278>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80017f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10d      	bne.n	800181c <commandReply+0xa8>
				scaraSetOutput(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f007 fbf5 	bl	8008ff0 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001806:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800180a:	497d      	ldr	r1, [pc, #500]	; (8001a00 <commandReply+0x28c>)
 800180c:	461a      	mov	r2, r3
 800180e:	460b      	mov	r3, r1
 8001810:	cb03      	ldmia	r3!, {r0, r1}
 8001812:	6010      	str	r0, [r2, #0]
 8001814:	6051      	str	r1, [r2, #4]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	8113      	strh	r3, [r2, #8]
 800181a:	e01e      	b.n	800185a <commandReply+0xe6>
			} else if (0 == duty_cmd.sub_para_int) {
 800181c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <commandReply+0xd0>
				scaraSetOutput(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f007 fbe3 	bl	8008ff0 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800182a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800182e:	4975      	ldr	r1, [pc, #468]	; (8001a04 <commandReply+0x290>)
 8001830:	461a      	mov	r2, r3
 8001832:	460b      	mov	r3, r1
 8001834:	cb03      	ldmia	r3!, {r0, r1}
 8001836:	6010      	str	r0, [r2, #0]
 8001838:	6051      	str	r1, [r2, #4]
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	8111      	strh	r1, [r2, #8]
 8001840:	7293      	strb	r3, [r2, #10]
 8001842:	e00a      	b.n	800185a <commandReply+0xe6>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001844:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001848:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <commandReply+0x294>)
 800184a:	461c      	mov	r4, r3
 800184c:	4613      	mov	r3, r2
 800184e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001850:	6020      	str	r0, [r4, #0]
 8001852:	6061      	str	r1, [r4, #4]
 8001854:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001856:	2307      	movs	r3, #7
 8001858:	e0ca      	b.n	80019f0 <commandReply+0x27c>
			}
			ret = RPD_OK;
 800185a:	2308      	movs	r3, #8
 800185c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 8001860:	e0c4      	b.n	80019ec <commandReply+0x278>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001862:	f007 fc17 	bl	8009094 <scaraGetMode>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 800186c:	f007 fc2a 	bl	80090c4 <scaraGetDutyState>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001876:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <commandReply+0x11a>
 800187e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <commandReply+0x11a>
				ret = RPD_IDLE;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800188c:	e0ae      	b.n	80019ec <commandReply+0x278>
				ret = RPD_BUSY;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001894:	e0aa      	b.n	80019ec <commandReply+0x278>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f007 fbea 	bl	8009074 <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80018a0:	4668      	mov	r0, sp
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	22b0      	movs	r2, #176	; 0xb0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f013 fff1 	bl	8015890 <memcpy>
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	cb0c      	ldmia	r3, {r2, r3}
 80018b4:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80018b8:	f007 fc4a 	bl	8009150 <scaraPosition2String>
			ret =  RPD_POSITION;
 80018bc:	2302      	movs	r3, #2
 80018be:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 80018c2:	e093      	b.n	80019ec <commandReply+0x278>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80018c4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <commandReply+0x16e>
			strcpy( (char *)detail, "ABSOLUTE.");
 80018cc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018d0:	494e      	ldr	r1, [pc, #312]	; (8001a0c <commandReply+0x298>)
 80018d2:	461a      	mov	r2, r3
 80018d4:	460b      	mov	r3, r1
 80018d6:	cb03      	ldmia	r3!, {r0, r1}
 80018d8:	6010      	str	r0, [r2, #0]
 80018da:	6051      	str	r1, [r2, #4]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	8113      	strh	r3, [r2, #8]
 80018e0:	e017      	b.n	8001912 <commandReply+0x19e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80018e2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10a      	bne.n	8001900 <commandReply+0x18c>
			strcpy( (char *)detail, "RELATIVE.");
 80018ea:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018ee:	4948      	ldr	r1, [pc, #288]	; (8001a10 <commandReply+0x29c>)
 80018f0:	461a      	mov	r2, r3
 80018f2:	460b      	mov	r3, r1
 80018f4:	cb03      	ldmia	r3!, {r0, r1}
 80018f6:	6010      	str	r0, [r2, #0]
 80018f8:	6051      	str	r1, [r2, #4]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	8113      	strh	r3, [r2, #8]
 80018fe:	e008      	b.n	8001912 <commandReply+0x19e>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <commandReply+0x2a0>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800190a:	f014 ff69 	bl	80167e0 <strcat>
			return RPD_ERROR;
 800190e:	2307      	movs	r3, #7
 8001910:	e06e      	b.n	80019f0 <commandReply+0x27c>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001912:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <commandReply+0x1c4>
			strcat((char *)detail, " LSPB");
 800191a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800191e:	f7fe fc61 	bl	80001e4 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800192a:	4413      	add	r3, r2
 800192c:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <commandReply+0x2a4>)
 800192e:	6810      	ldr	r0, [r2, #0]
 8001930:	6018      	str	r0, [r3, #0]
 8001932:	8892      	ldrh	r2, [r2, #4]
 8001934:	809a      	strh	r2, [r3, #4]
 8001936:	e01e      	b.n	8001976 <commandReply+0x202>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001938:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800193c:	2b01      	cmp	r3, #1
 800193e:	d111      	bne.n	8001964 <commandReply+0x1f0>
			strcat((char *)detail, " S-CURVE");
 8001940:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001944:	f7fe fc4e 	bl	80001e4 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001950:	4413      	add	r3, r2
 8001952:	4932      	ldr	r1, [pc, #200]	; (8001a1c <commandReply+0x2a8>)
 8001954:	461a      	mov	r2, r3
 8001956:	460b      	mov	r3, r1
 8001958:	cb03      	ldmia	r3!, {r0, r1}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	6051      	str	r1, [r2, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7213      	strb	r3, [r2, #8]
 8001962:	e008      	b.n	8001976 <commandReply+0x202>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <commandReply+0x2a0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4619      	mov	r1, r3
 800196a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800196e:	f014 ff37 	bl	80167e0 <strcat>
			return RPD_ERROR;
 8001972:	2307      	movs	r3, #7
 8001974:	e03c      	b.n	80019f0 <commandReply+0x27c>
		}
		ret = RPD_OK;
 8001976:	2308      	movs	r3, #8
 8001978:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800197c:	e036      	b.n	80019ec <commandReply+0x278>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 800197e:	2309      	movs	r3, #9
 8001980:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001984:	e032      	b.n	80019ec <commandReply+0x278>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 8001986:	2309      	movs	r3, #9
 8001988:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800198c:	e02e      	b.n	80019ec <commandReply+0x278>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 800198e:	2309      	movs	r3, #9
 8001990:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001994:	e02a      	b.n	80019ec <commandReply+0x278>
	case CMD_KEY_SPEED:
		sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
 8001996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800199a:	461a      	mov	r2, r3
 800199c:	4920      	ldr	r1, [pc, #128]	; (8001a20 <commandReply+0x2ac>)
 800199e:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80019a2:	f014 fed1 	bl	8016748 <siprintf>
		ret = RPD_OK;
 80019a6:	2308      	movs	r3, #8
 80019a8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80019ac:	e01e      	b.n	80019ec <commandReply+0x278>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 80019ae:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <commandReply+0x2b0>)
 80019b4:	461d      	mov	r5, r3
 80019b6:	4614      	mov	r4, r2
 80019b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ba:	6028      	str	r0, [r5, #0]
 80019bc:	6069      	str	r1, [r5, #4]
 80019be:	60aa      	str	r2, [r5, #8]
 80019c0:	60eb      	str	r3, [r5, #12]
 80019c2:	7823      	ldrb	r3, [r4, #0]
 80019c4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80019c6:	2307      	movs	r3, #7
 80019c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80019cc:	e00e      	b.n	80019ec <commandReply+0x278>
	default:
		strcpy( (char *)detail, "Unknown command");
 80019ce:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <commandReply+0x2b4>)
 80019d4:	461c      	mov	r4, r3
 80019d6:	4615      	mov	r5, r2
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	6020      	str	r0, [r4, #0]
 80019dc:	6061      	str	r1, [r4, #4]
 80019de:	60a2      	str	r2, [r4, #8]
 80019e0:	60e3      	str	r3, [r4, #12]
		ret = RPD_ERROR;
 80019e2:	2307      	movs	r3, #7
 80019e4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80019e8:	e000      	b.n	80019ec <commandReply+0x278>
		break;
 80019ea:	bf00      	nop
	}
	return ret;
 80019ec:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	37c8      	adds	r7, #200	; 0xc8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019fa:	b002      	add	sp, #8
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0801b754 	.word	0x0801b754
 8001a04:	0801b760 	.word	0x0801b760
 8001a08:	0801b76c 	.word	0x0801b76c
 8001a0c:	0801b778 	.word	0x0801b778
 8001a10:	0801b784 	.word	0x0801b784
 8001a14:	20000cac 	.word	0x20000cac
 8001a18:	0801b790 	.word	0x0801b790
 8001a1c:	0801b798 	.word	0x0801b798
 8001a20:	0801b7a4 	.word	0x0801b7a4
 8001a24:	0801b7b8 	.word	0x0801b7b8
 8001a28:	0801b7cc 	.word	0x0801b7cc

08001a2c <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d836      	bhi.n	8001ab0 <commandRespond+0x84>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <commandRespond+0x1c>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a6d 	.word	0x08001a6d
 8001a4c:	08001a6d 	.word	0x08001a6d
 8001a50:	08001a93 	.word	0x08001a93
 8001a54:	08001a93 	.word	0x08001a93
 8001a58:	08001a93 	.word	0x08001a93
 8001a5c:	08001a93 	.word	0x08001a93
 8001a60:	08001a93 	.word	0x08001a93
 8001a64:	08001a93 	.word	0x08001a93
 8001a68:	08001a93 	.word	0x08001a93
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001a6c:	f007 fb36 	bl	80090dc <scaraIsScanLimit>
 8001a70:	4603      	mov	r3, r0
 8001a72:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <commandRespond+0x94>)
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	7cfa      	ldrb	r2, [r7, #19]
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <commandRespond+0x98>)
 8001a86:	2114      	movs	r1, #20
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f014 fe29 	bl	80166e0 <sniprintf>
 8001a8e:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001a90:	e010      	b.n	8001ab4 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <commandRespond+0x94>)
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <commandRespond+0x9c>)
 8001aa4:	2191      	movs	r1, #145	; 0x91
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f014 fe1a 	bl	80166e0 <sniprintf>
 8001aac:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001aae:	e001      	b.n	8001ab4 <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001ab4:	697b      	ldr	r3, [r7, #20]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000054 	.word	0x20000054
 8001ac4:	0801b7dc 	.word	0x0801b7dc
 8001ac8:	0801b7e8 	.word	0x0801b7e8

08001acc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	f107 0008 	add.w	r0, r7, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <LOG_REPORT+0x78>)
 8001ae6:	213f      	movs	r1, #63	; 0x3f
 8001ae8:	f014 fdfa 	bl	80166e0 <sniprintf>
 8001aec:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d101      	bne.n	8001afa <LOG_REPORT+0x2e>
		return FALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e01f      	b.n	8001b3a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <LOG_REPORT+0x7c>)
 8001b04:	f002 f873 	bl	8003bee <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <LOG_REPORT+0x80>)
 8001b0a:	f009 fe03 	bl	800b714 <HAL_DMA_GetState>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d101      	bne.n	8001b18 <LOG_REPORT+0x4c>
		return TRUE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e010      	b.n	8001b3a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <LOG_REPORT+0x84>)
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <LOG_REPORT+0x7c>)
 8001b20:	f002 f88d 	bl	8003c3e <ringBuff_PopArray>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <LOG_REPORT+0x84>)
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <LOG_REPORT+0x88>)
 8001b34:	f00c fa00 	bl	800df38 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3750      	adds	r7, #80	; 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0801b7f4 	.word	0x0801b7f4
 8001b48:	20000894 	.word	0x20000894
 8001b4c:	20006178 	.word	0x20006178
 8001b50:	2000520c 	.word	0x2000520c
 8001b54:	20006138 	.word	0x20006138

08001b58 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b090      	sub	sp, #64	; 0x40
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	ed87 0b00 	vstr	d0, [r7]
 8001b64:	460b      	mov	r3, r1
 8001b66:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d901      	bls.n	8001b72 <double2string+0x1a>
		precision = 6;
 8001b6e:	2306      	movs	r3, #6
 8001b70:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b7e:	f7fe ffbd 	bl	8000afc <__aeabi_dcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <double2string+0x38>
		sign = -1;
 8001b88:	23ff      	movs	r3, #255	; 0xff
 8001b8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b8e:	e002      	b.n	8001b96 <double2string+0x3e>
	} else {
		sign = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 8001b96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcd2 	bl	8000544 <__aeabi_i2d>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bac:	f7fe fd34 	bl	8000618 <__aeabi_dmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001bb8:	a307      	add	r3, pc, #28	; (adr r3, 8001bd8 <double2string+0x80>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bc2:	f7fe ffb9 	bl	8000b38 <__aeabi_dcmpgt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <double2string+0x88>
		return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e265      	b.n	800209e <double2string+0x546>
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be4:	f7fe ffc8 	bl	8000b78 <__aeabi_d2iz>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4acf      	ldr	r2, [pc, #828]	; (8001f28 <double2string+0x3d0>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	1192      	asrs	r2, r2, #6
 8001bf2:	17db      	asrs	r3, r3, #31
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 8001bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfe:	f7fe ffbb 	bl	8000b78 <__aeabi_d2iz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4ac9      	ldr	r2, [pc, #804]	; (8001f2c <double2string+0x3d4>)
 8001c06:	fb82 1203 	smull	r1, r2, r2, r3
 8001c0a:	1152      	asrs	r2, r2, #5
 8001c0c:	17db      	asrs	r3, r3, #31
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	7f3b      	ldrb	r3, [r7, #28]
 8001c14:	4619      	mov	r1, r3
 8001c16:	0149      	lsls	r1, r1, #5
 8001c18:	1ac9      	subs	r1, r1, r3
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	f7fe ffa4 	bl	8000b78 <__aeabi_d2iz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4abf      	ldr	r2, [pc, #764]	; (8001f30 <double2string+0x3d8>)
 8001c34:	fb82 1203 	smull	r1, r2, r2, r3
 8001c38:	1092      	asrs	r2, r2, #2
 8001c3a:	17db      	asrs	r3, r3, #31
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	7f7b      	ldrb	r3, [r7, #29]
 8001c42:	4619      	mov	r1, r3
 8001c44:	0149      	lsls	r1, r1, #5
 8001c46:	1ac9      	subs	r1, r1, r3
 8001c48:	0089      	lsls	r1, r1, #2
 8001c4a:	1acb      	subs	r3, r1, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	7f3b      	ldrb	r3, [r7, #28]
 8001c52:	4618      	mov	r0, r3
 8001c54:	0080      	lsls	r0, r0, #2
 8001c56:	4418      	add	r0, r3
 8001c58:	00c0      	lsls	r0, r0, #3
 8001c5a:	1ac3      	subs	r3, r0, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	440b      	add	r3, r1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6e:	f7fe ff83 	bl	8000b78 <__aeabi_d2iz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	7f7b      	ldrb	r3, [r7, #29]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	0089      	lsls	r1, r1, #2
 8001c7c:	4419      	add	r1, r3
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	1acb      	subs	r3, r1, r3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	b2d9      	uxtb	r1, r3
 8001c86:	7f3b      	ldrb	r3, [r7, #28]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	0040      	lsls	r0, r0, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	440b      	add	r3, r1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	7fbb      	ldrb	r3, [r7, #30]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	0149      	lsls	r1, r1, #5
 8001ca0:	1ac9      	subs	r1, r1, r3
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001cb0:	7f3b      	ldrb	r3, [r7, #28]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	fb03 f302 	mul.w	r3, r3, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc41 	bl	8000544 <__aeabi_i2d>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cce:	f7fe faeb 	bl	80002a8 <__aeabi_dsub>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4625      	mov	r5, r4
 8001cd8:	461c      	mov	r4, r3
 8001cda:	7f7b      	ldrb	r3, [r7, #29]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	fb03 f302 	mul.w	r3, r3, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc2d 	bl	8000544 <__aeabi_i2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	f7fe fad9 	bl	80002a8 <__aeabi_dsub>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	4625      	mov	r5, r4
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	7fbb      	ldrb	r3, [r7, #30]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc1a 	bl	8000544 <__aeabi_i2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fac6 	bl	80002a8 <__aeabi_dsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4625      	mov	r5, r4
 8001d22:	461c      	mov	r4, r3
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc0c 	bl	8000544 <__aeabi_i2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fab8 	bl	80002a8 <__aeabi_dsub>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <double2string+0x3dc>)
 8001d46:	f7fe fc67 	bl	8000618 <__aeabi_dmul>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d56:	f7fe ff0f 	bl	8000b78 <__aeabi_d2iz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a73      	ldr	r2, [pc, #460]	; (8001f2c <double2string+0x3d4>)
 8001d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d62:	1152      	asrs	r2, r2, #5
 8001d64:	17db      	asrs	r3, r3, #31
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001d6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d70:	f7fe ff02 	bl	8000b78 <__aeabi_d2iz>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <double2string+0x3d8>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	1092      	asrs	r2, r2, #2
 8001d7e:	17db      	asrs	r3, r3, #31
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	7d3b      	ldrb	r3, [r7, #20]
 8001d86:	4619      	mov	r1, r3
 8001d88:	0149      	lsls	r1, r1, #5
 8001d8a:	1ac9      	subs	r1, r1, r3
 8001d8c:	0089      	lsls	r1, r1, #2
 8001d8e:	1acb      	subs	r3, r1, r3
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d9e:	f7fe feeb 	bl	8000b78 <__aeabi_d2iz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	7d7b      	ldrb	r3, [r7, #21]
 8001da8:	4619      	mov	r1, r3
 8001daa:	0149      	lsls	r1, r1, #5
 8001dac:	1ac9      	subs	r1, r1, r3
 8001dae:	0089      	lsls	r1, r1, #2
 8001db0:	1acb      	subs	r3, r1, r3
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b2d9      	uxtb	r1, r3
 8001db6:	7d3b      	ldrb	r3, [r7, #20]
 8001db8:	4618      	mov	r0, r3
 8001dba:	0080      	lsls	r0, r0, #2
 8001dbc:	4418      	add	r0, r3
 8001dbe:	00c0      	lsls	r0, r0, #3
 8001dc0:	1ac3      	subs	r3, r0, r3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	fb03 f302 	mul.w	r3, r3, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbb2 	bl	8000544 <__aeabi_i2d>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	461a      	mov	r2, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dec:	f7fe fa5c 	bl	80002a8 <__aeabi_dsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	4625      	mov	r5, r4
 8001df6:	461c      	mov	r4, r3
 8001df8:	7d7b      	ldrb	r3, [r7, #21]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9d 	bl	8000544 <__aeabi_i2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fa49 	bl	80002a8 <__aeabi_dsub>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	4625      	mov	r5, r4
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb8f 	bl	8000544 <__aeabi_i2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa3b 	bl	80002a8 <__aeabi_dsub>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <double2string+0x3dc>)
 8001e40:	f7fe fbea 	bl	8000618 <__aeabi_dmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e50:	f7fe fe92 	bl	8000b78 <__aeabi_d2iz>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <double2string+0x3d4>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1152      	asrs	r2, r2, #5
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001e66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e6a:	f7fe fe85 	bl	8000b78 <__aeabi_d2iz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <double2string+0x3d8>)
 8001e72:	fb82 1203 	smull	r1, r2, r2, r3
 8001e76:	1092      	asrs	r2, r2, #2
 8001e78:	17db      	asrs	r3, r3, #31
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	4619      	mov	r1, r3
 8001e82:	0149      	lsls	r1, r1, #5
 8001e84:	1ac9      	subs	r1, r1, r3
 8001e86:	0089      	lsls	r1, r1, #2
 8001e88:	1acb      	subs	r3, r1, r3
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	f7fe fe6e 	bl	8000b78 <__aeabi_d2iz>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7e3b      	ldrb	r3, [r7, #24]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	0149      	lsls	r1, r1, #5
 8001ea6:	1ac9      	subs	r1, r1, r3
 8001ea8:	0089      	lsls	r1, r1, #2
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	b2d9      	uxtb	r1, r3
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	0080      	lsls	r0, r0, #2
 8001eb6:	4418      	add	r0, r3
 8001eb8:	00c0      	lsls	r0, r0, #3
 8001eba:	1ac3      	subs	r3, r0, r3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fb03 f302 	mul.w	r3, r3, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb34 	bl	8000544 <__aeabi_i2d>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ee8:	f7fe f9de 	bl	80002a8 <__aeabi_dsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	4625      	mov	r5, r4
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	7e3b      	ldrb	r3, [r7, #24]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	fb03 f302 	mul.w	r3, r3, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb20 	bl	8000544 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9cc 	bl	80002a8 <__aeabi_dsub>
 8001f10:	4603      	mov	r3, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	4625      	mov	r5, r4
 8001f16:	461c      	mov	r4, r3
 8001f18:	7e7b      	ldrb	r3, [r7, #25]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fb12 	bl	8000544 <__aeabi_i2d>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	e008      	b.n	8001f38 <double2string+0x3e0>
 8001f26:	bf00      	nop
 8001f28:	10624dd3 	.word	0x10624dd3
 8001f2c:	51eb851f 	.word	0x51eb851f
 8001f30:	66666667 	.word	0x66666667
 8001f34:	408f4000 	.word	0x408f4000
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f9b4 	bl	80002a8 <__aeabi_dsub>
 8001f40:	4603      	mov	r3, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	4618      	mov	r0, r3
 8001f46:	4621      	mov	r1, r4
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <double2string+0x550>)
 8001f4e:	f7fe fde9 	bl	8000b24 <__aeabi_dcmpge>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <double2string+0x408>
		le[5]++;
 8001f58:	7e7b      	ldrb	r3, [r7, #25]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001f64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d107      	bne.n	8001f7e <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	222d      	movs	r2, #45	; 0x2d
 8001f7c:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <double2string+0x554>)
 8001f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f88:	f7fe fdb8 	bl	8000afc <__aeabi_dcmplt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <double2string+0x44c>
		*(result + index++) = 0x30;
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e04b      	b.n	800203c <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001faa:	e027      	b.n	8001ffc <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001fac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fb0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d017      	beq.n	8001fee <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001fbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fce:	1c59      	adds	r1, r3, #1
 8001fd0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3230      	adds	r2, #48	; 0x30
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
				i++;
 8001fde:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001fec:	e00a      	b.n	8002004 <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001fee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ffc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002000:	2b03      	cmp	r3, #3
 8002002:	ddd3      	ble.n	8001fac <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8002004:	e016      	b.n	8002034 <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8002006:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800200a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800200e:	4413      	add	r3, r2
 8002010:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	63b9      	str	r1, [r7, #56]	; 0x38
 800201a:	4619      	mov	r1, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	440b      	add	r3, r1
 8002020:	3230      	adds	r2, #48	; 0x30
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8002026:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002034:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002038:	2b03      	cmp	r3, #3
 800203a:	dde4      	ble.n	8002006 <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	63ba      	str	r2, [r7, #56]	; 0x38
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	222e      	movs	r2, #46	; 0x2e
 800204a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002052:	e016      	b.n	8002082 <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8002054:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002058:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800205c:	4413      	add	r3, r2
 800205e:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	63b9      	str	r1, [r7, #56]	; 0x38
 8002068:	4619      	mov	r1, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	440b      	add	r3, r1
 800206e:	3230      	adds	r2, #48	; 0x30
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8002074:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3301      	adds	r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002082:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbe3      	blt.n	8002054 <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	63ba      	str	r2, [r7, #56]	; 0x38
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
	return index;
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3740      	adds	r7, #64	; 0x40
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdb0      	pop	{r4, r5, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	3fe00000 	.word	0x3fe00000
 80020ac:	3ff00000 	.word	0x3ff00000

080020b0 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	466b      	mov	r3, sp
 80020be:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <packPayload+0x1c>
		return -1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e056      	b.n	800217a <packPayload+0xca>
	}

	if (NULL == output_buff) {
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <packPayload+0x28>
		return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e050      	b.n	800217a <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3302      	adds	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	4603      	mov	r3, r0
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	f04f 0400 	mov.w	r4, #0
 80020f8:	00d4      	lsls	r4, r2, #3
 80020fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020fe:	00cb      	lsls	r3, r1, #3
 8002100:	4603      	mov	r3, r0
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	00d4      	lsls	r4, r2, #3
 8002112:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002116:	00cb      	lsls	r3, r1, #3
 8002118:	4603      	mov	r3, r0
 800211a:	3307      	adds	r3, #7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	ebad 0d03 	sub.w	sp, sp, r3
 8002124:	466b      	mov	r3, sp
 8002126:	3300      	adds	r3, #0
 8002128:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	61ba      	str	r2, [r7, #24]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	2128      	movs	r1, #40	; 0x28
 8002138:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e00b      	b.n	8002158 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	441a      	add	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1c59      	adds	r1, r3, #1
 800214a:	61b9      	str	r1, [r7, #24]
 800214c:	7811      	ldrb	r1, [r2, #0]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbef      	blt.n	8002140 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	61ba      	str	r2, [r7, #24]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	2129      	movs	r1, #41	; 0x29
 800216a:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4619      	mov	r1, r3
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f013 fb97 	bl	80158a6 <memmove>

	return out_lenght;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	46ad      	mov	sp, r5
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bdb0      	pop	{r4, r5, r7, pc}

08002184 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	466b      	mov	r3, sp
 8002190:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b05      	cmp	r3, #5
 8002196:	dc02      	bgt.n	800219e <unPackPayload+0x1a>
		return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e063      	b.n	8002266 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b28      	cmp	r3, #40	; 0x28
 80021a4:	d106      	bne.n	80021b4 <unPackPayload+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b29      	cmp	r3, #41	; 0x29
 80021b2:	d002      	beq.n	80021ba <unPackPayload+0x36>
		return -1;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	e055      	b.n	8002266 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3b02      	subs	r3, #2
 80021be:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 80021c0:	6938      	ldr	r0, [r7, #16]
 80021c2:	1e43      	subs	r3, r0, #1
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4603      	mov	r3, r0
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	00d4      	lsls	r4, r2, #3
 80021d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	00d4      	lsls	r4, r2, #3
 80021f0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021f4:	00cb      	lsls	r3, r1, #3
 80021f6:	4603      	mov	r3, r0
 80021f8:	3307      	adds	r3, #7
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002202:	466b      	mov	r3, sp
 8002204:	3300      	adds	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e017      	b.n	8002242 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b28      	cmp	r3, #40	; 0x28
 800221c:	d00e      	beq.n	800223c <unPackPayload+0xb8>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b29      	cmp	r3, #41	; 0x29
 8002228:	d008      	beq.n	800223c <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	441a      	add	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	6139      	str	r1, [r7, #16]
 8002236:	7811      	ldrb	r1, [r2, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbe2      	blt.n	8002212 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	2100      	movs	r1, #0
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f013 fb40 	bl	80158d8 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f013 fb21 	bl	80158a6 <memmove>

	return out_lenght;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	46ad      	mov	sp, r5
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bdb0      	pop	{r4, r5, r7, pc}

08002270 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_DMA_Init+0x3c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <MX_DMA_Init+0x3c>)
 8002280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_DMA_Init+0x3c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2105      	movs	r1, #5
 8002296:	200f      	movs	r0, #15
 8002298:	f008 ff60 	bl	800b15c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f008 ff79 	bl	800b194 <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <vApplicationGetIdleTaskMemory+0x2c>)
 80022c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <vApplicationGetIdleTaskMemory+0x30>)
 80022c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20001054 	.word	0x20001054
 80022e0:	200010a8 	.word	0x200010a8

080022e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 80022ea:	2300      	movs	r3, #0
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ee:	2300      	movs	r3, #0
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80022f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00f fcd6 	bl	8011ca8 <osMutexCreate>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_FREERTOS_Init+0x90>)
 8002300:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002302:	2301      	movs	r3, #1
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
 8002306:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00f fe61 	bl	8011fe0 <osMailCreate>
 800231e:	4602      	mov	r2, r0
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_FREERTOS_Init+0x94>)
 8002322:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_FREERTOS_Init+0x98>)
 8002326:	f107 041c 	add.w	r4, r7, #28
 800232a:	461d      	mov	r5, r3
 800232c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f00f fbc5 	bl	8011ace <osThreadCreate>
 8002344:	4602      	mov	r2, r0
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_FREERTOS_Init+0x9c>)
 8002348:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_FREERTOS_Init+0xa0>)
 800234c:	463c      	mov	r4, r7
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 800235c:	463b      	mov	r3, r7
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00f fbb4 	bl	8011ace <osThreadCreate>
 8002366:	4602      	mov	r2, r0
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <MX_FREERTOS_Init+0xa4>)
 800236a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800236c:	bf00      	nop
 800236e:	3750      	adds	r7, #80	; 0x50
 8002370:	46bd      	mov	sp, r7
 8002372:	bdb0      	pop	{r4, r5, r7, pc}
 8002374:	20005310 	.word	0x20005310
 8002378:	20005314 	.word	0x20005314
 800237c:	0801b80c 	.word	0x0801b80c
 8002380:	2000530c 	.word	0x2000530c
 8002384:	0801b838 	.word	0x0801b838
 8002388:	20005318 	.word	0x20005318
 800238c:	00000000 	.word	0x00000000

08002390 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	ed2d 8b02 	vpush	{d8}
 8002396:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800239a:	af66      	add	r7, sp, #408	; 0x198
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023a2:	f012 fcfb 	bl	8014d9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80023a6:	2201      	movs	r2, #1
 80023a8:	2110      	movs	r1, #16
 80023aa:	48d3      	ldr	r0, [pc, #844]	; (80026f8 <StartDefaultTask+0x368>)
 80023ac:	f009 fc38 	bl	800bc20 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  int32_t					current_key_speed;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80023b6:	21cd      	movs	r1, #205	; 0xcd
 80023b8:	48d0      	ldr	r0, [pc, #832]	; (80026fc <StartDefaultTask+0x36c>)
 80023ba:	f7ff fb87 	bl	8001acc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80023be:	f006 fe75 	bl	80090ac <scaraGetMethod>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
  current_mode	 = scaraGetMode();
 80023c8:	f006 fe64 	bl	8009094 <scaraGetMode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
  current_duty_state	 = scaraGetDutyState();
 80023d2:	f006 fe77 	bl	80090c4 <scaraGetDutyState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9

  // Start up robot
  scaraStartup();
 80023dc:	f002 faa8 	bl	8004930 <scaraStartup>
  osDelay(10);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f00f fbc0 	bl	8011b66 <osDelay>

  positionNext.Theta1 = -PI/3;
 80023e6:	4ac6      	ldr	r2, [pc, #792]	; (8002700 <StartDefaultTask+0x370>)
 80023e8:	a4bf      	add	r4, pc, #764	; (adr r4, 80026e8 <StartDefaultTask+0x358>)
 80023ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023ee:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 80023f2:	4ac3      	ldr	r2, [pc, #780]	; (8002700 <StartDefaultTask+0x370>)
 80023f4:	a4be      	add	r4, pc, #760	; (adr r4, 80026f0 <StartDefaultTask+0x360>)
 80023f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023fa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 80023fe:	4ac0      	ldr	r2, [pc, #768]	; (8002700 <StartDefaultTask+0x370>)
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	4cbf      	ldr	r4, [pc, #764]	; (8002704 <StartDefaultTask+0x374>)
 8002406:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 800240a:	4abd      	ldr	r2, [pc, #756]	; (8002700 <StartDefaultTask+0x370>)
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002418:	4ab9      	ldr	r2, [pc, #740]	; (8002700 <StartDefaultTask+0x370>)
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 8002426:	48b6      	ldr	r0, [pc, #728]	; (8002700 <StartDefaultTask+0x370>)
 8002428:	f000 ff9e 	bl	8003368 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800242c:	48b6      	ldr	r0, [pc, #728]	; (8002708 <StartDefaultTask+0x378>)
 800242e:	f00b fab0 	bl	800d992 <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002432:	463b      	mov	r3, r7
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f00f fbe8 	bl	8011c10 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
	  respond_packed_lenght = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  infor_lenght			= 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	  infor_packed_lenght	= 0;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  task_usb_lenght		= 0;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	  usb_lenght			= 0;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002464:	4aa9      	ldr	r2, [pc, #676]	; (800270c <StartDefaultTask+0x37c>)
 8002466:	4baa      	ldr	r3, [pc, #680]	; (8002710 <StartDefaultTask+0x380>)
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	23b8      	movs	r3, #184	; 0xb8
 800246e:	461a      	mov	r2, r3
 8002470:	f013 fa0e 	bl	8015890 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002474:	4aa6      	ldr	r2, [pc, #664]	; (8002710 <StartDefaultTask+0x380>)
 8002476:	4ba2      	ldr	r3, [pc, #648]	; (8002700 <StartDefaultTask+0x370>)
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	23b8      	movs	r3, #184	; 0xb8
 800247e:	461a      	mov	r2, r3
 8002480:	f013 fa06 	bl	8015890 <memcpy>
		  positionTrue.q = positionCurrent.q;
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002484:	4ba3      	ldr	r3, [pc, #652]	; (8002714 <StartDefaultTask+0x384>)
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 800248c:	2200      	movs	r2, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f00f fe52 	bl	8012138 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002494:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8002498:	2b20      	cmp	r3, #32
 800249a:	d116      	bne.n	80024ca <StartDefaultTask+0x13a>
		   dataMail = ret_mail.value.p;
 800249c:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 80024a0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80024a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024a8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80024ac:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80024b0:	4618      	mov	r0, r3
 80024b2:	f013 f9ed 	bl	8015890 <memcpy>
		   isNewDuty = TRUE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80024bc:	4b95      	ldr	r3, [pc, #596]	; (8002714 <StartDefaultTask+0x384>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00f feab 	bl	8012220 <osMailFree>
	  }
	  if(isNewDuty) {
 80024ca:	f897 360f 	ldrb.w	r3, [r7, #1551]	; 0x60f
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8159 	beq.w	8002786 <StartDefaultTask+0x3f6>
		  memset(respond, 0, 40);
 80024d4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80024d8:	2228      	movs	r2, #40	; 0x28
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f013 f9fb 	bl	80158d8 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 80024e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d13c      	bne.n	8002566 <StartDefaultTask+0x1d6>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 80024ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10e      	bne.n	8002514 <StartDefaultTask+0x184>
				  current_method = SCARA_METHOD_MANUAL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 80024fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002506:	4a84      	ldr	r2, [pc, #528]	; (8002718 <StartDefaultTask+0x388>)
 8002508:	2008      	movs	r0, #8
 800250a:	f7ff fa8f 	bl	8001a2c <commandRespond>
 800250e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002512:	e135      	b.n	8002780 <StartDefaultTask+0x3f0>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002514:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <StartDefaultTask+0x1ac>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002524:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800252e:	4a7b      	ldr	r2, [pc, #492]	; (800271c <StartDefaultTask+0x38c>)
 8002530:	2008      	movs	r0, #8
 8002532:	f7ff fa7b 	bl	8001a2c <commandRespond>
 8002536:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 800253a:	e121      	b.n	8002780 <StartDefaultTask+0x3f0>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 800253c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b02      	cmp	r3, #2
 8002544:	f040 811c 	bne.w	8002780 <StartDefaultTask+0x3f0>
				  current_method = SCARA_METHOD_AUTO;
 8002548:	2302      	movs	r3, #2
 800254a:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 800254e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002558:	4a71      	ldr	r2, [pc, #452]	; (8002720 <StartDefaultTask+0x390>)
 800255a:	2008      	movs	r0, #8
 800255c:	f7ff fa66 	bl	8001a2c <commandRespond>
 8002560:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002564:	e10c      	b.n	8002780 <StartDefaultTask+0x3f0>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002566:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	f897 25fb 	ldrb.w	r2, [r7, #1531]	; 0x5fb
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 80f6 	bne.w	8002762 <StartDefaultTask+0x3d2>
				  	  switch( duty_cmd.robot_method) {
 8002576:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d030      	beq.n	80025e2 <StartDefaultTask+0x252>
 8002580:	2b02      	cmp	r3, #2
 8002582:	f000 80fa 	beq.w	800277a <StartDefaultTask+0x3ea>
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80e5 	bne.w	8002756 <StartDefaultTask+0x3c6>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 800258c:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <StartDefaultTask+0x220>
				  			  current_key = duty_cmd.keyboard;
 8002594:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002598:	78db      	ldrb	r3, [r3, #3]
 800259a:	f887 35f6 	strb.w	r3, [r7, #1526]	; 0x5f6
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  			  current_key_speed = duty_cmd.key_speed;
 80025a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80025ae:	e0e6      	b.n	800277e <StartDefaultTask+0x3ee>
				  		  } else if (current_key == duty_cmd.keyboard
 80025b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025b4:	78db      	ldrb	r3, [r3, #3]
 80025b6:	f897 25f6 	ldrb.w	r2, [r7, #1526]	; 0x5f6
 80025ba:	429a      	cmp	r2, r3
 80025bc:	f040 80df 	bne.w	800277e <StartDefaultTask+0x3ee>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80025c0:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f040 80da 	bne.w	800277e <StartDefaultTask+0x3ee>
									  && current_key_speed == duty_cmd.key_speed) {
 80025ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 80d2 	bne.w	800277e <StartDefaultTask+0x3ee>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  	  break;
 80025e0:	e0cd      	b.n	800277e <StartDefaultTask+0x3ee>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80025e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d018      	beq.n	800261e <StartDefaultTask+0x28e>
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d041      	beq.n	8002674 <StartDefaultTask+0x2e4>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 80a9 	bne.w	8002748 <StartDefaultTask+0x3b8>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
								  respond_lenght = commandRespond(RPD_OK,
 80025fc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002606:	4a47      	ldr	r2, [pc, #284]	; (8002724 <StartDefaultTask+0x394>)
 8002608:	2008      	movs	r0, #8
 800260a:	f7ff fa0f 	bl	8001a2c <commandRespond>
 800260e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002612:	f240 1133 	movw	r1, #307	; 0x133
 8002616:	4844      	ldr	r0, [pc, #272]	; (8002728 <StartDefaultTask+0x398>)
 8002618:	f7ff fa58 	bl	8001acc <LOG_REPORT>
							  }
							  break;
 800261c:	e09a      	b.n	8002754 <StartDefaultTask+0x3c4>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 800261e:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002622:	2b02      	cmp	r3, #2
 8002624:	d115      	bne.n	8002652 <StartDefaultTask+0x2c2>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002626:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 800262a:	2b00      	cmp	r3, #0
 800262c:	d111      	bne.n	8002652 <StartDefaultTask+0x2c2>
									  current_mode = SCARA_MODE_SCAN;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
									  respond_lenght = commandRespond(RPD_OK,
 800263a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <StartDefaultTask+0x39c>)
 8002646:	2008      	movs	r0, #8
 8002648:	f7ff f9f0 	bl	8001a2c <commandRespond>
 800264c:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002650:	e080      	b.n	8002754 <StartDefaultTask+0x3c4>
									  respond_lenght = commandRespond(RPD_ERROR,
 8002652:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800265c:	4a34      	ldr	r2, [pc, #208]	; (8002730 <StartDefaultTask+0x3a0>)
 800265e:	2007      	movs	r0, #7
 8002660:	f7ff f9e4 	bl	8001a2c <commandRespond>
 8002664:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002668:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800266c:	4831      	ldr	r0, [pc, #196]	; (8002734 <StartDefaultTask+0x3a4>)
 800266e:	f7ff fa2d 	bl	8001acc <LOG_REPORT>
							  break;
 8002672:	e06f      	b.n	8002754 <StartDefaultTask+0x3c4>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002674:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002678:	2b02      	cmp	r3, #2
 800267a:	d120      	bne.n	80026be <StartDefaultTask+0x32e>
 800267c:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11c      	bne.n	80026be <StartDefaultTask+0x32e>
									  if (scaraIsScanLimit()) {
 8002684:	f006 fd2a 	bl	80090dc <scaraIsScanLimit>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <StartDefaultTask+0x30c>
										  current_mode	 = SCARA_MODE_DUTY;
 800268e:	2302      	movs	r3, #2
 8002690:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
									  if (scaraIsScanLimit()) {
 800269a:	e021      	b.n	80026e0 <StartDefaultTask+0x350>
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 800269c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <StartDefaultTask+0x3a8>)
 80026a8:	2007      	movs	r0, #7
 80026aa:	f7ff f9bf 	bl	8001a2c <commandRespond>
 80026ae:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80026b2:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80026b6:	4821      	ldr	r0, [pc, #132]	; (800273c <StartDefaultTask+0x3ac>)
 80026b8:	f7ff fa08 	bl	8001acc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 80026bc:	e010      	b.n	80026e0 <StartDefaultTask+0x350>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 80026be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <StartDefaultTask+0x3b0>)
 80026ca:	2007      	movs	r0, #7
 80026cc:	f7ff f9ae 	bl	8001a2c <commandRespond>
 80026d0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80026d4:	f240 115d 	movw	r1, #349	; 0x15d
 80026d8:	481a      	ldr	r0, [pc, #104]	; (8002744 <StartDefaultTask+0x3b4>)
 80026da:	f7ff f9f7 	bl	8001acc <LOG_REPORT>
								  }
							  }
							  break;
 80026de:	e039      	b.n	8002754 <StartDefaultTask+0x3c4>
 80026e0:	e038      	b.n	8002754 <StartDefaultTask+0x3c4>
 80026e2:	bf00      	nop
 80026e4:	f3af 8000 	nop.w
 80026e8:	40000000 	.word	0x40000000
 80026ec:	bff0c152 	.word	0xbff0c152
 80026f0:	40000000 	.word	0x40000000
 80026f4:	3ff0c152 	.word	0x3ff0c152
 80026f8:	40020400 	.word	0x40020400
 80026fc:	0801b854 	.word	0x0801b854
 8002700:	20006000 	.word	0x20006000
 8002704:	40240000 	.word	0x40240000
 8002708:	200060f8 	.word	0x200060f8
 800270c:	20005d20 	.word	0x20005d20
 8002710:	20005e90 	.word	0x20005e90
 8002714:	20005314 	.word	0x20005314
 8002718:	0801b874 	.word	0x0801b874
 800271c:	0801b88c 	.word	0x0801b88c
 8002720:	0801b8a8 	.word	0x0801b8a8
 8002724:	0801b8bc 	.word	0x0801b8bc
 8002728:	0801b8c8 	.word	0x0801b8c8
 800272c:	0801b8d8 	.word	0x0801b8d8
 8002730:	0801b8e4 	.word	0x0801b8e4
 8002734:	0801b8ec 	.word	0x0801b8ec
 8002738:	0801b8fc 	.word	0x0801b8fc
 800273c:	0801b910 	.word	0x0801b910
 8002740:	0801b924 	.word	0x0801b924
 8002744:	0801b92c 	.word	0x0801b92c
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002748:	f240 1163 	movw	r1, #355	; 0x163
 800274c:	48c0      	ldr	r0, [pc, #768]	; (8002a50 <StartDefaultTask+0x6c0>)
 800274e:	f7ff f9bd 	bl	8001acc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002752:	e015      	b.n	8002780 <StartDefaultTask+0x3f0>
 8002754:	e014      	b.n	8002780 <StartDefaultTask+0x3f0>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002756:	f240 116f 	movw	r1, #367	; 0x16f
 800275a:	48be      	ldr	r0, [pc, #760]	; (8002a54 <StartDefaultTask+0x6c4>)
 800275c:	f7ff f9b6 	bl	8001acc <LOG_REPORT>
 8002760:	e00e      	b.n	8002780 <StartDefaultTask+0x3f0>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 8002762:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800276c:	4aba      	ldr	r2, [pc, #744]	; (8002a58 <StartDefaultTask+0x6c8>)
 800276e:	2007      	movs	r0, #7
 8002770:	f7ff f95c 	bl	8001a2c <commandRespond>
 8002774:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002778:	e002      	b.n	8002780 <StartDefaultTask+0x3f0>
				  	  break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <StartDefaultTask+0x3f0>
				  	  break;
 800277e:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002786:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 800278a:	2b01      	cmp	r3, #1
 800278c:	f000 80dd 	beq.w	800294a <StartDefaultTask+0x5ba>
 8002790:	2b02      	cmp	r3, #2
 8002792:	f000 82ae 	beq.w	8002cf2 <StartDefaultTask+0x962>
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 82ae 	bne.w	8002cf8 <StartDefaultTask+0x968>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800279c:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	f200 82a8 	bhi.w	8002cf6 <StartDefaultTask+0x966>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <StartDefaultTask+0x41c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002947 	.word	0x08002947
 80027b0:	080027bd 	.word	0x080027bd
 80027b4:	08002817 	.word	0x08002817
 80027b8:	08002915 	.word	0x08002915
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, current_key_speed, &run_time) == SCARA_STATUS_OK) {
 80027bc:	f107 0218 	add.w	r2, r7, #24
 80027c0:	f897 35f6 	ldrb.w	r3, [r7, #1526]	; 0x5f6
 80027c4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fdd1 	bl	8009370 <scaraKeyInit>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11c      	bne.n	800280e <StartDefaultTask+0x47e>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
 80027da:	4ca0      	ldr	r4, [pc, #640]	; (8002a5c <StartDefaultTask+0x6cc>)
 80027dc:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80027e0:	4668      	mov	r0, sp
 80027e2:	f104 0308 	add.w	r3, r4, #8
 80027e6:	22b0      	movs	r2, #176	; 0xb0
 80027e8:	4619      	mov	r1, r3
 80027ea:	f013 f851 	bl	8015890 <memcpy>
 80027ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027f2:	4628      	mov	r0, r5
 80027f4:	f006 fcac 	bl	8009150 <scaraPosition2String>
#else
				  scaraPosition2String((char *)position, positionTrue);
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 80027f8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80027fc:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002800:	2100      	movs	r1, #0
 8002802:	2003      	movs	r0, #3
 8002804:	f7ff f912 	bl	8001a2c <commandRespond>
 8002808:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 800280c:	e09c      	b.n	8002948 <StartDefaultTask+0x5b8>
				  current_key_state = SCARA_KEY_STATE_READY;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
		  break;
 8002814:	e098      	b.n	8002948 <StartDefaultTask+0x5b8>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002816:	f107 0318 	add.w	r3, r7, #24
 800281a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281e:	a38a      	add	r3, pc, #552	; (adr r3, 8002a48 <StartDefaultTask+0x6b8>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fd42 	bl	80002ac <__adddf3>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	f107 0218 	add.w	r2, r7, #24
 8002830:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	ed93 7b00 	vldr	d7, [r3]
 800283c:	eeb0 0a47 	vmov.f32	s0, s14
 8002840:	eef0 0a67 	vmov.f32	s1, s15
 8002844:	f006 fc58 	bl	80090f8 <scaraIsFinish>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <StartDefaultTask+0x4c6>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800284e:	2303      	movs	r3, #3
 8002850:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002854:	e078      	b.n	8002948 <StartDefaultTask+0x5b8>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	ed93 8b00 	vldr	d8, [r3]
 800285e:	4c7f      	ldr	r4, [pc, #508]	; (8002a5c <StartDefaultTask+0x6cc>)
 8002860:	4668      	mov	r0, sp
 8002862:	f104 0308 	add.w	r3, r4, #8
 8002866:	22b0      	movs	r2, #176	; 0xb0
 8002868:	4619      	mov	r1, r3
 800286a:	f013 f811 	bl	8015890 <memcpy>
 800286e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002872:	487b      	ldr	r0, [pc, #492]	; (8002a60 <StartDefaultTask+0x6d0>)
 8002874:	eeb0 0a48 	vmov.f32	s0, s16
 8002878:	eef0 0a68 	vmov.f32	s1, s17
 800287c:	f007 fdf6 	bl	800a46c <scaraKeyFlow>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 35e0 	strb.w	r3, [r7, #1504]	; 0x5e0
				  if ( SCARA_STATUS_OK == status) {
 8002886:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12c      	bne.n	80028e8 <StartDefaultTask+0x558>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800288e:	4c73      	ldr	r4, [pc, #460]	; (8002a5c <StartDefaultTask+0x6cc>)
 8002890:	4a73      	ldr	r2, [pc, #460]	; (8002a60 <StartDefaultTask+0x6d0>)
 8002892:	ab2a      	add	r3, sp, #168	; 0xa8
 8002894:	4611      	mov	r1, r2
 8002896:	22b8      	movs	r2, #184	; 0xb8
 8002898:	4618      	mov	r0, r3
 800289a:	f012 fff9 	bl	8015890 <memcpy>
 800289e:	4668      	mov	r0, sp
 80028a0:	f104 0310 	add.w	r3, r4, #16
 80028a4:	22a8      	movs	r2, #168	; 0xa8
 80028a6:	4619      	mov	r1, r3
 80028a8:	f012 fff2 	bl	8015890 <memcpy>
 80028ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028b0:	f001 fcfe 	bl	80042b0 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionCurrent);
 80028b4:	4c69      	ldr	r4, [pc, #420]	; (8002a5c <StartDefaultTask+0x6cc>)
 80028b6:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80028ba:	4668      	mov	r0, sp
 80028bc:	f104 0308 	add.w	r3, r4, #8
 80028c0:	22b0      	movs	r2, #176	; 0xb0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f012 ffe4 	bl	8015890 <memcpy>
 80028c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028cc:	4628      	mov	r0, r5
 80028ce:	f006 fc3f 	bl	8009150 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 80028d2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028d6:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80028da:	2100      	movs	r1, #0
 80028dc:	2004      	movs	r0, #4
 80028de:	f7ff f8a5 	bl	8001a2c <commandRespond>
 80028e2:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
		  break;
 80028e6:	e02f      	b.n	8002948 <StartDefaultTask+0x5b8>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
					  infor_lenght = commandRespond(RPD_STOP,
 80028ee:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
													(char *)DETAIL_STATUS[status],
 80028f2:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <StartDefaultTask+0x6d4>)
 80028f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 80028f8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028fc:	2100      	movs	r1, #0
 80028fe:	2006      	movs	r0, #6
 8002900:	f7ff f894 	bl	8001a2c <commandRespond>
 8002904:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
					  LOG_REPORT("STOP KEY", __LINE__);
 8002908:	f240 11b5 	movw	r1, #437	; 0x1b5
 800290c:	4856      	ldr	r0, [pc, #344]	; (8002a68 <StartDefaultTask+0x6d8>)
 800290e:	f7ff f8dd 	bl	8001acc <LOG_REPORT>
		  break;
 8002912:	e019      	b.n	8002948 <StartDefaultTask+0x5b8>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
			  positionNext.t = 0;
 800291a:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <StartDefaultTask+0x6d0>)
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f04f 0400 	mov.w	r4, #0
 8002924:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002928:	4a4d      	ldr	r2, [pc, #308]	; (8002a60 <StartDefaultTask+0x6d0>)
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <StartDefaultTask+0x6d0>)
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f04f 0400 	mov.w	r4, #0
 8002940:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002944:	e000      	b.n	8002948 <StartDefaultTask+0x5b8>
		  break;
 8002946:	bf00      	nop
		  }
	  }
	  break;
 8002948:	e1d5      	b.n	8002cf6 <StartDefaultTask+0x966>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 800294a:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00b      	beq.n	800296a <StartDefaultTask+0x5da>
 8002952:	2b02      	cmp	r3, #2
 8002954:	d063      	beq.n	8002a1e <StartDefaultTask+0x68e>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 81c4 	bne.w	8002ce4 <StartDefaultTask+0x954>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 800295c:	2302      	movs	r3, #2
 800295e:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
			  }
			  break;
 8002968:	e1c2      	b.n	8002cf0 <StartDefaultTask+0x960>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800296a:	f897 35f8 	ldrb.w	r3, [r7, #1528]	; 0x5f8
 800296e:	2b03      	cmp	r3, #3
 8002970:	d84b      	bhi.n	8002a0a <StartDefaultTask+0x67a>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <StartDefaultTask+0x5e8>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002989 	.word	0x08002989
 800297c:	08002995 	.word	0x08002995
 8002980:	080029a7 	.word	0x080029a7
 8002984:	080029bb 	.word	0x080029bb
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002988:	f001 f9d6 	bl	8003d38 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
					  }
					  break;
 8002992:	e043      	b.n	8002a1c <StartDefaultTask+0x68c>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002994:	f001 fa00 	bl	8003d98 <lowlayer_scanFlow>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03b      	beq.n	8002a16 <StartDefaultTask+0x686>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800299e:	2302      	movs	r3, #2
 80029a0:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
						  }
					  }
					  break;
 80029a4:	e037      	b.n	8002a16 <StartDefaultTask+0x686>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80029a6:	482e      	ldr	r0, [pc, #184]	; (8002a60 <StartDefaultTask+0x6d0>)
 80029a8:	f001 fb52 	bl	8004050 <lowlayer_goToSoftLimit>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d033      	beq.n	8002a1a <StartDefaultTask+0x68a>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
							}
					  }
					  break;
 80029b8:	e02f      	b.n	8002a1a <StartDefaultTask+0x68a>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 80029ba:	4829      	ldr	r0, [pc, #164]	; (8002a60 <StartDefaultTask+0x6d0>)
 80029bc:	f001 fbc4 	bl	8004148 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  kinematicForward(&positionNext);
 80029cc:	4824      	ldr	r0, [pc, #144]	; (8002a60 <StartDefaultTask+0x6d0>)
 80029ce:	f000 fccb 	bl	8003368 <kinematicForward>
						  scaraSetScanFlag();
 80029d2:	f006 fb01 	bl	8008fd8 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 80029d6:	4c22      	ldr	r4, [pc, #136]	; (8002a60 <StartDefaultTask+0x6d0>)
 80029d8:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80029dc:	4668      	mov	r0, sp
 80029de:	f104 0308 	add.w	r3, r4, #8
 80029e2:	22b0      	movs	r2, #176	; 0xb0
 80029e4:	4619      	mov	r1, r3
 80029e6:	f012 ff53 	bl	8015890 <memcpy>
 80029ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029ee:	4628      	mov	r0, r5
 80029f0:	f006 fbae 	bl	8009150 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 80029f4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80029f8:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80029fc:	2100      	movs	r1, #0
 80029fe:	2005      	movs	r0, #5
 8002a00:	f7ff f814 	bl	8001a2c <commandRespond>
 8002a04:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 8002a08:	e008      	b.n	8002a1c <StartDefaultTask+0x68c>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a0a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002a0e:	4817      	ldr	r0, [pc, #92]	; (8002a6c <StartDefaultTask+0x6dc>)
 8002a10:	f7ff f85c 	bl	8001acc <LOG_REPORT>
						  while(1);
 8002a14:	e7fe      	b.n	8002a14 <StartDefaultTask+0x684>
					  break;
 8002a16:	bf00      	nop
 8002a18:	e16a      	b.n	8002cf0 <StartDefaultTask+0x960>
					  break;
 8002a1a:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002a1c:	e168      	b.n	8002cf0 <StartDefaultTask+0x960>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002a1e:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	f200 8157 	bhi.w	8002cd6 <StartDefaultTask+0x946>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <StartDefaultTask+0x6a0>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a71 	.word	0x08002a71
 8002a38:	08002b75 	.word	0x08002b75
 8002a3c:	08002c73 	.word	0x08002c73
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002a40:	bf00      	nop
					  }
				  break;
 8002a42:	e14e      	b.n	8002ce2 <StartDefaultTask+0x952>
 8002a44:	f3af 8000 	nop.w
 8002a48:	40000000 	.word	0x40000000
 8002a4c:	3f847ae1 	.word	0x3f847ae1
 8002a50:	0801b93c 	.word	0x0801b93c
 8002a54:	0801b950 	.word	0x0801b950
 8002a58:	0801b968 	.word	0x0801b968
 8002a5c:	20005e90 	.word	0x20005e90
 8002a60:	20006000 	.word	0x20006000
 8002a64:	20000cac 	.word	0x20000cac
 8002a68:	0801b980 	.word	0x0801b980
 8002a6c:	0801b98c 	.word	0x0801b98c

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002a70:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8002a74:	4668      	mov	r0, sp
 8002a76:	f104 0310 	add.w	r3, r4, #16
 8002a7a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f012 ff06 	bl	8015890 <memcpy>
 8002a84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a88:	f001 ff66 	bl	8004958 <scaraInitDuty>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 35e2 	strb.w	r3, [r7, #1506]	; 0x5e2
						  if ( SCARA_STATUS_OK == status1) {
 8002a92:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d154      	bne.n	8002b44 <StartDefaultTask+0x7b4>
							  status2 = scaraTestDuty();
 8002a9a:	f006 fa21 	bl	8008ee0 <scaraTestDuty>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 35e1 	strb.w	r3, [r7, #1505]	; 0x5e1
							  if (SCARA_STATUS_OK == status2) {
 8002aa4:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d133      	bne.n	8002b14 <StartDefaultTask+0x784>
							  current_duty_state		= SCARA_DUTY_STATE_FLOW;
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  run_time			= 0;
 8002ab2:	f107 0218 	add.w	r2, r7, #24
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 8002ac2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002acc:	4ad0      	ldr	r2, [pc, #832]	; (8002e10 <StartDefaultTask+0xa80>)
 8002ace:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 8002ad2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ad6:	2008      	movs	r0, #8
 8002ad8:	f7fe ffa8 	bl	8001a2c <commandRespond>
 8002adc:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
 8002ae0:	4ccc      	ldr	r4, [pc, #816]	; (8002e14 <StartDefaultTask+0xa84>)
 8002ae2:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002ae6:	4668      	mov	r0, sp
 8002ae8:	f104 0308 	add.w	r3, r4, #8
 8002aec:	22b0      	movs	r2, #176	; 0xb0
 8002aee:	4619      	mov	r1, r3
 8002af0:	f012 fece 	bl	8015890 <memcpy>
 8002af4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002af8:	4628      	mov	r0, r5
 8002afa:	f006 fb29 	bl	8009150 <scaraPosition2String>
#else
							  scaraPosition2String((char *)position, positionTrue);
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 8002afe:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002b02:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002b06:	2100      	movs	r1, #0
 8002b08:	2003      	movs	r0, #3
 8002b0a:	f7fe ff8f 	bl	8001a2c <commandRespond>
 8002b0e:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002b12:	e0e6      	b.n	8002ce2 <StartDefaultTask+0x952>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002b1a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b1e:	6899      	ldr	r1, [r3, #8]
 8002b20:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
																	  (char *)DETAIL_STATUS[status2],
 8002b24:	4aba      	ldr	r2, [pc, #744]	; (8002e10 <StartDefaultTask+0xa80>)
 8002b26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002b2a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b2e:	2007      	movs	r0, #7
 8002b30:	f7fe ff7c 	bl	8001a2c <commandRespond>
 8002b34:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002b38:	f44f 710a 	mov.w	r1, #552	; 0x228
 8002b3c:	48b6      	ldr	r0, [pc, #728]	; (8002e18 <StartDefaultTask+0xa88>)
 8002b3e:	f7fe ffc5 	bl	8001acc <LOG_REPORT>
				  break;
 8002b42:	e0ce      	b.n	8002ce2 <StartDefaultTask+0x952>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002b4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  (char *)DETAIL_STATUS[status1],
 8002b54:	4aae      	ldr	r2, [pc, #696]	; (8002e10 <StartDefaultTask+0xa80>)
 8002b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002b5a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b5e:	2007      	movs	r0, #7
 8002b60:	f7fe ff64 	bl	8001a2c <commandRespond>
 8002b64:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002b68:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002b6c:	48ab      	ldr	r0, [pc, #684]	; (8002e1c <StartDefaultTask+0xa8c>)
 8002b6e:	f7fe ffad 	bl	8001acc <LOG_REPORT>
				  break;
 8002b72:	e0b6      	b.n	8002ce2 <StartDefaultTask+0x952>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002b74:	f107 0318 	add.w	r3, r7, #24
 8002b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002e08 <StartDefaultTask+0xa78>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fb93 	bl	80002ac <__adddf3>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	f107 0218 	add.w	r2, r7, #24
 8002b8e:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002b92:	f107 0318 	add.w	r3, r7, #24
 8002b96:	ed93 7b00 	vldr	d7, [r3]
 8002b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9e:	eef0 0a67 	vmov.f32	s1, s15
 8002ba2:	f006 faa9 	bl	80090f8 <scaraIsFinish>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <StartDefaultTask+0x824>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002bac:	2303      	movs	r3, #3
 8002bae:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002bb2:	e096      	b.n	8002ce2 <StartDefaultTask+0x952>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002bb4:	f107 0318 	add.w	r3, r7, #24
 8002bb8:	ed93 8b00 	vldr	d8, [r3]
 8002bbc:	4c95      	ldr	r4, [pc, #596]	; (8002e14 <StartDefaultTask+0xa84>)
 8002bbe:	4668      	mov	r0, sp
 8002bc0:	f104 0308 	add.w	r3, r4, #8
 8002bc4:	22b0      	movs	r2, #176	; 0xb0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f012 fe62 	bl	8015890 <memcpy>
 8002bcc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bd0:	4893      	ldr	r0, [pc, #588]	; (8002e20 <StartDefaultTask+0xa90>)
 8002bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8002bd6:	eef0 0a68 	vmov.f32	s1, s17
 8002bda:	f004 fb63 	bl	80072a4 <scaraFlowDuty>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 35e3 	strb.w	r3, [r7, #1507]	; 0x5e3
							  if ( SCARA_STATUS_OK == status) {
 8002be4:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d12c      	bne.n	8002c46 <StartDefaultTask+0x8b6>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002bec:	4c89      	ldr	r4, [pc, #548]	; (8002e14 <StartDefaultTask+0xa84>)
 8002bee:	4a8c      	ldr	r2, [pc, #560]	; (8002e20 <StartDefaultTask+0xa90>)
 8002bf0:	ab2a      	add	r3, sp, #168	; 0xa8
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	22b8      	movs	r2, #184	; 0xb8
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f012 fe4a 	bl	8015890 <memcpy>
 8002bfc:	4668      	mov	r0, sp
 8002bfe:	f104 0310 	add.w	r3, r4, #16
 8002c02:	22a8      	movs	r2, #168	; 0xa8
 8002c04:	4619      	mov	r1, r3
 8002c06:	f012 fe43 	bl	8015890 <memcpy>
 8002c0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c0e:	f001 fb4f 	bl	80042b0 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionCurrent);
 8002c12:	4c80      	ldr	r4, [pc, #512]	; (8002e14 <StartDefaultTask+0xa84>)
 8002c14:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002c18:	4668      	mov	r0, sp
 8002c1a:	f104 0308 	add.w	r3, r4, #8
 8002c1e:	22b0      	movs	r2, #176	; 0xb0
 8002c20:	4619      	mov	r1, r3
 8002c22:	f012 fe35 	bl	8015890 <memcpy>
 8002c26:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f006 fa90 	bl	8009150 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 8002c30:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c34:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7fe fef6 	bl	8001a2c <commandRespond>
 8002c40:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
				  break;
 8002c44:	e04d      	b.n	8002ce2 <StartDefaultTask+0x952>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  infor_lenght = commandRespond(RPD_STOP,
 8002c4c:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
																(char *)DETAIL_STATUS[status],
 8002c50:	4a6f      	ldr	r2, [pc, #444]	; (8002e10 <StartDefaultTask+0xa80>)
 8002c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 8002c56:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2006      	movs	r0, #6
 8002c5e:	f7fe fee5 	bl	8001a2c <commandRespond>
 8002c62:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002c66:	f240 2153 	movw	r1, #595	; 0x253
 8002c6a:	486e      	ldr	r0, [pc, #440]	; (8002e24 <StartDefaultTask+0xa94>)
 8002c6c:	f7fe ff2e 	bl	8001acc <LOG_REPORT>
				  break;
 8002c70:	e037      	b.n	8002ce2 <StartDefaultTask+0x952>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  positionNext.t = 0;
 8002c78:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <StartDefaultTask+0xa90>)
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f04f 0400 	mov.w	r4, #0
 8002c82:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002c86:	4a66      	ldr	r2, [pc, #408]	; (8002e20 <StartDefaultTask+0xa90>)
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	f04f 0400 	mov.w	r4, #0
 8002c90:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002c94:	4a62      	ldr	r2, [pc, #392]	; (8002e20 <StartDefaultTask+0xa90>)
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
 8002ca2:	4c5c      	ldr	r4, [pc, #368]	; (8002e14 <StartDefaultTask+0xa84>)
 8002ca4:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002ca8:	4668      	mov	r0, sp
 8002caa:	f104 0308 	add.w	r3, r4, #8
 8002cae:	22b0      	movs	r2, #176	; 0xb0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f012 fded 	bl	8015890 <memcpy>
 8002cb6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f006 fa48 	bl	8009150 <scaraPosition2String>
#else
						  scaraPosition2String((char *)position, positionTrue);
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002cc0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002cc4:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2005      	movs	r0, #5
 8002ccc:	f7fe feae 	bl	8001a2c <commandRespond>
 8002cd0:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002cd4:	e005      	b.n	8002ce2 <StartDefaultTask+0x952>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002cd6:	f240 216e 	movw	r1, #622	; 0x26e
 8002cda:	4853      	ldr	r0, [pc, #332]	; (8002e28 <StartDefaultTask+0xa98>)
 8002cdc:	f7fe fef6 	bl	8001acc <LOG_REPORT>
						  while(1);
 8002ce0:	e7fe      	b.n	8002ce0 <StartDefaultTask+0x950>
					  }
				  }

			  }
			  break;
 8002ce2:	e005      	b.n	8002cf0 <StartDefaultTask+0x960>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002ce4:	f44f 711e 	mov.w	r1, #632	; 0x278
 8002ce8:	4850      	ldr	r0, [pc, #320]	; (8002e2c <StartDefaultTask+0xa9c>)
 8002cea:	f7fe feef 	bl	8001acc <LOG_REPORT>
				  while(1);
 8002cee:	e7fe      	b.n	8002cee <StartDefaultTask+0x95e>
			  }
		  }
	  }
	  break;
 8002cf0:	e002      	b.n	8002cf8 <StartDefaultTask+0x968>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <StartDefaultTask+0x968>
	  break;
 8002cf6:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <StartDefaultTask+0xaa0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	4618      	mov	r0, r3
 8002d02:	f00e ffe9 	bl	8011cd8 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002d06:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4848      	ldr	r0, [pc, #288]	; (8002e34 <StartDefaultTask+0xaa4>)
 8002d12:	f000 ff94 	bl	8003c3e <ringBuff_PopArray>
 8002d16:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
	  osMutexRelease(usbTxMutexHandle);
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <StartDefaultTask+0xaa0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00f f828 	bl	8011d74 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002d24:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dd13      	ble.n	8002d54 <StartDefaultTask+0x9c4>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002d2c:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002d30:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002d34:	f8d7 2608 	ldr.w	r2, [r7, #1544]	; 0x608
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f9b9 	bl	80020b0 <packPayload>
 8002d3e:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 8002d42:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002d46:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002d4a:	f107 0320 	add.w	r3, r7, #32
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f012 fd9e 	bl	8015890 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002d54:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dd0b      	ble.n	8002d74 <StartDefaultTask+0x9e4>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002d5c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8002d60:	f107 0220 	add.w	r2, r7, #32
 8002d64:	4413      	add	r3, r2
 8002d66:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8002d6a:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f012 fd8e 	bl	8015890 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002d74:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dd19      	ble.n	8002db0 <StartDefaultTask+0xa20>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002d7c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002d80:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002d84:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f991 	bl	80020b0 <packPayload>
 8002d8e:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002d92:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002d96:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f107 0220 	add.w	r2, r7, #32
 8002da0:	4413      	add	r3, r2
 8002da2:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002da6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002daa:	4618      	mov	r0, r3
 8002dac:	f012 fd70 	bl	8015890 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 8002db0:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002db4:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002db8:	4413      	add	r3, r2
 8002dba:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Send through USB
	  if (usb_lenght > 0) {
 8002dc4:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	dd08      	ble.n	8002dde <StartDefaultTask+0xa4e>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002dcc:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f107 0320 	add.w	r3, r7, #32
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f012 f8eb 	bl	8014fb4 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8002dde:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 f936 	bl	8009054 <scaraSetMethod>
	  scaraSetMode(current_mode);
 8002de8:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002dec:	4618      	mov	r0, r3
 8002dee:	f006 f921 	bl	8009034 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002df2:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 f90c 	bl	8009014 <scaraSetDutyState>

    osDelay(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f00e feb2 	bl	8011b66 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002e02:	f7ff bb16 	b.w	8002432 <StartDefaultTask+0xa2>
 8002e06:	bf00      	nop
 8002e08:	40000000 	.word	0x40000000
 8002e0c:	3f847ae1 	.word	0x3f847ae1
 8002e10:	20000cac 	.word	0x20000cac
 8002e14:	20005e90 	.word	0x20005e90
 8002e18:	0801b99c 	.word	0x0801b99c
 8002e1c:	0801b9a8 	.word	0x0801b9a8
 8002e20:	20006000 	.word	0x20006000
 8002e24:	0801b9b4 	.word	0x0801b9b4
 8002e28:	0801b98c 	.word	0x0801b98c
 8002e2c:	0801b9c0 	.word	0x0801b9c0
 8002e30:	20005310 	.word	0x20005310
 8002e34:	20000488 	.word	0x20000488

08002e38 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8002e3e:	af6a      	add	r7, sp, #424	; 0x1a8
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	6018      	str	r0, [r3, #0]
	uint8_t				message[150];
	int32_t				respond_lenght;
	int32_t				message_lenght;

	// Default value
	duty_cmd.key_speed = 1;
 8002e44:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002e48:	2201      	movs	r2, #1
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002e4c:	2129      	movs	r1, #41	; 0x29
 8002e4e:	4873      	ldr	r0, [pc, #460]	; (800301c <Start_USB_RX_Task+0x1e4>)
 8002e50:	f000 ff16 	bl	8003c80 <ringBuff_DistanceOf>
 8002e54:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 8002e58:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d0f4      	beq.n	8002e4c <Start_USB_RX_Task+0x14>
 8002e62:	466b      	mov	r3, sp
 8002e64:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8002e66:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e6a:	1c58      	adds	r0, r3, #1
 8002e6c:	1e43      	subs	r3, r0, #1
 8002e6e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002e72:	4603      	mov	r3, r0
 8002e74:	4619      	mov	r1, r3
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	f04f 0400 	mov.w	r4, #0
 8002e82:	00d4      	lsls	r4, r2, #3
 8002e84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e88:	00cb      	lsls	r3, r1, #3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	00d4      	lsls	r4, r2, #3
 8002e9c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ea0:	00cb      	lsls	r3, r1, #3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	3307      	adds	r3, #7
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	ebad 0d03 	sub.w	sp, sp, r3
 8002eae:	ab6a      	add	r3, sp, #424	; 0x1a8
 8002eb0:	3300      	adds	r3, #0
 8002eb2:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002eb6:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002eba:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4856      	ldr	r0, [pc, #344]	; (800301c <Start_USB_RX_Task+0x1e4>)
 8002ec4:	f000 febb 	bl	8003c3e <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002ec8:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002ecc:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f7ff f955 	bl	8002184 <unPackPayload>
 8002eda:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002ede:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d105      	bne.n	8002ef4 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002ee8:	f240 21cf 	movw	r1, #719	; 0x2cf
 8002eec:	484c      	ldr	r0, [pc, #304]	; (8003020 <Start_USB_RX_Task+0x1e8>)
 8002eee:	f7fe fded 	bl	8001acc <LOG_REPORT>
 8002ef2:	e091      	b.n	8003018 <Start_USB_RX_Task+0x1e0>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002ef4:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002ef8:	f240 21d1 	movw	r1, #721	; 0x2d1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fde5 	bl	8001acc <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 8002f02:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002f06:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002f0a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe f84a 	bl	8000fa8 <commandRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f1e:	2287      	movs	r2, #135	; 0x87
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f012 fcd8 	bl	80158d8 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002f28:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002f2c:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002f30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f34:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002f36:	4668      	mov	r0, sp
 8002f38:	f104 0308 	add.w	r3, r4, #8
 8002f3c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002f40:	4619      	mov	r1, r3
 8002f42:	f012 fca5 	bl	8015890 <memcpy>
 8002f46:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7fe fc12 	bl	8001774 <commandReply>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002f56:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	d123      	bne.n	8002fa6 <Start_USB_RX_Task+0x16e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002f64:	e008      	b.n	8002f78 <Start_USB_RX_Task+0x140>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002f66:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <Start_USB_RX_Task+0x1ec>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00f f88e 	bl	8012090 <osMailAlloc>
 8002f74:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002f78:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f2      	beq.n	8002f66 <Start_USB_RX_Task+0x12e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002f80:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f84:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002f8e:	f012 fc7f 	bl	8015890 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <Start_USB_RX_Task+0x1ec>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00f f88e 	bl	80120bc <osMailPut>
 8002fa0:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
 8002fa4:	e038      	b.n	8003018 <Start_USB_RX_Task+0x1e0>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  } else {
					  memset(respond, 0, sizeof(respond));
 8002fa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002faa:	2291      	movs	r2, #145	; 0x91
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f012 fc92 	bl	80158d8 <memset>
					  memset(message, 0, sizeof(message));
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	2296      	movs	r2, #150	; 0x96
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f012 fc8b 	bl	80158d8 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8002fc2:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8002fc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002fce:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8002fd2:	f7fe fd2b 	bl	8001a2c <commandRespond>
 8002fd6:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 8002fda:	f107 010c 	add.w	r1, r7, #12
 8002fde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fe2:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f862 	bl	80020b0 <packPayload>
 8002fec:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <Start_USB_RX_Task+0x1f0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00e fe6d 	bl	8011cd8 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8003006:	4619      	mov	r1, r3
 8003008:	4808      	ldr	r0, [pc, #32]	; (800302c <Start_USB_RX_Task+0x1f4>)
 800300a:	f000 fdf0 	bl	8003bee <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <Start_USB_RX_Task+0x1f0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f00e feae 	bl	8011d74 <osMutexRelease>
 8003018:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 800301a:	e717      	b.n	8002e4c <Start_USB_RX_Task+0x14>
 800301c:	2000007c 	.word	0x2000007c
 8003020:	0801b9d0 	.word	0x0801b9d0
 8003024:	20005314 	.word	0x20005314
 8003028:	20005310 	.word	0x20005310
 800302c:	20000488 	.word	0x20000488

08003030 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b292      	uxth	r2, r2
 8003040:	801a      	strh	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <MX_FSMC_Init+0xb8>)
 8003082:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003086:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <MX_FSMC_Init+0xb8>)
 800308a:	4a26      	ldr	r2, [pc, #152]	; (8003124 <MX_FSMC_Init+0xbc>)
 800308c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <MX_FSMC_Init+0xb8>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <MX_FSMC_Init+0xb8>)
 8003096:	2202      	movs	r2, #2
 8003098:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <MX_FSMC_Init+0xb8>)
 800309c:	2208      	movs	r2, #8
 800309e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030a2:	2210      	movs	r2, #16
 80030a4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <MX_FSMC_Init+0xb8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80030e4:	230f      	movs	r3, #15
 80030e6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80030e8:	230f      	movs	r3, #15
 80030ea:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80030ec:	23ff      	movs	r3, #255	; 0xff
 80030ee:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80030f0:	230f      	movs	r3, #15
 80030f2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80030f4:	2310      	movs	r3, #16
 80030f6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80030f8:	2311      	movs	r3, #17
 80030fa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	2200      	movs	r2, #0
 8003104:	4619      	mov	r1, r3
 8003106:	4806      	ldr	r0, [pc, #24]	; (8003120 <MX_FSMC_Init+0xb8>)
 8003108:	f008 fda4 	bl	800bc54 <HAL_NOR_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003112:	f000 fcf5 	bl	8003b00 <Error_Handler>
  }

}
 8003116:	bf00      	nop
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2000531c 	.word	0x2000531c
 8003124:	a0000104 	.word	0xa0000104

08003128 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_FSMC_MspInit+0xa8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d140      	bne.n	80031c6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_FSMC_MspInit+0xa8>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_FSMC_MspInit+0xac>)
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <HAL_FSMC_MspInit+0xac>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6393      	str	r3, [r2, #56]	; 0x38
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_FSMC_MspInit+0xac>)
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8003166:	f64f 7380 	movw	r3, #65408	; 0xff80
 800316a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003178:	230c      	movs	r3, #12
 800317a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4815      	ldr	r0, [pc, #84]	; (80031d8 <HAL_FSMC_MspInit+0xb0>)
 8003182:	f008 fbb3 	bl	800b8ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8003186:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800318a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003198:	230c      	movs	r3, #12
 800319a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	480e      	ldr	r0, [pc, #56]	; (80031dc <HAL_FSMC_MspInit+0xb4>)
 80031a2:	f008 fba3 	bl	800b8ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80031b6:	230c      	movs	r3, #12
 80031b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4808      	ldr	r0, [pc, #32]	; (80031e0 <HAL_FSMC_MspInit+0xb8>)
 80031c0:	f008 fb94 	bl	800b8ec <HAL_GPIO_Init>
 80031c4:	e000      	b.n	80031c8 <HAL_FSMC_MspInit+0xa0>
    return;
 80031c6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200014a8 	.word	0x200014a8
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	40020400 	.word	0x40020400

080031e4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80031ec:	f7ff ff9c 	bl	8003128 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b51      	ldr	r3, [pc, #324]	; (8003358 <MX_GPIO_Init+0x160>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a50      	ldr	r2, [pc, #320]	; (8003358 <MX_GPIO_Init+0x160>)
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <MX_GPIO_Init+0x160>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <MX_GPIO_Init+0x160>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a49      	ldr	r2, [pc, #292]	; (8003358 <MX_GPIO_Init+0x160>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <MX_GPIO_Init+0x160>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b43      	ldr	r3, [pc, #268]	; (8003358 <MX_GPIO_Init+0x160>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <MX_GPIO_Init+0x160>)
 8003250:	f043 0310 	orr.w	r3, r3, #16
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b40      	ldr	r3, [pc, #256]	; (8003358 <MX_GPIO_Init+0x160>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <MX_GPIO_Init+0x160>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <MX_GPIO_Init+0x160>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <MX_GPIO_Init+0x160>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <MX_GPIO_Init+0x160>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <MX_GPIO_Init+0x160>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b32      	ldr	r3, [pc, #200]	; (8003358 <MX_GPIO_Init+0x160>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80032a0:	482e      	ldr	r0, [pc, #184]	; (800335c <MX_GPIO_Init+0x164>)
 80032a2:	f008 fcbd 	bl	800bc20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f641 0148 	movw	r1, #6216	; 0x1848
 80032ac:	482c      	ldr	r0, [pc, #176]	; (8003360 <MX_GPIO_Init+0x168>)
 80032ae:	f008 fcb7 	bl	800bc20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80032b2:	2200      	movs	r2, #0
 80032b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80032b8:	482a      	ldr	r0, [pc, #168]	; (8003364 <MX_GPIO_Init+0x16c>)
 80032ba:	f008 fcb1 	bl	800bc20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80032be:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80032c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c4:	2301      	movs	r3, #1
 80032c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4619      	mov	r1, r3
 80032d6:	4821      	ldr	r0, [pc, #132]	; (800335c <MX_GPIO_Init+0x164>)
 80032d8:	f008 fb08 	bl	800b8ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80032dc:	f640 0348 	movw	r3, #2120	; 0x848
 80032e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	481a      	ldr	r0, [pc, #104]	; (8003360 <MX_GPIO_Init+0x168>)
 80032f6:	f008 faf9 	bl	800b8ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80032fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003300:	2301      	movs	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	2303      	movs	r3, #3
 800330a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	4813      	ldr	r0, [pc, #76]	; (8003360 <MX_GPIO_Init+0x168>)
 8003314:	f008 faea 	bl	800b8ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8003318:	f242 0304 	movw	r3, #8196	; 0x2004
 800331c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003322:	2301      	movs	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	480c      	ldr	r0, [pc, #48]	; (8003360 <MX_GPIO_Init+0x168>)
 800332e:	f008 fadd 	bl	800b8ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8003332:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003338:	2301      	movs	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4619      	mov	r1, r3
 800334a:	4806      	ldr	r0, [pc, #24]	; (8003364 <MX_GPIO_Init+0x16c>)
 800334c:	f008 face 	bl	800b8ec <HAL_GPIO_Init>

}
 8003350:	bf00      	nop
 8003352:	3728      	adds	r7, #40	; 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	40020400 	.word	0x40020400
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40020000 	.word	0x40020000

08003368 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b08b      	sub	sp, #44	; 0x2c
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003376:	eeb0 0a47 	vmov.f32	s0, s14
 800337a:	eef0 0a67 	vmov.f32	s1, s15
 800337e:	f016 fcb7 	bl	8019cf0 <cos>
 8003382:	ec51 0b10 	vmov	r0, r1, d0
 8003386:	a38e      	add	r3, pc, #568	; (adr r3, 80035c0 <kinematicForward+0x258>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fd f944 	bl	8000618 <__aeabi_dmul>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	461d      	mov	r5, r3
 8003396:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	f7fc ff80 	bl	80002ac <__adddf3>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	ec44 3b17 	vmov	d7, r3, r4
 80033b4:	eeb0 0a47 	vmov.f32	s0, s14
 80033b8:	eef0 0a67 	vmov.f32	s1, s15
 80033bc:	f016 fc98 	bl	8019cf0 <cos>
 80033c0:	ec51 0b10 	vmov	r0, r1, d0
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <kinematicForward+0x270>)
 80033ca:	f7fd f925 	bl	8000618 <__aeabi_dmul>
 80033ce:	4603      	mov	r3, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	4628      	mov	r0, r5
 80033d8:	4631      	mov	r1, r6
 80033da:	f7fc ff67 	bl	80002ac <__adddf3>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	461d      	mov	r5, r3
 80033e4:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7fc ff59 	bl	80002ac <__adddf3>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	4618      	mov	r0, r3
 8003400:	4621      	mov	r1, r4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	f7fc ff4c 	bl	80002a8 <__aeabi_dsub>
 8003410:	4603      	mov	r3, r0
 8003412:	460c      	mov	r4, r1
 8003414:	ec44 3b17 	vmov	d7, r3, r4
 8003418:	eeb0 0a47 	vmov.f32	s0, s14
 800341c:	eef0 0a67 	vmov.f32	s1, s15
 8003420:	f016 fc66 	bl	8019cf0 <cos>
 8003424:	ec51 0b10 	vmov	r0, r1, d0
 8003428:	a363      	add	r3, pc, #396	; (adr r3, 80035b8 <kinematicForward+0x250>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fd f8f3 	bl	8000618 <__aeabi_dmul>
 8003432:	4603      	mov	r3, r0
 8003434:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8003436:	461a      	mov	r2, r3
 8003438:	4623      	mov	r3, r4
 800343a:	4628      	mov	r0, r5
 800343c:	4631      	mov	r1, r6
 800343e:	f7fc ff35 	bl	80002ac <__adddf3>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003450:	eeb0 0a47 	vmov.f32	s0, s14
 8003454:	eef0 0a67 	vmov.f32	s1, s15
 8003458:	f016 fcda 	bl	8019e10 <sin>
 800345c:	ec51 0b10 	vmov	r0, r1, d0
 8003460:	a357      	add	r3, pc, #348	; (adr r3, 80035c0 <kinematicForward+0x258>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f8d7 	bl	8000618 <__aeabi_dmul>
 800346a:	4603      	mov	r3, r0
 800346c:	460c      	mov	r4, r1
 800346e:	461d      	mov	r5, r3
 8003470:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800347e:	461a      	mov	r2, r3
 8003480:	4623      	mov	r3, r4
 8003482:	f7fc ff13 	bl	80002ac <__adddf3>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	ec44 3b17 	vmov	d7, r3, r4
 800348e:	eeb0 0a47 	vmov.f32	s0, s14
 8003492:	eef0 0a67 	vmov.f32	s1, s15
 8003496:	f016 fcbb 	bl	8019e10 <sin>
 800349a:	ec51 0b10 	vmov	r0, r1, d0
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <kinematicForward+0x270>)
 80034a4:	f7fd f8b8 	bl	8000618 <__aeabi_dmul>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	461a      	mov	r2, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	4631      	mov	r1, r6
 80034b4:	f7fc fefa 	bl	80002ac <__adddf3>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	461d      	mov	r5, r3
 80034be:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80034cc:	461a      	mov	r2, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	f7fc feec 	bl	80002ac <__adddf3>
 80034d4:	4603      	mov	r3, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	4618      	mov	r0, r3
 80034da:	4621      	mov	r1, r4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80034e2:	461a      	mov	r2, r3
 80034e4:	4623      	mov	r3, r4
 80034e6:	f7fc fedf 	bl	80002a8 <__aeabi_dsub>
 80034ea:	4603      	mov	r3, r0
 80034ec:	460c      	mov	r4, r1
 80034ee:	ec44 3b17 	vmov	d7, r3, r4
 80034f2:	eeb0 0a47 	vmov.f32	s0, s14
 80034f6:	eef0 0a67 	vmov.f32	s1, s15
 80034fa:	f016 fc89 	bl	8019e10 <sin>
 80034fe:	ec51 0b10 	vmov	r0, r1, d0
 8003502:	a32d      	add	r3, pc, #180	; (adr r3, 80035b8 <kinematicForward+0x250>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f886 	bl	8000618 <__aeabi_dmul>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003510:	461a      	mov	r2, r3
 8003512:	4623      	mov	r3, r4
 8003514:	4628      	mov	r0, r5
 8003516:	4631      	mov	r1, r6
 8003518:	f7fc fec8 	bl	80002ac <__adddf3>
 800351c:	4603      	mov	r3, r0
 800351e:	460c      	mov	r4, r1
 8003520:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	a126      	add	r1, pc, #152	; (adr r1, 80035c8 <kinematicForward+0x260>)
 8003530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003534:	f7fc feb8 	bl	80002a8 <__aeabi_dsub>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4618      	mov	r0, r3
 800353e:	4621      	mov	r1, r4
 8003540:	a323      	add	r3, pc, #140	; (adr r3, 80035d0 <kinematicForward+0x268>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f7fc feaf 	bl	80002a8 <__aeabi_dsub>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800355e:	461a      	mov	r2, r3
 8003560:	4623      	mov	r3, r4
 8003562:	f7fc fea3 	bl	80002ac <__adddf3>
 8003566:	4603      	mov	r3, r0
 8003568:	460c      	mov	r4, r1
 800356a:	4618      	mov	r0, r3
 800356c:	4621      	mov	r1, r4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003574:	461a      	mov	r2, r3
 8003576:	4623      	mov	r3, r4
 8003578:	f7fc fe96 	bl	80002a8 <__aeabi_dsub>
 800357c:	4603      	mov	r3, r0
 800357e:	460c      	mov	r4, r1
 8003580:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800358a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003594:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800359e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035a8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80035ac:	2301      	movs	r3, #1
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	372c      	adds	r7, #44	; 0x2c
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	80000000 	.word	0x80000000
 80035bc:	40402e14 	.word	0x40402e14
 80035c0:	00000000 	.word	0x00000000
 80035c4:	4068a000 	.word	0x4068a000
 80035c8:	00000000 	.word	0x00000000
 80035cc:	406a6000 	.word	0x406a6000
 80035d0:	e0000000 	.word	0xe0000000
 80035d4:	40536b22 	.word	0x40536b22
 80035d8:	40640000 	.word	0x40640000
 80035dc:	00000000 	.word	0x00000000

080035e0 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 80035e0:	b082      	sub	sp, #8
 80035e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e6:	b0a0      	sub	sp, #128	; 0x80
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80035f0:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80035fa:	a1f2      	add	r1, pc, #968	; (adr r1, 80039c4 <kinematicInverse+0x3e4>)
 80035fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003600:	f7fc fe52 	bl	80002a8 <__aeabi_dsub>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003618:	eeb0 0a47 	vmov.f32	s0, s14
 800361c:	eef0 0a67 	vmov.f32	s1, s15
 8003620:	f016 fb66 	bl	8019cf0 <cos>
 8003624:	ec51 0b10 	vmov	r0, r1, d0
 8003628:	a3e8      	add	r3, pc, #928	; (adr r3, 80039cc <kinematicInverse+0x3ec>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fc fff3 	bl	8000618 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4650      	mov	r0, sl
 8003638:	4659      	mov	r1, fp
 800363a:	f7fc fe35 	bl	80002a8 <__aeabi_dsub>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003652:	eeb0 0a47 	vmov.f32	s0, s14
 8003656:	eef0 0a67 	vmov.f32	s1, s15
 800365a:	f016 fbd9 	bl	8019e10 <sin>
 800365e:	ec51 0b10 	vmov	r0, r1, d0
 8003662:	a3da      	add	r3, pc, #872	; (adr r3, 80039cc <kinematicInverse+0x3ec>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f7fc ffd6 	bl	8000618 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4650      	mov	r0, sl
 8003672:	4659      	mov	r1, fp
 8003674:	f7fc fe18 	bl	80002a8 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003680:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003684:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003688:	f7fc ffc6 	bl	8000618 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4692      	mov	sl, r2
 8003692:	469b      	mov	fp, r3
 8003694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003698:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800369c:	f7fc ffbc 	bl	8000618 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4650      	mov	r0, sl
 80036a6:	4659      	mov	r1, fp
 80036a8:	f7fc fe00 	bl	80002ac <__adddf3>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	a3c7      	add	r3, pc, #796	; (adr r3, 80039d4 <kinematicInverse+0x3f4>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fc fdf5 	bl	80002a8 <__aeabi_dsub>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	4bbb      	ldr	r3, [pc, #748]	; (80039b8 <kinematicInverse+0x3d8>)
 80036cc:	f7fc fdec 	bl	80002a8 <__aeabi_dsub>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	a3b3      	add	r3, pc, #716	; (adr r3, 80039a8 <kinematicInverse+0x3c8>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f7fd f8c5 	bl	800086c <__aeabi_ddiv>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80036ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036f2:	f7fc ff91 	bl	8000618 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	49af      	ldr	r1, [pc, #700]	; (80039bc <kinematicInverse+0x3dc>)
 8003700:	f7fc fdd2 	bl	80002a8 <__aeabi_dsub>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003718:	f7fd f9f0 	bl	8000afc <__aeabi_dcmplt>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <kinematicInverse+0x146>
		return FALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	e136      	b.n	8003994 <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003726:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800372a:	f016 fbfb 	bl	8019f24 <sqrt>
 800372e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
 8003736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800373e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003742:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003746:	f016 fbeb 	bl	8019f20 <atan2>
 800374a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800374e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003752:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003756:	f016 fbe3 	bl	8019f20 <atan2>
 800375a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800375e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003762:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003766:	f7fc fd9f 	bl	80002a8 <__aeabi_dsub>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4614      	mov	r4, r2
 8003770:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003774:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003778:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800377c:	f7fc fd94 	bl	80002a8 <__aeabi_dsub>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4690      	mov	r8, r2
 8003786:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800378a:	4642      	mov	r2, r8
 800378c:	464b      	mov	r3, r9
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fd f9bd 	bl	8000b10 <__aeabi_dcmple>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800379c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80037a0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80037a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80037ac:	e007      	b.n	80037be <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80037ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80037b2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80037b6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80037ba:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	4b7f      	ldr	r3, [pc, #508]	; (80039c0 <kinematicInverse+0x3e0>)
 80037c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037c8:	f7fc ff26 	bl	8000618 <__aeabi_dmul>
 80037cc:	4603      	mov	r3, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	4618      	mov	r0, r3
 80037d2:	4621      	mov	r1, r4
 80037d4:	a376      	add	r3, pc, #472	; (adr r3, 80039b0 <kinematicInverse+0x3d0>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc fd67 	bl	80002ac <__adddf3>
 80037de:	4603      	mov	r3, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	4618      	mov	r0, r3
 80037e4:	4621      	mov	r1, r4
 80037e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ea:	f7fc ff15 	bl	8000618 <__aeabi_dmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	4625      	mov	r5, r4
 80037f4:	461c      	mov	r4, r3
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	4b71      	ldr	r3, [pc, #452]	; (80039c0 <kinematicInverse+0x3e0>)
 80037fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003800:	f7fc ff0a 	bl	8000618 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003810:	f7fc ff02 	bl	8000618 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fc fd44 	bl	80002a8 <__aeabi_dsub>
 8003820:	4603      	mov	r3, r0
 8003822:	460c      	mov	r4, r1
 8003824:	4625      	mov	r5, r4
 8003826:	461c      	mov	r4, r3
 8003828:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800382c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003830:	f7fc fef2 	bl	8000618 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4690      	mov	r8, r2
 800383a:	4699      	mov	r9, r3
 800383c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003840:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003844:	f7fc fee8 	bl	8000618 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4640      	mov	r0, r8
 800384e:	4649      	mov	r1, r9
 8003850:	f7fc fd2c 	bl	80002ac <__adddf3>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4620      	mov	r0, r4
 800385a:	4629      	mov	r1, r5
 800385c:	f7fd f806 	bl	800086c <__aeabi_ddiv>
 8003860:	4603      	mov	r3, r0
 8003862:	460c      	mov	r4, r1
 8003864:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <kinematicInverse+0x3e0>)
 800386e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003872:	f7fc fed1 	bl	8000618 <__aeabi_dmul>
 8003876:	4603      	mov	r3, r0
 8003878:	460c      	mov	r4, r1
 800387a:	4618      	mov	r0, r3
 800387c:	4621      	mov	r1, r4
 800387e:	a34c      	add	r3, pc, #304	; (adr r3, 80039b0 <kinematicInverse+0x3d0>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fd12 	bl	80002ac <__adddf3>
 8003888:	4603      	mov	r3, r0
 800388a:	460c      	mov	r4, r1
 800388c:	4618      	mov	r0, r3
 800388e:	4621      	mov	r1, r4
 8003890:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003894:	f7fc fec0 	bl	8000618 <__aeabi_dmul>
 8003898:	4603      	mov	r3, r0
 800389a:	460c      	mov	r4, r1
 800389c:	4625      	mov	r5, r4
 800389e:	461c      	mov	r4, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <kinematicInverse+0x3e0>)
 80038a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80038aa:	f7fc feb5 	bl	8000618 <__aeabi_dmul>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038ba:	f7fc fead 	bl	8000618 <__aeabi_dmul>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4620      	mov	r0, r4
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7fc fcf1 	bl	80002ac <__adddf3>
 80038ca:	4603      	mov	r3, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	4625      	mov	r5, r4
 80038d0:	461c      	mov	r4, r3
 80038d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038d6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038da:	f7fc fe9d 	bl	8000618 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038ee:	f7fc fe93 	bl	8000618 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	f7fc fcd7 	bl	80002ac <__adddf3>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fc ffb1 	bl	800086c <__aeabi_ddiv>
 800390a:	4603      	mov	r3, r0
 800390c:	460c      	mov	r4, r1
 800390e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003912:	ed97 1b06 	vldr	d1, [r7, #24]
 8003916:	ed97 0b08 	vldr	d0, [r7, #32]
 800391a:	f016 fb01 	bl	8019f20 <atan2>
 800391e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003922:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800392a:	f7fc fcbf 	bl	80002ac <__adddf3>
 800392e:	4603      	mov	r3, r0
 8003930:	460c      	mov	r4, r1
 8003932:	4618      	mov	r0, r3
 8003934:	4621      	mov	r1, r4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800393c:	461a      	mov	r2, r3
 800393e:	4623      	mov	r3, r4
 8003940:	f7fc fcb2 	bl	80002a8 <__aeabi_dsub>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 800394c:	ed97 3b02 	vldr	d3, [r7, #8]
 8003950:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003954:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003958:	ed97 0b04 	vldr	d0, [r7, #16]
 800395c:	f005 f9a0 	bl	8008ca0 <scaraCheckWorkSpace4>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 8003966:	2300      	movs	r3, #0
 8003968:	e014      	b.n	8003994 <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003970:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800397a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003984:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800398e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 8003992:	2301      	movs	r3, #1
}
 8003994:	4618      	mov	r0, r3
 8003996:	3780      	adds	r7, #128	; 0x80
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399e:	b002      	add	sp, #8
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	f3af 8000 	nop.w
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40eec800 	.word	0x40eec800
 80039b0:	00000000 	.word	0x00000000
 80039b4:	4068a000 	.word	0x4068a000
 80039b8:	40d90000 	.word	0x40d90000
 80039bc:	3ff00000 	.word	0x3ff00000
 80039c0:	40640000 	.word	0x40640000
 80039c4:	80000000 	.word	0x80000000
 80039c8:	4060aa6e 	.word	0x4060aa6e
 80039cc:	80000000 	.word	0x80000000
 80039d0:	40402e14 	.word	0x40402e14
 80039d4:	00000000 	.word	0x00000000
 80039d8:	40e2f320 	.word	0x40e2f320

080039dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039e0:	f007 faa0 	bl	800af24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039e4:	f000 f810 	bl	8003a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039e8:	f7ff fc06 	bl	80031f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80039ec:	f7fe fc40 	bl	8002270 <MX_DMA_Init>
  MX_UART4_Init();
 80039f0:	f007 f99a 	bl	800ad28 <MX_UART4_Init>
  MX_FSMC_Init();
 80039f4:	f7ff fb38 	bl	8003068 <MX_FSMC_Init>
  MX_TIM7_Init();
 80039f8:	f007 f938 	bl	800ac6c <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80039fc:	f7fe fc72 	bl	80022e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003a00:	f00e f85e 	bl	8011ac0 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003a04:	e7fe      	b.n	8003a04 <main+0x28>
	...

08003a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b094      	sub	sp, #80	; 0x50
 8003a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a0e:	f107 0320 	add.w	r3, r7, #32
 8003a12:	2230      	movs	r2, #48	; 0x30
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f011 ff5e 	bl	80158d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <SystemClock_Config+0xcc>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <SystemClock_Config+0xcc>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <SystemClock_Config+0xcc>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <SystemClock_Config+0xd0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <SystemClock_Config+0xd0>)
 8003a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <SystemClock_Config+0xd0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a82:	2302      	movs	r3, #2
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a86:	2307      	movs	r3, #7
 8003a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8a:	f107 0320 	add.w	r3, r7, #32
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f009 fac0 	bl	800d014 <HAL_RCC_OscConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a9a:	f000 f831 	bl	8003b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a9e:	230f      	movs	r3, #15
 8003aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	2105      	movs	r1, #5
 8003abc:	4618      	mov	r0, r3
 8003abe:	f009 fd19 	bl	800d4f4 <HAL_RCC_ClockConfig>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003ac8:	f000 f81a 	bl	8003b00 <Error_Handler>
  }
}
 8003acc:	bf00      	nop
 8003ace:	3750      	adds	r7, #80	; 0x50
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000

08003adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aee:	f007 fa3b 	bl	800af68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40001000 	.word	0x40001000

08003b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e024      	b.n	8003b72 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	78f9      	ldrb	r1, [r7, #3]
 8003b32:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b46:	bf58      	it	pl
 8003b48:	4253      	negpl	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d103      	bne.n	8003b68 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003b70:	2301      	movs	r3, #1
	}
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <ringBuff_PopChar+0x18>
		return FALSE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e025      	b.n	8003be2 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	5cd2      	ldrb	r2, [r2, r3]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003baa:	3301      	adds	r3, #1
 8003bac:	425a      	negs	r2, r3
 8003bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003bb6:	bf58      	it	pl
 8003bb8:	4253      	negpl	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d103      	bne.n	8003bd8 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003be0:	2301      	movs	r3, #1
	}
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	82fb      	strh	r3, [r7, #22]
 8003bfe:	e011      	b.n	8003c24 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003c00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff7e 	bl	8003b0e <ringBuff_PushChar>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003c18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	82fb      	strh	r3, [r7, #22]
 8003c24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	dce8      	bgt.n	8003c00 <ringBuff_PushArray+0x12>
 8003c2e:	e000      	b.n	8003c32 <ringBuff_PushArray+0x44>
			break;
 8003c30:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003c32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e00c      	b.n	8003c6a <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff ff90 	bl	8003b7e <ringBuff_PopChar>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	dbee      	blt.n	8003c50 <ringBuff_PopArray+0x12>
 8003c72:	e000      	b.n	8003c76 <ringBuff_PopArray+0x38>
			break;
 8003c74:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c96:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d036      	beq.n	8003d10 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e018      	b.n	8003cda <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d101      	bne.n	8003cba <ringBuff_DistanceOf+0x3a>
					return distance;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	e037      	b.n	8003d2a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	425a      	negs	r2, r3
 8003ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003cd4:	bf58      	it	pl
 8003cd6:	4253      	negpl	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	dbe2      	blt.n	8003ca8 <ringBuff_DistanceOf+0x28>
 8003ce2:	e020      	b.n	8003d26 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d101      	bne.n	8003cf6 <ringBuff_DistanceOf+0x76>
					return distance;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	e019      	b.n	8003d2a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	425a      	negs	r2, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d0a:	bf58      	it	pl
 8003d0c:	4253      	negpl	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1e3      	bne.n	8003ce4 <ringBuff_DistanceOf+0x64>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0de      	beq.n	8003ce4 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <lowlayer_scanReset+0x48>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <lowlayer_scanReset+0x48>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <lowlayer_scanReset+0x48>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <lowlayer_scanReset+0x48>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <lowlayer_scanReset+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <lowlayer_scanReset+0x4c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <lowlayer_scanReset+0x4c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <lowlayer_scanReset+0x50>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <lowlayer_scanReset+0x54>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2108      	movs	r1, #8
 8003d76:	4806      	ldr	r0, [pc, #24]	; (8003d90 <lowlayer_scanReset+0x58>)
 8003d78:	f007 ff52 	bl	800bc20 <HAL_GPIO_WritePin>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20005368 	.word	0x20005368
 8003d84:	2000537c 	.word	0x2000537c
 8003d88:	20005378 	.word	0x20005378
 8003d8c:	20005398 	.word	0x20005398
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	00000000 	.word	0x00000000

08003d98 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8003da2:	f000 fd63 	bl	800486c <lowlayer_updateLimit>
	if (state_scan < 4) {
 8003da6:	4b98      	ldr	r3, [pc, #608]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d837      	bhi.n	8003e1e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8003dae:	4b96      	ldr	r3, [pc, #600]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	f1c3 0303 	rsb	r3, r3, #3
 8003db6:	4a95      	ldr	r2, [pc, #596]	; (800400c <lowlayer_scanFlow+0x274>)
 8003db8:	5cd3      	ldrb	r3, [r2, r3]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d121      	bne.n	8003e02 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8003dbe:	4b92      	ldr	r3, [pc, #584]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	f1c3 0203 	rsb	r2, r3, #3
 8003dc6:	4b90      	ldr	r3, [pc, #576]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f1c3 0303 	rsb	r3, r3, #3
 8003dce:	4990      	ldr	r1, [pc, #576]	; (8004010 <lowlayer_scanFlow+0x278>)
 8003dd0:	568a      	ldrsb	r2, [r1, r2]
 8003dd2:	f107 0108 	add.w	r1, r7, #8
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003ddc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	425b      	negs	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	b258      	sxtb	r0, r3
 8003de8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003dec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	425b      	negs	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	b25a      	sxtb	r2, r3
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	f000 fbfc 	bl	80045f8 <lowlayer_writePulse>
 8003e00:	e00b      	b.n	8003e1a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	; (8004008 <lowlayer_scanFlow+0x270>)
 8003e0c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	2000      	movs	r0, #0
 8003e16:	f000 fbef 	bl	80045f8 <lowlayer_writePulse>
		}

		return FALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e0d8      	b.n	8003fd0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2108      	movs	r1, #8
 8003e22:	487c      	ldr	r0, [pc, #496]	; (8004014 <lowlayer_scanFlow+0x27c>)
 8003e24:	f007 fefc 	bl	800bc20 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003e28:	f000 fd04 	bl	8004834 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	2000      	movs	r0, #0
 8003e34:	f000 fbe0 	bl	80045f8 <lowlayer_writePulse>
		scan_flag = 1;
 8003e38:	4b77      	ldr	r3, [pc, #476]	; (8004018 <lowlayer_scanFlow+0x280>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003e3e:	4b77      	ldr	r3, [pc, #476]	; (800401c <lowlayer_scanFlow+0x284>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a77      	ldr	r2, [pc, #476]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e44:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8003e46:	4b75      	ldr	r3, [pc, #468]	; (800401c <lowlayer_scanFlow+0x284>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e4c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <lowlayer_scanFlow+0x284>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4a73      	ldr	r2, [pc, #460]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e54:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <lowlayer_scanFlow+0x28c>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4a73      	ldr	r2, [pc, #460]	; (8004028 <lowlayer_scanFlow+0x290>)
 8003e5c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8003e5e:	4b70      	ldr	r3, [pc, #448]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	4871      	ldr	r0, [pc, #452]	; (800402c <lowlayer_scanFlow+0x294>)
 8003e68:	f7fd fe30 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8003e6c:	4b6c      	ldr	r3, [pc, #432]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4619      	mov	r1, r3
 8003e74:	486e      	ldr	r0, [pc, #440]	; (8004030 <lowlayer_scanFlow+0x298>)
 8003e76:	f7fd fe29 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8003e7a:	4b69      	ldr	r3, [pc, #420]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	486c      	ldr	r0, [pc, #432]	; (8004034 <lowlayer_scanFlow+0x29c>)
 8003e84:	f7fd fe22 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8003e88:	4b67      	ldr	r3, [pc, #412]	; (8004028 <lowlayer_scanFlow+0x290>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4869      	ldr	r0, [pc, #420]	; (8004038 <lowlayer_scanFlow+0x2a0>)
 8003e92:	f7fd fe1b 	bl	8001acc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003e96:	4b62      	ldr	r3, [pc, #392]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea2:	ee17 0a90 	vmov	r0, s15
 8003ea6:	f7fc fb5f 	bl	8000568 <__aeabi_f2d>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	f7fc f9fd 	bl	80002ac <__adddf3>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	4621      	mov	r1, r4
 8003eba:	a347      	add	r3, pc, #284	; (adr r3, 8003fd8 <lowlayer_scanFlow+0x240>)
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f7fc fbaa 	bl	8000618 <__aeabi_dmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	4621      	mov	r1, r4
 8003ecc:	a344      	add	r3, pc, #272	; (adr r3, 8003fe0 <lowlayer_scanFlow+0x248>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc fccb 	bl	800086c <__aeabi_ddiv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	460c      	mov	r4, r1
 8003eda:	461a      	mov	r2, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	a142      	add	r1, pc, #264	; (adr r1, 8003fe8 <lowlayer_scanFlow+0x250>)
 8003ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ee4:	f7fc f9e0 	bl	80002a8 <__aeabi_dsub>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003eec:	4a53      	ldr	r2, [pc, #332]	; (800403c <lowlayer_scanFlow+0x2a4>)
 8003eee:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efe:	ee17 0a90 	vmov	r0, s15
 8003f02:	f7fc fb31 	bl	8000568 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	f7fc f9cf 	bl	80002ac <__adddf3>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	460c      	mov	r4, r1
 8003f12:	4618      	mov	r0, r3
 8003f14:	4621      	mov	r1, r4
 8003f16:	a330      	add	r3, pc, #192	; (adr r3, 8003fd8 <lowlayer_scanFlow+0x240>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fb7c 	bl	8000618 <__aeabi_dmul>
 8003f20:	4603      	mov	r3, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	4618      	mov	r0, r3
 8003f26:	4621      	mov	r1, r4
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b44      	ldr	r3, [pc, #272]	; (8004040 <lowlayer_scanFlow+0x2a8>)
 8003f2e:	f7fc fc9d 	bl	800086c <__aeabi_ddiv>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	461a      	mov	r2, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	a12d      	add	r1, pc, #180	; (adr r1, 8003ff0 <lowlayer_scanFlow+0x258>)
 8003f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f40:	f7fc f9b2 	bl	80002a8 <__aeabi_dsub>
 8003f44:	4603      	mov	r3, r0
 8003f46:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003f48:	4a3c      	ldr	r2, [pc, #240]	; (800403c <lowlayer_scanFlow+0x2a4>)
 8003f4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <lowlayer_scanFlow+0x288>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004044 <lowlayer_scanFlow+0x2ac>
 8003f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f62:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004048 <lowlayer_scanFlow+0x2b0>
 8003f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f6a:	ee17 0a90 	vmov	r0, s15
 8003f6e:	f7fc fafb 	bl	8000568 <__aeabi_f2d>
 8003f72:	4603      	mov	r3, r0
 8003f74:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003f76:	4a31      	ldr	r2, [pc, #196]	; (800403c <lowlayer_scanFlow+0x2a4>)
 8003f78:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <lowlayer_scanFlow+0x290>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fadf 	bl	8000544 <__aeabi_i2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	f7fc f98f 	bl	80002ac <__adddf3>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	4618      	mov	r0, r3
 8003f94:	4621      	mov	r1, r4
 8003f96:	a310      	add	r3, pc, #64	; (adr r3, 8003fd8 <lowlayer_scanFlow+0x240>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc fb3c 	bl	8000618 <__aeabi_dmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	a313      	add	r3, pc, #76	; (adr r3, 8003ff8 <lowlayer_scanFlow+0x260>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fc5d 	bl	800086c <__aeabi_ddiv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4623      	mov	r3, r4
 8003fba:	a111      	add	r1, pc, #68	; (adr r1, 8004000 <lowlayer_scanFlow+0x268>)
 8003fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fc0:	f7fc f972 	bl	80002a8 <__aeabi_dsub>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <lowlayer_scanFlow+0x2a4>)
 8003fca:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8003fce:	2301      	movs	r3, #1
	}
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}
 8003fd8:	60000000 	.word	0x60000000
 8003fdc:	400921fb 	.word	0x400921fb
 8003fe0:	00000000 	.word	0x00000000
 8003fe4:	40f38800 	.word	0x40f38800
 8003fe8:	40000000 	.word	0x40000000
 8003fec:	bff9f17a 	.word	0xbff9f17a
 8003ff0:	80000000 	.word	0x80000000
 8003ff4:	40039716 	.word	0x40039716
 8003ff8:	a0000000 	.word	0xa0000000
 8003ffc:	40d3bca1 	.word	0x40d3bca1
 8004000:	00000000 	.word	0x00000000
 8004004:	4008def6 	.word	0x4008def6
 8004008:	20005398 	.word	0x20005398
 800400c:	20005388 	.word	0x20005388
 8004010:	0801bbc8 	.word	0x0801bbc8
 8004014:	40020c00 	.word	0x40020c00
 8004018:	20005378 	.word	0x20005378
 800401c:	2000538c 	.word	0x2000538c
 8004020:	200053c0 	.word	0x200053c0
 8004024:	20005368 	.word	0x20005368
 8004028:	2000539c 	.word	0x2000539c
 800402c:	0801b9dc 	.word	0x0801b9dc
 8004030:	0801b9f0 	.word	0x0801b9f0
 8004034:	0801ba04 	.word	0x0801ba04
 8004038:	0801ba18 	.word	0x0801ba18
 800403c:	200053a0 	.word	0x200053a0
 8004040:	40ff4000 	.word	0x40ff4000
 8004044:	4426aaab 	.word	0x4426aaab
 8004048:	400f1aa0 	.word	0x400f1aa0
 800404c:	00000000 	.word	0x00000000

08004050 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f871 	bl	8004148 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800406c:	a330      	add	r3, pc, #192	; (adr r3, 8004130 <lowlayer_goToSoftLimit+0xe0>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc fd43 	bl	8000afc <__aeabi_dcmplt>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800407c:	2303      	movs	r3, #3
 800407e:	723b      	strb	r3, [r7, #8]
		check++;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	3301      	adds	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800408c:	a32a      	add	r3, pc, #168	; (adr r3, 8004138 <lowlayer_goToSoftLimit+0xe8>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f7fc fd51 	bl	8000b38 <__aeabi_dcmpgt>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 800409c:	2305      	movs	r3, #5
 800409e:	727b      	strb	r3, [r7, #9]
		check++;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	3301      	adds	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	f7fc fd22 	bl	8000afc <__aeabi_dcmplt>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 80040be:	2305      	movs	r3, #5
 80040c0:	72bb      	strb	r3, [r7, #10]
		check++;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	3301      	adds	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80040ce:	a31c      	add	r3, pc, #112	; (adr r3, 8004140 <lowlayer_goToSoftLimit+0xf0>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fd30 	bl	8000b38 <__aeabi_dcmpgt>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 80040de:	230a      	movs	r3, #10
 80040e0:	72fb      	strb	r3, [r7, #11]
		check++;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	3301      	adds	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 80040ee:	f997 0008 	ldrsb.w	r0, [r7, #8]
 80040f2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	425b      	negs	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	b259      	sxtb	r1, r3
 80040fe:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004102:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	425b      	negs	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	b25b      	sxtb	r3, r3
 800410e:	f000 fa73 	bl	80045f8 <lowlayer_writePulse>
		return FALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	e006      	b.n	8004124 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004116:	2300      	movs	r3, #0
 8004118:	2200      	movs	r2, #0
 800411a:	2100      	movs	r1, #0
 800411c:	2000      	movs	r0, #0
 800411e:	f000 fa6b 	bl	80045f8 <lowlayer_writePulse>
		return TRUE;
 8004122:	2301      	movs	r3, #1
	}
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	f3af 8000 	nop.w
 8004130:	daaaaaab 	.word	0xdaaaaaab
 8004134:	bff7bc89 	.word	0xbff7bc89
 8004138:	88000000 	.word	0x88000000
 800413c:	4002d97c 	.word	0x4002d97c
 8004140:	daaaaaab 	.word	0xdaaaaaab
 8004144:	4007bc89 	.word	0x4007bc89

08004148 <lowlayer_readSetPosition>:

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
}

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8004148:	b5b0      	push	{r4, r5, r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <lowlayer_readSetPosition+0x158>)
 8004152:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004156:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <lowlayer_readSetPosition+0x15c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc f9f2 	bl	8000544 <__aeabi_i2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	f7fc f8a2 	bl	80002ac <__adddf3>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	a345      	add	r3, pc, #276	; (adr r3, 8004288 <lowlayer_readSetPosition+0x140>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc fa4f 	bl	8000618 <__aeabi_dmul>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	a343      	add	r3, pc, #268	; (adr r3, 8004290 <lowlayer_readSetPosition+0x148>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc fb70 	bl	800086c <__aeabi_ddiv>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f88a 	bl	80002ac <__adddf3>
 8004198:	4603      	mov	r3, r0
 800419a:	460c      	mov	r4, r1
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <lowlayer_readSetPosition+0x158>)
 80041a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <lowlayer_readSetPosition+0x15c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc f9c9 	bl	8000544 <__aeabi_i2d>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	f7fc f879 	bl	80002ac <__adddf3>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	a331      	add	r3, pc, #196	; (adr r3, 8004288 <lowlayer_readSetPosition+0x140>)
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f7fc fa26 	bl	8000618 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <lowlayer_readSetPosition+0x160>)
 80041da:	f7fc fb47 	bl	800086c <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4620      	mov	r0, r4
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7fc f861 	bl	80002ac <__adddf3>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <lowlayer_readSetPosition+0x158>)
 80041f6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <lowlayer_readSetPosition+0x15c>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004206:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80042ac <lowlayer_readSetPosition+0x164>
 800420a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800420e:	ee16 0a90 	vmov	r0, s13
 8004212:	f7fc f9a9 	bl	8000568 <__aeabi_f2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc f845 	bl	80002ac <__adddf3>
 8004222:	4603      	mov	r3, r0
 8004224:	460c      	mov	r4, r1
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <lowlayer_readSetPosition+0x158>)
 800422e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <lowlayer_readSetPosition+0x15c>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc f984 	bl	8000544 <__aeabi_i2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	f7fc f834 	bl	80002ac <__adddf3>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	a30e      	add	r3, pc, #56	; (adr r3, 8004288 <lowlayer_readSetPosition+0x140>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f9e1 	bl	8000618 <__aeabi_dmul>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	a30e      	add	r3, pc, #56	; (adr r3, 8004298 <lowlayer_readSetPosition+0x150>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc fb02 	bl	800086c <__aeabi_ddiv>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4620      	mov	r0, r4
 800426e:	4629      	mov	r1, r5
 8004270:	f7fc f81c 	bl	80002ac <__adddf3>
 8004274:	4603      	mov	r3, r0
 8004276:	460c      	mov	r4, r1
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bdb0      	pop	{r4, r5, r7, pc}
 8004286:	bf00      	nop
 8004288:	60000000 	.word	0x60000000
 800428c:	400921fb 	.word	0x400921fb
 8004290:	00000000 	.word	0x00000000
 8004294:	40d38800 	.word	0x40d38800
 8004298:	a0000000 	.word	0xa0000000
 800429c:	40d3bca1 	.word	0x40d3bca1
 80042a0:	200053a0 	.word	0x200053a0
 80042a4:	20005368 	.word	0x20005368
 80042a8:	40df4000 	.word	0x40df4000
 80042ac:	42c80000 	.word	0x42c80000

080042b0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80042b0:	b084      	sub	sp, #16
 80042b2:	b590      	push	{r4, r7, lr}
 80042b4:	b093      	sub	sp, #76	; 0x4c
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80042bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80042c0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80042c4:	a3c4      	add	r3, pc, #784	; (adr r3, 80045d8 <lowlayer_computeAndWritePulse+0x328>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f7fb ffef 	bl	80002ac <__adddf3>
 80042ce:	4603      	mov	r3, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	4618      	mov	r0, r3
 80042d4:	4621      	mov	r1, r4
 80042d6:	a3c2      	add	r3, pc, #776	; (adr r3, 80045e0 <lowlayer_computeAndWritePulse+0x330>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fc f99c 	bl	8000618 <__aeabi_dmul>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	4618      	mov	r0, r3
 80042e6:	4621      	mov	r1, r4
 80042e8:	a3b5      	add	r3, pc, #724	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc fabd 	bl	800086c <__aeabi_ddiv>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	ec44 3b17 	vmov	d7, r3, r4
 80042fa:	eeb0 0a47 	vmov.f32	s0, s14
 80042fe:	eef0 0a67 	vmov.f32	s1, s15
 8004302:	f015 fd39 	bl	8019d78 <round>
 8004306:	ec54 3b10 	vmov	r3, r4, d0
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	f7fc fc5b 	bl	8000bc8 <__aeabi_d2uiz>
 8004312:	4603      	mov	r3, r0
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800431a:	a3b3      	add	r3, pc, #716	; (adr r3, 80045e8 <lowlayer_computeAndWritePulse+0x338>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f7fb ffc4 	bl	80002ac <__adddf3>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4618      	mov	r0, r3
 800432a:	4621      	mov	r1, r4
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	4baf      	ldr	r3, [pc, #700]	; (80045f0 <lowlayer_computeAndWritePulse+0x340>)
 8004332:	f7fc f971 	bl	8000618 <__aeabi_dmul>
 8004336:	4603      	mov	r3, r0
 8004338:	460c      	mov	r4, r1
 800433a:	4618      	mov	r0, r3
 800433c:	4621      	mov	r1, r4
 800433e:	a3a0      	add	r3, pc, #640	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fc fa92 	bl	800086c <__aeabi_ddiv>
 8004348:	4603      	mov	r3, r0
 800434a:	460c      	mov	r4, r1
 800434c:	ec44 3b17 	vmov	d7, r3, r4
 8004350:	eeb0 0a47 	vmov.f32	s0, s14
 8004354:	eef0 0a67 	vmov.f32	s1, s15
 8004358:	f015 fd0e 	bl	8019d78 <round>
 800435c:	ec54 3b10 	vmov	r3, r4, d0
 8004360:	4618      	mov	r0, r3
 8004362:	4621      	mov	r1, r4
 8004364:	f7fc fc30 	bl	8000bc8 <__aeabi_d2uiz>
 8004368:	4603      	mov	r3, r0
 800436a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800436c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	4b9f      	ldr	r3, [pc, #636]	; (80045f4 <lowlayer_computeAndWritePulse+0x344>)
 8004376:	f7fc f94f 	bl	8000618 <__aeabi_dmul>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	ec44 3b17 	vmov	d7, r3, r4
 8004382:	eeb0 0a47 	vmov.f32	s0, s14
 8004386:	eef0 0a67 	vmov.f32	s1, s15
 800438a:	f015 fcf5 	bl	8019d78 <round>
 800438e:	ec54 3b10 	vmov	r3, r4, d0
 8004392:	4618      	mov	r0, r3
 8004394:	4621      	mov	r1, r4
 8004396:	f7fc fc17 	bl	8000bc8 <__aeabi_d2uiz>
 800439a:	4603      	mov	r3, r0
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800439e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80043a2:	a389      	add	r3, pc, #548	; (adr r3, 80045c8 <lowlayer_computeAndWritePulse+0x318>)
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fb ff80 	bl	80002ac <__adddf3>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	4618      	mov	r0, r3
 80043b2:	4621      	mov	r1, r4
 80043b4:	a386      	add	r3, pc, #536	; (adr r3, 80045d0 <lowlayer_computeAndWritePulse+0x320>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f7fc f92d 	bl	8000618 <__aeabi_dmul>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	4618      	mov	r0, r3
 80043c4:	4621      	mov	r1, r4
 80043c6:	a37e      	add	r3, pc, #504	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f7fc fa4e 	bl	800086c <__aeabi_ddiv>
 80043d0:	4603      	mov	r3, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	ec44 3b17 	vmov	d7, r3, r4
 80043d8:	eeb0 0a47 	vmov.f32	s0, s14
 80043dc:	eef0 0a67 	vmov.f32	s1, s15
 80043e0:	f015 fcca 	bl	8019d78 <round>
 80043e4:	ec54 3b10 	vmov	r3, r4, d0
 80043e8:	4618      	mov	r0, r3
 80043ea:	4621      	mov	r1, r4
 80043ec:	f7fc fbec 	bl	8000bc8 <__aeabi_d2uiz>
 80043f0:	4603      	mov	r3, r0
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80043f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80043f8:	a377      	add	r3, pc, #476	; (adr r3, 80045d8 <lowlayer_computeAndWritePulse+0x328>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fb ff55 	bl	80002ac <__adddf3>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	4618      	mov	r0, r3
 8004408:	4621      	mov	r1, r4
 800440a:	a375      	add	r3, pc, #468	; (adr r3, 80045e0 <lowlayer_computeAndWritePulse+0x330>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f902 	bl	8000618 <__aeabi_dmul>
 8004414:	4603      	mov	r3, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4618      	mov	r0, r3
 800441a:	4621      	mov	r1, r4
 800441c:	a368      	add	r3, pc, #416	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fc fa23 	bl	800086c <__aeabi_ddiv>
 8004426:	4603      	mov	r3, r0
 8004428:	460c      	mov	r4, r1
 800442a:	ec44 3b17 	vmov	d7, r3, r4
 800442e:	eeb0 0a47 	vmov.f32	s0, s14
 8004432:	eef0 0a67 	vmov.f32	s1, s15
 8004436:	f015 fc9f 	bl	8019d78 <round>
 800443a:	ec54 3b10 	vmov	r3, r4, d0
 800443e:	4618      	mov	r0, r3
 8004440:	4621      	mov	r1, r4
 8004442:	f7fc fbc1 	bl	8000bc8 <__aeabi_d2uiz>
 8004446:	4603      	mov	r3, r0
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800444a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800444e:	a366      	add	r3, pc, #408	; (adr r3, 80045e8 <lowlayer_computeAndWritePulse+0x338>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fb ff2a 	bl	80002ac <__adddf3>
 8004458:	4603      	mov	r3, r0
 800445a:	460c      	mov	r4, r1
 800445c:	4618      	mov	r0, r3
 800445e:	4621      	mov	r1, r4
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <lowlayer_computeAndWritePulse+0x340>)
 8004466:	f7fc f8d7 	bl	8000618 <__aeabi_dmul>
 800446a:	4603      	mov	r3, r0
 800446c:	460c      	mov	r4, r1
 800446e:	4618      	mov	r0, r3
 8004470:	4621      	mov	r1, r4
 8004472:	a353      	add	r3, pc, #332	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f7fc f9f8 	bl	800086c <__aeabi_ddiv>
 800447c:	4603      	mov	r3, r0
 800447e:	460c      	mov	r4, r1
 8004480:	ec44 3b17 	vmov	d7, r3, r4
 8004484:	eeb0 0a47 	vmov.f32	s0, s14
 8004488:	eef0 0a67 	vmov.f32	s1, s15
 800448c:	f015 fc74 	bl	8019d78 <round>
 8004490:	ec54 3b10 	vmov	r3, r4, d0
 8004494:	4618      	mov	r0, r3
 8004496:	4621      	mov	r1, r4
 8004498:	f7fc fb96 	bl	8000bc8 <__aeabi_d2uiz>
 800449c:	4603      	mov	r3, r0
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80044a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <lowlayer_computeAndWritePulse+0x344>)
 80044aa:	f7fc f8b5 	bl	8000618 <__aeabi_dmul>
 80044ae:	4603      	mov	r3, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	ec44 3b17 	vmov	d7, r3, r4
 80044b6:	eeb0 0a47 	vmov.f32	s0, s14
 80044ba:	eef0 0a67 	vmov.f32	s1, s15
 80044be:	f015 fc5b 	bl	8019d78 <round>
 80044c2:	ec54 3b10 	vmov	r3, r4, d0
 80044c6:	4618      	mov	r0, r3
 80044c8:	4621      	mov	r1, r4
 80044ca:	f7fc fb7d 	bl	8000bc8 <__aeabi_d2uiz>
 80044ce:	4603      	mov	r3, r0
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80044d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80044d6:	a33c      	add	r3, pc, #240	; (adr r3, 80045c8 <lowlayer_computeAndWritePulse+0x318>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fee6 	bl	80002ac <__adddf3>
 80044e0:	4603      	mov	r3, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	4618      	mov	r0, r3
 80044e6:	4621      	mov	r1, r4
 80044e8:	a339      	add	r3, pc, #228	; (adr r3, 80045d0 <lowlayer_computeAndWritePulse+0x320>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fc f893 	bl	8000618 <__aeabi_dmul>
 80044f2:	4603      	mov	r3, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	4618      	mov	r0, r3
 80044f8:	4621      	mov	r1, r4
 80044fa:	a331      	add	r3, pc, #196	; (adr r3, 80045c0 <lowlayer_computeAndWritePulse+0x310>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc f9b4 	bl	800086c <__aeabi_ddiv>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	ec44 3b17 	vmov	d7, r3, r4
 800450c:	eeb0 0a47 	vmov.f32	s0, s14
 8004510:	eef0 0a67 	vmov.f32	s1, s15
 8004514:	f015 fc30 	bl	8019d78 <round>
 8004518:	ec54 3b10 	vmov	r3, r4, d0
 800451c:	4618      	mov	r0, r3
 800451e:	4621      	mov	r1, r4
 8004520:	f7fc fb52 	bl	8000bc8 <__aeabi_d2uiz>
 8004524:	4603      	mov	r3, r0
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb8      	it	lt
 8004566:	425b      	neglt	r3, r3
 8004568:	2b7f      	cmp	r3, #127	; 0x7f
 800456a:	dc11      	bgt.n	8004590 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfb8      	it	lt
 8004572:	425b      	neglt	r3, r3
 8004574:	2b7f      	cmp	r3, #127	; 0x7f
 8004576:	dc0b      	bgt.n	8004590 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfb8      	it	lt
 800457e:	425b      	neglt	r3, r3
 8004580:	2b7f      	cmp	r3, #127	; 0x7f
 8004582:	dc05      	bgt.n	8004590 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfb8      	it	lt
 800458a:	425b      	neglt	r3, r3
 800458c:	2b7f      	cmp	r3, #127	; 0x7f
 800458e:	dd01      	ble.n	8004594 <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	e00c      	b.n	80045ae <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004594:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004598:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800459c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80045a0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80045a4:	f000 f828 	bl	80045f8 <lowlayer_writePulse>
 80045a8:	4603      	mov	r3, r0
 80045aa:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80045ac:	79fb      	ldrb	r3, [r7, #7]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	374c      	adds	r7, #76	; 0x4c
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr
 80045bc:	f3af 8000 	nop.w
 80045c0:	60000000 	.word	0x60000000
 80045c4:	401921fb 	.word	0x401921fb
 80045c8:	daaaaaab 	.word	0xdaaaaaab
 80045cc:	4007bc89 	.word	0x4007bc89
 80045d0:	a0000000 	.word	0xa0000000
 80045d4:	40d3bca1 	.word	0x40d3bca1
 80045d8:	daaaaaab 	.word	0xdaaaaaab
 80045dc:	3ff7bc89 	.word	0x3ff7bc89
 80045e0:	00000000 	.word	0x00000000
 80045e4:	40d38800 	.word	0x40d38800
 80045e8:	88000000 	.word	0x88000000
 80045ec:	4002d97c 	.word	0x4002d97c
 80045f0:	40df4000 	.word	0x40df4000
 80045f4:	40590000 	.word	0x40590000

080045f8 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	71fb      	strb	r3, [r7, #7]
 800460a:	4603      	mov	r3, r0
 800460c:	71bb      	strb	r3, [r7, #6]
 800460e:	460b      	mov	r3, r1
 8004610:	717b      	strb	r3, [r7, #5]
 8004612:	4613      	mov	r3, r2
 8004614:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	da06      	bge.n	800462c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	425b      	negs	r3, r3
 8004622:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	425b      	negs	r3, r3
 8004628:	75fb      	strb	r3, [r7, #23]
 800462a:	e006      	b.n	800463a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004636:	b25b      	sxtb	r3, r3
 8004638:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800463a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da06      	bge.n	8004650 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004642:	79bb      	ldrb	r3, [r7, #6]
 8004644:	425b      	negs	r3, r3
 8004646:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004648:	79bb      	ldrb	r3, [r7, #6]
 800464a:	425b      	negs	r3, r3
 800464c:	75bb      	strb	r3, [r7, #22]
 800464e:	e006      	b.n	800465e <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004650:	79bb      	ldrb	r3, [r7, #6]
 8004652:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004654:	79bb      	ldrb	r3, [r7, #6]
 8004656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800465a:	b25b      	sxtb	r3, r3
 800465c:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 800465e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004662:	2b00      	cmp	r3, #0
 8004664:	da0b      	bge.n	800467e <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004666:	797b      	ldrb	r3, [r7, #5]
 8004668:	425b      	negs	r3, r3
 800466a:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 800466c:	797b      	ldrb	r3, [r7, #5]
 800466e:	425b      	negs	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	b25b      	sxtb	r3, r3
 8004674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004678:	b25b      	sxtb	r3, r3
 800467a:	757b      	strb	r3, [r7, #21]
 800467c:	e003      	b.n	8004686 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 800467e:	797b      	ldrb	r3, [r7, #5]
 8004680:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004682:	797b      	ldrb	r3, [r7, #5]
 8004684:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004686:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da06      	bge.n	800469c <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 800468e:	793b      	ldrb	r3, [r7, #4]
 8004690:	425b      	negs	r3, r3
 8004692:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004694:	793b      	ldrb	r3, [r7, #4]
 8004696:	425b      	negs	r3, r3
 8004698:	753b      	strb	r3, [r7, #20]
 800469a:	e006      	b.n	80046aa <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 800469c:	793b      	ldrb	r3, [r7, #4]
 800469e:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80046a0:	793b      	ldrb	r3, [r7, #4]
 80046a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b4b      	cmp	r3, #75	; 0x4b
 80046ae:	d808      	bhi.n	80046c2 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80046b0:	7cbb      	ldrb	r3, [r7, #18]
 80046b2:	2b78      	cmp	r3, #120	; 0x78
 80046b4:	d805      	bhi.n	80046c2 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80046b6:	7c7b      	ldrb	r3, [r7, #17]
 80046b8:	2b7d      	cmp	r3, #125	; 0x7d
 80046ba:	d802      	bhi.n	80046c2 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80046bc:	7c3b      	ldrb	r3, [r7, #16]
 80046be:	2b65      	cmp	r3, #101	; 0x65
 80046c0:	d901      	bls.n	80046c6 <lowlayer_writePulse+0xce>
		return FALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e04b      	b.n	800475e <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80046c6:	2200      	movs	r2, #0
 80046c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046cc:	4826      	ldr	r0, [pc, #152]	; (8004768 <lowlayer_writePulse+0x170>)
 80046ce:	f007 faa7 	bl	800bc20 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80046da:	f7fe fca9 	bl	8003030 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80046de:	7dbb      	ldrb	r3, [r7, #22]
 80046e0:	4619      	mov	r1, r3
 80046e2:	4822      	ldr	r0, [pc, #136]	; (800476c <lowlayer_writePulse+0x174>)
 80046e4:	f7fe fca4 	bl	8003030 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80046e8:	7d7b      	ldrb	r3, [r7, #21]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4820      	ldr	r0, [pc, #128]	; (8004770 <lowlayer_writePulse+0x178>)
 80046ee:	f7fe fc9f 	bl	8003030 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80046f2:	7d3b      	ldrb	r3, [r7, #20]
 80046f4:	4619      	mov	r1, r3
 80046f6:	481f      	ldr	r0, [pc, #124]	; (8004774 <lowlayer_writePulse+0x17c>)
 80046f8:	f7fe fc9a 	bl	8003030 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80046fc:	2364      	movs	r3, #100	; 0x64
 80046fe:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004706:	481c      	ldr	r0, [pc, #112]	; (8004778 <lowlayer_writePulse+0x180>)
 8004708:	f007 fa8a 	bl	800bc20 <HAL_GPIO_WritePin>
	while (delay--);
 800470c:	bf00      	nop
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	73fa      	strb	r2, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1fa      	bne.n	800470e <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004718:	2201      	movs	r2, #1
 800471a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800471e:	4816      	ldr	r0, [pc, #88]	; (8004778 <lowlayer_writePulse+0x180>)
 8004720:	f007 fa7e 	bl	800bc20 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <lowlayer_writePulse+0x184>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472c:	4413      	add	r3, r2
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <lowlayer_writePulse+0x184>)
 8004730:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <lowlayer_writePulse+0x184>)
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800473a:	4413      	add	r3, r2
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <lowlayer_writePulse+0x184>)
 800473e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <lowlayer_writePulse+0x184>)
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004748:	4413      	add	r3, r2
 800474a:	4a0c      	ldr	r2, [pc, #48]	; (800477c <lowlayer_writePulse+0x184>)
 800474c:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <lowlayer_writePulse+0x184>)
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	4a08      	ldr	r2, [pc, #32]	; (800477c <lowlayer_writePulse+0x184>)
 800475a:	60d3      	str	r3, [r2, #12]

	return TRUE;
 800475c:	2301      	movs	r3, #1
}
 800475e:	4618      	mov	r0, r3
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	40020000 	.word	0x40020000
 800476c:	60000002 	.word	0x60000002
 8004770:	60000004 	.word	0x60000004
 8004774:	60000006 	.word	0x60000006
 8004778:	40020c00 	.word	0x40020c00
 800477c:	20005368 	.word	0x20005368

08004780 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004786:	2364      	movs	r3, #100	; 0x64
 8004788:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 800478a:	2201      	movs	r2, #1
 800478c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004790:	4809      	ldr	r0, [pc, #36]	; (80047b8 <lowlayer_resetEncoder+0x38>)
 8004792:	f007 fa45 	bl	800bc20 <HAL_GPIO_WritePin>
	while (delay--);
 8004796:	bf00      	nop
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	71fa      	strb	r2, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1fa      	bne.n	8004798 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80047a2:	2200      	movs	r2, #0
 80047a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047a8:	4803      	ldr	r0, [pc, #12]	; (80047b8 <lowlayer_resetEncoder+0x38>)
 80047aa:	f007 fa39 	bl	800bc20 <HAL_GPIO_WritePin>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40020c00 	.word	0x40020c00

080047bc <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80047c2:	4805      	ldr	r0, [pc, #20]	; (80047d8 <lowlayer_readLimitSwitch+0x1c>)
 80047c4:	f7fe fc43 	bl	800304e <FSMC_Read>
 80047c8:	4603      	mov	r3, r0
 80047ca:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	b2db      	uxtb	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	60000020 	.word	0x60000020

080047dc <lowlayer_readCapture>:
		data = 0;
	}
	return data;
}

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d81c      	bhi.n	8004826 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80047f2:	3318      	adds	r3, #24
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fc29 	bl	800304e <FSMC_Read>
 80047fc:	4603      	mov	r3, r0
 80047fe:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004806:	3318      	adds	r3, #24
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	3302      	adds	r3, #2
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fc1e 	bl	800304e <FSMC_Read>
 8004812:	4603      	mov	r3, r0
 8004814:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004816:	893b      	ldrh	r3, [r7, #8]
 8004818:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e001      	b.n	800482a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <lowlayer_updateCapture>:
	for (uint8_t i = 0; i < 3; i++) {
		position_encoder[i] = lowlayer_readEncoder(i);
	}
}

void	lowlayer_updateCapture(void) {
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800483a:	2300      	movs	r3, #0
 800483c:	71fb      	strb	r3, [r7, #7]
 800483e:	e00b      	b.n	8004858 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004840:	79fc      	ldrb	r4, [r7, #7]
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ffc9 	bl	80047dc <lowlayer_readCapture>
 800484a:	4602      	mov	r2, r0
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <lowlayer_updateCapture+0x34>)
 800484e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	3301      	adds	r3, #1
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d9f0      	bls.n	8004840 <lowlayer_updateCapture+0xc>
	}
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	2000538c 	.word	0x2000538c

0800486c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004872:	f7ff ffa3 	bl	80047bc <lowlayer_readLimitSwitch>
 8004876:	4603      	mov	r3, r0
 8004878:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 800487a:	2300      	movs	r3, #0
 800487c:	71fb      	strb	r3, [r7, #7]
 800487e:	e00d      	b.n	800489c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004880:	79ba      	ldrb	r2, [r7, #6]
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	fa42 f303 	asr.w	r3, r2, r3
 8004888:	b2da      	uxtb	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	f002 0201 	and.w	r2, r2, #1
 8004890:	b2d1      	uxtb	r1, r2
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <lowlayer_updateLimit+0x40>)
 8004894:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	3301      	adds	r3, #1
 800489a:	71fb      	strb	r3, [r7, #7]
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d9ee      	bls.n	8004880 <lowlayer_updateLimit+0x14>
	}
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20005388 	.word	0x20005388

080048b0 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048c6:	4807      	ldr	r0, [pc, #28]	; (80048e4 <lowlayer_setOutput+0x34>)
 80048c8:	f007 f9aa 	bl	800bc20 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80048cc:	e005      	b.n	80048da <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048d4:	4803      	ldr	r0, [pc, #12]	; (80048e4 <lowlayer_setOutput+0x34>)
 80048d6:	f007 f9a3 	bl	800bc20 <HAL_GPIO_WritePin>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40020400 	.word	0x40020400

080048e8 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 80048ec:	2201      	movs	r2, #1
 80048ee:	2140      	movs	r1, #64	; 0x40
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <lowlayer_CPLD_Init+0x14>)
 80048f2:	f007 f995 	bl	800bc20 <HAL_GPIO_WritePin>
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40020c00 	.word	0x40020c00

08004900 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004904:	2201      	movs	r2, #1
 8004906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800490a:	4808      	ldr	r0, [pc, #32]	; (800492c <lowlayer_stepMotorInit+0x2c>)
 800490c:	f007 f988 	bl	800bc20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004910:	2201      	movs	r2, #1
 8004912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004916:	4805      	ldr	r0, [pc, #20]	; (800492c <lowlayer_stepMotorInit+0x2c>)
 8004918:	f007 f982 	bl	800bc20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 800491c:	2201      	movs	r2, #1
 800491e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004922:	4802      	ldr	r0, [pc, #8]	; (800492c <lowlayer_stepMotorInit+0x2c>)
 8004924:	f007 f97c 	bl	800bc20 <HAL_GPIO_WritePin>
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40020000 	.word	0x40020000

08004930 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
 8004934:	f004 fb50 	bl	8008fd8 <scaraSetScanFlag>
#endif
	lowlayer_CPLD_Init();
 8004938:	f7ff ffd6 	bl	80048e8 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 800493c:	f7ff ffe0 	bl	8004900 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004940:	f7ff ff1e 	bl	8004780 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 8004944:	2300      	movs	r3, #0
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	2000      	movs	r0, #0
 800494c:	f7ff fe54 	bl	80045f8 <lowlayer_writePulse>
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	0000      	movs	r0, r0
	...

08004958 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004958:	b084      	sub	sp, #16
 800495a:	b5b0      	push	{r4, r5, r7, lr}
 800495c:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8004960:	af8a      	add	r7, sp, #552	; 0x228
 8004962:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 8004966:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 800496a:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 834c 	bne.w	800500c <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8004974:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004978:	a3ab      	add	r3, pc, #684	; (adr r3, 8004c28 <scaraInitDuty+0x2d0>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f7fb fe4b 	bl	8000618 <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	4ba8      	ldr	r3, [pc, #672]	; (8004c30 <scaraInitDuty+0x2d8>)
 8004990:	f7fb ff6c 	bl	800086c <__aeabi_ddiv>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800499c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d130      	bne.n	8004a06 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80049a4:	4ba3      	ldr	r3, [pc, #652]	; (8004c34 <scaraInitDuty+0x2dc>)
 80049a6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80049aa:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80049ae:	f7fb fc7d 	bl	80002ac <__adddf3>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4639      	mov	r1, r7
 80049b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80049bc:	4b9d      	ldr	r3, [pc, #628]	; (8004c34 <scaraInitDuty+0x2dc>)
 80049be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80049c2:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80049c6:	f7fb fc71 	bl	80002ac <__adddf3>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4639      	mov	r1, r7
 80049d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80049d4:	4b97      	ldr	r3, [pc, #604]	; (8004c34 <scaraInitDuty+0x2dc>)
 80049d6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80049da:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80049de:	f7fb fc65 	bl	80002ac <__adddf3>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4639      	mov	r1, r7
 80049e8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80049ec:	4b91      	ldr	r3, [pc, #580]	; (8004c34 <scaraInitDuty+0x2dc>)
 80049ee:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80049f2:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80049f6:	f7fb fc59 	bl	80002ac <__adddf3>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4639      	mov	r1, r7
 8004a00:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004a04:	e01b      	b.n	8004a3e <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004a06:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d114      	bne.n	8004a38 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8004a0e:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004a12:	4639      	mov	r1, r7
 8004a14:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8004a18:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8004a22:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004a26:	4639      	mov	r1, r7
 8004a28:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8004a2c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004a30:	4639      	mov	r1, r7
 8004a32:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004a36:	e002      	b.n	8004a3e <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004a38:	230c      	movs	r3, #12
 8004a3a:	f001 ba71 	b.w	8005f20 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8004a3e:	463b      	mov	r3, r7
 8004a40:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004a44:	4b7b      	ldr	r3, [pc, #492]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004a46:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004a4a:	f7fb fc2d 	bl	80002a8 <__aeabi_dsub>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004a68:	f7fc f848 	bl	8000afc <__aeabi_dcmplt>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <scaraInitDuty+0x120>
			dir_angle = -1;
 8004a72:	23ff      	movs	r3, #255	; 0xff
 8004a74:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004a78:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 8004a7c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004a80:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a84:	a368      	add	r3, pc, #416	; (adr r3, 8004c28 <scaraInitDuty+0x2d0>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fc f853 	bl	8000b38 <__aeabi_dcmpgt>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d021      	beq.n	8004adc <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004a98:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8004aa4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004aa8:	f7fc f8ae 	bl	8000c08 <__aeabi_d2f>
 8004aac:	ee07 0a90 	vmov	s15, r0
 8004ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ab4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004c38 <scaraInitDuty+0x2e0>
 8004ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004abc:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	f7fb fd4a 	bl	8000568 <__aeabi_f2d>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8004adc:	4b57      	ldr	r3, [pc, #348]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8004ae2:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004ae4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004ae8:	4a54      	ldr	r2, [pc, #336]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004aea:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8004aee:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11f      	bne.n	8004b36 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8004af6:	4b51      	ldr	r3, [pc, #324]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8004afc:	4c4d      	ldr	r4, [pc, #308]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004afe:	463b      	mov	r3, r7
 8004b00:	a82c      	add	r0, sp, #176	; 0xb0
 8004b02:	4619      	mov	r1, r3
 8004b04:	23b8      	movs	r3, #184	; 0xb8
 8004b06:	461a      	mov	r2, r3
 8004b08:	f010 fec2 	bl	8015890 <memcpy>
 8004b0c:	4668      	mov	r0, sp
 8004b0e:	f104 0308 	add.w	r3, r4, #8
 8004b12:	22b0      	movs	r2, #176	; 0xb0
 8004b14:	4619      	mov	r1, r3
 8004b16:	f010 febb 	bl	8015890 <memcpy>
 8004b1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004b1e:	4848      	ldr	r0, [pc, #288]	; (8004c40 <scaraInitDuty+0x2e8>)
 8004b20:	f001 fa10 	bl	8005f44 <scaraInitLine>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8004b2a:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004b2c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004b30:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004b34:	e070      	b.n	8004c18 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8004b36:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d169      	bne.n	8004c12 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004b3e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d127      	bne.n	8004b96 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8004b46:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004b48:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004b4c:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	f7fb fbaa 	bl	80002ac <__adddf3>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004b60:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004b62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004b66:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	f7fb fb9d 	bl	80002ac <__adddf3>
 8004b72:	4603      	mov	r3, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004b7a:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004b7c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004b80:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8004b84:	461a      	mov	r2, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	f7fb fb90 	bl	80002ac <__adddf3>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004b94:	e013      	b.n	8004bbe <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004b96:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004b9e:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004ba2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 8004ba6:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004baa:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004bae:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004bb2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004bb6:	e002      	b.n	8004bbe <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004bb8:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004bba:	f001 b9b1 	b.w	8005f20 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004bc4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004bc8:	4c1a      	ldr	r4, [pc, #104]	; (8004c34 <scaraInitDuty+0x2dc>)
 8004bca:	9388      	str	r3, [sp, #544]	; 0x220
 8004bcc:	a85a      	add	r0, sp, #360	; 0x168
 8004bce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004bd2:	22b8      	movs	r2, #184	; 0xb8
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f010 fe5b 	bl	8015890 <memcpy>
 8004bda:	463b      	mov	r3, r7
 8004bdc:	a82c      	add	r0, sp, #176	; 0xb0
 8004bde:	4619      	mov	r1, r3
 8004be0:	23b8      	movs	r3, #184	; 0xb8
 8004be2:	461a      	mov	r2, r3
 8004be4:	f010 fe54 	bl	8015890 <memcpy>
 8004be8:	4668      	mov	r0, sp
 8004bea:	f104 0308 	add.w	r3, r4, #8
 8004bee:	22b0      	movs	r2, #176	; 0xb0
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f010 fe4d 	bl	8015890 <memcpy>
 8004bf6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004bfa:	4812      	ldr	r0, [pc, #72]	; (8004c44 <scaraInitDuty+0x2ec>)
 8004bfc:	f001 fa68 	bl	80060d0 <scaraInitCircle>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <scaraInitDuty+0x2e4>)
 8004c08:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004c0c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004c10:	e002      	b.n	8004c18 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004c12:	2303      	movs	r3, #3
 8004c14:	f001 b984 	b.w	8005f20 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004c18:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <scaraInitDuty+0x2f0>
			return status;
 8004c20:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004c24:	f001 b97c 	b.w	8005f20 <scaraInitDuty+0x15c8>
 8004c28:	60000000 	.word	0x60000000
 8004c2c:	400921fb 	.word	0x400921fb
 8004c30:	40668000 	.word	0x40668000
 8004c34:	20005e90 	.word	0x20005e90
 8004c38:	40c90fdb 	.word	0x40c90fdb
 8004c3c:	200053d0 	.word	0x200053d0
 8004c40:	200053e0 	.word	0x200053e0
 8004c44:	20005450 	.word	0x20005450
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004c48:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f040 80dd 	bne.w	8004e0c <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004c52:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d145      	bne.n	8004ce6 <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004c5a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004c5e:	4ac8      	ldr	r2, [pc, #800]	; (8004f80 <scaraInitDuty+0x628>)
 8004c60:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004c64:	4bc6      	ldr	r3, [pc, #792]	; (8004f80 <scaraInitDuty+0x628>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004c6c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c70:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c74:	eeb0 2a46 	vmov.f32	s4, s12
 8004c78:	eef0 2a66 	vmov.f32	s5, s13
 8004c7c:	eeb0 1a47 	vmov.f32	s2, s14
 8004c80:	eef0 1a67 	vmov.f32	s3, s15
 8004c84:	2201      	movs	r2, #1
 8004c86:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	48bd      	ldr	r0, [pc, #756]	; (8004f84 <scaraInitDuty+0x62c>)
 8004c8e:	f001 fb97 	bl	80063c0 <scaraInitLSPB>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004c98:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004c9c:	4ab8      	ldr	r2, [pc, #736]	; (8004f80 <scaraInitDuty+0x628>)
 8004c9e:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004ca2:	4bb7      	ldr	r3, [pc, #732]	; (8004f80 <scaraInitDuty+0x628>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004caa:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004cae:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004cb2:	eeb0 2a46 	vmov.f32	s4, s12
 8004cb6:	eef0 2a66 	vmov.f32	s5, s13
 8004cba:	eeb0 1a47 	vmov.f32	s2, s14
 8004cbe:	eef0 1a67 	vmov.f32	s3, s15
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004cc8:	2105      	movs	r1, #5
 8004cca:	48af      	ldr	r0, [pc, #700]	; (8004f88 <scaraInitDuty+0x630>)
 8004ccc:	f001 fb78 	bl	80063c0 <scaraInitLSPB>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004cd6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004cda:	4aa9      	ldr	r2, [pc, #676]	; (8004f80 <scaraInitDuty+0x628>)
 8004cdc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ce0:	e9c2 3400 	strd	r3, r4, [r2]
 8004ce4:	e181      	b.n	8004fea <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004ce6:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 808b 	bne.w	8004e06 <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004cf0:	4ba3      	ldr	r3, [pc, #652]	; (8004f80 <scaraInitDuty+0x628>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004cf8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004cfc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d00:	eeb0 2a46 	vmov.f32	s4, s12
 8004d04:	eef0 2a66 	vmov.f32	s5, s13
 8004d08:	eeb0 1a47 	vmov.f32	s2, s14
 8004d0c:	eef0 1a67 	vmov.f32	s3, s15
 8004d10:	2200      	movs	r2, #0
 8004d12:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004d16:	2104      	movs	r1, #4
 8004d18:	489a      	ldr	r0, [pc, #616]	; (8004f84 <scaraInitDuty+0x62c>)
 8004d1a:	f001 fb51 	bl	80063c0 <scaraInitLSPB>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004d24:	4b96      	ldr	r3, [pc, #600]	; (8004f80 <scaraInitDuty+0x628>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004d2c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d30:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d34:	eeb0 2a46 	vmov.f32	s4, s12
 8004d38:	eef0 2a66 	vmov.f32	s5, s13
 8004d3c:	eeb0 1a47 	vmov.f32	s2, s14
 8004d40:	eef0 1a67 	vmov.f32	s3, s15
 8004d44:	2200      	movs	r2, #0
 8004d46:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d4a:	2105      	movs	r1, #5
 8004d4c:	488e      	ldr	r0, [pc, #568]	; (8004f88 <scaraInitDuty+0x630>)
 8004d4e:	f001 fb37 	bl	80063c0 <scaraInitLSPB>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004d58:	4b89      	ldr	r3, [pc, #548]	; (8004f80 <scaraInitDuty+0x628>)
 8004d5a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004d5e:	4b88      	ldr	r3, [pc, #544]	; (8004f80 <scaraInitDuty+0x628>)
 8004d60:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004d64:	461a      	mov	r2, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	f7fb fee6 	bl	8000b38 <__aeabi_dcmpgt>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d024      	beq.n	8004dbc <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004d72:	4b83      	ldr	r3, [pc, #524]	; (8004f80 <scaraInitDuty+0x628>)
 8004d74:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004d78:	4a81      	ldr	r2, [pc, #516]	; (8004f80 <scaraInitDuty+0x628>)
 8004d7a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004d7e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d82:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d86:	eeb0 2a46 	vmov.f32	s4, s12
 8004d8a:	eef0 2a66 	vmov.f32	s5, s13
 8004d8e:	eeb0 1a47 	vmov.f32	s2, s14
 8004d92:	eef0 1a67 	vmov.f32	s3, s15
 8004d96:	2201      	movs	r2, #1
 8004d98:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d9c:	2105      	movs	r1, #5
 8004d9e:	487a      	ldr	r0, [pc, #488]	; (8004f88 <scaraInitDuty+0x630>)
 8004da0:	f001 fb0e 	bl	80063c0 <scaraInitLSPB>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8004daa:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <scaraInitDuty+0x628>)
 8004dac:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004db0:	4a73      	ldr	r2, [pc, #460]	; (8004f80 <scaraInitDuty+0x628>)
 8004db2:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004db6:	e9c2 3400 	strd	r3, r4, [r2]
 8004dba:	e116      	b.n	8004fea <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8004dbc:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <scaraInitDuty+0x628>)
 8004dbe:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	; (8004f80 <scaraInitDuty+0x628>)
 8004dc4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004dc8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004dcc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004dd0:	eeb0 2a46 	vmov.f32	s4, s12
 8004dd4:	eef0 2a66 	vmov.f32	s5, s13
 8004dd8:	eeb0 1a47 	vmov.f32	s2, s14
 8004ddc:	eef0 1a67 	vmov.f32	s3, s15
 8004de0:	2201      	movs	r2, #1
 8004de2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004de6:	2104      	movs	r1, #4
 8004de8:	4866      	ldr	r0, [pc, #408]	; (8004f84 <scaraInitDuty+0x62c>)
 8004dea:	f001 fae9 	bl	80063c0 <scaraInitLSPB>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004df4:	4b62      	ldr	r3, [pc, #392]	; (8004f80 <scaraInitDuty+0x628>)
 8004df6:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004dfa:	4a61      	ldr	r2, [pc, #388]	; (8004f80 <scaraInitDuty+0x628>)
 8004dfc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004e00:	e9c2 3400 	strd	r3, r4, [r2]
 8004e04:	e0f1      	b.n	8004fea <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004e06:	2308      	movs	r3, #8
 8004e08:	f001 b88a 	b.w	8005f20 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004e0c:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 80e7 	bne.w	8004fe4 <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004e16:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d145      	bne.n	8004eaa <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8004e1e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004e22:	4a57      	ldr	r2, [pc, #348]	; (8004f80 <scaraInitDuty+0x628>)
 8004e24:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004e28:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <scaraInitDuty+0x628>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004e30:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e34:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e38:	eeb0 2a46 	vmov.f32	s4, s12
 8004e3c:	eef0 2a66 	vmov.f32	s5, s13
 8004e40:	eeb0 1a47 	vmov.f32	s2, s14
 8004e44:	eef0 1a67 	vmov.f32	s3, s15
 8004e48:	2201      	movs	r2, #1
 8004e4a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004e4e:	2104      	movs	r1, #4
 8004e50:	484e      	ldr	r0, [pc, #312]	; (8004f8c <scaraInitDuty+0x634>)
 8004e52:	f001 fea1 	bl	8006b98 <scaraInitScurve>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8004e5c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004e60:	4a47      	ldr	r2, [pc, #284]	; (8004f80 <scaraInitDuty+0x628>)
 8004e62:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004e66:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <scaraInitDuty+0x628>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004e6e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e72:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e76:	eeb0 2a46 	vmov.f32	s4, s12
 8004e7a:	eef0 2a66 	vmov.f32	s5, s13
 8004e7e:	eeb0 1a47 	vmov.f32	s2, s14
 8004e82:	eef0 1a67 	vmov.f32	s3, s15
 8004e86:	2201      	movs	r2, #1
 8004e88:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	4840      	ldr	r0, [pc, #256]	; (8004f90 <scaraInitDuty+0x638>)
 8004e90:	f001 fe82 	bl	8006b98 <scaraInitScurve>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004e9a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004e9e:	4a38      	ldr	r2, [pc, #224]	; (8004f80 <scaraInitDuty+0x628>)
 8004ea0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ea4:	e9c2 3400 	strd	r3, r4, [r2]
 8004ea8:	e09f      	b.n	8004fea <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004eaa:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 8095 	bne.w	8004fde <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004eb4:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <scaraInitDuty+0x628>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004ebc:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ec0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004ec4:	eeb0 2a46 	vmov.f32	s4, s12
 8004ec8:	eef0 2a66 	vmov.f32	s5, s13
 8004ecc:	eeb0 1a47 	vmov.f32	s2, s14
 8004ed0:	eef0 1a67 	vmov.f32	s3, s15
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004eda:	2104      	movs	r1, #4
 8004edc:	482b      	ldr	r0, [pc, #172]	; (8004f8c <scaraInitDuty+0x634>)
 8004ede:	f001 fe5b 	bl	8006b98 <scaraInitScurve>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <scaraInitDuty+0x628>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004ef0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ef4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004ef8:	eeb0 2a46 	vmov.f32	s4, s12
 8004efc:	eef0 2a66 	vmov.f32	s5, s13
 8004f00:	eeb0 1a47 	vmov.f32	s2, s14
 8004f04:	eef0 1a67 	vmov.f32	s3, s15
 8004f08:	2200      	movs	r2, #0
 8004f0a:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004f0e:	2105      	movs	r1, #5
 8004f10:	481f      	ldr	r0, [pc, #124]	; (8004f90 <scaraInitDuty+0x638>)
 8004f12:	f001 fe41 	bl	8006b98 <scaraInitScurve>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <scaraInitDuty+0x628>)
 8004f1e:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <scaraInitDuty+0x628>)
 8004f24:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	f7fb fe04 	bl	8000b38 <__aeabi_dcmpgt>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02e      	beq.n	8004f94 <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <scaraInitDuty+0x628>)
 8004f38:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004f3c:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <scaraInitDuty+0x628>)
 8004f3e:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004f42:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004f46:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004f4a:	eeb0 2a46 	vmov.f32	s4, s12
 8004f4e:	eef0 2a66 	vmov.f32	s5, s13
 8004f52:	eeb0 1a47 	vmov.f32	s2, s14
 8004f56:	eef0 1a67 	vmov.f32	s3, s15
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004f60:	2105      	movs	r1, #5
 8004f62:	480b      	ldr	r0, [pc, #44]	; (8004f90 <scaraInitDuty+0x638>)
 8004f64:	f001 fe18 	bl	8006b98 <scaraInitScurve>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <scaraInitDuty+0x628>)
 8004f70:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004f74:	4a02      	ldr	r2, [pc, #8]	; (8004f80 <scaraInitDuty+0x628>)
 8004f76:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004f7a:	e9c2 3400 	strd	r3, r4, [r2]
 8004f7e:	e034      	b.n	8004fea <scaraInitDuty+0x692>
 8004f80:	200053d0 	.word	0x200053d0
 8004f84:	200054e8 	.word	0x200054e8
 8004f88:	20005640 	.word	0x20005640
 8004f8c:	20005568 	.word	0x20005568
 8004f90:	200056c0 	.word	0x200056c0
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004f94:	4bb0      	ldr	r3, [pc, #704]	; (8005258 <scaraInitDuty+0x900>)
 8004f96:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004f9a:	4aaf      	ldr	r2, [pc, #700]	; (8005258 <scaraInitDuty+0x900>)
 8004f9c:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004fa0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004fa4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004fa8:	eeb0 2a46 	vmov.f32	s4, s12
 8004fac:	eef0 2a66 	vmov.f32	s5, s13
 8004fb0:	eeb0 1a47 	vmov.f32	s2, s14
 8004fb4:	eef0 1a67 	vmov.f32	s3, s15
 8004fb8:	2201      	movs	r2, #1
 8004fba:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	48a6      	ldr	r0, [pc, #664]	; (800525c <scaraInitDuty+0x904>)
 8004fc2:	f001 fde9 	bl	8006b98 <scaraInitScurve>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8004fcc:	4ba2      	ldr	r3, [pc, #648]	; (8005258 <scaraInitDuty+0x900>)
 8004fce:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004fd2:	4aa1      	ldr	r2, [pc, #644]	; (8005258 <scaraInitDuty+0x900>)
 8004fd4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004fd8:	e9c2 3400 	strd	r3, r4, [r2]
 8004fdc:	e005      	b.n	8004fea <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8004fde:	2308      	movs	r3, #8
 8004fe0:	f000 bf9e 	b.w	8005f20 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004fe4:	2305      	movs	r3, #5
 8004fe6:	f000 bf9b 	b.w	8005f20 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8004fea:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <scaraInitDuty+0x6a2>
			return status1;
 8004ff2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004ff6:	f000 bf93 	b.w	8005f20 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004ffa:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8760 	beq.w	8005ec4 <scaraInitDuty+0x156c>
			return status2;
 8005004:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005008:	f000 bf8a 	b.w	8005f20 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800500c:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005010:	2b01      	cmp	r3, #1
 8005012:	f040 8755 	bne.w	8005ec0 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8005016:	4b90      	ldr	r3, [pc, #576]	; (8005258 <scaraInitDuty+0x900>)
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800501c:	4b90      	ldr	r3, [pc, #576]	; (8005260 <scaraInitDuty+0x908>)
 800501e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005022:	4a8d      	ldr	r2, [pc, #564]	; (8005258 <scaraInitDuty+0x900>)
 8005024:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8005028:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800502c:	4b8c      	ldr	r3, [pc, #560]	; (8005260 <scaraInitDuty+0x908>)
 800502e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005032:	4a89      	ldr	r2, [pc, #548]	; (8005258 <scaraInitDuty+0x900>)
 8005034:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8005038:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800503c:	4b88      	ldr	r3, [pc, #544]	; (8005260 <scaraInitDuty+0x908>)
 800503e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005042:	4a85      	ldr	r2, [pc, #532]	; (8005258 <scaraInitDuty+0x900>)
 8005044:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8005048:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800504c:	4b84      	ldr	r3, [pc, #528]	; (8005260 <scaraInitDuty+0x908>)
 800504e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005052:	4a81      	ldr	r2, [pc, #516]	; (8005258 <scaraInitDuty+0x900>)
 8005054:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8005058:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 800505c:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8005060:	2b00      	cmp	r3, #0
 8005062:	f040 83d6 	bne.w	8005812 <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005066:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800506a:	2b03      	cmp	r3, #3
 800506c:	f200 814e 	bhi.w	800530c <scaraInitDuty+0x9b4>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <scaraInitDuty+0x720>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	0800512f 	.word	0x0800512f
 8005080:	080051d5 	.word	0x080051d5
 8005084:	08005269 	.word	0x08005269
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005088:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800508c:	a370      	add	r3, pc, #448	; (adr r3, 8005250 <scaraInitDuty+0x8f8>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb fac1 	bl	8000618 <__aeabi_dmul>
 8005096:	4603      	mov	r3, r0
 8005098:	460c      	mov	r4, r1
 800509a:	4618      	mov	r0, r3
 800509c:	4621      	mov	r1, r4
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	4b70      	ldr	r3, [pc, #448]	; (8005264 <scaraInitDuty+0x90c>)
 80050a4:	f7fb fbe2 	bl	800086c <__aeabi_ddiv>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80050b0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d113      	bne.n	80050e0 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 80050b8:	4b67      	ldr	r3, [pc, #412]	; (8005258 <scaraInitDuty+0x900>)
 80050ba:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80050be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050c6:	461a      	mov	r2, r3
 80050c8:	4623      	mov	r3, r4
 80050ca:	f7fb f8ef 	bl	80002ac <__adddf3>
 80050ce:	4603      	mov	r3, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80050d6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050da:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80050de:	e01a      	b.n	8005116 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80050e0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d113      	bne.n	8005110 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 80050e8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050ec:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 80050f0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80050f4:	4b58      	ldr	r3, [pc, #352]	; (8005258 <scaraInitDuty+0x900>)
 80050f6:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80050fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050fe:	461a      	mov	r2, r3
 8005100:	4623      	mov	r3, r4
 8005102:	f7fb f8d1 	bl	80002a8 <__aeabi_dsub>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800510e:	e002      	b.n	8005116 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005110:	230c      	movs	r3, #12
 8005112:	f000 bf05 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005116:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 800511a:	2000      	movs	r0, #0
 800511c:	f003 fe48 	bl	8008db0 <scaraCheckWorkSpace1>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80f5 	beq.w	8005312 <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005128:	2307      	movs	r3, #7
 800512a:	f000 bef9 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 800512e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005132:	a347      	add	r3, pc, #284	; (adr r3, 8005250 <scaraInitDuty+0x8f8>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb fa6e 	bl	8000618 <__aeabi_dmul>
 800513c:	4603      	mov	r3, r0
 800513e:	460c      	mov	r4, r1
 8005140:	4618      	mov	r0, r3
 8005142:	4621      	mov	r1, r4
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	4b46      	ldr	r3, [pc, #280]	; (8005264 <scaraInitDuty+0x90c>)
 800514a:	f7fb fb8f 	bl	800086c <__aeabi_ddiv>
 800514e:	4603      	mov	r3, r0
 8005150:	460c      	mov	r4, r1
 8005152:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005156:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800515a:	2b01      	cmp	r3, #1
 800515c:	d113      	bne.n	8005186 <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 800515e:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <scaraInitDuty+0x900>)
 8005160:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005168:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	f7fb f89c 	bl	80002ac <__adddf3>
 8005174:	4603      	mov	r3, r0
 8005176:	460c      	mov	r4, r1
 8005178:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800517c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005180:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005184:	e01a      	b.n	80051bc <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005186:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800518a:	2b00      	cmp	r3, #0
 800518c:	d113      	bne.n	80051b6 <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 800518e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005192:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005196:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <scaraInitDuty+0x900>)
 800519c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80051a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4623      	mov	r3, r4
 80051a8:	f7fb f87e 	bl	80002a8 <__aeabi_dsub>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80051b4:	e002      	b.n	80051bc <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80051b6:	230c      	movs	r3, #12
 80051b8:	f000 beb2 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 80051bc:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80051c0:	2001      	movs	r0, #1
 80051c2:	f003 fdf5 	bl	8008db0 <scaraCheckWorkSpace1>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a4 	beq.w	8005316 <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80051ce:	2307      	movs	r3, #7
 80051d0:	f000 bea6 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80051d4:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d113      	bne.n	8005204 <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <scaraInitDuty+0x900>)
 80051de:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80051e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051e6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80051ea:	461a      	mov	r2, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	f7fb f85d 	bl	80002ac <__adddf3>
 80051f2:	4603      	mov	r3, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80051fa:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80051fe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005202:	e01a      	b.n	800523a <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005204:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005208:	2b00      	cmp	r3, #0
 800520a:	d113      	bne.n	8005234 <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 800520c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005210:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005214:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <scaraInitDuty+0x900>)
 800521a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800521e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005222:	461a      	mov	r2, r3
 8005224:	4623      	mov	r3, r4
 8005226:	f7fb f83f 	bl	80002a8 <__aeabi_dsub>
 800522a:	4603      	mov	r3, r0
 800522c:	460c      	mov	r4, r1
 800522e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005232:	e002      	b.n	800523a <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005234:	230c      	movs	r3, #12
 8005236:	f000 be73 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 800523a:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 800523e:	2002      	movs	r0, #2
 8005240:	f003 fdb6 	bl	8008db0 <scaraCheckWorkSpace1>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d067      	beq.n	800531a <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800524a:	2307      	movs	r3, #7
 800524c:	f000 be68 	b.w	8005f20 <scaraInitDuty+0x15c8>
 8005250:	60000000 	.word	0x60000000
 8005254:	400921fb 	.word	0x400921fb
 8005258:	200053d0 	.word	0x200053d0
 800525c:	20005568 	.word	0x20005568
 8005260:	20005e90 	.word	0x20005e90
 8005264:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005268:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800526c:	a3cf      	add	r3, pc, #828	; (adr r3, 80055ac <scaraInitDuty+0xc54>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f7fb f9d1 	bl	8000618 <__aeabi_dmul>
 8005276:	4603      	mov	r3, r0
 8005278:	460c      	mov	r4, r1
 800527a:	4618      	mov	r0, r3
 800527c:	4621      	mov	r1, r4
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	4bc7      	ldr	r3, [pc, #796]	; (80055a0 <scaraInitDuty+0xc48>)
 8005284:	f7fb faf2 	bl	800086c <__aeabi_ddiv>
 8005288:	4603      	mov	r3, r0
 800528a:	460c      	mov	r4, r1
 800528c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005290:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005294:	2b01      	cmp	r3, #1
 8005296:	d113      	bne.n	80052c0 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005298:	4bc2      	ldr	r3, [pc, #776]	; (80055a4 <scaraInitDuty+0xc4c>)
 800529a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800529e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052a2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052a6:	461a      	mov	r2, r3
 80052a8:	4623      	mov	r3, r4
 80052aa:	f7fa ffff 	bl	80002ac <__adddf3>
 80052ae:	4603      	mov	r3, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80052b6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80052be:	e01a      	b.n	80052f6 <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80052c0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d113      	bne.n	80052f0 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 80052c8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052cc:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 80052d0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80052d4:	4bb3      	ldr	r3, [pc, #716]	; (80055a4 <scaraInitDuty+0xc4c>)
 80052d6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80052da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052de:	461a      	mov	r2, r3
 80052e0:	4623      	mov	r3, r4
 80052e2:	f7fa ffe1 	bl	80002a8 <__aeabi_dsub>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80052ee:	e002      	b.n	80052f6 <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80052f0:	230c      	movs	r3, #12
 80052f2:	f000 be15 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 80052f6:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80052fa:	2003      	movs	r0, #3
 80052fc:	f003 fd58 	bl	8008db0 <scaraCheckWorkSpace1>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005306:	2307      	movs	r3, #7
 8005308:	f000 be0a 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 800530c:	230b      	movs	r3, #11
 800530e:	f000 be07 	b.w	8005f20 <scaraInitDuty+0x15c8>
				break;
 8005312:	bf00      	nop
 8005314:	e004      	b.n	8005320 <scaraInitDuty+0x9c8>
				break;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <scaraInitDuty+0x9c8>
				break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <scaraInitDuty+0x9c8>
				break;
 800531e:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005320:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 8128 	bne.w	800557a <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800532a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800532e:	2b01      	cmp	r3, #1
 8005330:	f040 8097 	bne.w	8005462 <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005334:	2300      	movs	r3, #0
 8005336:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800533a:	e08c      	b.n	8005456 <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 800533c:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005340:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005344:	429a      	cmp	r2, r3
 8005346:	d13d      	bne.n	80053c4 <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005348:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800534c:	4a95      	ldr	r2, [pc, #596]	; (80055a4 <scaraInitDuty+0xc4c>)
 800534e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005360:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005364:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005368:	498e      	ldr	r1, [pc, #568]	; (80055a4 <scaraInitDuty+0xc4c>)
 800536a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800536e:	fb00 f202 	mul.w	r2, r0, r2
 8005372:	440a      	add	r2, r1
 8005374:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005378:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800537c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005380:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800538c:	4a85      	ldr	r2, [pc, #532]	; (80055a4 <scaraInitDuty+0xc4c>)
 800538e:	1898      	adds	r0, r3, r2
 8005390:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005394:	4a84      	ldr	r2, [pc, #528]	; (80055a8 <scaraInitDuty+0xc50>)
 8005396:	5cd3      	ldrb	r3, [r2, r3]
 8005398:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800539c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80053a0:	eeb0 2a46 	vmov.f32	s4, s12
 80053a4:	eef0 2a66 	vmov.f32	s5, s13
 80053a8:	eeb0 1a47 	vmov.f32	s2, s14
 80053ac:	eef0 1a67 	vmov.f32	s3, s15
 80053b0:	2201      	movs	r2, #1
 80053b2:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80053b6:	4619      	mov	r1, r3
 80053b8:	f001 f802 	bl	80063c0 <scaraInitLSPB>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80053c2:	e03c      	b.n	800543e <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80053c4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80053c8:	4a76      	ldr	r2, [pc, #472]	; (80055a4 <scaraInitDuty+0xc4c>)
 80053ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80053dc:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80053e0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80053e4:	496f      	ldr	r1, [pc, #444]	; (80055a4 <scaraInitDuty+0xc4c>)
 80053e6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80053ea:	fb00 f202 	mul.w	r2, r0, r2
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80053f4:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80053f8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80053fc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005408:	4a66      	ldr	r2, [pc, #408]	; (80055a4 <scaraInitDuty+0xc4c>)
 800540a:	1898      	adds	r0, r3, r2
 800540c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005410:	4a65      	ldr	r2, [pc, #404]	; (80055a8 <scaraInitDuty+0xc50>)
 8005412:	5cd3      	ldrb	r3, [r2, r3]
 8005414:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005418:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800541c:	eeb0 2a46 	vmov.f32	s4, s12
 8005420:	eef0 2a66 	vmov.f32	s5, s13
 8005424:	eeb0 1a47 	vmov.f32	s2, s14
 8005428:	eef0 1a67 	vmov.f32	s3, s15
 800542c:	2201      	movs	r2, #1
 800542e:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005598 <scaraInitDuty+0xc40>
 8005432:	4619      	mov	r1, r3
 8005434:	f000 ffc4 	bl	80063c0 <scaraInitLSPB>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 800543e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005442:	4a58      	ldr	r2, [pc, #352]	; (80055a4 <scaraInitDuty+0xc4c>)
 8005444:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005448:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800544c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005450:	3301      	adds	r3, #1
 8005452:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005456:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800545a:	2b03      	cmp	r3, #3
 800545c:	f67f af6e 	bls.w	800533c <scaraInitDuty+0x9e4>
 8005460:	e1c8      	b.n	80057f4 <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005462:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 8084 	bne.w	8005574 <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 800546c:	2300      	movs	r3, #0
 800546e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005472:	e07a      	b.n	800556a <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 8005474:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005478:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800547c:	429a      	cmp	r2, r3
 800547e:	d140      	bne.n	8005502 <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005480:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005484:	4a47      	ldr	r2, [pc, #284]	; (80055a4 <scaraInitDuty+0xc4c>)
 8005486:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	4413      	add	r3, r2
 8005490:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005498:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800549c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80054a8:	4a3e      	ldr	r2, [pc, #248]	; (80055a4 <scaraInitDuty+0xc4c>)
 80054aa:	1898      	adds	r0, r3, r2
 80054ac:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80054b0:	4a3d      	ldr	r2, [pc, #244]	; (80055a8 <scaraInitDuty+0xc50>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80054b8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80054bc:	eeb0 2a46 	vmov.f32	s4, s12
 80054c0:	eef0 2a66 	vmov.f32	s5, s13
 80054c4:	eeb0 1a47 	vmov.f32	s2, s14
 80054c8:	eef0 1a67 	vmov.f32	s3, s15
 80054cc:	2200      	movs	r2, #0
 80054ce:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80054d2:	4619      	mov	r1, r3
 80054d4:	f000 ff74 	bl	80063c0 <scaraInitLSPB>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80054de:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80054e2:	4a30      	ldr	r2, [pc, #192]	; (80055a4 <scaraInitDuty+0xc4c>)
 80054e4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80054f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054f6:	4a2b      	ldr	r2, [pc, #172]	; (80055a4 <scaraInitDuty+0xc4c>)
 80054f8:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80054fc:	e9c2 3400 	strd	r3, r4, [r2]
 8005500:	e02e      	b.n	8005560 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005502:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005506:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <scaraInitDuty+0xc4c>)
 8005508:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800551a:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800551e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800552a:	4a1e      	ldr	r2, [pc, #120]	; (80055a4 <scaraInitDuty+0xc4c>)
 800552c:	1898      	adds	r0, r3, r2
 800552e:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005532:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <scaraInitDuty+0xc50>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800553a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800553e:	eeb0 2a46 	vmov.f32	s4, s12
 8005542:	eef0 2a66 	vmov.f32	s5, s13
 8005546:	eeb0 1a47 	vmov.f32	s2, s14
 800554a:	eef0 1a67 	vmov.f32	s3, s15
 800554e:	2200      	movs	r2, #0
 8005550:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005598 <scaraInitDuty+0xc40>
 8005554:	4619      	mov	r1, r3
 8005556:	f000 ff33 	bl	80063c0 <scaraInitLSPB>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 8005560:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005564:	3301      	adds	r3, #1
 8005566:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800556a:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800556e:	2b03      	cmp	r3, #3
 8005570:	d980      	bls.n	8005474 <scaraInitDuty+0xb1c>
 8005572:	e13f      	b.n	80057f4 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005574:	2308      	movs	r3, #8
 8005576:	f000 bcd3 	b.w	8005f20 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800557a:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 800557e:	2b01      	cmp	r3, #1
 8005580:	f040 8136 	bne.w	80057f0 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005584:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005588:	2b01      	cmp	r3, #1
 800558a:	f040 80a6 	bne.w	80056da <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 800558e:	2300      	movs	r3, #0
 8005590:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005594:	e09b      	b.n	80056ce <scaraInitDuty+0xd76>
 8005596:	bf00      	nop
	...
 80055a0:	40668000 	.word	0x40668000
 80055a4:	200053d0 	.word	0x200053d0
 80055a8:	20000ca8 	.word	0x20000ca8
 80055ac:	60000000 	.word	0x60000000
 80055b0:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 80055b4:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80055b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80055bc:	429a      	cmp	r2, r3
 80055be:	d13d      	bne.n	800563c <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80055c0:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80055c4:	4ac0      	ldr	r2, [pc, #768]	; (80058c8 <scaraInitDuty+0xf70>)
 80055c6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80055d8:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80055dc:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80055e0:	49b9      	ldr	r1, [pc, #740]	; (80058c8 <scaraInitDuty+0xf70>)
 80055e2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80055e6:	fb00 f202 	mul.w	r2, r0, r2
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80055f0:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80055f4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80055f8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005604:	4ab0      	ldr	r2, [pc, #704]	; (80058c8 <scaraInitDuty+0xf70>)
 8005606:	1898      	adds	r0, r3, r2
 8005608:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800560c:	4aaf      	ldr	r2, [pc, #700]	; (80058cc <scaraInitDuty+0xf74>)
 800560e:	5cd3      	ldrb	r3, [r2, r3]
 8005610:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005614:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005618:	eeb0 2a46 	vmov.f32	s4, s12
 800561c:	eef0 2a66 	vmov.f32	s5, s13
 8005620:	eeb0 1a47 	vmov.f32	s2, s14
 8005624:	eef0 1a67 	vmov.f32	s3, s15
 8005628:	2201      	movs	r2, #1
 800562a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800562e:	4619      	mov	r1, r3
 8005630:	f001 fab2 	bl	8006b98 <scaraInitScurve>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800563a:	e03c      	b.n	80056b6 <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800563c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005640:	4aa1      	ldr	r2, [pc, #644]	; (80058c8 <scaraInitDuty+0xf70>)
 8005642:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005654:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005658:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800565c:	499a      	ldr	r1, [pc, #616]	; (80058c8 <scaraInitDuty+0xf70>)
 800565e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005662:	fb00 f202 	mul.w	r2, r0, r2
 8005666:	440a      	add	r2, r1
 8005668:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800566c:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005670:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005674:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005680:	4a91      	ldr	r2, [pc, #580]	; (80058c8 <scaraInitDuty+0xf70>)
 8005682:	1898      	adds	r0, r3, r2
 8005684:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005688:	4a90      	ldr	r2, [pc, #576]	; (80058cc <scaraInitDuty+0xf74>)
 800568a:	5cd3      	ldrb	r3, [r2, r3]
 800568c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005690:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005694:	eeb0 2a46 	vmov.f32	s4, s12
 8005698:	eef0 2a66 	vmov.f32	s5, s13
 800569c:	eeb0 1a47 	vmov.f32	s2, s14
 80056a0:	eef0 1a67 	vmov.f32	s3, s15
 80056a4:	2201      	movs	r2, #1
 80056a6:	ed9f 0b84 	vldr	d0, [pc, #528]	; 80058b8 <scaraInitDuty+0xf60>
 80056aa:	4619      	mov	r1, r3
 80056ac:	f001 fa74 	bl	8006b98 <scaraInitScurve>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 80056b6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80056ba:	4a83      	ldr	r2, [pc, #524]	; (80058c8 <scaraInitDuty+0xf70>)
 80056bc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80056c0:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 80056c4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80056c8:	3301      	adds	r3, #1
 80056ca:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80056ce:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	f67f af6e 	bls.w	80055b4 <scaraInitDuty+0xc5c>
 80056d8:	e08c      	b.n	80057f4 <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80056da:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8084 	bne.w	80057ec <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80056ea:	e07a      	b.n	80057e2 <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 80056ec:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 80056f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d140      	bne.n	800577a <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80056f8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80056fc:	4a72      	ldr	r2, [pc, #456]	; (80058c8 <scaraInitDuty+0xf70>)
 80056fe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005710:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005714:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005718:	fb02 f303 	mul.w	r3, r2, r3
 800571c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005720:	4a69      	ldr	r2, [pc, #420]	; (80058c8 <scaraInitDuty+0xf70>)
 8005722:	1898      	adds	r0, r3, r2
 8005724:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005728:	4a68      	ldr	r2, [pc, #416]	; (80058cc <scaraInitDuty+0xf74>)
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005730:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005734:	eeb0 2a46 	vmov.f32	s4, s12
 8005738:	eef0 2a66 	vmov.f32	s5, s13
 800573c:	eeb0 1a47 	vmov.f32	s2, s14
 8005740:	eef0 1a67 	vmov.f32	s3, s15
 8005744:	2200      	movs	r2, #0
 8005746:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800574a:	4619      	mov	r1, r3
 800574c:	f001 fa24 	bl	8006b98 <scaraInitScurve>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005756:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800575a:	4a5b      	ldr	r2, [pc, #364]	; (80058c8 <scaraInitDuty+0xf70>)
 800575c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800576a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800576e:	4a56      	ldr	r2, [pc, #344]	; (80058c8 <scaraInitDuty+0xf70>)
 8005770:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005774:	e9c2 3400 	strd	r3, r4, [r2]
 8005778:	e02e      	b.n	80057d8 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800577a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800577e:	4a52      	ldr	r2, [pc, #328]	; (80058c8 <scaraInitDuty+0xf70>)
 8005780:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005792:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005796:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80057a2:	4a49      	ldr	r2, [pc, #292]	; (80058c8 <scaraInitDuty+0xf70>)
 80057a4:	1898      	adds	r0, r3, r2
 80057a6:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80057aa:	4a48      	ldr	r2, [pc, #288]	; (80058cc <scaraInitDuty+0xf74>)
 80057ac:	5cd3      	ldrb	r3, [r2, r3]
 80057ae:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80057b2:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80057b6:	eeb0 2a46 	vmov.f32	s4, s12
 80057ba:	eef0 2a66 	vmov.f32	s5, s13
 80057be:	eeb0 1a47 	vmov.f32	s2, s14
 80057c2:	eef0 1a67 	vmov.f32	s3, s15
 80057c6:	2200      	movs	r2, #0
 80057c8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80058b8 <scaraInitDuty+0xf60>
 80057cc:	4619      	mov	r1, r3
 80057ce:	f001 f9e3 	bl	8006b98 <scaraInitScurve>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 80057d8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80057dc:	3301      	adds	r3, #1
 80057de:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80057e2:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d980      	bls.n	80056ec <scaraInitDuty+0xd94>
 80057ea:	e003      	b.n	80057f4 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 80057ec:	2308      	movs	r3, #8
 80057ee:	e397      	b.n	8005f20 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80057f0:	2305      	movs	r3, #5
 80057f2:	e395      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 80057f4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <scaraInitDuty+0xeaa>
				return status1;
 80057fc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005800:	e38e      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 8005802:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 835c 	beq.w	8005ec4 <scaraInitDuty+0x156c>
				return status2;
 800580c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005810:	e386      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8005812:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8005816:	2b01      	cmp	r3, #1
 8005818:	f040 8350 	bne.w	8005ebc <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 800581c:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8005820:	a327      	add	r3, pc, #156	; (adr r3, 80058c0 <scaraInitDuty+0xf68>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa fef7 	bl	8000618 <__aeabi_dmul>
 800582a:	4603      	mov	r3, r0
 800582c:	460c      	mov	r4, r1
 800582e:	4618      	mov	r0, r3
 8005830:	4621      	mov	r1, r4
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <scaraInitDuty+0xf78>)
 8005838:	f7fb f818 	bl	800086c <__aeabi_ddiv>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005844:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005848:	2b01      	cmp	r3, #1
 800584a:	d145      	bne.n	80058d8 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800584c:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <scaraInitDuty+0xf7c>)
 800584e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005852:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005856:	461a      	mov	r2, r3
 8005858:	4623      	mov	r3, r4
 800585a:	f7fa fd27 	bl	80002ac <__adddf3>
 800585e:	4603      	mov	r3, r0
 8005860:	460c      	mov	r4, r1
 8005862:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8005866:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <scaraInitDuty+0xf7c>)
 8005868:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800586c:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005870:	461a      	mov	r2, r3
 8005872:	4623      	mov	r3, r4
 8005874:	f7fa fd1a 	bl	80002ac <__adddf3>
 8005878:	4603      	mov	r3, r0
 800587a:	460c      	mov	r4, r1
 800587c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <scaraInitDuty+0xf7c>)
 8005882:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005886:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	f7fa fd0d 	bl	80002ac <__adddf3>
 8005892:	4603      	mov	r3, r0
 8005894:	460c      	mov	r4, r1
 8005896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800589a:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <scaraInitDuty+0xf7c>)
 800589c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80058a0:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	f7fa fd00 	bl	80002ac <__adddf3>
 80058ac:	4603      	mov	r3, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80058b4:	e027      	b.n	8005906 <scaraInitDuty+0xfae>
 80058b6:	bf00      	nop
	...
 80058c0:	60000000 	.word	0x60000000
 80058c4:	400921fb 	.word	0x400921fb
 80058c8:	200053d0 	.word	0x200053d0
 80058cc:	20000ca8 	.word	0x20000ca8
 80058d0:	40668000 	.word	0x40668000
 80058d4:	20005e90 	.word	0x20005e90
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80058d8:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d110      	bne.n	8005902 <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 80058e0:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80058e4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 80058e8:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80058ec:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 80058f0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80058f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 80058f8:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80058fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005900:	e001      	b.n	8005906 <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005902:	230c      	movs	r3, #12
 8005904:	e30c      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8005906:	4cce      	ldr	r4, [pc, #824]	; (8005c40 <scaraInitDuty+0x12e8>)
 8005908:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800590c:	4668      	mov	r0, sp
 800590e:	f104 0308 	add.w	r3, r4, #8
 8005912:	22b0      	movs	r2, #176	; 0xb0
 8005914:	4619      	mov	r1, r3
 8005916:	f00f ffbb 	bl	8015890 <memcpy>
 800591a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800591e:	4628      	mov	r0, r5
 8005920:	f7fd fe5e 	bl	80035e0 <kinematicInverse>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800592a:	2307      	movs	r3, #7
 800592c:	e2f8      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800592e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005932:	4bc3      	ldr	r3, [pc, #780]	; (8005c40 <scaraInitDuty+0x12e8>)
 8005934:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005938:	461a      	mov	r2, r3
 800593a:	4623      	mov	r3, r4
 800593c:	f7fa fcb4 	bl	80002a8 <__aeabi_dsub>
 8005940:	4603      	mov	r3, r0
 8005942:	460c      	mov	r4, r1
 8005944:	463a      	mov	r2, r7
 8005946:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800594a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800594e:	4bbc      	ldr	r3, [pc, #752]	; (8005c40 <scaraInitDuty+0x12e8>)
 8005950:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005954:	461a      	mov	r2, r3
 8005956:	4623      	mov	r3, r4
 8005958:	f7fa fca6 	bl	80002a8 <__aeabi_dsub>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	463a      	mov	r2, r7
 8005962:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8005966:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800596a:	4bb5      	ldr	r3, [pc, #724]	; (8005c40 <scaraInitDuty+0x12e8>)
 800596c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005970:	461a      	mov	r2, r3
 8005972:	4623      	mov	r3, r4
 8005974:	f7fa fc98 	bl	80002a8 <__aeabi_dsub>
 8005978:	4603      	mov	r3, r0
 800597a:	460c      	mov	r4, r1
 800597c:	463a      	mov	r2, r7
 800597e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8005982:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005986:	4bae      	ldr	r3, [pc, #696]	; (8005c40 <scaraInitDuty+0x12e8>)
 8005988:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800598c:	461a      	mov	r2, r3
 800598e:	4623      	mov	r3, r4
 8005990:	f7fa fc8a 	bl	80002a8 <__aeabi_dsub>
 8005994:	4603      	mov	r3, r0
 8005996:	460c      	mov	r4, r1
 8005998:	463a      	mov	r2, r7
 800599a:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800599e:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 813e 	bne.w	8005c24 <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80059a8:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d159      	bne.n	8005a64 <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 80059b6:	e049      	b.n	8005a4c <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80059b8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80059bc:	4aa1      	ldr	r2, [pc, #644]	; (8005c44 <scaraInitDuty+0x12ec>)
 80059be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80059d0:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 80059d4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80059d8:	499a      	ldr	r1, [pc, #616]	; (8005c44 <scaraInitDuty+0x12ec>)
 80059da:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80059de:	fb00 f202 	mul.w	r2, r0, r2
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80059e8:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80059ec:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80059f0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
 80059f8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80059fc:	4a91      	ldr	r2, [pc, #580]	; (8005c44 <scaraInitDuty+0x12ec>)
 80059fe:	1898      	adds	r0, r3, r2
 8005a00:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005a04:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <scaraInitDuty+0x12f0>)
 8005a06:	5cd1      	ldrb	r1, [r2, r3]
 8005a08:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	ed93 7b00 	vldr	d7, [r3]
 8005a16:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005a1a:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005a1e:	eeb0 2a45 	vmov.f32	s4, s10
 8005a22:	eef0 2a65 	vmov.f32	s5, s11
 8005a26:	eeb0 1a46 	vmov.f32	s2, s12
 8005a2a:	eef0 1a66 	vmov.f32	s3, s13
 8005a2e:	2201      	movs	r2, #1
 8005a30:	eeb0 0a47 	vmov.f32	s0, s14
 8005a34:	eef0 0a67 	vmov.f32	s1, s15
 8005a38:	f000 fcc2 	bl	80063c0 <scaraInitLSPB>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005a42:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005a46:	3301      	adds	r3, #1
 8005a48:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005a4c:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d9b1      	bls.n	80059b8 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005a54:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005a58:	4a7a      	ldr	r2, [pc, #488]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005a5a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005a5e:	e9c2 3400 	strd	r3, r4, [r2]
 8005a62:	e22f      	b.n	8005ec4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005a64:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 80d9 	bne.w	8005c20 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005a74:	e03b      	b.n	8005aee <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005a76:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005a7a:	4a72      	ldr	r2, [pc, #456]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005a7c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005a8e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005a92:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005a9e:	4a69      	ldr	r2, [pc, #420]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005aa0:	1898      	adds	r0, r3, r2
 8005aa2:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005aa6:	4a68      	ldr	r2, [pc, #416]	; (8005c48 <scaraInitDuty+0x12f0>)
 8005aa8:	5cd1      	ldrb	r1, [r2, r3]
 8005aaa:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005aae:	463a      	mov	r2, r7
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	ed93 7b00 	vldr	d7, [r3]
 8005ab8:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005abc:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005ac0:	eeb0 2a45 	vmov.f32	s4, s10
 8005ac4:	eef0 2a65 	vmov.f32	s5, s11
 8005ac8:	eeb0 1a46 	vmov.f32	s2, s12
 8005acc:	eef0 1a66 	vmov.f32	s3, s13
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ad6:	eef0 0a67 	vmov.f32	s1, s15
 8005ada:	f000 fc71 	bl	80063c0 <scaraInitLSPB>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005ae4:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005aee:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d9bf      	bls.n	8005a76 <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005af8:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005b0e:	e02d      	b.n	8005b6c <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8005b10:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005b14:	4a4b      	ldr	r2, [pc, #300]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b16:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b1a:	fb01 f303 	mul.w	r3, r1, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b28:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b2a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b32:	461a      	mov	r2, r3
 8005b34:	4623      	mov	r3, r4
 8005b36:	f7fa ffff 	bl	8000b38 <__aeabi_dcmpgt>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005b40:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005b44:	4a3f      	ldr	r2, [pc, #252]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005b54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b58:	4a3a      	ldr	r2, [pc, #232]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b5a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005b5e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005b62:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005b66:	3301      	adds	r3, #1
 8005b68:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005b6c:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d9cd      	bls.n	8005b10 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005b7a:	e04c      	b.n	8005c16 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005b7c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b82:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005b94:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005b98:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005b9a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ba2:	4928      	ldr	r1, [pc, #160]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005ba4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005ba8:	fb00 f202 	mul.w	r2, r0, r2
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005bb2:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005bb6:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005bba:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <scaraInitDuty+0x12ec>)
 8005bc8:	1898      	adds	r0, r3, r2
 8005bca:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <scaraInitDuty+0x12f0>)
 8005bd0:	5cd1      	ldrb	r1, [r2, r3]
 8005bd2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	ed93 7b00 	vldr	d7, [r3]
 8005be0:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005be4:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005be8:	eeb0 2a45 	vmov.f32	s4, s10
 8005bec:	eef0 2a65 	vmov.f32	s5, s11
 8005bf0:	eeb0 1a46 	vmov.f32	s2, s12
 8005bf4:	eef0 1a66 	vmov.f32	s3, s13
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8005bfe:	eef0 0a67 	vmov.f32	s1, s15
 8005c02:	f000 fbdd 	bl	80063c0 <scaraInitLSPB>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005c0c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005c10:	3301      	adds	r3, #1
 8005c12:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005c16:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d9ae      	bls.n	8005b7c <scaraInitDuty+0x1224>
 8005c1e:	e151      	b.n	8005ec4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005c20:	2308      	movs	r3, #8
 8005c22:	e17d      	b.n	8005f20 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005c24:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 8145 	bne.w	8005eb8 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005c2e:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d160      	bne.n	8005cf8 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005c3c:	e050      	b.n	8005ce0 <scaraInitDuty+0x1388>
 8005c3e:	bf00      	nop
 8005c40:	20005e90 	.word	0x20005e90
 8005c44:	200053d0 	.word	0x200053d0
 8005c48:	20000ca8 	.word	0x20000ca8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005c4c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005c50:	4ab7      	ldr	r2, [pc, #732]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005c52:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005c64:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005c68:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005c6c:	49b0      	ldr	r1, [pc, #704]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005c6e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005c72:	fb00 f202 	mul.w	r2, r0, r2
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005c7c:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005c80:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005c84:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005c90:	4aa7      	ldr	r2, [pc, #668]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005c92:	1898      	adds	r0, r3, r2
 8005c94:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005c98:	4aa6      	ldr	r2, [pc, #664]	; (8005f34 <scaraInitDuty+0x15dc>)
 8005c9a:	5cd1      	ldrb	r1, [r2, r3]
 8005c9c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ca0:	463a      	mov	r2, r7
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	ed93 7b00 	vldr	d7, [r3]
 8005caa:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005cae:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005cb2:	eeb0 2a45 	vmov.f32	s4, s10
 8005cb6:	eef0 2a65 	vmov.f32	s5, s11
 8005cba:	eeb0 1a46 	vmov.f32	s2, s12
 8005cbe:	eef0 1a66 	vmov.f32	s3, s13
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8005cc8:	eef0 0a67 	vmov.f32	s1, s15
 8005ccc:	f000 ff64 	bl	8006b98 <scaraInitScurve>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005cd6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005ce0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d9b1      	bls.n	8005c4c <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005ce8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005cec:	4a90      	ldr	r2, [pc, #576]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005cee:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005cf2:	e9c2 3400 	strd	r3, r4, [r2]
 8005cf6:	e0e5      	b.n	8005ec4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005cf8:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f040 80d9 	bne.w	8005eb4 <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005d08:	e03b      	b.n	8005d82 <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005d0a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d0e:	4a88      	ldr	r2, [pc, #544]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005d10:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005d22:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d26:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005d32:	4a7f      	ldr	r2, [pc, #508]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005d34:	1898      	adds	r0, r3, r2
 8005d36:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d3a:	4a7e      	ldr	r2, [pc, #504]	; (8005f34 <scaraInitDuty+0x15dc>)
 8005d3c:	5cd1      	ldrb	r1, [r2, r3]
 8005d3e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d42:	463a      	mov	r2, r7
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	ed93 7b00 	vldr	d7, [r3]
 8005d4c:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005d50:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005d54:	eeb0 2a45 	vmov.f32	s4, s10
 8005d58:	eef0 2a65 	vmov.f32	s5, s11
 8005d5c:	eeb0 1a46 	vmov.f32	s2, s12
 8005d60:	eef0 1a66 	vmov.f32	s3, s13
 8005d64:	2200      	movs	r2, #0
 8005d66:	eeb0 0a47 	vmov.f32	s0, s14
 8005d6a:	eef0 0a67 	vmov.f32	s1, s15
 8005d6e:	f000 ff13 	bl	8006b98 <scaraInitScurve>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005d78:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005d82:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d9bf      	bls.n	8005d0a <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005d8a:	4b69      	ldr	r3, [pc, #420]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005d8c:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	f04f 0400 	mov.w	r4, #0
 8005d98:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005da2:	e02d      	b.n	8005e00 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005da4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005da8:	4a61      	ldr	r2, [pc, #388]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005daa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dbc:	4b5c      	ldr	r3, [pc, #368]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005dbe:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005dc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4623      	mov	r3, r4
 8005dca:	f7fa feb5 	bl	8000b38 <__aeabi_dcmpgt>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005dd4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005dd8:	4a55      	ldr	r2, [pc, #340]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005dda:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005de8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dec:	4a50      	ldr	r2, [pc, #320]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005dee:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005df2:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005df6:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005e00:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d9cd      	bls.n	8005da4 <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005e0e:	e04c      	b.n	8005eaa <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e10:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005e14:	4a46      	ldr	r2, [pc, #280]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005e16:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8005e28:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8005e2c:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005e2e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e36:	493e      	ldr	r1, [pc, #248]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005e38:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005e3c:	fb00 f202 	mul.w	r2, r0, r2
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005e46:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005e4a:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005e4e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005e5a:	4a35      	ldr	r2, [pc, #212]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005e5c:	1898      	adds	r0, r3, r2
 8005e5e:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005e62:	4a34      	ldr	r2, [pc, #208]	; (8005f34 <scaraInitDuty+0x15dc>)
 8005e64:	5cd1      	ldrb	r1, [r2, r3]
 8005e66:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	ed93 7b00 	vldr	d7, [r3]
 8005e74:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005e78:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005e7c:	eeb0 2a45 	vmov.f32	s4, s10
 8005e80:	eef0 2a65 	vmov.f32	s5, s11
 8005e84:	eeb0 1a46 	vmov.f32	s2, s12
 8005e88:	eef0 1a66 	vmov.f32	s3, s13
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8005e92:	eef0 0a67 	vmov.f32	s1, s15
 8005e96:	f000 fe7f 	bl	8006b98 <scaraInitScurve>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005ea0:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005eaa:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d9ae      	bls.n	8005e10 <scaraInitDuty+0x14b8>
 8005eb2:	e007      	b.n	8005ec4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	e033      	b.n	8005f20 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005eb8:	2305      	movs	r3, #5
 8005eba:	e031      	b.n	8005f20 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	e02f      	b.n	8005f20 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e02d      	b.n	8005f20 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <scaraInitDuty+0x15e0>)
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f04f 0400 	mov.w	r4, #0
 8005ece:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005ed4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005edc:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <scaraInitDuty+0x15e0>)
 8005ede:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <scaraInitDuty+0x15e4>)
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	f04f 0400 	mov.w	r4, #0
 8005eec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005ef2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005efa:	4a10      	ldr	r2, [pc, #64]	; (8005f3c <scaraInitDuty+0x15e4>)
 8005efc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8005f00:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <scaraInitDuty+0x15e8>)
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	f04f 0400 	mov.w	r4, #0
 8005f0a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <scaraInitDuty+0x15d8>)
 8005f10:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005f14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <scaraInitDuty+0x15e8>)
 8005f1a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr
 8005f30:	200053d0 	.word	0x200053d0
 8005f34:	20000ca8 	.word	0x20000ca8
 8005f38:	20005e90 	.word	0x20005e90
 8005f3c:	20006000 	.word	0x20006000
 8005f40:	20005f48 	.word	0x20005f48

08005f44 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8005f44:	b082      	sub	sp, #8
 8005f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f48:	b0af      	sub	sp, #188	; 0xbc
 8005f4a:	af2c      	add	r7, sp, #176	; 0xb0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	f107 0120 	add.w	r1, r7, #32
 8005f52:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8005f56:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8005f5a:	4668      	mov	r0, sp
 8005f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f60:	22b0      	movs	r2, #176	; 0xb0
 8005f62:	4619      	mov	r1, r3
 8005f64:	f00f fc94 	bl	8015890 <memcpy>
 8005f68:	f107 0320 	add.w	r3, r7, #32
 8005f6c:	cb0c      	ldmia	r3, {r2, r3}
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7fd fb36 	bl	80035e0 <kinematicInverse>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f7a:	2307      	movs	r3, #7
 8005f7c:	e09e      	b.n	80060bc <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8005f7e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005f88:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005f92:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8005f9c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005fa6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005fb0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8005fba:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005fbe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	f7fa f96f 	bl	80002a8 <__aeabi_dsub>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005fd4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005fd8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4623      	mov	r3, r4
 8005fe0:	f7fa f962 	bl	80002a8 <__aeabi_dsub>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8005fee:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005ff2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	f7fa f955 	bl	80002a8 <__aeabi_dsub>
 8005ffe:	4603      	mov	r3, r0
 8006000:	460c      	mov	r4, r1
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006014:	461a      	mov	r2, r3
 8006016:	4623      	mov	r3, r4
 8006018:	f7fa fafe 	bl	8000618 <__aeabi_dmul>
 800601c:	4603      	mov	r3, r0
 800601e:	460c      	mov	r4, r1
 8006020:	461d      	mov	r5, r3
 8006022:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	f7fa faf0 	bl	8000618 <__aeabi_dmul>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	461a      	mov	r2, r3
 800603e:	4623      	mov	r3, r4
 8006040:	4628      	mov	r0, r5
 8006042:	4631      	mov	r1, r6
 8006044:	f7fa f932 	bl	80002ac <__adddf3>
 8006048:	4603      	mov	r3, r0
 800604a:	460c      	mov	r4, r1
 800604c:	461d      	mov	r5, r3
 800604e:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800605c:	461a      	mov	r2, r3
 800605e:	4623      	mov	r3, r4
 8006060:	f7fa fada 	bl	8000618 <__aeabi_dmul>
 8006064:	4603      	mov	r3, r0
 8006066:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006068:	461a      	mov	r2, r3
 800606a:	4623      	mov	r3, r4
 800606c:	4628      	mov	r0, r5
 800606e:	4631      	mov	r1, r6
 8006070:	f7fa f91c 	bl	80002ac <__adddf3>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	ec44 3b17 	vmov	d7, r3, r4
 800607c:	eeb0 0a47 	vmov.f32	s0, s14
 8006080:	eef0 0a67 	vmov.f32	s1, s15
 8006084:	f013 ff4e 	bl	8019f24 <sqrt>
 8006088:	eeb0 7a40 	vmov.f32	s14, s0
 800608c:	eef0 7a60 	vmov.f32	s15, s1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	e9d3 3400 	ldrd	r3, r4, [r3]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80060c6:	b002      	add	sp, #8
 80060c8:	4770      	bx	lr
 80060ca:	0000      	movs	r0, r0
 80060cc:	0000      	movs	r0, r0
	...

080060d0 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 80060d0:	b082      	sub	sp, #8
 80060d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060d6:	b0c1      	sub	sp, #260	; 0x104
 80060d8:	af2c      	add	r7, sp, #176	; 0xb0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80060e0:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 80060e4:	f507 7694 	add.w	r6, r7, #296	; 0x128
 80060e8:	4668      	mov	r0, sp
 80060ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060ee:	22b0      	movs	r2, #176	; 0xb0
 80060f0:	4619      	mov	r1, r3
 80060f2:	f00f fbcd 	bl	8015890 <memcpy>
 80060f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060fa:	cb0c      	ldmia	r3, {r2, r3}
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7fd fa6f 	bl	80035e0 <kinematicInverse>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006108:	2307      	movs	r3, #7
 800610a:	e146      	b.n	800639a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 800610c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006110:	2b01      	cmp	r3, #1
 8006112:	d006      	beq.n	8006122 <scaraInitCircle+0x52>
 8006114:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d001      	beq.n	8006122 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 800611e:	2306      	movs	r3, #6
 8006120:	e13b      	b.n	800639a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006122:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006126:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800612a:	f7fa f8bd 	bl	80002a8 <__aeabi_dsub>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006136:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800613a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800613e:	f7fa f8b3 	bl	80002a8 <__aeabi_dsub>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 800614a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800614e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8006152:	f7fa f8a9 	bl	80002a8 <__aeabi_dsub>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 800615e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006162:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8006166:	f7fa f89f 	bl	80002a8 <__aeabi_dsub>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800617a:	f7fa fa4d 	bl	8000618 <__aeabi_dmul>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4690      	mov	r8, r2
 8006184:	4699      	mov	r9, r3
 8006186:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800618a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800618e:	f7fa fa43 	bl	8000618 <__aeabi_dmul>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4640      	mov	r0, r8
 8006198:	4649      	mov	r1, r9
 800619a:	f7fa f887 	bl	80002ac <__adddf3>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	ec43 2b17 	vmov	d7, r2, r3
 80061a6:	eeb0 0a47 	vmov.f32	s0, s14
 80061aa:	eef0 0a67 	vmov.f32	s1, s15
 80061ae:	f013 feb9 	bl	8019f24 <sqrt>
 80061b2:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 80061b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80061be:	f7fa fa2b 	bl	8000618 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4690      	mov	r8, r2
 80061c8:	4699      	mov	r9, r3
 80061ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061d2:	f7fa fa21 	bl	8000618 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4640      	mov	r0, r8
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa f865 	bl	80002ac <__adddf3>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	ec43 2b17 	vmov	d7, r2, r3
 80061ea:	eeb0 0a47 	vmov.f32	s0, s14
 80061ee:	eef0 0a67 	vmov.f32	s1, s15
 80061f2:	f013 fe97 	bl	8019f24 <sqrt>
 80061f6:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 80061fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006202:	f7fa f851 	bl	80002a8 <__aeabi_dsub>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4614      	mov	r4, r2
 800620c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	4b68      	ldr	r3, [pc, #416]	; (80063b8 <scaraInitCircle+0x2e8>)
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa fc8d 	bl	8000b38 <__aeabi_dcmpgt>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006224:	2306      	movs	r3, #6
 8006226:	e0b8      	b.n	800639a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006228:	a35f      	add	r3, pc, #380	; (adr r3, 80063a8 <scaraInitCircle+0x2d8>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006232:	f7fa fc63 	bl	8000afc <__aeabi_dcmplt>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <scaraInitCircle+0x180>
 800623c:	a35a      	add	r3, pc, #360	; (adr r3, 80063a8 <scaraInitCircle+0x2d8>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006246:	f7fa fc59 	bl	8000afc <__aeabi_dcmplt>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006250:	2306      	movs	r3, #6
 8006252:	e0a2      	b.n	800639a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006254:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006258:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800625c:	f013 fe60 	bl	8019f20 <atan2>
 8006260:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006264:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006268:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800626c:	f013 fe58 	bl	8019f20 <atan2>
 8006270:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006278:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800627c:	f7fa f814 	bl	80002a8 <__aeabi_dsub>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006294:	f7fa fc32 	bl	8000afc <__aeabi_dcmplt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 800629e:	a344      	add	r3, pc, #272	; (adr r3, 80063b0 <scaraInitCircle+0x2e0>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80062a8:	f7fa f800 	bl	80002ac <__adddf3>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 80062b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da0a      	bge.n	80062d2 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 80062bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062c0:	a13b      	add	r1, pc, #236	; (adr r1, 80063b0 <scaraInitCircle+0x2e0>)
 80062c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062c6:	f7f9 ffef 	bl	80002a8 <__aeabi_dsub>
 80062ca:	4603      	mov	r3, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 80062d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80062d6:	b25a      	sxtb	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80062e2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80062ec:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80062f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006300:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006304:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006308:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800630c:	f7fa f984 	bl	8000618 <__aeabi_dmul>
 8006310:	4603      	mov	r3, r0
 8006312:	460c      	mov	r4, r1
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 800631a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006324:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 800632e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006338:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006342:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 800634c:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006356:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006360:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 800636a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3754      	adds	r7, #84	; 0x54
 800639e:	46bd      	mov	sp, r7
 80063a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a4:	b002      	add	sp, #8
 80063a6:	4770      	bx	lr
 80063a8:	9999999a 	.word	0x9999999a
 80063ac:	3fb99999 	.word	0x3fb99999
 80063b0:	60000000 	.word	0x60000000
 80063b4:	401921fb 	.word	0x401921fb
 80063b8:	3ff00000 	.word	0x3ff00000
 80063bc:	00000000 	.word	0x00000000

080063c0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	b0ad      	sub	sp, #180	; 0xb4
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063ca:	460b      	mov	r3, r1
 80063cc:	ed87 0b08 	vstr	d0, [r7, #32]
 80063d0:	ed87 1b06 	vstr	d1, [r7, #24]
 80063d4:	ed87 2b04 	vstr	d2, [r7, #16]
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063dc:	4613      	mov	r3, r2
 80063de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80063e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d118      	bne.n	800641c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80063ea:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063f6:	f7fa f90f 	bl	8000618 <__aeabi_dmul>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8006402:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800640e:	f7fa f903 	bl	8000618 <__aeabi_dmul>
 8006412:	4603      	mov	r3, r0
 8006414:	460c      	mov	r4, r1
 8006416:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800641a:	e092      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800641c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006420:	2b05      	cmp	r3, #5
 8006422:	d118      	bne.n	8006456 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006424:	f20f 734c 	addw	r3, pc, #1868	; 0x74c
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006430:	f7fa f8f2 	bl	8000618 <__aeabi_dmul>
 8006434:	4603      	mov	r3, r0
 8006436:	460c      	mov	r4, r1
 8006438:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800643c:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006448:	f7fa f8e6 	bl	8000618 <__aeabi_dmul>
 800644c:	4603      	mov	r3, r0
 800644e:	460c      	mov	r4, r1
 8006450:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006454:	e075      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8006456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800645a:	2b00      	cmp	r3, #0
 800645c:	d118      	bne.n	8006490 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800645e:	f20f 7314 	addw	r3, pc, #1812	; 0x714
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800646a:	f7fa f8d5 	bl	8000618 <__aeabi_dmul>
 800646e:	4603      	mov	r3, r0
 8006470:	460c      	mov	r4, r1
 8006472:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8006476:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006482:	f7fa f8c9 	bl	8000618 <__aeabi_dmul>
 8006486:	4603      	mov	r3, r0
 8006488:	460c      	mov	r4, r1
 800648a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800648e:	e058      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006494:	2b01      	cmp	r3, #1
 8006496:	d118      	bne.n	80064ca <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006498:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064a4:	f7fa f8b8 	bl	8000618 <__aeabi_dmul>
 80064a8:	4603      	mov	r3, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80064b0:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064bc:	f7fa f8ac 	bl	8000618 <__aeabi_dmul>
 80064c0:	4603      	mov	r3, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80064c8:	e03b      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80064ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d118      	bne.n	8006504 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80064d2:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064de:	f7fa f89b 	bl	8000618 <__aeabi_dmul>
 80064e2:	4603      	mov	r3, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80064ea:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064f6:	f7fa f88f 	bl	8000618 <__aeabi_dmul>
 80064fa:	4603      	mov	r3, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006502:	e01e      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8006504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006508:	2b03      	cmp	r3, #3
 800650a:	d118      	bne.n	800653e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800650c:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006518:	f7fa f87e 	bl	8000618 <__aeabi_dmul>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8006524:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006530:	f7fa f872 	bl	8000618 <__aeabi_dmul>
 8006534:	4603      	mov	r3, r0
 8006536:	460c      	mov	r4, r1
 8006538:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800653c:	e001      	b.n	8006542 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800653e:	2306      	movs	r3, #6
 8006540:	e309      	b.n	8006b56 <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	f04f 0400 	mov.w	r4, #0
 800654a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 800654e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006552:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	f04f 0400 	mov.w	r4, #0
 800655e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	f04f 0400 	mov.w	r4, #0
 800656a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800656e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006572:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006576:	f7fa facb 	bl	8000b10 <__aeabi_dcmple>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006586:	e00c      	b.n	80065a2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006588:	23ff      	movs	r3, #255	; 0xff
 800658a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800658e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800659a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800659e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80065a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	f040 80ad 	bne.w	8006706 <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80065b2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80065b6:	f20f 53cc 	addw	r3, pc, #1484	; 0x5cc
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80065c2:	f7fa fab9 	bl	8000b38 <__aeabi_dcmpgt>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8090 	beq.w	80066ee <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 80065ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80065d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80065d6:	f7f9 fe67 	bl	80002a8 <__aeabi_dsub>
 80065da:	4603      	mov	r3, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	4618      	mov	r0, r3
 80065e0:	4621      	mov	r1, r4
 80065e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80065e6:	f7fa f941 	bl	800086c <__aeabi_ddiv>
 80065ea:	4603      	mov	r3, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80065f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80065f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80065fa:	f7f9 fe55 	bl	80002a8 <__aeabi_dsub>
 80065fe:	4603      	mov	r3, r0
 8006600:	460c      	mov	r4, r1
 8006602:	4618      	mov	r0, r3
 8006604:	4621      	mov	r1, r4
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	f7f9 fe4f 	bl	80002ac <__adddf3>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	4618      	mov	r0, r3
 8006614:	4621      	mov	r1, r4
 8006616:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800661a:	f7fa f927 	bl	800086c <__aeabi_ddiv>
 800661e:	4603      	mov	r3, r0
 8006620:	460c      	mov	r4, r1
 8006622:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8006626:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800662a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800662e:	f7fa fa65 	bl	8000afc <__aeabi_dcmplt>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8006638:	2309      	movs	r3, #9
 800663a:	e28c      	b.n	8006b56 <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 800663c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006640:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006644:	f7fa fa64 	bl	8000b10 <__aeabi_dcmple>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 800664e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006652:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8006656:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006662:	f7fa fa69 	bl	8000b38 <__aeabi_dcmpgt>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01a      	beq.n	80066a2 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800666c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006670:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006674:	f7f9 fe18 	bl	80002a8 <__aeabi_dsub>
 8006678:	4603      	mov	r3, r0
 800667a:	460c      	mov	r4, r1
 800667c:	4618      	mov	r0, r3
 800667e:	4621      	mov	r1, r4
 8006680:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006684:	f7fa f8f2 	bl	800086c <__aeabi_ddiv>
 8006688:	4603      	mov	r3, r0
 800668a:	460c      	mov	r4, r1
 800668c:	461a      	mov	r2, r3
 800668e:	4623      	mov	r3, r4
 8006690:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006694:	f7f9 fe08 	bl	80002a8 <__aeabi_dsub>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 80066a0:	e00b      	b.n	80066ba <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066ae:	f7fa f8dd 	bl	800086c <__aeabi_ddiv>
 80066b2:	4603      	mov	r3, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80066ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80066be:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80066c2:	f7fa f8d3 	bl	800086c <__aeabi_ddiv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 80066ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80066d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80066d6:	f7fa fa2f 	bl	8000b38 <__aeabi_dcmpgt>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80066e0:	230a      	movs	r3, #10
 80066e2:	e238      	b.n	8006b56 <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 80066e4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80066e8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80066ec:	e00b      	b.n	8006706 <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	f04f 0400 	mov.w	r4, #0
 80066f6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f04f 0400 	mov.w	r4, #0
 8006702:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006706:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006712:	f7fa fa11 	bl	8000b38 <__aeabi_dcmpgt>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 819c 	beq.w	8006a56 <scaraInitLSPB+0x696>
 800671e:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800672a:	f7fa fa05 	bl	8000b38 <__aeabi_dcmpgt>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8190 	beq.w	8006a56 <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006736:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800673a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800673e:	f7f9 fdb3 	bl	80002a8 <__aeabi_dsub>
 8006742:	4603      	mov	r3, r0
 8006744:	460c      	mov	r4, r1
 8006746:	461d      	mov	r5, r3
 8006748:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800674c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006750:	4628      	mov	r0, r5
 8006752:	4631      	mov	r1, r6
 8006754:	f7f9 ff60 	bl	8000618 <__aeabi_dmul>
 8006758:	4603      	mov	r3, r0
 800675a:	460c      	mov	r4, r1
 800675c:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8006760:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006764:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006768:	f7f9 ff56 	bl	8000618 <__aeabi_dmul>
 800676c:	4603      	mov	r3, r0
 800676e:	460c      	mov	r4, r1
 8006770:	e9c7 3400 	strd	r3, r4, [r7]
 8006774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006778:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800677c:	f7f9 ff4c 	bl	8000618 <__aeabi_dmul>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	461d      	mov	r5, r3
 8006786:	4626      	mov	r6, r4
 8006788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800678c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006790:	f7f9 ff42 	bl	8000618 <__aeabi_dmul>
 8006794:	4603      	mov	r3, r0
 8006796:	460c      	mov	r4, r1
 8006798:	461a      	mov	r2, r3
 800679a:	4623      	mov	r3, r4
 800679c:	4628      	mov	r0, r5
 800679e:	4631      	mov	r1, r6
 80067a0:	f7f9 fd84 	bl	80002ac <__adddf3>
 80067a4:	4603      	mov	r3, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4618      	mov	r0, r3
 80067aa:	4621      	mov	r1, r4
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067b4:	f7fa f85a 	bl	800086c <__aeabi_ddiv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	461a      	mov	r2, r3
 80067be:	4623      	mov	r3, r4
 80067c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067c4:	f7f9 fd70 	bl	80002a8 <__aeabi_dsub>
 80067c8:	4603      	mov	r3, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067d4:	f7fa f99c 	bl	8000b10 <__aeabi_dcmple>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d075      	beq.n	80068ca <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80067de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80067e2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80067e6:	f7f9 fd5f 	bl	80002a8 <__aeabi_dsub>
 80067ea:	4603      	mov	r3, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	469a      	mov	sl, r3
 80067f0:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80067f4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80067f8:	4650      	mov	r0, sl
 80067fa:	4659      	mov	r1, fp
 80067fc:	f7f9 ff0c 	bl	8000618 <__aeabi_dmul>
 8006800:	4603      	mov	r3, r0
 8006802:	460c      	mov	r4, r1
 8006804:	4625      	mov	r5, r4
 8006806:	461c      	mov	r4, r3
 8006808:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800680c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006810:	f7f9 ff02 	bl	8000618 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4690      	mov	r8, r2
 800681a:	4699      	mov	r9, r3
 800681c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006820:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006824:	f7f9 fef8 	bl	8000618 <__aeabi_dmul>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	f7f9 fd3c 	bl	80002ac <__adddf3>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4610      	mov	r0, r2
 800683a:	4619      	mov	r1, r3
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006844:	f7fa f812 	bl	800086c <__aeabi_ddiv>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fd2c 	bl	80002ac <__adddf3>
 8006854:	4603      	mov	r3, r0
 8006856:	460c      	mov	r4, r1
 8006858:	ec44 3b17 	vmov	d7, r3, r4
 800685c:	eeb0 0a47 	vmov.f32	s0, s14
 8006860:	eef0 0a67 	vmov.f32	s1, s15
 8006864:	f013 fb5e 	bl	8019f24 <sqrt>
 8006868:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800686c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006874:	f7f9 fd18 	bl	80002a8 <__aeabi_dsub>
 8006878:	4603      	mov	r3, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4618      	mov	r0, r3
 800687e:	4621      	mov	r1, r4
 8006880:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006884:	f7f9 fff2 	bl	800086c <__aeabi_ddiv>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006898:	f7f9 fd06 	bl	80002a8 <__aeabi_dsub>
 800689c:	4603      	mov	r3, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	4618      	mov	r0, r3
 80068a2:	4621      	mov	r1, r4
 80068a4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80068a8:	f7f9 ffe0 	bl	800086c <__aeabi_ddiv>
 80068ac:	4603      	mov	r3, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 80068b4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80068b8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80068bc:	f7f9 fcf6 	bl	80002ac <__adddf3>
 80068c0:	4603      	mov	r3, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80068c8:	e0e3      	b.n	8006a92 <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 80068ca:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80068ce:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80068d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068d6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068da:	f7f9 fce5 	bl	80002a8 <__aeabi_dsub>
 80068de:	4603      	mov	r3, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	4618      	mov	r0, r3
 80068e4:	4621      	mov	r1, r4
 80068e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80068ea:	f7f9 ffbf 	bl	800086c <__aeabi_ddiv>
 80068ee:	4603      	mov	r3, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80068f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068fe:	f7f9 fcd3 	bl	80002a8 <__aeabi_dsub>
 8006902:	4603      	mov	r3, r0
 8006904:	460c      	mov	r4, r1
 8006906:	4618      	mov	r0, r3
 8006908:	4621      	mov	r1, r4
 800690a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800690e:	f7f9 ffad 	bl	800086c <__aeabi_ddiv>
 8006912:	4603      	mov	r3, r0
 8006914:	460c      	mov	r4, r1
 8006916:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800691a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800691e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006922:	f7f9 fcc1 	bl	80002a8 <__aeabi_dsub>
 8006926:	4603      	mov	r3, r0
 8006928:	460c      	mov	r4, r1
 800692a:	4698      	mov	r8, r3
 800692c:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006930:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006934:	4640      	mov	r0, r8
 8006936:	4649      	mov	r1, r9
 8006938:	f7f9 ff98 	bl	800086c <__aeabi_ddiv>
 800693c:	4603      	mov	r3, r0
 800693e:	460c      	mov	r4, r1
 8006940:	4625      	mov	r5, r4
 8006942:	461c      	mov	r4, r3
 8006944:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	f7f9 fcae 	bl	80002ac <__adddf3>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006958:	f7f9 ff88 	bl	800086c <__aeabi_ddiv>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4690      	mov	r8, r2
 8006962:	4699      	mov	r9, r3
 8006964:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006968:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800696c:	f7f9 ff7e 	bl	800086c <__aeabi_ddiv>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	f04f 0000 	mov.w	r0, #0
 8006978:	497b      	ldr	r1, [pc, #492]	; (8006b68 <scaraInitLSPB+0x7a8>)
 800697a:	f7f9 fc95 	bl	80002a8 <__aeabi_dsub>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fe47 	bl	8000618 <__aeabi_dmul>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006996:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800699a:	f7f9 ff67 	bl	800086c <__aeabi_ddiv>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	4970      	ldr	r1, [pc, #448]	; (8006b68 <scaraInitLSPB+0x7a8>)
 80069a8:	f7f9 fc7e 	bl	80002a8 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7f9 fe30 	bl	8000618 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 fc74 	bl	80002ac <__adddf3>
 80069c4:	4603      	mov	r3, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	4625      	mov	r5, r4
 80069ca:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80069cc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	f7f9 fc6a 	bl	80002ac <__adddf3>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069e0:	f7f9 ff44 	bl	800086c <__aeabi_ddiv>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4690      	mov	r8, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80069f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069f4:	f7f9 ff3a 	bl	800086c <__aeabi_ddiv>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	f04f 0000 	mov.w	r0, #0
 8006a00:	4959      	ldr	r1, [pc, #356]	; (8006b68 <scaraInitLSPB+0x7a8>)
 8006a02:	f7f9 fc51 	bl	80002a8 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7f9 fe03 	bl	8000618 <__aeabi_dmul>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4690      	mov	r8, r2
 8006a18:	4699      	mov	r9, r3
 8006a1a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006a1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a22:	f7f9 ff23 	bl	800086c <__aeabi_ddiv>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	f04f 0000 	mov.w	r0, #0
 8006a2e:	494e      	ldr	r1, [pc, #312]	; (8006b68 <scaraInitLSPB+0x7a8>)
 8006a30:	f7f9 fc3a 	bl	80002a8 <__aeabi_dsub>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4640      	mov	r0, r8
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	f7f9 fdec 	bl	8000618 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7f9 fc30 	bl	80002ac <__adddf3>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006a54:	e01d      	b.n	8006a92 <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	f04f 0400 	mov.w	r4, #0
 8006a5e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006a6e:	f7f9 fefd 	bl	800086c <__aeabi_ddiv>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a82:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006a86:	f7f9 fef1 	bl	800086c <__aeabi_ddiv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8006a92:	a333      	add	r3, pc, #204	; (adr r3, 8006b60 <scaraInitLSPB+0x7a0>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006a9c:	f7f9 fee6 	bl	800086c <__aeabi_ddiv>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	f7fa f8ae 	bl	8000c08 <__aeabi_d2f>
 8006aac:	4603      	mov	r3, r0
 8006aae:	ee00 3a10 	vmov	s0, r3
 8006ab2:	f013 f9f5 	bl	8019ea0 <ceilf>
 8006ab6:	eef0 7a40 	vmov.f32	s15, s0
 8006aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006abe:	ee17 3a90 	vmov	r3, s15
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006aca:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8006acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ace:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006ad2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006adc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006ae6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006af0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8006af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006afa:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8006afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006b04:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006b0e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8006b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b14:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006b18:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8006b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006b22:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006b2c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b34:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006b42:	461a      	mov	r2, r3
 8006b44:	4623      	mov	r3, r4
 8006b46:	f7f9 fbaf 	bl	80002a8 <__aeabi_dsub>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b50:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	37b4      	adds	r7, #180	; 0xb4
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	40000000 	.word	0x40000000
 8006b64:	3f847ae1 	.word	0x3f847ae1
 8006b68:	3ff00000 	.word	0x3ff00000
 8006b6c:	00000000 	.word	0x00000000
 8006b70:	405c2000 	.word	0x405c2000
 8006b74:	14000000 	.word	0x14000000
 8006b78:	4000f6f0 	.word	0x4000f6f0
 8006b7c:	6b259425 	.word	0x6b259425
 8006b80:	40069b91 	.word	0x40069b91
 8006b84:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b88:	3f50624d 	.word	0x3f50624d
 8006b8c:	9abcaf48 	.word	0x9abcaf48
 8006b90:	3e7ad7f2 	.word	0x3e7ad7f2
 8006b94:	00000000 	.word	0x00000000

08006b98 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006b98:	b5b0      	push	{r4, r5, r7, lr}
 8006b9a:	b0ba      	sub	sp, #232	; 0xe8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	61f8      	str	r0, [r7, #28]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	ed87 0b04 	vstr	d0, [r7, #16]
 8006ba6:	ed87 1b02 	vstr	d1, [r7, #8]
 8006baa:	ed87 2b00 	vstr	d2, [r7]
 8006bae:	76fb      	strb	r3, [r7, #27]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8006bb4:	7efb      	ldrb	r3, [r7, #27]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d118      	bne.n	8006bec <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006bba:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bc6:	f7f9 fd27 	bl	8000618 <__aeabi_dmul>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006bd2:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bde:	f7f9 fd1b 	bl	8000618 <__aeabi_dmul>
 8006be2:	4603      	mov	r3, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006bea:	e083      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006bec:	7efb      	ldrb	r3, [r7, #27]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d116      	bne.n	8006c20 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006bf2:	a3fc      	add	r3, pc, #1008	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bfc:	f7f9 fd0c 	bl	8000618 <__aeabi_dmul>
 8006c00:	4603      	mov	r3, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006c08:	a3f6      	add	r3, pc, #984	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c12:	f7f9 fd01 	bl	8000618 <__aeabi_dmul>
 8006c16:	4603      	mov	r3, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006c1e:	e069      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8006c20:	7efb      	ldrb	r3, [r7, #27]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d116      	bne.n	8006c54 <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8006c26:	a3ef      	add	r3, pc, #956	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c30:	f7f9 fcf2 	bl	8000618 <__aeabi_dmul>
 8006c34:	4603      	mov	r3, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006c3c:	a3e9      	add	r3, pc, #932	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c46:	f7f9 fce7 	bl	8000618 <__aeabi_dmul>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006c52:	e04f      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006c54:	7efb      	ldrb	r3, [r7, #27]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d116      	bne.n	8006c88 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006c5a:	a3e2      	add	r3, pc, #904	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c64:	f7f9 fcd8 	bl	8000618 <__aeabi_dmul>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006c70:	a3dc      	add	r3, pc, #880	; (adr r3, 8006fe4 <scaraInitScurve+0x44c>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7a:	f7f9 fccd 	bl	8000618 <__aeabi_dmul>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006c86:	e035      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006c88:	7efb      	ldrb	r3, [r7, #27]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d116      	bne.n	8006cbc <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006c8e:	a3d3      	add	r3, pc, #844	; (adr r3, 8006fdc <scaraInitScurve+0x444>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c98:	f7f9 fcbe 	bl	8000618 <__aeabi_dmul>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006ca4:	a3cd      	add	r3, pc, #820	; (adr r3, 8006fdc <scaraInitScurve+0x444>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cae:	f7f9 fcb3 	bl	8000618 <__aeabi_dmul>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006cba:	e01b      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006cbc:	7efb      	ldrb	r3, [r7, #27]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d116      	bne.n	8006cf0 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006cc2:	a3ca      	add	r3, pc, #808	; (adr r3, 8006fec <scaraInitScurve+0x454>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ccc:	f7f9 fca4 	bl	8000618 <__aeabi_dmul>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006cd8:	a3c4      	add	r3, pc, #784	; (adr r3, 8006fec <scaraInitScurve+0x454>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce2:	f7f9 fc99 	bl	8000618 <__aeabi_dmul>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006cee:	e001      	b.n	8006cf4 <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e2c8      	b.n	8007286 <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	f04f 0400 	mov.w	r4, #0
 8006cfc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	f04f 0400 	mov.w	r4, #0
 8006d08:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	f04f 0400 	mov.w	r4, #0
 8006d14:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006d18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006d1c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d2c:	f7f9 fee6 	bl	8000afc <__aeabi_dcmplt>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d015      	beq.n	8006d62 <scaraInitScurve+0x1ca>
		 dir = -1;
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	4ca5      	ldr	r4, [pc, #660]	; (8006fd0 <scaraInitScurve+0x438>)
 8006d3c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006d40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e004      	b.n	8006d6c <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	4c9b      	ldr	r4, [pc, #620]	; (8006fd4 <scaraInitScurve+0x43c>)
 8006d68:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006d6c:	7ebb      	ldrb	r3, [r7, #26]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f040 8082 	bne.w	8006e78 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006d7a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006d7e:	a390      	add	r3, pc, #576	; (adr r3, 8006fc0 <scaraInitScurve+0x428>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006d88:	f7f9 fed6 	bl	8000b38 <__aeabi_dcmpgt>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d066      	beq.n	8006e60 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <scaraInitScurve+0x440>)
 8006d98:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006d9c:	f7f9 fd66 	bl	800086c <__aeabi_ddiv>
 8006da0:	4603      	mov	r3, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006da8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	f7f9 fa7c 	bl	80002ac <__adddf3>
 8006db4:	4603      	mov	r3, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	461a      	mov	r2, r3
 8006dba:	4623      	mov	r3, r4
 8006dbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006dc0:	f7f9 fd54 	bl	800086c <__aeabi_ddiv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006dcc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006dd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006dd4:	f7f9 feb0 	bl	8000b38 <__aeabi_dcmpgt>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d022      	beq.n	8006e24 <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006de6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006dea:	f7f9 fd3f 	bl	800086c <__aeabi_ddiv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	4625      	mov	r5, r4
 8006df4:	461c      	mov	r4, r3
 8006df6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	f7f9 fa55 	bl	80002ac <__adddf3>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e0a:	f7f9 fd2f 	bl	800086c <__aeabi_ddiv>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fa47 	bl	80002a8 <__aeabi_dsub>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006e22:	e003      	b.n	8006e2c <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8006e24:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006e28:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8006e2c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e34:	f7f9 fd1a 	bl	800086c <__aeabi_ddiv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8006e40:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e48:	f7f9 fe76 	bl	8000b38 <__aeabi_dcmpgt>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006e52:	230a      	movs	r3, #10
 8006e54:	e217      	b.n	8007286 <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8006e56:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006e5a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006e5e:	e00b      	b.n	8006e78 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	f04f 0400 	mov.w	r4, #0
 8006e68:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	f04f 0400 	mov.w	r4, #0
 8006e74:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006e78:	a353      	add	r3, pc, #332	; (adr r3, 8006fc8 <scaraInitScurve+0x430>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e82:	f7f9 fe59 	bl	8000b38 <__aeabi_dcmpgt>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80b3 	beq.w	8006ff4 <scaraInitScurve+0x45c>
 8006e8e:	a34e      	add	r3, pc, #312	; (adr r3, 8006fc8 <scaraInitScurve+0x430>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e98:	f7f9 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80a8 	beq.w	8006ff4 <scaraInitScurve+0x45c>
		 no_phases = 5;
 8006ea4:	2305      	movs	r3, #5
 8006ea6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006eaa:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006eae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006eb2:	f7f9 fcdb 	bl	800086c <__aeabi_ddiv>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006ebe:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ec6:	f7f9 fcd1 	bl	800086c <__aeabi_ddiv>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4625      	mov	r5, r4
 8006ed0:	461c      	mov	r4, r3
 8006ed2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f7f9 f9e7 	bl	80002ac <__adddf3>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 f9df 	bl	80002a8 <__aeabi_dsub>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006efe:	f7f9 fdfd 	bl	8000afc <__aeabi_dcmplt>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d022      	beq.n	8006f4e <scaraInitScurve+0x3b6>
			 tc = 0;
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	f04f 0400 	mov.w	r4, #0
 8006f10:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8006f1a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	f7f9 f9c3 	bl	80002ac <__adddf3>
 8006f26:	4603      	mov	r3, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4623      	mov	r3, r4
 8006f2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f32:	f7f9 fc9b 	bl	800086c <__aeabi_ddiv>
 8006f36:	4603      	mov	r3, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	ec44 3b17 	vmov	d7, r3, r4
 8006f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8006f42:	eef0 0a67 	vmov.f32	s1, s15
 8006f46:	f012 ffed 	bl	8019f24 <sqrt>
 8006f4a:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8006f4e:	a31c      	add	r3, pc, #112	; (adr r3, 8006fc0 <scaraInitScurve+0x428>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f58:	f7f9 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f04f 0400 	mov.w	r4, #0
 8006f6a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006f6e:	e009      	b.n	8006f84 <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8006f70:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f74:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006f78:	f7f9 fc78 	bl	800086c <__aeabi_ddiv>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8006f84:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f88:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006f8c:	f7f9 fb44 	bl	8000618 <__aeabi_dmul>
 8006f90:	4603      	mov	r3, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <scaraInitScurve+0x440>)
 8006f9e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006fa2:	f7f9 fb39 	bl	8000618 <__aeabi_dmul>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	461a      	mov	r2, r3
 8006fac:	4623      	mov	r3, r4
 8006fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fb2:	f7f9 f97b 	bl	80002ac <__adddf3>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006fbe:	e039      	b.n	8007034 <scaraInitScurve+0x49c>
 8006fc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006fc4:	3f50624d 	.word	0x3f50624d
 8006fc8:	9abcaf48 	.word	0x9abcaf48
 8006fcc:	3e7ad7f2 	.word	0x3e7ad7f2
 8006fd0:	bff00000 	.word	0xbff00000
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	40100000 	.word	0x40100000
 8006fdc:	00000000 	.word	0x00000000
 8006fe0:	405c2000 	.word	0x405c2000
 8006fe4:	14000000 	.word	0x14000000
 8006fe8:	4000f6f0 	.word	0x4000f6f0
 8006fec:	6b259425 	.word	0x6b259425
 8006ff0:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	f04f 0400 	mov.w	r4, #0
 8006ffc:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	f04f 0400 	mov.w	r4, #0
 8007008:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 800700c:	2304      	movs	r3, #4
 800700e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	4ba0      	ldr	r3, [pc, #640]	; (8007298 <scaraInitScurve+0x700>)
 8007018:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800701c:	f7f9 fc26 	bl	800086c <__aeabi_ddiv>
 8007020:	4603      	mov	r3, r0
 8007022:	460c      	mov	r4, r1
 8007024:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8007034:	a396      	add	r3, pc, #600	; (adr r3, 8007290 <scaraInitScurve+0x6f8>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800703e:	f7f9 fc15 	bl	800086c <__aeabi_ddiv>
 8007042:	4603      	mov	r3, r0
 8007044:	460c      	mov	r4, r1
 8007046:	ec44 3b17 	vmov	d7, r3, r4
 800704a:	eeb0 0a47 	vmov.f32	s0, s14
 800704e:	eef0 0a67 	vmov.f32	s1, s15
 8007052:	f012 fdcd 	bl	8019bf0 <ceil>
 8007056:	ec54 3b10 	vmov	r3, r4, d0
 800705a:	4618      	mov	r0, r3
 800705c:	4621      	mov	r1, r4
 800705e:	f7f9 fdb3 	bl	8000bc8 <__aeabi_d2uiz>
 8007062:	4603      	mov	r3, r0
 8007064:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	4b8c      	ldr	r3, [pc, #560]	; (800729c <scaraInitScurve+0x704>)
 800706c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007070:	f7f9 fad2 	bl	8000618 <__aeabi_dmul>
 8007074:	4603      	mov	r3, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4618      	mov	r0, r3
 800707a:	4621      	mov	r1, r4
 800707c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007080:	f7f9 faca 	bl	8000618 <__aeabi_dmul>
 8007084:	4603      	mov	r3, r0
 8007086:	460c      	mov	r4, r1
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007090:	f7f9 fac2 	bl	8000618 <__aeabi_dmul>
 8007094:	4603      	mov	r3, r0
 8007096:	460c      	mov	r4, r1
 8007098:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 800709c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80070a0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80070a4:	f7f9 fab8 	bl	8000618 <__aeabi_dmul>
 80070a8:	4603      	mov	r3, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4618      	mov	r0, r3
 80070ae:	4621      	mov	r1, r4
 80070b0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80070b4:	f7f9 fab0 	bl	8000618 <__aeabi_dmul>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4618      	mov	r0, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80070c4:	f7f9 faa8 	bl	8000618 <__aeabi_dmul>
 80070c8:	4603      	mov	r3, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4618      	mov	r0, r3
 80070ce:	4621      	mov	r1, r4
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	4b72      	ldr	r3, [pc, #456]	; (80072a0 <scaraInitScurve+0x708>)
 80070d6:	f7f9 fbc9 	bl	800086c <__aeabi_ddiv>
 80070da:	4603      	mov	r3, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 80070e2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80070e6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80070ea:	f7f9 fa95 	bl	8000618 <__aeabi_dmul>
 80070ee:	4603      	mov	r3, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	461a      	mov	r2, r3
 80070f4:	4623      	mov	r3, r4
 80070f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80070fa:	f7f9 fa8d 	bl	8000618 <__aeabi_dmul>
 80070fe:	4603      	mov	r3, r0
 8007100:	460c      	mov	r4, r1
 8007102:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8007106:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800710a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800710e:	f7f9 fa83 	bl	8000618 <__aeabi_dmul>
 8007112:	4603      	mov	r3, r0
 8007114:	460c      	mov	r4, r1
 8007116:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 800711a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800711e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8007122:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007126:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800712a:	f7f9 fa75 	bl	8000618 <__aeabi_dmul>
 800712e:	4603      	mov	r3, r0
 8007130:	460c      	mov	r4, r1
 8007132:	461a      	mov	r2, r3
 8007134:	4623      	mov	r3, r4
 8007136:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800713a:	f7f9 f8b7 	bl	80002ac <__adddf3>
 800713e:	4603      	mov	r3, r0
 8007140:	460c      	mov	r4, r1
 8007142:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8007146:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800714a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 800714e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007152:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007156:	f7f9 f8a9 	bl	80002ac <__adddf3>
 800715a:	4603      	mov	r3, r0
 800715c:	460c      	mov	r4, r1
 800715e:	4618      	mov	r0, r3
 8007160:	4621      	mov	r1, r4
 8007162:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007166:	f7f9 f89f 	bl	80002a8 <__aeabi_dsub>
 800716a:	4603      	mov	r3, r0
 800716c:	460c      	mov	r4, r1
 800716e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007178:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007182:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800718c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007196:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80071a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80071aa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80071b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80071be:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80071c8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80071d2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80071dc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071ee:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071f6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80071fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80071fe:	f7f9 fcbb 	bl	8000b78 <__aeabi_d2iz>
 8007202:	4603      	mov	r3, r0
 8007204:	b25a      	sxtb	r2, r3
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 0400 	mov.w	r4, #0
 8007214:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	f04f 0400 	mov.w	r4, #0
 8007230:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800723a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007244:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800724e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007258:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007262:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800726c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007276:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007280:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	37e8      	adds	r7, #232	; 0xe8
 800728a:	46bd      	mov	sp, r7
 800728c:	bdb0      	pop	{r4, r5, r7, pc}
 800728e:	bf00      	nop
 8007290:	40000000 	.word	0x40000000
 8007294:	3f847ae1 	.word	0x3f847ae1
 8007298:	40100000 	.word	0x40100000
 800729c:	3fe00000 	.word	0x3fe00000
 80072a0:	40180000 	.word	0x40180000

080072a4 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 80072a4:	b082      	sub	sp, #8
 80072a6:	b5b0      	push	{r4, r5, r7, lr}
 80072a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80072ac:	af2c      	add	r7, sp, #176	; 0xb0
 80072ae:	f107 0108 	add.w	r1, r7, #8
 80072b2:	ed81 0b00 	vstr	d0, [r1]
 80072b6:	1d39      	adds	r1, r7, #4
 80072b8:	6008      	str	r0, [r1, #0]
 80072ba:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80072be:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80072c2:	f107 0210 	add.w	r2, r7, #16
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072ce:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80072d2:	4b92      	ldr	r3, [pc, #584]	; (800751c <scaraFlowDuty+0x278>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 812e 	bne.w	8007538 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80072dc:	4b8f      	ldr	r3, [pc, #572]	; (800751c <scaraFlowDuty+0x278>)
 80072de:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d12d      	bne.n	8007342 <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	ed93 0b00 	vldr	d0, [r3]
 80072ee:	488c      	ldr	r0, [pc, #560]	; (8007520 <scaraFlowDuty+0x27c>)
 80072f0:	f000 fc46 	bl	8007b80 <scaraFlowLSPB>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	ed93 0b00 	vldr	d0, [r3]
 8007302:	4888      	ldr	r0, [pc, #544]	; (8007524 <scaraFlowDuty+0x280>)
 8007304:	f000 fc3c 	bl	8007b80 <scaraFlowLSPB>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800730e:	4b83      	ldr	r3, [pc, #524]	; (800751c <scaraFlowDuty+0x278>)
 8007310:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8007314:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8007318:	4b80      	ldr	r3, [pc, #512]	; (800751c <scaraFlowDuty+0x278>)
 800731a:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800731e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8007322:	4b7e      	ldr	r3, [pc, #504]	; (800751c <scaraFlowDuty+0x278>)
 8007324:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8007328:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800732c:	4b7b      	ldr	r3, [pc, #492]	; (800751c <scaraFlowDuty+0x278>)
 800732e:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 8007332:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8007336:	4b79      	ldr	r3, [pc, #484]	; (800751c <scaraFlowDuty+0x278>)
 8007338:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800733c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007340:	e034      	b.n	80073ac <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8007342:	4b76      	ldr	r3, [pc, #472]	; (800751c <scaraFlowDuty+0x278>)
 8007344:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007348:	2b01      	cmp	r3, #1
 800734a:	d12d      	bne.n	80073a8 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	ed93 0b00 	vldr	d0, [r3]
 8007354:	4874      	ldr	r0, [pc, #464]	; (8007528 <scaraFlowDuty+0x284>)
 8007356:	f000 fdbf 	bl	8007ed8 <scaraFLowScurve>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	ed93 0b00 	vldr	d0, [r3]
 8007368:	4870      	ldr	r0, [pc, #448]	; (800752c <scaraFlowDuty+0x288>)
 800736a:	f000 fdb5 	bl	8007ed8 <scaraFLowScurve>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8007374:	4b69      	ldr	r3, [pc, #420]	; (800751c <scaraFlowDuty+0x278>)
 8007376:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 800737a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800737e:	4b67      	ldr	r3, [pc, #412]	; (800751c <scaraFlowDuty+0x278>)
 8007380:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8007384:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8007388:	4b64      	ldr	r3, [pc, #400]	; (800751c <scaraFlowDuty+0x278>)
 800738a:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 800738e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8007392:	4b62      	ldr	r3, [pc, #392]	; (800751c <scaraFlowDuty+0x278>)
 8007394:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 8007398:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 800739c:	4b5f      	ldr	r3, [pc, #380]	; (800751c <scaraFlowDuty+0x278>)
 800739e:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80073a6:	e001      	b.n	80073ac <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80073a8:	2305      	movs	r3, #5
 80073aa:	e2ce      	b.n	800794a <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 80073ac:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <scaraFlowDuty+0x116>
			return status1;
 80073b4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80073b8:	e2c7      	b.n	800794a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 80073ba:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <scaraFlowDuty+0x124>
			return status2;
 80073c2:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80073c6:	e2c0      	b.n	800794a <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80073c8:	4b54      	ldr	r3, [pc, #336]	; (800751c <scaraFlowDuty+0x278>)
 80073ca:	7a1b      	ldrb	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d117      	bne.n	8007400 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80073d0:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80073d4:	4856      	ldr	r0, [pc, #344]	; (8007530 <scaraFlowDuty+0x28c>)
 80073d6:	f000 fac3 	bl	8007960 <scaraFlowLine>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 80073e0:	4b4e      	ldr	r3, [pc, #312]	; (800751c <scaraFlowDuty+0x278>)
 80073e2:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80073e6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 80073ea:	4b4c      	ldr	r3, [pc, #304]	; (800751c <scaraFlowDuty+0x278>)
 80073ec:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80073f0:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 80073f4:	4b49      	ldr	r3, [pc, #292]	; (800751c <scaraFlowDuty+0x278>)
 80073f6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80073fa:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 80073fe:	e01d      	b.n	800743c <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8007400:	4b46      	ldr	r3, [pc, #280]	; (800751c <scaraFlowDuty+0x278>)
 8007402:	7a1b      	ldrb	r3, [r3, #8]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d117      	bne.n	8007438 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8007408:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 800740c:	4849      	ldr	r0, [pc, #292]	; (8007534 <scaraFlowDuty+0x290>)
 800740e:	f000 fb2f 	bl	8007a70 <scaraFlowCircle>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 8007418:	4b40      	ldr	r3, [pc, #256]	; (800751c <scaraFlowDuty+0x278>)
 800741a:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 800741e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 8007422:	4b3e      	ldr	r3, [pc, #248]	; (800751c <scaraFlowDuty+0x278>)
 8007424:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8007428:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 800742c:	4b3b      	ldr	r3, [pc, #236]	; (800751c <scaraFlowDuty+0x278>)
 800742e:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8007432:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007436:	e001      	b.n	800743c <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8007438:	2303      	movs	r3, #3
 800743a:	e286      	b.n	800794a <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 800743c:	f107 0210 	add.w	r2, r7, #16
 8007440:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8007444:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8007448:	f107 0210 	add.w	r2, r7, #16
 800744c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007450:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8007454:	f107 0210 	add.w	r2, r7, #16
 8007458:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800745c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8007460:	4b2e      	ldr	r3, [pc, #184]	; (800751c <scaraFlowDuty+0x278>)
 8007462:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8007466:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800746a:	4618      	mov	r0, r3
 800746c:	f7f9 f86a 	bl	8000544 <__aeabi_i2d>
 8007470:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8007474:	f7f9 f8d0 	bl	8000618 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f8 ff14 	bl	80002ac <__adddf3>
 8007484:	4603      	mov	r3, r0
 8007486:	460c      	mov	r4, r1
 8007488:	f107 0210 	add.w	r2, r7, #16
 800748c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8007490:	f107 0210 	add.w	r2, r7, #16
 8007494:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007498:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800749c:	f107 0210 	add.w	r2, r7, #16
 80074a0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80074a4:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 80074a8:	f107 0210 	add.w	r2, r7, #16
 80074ac:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80074b0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 80074b4:	f107 0210 	add.w	r2, r7, #16
 80074b8:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80074bc:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <scaraFlowDuty+0x278>)
 80074c2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80074c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ca:	f107 0210 	add.w	r2, r7, #16
 80074ce:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80074d2:	f107 0210 	add.w	r2, r7, #16
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074de:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80074e2:	f107 0410 	add.w	r4, r7, #16
 80074e6:	4668      	mov	r0, sp
 80074e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80074ec:	22b0      	movs	r2, #176	; 0xb0
 80074ee:	4619      	mov	r1, r3
 80074f0:	f00e f9ce 	bl	8015890 <memcpy>
 80074f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80074f8:	cb0c      	ldmia	r3, {r2, r3}
 80074fa:	4620      	mov	r0, r4
 80074fc:	f7fc f870 	bl	80035e0 <kinematicInverse>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007506:	2307      	movs	r3, #7
 8007508:	e21f      	b.n	800794a <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800750a:	f107 0110 	add.w	r1, r7, #16
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	22b8      	movs	r2, #184	; 0xb8
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	f00e f9bc 	bl	8015890 <memcpy>
 8007518:	e216      	b.n	8007948 <scaraFlowDuty+0x6a4>
 800751a:	bf00      	nop
 800751c:	200053d0 	.word	0x200053d0
 8007520:	200054e8 	.word	0x200054e8
 8007524:	20005640 	.word	0x20005640
 8007528:	20005568 	.word	0x20005568
 800752c:	200056c0 	.word	0x200056c0
 8007530:	200053e0 	.word	0x200053e0
 8007534:	20005450 	.word	0x20005450
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8007538:	4b8b      	ldr	r3, [pc, #556]	; (8007768 <scaraFlowDuty+0x4c4>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	f040 8201 	bne.w	8007944 <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8007542:	4b89      	ldr	r3, [pc, #548]	; (8007768 <scaraFlowDuty+0x4c4>)
 8007544:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d174      	bne.n	8007636 <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800754c:	f107 0308 	add.w	r3, r7, #8
 8007550:	ed93 0b00 	vldr	d0, [r3]
 8007554:	4885      	ldr	r0, [pc, #532]	; (800776c <scaraFlowDuty+0x4c8>)
 8007556:	f000 fb13 	bl	8007b80 <scaraFlowLSPB>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8007560:	f107 0308 	add.w	r3, r7, #8
 8007564:	ed93 0b00 	vldr	d0, [r3]
 8007568:	4881      	ldr	r0, [pc, #516]	; (8007770 <scaraFlowDuty+0x4cc>)
 800756a:	f000 fb09 	bl	8007b80 <scaraFlowLSPB>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	ed93 0b00 	vldr	d0, [r3]
 800757c:	487d      	ldr	r0, [pc, #500]	; (8007774 <scaraFlowDuty+0x4d0>)
 800757e:	f000 faff 	bl	8007b80 <scaraFlowLSPB>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	ed93 0b00 	vldr	d0, [r3]
 8007590:	4879      	ldr	r0, [pc, #484]	; (8007778 <scaraFlowDuty+0x4d4>)
 8007592:	f000 faf5 	bl	8007b80 <scaraFlowLSPB>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800759c:	4b72      	ldr	r3, [pc, #456]	; (8007768 <scaraFlowDuty+0x4c4>)
 800759e:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 80075a2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80075a6:	4b70      	ldr	r3, [pc, #448]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075a8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 80075ac:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80075b0:	4b6d      	ldr	r3, [pc, #436]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075b2:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 80075b6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80075ba:	4b6b      	ldr	r3, [pc, #428]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075bc:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 80075c0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80075c4:	4b68      	ldr	r3, [pc, #416]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075c6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80075ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ce:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80075d2:	4b65      	ldr	r3, [pc, #404]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075d4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80075d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075dc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075e2:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80075e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ea:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80075ee:	4b5e      	ldr	r3, [pc, #376]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075f0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80075f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075f8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80075fc:	4b5a      	ldr	r3, [pc, #360]	; (8007768 <scaraFlowDuty+0x4c4>)
 80075fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007602:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007606:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800760a:	4b57      	ldr	r3, [pc, #348]	; (8007768 <scaraFlowDuty+0x4c4>)
 800760c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8007610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007614:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8007618:	4b53      	ldr	r3, [pc, #332]	; (8007768 <scaraFlowDuty+0x4c4>)
 800761a:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800761e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007622:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8007626:	4b50      	ldr	r3, [pc, #320]	; (8007768 <scaraFlowDuty+0x4c4>)
 8007628:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800762c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007630:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007634:	e07b      	b.n	800772e <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8007636:	4b4c      	ldr	r3, [pc, #304]	; (8007768 <scaraFlowDuty+0x4c4>)
 8007638:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800763c:	2b01      	cmp	r3, #1
 800763e:	d174      	bne.n	800772a <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	ed93 0b00 	vldr	d0, [r3]
 8007648:	484c      	ldr	r0, [pc, #304]	; (800777c <scaraFlowDuty+0x4d8>)
 800764a:	f000 fc45 	bl	8007ed8 <scaraFLowScurve>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	ed93 0b00 	vldr	d0, [r3]
 800765c:	4848      	ldr	r0, [pc, #288]	; (8007780 <scaraFlowDuty+0x4dc>)
 800765e:	f000 fc3b 	bl	8007ed8 <scaraFLowScurve>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	ed93 0b00 	vldr	d0, [r3]
 8007670:	4844      	ldr	r0, [pc, #272]	; (8007784 <scaraFlowDuty+0x4e0>)
 8007672:	f000 fc31 	bl	8007ed8 <scaraFLowScurve>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 800767c:	f107 0308 	add.w	r3, r7, #8
 8007680:	ed93 0b00 	vldr	d0, [r3]
 8007684:	4840      	ldr	r0, [pc, #256]	; (8007788 <scaraFlowDuty+0x4e4>)
 8007686:	f000 fc27 	bl	8007ed8 <scaraFLowScurve>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8007690:	4b35      	ldr	r3, [pc, #212]	; (8007768 <scaraFlowDuty+0x4c4>)
 8007692:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8007696:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800769a:	4b33      	ldr	r3, [pc, #204]	; (8007768 <scaraFlowDuty+0x4c4>)
 800769c:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 80076a0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 80076a4:	4b30      	ldr	r3, [pc, #192]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076a6:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 80076aa:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80076ae:	4b2e      	ldr	r3, [pc, #184]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076b0:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 80076b4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80076b8:	4b2b      	ldr	r3, [pc, #172]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076ba:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80076be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076c2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80076c6:	4b28      	ldr	r3, [pc, #160]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076c8:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80076cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076d0:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80076d4:	4b24      	ldr	r3, [pc, #144]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076d6:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 80076da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076de:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80076e2:	4b21      	ldr	r3, [pc, #132]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076e4:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80076e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076ec:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <scaraFlowDuty+0x4c4>)
 80076f2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80076f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076fa:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 80076fe:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <scaraFlowDuty+0x4c4>)
 8007700:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8007704:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007708:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 800770c:	4b16      	ldr	r3, [pc, #88]	; (8007768 <scaraFlowDuty+0x4c4>)
 800770e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8007712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007716:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 800771a:	4b13      	ldr	r3, [pc, #76]	; (8007768 <scaraFlowDuty+0x4c4>)
 800771c:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8007720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007724:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007728:	e001      	b.n	800772e <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800772a:	2305      	movs	r3, #5
 800772c:	e10d      	b.n	800794a <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800772e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <scaraFlowDuty+0x498>
			return status1;
 8007736:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800773a:	e106      	b.n	800794a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 800773c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <scaraFlowDuty+0x4a6>
			return status2;
 8007744:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007748:	e0ff      	b.n	800794a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 800774a:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <scaraFlowDuty+0x4b4>
			return status3;
 8007752:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8007756:	e0f8      	b.n	800794a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8007758:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800775c:	2b00      	cmp	r3, #0
 800775e:	d015      	beq.n	800778c <scaraFlowDuty+0x4e8>
			return status4;
 8007760:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007764:	e0f1      	b.n	800794a <scaraFlowDuty+0x6a6>
 8007766:	bf00      	nop
 8007768:	200053d0 	.word	0x200053d0
 800776c:	200057a0 	.word	0x200057a0
 8007770:	200058f8 	.word	0x200058f8
 8007774:	20005a50 	.word	0x20005a50
 8007778:	20005ba8 	.word	0x20005ba8
 800777c:	20005820 	.word	0x20005820
 8007780:	20005978 	.word	0x20005978
 8007784:	20005ad0 	.word	0x20005ad0
 8007788:	20005c28 	.word	0x20005c28
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800778c:	4b73      	ldr	r3, [pc, #460]	; (800795c <scaraFlowDuty+0x6b8>)
 800778e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8007792:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007796:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800779a:	4618      	mov	r0, r3
 800779c:	f7f8 fed2 	bl	8000544 <__aeabi_i2d>
 80077a0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80077a4:	f7f8 ff38 	bl	8000618 <__aeabi_dmul>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4620      	mov	r0, r4
 80077ae:	4629      	mov	r1, r5
 80077b0:	f7f8 fd7c 	bl	80002ac <__adddf3>
 80077b4:	4603      	mov	r3, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	f107 0210 	add.w	r2, r7, #16
 80077bc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80077c0:	4b66      	ldr	r3, [pc, #408]	; (800795c <scaraFlowDuty+0x6b8>)
 80077c2:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80077c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80077ca:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7f8 feb8 	bl	8000544 <__aeabi_i2d>
 80077d4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80077d8:	f7f8 ff1e 	bl	8000618 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd62 	bl	80002ac <__adddf3>
 80077e8:	4603      	mov	r3, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	f107 0210 	add.w	r2, r7, #16
 80077f0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80077f4:	4b59      	ldr	r3, [pc, #356]	; (800795c <scaraFlowDuty+0x6b8>)
 80077f6:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80077fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80077fe:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 8007802:	4618      	mov	r0, r3
 8007804:	f7f8 fe9e 	bl	8000544 <__aeabi_i2d>
 8007808:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800780c:	f7f8 ff04 	bl	8000618 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4620      	mov	r0, r4
 8007816:	4629      	mov	r1, r5
 8007818:	f7f8 fd48 	bl	80002ac <__adddf3>
 800781c:	4603      	mov	r3, r0
 800781e:	460c      	mov	r4, r1
 8007820:	f107 0210 	add.w	r2, r7, #16
 8007824:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007828:	4b4c      	ldr	r3, [pc, #304]	; (800795c <scaraFlowDuty+0x6b8>)
 800782a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800782e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007832:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 8007836:	4618      	mov	r0, r3
 8007838:	f7f8 fe84 	bl	8000544 <__aeabi_i2d>
 800783c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8007840:	f7f8 feea 	bl	8000618 <__aeabi_dmul>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	f7f8 fd2e 	bl	80002ac <__adddf3>
 8007850:	4603      	mov	r3, r0
 8007852:	460c      	mov	r4, r1
 8007854:	f107 0210 	add.w	r2, r7, #16
 8007858:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800785c:	f107 0210 	add.w	r2, r7, #16
 8007860:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8007864:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8007868:	f107 0210 	add.w	r2, r7, #16
 800786c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007870:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8007874:	f107 0210 	add.w	r2, r7, #16
 8007878:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800787c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007880:	f107 0210 	add.w	r2, r7, #16
 8007884:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007888:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800788c:	f107 0210 	add.w	r2, r7, #16
 8007890:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007894:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007898:	f107 0210 	add.w	r2, r7, #16
 800789c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80078a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 80078a4:	f107 0210 	add.w	r2, r7, #16
 80078a8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80078ac:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 80078b0:	f107 0210 	add.w	r2, r7, #16
 80078b4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80078b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <scaraFlowDuty+0x6b8>)
 80078be:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80078c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078c6:	f107 0210 	add.w	r2, r7, #16
 80078ca:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80078ce:	f107 0210 	add.w	r2, r7, #16
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078da:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80078de:	f107 0310 	add.w	r3, r7, #16
 80078e2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80078e6:	f107 0310 	add.w	r3, r7, #16
 80078ea:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80078ee:	f107 0310 	add.w	r3, r7, #16
 80078f2:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80078fe:	eeb0 3a44 	vmov.f32	s6, s8
 8007902:	eef0 3a64 	vmov.f32	s7, s9
 8007906:	eeb0 2a45 	vmov.f32	s4, s10
 800790a:	eef0 2a65 	vmov.f32	s5, s11
 800790e:	eeb0 1a46 	vmov.f32	s2, s12
 8007912:	eef0 1a66 	vmov.f32	s3, s13
 8007916:	eeb0 0a47 	vmov.f32	s0, s14
 800791a:	eef0 0a67 	vmov.f32	s1, s15
 800791e:	f001 f9bf 	bl	8008ca0 <scaraCheckWorkSpace4>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007928:	2307      	movs	r3, #7
 800792a:	e00e      	b.n	800794a <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800792c:	f107 0110 	add.w	r1, r7, #16
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	22b8      	movs	r2, #184	; 0xb8
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	f00d ffab 	bl	8015890 <memcpy>
		}
		kinematicForward(pos_Next);
 800793a:	1d3b      	adds	r3, r7, #4
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f7fb fd13 	bl	8003368 <kinematicForward>
 8007942:	e001      	b.n	8007948 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007944:	2302      	movs	r3, #2
 8007946:	e000      	b.n	800794a <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007950:	46bd      	mov	sp, r7
 8007952:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007956:	b002      	add	sp, #8
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	200053d0 	.word	0x200053d0

08007960 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007972:	a33d      	add	r3, pc, #244	; (adr r3, 8007a68 <scaraFlowLine+0x108>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f7f9 f8de 	bl	8000b38 <__aeabi_dcmpgt>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d05a      	beq.n	8007a38 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800798e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007992:	f7f8 fe41 	bl	8000618 <__aeabi_dmul>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80079a4:	f7f8 ff62 	bl	800086c <__aeabi_ddiv>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fc7c 	bl	80002ac <__adddf3>
 80079b4:	4603      	mov	r3, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80079ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ce:	f7f8 fe23 	bl	8000618 <__aeabi_dmul>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4610      	mov	r0, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80079e0:	f7f8 ff44 	bl	800086c <__aeabi_ddiv>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc5e 	bl	80002ac <__adddf3>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0a:	f7f8 fe05 	bl	8000618 <__aeabi_dmul>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4610      	mov	r0, r2
 8007a14:	4619      	mov	r1, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007a1c:	f7f8 ff26 	bl	800086c <__aeabi_ddiv>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fc40 	bl	80002ac <__adddf3>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8007a36:	e011      	b.n	8007a5c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	47ae147b 	.word	0x47ae147b
 8007a6c:	3f847ae1 	.word	0x3f847ae1

08007a70 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007a84:	461a      	mov	r2, r3
 8007a86:	4623      	mov	r3, r4
 8007a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a8c:	f7f8 feee 	bl	800086c <__aeabi_ddiv>
 8007a90:	4603      	mov	r3, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f993 3000 	ldrsb.w	r3, [r3]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7f8 fd47 	bl	8000544 <__aeabi_i2d>
 8007ab6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007aba:	f7f8 fdad 	bl	8000618 <__aeabi_dmul>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	4659      	mov	r1, fp
 8007ac6:	f7f8 fbf1 	bl	80002ac <__adddf3>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	ec43 2b17 	vmov	d7, r2, r3
 8007ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8007ad6:	eef0 0a67 	vmov.f32	s1, s15
 8007ada:	f012 f909 	bl	8019cf0 <cos>
 8007ade:	ec53 2b10 	vmov	r2, r3, d0
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	f7f8 fd97 	bl	8000618 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fbdb 	bl	80002ac <__adddf3>
 8007af6:	4603      	mov	r3, r0
 8007af8:	460c      	mov	r4, r1
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f993 3000 	ldrsb.w	r3, [r3]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7f8 fd13 	bl	8000544 <__aeabi_i2d>
 8007b1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b22:	f7f8 fd79 	bl	8000618 <__aeabi_dmul>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	f7f8 fbbd 	bl	80002ac <__adddf3>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	ec43 2b17 	vmov	d7, r2, r3
 8007b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3e:	eef0 0a67 	vmov.f32	s1, s15
 8007b42:	f012 f965 	bl	8019e10 <sin>
 8007b46:	ec53 2b10 	vmov	r2, r3, d0
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	f7f8 fd63 	bl	8000618 <__aeabi_dmul>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fba7 	bl	80002ac <__adddf3>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b80 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b84:	b08b      	sub	sp, #44	; 0x2c
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007b94:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007b9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb8:	f7f8 ffb4 	bl	8000b24 <__aeabi_dcmpge>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d05b      	beq.n	8007c7a <scaraFlowLSPB+0xfa>
 8007bc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bca:	f7f8 ffa1 	bl	8000b10 <__aeabi_dcmple>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d052      	beq.n	8007c7a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf0:	f7f8 fd12 	bl	8000618 <__aeabi_dmul>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f7f8 fb56 	bl	80002ac <__adddf3>
 8007c00:	4603      	mov	r3, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	f7f8 fcfd 	bl	8000618 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7f8 fb41 	bl	80002ac <__adddf3>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	4625      	mov	r5, r4
 8007c30:	461c      	mov	r4, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	4ba5      	ldr	r3, [pc, #660]	; (8007ed4 <scaraFlowLSPB+0x354>)
 8007c3e:	f7f8 fceb 	bl	8000618 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c4e:	f7f8 fce3 	bl	8000618 <__aeabi_dmul>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4610      	mov	r0, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c5e:	f7f8 fcdb 	bl	8000618 <__aeabi_dmul>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 fb1f 	bl	80002ac <__adddf3>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	460c      	mov	r4, r1
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007c78:	e125      	b.n	8007ec6 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c82:	f7f8 ff45 	bl	8000b10 <__aeabi_dcmple>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d05e      	beq.n	8007d4a <scaraFlowLSPB+0x1ca>
 8007c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c94:	f7f8 fb08 	bl	80002a8 <__aeabi_dsub>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ca0:	f7f8 ff36 	bl	8000b10 <__aeabi_dcmple>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d04f      	beq.n	8007d4a <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	f04f 0400 	mov.w	r4, #0
 8007cb4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cd4:	f7f8 fca0 	bl	8000618 <__aeabi_dmul>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4619      	mov	r1, r3
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ce8:	f7f8 fdc0 	bl	800086c <__aeabi_ddiv>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fada 	bl	80002ac <__adddf3>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	4698      	mov	r8, r3
 8007cfe:	46a1      	mov	r9, r4
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d12:	f7f8 fdab 	bl	800086c <__aeabi_ddiv>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1e:	f7f8 fac3 	bl	80002a8 <__aeabi_dsub>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fc75 	bl	8000618 <__aeabi_dmul>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4623      	mov	r3, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fab7 	bl	80002ac <__adddf3>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007d48:	e0bd      	b.n	8007ec6 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d52:	f7f8 faa9 	bl	80002a8 <__aeabi_dsub>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5e:	f7f8 fee1 	bl	8000b24 <__aeabi_dcmpge>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 809a 	beq.w	8007e9e <scaraFlowLSPB+0x31e>
 8007d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d72:	f7f8 fecd 	bl	8000b10 <__aeabi_dcmple>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8090 	beq.w	8007e9e <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007d84:	4614      	mov	r4, r2
 8007d86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007da4:	f7f8 fa80 	bl	80002a8 <__aeabi_dsub>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 fc32 	bl	8000618 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4620      	mov	r0, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7f8 fa76 	bl	80002ac <__adddf3>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007dde:	f7f8 fa63 	bl	80002a8 <__aeabi_dsub>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fc15 	bl	8000618 <__aeabi_dmul>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fa57 	bl	80002a8 <__aeabi_dsub>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	461d      	mov	r5, r3
 8007e00:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4623      	mov	r3, r4
 8007e12:	f7f8 fa49 	bl	80002a8 <__aeabi_dsub>
 8007e16:	4603      	mov	r3, r0
 8007e18:	460c      	mov	r4, r1
 8007e1a:	4698      	mov	r8, r3
 8007e1c:	46a1      	mov	r9, r4
 8007e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e26:	f7f8 fa3f 	bl	80002a8 <__aeabi_dsub>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4623      	mov	r3, r4
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 fbef 	bl	8000618 <__aeabi_dmul>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	4698      	mov	r8, r3
 8007e40:	46a1      	mov	r9, r4
 8007e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e4a:	f7f8 fa2d 	bl	80002a8 <__aeabi_dsub>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461a      	mov	r2, r3
 8007e54:	4623      	mov	r3, r4
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 fbdd 	bl	8000618 <__aeabi_dmul>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	4698      	mov	r8, r3
 8007e64:	46a1      	mov	r9, r4
 8007e66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	f7f8 fa1d 	bl	80002ac <__adddf3>
 8007e72:	4603      	mov	r3, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	461a      	mov	r2, r3
 8007e78:	4623      	mov	r3, r4
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	f7f8 fcf5 	bl	800086c <__aeabi_ddiv>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	461a      	mov	r2, r3
 8007e88:	4623      	mov	r3, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	f7f8 fa0b 	bl	80002a8 <__aeabi_dsub>
 8007e92:	4603      	mov	r3, r0
 8007e94:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007e9c:	e013      	b.n	8007ec6 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	f04f 0400 	mov.w	r4, #0
 8007ea8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	f04f 0400 	mov.w	r4, #0
 8007eb6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	372c      	adds	r7, #44	; 0x2c
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ed2:	bf00      	nop
 8007ed4:	3fe00000 	.word	0x3fe00000

08007ed8 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8007ed8:	b5b0      	push	{r4, r5, r7, lr}
 8007eda:	b092      	sub	sp, #72	; 0x48
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6278      	str	r0, [r7, #36]	; 0x24
 8007ee0:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007eea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007ef4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007efe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	f040 8321 	bne.w	8008550 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f1a:	f7f8 fe03 	bl	8000b24 <__aeabi_dcmpge>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d059      	beq.n	8007fd8 <scaraFLowScurve+0x100>
 8007f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f2c:	f7f8 fde6 	bl	8000afc <__aeabi_dcmplt>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d050      	beq.n	8007fd8 <scaraFLowScurve+0x100>
			 t = time;
 8007f36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007f3a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8007f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f46:	f7f8 fb67 	bl	8000618 <__aeabi_dmul>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f50:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	4b93      	ldr	r3, [pc, #588]	; (80081a8 <scaraFLowScurve+0x2d0>)
 8007f5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f5e:	f7f8 fb5b 	bl	8000618 <__aeabi_dmul>
 8007f62:	4603      	mov	r3, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	4618      	mov	r0, r3
 8007f68:	4621      	mov	r1, r4
 8007f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f6e:	f7f8 fb53 	bl	8000618 <__aeabi_dmul>
 8007f72:	4603      	mov	r3, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	4618      	mov	r0, r3
 8007f78:	4621      	mov	r1, r4
 8007f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f7e:	f7f8 fb4b 	bl	8000618 <__aeabi_dmul>
 8007f82:	4603      	mov	r3, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f88:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8007f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f94:	f7f8 fb40 	bl	8000618 <__aeabi_dmul>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fa4:	f7f8 fb38 	bl	8000618 <__aeabi_dmul>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4618      	mov	r0, r3
 8007fae:	4621      	mov	r1, r4
 8007fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fb4:	f7f8 fb30 	bl	8000618 <__aeabi_dmul>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	4b79      	ldr	r3, [pc, #484]	; (80081ac <scaraFLowScurve+0x2d4>)
 8007fc6:	f7f8 fc51 	bl	800086c <__aeabi_ddiv>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007fd4:	f000 be56 	b.w	8008c84 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007fe0:	f7f8 fd96 	bl	8000b10 <__aeabi_dcmple>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80e2 	beq.w	80081b0 <scaraFLowScurve+0x2d8>
 8007fec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	f7f8 f95a 	bl	80002ac <__adddf3>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4623      	mov	r3, r4
 8008000:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008004:	f7f8 fd7a 	bl	8000afc <__aeabi_dcmplt>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80d0 	beq.w	80081b0 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8008010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008014:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008018:	f7f8 f946 	bl	80002a8 <__aeabi_dsub>
 800801c:	4603      	mov	r3, r0
 800801e:	460c      	mov	r4, r1
 8008020:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8008024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008028:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800802c:	f7f8 faf4 	bl	8000618 <__aeabi_dmul>
 8008030:	4603      	mov	r3, r0
 8008032:	460c      	mov	r4, r1
 8008034:	4625      	mov	r5, r4
 8008036:	461c      	mov	r4, r3
 8008038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800803c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008040:	f7f8 faea 	bl	8000618 <__aeabi_dmul>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4620      	mov	r0, r4
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f92c 	bl	80002a8 <__aeabi_dsub>
 8008050:	4603      	mov	r3, r0
 8008052:	460c      	mov	r4, r1
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008064:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008068:	f7f8 fad6 	bl	8000618 <__aeabi_dmul>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4610      	mov	r0, r2
 8008072:	4619      	mov	r1, r3
 8008074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008078:	f7f8 face 	bl	8000618 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4620      	mov	r0, r4
 8008082:	4629      	mov	r1, r5
 8008084:	f7f8 f912 	bl	80002ac <__adddf3>
 8008088:	4603      	mov	r3, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4625      	mov	r5, r4
 800808e:	461c      	mov	r4, r3
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	4b44      	ldr	r3, [pc, #272]	; (80081a8 <scaraFLowScurve+0x2d0>)
 8008096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800809a:	f7f8 fabd 	bl	8000618 <__aeabi_dmul>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080aa:	f7f8 fab5 	bl	8000618 <__aeabi_dmul>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4610      	mov	r0, r2
 80080b4:	4619      	mov	r1, r3
 80080b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ba:	f7f8 faad 	bl	8000618 <__aeabi_dmul>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 f8ef 	bl	80002a8 <__aeabi_dsub>
 80080ca:	4603      	mov	r3, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80080e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080e4:	f7f8 fa98 	bl	8000618 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 f8dc 	bl	80002ac <__adddf3>
 80080f4:	4603      	mov	r3, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	4625      	mov	r5, r4
 80080fa:	461c      	mov	r4, r3
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <scaraFLowScurve+0x2d0>)
 8008102:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008106:	f7f8 fa87 	bl	8000618 <__aeabi_dmul>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4610      	mov	r0, r2
 8008110:	4619      	mov	r1, r3
 8008112:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008116:	f7f8 fa7f 	bl	8000618 <__aeabi_dmul>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008126:	f7f8 fa77 	bl	8000618 <__aeabi_dmul>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4610      	mov	r0, r2
 8008130:	4619      	mov	r1, r3
 8008132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008136:	f7f8 fa6f 	bl	8000618 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 f8b3 	bl	80002ac <__adddf3>
 8008146:	4603      	mov	r3, r0
 8008148:	460c      	mov	r4, r1
 800814a:	4625      	mov	r5, r4
 800814c:	461c      	mov	r4, r3
 800814e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008152:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008156:	f7f8 fa5f 	bl	8000618 <__aeabi_dmul>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4610      	mov	r0, r2
 8008160:	4619      	mov	r1, r3
 8008162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008166:	f7f8 fa57 	bl	8000618 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4610      	mov	r0, r2
 8008170:	4619      	mov	r1, r3
 8008172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008176:	f7f8 fa4f 	bl	8000618 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4610      	mov	r0, r2
 8008180:	4619      	mov	r1, r3
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <scaraFLowScurve+0x2d4>)
 8008188:	f7f8 fb70 	bl	800086c <__aeabi_ddiv>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 f888 	bl	80002a8 <__aeabi_dsub>
 8008198:	4603      	mov	r3, r0
 800819a:	460c      	mov	r4, r1
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80081a2:	f000 bd6f 	b.w	8008c84 <scaraFLowScurve+0xdac>
 80081a6:	bf00      	nop
 80081a8:	3fe00000 	.word	0x3fe00000
 80081ac:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80081b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	f7f8 f878 	bl	80002ac <__adddf3>
 80081bc:	4603      	mov	r3, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	461a      	mov	r2, r3
 80081c2:	4623      	mov	r3, r4
 80081c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081c8:	f7f8 fcac 	bl	8000b24 <__aeabi_dcmpge>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80a2 	beq.w	8008318 <scaraFLowScurve+0x440>
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	4b4c      	ldr	r3, [pc, #304]	; (800830c <scaraFLowScurve+0x434>)
 80081da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081de:	f7f8 fa1b 	bl	8000618 <__aeabi_dmul>
 80081e2:	4603      	mov	r3, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	461a      	mov	r2, r3
 80081e8:	4623      	mov	r3, r4
 80081ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081ee:	f7f8 fc85 	bl	8000afc <__aeabi_dcmplt>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 808f 	beq.w	8008318 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 80081fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	f7f8 f853 	bl	80002ac <__adddf3>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	461a      	mov	r2, r3
 800820c:	4623      	mov	r3, r4
 800820e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008212:	f7f8 f849 	bl	80002a8 <__aeabi_dsub>
 8008216:	4603      	mov	r3, r0
 8008218:	460c      	mov	r4, r1
 800821a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800821e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008228:	617b      	str	r3, [r7, #20]
 800822a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800822e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008232:	f7f8 f9f1 	bl	8000618 <__aeabi_dmul>
 8008236:	4603      	mov	r3, r0
 8008238:	460c      	mov	r4, r1
 800823a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	4b31      	ldr	r3, [pc, #196]	; (8008310 <scaraFLowScurve+0x438>)
 800824c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008250:	f7f8 f9e2 	bl	8000618 <__aeabi_dmul>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4610      	mov	r0, r2
 800825a:	4619      	mov	r1, r3
 800825c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008260:	f7f8 f9da 	bl	8000618 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008270:	f7f8 f9d2 	bl	8000618 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f8 f814 	bl	80002a8 <__aeabi_dsub>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800829a:	f7f8 f9bd 	bl	8000618 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7f8 f801 	bl	80002ac <__adddf3>
 80082aa:	4603      	mov	r3, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	4625      	mov	r5, r4
 80082b0:	461c      	mov	r4, r3
 80082b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082ba:	f7f8 f9ad 	bl	8000618 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ca:	f7f8 f9a5 	bl	8000618 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4610      	mov	r0, r2
 80082d4:	4619      	mov	r1, r3
 80082d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082da:	f7f8 f99d 	bl	8000618 <__aeabi_dmul>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <scaraFLowScurve+0x43c>)
 80082ec:	f7f8 fabe 	bl	800086c <__aeabi_ddiv>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f7 ffd6 	bl	80002a8 <__aeabi_dsub>
 80082fc:	4603      	mov	r3, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008306:	f000 bcbd 	b.w	8008c84 <scaraFLowScurve+0xdac>
 800830a:	bf00      	nop
 800830c:	40080000 	.word	0x40080000
 8008310:	3fe00000 	.word	0x3fe00000
 8008314:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	4b88      	ldr	r3, [pc, #544]	; (8008540 <scaraFLowScurve+0x668>)
 800831e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008322:	f7f8 f979 	bl	8000618 <__aeabi_dmul>
 8008326:	4603      	mov	r3, r0
 8008328:	460c      	mov	r4, r1
 800832a:	461a      	mov	r2, r3
 800832c:	4623      	mov	r3, r4
 800832e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008332:	f7f8 fbf7 	bl	8000b24 <__aeabi_dcmpge>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80ec 	beq.w	8008516 <scaraFLowScurve+0x63e>
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	4b80      	ldr	r3, [pc, #512]	; (8008544 <scaraFLowScurve+0x66c>)
 8008344:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008348:	f7f8 f966 	bl	8000618 <__aeabi_dmul>
 800834c:	4603      	mov	r3, r0
 800834e:	460c      	mov	r4, r1
 8008350:	461a      	mov	r2, r3
 8008352:	4623      	mov	r3, r4
 8008354:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008358:	f7f8 fbd0 	bl	8000afc <__aeabi_dcmplt>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80d9 	beq.w	8008516 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	4b75      	ldr	r3, [pc, #468]	; (8008540 <scaraFLowScurve+0x668>)
 800836a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800836e:	f7f8 f953 	bl	8000618 <__aeabi_dmul>
 8008372:	4603      	mov	r3, r0
 8008374:	460c      	mov	r4, r1
 8008376:	461a      	mov	r2, r3
 8008378:	4623      	mov	r3, r4
 800837a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800837e:	f7f7 ff93 	bl	80002a8 <__aeabi_dsub>
 8008382:	4603      	mov	r3, r0
 8008384:	460c      	mov	r4, r1
 8008386:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800838a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800839a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800839e:	f7f8 f93b 	bl	8000618 <__aeabi_dmul>
 80083a2:	4603      	mov	r3, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	4625      	mov	r5, r4
 80083a8:	461c      	mov	r4, r3
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083b2:	f7f8 f931 	bl	8000618 <__aeabi_dmul>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4620      	mov	r0, r4
 80083bc:	4629      	mov	r1, r5
 80083be:	f7f7 ff75 	bl	80002ac <__adddf3>
 80083c2:	4603      	mov	r3, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80083d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083da:	f7f8 f91d 	bl	8000618 <__aeabi_dmul>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4610      	mov	r0, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ea:	f7f8 f915 	bl	8000618 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f7 ff57 	bl	80002a8 <__aeabi_dsub>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	4625      	mov	r5, r4
 8008400:	461c      	mov	r4, r3
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	4b50      	ldr	r3, [pc, #320]	; (8008548 <scaraFLowScurve+0x670>)
 8008408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800840c:	f7f8 f904 	bl	8000618 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800841c:	f7f8 f8fc 	bl	8000618 <__aeabi_dmul>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4610      	mov	r0, r2
 8008426:	4619      	mov	r1, r3
 8008428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800842c:	f7f8 f8f4 	bl	8000618 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f7 ff38 	bl	80002ac <__adddf3>
 800843c:	4603      	mov	r3, r0
 800843e:	460c      	mov	r4, r1
 8008440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008442:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008456:	f7f8 f8df 	bl	8000618 <__aeabi_dmul>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f7 ff23 	bl	80002ac <__adddf3>
 8008466:	4603      	mov	r3, r0
 8008468:	460c      	mov	r4, r1
 800846a:	4625      	mov	r5, r4
 800846c:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	4b35      	ldr	r3, [pc, #212]	; (8008548 <scaraFLowScurve+0x670>)
 8008474:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008478:	f7f8 f8ce 	bl	8000618 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4610      	mov	r0, r2
 8008482:	4619      	mov	r1, r3
 8008484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008498:	f7f8 f8be 	bl	8000618 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084a8:	f7f8 f8b6 	bl	8000618 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f7 fef8 	bl	80002a8 <__aeabi_dsub>
 80084b8:	4603      	mov	r3, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	4625      	mov	r5, r4
 80084be:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80084c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084c8:	f7f8 f8a6 	bl	8000618 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084d8:	f7f8 f89e 	bl	8000618 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084e8:	f7f8 f896 	bl	8000618 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	4b14      	ldr	r3, [pc, #80]	; (800854c <scaraFLowScurve+0x674>)
 80084fa:	f7f8 f9b7 	bl	800086c <__aeabi_ddiv>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4620      	mov	r0, r4
 8008504:	4629      	mov	r1, r5
 8008506:	f7f7 fed1 	bl	80002ac <__adddf3>
 800850a:	4603      	mov	r3, r0
 800850c:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800850e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008510:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008514:	e3b6      	b.n	8008c84 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	f04f 0400 	mov.w	r4, #0
 800852e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800853e:	e3a1      	b.n	8008c84 <scaraFLowScurve+0xdac>
 8008540:	40080000 	.word	0x40080000
 8008544:	40100000 	.word	0x40100000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008556:	2b05      	cmp	r3, #5
 8008558:	f040 8392 	bne.w	8008c80 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008568:	f7f8 fadc 	bl	8000b24 <__aeabi_dcmpge>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d058      	beq.n	8008624 <scaraFLowScurve+0x74c>
 8008572:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008576:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800857a:	f7f8 fabf 	bl	8000afc <__aeabi_dcmplt>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d04f      	beq.n	8008624 <scaraFLowScurve+0x74c>
			 t = time;
 8008584:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008588:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800858c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008590:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008594:	f7f8 f840 	bl	8000618 <__aeabi_dmul>
 8008598:	4603      	mov	r3, r0
 800859a:	460c      	mov	r4, r1
 800859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	4b91      	ldr	r3, [pc, #580]	; (80087ec <scaraFLowScurve+0x914>)
 80085a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085ac:	f7f8 f834 	bl	8000618 <__aeabi_dmul>
 80085b0:	4603      	mov	r3, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4618      	mov	r0, r3
 80085b6:	4621      	mov	r1, r4
 80085b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085bc:	f7f8 f82c 	bl	8000618 <__aeabi_dmul>
 80085c0:	4603      	mov	r3, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	4618      	mov	r0, r3
 80085c6:	4621      	mov	r1, r4
 80085c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085cc:	f7f8 f824 	bl	8000618 <__aeabi_dmul>
 80085d0:	4603      	mov	r3, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80085da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085e2:	f7f8 f819 	bl	8000618 <__aeabi_dmul>
 80085e6:	4603      	mov	r3, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	4618      	mov	r0, r3
 80085ec:	4621      	mov	r1, r4
 80085ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085f2:	f7f8 f811 	bl	8000618 <__aeabi_dmul>
 80085f6:	4603      	mov	r3, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	4618      	mov	r0, r3
 80085fc:	4621      	mov	r1, r4
 80085fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008602:	f7f8 f809 	bl	8000618 <__aeabi_dmul>
 8008606:	4603      	mov	r3, r0
 8008608:	460c      	mov	r4, r1
 800860a:	4618      	mov	r0, r3
 800860c:	4621      	mov	r1, r4
 800860e:	f04f 0200 	mov.w	r2, #0
 8008612:	4b77      	ldr	r3, [pc, #476]	; (80087f0 <scaraFLowScurve+0x918>)
 8008614:	f7f8 f92a 	bl	800086c <__aeabi_ddiv>
 8008618:	4603      	mov	r3, r0
 800861a:	460c      	mov	r4, r1
 800861c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008622:	e32f      	b.n	8008c84 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8008624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008628:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800862c:	f7f8 fa70 	bl	8000b10 <__aeabi_dcmple>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80de 	beq.w	80087f4 <scaraFLowScurve+0x91c>
 8008638:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	f7f7 fe34 	bl	80002ac <__adddf3>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800864c:	f7f8 fa56 	bl	8000afc <__aeabi_dcmplt>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 80ce 	beq.w	80087f4 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8008658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800865c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008660:	f7f7 fe22 	bl	80002a8 <__aeabi_dsub>
 8008664:	4603      	mov	r3, r0
 8008666:	460c      	mov	r4, r1
 8008668:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800866c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008670:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008674:	f7f7 ffd0 	bl	8000618 <__aeabi_dmul>
 8008678:	4603      	mov	r3, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4625      	mov	r5, r4
 800867e:	461c      	mov	r4, r3
 8008680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008684:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008688:	f7f7 ffc6 	bl	8000618 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f7 fe08 	bl	80002a8 <__aeabi_dsub>
 8008698:	4603      	mov	r3, r0
 800869a:	460c      	mov	r4, r1
 800869c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80086a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086c0:	f7f7 ffaa 	bl	8000618 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 fdee 	bl	80002ac <__adddf3>
 80086d0:	4603      	mov	r3, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	4625      	mov	r5, r4
 80086d6:	461c      	mov	r4, r3
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	4b43      	ldr	r3, [pc, #268]	; (80087ec <scaraFLowScurve+0x914>)
 80086de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80086e2:	f7f7 ff99 	bl	8000618 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4610      	mov	r0, r2
 80086ec:	4619      	mov	r1, r3
 80086ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086f2:	f7f7 ff91 	bl	8000618 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008702:	f7f7 ff89 	bl	8000618 <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fdcb 	bl	80002a8 <__aeabi_dsub>
 8008712:	4603      	mov	r3, r0
 8008714:	460c      	mov	r4, r1
 8008716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008718:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8008728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800872c:	f7f7 ff74 	bl	8000618 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 fdb8 	bl	80002ac <__adddf3>
 800873c:	4603      	mov	r3, r0
 800873e:	460c      	mov	r4, r1
 8008740:	4625      	mov	r5, r4
 8008742:	461c      	mov	r4, r3
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <scaraFLowScurve+0x914>)
 800874a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800874e:	f7f7 ff63 	bl	8000618 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4610      	mov	r0, r2
 8008758:	4619      	mov	r1, r3
 800875a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800875e:	f7f7 ff5b 	bl	8000618 <__aeabi_dmul>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4610      	mov	r0, r2
 8008768:	4619      	mov	r1, r3
 800876a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800876e:	f7f7 ff53 	bl	8000618 <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800877e:	f7f7 ff4b 	bl	8000618 <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f7 fd8f 	bl	80002ac <__adddf3>
 800878e:	4603      	mov	r3, r0
 8008790:	460c      	mov	r4, r1
 8008792:	4625      	mov	r5, r4
 8008794:	461c      	mov	r4, r3
 8008796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800879a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800879e:	f7f7 ff3b 	bl	8000618 <__aeabi_dmul>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4610      	mov	r0, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087ae:	f7f7 ff33 	bl	8000618 <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087be:	f7f7 ff2b 	bl	8000618 <__aeabi_dmul>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <scaraFLowScurve+0x918>)
 80087d0:	f7f8 f84c 	bl	800086c <__aeabi_ddiv>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fd64 	bl	80002a8 <__aeabi_dsub>
 80087e0:	4603      	mov	r3, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80087ea:	e24b      	b.n	8008c84 <scaraFLowScurve+0xdac>
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 80087f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	f7f7 fd56 	bl	80002ac <__adddf3>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008808:	f7f8 f98c 	bl	8000b24 <__aeabi_dcmpge>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d04b      	beq.n	80088aa <scaraFLowScurve+0x9d2>
 8008812:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	f7f7 fd47 	bl	80002ac <__adddf3>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800882a:	f7f7 fd3f 	bl	80002ac <__adddf3>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008836:	f7f8 f961 	bl	8000afc <__aeabi_dcmplt>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d034      	beq.n	80088aa <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8008840:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	f7f7 fd30 	bl	80002ac <__adddf3>
 800884c:	4603      	mov	r3, r0
 800884e:	460c      	mov	r4, r1
 8008850:	461a      	mov	r2, r3
 8008852:	4623      	mov	r3, r4
 8008854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008858:	f7f7 fd26 	bl	80002a8 <__aeabi_dsub>
 800885c:	4603      	mov	r3, r0
 800885e:	460c      	mov	r4, r1
 8008860:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	f04f 0400 	mov.w	r4, #0
 800886e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800888a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888e:	f7f7 fec3 	bl	8000618 <__aeabi_dmul>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f7 fd07 	bl	80002ac <__adddf3>
 800889e:	4603      	mov	r3, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80088a8:	e1ec      	b.n	8008c84 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 80088aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	f7f7 fcfb 	bl	80002ac <__adddf3>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088c2:	f7f7 fcf3 	bl	80002ac <__adddf3>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088ce:	f7f8 f929 	bl	8000b24 <__aeabi_dcmpge>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80af 	beq.w	8008a38 <scaraFLowScurve+0xb60>
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	4b53      	ldr	r3, [pc, #332]	; (8008a2c <scaraFLowScurve+0xb54>)
 80088e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088e4:	f7f7 fe98 	bl	8000618 <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4610      	mov	r0, r2
 80088ee:	4619      	mov	r1, r3
 80088f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088f4:	f7f7 fcda 	bl	80002ac <__adddf3>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008900:	f7f8 f8fc 	bl	8000afc <__aeabi_dcmplt>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8096 	beq.w	8008a38 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 800890c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	f7f7 fcca 	bl	80002ac <__adddf3>
 8008918:	4603      	mov	r3, r0
 800891a:	460c      	mov	r4, r1
 800891c:	4618      	mov	r0, r3
 800891e:	4621      	mov	r1, r4
 8008920:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008924:	f7f7 fcc2 	bl	80002ac <__adddf3>
 8008928:	4603      	mov	r3, r0
 800892a:	460c      	mov	r4, r1
 800892c:	461a      	mov	r2, r3
 800892e:	4623      	mov	r3, r4
 8008930:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008934:	f7f7 fcb8 	bl	80002a8 <__aeabi_dsub>
 8008938:	4603      	mov	r3, r0
 800893a:	460c      	mov	r4, r1
 800893c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008946:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800894a:	607b      	str	r3, [r7, #4]
 800894c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008954:	f7f7 fe60 	bl	8000618 <__aeabi_dmul>
 8008958:	4603      	mov	r3, r0
 800895a:	460c      	mov	r4, r1
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <scaraFLowScurve+0xb58>)
 800896e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008972:	f7f7 fe51 	bl	8000618 <__aeabi_dmul>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008982:	f7f7 fe49 	bl	8000618 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008992:	f7f7 fe41 	bl	8000618 <__aeabi_dmul>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fc83 	bl	80002a8 <__aeabi_dsub>
 80089a2:	4603      	mov	r3, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80089b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089bc:	f7f7 fe2c 	bl	8000618 <__aeabi_dmul>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fc70 	bl	80002ac <__adddf3>
 80089cc:	4603      	mov	r3, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4625      	mov	r5, r4
 80089d2:	461c      	mov	r4, r3
 80089d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089dc:	f7f7 fe1c 	bl	8000618 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ec:	f7f7 fe14 	bl	8000618 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4610      	mov	r0, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089fc:	f7f7 fe0c 	bl	8000618 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <scaraFLowScurve+0xb5c>)
 8008a0e:	f7f7 ff2d 	bl	800086c <__aeabi_ddiv>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 fc45 	bl	80002a8 <__aeabi_dsub>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a24:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008a28:	e12c      	b.n	8008c84 <scaraFLowScurve+0xdac>
 8008a2a:	bf00      	nop
 8008a2c:	40080000 	.word	0x40080000
 8008a30:	3fe00000 	.word	0x3fe00000
 8008a34:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	4b94      	ldr	r3, [pc, #592]	; (8008c90 <scaraFLowScurve+0xdb8>)
 8008a3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a42:	f7f7 fde9 	bl	8000618 <__aeabi_dmul>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a52:	f7f7 fc2b 	bl	80002ac <__adddf3>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a5e:	f7f8 f861 	bl	8000b24 <__aeabi_dcmpge>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80f6 	beq.w	8008c56 <scaraFLowScurve+0xd7e>
 8008a6a:	f04f 0200 	mov.w	r2, #0
 8008a6e:	4b89      	ldr	r3, [pc, #548]	; (8008c94 <scaraFLowScurve+0xdbc>)
 8008a70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a74:	f7f7 fdd0 	bl	8000618 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a84:	f7f7 fc12 	bl	80002ac <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a90:	f7f8 f834 	bl	8000afc <__aeabi_dcmplt>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80dd 	beq.w	8008c56 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	4b7b      	ldr	r3, [pc, #492]	; (8008c90 <scaraFLowScurve+0xdb8>)
 8008aa2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008aa6:	f7f7 fdb7 	bl	8000618 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ab6:	f7f7 fbf9 	bl	80002ac <__adddf3>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ac2:	f7f7 fbf1 	bl	80002a8 <__aeabi_dsub>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8008ace:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008ad6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd9b 	bl	8000618 <__aeabi_dmul>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	4625      	mov	r5, r4
 8008ae8:	461c      	mov	r4, r3
 8008aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008aee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008af2:	f7f7 fd91 	bl	8000618 <__aeabi_dmul>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f7 fbd5 	bl	80002ac <__adddf3>
 8008b02:	4603      	mov	r3, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b08:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8008b12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008b1a:	f7f7 fd7d 	bl	8000618 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4610      	mov	r0, r2
 8008b24:	4619      	mov	r1, r3
 8008b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b2a:	f7f7 fd75 	bl	8000618 <__aeabi_dmul>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4620      	mov	r0, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	f7f7 fbb7 	bl	80002a8 <__aeabi_dsub>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4625      	mov	r5, r4
 8008b40:	461c      	mov	r4, r3
 8008b42:	f04f 0200 	mov.w	r2, #0
 8008b46:	4b54      	ldr	r3, [pc, #336]	; (8008c98 <scaraFLowScurve+0xdc0>)
 8008b48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008b4c:	f7f7 fd64 	bl	8000618 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b5c:	f7f7 fd5c 	bl	8000618 <__aeabi_dmul>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4610      	mov	r0, r2
 8008b66:	4619      	mov	r1, r3
 8008b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b6c:	f7f7 fd54 	bl	8000618 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 fb98 	bl	80002ac <__adddf3>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b96:	f7f7 fd3f 	bl	8000618 <__aeabi_dmul>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fb83 	bl	80002ac <__adddf3>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	4625      	mov	r5, r4
 8008bac:	461c      	mov	r4, r3
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	4b39      	ldr	r3, [pc, #228]	; (8008c98 <scaraFLowScurve+0xdc0>)
 8008bb4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008bb8:	f7f7 fd2e 	bl	8000618 <__aeabi_dmul>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bc8:	f7f7 fd26 	bl	8000618 <__aeabi_dmul>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bd8:	f7f7 fd1e 	bl	8000618 <__aeabi_dmul>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4610      	mov	r0, r2
 8008be2:	4619      	mov	r1, r3
 8008be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008be8:	f7f7 fd16 	bl	8000618 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f7f7 fb58 	bl	80002a8 <__aeabi_dsub>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	4625      	mov	r5, r4
 8008bfe:	461c      	mov	r4, r3
 8008c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008c08:	f7f7 fd06 	bl	8000618 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4610      	mov	r0, r2
 8008c12:	4619      	mov	r1, r3
 8008c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c18:	f7f7 fcfe 	bl	8000618 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c28:	f7f7 fcf6 	bl	8000618 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4610      	mov	r0, r2
 8008c32:	4619      	mov	r1, r3
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <scaraFLowScurve+0xdc4>)
 8008c3a:	f7f7 fe17 	bl	800086c <__aeabi_ddiv>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4620      	mov	r0, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7f7 fb31 	bl	80002ac <__adddf3>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c50:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008c54:	e016      	b.n	8008c84 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	f04f 0400 	mov.w	r4, #0
 8008c60:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	f04f 0400 	mov.w	r4, #0
 8008c6e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008c7e:	e001      	b.n	8008c84 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3748      	adds	r7, #72	; 0x48
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40080000 	.word	0x40080000
 8008c94:	40100000 	.word	0x40100000
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	40180000 	.word	0x40180000

08008ca0 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	ed87 0b06 	vstr	d0, [r7, #24]
 8008caa:	ed87 1b04 	vstr	d1, [r7, #16]
 8008cae:	ed87 2b02 	vstr	d2, [r7, #8]
 8008cb2:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008cb6:	a335      	add	r3, pc, #212	; (adr r3, 8008d8c <scaraCheckWorkSpace4+0xec>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cc0:	f7f7 ff1c 	bl	8000afc <__aeabi_dcmplt>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <scaraCheckWorkSpace4+0x3e>
 8008cca:	a332      	add	r3, pc, #200	; (adr r3, 8008d94 <scaraCheckWorkSpace4+0xf4>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cd4:	f7f7 ff30 	bl	8000b38 <__aeabi_dcmpgt>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cde:	2307      	movs	r3, #7
 8008ce0:	e043      	b.n	8008d6a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008ce2:	a32e      	add	r3, pc, #184	; (adr r3, 8008d9c <scaraCheckWorkSpace4+0xfc>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008cec:	f7f7 ff06 	bl	8000afc <__aeabi_dcmplt>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d109      	bne.n	8008d0a <scaraCheckWorkSpace4+0x6a>
 8008cf6:	a32b      	add	r3, pc, #172	; (adr r3, 8008da4 <scaraCheckWorkSpace4+0x104>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d00:	f7f7 ff1a 	bl	8000b38 <__aeabi_dcmpgt>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d0a:	2307      	movs	r3, #7
 8008d0c:	e02d      	b.n	8008d6a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d1a:	f7f7 feef 	bl	8000afc <__aeabi_dcmplt>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <scaraCheckWorkSpace4+0x98>
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <scaraCheckWorkSpace4+0xe8>)
 8008d2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d2e:	f7f7 ff03 	bl	8000b38 <__aeabi_dcmpgt>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d38:	2307      	movs	r3, #7
 8008d3a:	e016      	b.n	8008d6a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008d3c:	a30e      	add	r3, pc, #56	; (adr r3, 8008d78 <scaraCheckWorkSpace4+0xd8>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d46:	f7f7 fed9 	bl	8000afc <__aeabi_dcmplt>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <scaraCheckWorkSpace4+0xc4>
 8008d50:	a30b      	add	r3, pc, #44	; (adr r3, 8008d80 <scaraCheckWorkSpace4+0xe0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5a:	f7f7 feed 	bl	8000b38 <__aeabi_dcmpgt>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d64:	2307      	movs	r3, #7
 8008d66:	e000      	b.n	8008d6a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
 8008d78:	daaaaaab 	.word	0xdaaaaaab
 8008d7c:	c007bc89 	.word	0xc007bc89
 8008d80:	daaaaaab 	.word	0xdaaaaaab
 8008d84:	4007bc89 	.word	0x4007bc89
 8008d88:	40590000 	.word	0x40590000
 8008d8c:	daaaaaab 	.word	0xdaaaaaab
 8008d90:	bff7bc89 	.word	0xbff7bc89
 8008d94:	daaaaaab 	.word	0xdaaaaaab
 8008d98:	3ff7bc89 	.word	0x3ff7bc89
 8008d9c:	88000000 	.word	0x88000000
 8008da0:	c002d97c 	.word	0xc002d97c
 8008da4:	88000000 	.word	0x88000000
 8008da8:	4002d97c 	.word	0x4002d97c
 8008dac:	00000000 	.word	0x00000000

08008db0 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	ed87 0b00 	vstr	d0, [r7]
 8008dbc:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d117      	bne.n	8008df4 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008dc4:	a33d      	add	r3, pc, #244	; (adr r3, 8008ebc <scaraCheckWorkSpace1+0x10c>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dce:	f7f7 fea9 	bl	8000b24 <__aeabi_dcmpge>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <scaraCheckWorkSpace1+0x40>
 8008dd8:	a33a      	add	r3, pc, #232	; (adr r3, 8008ec4 <scaraCheckWorkSpace1+0x114>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008de2:	f7f7 fe95 	bl	8000b10 <__aeabi_dcmple>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e054      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008df0:	2307      	movs	r3, #7
 8008df2:	e052      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d117      	bne.n	8008e2a <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8008dfa:	a334      	add	r3, pc, #208	; (adr r3, 8008ecc <scaraCheckWorkSpace1+0x11c>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e04:	f7f7 fe8e 	bl	8000b24 <__aeabi_dcmpge>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <scaraCheckWorkSpace1+0x76>
 8008e0e:	a331      	add	r3, pc, #196	; (adr r3, 8008ed4 <scaraCheckWorkSpace1+0x124>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e18:	f7f7 fe7a 	bl	8000b10 <__aeabi_dcmple>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e039      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008e26:	2307      	movs	r3, #7
 8008e28:	e037      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d118      	bne.n	8008e62 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e3c:	f7f7 fe72 	bl	8000b24 <__aeabi_dcmpge>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <scaraCheckWorkSpace1+0xae>
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <scaraCheckWorkSpace1+0x108>)
 8008e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e50:	f7f7 fe5e 	bl	8000b10 <__aeabi_dcmple>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e01d      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008e5e:	2307      	movs	r3, #7
 8008e60:	e01b      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d117      	bne.n	8008e98 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008e68:	a30f      	add	r3, pc, #60	; (adr r3, 8008ea8 <scaraCheckWorkSpace1+0xf8>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e72:	f7f7 fe57 	bl	8000b24 <__aeabi_dcmpge>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <scaraCheckWorkSpace1+0xe4>
 8008e7c:	a30c      	add	r3, pc, #48	; (adr r3, 8008eb0 <scaraCheckWorkSpace1+0x100>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e86:	f7f7 fe43 	bl	8000b10 <__aeabi_dcmple>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e002      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008e94:	2307      	movs	r3, #7
 8008e96:	e000      	b.n	8008e9a <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8008e98:	2301      	movs	r3, #1
	}
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	f3af 8000 	nop.w
 8008ea8:	daaaaaab 	.word	0xdaaaaaab
 8008eac:	c007bc89 	.word	0xc007bc89
 8008eb0:	daaaaaab 	.word	0xdaaaaaab
 8008eb4:	4007bc89 	.word	0x4007bc89
 8008eb8:	40590000 	.word	0x40590000
 8008ebc:	daaaaaab 	.word	0xdaaaaaab
 8008ec0:	bff7bc89 	.word	0xbff7bc89
 8008ec4:	daaaaaab 	.word	0xdaaaaaab
 8008ec8:	3ff7bc89 	.word	0x3ff7bc89
 8008ecc:	88000000 	.word	0x88000000
 8008ed0:	c002d97c 	.word	0xc002d97c
 8008ed4:	88000000 	.word	0x88000000
 8008ed8:	4002d97c 	.word	0x4002d97c
 8008edc:	00000000 	.word	0x00000000

08008ee0 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008ee0:	b5b0      	push	{r4, r5, r7, lr}
 8008ee2:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008ee6:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	f04f 0400 	mov.w	r4, #0
 8008ef0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	4a36      	ldr	r2, [pc, #216]	; (8008fd0 <scaraTestDuty+0xf0>)
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4611      	mov	r1, r2
 8008efc:	23b8      	movs	r3, #184	; 0xb8
 8008efe:	461a      	mov	r2, r3
 8008f00:	f00c fcc6 	bl	8015890 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8008f04:	4b33      	ldr	r3, [pc, #204]	; (8008fd4 <scaraTestDuty+0xf4>)
 8008f06:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f0e:	a32e      	add	r3, pc, #184	; (adr r3, 8008fc8 <scaraTestDuty+0xe8>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 fcaa 	bl	800086c <__aeabi_ddiv>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	ec44 3b17 	vmov	d7, r3, r4
 8008f20:	eeb0 0a47 	vmov.f32	s0, s14
 8008f24:	eef0 0a67 	vmov.f32	s1, s15
 8008f28:	f010 fe62 	bl	8019bf0 <ceil>
 8008f2c:	ec54 3b10 	vmov	r3, r4, d0
 8008f30:	4618      	mov	r0, r3
 8008f32:	4621      	mov	r1, r4
 8008f34:	f7f7 fe20 	bl	8000b78 <__aeabi_d2iz>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008f44:	e032      	b.n	8008fac <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 8008f46:	a320      	add	r3, pc, #128	; (adr r3, 8008fc8 <scaraTestDuty+0xe8>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8008f50:	f7f7 f9ac 	bl	80002ac <__adddf3>
 8008f54:	4603      	mov	r3, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8008f5c:	463c      	mov	r4, r7
 8008f5e:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8008f62:	4668      	mov	r0, sp
 8008f64:	f104 0308 	add.w	r3, r4, #8
 8008f68:	22b0      	movs	r2, #176	; 0xb0
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f00c fc90 	bl	8015890 <memcpy>
 8008f70:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008f74:	4628      	mov	r0, r5
 8008f76:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8008f7a:	f7fe f993 	bl	80072a4 <scaraFlowDuty>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 8008f84:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <scaraTestDuty+0xb2>
			return status;
 8008f8c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008f90:	e013      	b.n	8008fba <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8008f92:	463a      	mov	r2, r7
 8008f94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008f98:	4611      	mov	r1, r2
 8008f9a:	22b8      	movs	r2, #184	; 0xb8
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f00c fc77 	bl	8015890 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8008fa2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008fac:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008fb0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	dbc6      	blt.n	8008f46 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc4:	f3af 8000 	nop.w
 8008fc8:	40000000 	.word	0x40000000
 8008fcc:	3f847ae1 	.word	0x3f847ae1
 8008fd0:	20005e90 	.word	0x20005e90
 8008fd4:	200053d0 	.word	0x200053d0

08008fd8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8008fdc:	4b03      	ldr	r3, [pc, #12]	; (8008fec <scaraSetScanFlag+0x14>)
 8008fde:	2201      	movs	r2, #1
 8008fe0:	70da      	strb	r2, [r3, #3]
}
 8008fe2:	bf00      	nop
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	20000ca0 	.word	0x20000ca0

08008ff0 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008ffa:	4a05      	ldr	r2, [pc, #20]	; (8009010 <scaraSetOutput+0x20>)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	4618      	mov	r0, r3
 8009004:	f7fb fc54 	bl	80048b0 <lowlayer_setOutput>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000ca0 	.word	0x20000ca0

08009014 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800901e:	4a04      	ldr	r2, [pc, #16]	; (8009030 <scaraSetDutyState+0x1c>)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	7093      	strb	r3, [r2, #2]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20000ca0 	.word	0x20000ca0

08009034 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800903e:	4a04      	ldr	r2, [pc, #16]	; (8009050 <scaraSetMode+0x1c>)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	7053      	strb	r3, [r2, #1]
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000ca0 	.word	0x20000ca0

08009054 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800905e:	4a04      	ldr	r2, [pc, #16]	; (8009070 <scaraSetMethod+0x1c>)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	7013      	strb	r3, [r2, #0]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000ca0 	.word	0x20000ca0

08009074 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800907c:	22b8      	movs	r2, #184	; 0xb8
 800907e:	4904      	ldr	r1, [pc, #16]	; (8009090 <scaraGetPosition+0x1c>)
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f00c fc05 	bl	8015890 <memcpy>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20005e90 	.word	0x20005e90

08009094 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009098:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <scaraGetMode+0x14>)
 800909a:	785b      	ldrb	r3, [r3, #1]
}
 800909c:	4618      	mov	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000ca0 	.word	0x20000ca0

080090ac <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
	return mySCARA.method;
 80090b0:	4b03      	ldr	r3, [pc, #12]	; (80090c0 <scaraGetMethod+0x14>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	20000ca0 	.word	0x20000ca0

080090c4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <scaraGetDutyState+0x14>)
 80090ca:	789b      	ldrb	r3, [r3, #2]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000ca0 	.word	0x20000ca0

080090dc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 80090e0:	4b03      	ldr	r3, [pc, #12]	; (80090f0 <scaraIsScanLimit+0x14>)
 80090e2:	78db      	ldrb	r3, [r3, #3]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000ca0 	.word	0x20000ca0
 80090f4:	00000000 	.word	0x00000000

080090f8 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <scaraIsFinish+0x50>)
 8009104:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800910c:	a30c      	add	r3, pc, #48	; (adr r3, 8009140 <scaraIsFinish+0x48>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f8cb 	bl	80002ac <__adddf3>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	461a      	mov	r2, r3
 800911c:	4623      	mov	r3, r4
 800911e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009122:	f7f7 fd09 	bl	8000b38 <__aeabi_dcmpgt>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <scaraIsFinish+0x38>
		return TRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8009130:	2300      	movs	r3, #0
	}
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	bd90      	pop	{r4, r7, pc}
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	eb851eb8 	.word	0xeb851eb8
 8009144:	3f9eb851 	.word	0x3f9eb851
 8009148:	200053d0 	.word	0x200053d0
 800914c:	00000000 	.word	0x00000000

08009150 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8009150:	b082      	sub	sp, #8
 8009152:	b590      	push	{r4, r7, lr}
 8009154:	b0af      	sub	sp, #188	; 0xbc
 8009156:	af0a      	add	r7, sp, #40	; 0x28
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800915e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8009162:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	4b7f      	ldr	r3, [pc, #508]	; (8009368 <scaraPosition2String+0x218>)
 800916c:	f7f7 fa54 	bl	8000618 <__aeabi_dmul>
 8009170:	4603      	mov	r3, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4618      	mov	r0, r3
 8009176:	4621      	mov	r1, r4
 8009178:	a379      	add	r3, pc, #484	; (adr r3, 8009360 <scaraPosition2String+0x210>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 fb75 	bl	800086c <__aeabi_ddiv>
 8009182:	4603      	mov	r3, r0
 8009184:	460c      	mov	r4, r1
 8009186:	ec44 3b17 	vmov	d7, r3, r4
 800918a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800918e:	2106      	movs	r1, #6
 8009190:	eeb0 0a47 	vmov.f32	s0, s14
 8009194:	eef0 0a67 	vmov.f32	s1, s15
 8009198:	4618      	mov	r0, r3
 800919a:	f7f8 fcdd 	bl	8001b58 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 800919e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	4b70      	ldr	r3, [pc, #448]	; (8009368 <scaraPosition2String+0x218>)
 80091a8:	f7f7 fa36 	bl	8000618 <__aeabi_dmul>
 80091ac:	4603      	mov	r3, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	4618      	mov	r0, r3
 80091b2:	4621      	mov	r1, r4
 80091b4:	a36a      	add	r3, pc, #424	; (adr r3, 8009360 <scaraPosition2String+0x210>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 fb57 	bl	800086c <__aeabi_ddiv>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	ec44 3b17 	vmov	d7, r3, r4
 80091c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80091ca:	2106      	movs	r1, #6
 80091cc:	eeb0 0a47 	vmov.f32	s0, s14
 80091d0:	eef0 0a67 	vmov.f32	s1, s15
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f8 fcbf 	bl	8001b58 <double2string>
	double2string(d3, position.D3, 6);
 80091da:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80091de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80091e2:	2106      	movs	r1, #6
 80091e4:	eeb0 0a47 	vmov.f32	s0, s14
 80091e8:	eef0 0a67 	vmov.f32	s1, s15
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7f8 fcb3 	bl	8001b58 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80091f2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	4b5b      	ldr	r3, [pc, #364]	; (8009368 <scaraPosition2String+0x218>)
 80091fc:	f7f7 fa0c 	bl	8000618 <__aeabi_dmul>
 8009200:	4603      	mov	r3, r0
 8009202:	460c      	mov	r4, r1
 8009204:	4618      	mov	r0, r3
 8009206:	4621      	mov	r1, r4
 8009208:	a355      	add	r3, pc, #340	; (adr r3, 8009360 <scaraPosition2String+0x210>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f7 fb2d 	bl	800086c <__aeabi_ddiv>
 8009212:	4603      	mov	r3, r0
 8009214:	460c      	mov	r4, r1
 8009216:	ec44 3b17 	vmov	d7, r3, r4
 800921a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800921e:	2106      	movs	r1, #6
 8009220:	eeb0 0a47 	vmov.f32	s0, s14
 8009224:	eef0 0a67 	vmov.f32	s1, s15
 8009228:	4618      	mov	r0, r3
 800922a:	f7f8 fc95 	bl	8001b58 <double2string>
	double2string(x, position.x, 6);
 800922e:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8009232:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009236:	2106      	movs	r1, #6
 8009238:	eeb0 0a47 	vmov.f32	s0, s14
 800923c:	eef0 0a67 	vmov.f32	s1, s15
 8009240:	4618      	mov	r0, r3
 8009242:	f7f8 fc89 	bl	8001b58 <double2string>
	double2string(y, position.y, 6);
 8009246:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800924a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800924e:	2106      	movs	r1, #6
 8009250:	eeb0 0a47 	vmov.f32	s0, s14
 8009254:	eef0 0a67 	vmov.f32	s1, s15
 8009258:	4618      	mov	r0, r3
 800925a:	f7f8 fc7d 	bl	8001b58 <double2string>
	double2string(z, position.z, 6);
 800925e:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8009262:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009266:	2106      	movs	r1, #6
 8009268:	eeb0 0a47 	vmov.f32	s0, s14
 800926c:	eef0 0a67 	vmov.f32	s1, s15
 8009270:	4618      	mov	r0, r3
 8009272:	f7f8 fc71 	bl	8001b58 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 8009276:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	4b3a      	ldr	r3, [pc, #232]	; (8009368 <scaraPosition2String+0x218>)
 8009280:	f7f7 f9ca 	bl	8000618 <__aeabi_dmul>
 8009284:	4603      	mov	r3, r0
 8009286:	460c      	mov	r4, r1
 8009288:	4618      	mov	r0, r3
 800928a:	4621      	mov	r1, r4
 800928c:	a334      	add	r3, pc, #208	; (adr r3, 8009360 <scaraPosition2String+0x210>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 faeb 	bl	800086c <__aeabi_ddiv>
 8009296:	4603      	mov	r3, r0
 8009298:	460c      	mov	r4, r1
 800929a:	ec44 3b17 	vmov	d7, r3, r4
 800929e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092a2:	2106      	movs	r1, #6
 80092a4:	eeb0 0a47 	vmov.f32	s0, s14
 80092a8:	eef0 0a67 	vmov.f32	s1, s15
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7f8 fc53 	bl	8001b58 <double2string>
	double2string(lenght, position.q, 6);
 80092b2:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80092b6:	f107 0320 	add.w	r3, r7, #32
 80092ba:	2106      	movs	r1, #6
 80092bc:	eeb0 0a47 	vmov.f32	s0, s14
 80092c0:	eef0 0a67 	vmov.f32	s1, s15
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f8 fc47 	bl	8001b58 <double2string>
	double2string(total_time, position.total_time, 4);
 80092ca:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	2104      	movs	r1, #4
 80092d4:	eeb0 0a47 	vmov.f32	s0, s14
 80092d8:	eef0 0a67 	vmov.f32	s1, s15
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f8 fc3b 	bl	8001b58 <double2string>
	double2string(time, position.t, 4);
 80092e2:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80092e6:	f107 0314 	add.w	r3, r7, #20
 80092ea:	2104      	movs	r1, #4
 80092ec:	eeb0 0a47 	vmov.f32	s0, s14
 80092f0:	eef0 0a67 	vmov.f32	s1, s15
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f8 fc2f 	bl	8001b58 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80092fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80092fe:	f107 0314 	add.w	r3, r7, #20
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	f107 0320 	add.w	r3, r7, #32
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009314:	9306      	str	r3, [sp, #24]
 8009316:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800932c:	9302      	str	r3, [sp, #8]
 800932e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	4613      	mov	r3, r2
 800933c:	4a0b      	ldr	r2, [pc, #44]	; (800936c <scaraPosition2String+0x21c>)
 800933e:	2190      	movs	r1, #144	; 0x90
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f00d f9cd 	bl	80166e0 <sniprintf>
 8009346:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 800934a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800934e:	4618      	mov	r0, r3
 8009350:	3794      	adds	r7, #148	; 0x94
 8009352:	46bd      	mov	sp, r7
 8009354:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009358:	b002      	add	sp, #8
 800935a:	4770      	bx	lr
 800935c:	f3af 8000 	nop.w
 8009360:	60000000 	.word	0x60000000
 8009364:	400921fb 	.word	0x400921fb
 8009368:	40668000 	.word	0x40668000
 800936c:	0801bb0c 	.word	0x0801bb0c

08009370 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key,int32_t speed, double *runtime) {
 8009370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009372:	ed2d 8b02 	vpush	{d8}
 8009376:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 800937a:	af66      	add	r7, sp, #408	; 0x198
 800937c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009380:	6019      	str	r1, [r3, #0]
 8009382:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	f107 0247 	add.w	r2, r7, #71	; 0x47
 800938c:	4603      	mov	r3, r0
 800938e:	7013      	strb	r3, [r2, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	double s, v, a;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009390:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009394:	2301      	movs	r3, #1
 8009396:	7313      	strb	r3, [r2, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009398:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800939c:	2300      	movs	r3, #0
 800939e:	7413      	strb	r3, [r2, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 80093a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093a4:	2300      	movs	r3, #0
 80093a6:	7453      	strb	r3, [r2, #17]
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	if (speed < SHIFT_SPEED_MIN || speed > SHIFT_SPPED_MAX) {
 80093a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dd04      	ble.n	80093bc <scaraKeyInit+0x4c>
 80093b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b07      	cmp	r3, #7
 80093ba:	dd02      	ble.n	80093c2 <scaraKeyInit+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80093bc:	2306      	movs	r3, #6
 80093be:	f001 b832 	b.w	800a426 <scaraKeyInit+0x10b6>
	}
	switch(key) {
 80093c2:	f107 0347 	add.w	r3, r7, #71	; 0x47
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b0f      	cmp	r3, #15
 80093ca:	f200 87d3 	bhi.w	800a374 <scaraKeyInit+0x1004>
 80093ce:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <scaraKeyInit+0x64>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009415 	.word	0x08009415
 80093d8:	080094fb 	.word	0x080094fb
 80093dc:	080095f1 	.word	0x080095f1
 80093e0:	080096d7 	.word	0x080096d7
 80093e4:	080097f1 	.word	0x080097f1
 80093e8:	080098d7 	.word	0x080098d7
 80093ec:	080099cd 	.word	0x080099cd
 80093f0:	08009b15 	.word	0x08009b15
 80093f4:	08009c29 	.word	0x08009c29
 80093f8:	08009d05 	.word	0x08009d05
 80093fc:	08009e25 	.word	0x08009e25
 8009400:	08009f01 	.word	0x08009f01
 8009404:	08009fed 	.word	0x08009fed
 8009408:	0800a0a9 	.word	0x0800a0a9
 800940c:	0800a1ad 	.word	0x0800a1ad
 8009410:	0800a289 	.word	0x0800a289
	case SCARA_KEY_X_INC:
	{
		s = SHIFT_3D*speed;
 8009414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009422:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800942a:	ee17 0a90 	vmov	r0, s15
 800942e:	f7f7 f89b 	bl	8000568 <__aeabi_f2d>
 8009432:	4603      	mov	r3, r0
 8009434:	460c      	mov	r4, r1
 8009436:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800943a:	a3e5      	add	r3, pc, #916	; (adr r3, 80097d0 <scaraKeyInit+0x460>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009444:	f7f7 fa12 	bl	800086c <__aeabi_ddiv>
 8009448:	4603      	mov	r3, r0
 800944a:	460c      	mov	r4, r1
 800944c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009450:	a3e1      	add	r3, pc, #900	; (adr r3, 80097d8 <scaraKeyInit+0x468>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800945a:	f7f7 fa07 	bl	800086c <__aeabi_ddiv>
 800945e:	4603      	mov	r3, r0
 8009460:	460c      	mov	r4, r1
 8009462:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009466:	a3de      	add	r3, pc, #888	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009470:	f7f7 f9fc 	bl	800086c <__aeabi_ddiv>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
 8009478:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800947c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009480:	a3d7      	add	r3, pc, #860	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800948a:	f7f7 f9ef 	bl	800086c <__aeabi_ddiv>
 800948e:	4603      	mov	r3, r0
 8009490:	460c      	mov	r4, r1
 8009492:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009496:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800949a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800949e:	2200      	movs	r2, #0
 80094a0:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 80094a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094a6:	2200      	movs	r2, #0
 80094a8:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= s;
 80094aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094ae:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80094b2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80094b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	f04f 0400 	mov.w	r4, #0
 80094c2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80094c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094ca:	f04f 0300 	mov.w	r3, #0
 80094ce:	f04f 0400 	mov.w	r4, #0
 80094d2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80094d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	f04f 0400 	mov.w	r4, #0
 80094e2:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80094e6:	4bc0      	ldr	r3, [pc, #768]	; (80097e8 <scaraKeyInit+0x478>)
 80094e8:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80094ec:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80094f0:	4bbe      	ldr	r3, [pc, #760]	; (80097ec <scaraKeyInit+0x47c>)
 80094f2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 80094f6:	f000 bf3d 	b.w	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_X_DEC:
	{
		s = SHIFT_3D*speed;
 80094fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009508:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800950c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009510:	ee17 0a90 	vmov	r0, s15
 8009514:	f7f7 f828 	bl	8000568 <__aeabi_f2d>
 8009518:	4603      	mov	r3, r0
 800951a:	460c      	mov	r4, r1
 800951c:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009520:	a3ab      	add	r3, pc, #684	; (adr r3, 80097d0 <scaraKeyInit+0x460>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800952a:	f7f7 f99f 	bl	800086c <__aeabi_ddiv>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009536:	a3a8      	add	r3, pc, #672	; (adr r3, 80097d8 <scaraKeyInit+0x468>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009540:	f7f7 f994 	bl	800086c <__aeabi_ddiv>
 8009544:	4603      	mov	r3, r0
 8009546:	460c      	mov	r4, r1
 8009548:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800954c:	a3a4      	add	r3, pc, #656	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009556:	f7f7 f989 	bl	800086c <__aeabi_ddiv>
 800955a:	4603      	mov	r3, r0
 800955c:	460c      	mov	r4, r1
 800955e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009562:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009566:	a39e      	add	r3, pc, #632	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009570:	f7f7 f97c 	bl	800086c <__aeabi_ddiv>
 8009574:	4603      	mov	r3, r0
 8009576:	460c      	mov	r4, r1
 8009578:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800957c:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009584:	2200      	movs	r2, #0
 8009586:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800958c:	2200      	movs	r2, #0
 800958e:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= -s;
 8009590:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009594:	633b      	str	r3, [r7, #48]	; 0x30
 8009596:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800959a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
 80095a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095a4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80095a8:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80095ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	f04f 0400 	mov.w	r4, #0
 80095b8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80095bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	f04f 0400 	mov.w	r4, #0
 80095c8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80095cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	f04f 0400 	mov.w	r4, #0
 80095d8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80095dc:	4b82      	ldr	r3, [pc, #520]	; (80097e8 <scaraKeyInit+0x478>)
 80095de:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80095e2:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80095e6:	4b81      	ldr	r3, [pc, #516]	; (80097ec <scaraKeyInit+0x47c>)
 80095e8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 80095ec:	f000 bec2 	b.w	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_INC:
	{
		s = SHIFT_3D*speed;
 80095f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009606:	ee17 0a90 	vmov	r0, s15
 800960a:	f7f6 ffad 	bl	8000568 <__aeabi_f2d>
 800960e:	4603      	mov	r3, r0
 8009610:	460c      	mov	r4, r1
 8009612:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009616:	a36e      	add	r3, pc, #440	; (adr r3, 80097d0 <scaraKeyInit+0x460>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009620:	f7f7 f924 	bl	800086c <__aeabi_ddiv>
 8009624:	4603      	mov	r3, r0
 8009626:	460c      	mov	r4, r1
 8009628:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800962c:	a36a      	add	r3, pc, #424	; (adr r3, 80097d8 <scaraKeyInit+0x468>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009636:	f7f7 f919 	bl	800086c <__aeabi_ddiv>
 800963a:	4603      	mov	r3, r0
 800963c:	460c      	mov	r4, r1
 800963e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009642:	a367      	add	r3, pc, #412	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800964c:	f7f7 f90e 	bl	800086c <__aeabi_ddiv>
 8009650:	4603      	mov	r3, r0
 8009652:	460c      	mov	r4, r1
 8009654:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009658:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800965c:	a360      	add	r3, pc, #384	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009666:	f7f7 f901 	bl	800086c <__aeabi_ddiv>
 800966a:	4603      	mov	r3, r0
 800966c:	460c      	mov	r4, r1
 800966e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009672:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009676:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800967a:	2200      	movs	r2, #0
 800967c:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800967e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009682:	2200      	movs	r2, #0
 8009684:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009686:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	f04f 0400 	mov.w	r4, #0
 8009692:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= s;
 8009696:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800969a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800969e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80096a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	f04f 0400 	mov.w	r4, #0
 80096ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 80096b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096b6:	f04f 0300 	mov.w	r3, #0
 80096ba:	f04f 0400 	mov.w	r4, #0
 80096be:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80096c2:	4b49      	ldr	r3, [pc, #292]	; (80097e8 <scaraKeyInit+0x478>)
 80096c4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80096c8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80096cc:	4b47      	ldr	r3, [pc, #284]	; (80097ec <scaraKeyInit+0x47c>)
 80096ce:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80096d2:	f000 be4f 	b.w	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_DEC:
	{
		s = SHIFT_3D*speed;
 80096d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80096e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096ec:	ee17 0a90 	vmov	r0, s15
 80096f0:	f7f6 ff3a 	bl	8000568 <__aeabi_f2d>
 80096f4:	4603      	mov	r3, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80096fc:	a334      	add	r3, pc, #208	; (adr r3, 80097d0 <scaraKeyInit+0x460>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009706:	f7f7 f8b1 	bl	800086c <__aeabi_ddiv>
 800970a:	4603      	mov	r3, r0
 800970c:	460c      	mov	r4, r1
 800970e:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009712:	a331      	add	r3, pc, #196	; (adr r3, 80097d8 <scaraKeyInit+0x468>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800971c:	f7f7 f8a6 	bl	800086c <__aeabi_ddiv>
 8009720:	4603      	mov	r3, r0
 8009722:	460c      	mov	r4, r1
 8009724:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009728:	a32d      	add	r3, pc, #180	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009732:	f7f7 f89b 	bl	800086c <__aeabi_ddiv>
 8009736:	4603      	mov	r3, r0
 8009738:	460c      	mov	r4, r1
 800973a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800973e:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009742:	a327      	add	r3, pc, #156	; (adr r3, 80097e0 <scaraKeyInit+0x470>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800974c:	f7f7 f88e 	bl	800086c <__aeabi_ddiv>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009758:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800975c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009760:	2200      	movs	r2, #0
 8009762:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009768:	2200      	movs	r2, #0
 800976a:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800976c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	f04f 0400 	mov.w	r4, #0
 8009778:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -s;
 800977c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009780:	62bb      	str	r3, [r7, #40]	; 0x28
 8009782:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009786:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800978c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009790:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8009794:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	f04f 0400 	mov.w	r4, #0
 80097a4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80097a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80097ac:	f04f 0300 	mov.w	r3, #0
 80097b0:	f04f 0400 	mov.w	r4, #0
 80097b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <scaraKeyInit+0x478>)
 80097ba:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80097be:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <scaraKeyInit+0x47c>)
 80097c4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80097c8:	f000 bdd4 	b.w	800a374 <scaraKeyInit+0x1004>
 80097cc:	f3af 8000 	nop.w
 80097d0:	60000000 	.word	0x60000000
 80097d4:	3fedf3b6 	.word	0x3fedf3b6
 80097d8:	40000000 	.word	0x40000000
 80097dc:	3fd0e560 	.word	0x3fd0e560
 80097e0:	00000000 	.word	0x00000000
 80097e4:	405c2000 	.word	0x405c2000
 80097e8:	20005e90 	.word	0x20005e90
 80097ec:	200054e8 	.word	0x200054e8
	case SCARA_KEY_Z_INC:
	{
		s = SHIFT_3D*speed;
 80097f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009806:	ee17 0a90 	vmov	r0, s15
 800980a:	f7f6 fead 	bl	8000568 <__aeabi_f2d>
 800980e:	4603      	mov	r3, r0
 8009810:	460c      	mov	r4, r1
 8009812:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009816:	a3b0      	add	r3, pc, #704	; (adr r3, 8009ad8 <scaraKeyInit+0x768>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009820:	f7f7 f824 	bl	800086c <__aeabi_ddiv>
 8009824:	4603      	mov	r3, r0
 8009826:	460c      	mov	r4, r1
 8009828:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800982c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009ae0 <scaraKeyInit+0x770>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009836:	f7f7 f819 	bl	800086c <__aeabi_ddiv>
 800983a:	4603      	mov	r3, r0
 800983c:	460c      	mov	r4, r1
 800983e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009842:	a3a9      	add	r3, pc, #676	; (adr r3, 8009ae8 <scaraKeyInit+0x778>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800984c:	f7f7 f80e 	bl	800086c <__aeabi_ddiv>
 8009850:	4603      	mov	r3, r0
 8009852:	460c      	mov	r4, r1
 8009854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009858:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800985c:	a3a2      	add	r3, pc, #648	; (adr r3, 8009ae8 <scaraKeyInit+0x778>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009866:	f7f7 f801 	bl	800086c <__aeabi_ddiv>
 800986a:	4603      	mov	r3, r0
 800986c:	460c      	mov	r4, r1
 800986e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009872:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800987a:	2200      	movs	r2, #0
 800987c:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800987e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009882:	2200      	movs	r2, #0
 8009884:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009886:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009896:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800989a:	f04f 0300 	mov.w	r3, #0
 800989e:	f04f 0400 	mov.w	r4, #0
 80098a2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= s;
 80098a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098aa:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80098ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80098b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	f04f 0400 	mov.w	r4, #0
 80098be:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80098c2:	4b8f      	ldr	r3, [pc, #572]	; (8009b00 <scaraKeyInit+0x790>)
 80098c4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80098c8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80098cc:	4b8d      	ldr	r3, [pc, #564]	; (8009b04 <scaraKeyInit+0x794>)
 80098ce:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80098d2:	f000 bd4f 	b.w	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_Z_DEC:
	{
		s = SHIFT_3D*speed;
 80098d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80098e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ec:	ee17 0a90 	vmov	r0, s15
 80098f0:	f7f6 fe3a 	bl	8000568 <__aeabi_f2d>
 80098f4:	4603      	mov	r3, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80098fc:	a376      	add	r3, pc, #472	; (adr r3, 8009ad8 <scaraKeyInit+0x768>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009906:	f7f6 ffb1 	bl	800086c <__aeabi_ddiv>
 800990a:	4603      	mov	r3, r0
 800990c:	460c      	mov	r4, r1
 800990e:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009912:	a373      	add	r3, pc, #460	; (adr r3, 8009ae0 <scaraKeyInit+0x770>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800991c:	f7f6 ffa6 	bl	800086c <__aeabi_ddiv>
 8009920:	4603      	mov	r3, r0
 8009922:	460c      	mov	r4, r1
 8009924:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009928:	a36f      	add	r3, pc, #444	; (adr r3, 8009ae8 <scaraKeyInit+0x778>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009932:	f7f6 ff9b 	bl	800086c <__aeabi_ddiv>
 8009936:	4603      	mov	r3, r0
 8009938:	460c      	mov	r4, r1
 800993a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800993e:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009942:	a369      	add	r3, pc, #420	; (adr r3, 8009ae8 <scaraKeyInit+0x778>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800994c:	f7f6 ff8e 	bl	800086c <__aeabi_ddiv>
 8009950:	4603      	mov	r3, r0
 8009952:	460c      	mov	r4, r1
 8009954:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009958:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800995c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009960:	2200      	movs	r2, #0
 8009962:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009968:	2200      	movs	r2, #0
 800996a:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800996c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	f04f 0400 	mov.w	r4, #0
 8009978:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800997c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	f04f 0400 	mov.w	r4, #0
 8009988:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -s;
 800998c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009990:	623b      	str	r3, [r7, #32]
 8009992:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009996:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
 800999c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099a0:	ed97 7b08 	vldr	d7, [r7, #32]
 80099a4:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80099a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	f04f 0400 	mov.w	r4, #0
 80099b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80099b8:	4b51      	ldr	r3, [pc, #324]	; (8009b00 <scaraKeyInit+0x790>)
 80099ba:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80099be:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80099c2:	4b50      	ldr	r3, [pc, #320]	; (8009b04 <scaraKeyInit+0x794>)
 80099c4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80099c8:	f000 bcd4 	b.w	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_ROLL_INC:
	{
		s = SHIFT_ROLL*speed;
 80099cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099da:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009b10 <scaraKeyInit+0x7a0>
 80099de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099e2:	ee17 0a90 	vmov	r0, s15
 80099e6:	f7f6 fdbf 	bl	8000568 <__aeabi_f2d>
 80099ea:	4603      	mov	r3, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80099f2:	a339      	add	r3, pc, #228	; (adr r3, 8009ad8 <scaraKeyInit+0x768>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80099fc:	f7f6 ff36 	bl	800086c <__aeabi_ddiv>
 8009a00:	4603      	mov	r3, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009a08:	a335      	add	r3, pc, #212	; (adr r3, 8009ae0 <scaraKeyInit+0x770>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009a12:	f7f6 ff2b 	bl	800086c <__aeabi_ddiv>
 8009a16:	4603      	mov	r3, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009a1e:	a334      	add	r3, pc, #208	; (adr r3, 8009af0 <scaraKeyInit+0x780>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009a28:	f7f6 ff20 	bl	800086c <__aeabi_ddiv>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a34:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009a38:	a32d      	add	r3, pc, #180	; (adr r3, 8009af0 <scaraKeyInit+0x780>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009a42:	f7f6 ff13 	bl	800086c <__aeabi_ddiv>
 8009a46:	4603      	mov	r3, r0
 8009a48:	460c      	mov	r4, r1
 8009a4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a4e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009a52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a56:	2200      	movs	r2, #0
 8009a58:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009a5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a5e:	2200      	movs	r2, #0
 8009a60:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009a62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	f04f 0400 	mov.w	r4, #0
 8009a6e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009a72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	f04f 0400 	mov.w	r4, #0
 8009a7e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009a82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	f04f 0400 	mov.w	r4, #0
 8009a8e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= s*180/PI;
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	4b1c      	ldr	r3, [pc, #112]	; (8009b08 <scaraKeyInit+0x798>)
 8009a98:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009a9c:	f7f6 fdbc 	bl	8000618 <__aeabi_dmul>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	a313      	add	r3, pc, #76	; (adr r3, 8009af8 <scaraKeyInit+0x788>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f7f6 fedd 	bl	800086c <__aeabi_ddiv>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009aba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009abe:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <scaraKeyInit+0x790>)
 8009ac0:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009ac4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009ac8:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <scaraKeyInit+0x79c>)
 8009aca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009ace:	f000 bc51 	b.w	800a374 <scaraKeyInit+0x1004>
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
 8009ad8:	60000000 	.word	0x60000000
 8009adc:	3fedf3b6 	.word	0x3fedf3b6
 8009ae0:	40000000 	.word	0x40000000
 8009ae4:	3fd0e560 	.word	0x3fd0e560
 8009ae8:	00000000 	.word	0x00000000
 8009aec:	405c2000 	.word	0x405c2000
 8009af0:	14000000 	.word	0x14000000
 8009af4:	4000f6f0 	.word	0x4000f6f0
 8009af8:	60000000 	.word	0x60000000
 8009afc:	400921fb 	.word	0x400921fb
 8009b00:	20005e90 	.word	0x20005e90
 8009b04:	200054e8 	.word	0x200054e8
 8009b08:	40668000 	.word	0x40668000
 8009b0c:	20005640 	.word	0x20005640
 8009b10:	3d567750 	.word	0x3d567750
	case SCARA_KEY_ROLL_DEC:
	{
		s = SHIFT_ROLL*speed;
 8009b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b22:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009b10 <scaraKeyInit+0x7a0>
 8009b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b2a:	ee17 0a90 	vmov	r0, s15
 8009b2e:	f7f6 fd1b 	bl	8000568 <__aeabi_f2d>
 8009b32:	4603      	mov	r3, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009b3a:	a3af      	add	r3, pc, #700	; (adr r3, 8009df8 <scaraKeyInit+0xa88>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009b44:	f7f6 fe92 	bl	800086c <__aeabi_ddiv>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009b50:	a3ab      	add	r3, pc, #684	; (adr r3, 8009e00 <scaraKeyInit+0xa90>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b5a:	f7f6 fe87 	bl	800086c <__aeabi_ddiv>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009b66:	a3a8      	add	r3, pc, #672	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b70:	f7f6 fe7c 	bl	800086c <__aeabi_ddiv>
 8009b74:	4603      	mov	r3, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b7c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009b80:	a3a1      	add	r3, pc, #644	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009b8a:	f7f6 fe6f 	bl	800086c <__aeabi_ddiv>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	460c      	mov	r4, r1
 8009b92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b96:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009baa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	f04f 0400 	mov.w	r4, #0
 8009bb6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009bba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	f04f 0400 	mov.w	r4, #0
 8009bc6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009bca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	f04f 0400 	mov.w	r4, #0
 8009bd6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -s*180/PI;
 8009bda:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	61fb      	str	r3, [r7, #28]
 8009bea:	f04f 0200 	mov.w	r2, #0
 8009bee:	4b88      	ldr	r3, [pc, #544]	; (8009e10 <scaraKeyInit+0xaa0>)
 8009bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bf4:	f7f6 fd10 	bl	8000618 <__aeabi_dmul>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	4621      	mov	r1, r4
 8009c00:	a37b      	add	r3, pc, #492	; (adr r3, 8009df0 <scaraKeyInit+0xa80>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f7f6 fe31 	bl	800086c <__aeabi_ddiv>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c12:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009c16:	4b7f      	ldr	r3, [pc, #508]	; (8009e14 <scaraKeyInit+0xaa4>)
 8009c18:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009c1c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009c20:	4b7d      	ldr	r3, [pc, #500]	; (8009e18 <scaraKeyInit+0xaa8>)
 8009c22:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009c26:	e3a5      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_INC:
	{
		s = SHIFT_VAR0*speed;
 8009c28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c36:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009e20 <scaraKeyInit+0xab0>
 8009c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c3e:	ee17 0a90 	vmov	r0, s15
 8009c42:	f7f6 fc91 	bl	8000568 <__aeabi_f2d>
 8009c46:	4603      	mov	r3, r0
 8009c48:	460c      	mov	r4, r1
 8009c4a:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009c4e:	a36a      	add	r3, pc, #424	; (adr r3, 8009df8 <scaraKeyInit+0xa88>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009c58:	f7f6 fe08 	bl	800086c <__aeabi_ddiv>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009c64:	a366      	add	r3, pc, #408	; (adr r3, 8009e00 <scaraKeyInit+0xa90>)
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c6e:	f7f6 fdfd 	bl	800086c <__aeabi_ddiv>
 8009c72:	4603      	mov	r3, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009c7a:	a363      	add	r3, pc, #396	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c84:	f7f6 fdf2 	bl	800086c <__aeabi_ddiv>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c90:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009c94:	a35c      	add	r3, pc, #368	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009c9e:	f7f6 fde5 	bl	800086c <__aeabi_ddiv>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009caa:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cba:	2200      	movs	r2, #0
 8009cbc:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	4b51      	ldr	r3, [pc, #324]	; (8009e10 <scaraKeyInit+0xaa0>)
 8009ccc:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009cd0:	f7f6 fca2 	bl	8000618 <__aeabi_dmul>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4618      	mov	r0, r3
 8009cda:	4621      	mov	r1, r4
 8009cdc:	a344      	add	r3, pc, #272	; (adr r3, 8009df0 <scaraKeyInit+0xa80>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fdc3 	bl	800086c <__aeabi_ddiv>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cee:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009cf2:	4b48      	ldr	r3, [pc, #288]	; (8009e14 <scaraKeyInit+0xaa4>)
 8009cf4:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009cf8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009cfc:	4b47      	ldr	r3, [pc, #284]	; (8009e1c <scaraKeyInit+0xaac>)
 8009cfe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009d02:	e337      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_DEC:
	{
		s = SHIFT_VAR0*speed;
 8009d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d12:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009e20 <scaraKeyInit+0xab0>
 8009d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d1a:	ee17 0a90 	vmov	r0, s15
 8009d1e:	f7f6 fc23 	bl	8000568 <__aeabi_f2d>
 8009d22:	4603      	mov	r3, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009d2a:	a333      	add	r3, pc, #204	; (adr r3, 8009df8 <scaraKeyInit+0xa88>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d34:	f7f6 fd9a 	bl	800086c <__aeabi_ddiv>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009d40:	a32f      	add	r3, pc, #188	; (adr r3, 8009e00 <scaraKeyInit+0xa90>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d4a:	f7f6 fd8f 	bl	800086c <__aeabi_ddiv>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460c      	mov	r4, r1
 8009d52:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009d56:	a32c      	add	r3, pc, #176	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d60:	f7f6 fd84 	bl	800086c <__aeabi_ddiv>
 8009d64:	4603      	mov	r3, r0
 8009d66:	460c      	mov	r4, r1
 8009d68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d6c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009d70:	a325      	add	r3, pc, #148	; (adr r3, 8009e08 <scaraKeyInit+0xa98>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009d7a:	f7f6 fd77 	bl	800086c <__aeabi_ddiv>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d86:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d8e:	2201      	movs	r2, #1
 8009d90:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d96:	2200      	movs	r2, #0
 8009d98:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d9e:	2200      	movs	r2, #0
 8009da0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009da2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009dac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <scaraKeyInit+0xaa0>)
 8009db8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009dbc:	f7f6 fc2c 	bl	8000618 <__aeabi_dmul>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	a309      	add	r3, pc, #36	; (adr r3, 8009df0 <scaraKeyInit+0xa80>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fd4d 	bl	800086c <__aeabi_ddiv>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009dda:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <scaraKeyInit+0xaa4>)
 8009de0:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009de4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <scaraKeyInit+0xaac>)
 8009dea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009dee:	e2c1      	b.n	800a374 <scaraKeyInit+0x1004>
 8009df0:	60000000 	.word	0x60000000
 8009df4:	400921fb 	.word	0x400921fb
 8009df8:	60000000 	.word	0x60000000
 8009dfc:	3fedf3b6 	.word	0x3fedf3b6
 8009e00:	40000000 	.word	0x40000000
 8009e04:	3fd0e560 	.word	0x3fd0e560
 8009e08:	14000000 	.word	0x14000000
 8009e0c:	4000f6f0 	.word	0x4000f6f0
 8009e10:	40668000 	.word	0x40668000
 8009e14:	20005e90 	.word	0x20005e90
 8009e18:	20005640 	.word	0x20005640
 8009e1c:	200057a0 	.word	0x200057a0
 8009e20:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR1_INC:
	{
		s = SHIFT_VAR1*speed;
 8009e24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e32:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009e20 <scaraKeyInit+0xab0>
 8009e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e3a:	ee17 0a90 	vmov	r0, s15
 8009e3e:	f7f6 fb93 	bl	8000568 <__aeabi_f2d>
 8009e42:	4603      	mov	r3, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009e4a:	a3cb      	add	r3, pc, #812	; (adr r3, 800a178 <scaraKeyInit+0xe08>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009e54:	f7f6 fd0a 	bl	800086c <__aeabi_ddiv>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009e60:	a3c7      	add	r3, pc, #796	; (adr r3, 800a180 <scaraKeyInit+0xe10>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e6a:	f7f6 fcff 	bl	800086c <__aeabi_ddiv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	460c      	mov	r4, r1
 8009e72:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009e76:	a3c4      	add	r3, pc, #784	; (adr r3, 800a188 <scaraKeyInit+0xe18>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e80:	f7f6 fcf4 	bl	800086c <__aeabi_ddiv>
 8009e84:	4603      	mov	r3, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e8c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009e90:	a3bd      	add	r3, pc, #756	; (adr r3, 800a188 <scaraKeyInit+0xe18>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009e9a:	f7f6 fce7 	bl	800086c <__aeabi_ddiv>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ea6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009eaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009eae:	2201      	movs	r2, #1
 8009eb0:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	4bb4      	ldr	r3, [pc, #720]	; (800a198 <scaraKeyInit+0xe28>)
 8009ec8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ecc:	f7f6 fba4 	bl	8000618 <__aeabi_dmul>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	a3a5      	add	r3, pc, #660	; (adr r3, 800a170 <scaraKeyInit+0xe00>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 fcc5 	bl	800086c <__aeabi_ddiv>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009eea:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009eee:	4bab      	ldr	r3, [pc, #684]	; (800a19c <scaraKeyInit+0xe2c>)
 8009ef0:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009ef4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009ef8:	4ba9      	ldr	r3, [pc, #676]	; (800a1a0 <scaraKeyInit+0xe30>)
 8009efa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009efe:	e239      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR1_DEC:
	{
		s = SHIFT_VAR1*speed;
 8009f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f0e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a1a8 <scaraKeyInit+0xe38>
 8009f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f16:	ee17 0a90 	vmov	r0, s15
 8009f1a:	f7f6 fb25 	bl	8000568 <__aeabi_f2d>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	460c      	mov	r4, r1
 8009f22:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009f26:	a394      	add	r3, pc, #592	; (adr r3, 800a178 <scaraKeyInit+0xe08>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009f30:	f7f6 fc9c 	bl	800086c <__aeabi_ddiv>
 8009f34:	4603      	mov	r3, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009f3c:	a390      	add	r3, pc, #576	; (adr r3, 800a180 <scaraKeyInit+0xe10>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f46:	f7f6 fc91 	bl	800086c <__aeabi_ddiv>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009f52:	a38d      	add	r3, pc, #564	; (adr r3, 800a188 <scaraKeyInit+0xe18>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f5c:	f7f6 fc86 	bl	800086c <__aeabi_ddiv>
 8009f60:	4603      	mov	r3, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f68:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009f6c:	a386      	add	r3, pc, #536	; (adr r3, 800a188 <scaraKeyInit+0xe18>)
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009f76:	f7f6 fc79 	bl	800086c <__aeabi_ddiv>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f82:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f92:	2200      	movs	r2, #0
 8009f94:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009f9e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009fa2:	60bb      	str	r3, [r7, #8]
 8009fa4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009fa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	f04f 0200 	mov.w	r2, #0
 8009fb2:	4b79      	ldr	r3, [pc, #484]	; (800a198 <scaraKeyInit+0xe28>)
 8009fb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fb8:	f7f6 fb2e 	bl	8000618 <__aeabi_dmul>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	a36a      	add	r3, pc, #424	; (adr r3, 800a170 <scaraKeyInit+0xe00>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	f7f6 fc4f 	bl	800086c <__aeabi_ddiv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009fd6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009fda:	4b70      	ldr	r3, [pc, #448]	; (800a19c <scaraKeyInit+0xe2c>)
 8009fdc:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009fe0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009fe4:	4b6e      	ldr	r3, [pc, #440]	; (800a1a0 <scaraKeyInit+0xe30>)
 8009fe6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009fea:	e1c3      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_INC:
	{
		s = SHIFT_VAR2*speed;
 8009fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ffa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a002:	ee17 0a90 	vmov	r0, s15
 800a006:	f7f6 faaf 	bl	8000568 <__aeabi_f2d>
 800a00a:	4603      	mov	r3, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a012:	a359      	add	r3, pc, #356	; (adr r3, 800a178 <scaraKeyInit+0xe08>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a01c:	f7f6 fc26 	bl	800086c <__aeabi_ddiv>
 800a020:	4603      	mov	r3, r0
 800a022:	460c      	mov	r4, r1
 800a024:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a028:	a355      	add	r3, pc, #340	; (adr r3, 800a180 <scaraKeyInit+0xe10>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a032:	f7f6 fc1b 	bl	800086c <__aeabi_ddiv>
 800a036:	4603      	mov	r3, r0
 800a038:	460c      	mov	r4, r1
 800a03a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a03e:	a354      	add	r3, pc, #336	; (adr r3, 800a190 <scaraKeyInit+0xe20>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a048:	f7f6 fc10 	bl	800086c <__aeabi_ddiv>
 800a04c:	4603      	mov	r3, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a054:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a058:	a34d      	add	r3, pc, #308	; (adr r3, 800a190 <scaraKeyInit+0xe20>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a062:	f7f6 fc03 	bl	800086c <__aeabi_ddiv>
 800a066:	4603      	mov	r3, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a06e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a076:	2201      	movs	r2, #1
 800a078:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a07a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a07e:	2200      	movs	r2, #0
 800a080:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a086:	2202      	movs	r2, #2
 800a088:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s;
 800a08a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a08e:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800a092:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 800a096:	4b41      	ldr	r3, [pc, #260]	; (800a19c <scaraKeyInit+0xe2c>)
 800a098:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a09c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a0a0:	4b40      	ldr	r3, [pc, #256]	; (800a1a4 <scaraKeyInit+0xe34>)
 800a0a2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a0a6:	e165      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_DEC:
	{
		s = SHIFT_VAR2*speed;
 800a0a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0b6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a0ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	f7f6 fa51 	bl	8000568 <__aeabi_f2d>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a0ce:	a32a      	add	r3, pc, #168	; (adr r3, 800a178 <scaraKeyInit+0xe08>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a0d8:	f7f6 fbc8 	bl	800086c <__aeabi_ddiv>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a0e4:	a326      	add	r3, pc, #152	; (adr r3, 800a180 <scaraKeyInit+0xe10>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0ee:	f7f6 fbbd 	bl	800086c <__aeabi_ddiv>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a0fa:	a325      	add	r3, pc, #148	; (adr r3, 800a190 <scaraKeyInit+0xe20>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a104:	f7f6 fbb2 	bl	800086c <__aeabi_ddiv>
 800a108:	4603      	mov	r3, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a110:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a114:	a31e      	add	r3, pc, #120	; (adr r3, 800a190 <scaraKeyInit+0xe20>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a11e:	f7f6 fba5 	bl	800086c <__aeabi_ddiv>
 800a122:	4603      	mov	r3, r0
 800a124:	460c      	mov	r4, r1
 800a126:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a12a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a12e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a132:	2201      	movs	r2, #1
 800a134:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a13a:	2200      	movs	r2, #0
 800a13c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a13e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a142:	2202      	movs	r2, #2
 800a144:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s;
 800a146:	f8d7 5208 	ldr.w	r5, [r7, #520]	; 0x208
 800a14a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a14e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800a152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a156:	e9c3 5606 	strd	r5, r6, [r3, #24]
		v_current = positionCurrent.v_d3;
 800a15a:	4b10      	ldr	r3, [pc, #64]	; (800a19c <scaraKeyInit+0xe2c>)
 800a15c:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a160:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a164:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <scaraKeyInit+0xe34>)
 800a166:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a16a:	e103      	b.n	800a374 <scaraKeyInit+0x1004>
 800a16c:	f3af 8000 	nop.w
 800a170:	60000000 	.word	0x60000000
 800a174:	400921fb 	.word	0x400921fb
 800a178:	60000000 	.word	0x60000000
 800a17c:	3fedf3b6 	.word	0x3fedf3b6
 800a180:	40000000 	.word	0x40000000
 800a184:	3fd0e560 	.word	0x3fd0e560
 800a188:	14000000 	.word	0x14000000
 800a18c:	4000f6f0 	.word	0x4000f6f0
 800a190:	00000000 	.word	0x00000000
 800a194:	405c2000 	.word	0x405c2000
 800a198:	40668000 	.word	0x40668000
 800a19c:	20005e90 	.word	0x20005e90
 800a1a0:	200058f8 	.word	0x200058f8
 800a1a4:	20005a50 	.word	0x20005a50
 800a1a8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR3_INC:
	{
		s = SHIFT_VAR3*speed;
 800a1ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ba:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a1a8 <scaraKeyInit+0xe38>
 800a1be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1c2:	ee17 0a90 	vmov	r0, s15
 800a1c6:	f7f6 f9cf 	bl	8000568 <__aeabi_f2d>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a1d2:	a39b      	add	r3, pc, #620	; (adr r3, 800a440 <scaraKeyInit+0x10d0>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a1dc:	f7f6 fb46 	bl	800086c <__aeabi_ddiv>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a1e8:	a397      	add	r3, pc, #604	; (adr r3, 800a448 <scaraKeyInit+0x10d8>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1f2:	f7f6 fb3b 	bl	800086c <__aeabi_ddiv>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a1fe:	a394      	add	r3, pc, #592	; (adr r3, 800a450 <scaraKeyInit+0x10e0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a208:	f7f6 fb30 	bl	800086c <__aeabi_ddiv>
 800a20c:	4603      	mov	r3, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a214:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a218:	a38d      	add	r3, pc, #564	; (adr r3, 800a450 <scaraKeyInit+0x10e0>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a222:	f7f6 fb23 	bl	800086c <__aeabi_ddiv>
 800a226:	4603      	mov	r3, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a22e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a236:	2201      	movs	r2, #1
 800a238:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a23a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a23e:	2200      	movs	r2, #0
 800a240:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a246:	2203      	movs	r2, #3
 800a248:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	4b82      	ldr	r3, [pc, #520]	; (800a458 <scaraKeyInit+0x10e8>)
 800a250:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a254:	f7f6 f9e0 	bl	8000618 <__aeabi_dmul>
 800a258:	4603      	mov	r3, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4618      	mov	r0, r3
 800a25e:	4621      	mov	r1, r4
 800a260:	a375      	add	r3, pc, #468	; (adr r3, 800a438 <scaraKeyInit+0x10c8>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 fb01 	bl	800086c <__aeabi_ddiv>
 800a26a:	4603      	mov	r3, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a272:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a276:	4b79      	ldr	r3, [pc, #484]	; (800a45c <scaraKeyInit+0x10ec>)
 800a278:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a27c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a280:	4b77      	ldr	r3, [pc, #476]	; (800a460 <scaraKeyInit+0x10f0>)
 800a282:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a286:	e075      	b.n	800a374 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR3_DEC:
	{
		s = SHIFT_VAR3*speed;
 800a288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	ee07 3a90 	vmov	s15, r3
 800a292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a296:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a464 <scaraKeyInit+0x10f4>
 800a29a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a29e:	ee17 0a90 	vmov	r0, s15
 800a2a2:	f7f6 f961 	bl	8000568 <__aeabi_f2d>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a2ae:	a364      	add	r3, pc, #400	; (adr r3, 800a440 <scaraKeyInit+0x10d0>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a2b8:	f7f6 fad8 	bl	800086c <__aeabi_ddiv>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a2c4:	a360      	add	r3, pc, #384	; (adr r3, 800a448 <scaraKeyInit+0x10d8>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a2ce:	f7f6 facd 	bl	800086c <__aeabi_ddiv>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a2da:	a35d      	add	r3, pc, #372	; (adr r3, 800a450 <scaraKeyInit+0x10e0>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a2e4:	f7f6 fac2 	bl	800086c <__aeabi_ddiv>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2f0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a2f4:	a356      	add	r3, pc, #344	; (adr r3, 800a450 <scaraKeyInit+0x10e0>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a2fe:	f7f6 fab5 	bl	800086c <__aeabi_ddiv>
 800a302:	4603      	mov	r3, r0
 800a304:	460c      	mov	r4, r1
 800a306:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a30a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a30e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a312:	2201      	movs	r2, #1
 800a314:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a31a:	2200      	movs	r2, #0
 800a31c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a31e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a322:	2203      	movs	r2, #3
 800a324:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a326:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a330:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	f04f 0200 	mov.w	r2, #0
 800a33a:	4b47      	ldr	r3, [pc, #284]	; (800a458 <scaraKeyInit+0x10e8>)
 800a33c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a340:	f7f6 f96a 	bl	8000618 <__aeabi_dmul>
 800a344:	4603      	mov	r3, r0
 800a346:	460c      	mov	r4, r1
 800a348:	4618      	mov	r0, r3
 800a34a:	4621      	mov	r1, r4
 800a34c:	a33a      	add	r3, pc, #232	; (adr r3, 800a438 <scaraKeyInit+0x10c8>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f6 fa8b 	bl	800086c <__aeabi_ddiv>
 800a356:	4603      	mov	r3, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a35e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a362:	4b3e      	ldr	r3, [pc, #248]	; (800a45c <scaraKeyInit+0x10ec>)
 800a364:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a368:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a36c:	4b3c      	ldr	r3, [pc, #240]	; (800a460 <scaraKeyInit+0x10f0>)
 800a36e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a372:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 800a374:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800a378:	4668      	mov	r0, sp
 800a37a:	f104 0310 	add.w	r3, r4, #16
 800a37e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a382:	4619      	mov	r1, r3
 800a384:	f00b fa84 	bl	8015890 <memcpy>
 800a388:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a38c:	f7fa fae4 	bl	8004958 <scaraInitDuty>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	if (status == SCARA_STATUS_OK) {
 800a396:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d141      	bne.n	800a422 <scaraKeyInit+0x10b2>
		status = scaraTestDuty();
 800a39e:	f7fe fd9f 	bl	8008ee0 <scaraTestDuty>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		if (status != SCARA_STATUS_OK) {
 800a3a8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <scaraKeyInit+0x1046>
			return status;
 800a3b0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a3b4:	e037      	b.n	800a426 <scaraKeyInit+0x10b6>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 800a3b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a3ba:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800a3c6:	f7f5 ff6f 	bl	80002a8 <__aeabi_dsub>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a3d6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4623      	mov	r3, r4
 800a3de:	f7f6 fa45 	bl	800086c <__aeabi_ddiv>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a3ea:	6812      	ldr	r2, [r2, #0]
 800a3ec:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 800a3f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	ed93 8b00 	vldr	d8, [r3]
 800a3fa:	4c18      	ldr	r4, [pc, #96]	; (800a45c <scaraKeyInit+0x10ec>)
 800a3fc:	4668      	mov	r0, sp
 800a3fe:	f104 0308 	add.w	r3, r4, #8
 800a402:	22b0      	movs	r2, #176	; 0xb0
 800a404:	4619      	mov	r1, r3
 800a406:	f00b fa43 	bl	8015890 <memcpy>
 800a40a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a40e:	4816      	ldr	r0, [pc, #88]	; (800a468 <scaraKeyInit+0x10f8>)
 800a410:	eeb0 0a48 	vmov.f32	s0, s16
 800a414:	eef0 0a68 	vmov.f32	s1, s17
 800a418:	f7fc ff44 	bl	80072a4 <scaraFlowDuty>
		return status;
 800a41c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a420:	e001      	b.n	800a426 <scaraKeyInit+0x10b6>
	} else {
		return status;
 800a422:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
	}
}
 800a426:	4618      	mov	r0, r3
 800a428:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800a42c:	46bd      	mov	sp, r7
 800a42e:	ecbd 8b02 	vpop	{d8}
 800a432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a434:	f3af 8000 	nop.w
 800a438:	60000000 	.word	0x60000000
 800a43c:	400921fb 	.word	0x400921fb
 800a440:	60000000 	.word	0x60000000
 800a444:	3fedf3b6 	.word	0x3fedf3b6
 800a448:	40000000 	.word	0x40000000
 800a44c:	3fd0e560 	.word	0x3fd0e560
 800a450:	6b259425 	.word	0x6b259425
 800a454:	40069b91 	.word	0x40069b91
 800a458:	40668000 	.word	0x40668000
 800a45c:	20005e90 	.word	0x20005e90
 800a460:	20005ba8 	.word	0x20005ba8
 800a464:	3d567750 	.word	0x3d567750
 800a468:	20005dd8 	.word	0x20005dd8

0800a46c <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 800a46c:	b082      	sub	sp, #8
 800a46e:	b5b0      	push	{r4, r5, r7, lr}
 800a470:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a474:	af2c      	add	r7, sp, #176	; 0xb0
 800a476:	f107 0108 	add.w	r1, r7, #8
 800a47a:	ed81 0b00 	vstr	d0, [r1]
 800a47e:	1d39      	adds	r1, r7, #4
 800a480:	6008      	str	r0, [r1, #0]
 800a482:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800a486:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800a48a:	f107 0210 	add.w	r2, r7, #16
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a496:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800a49a:	4b74      	ldr	r3, [pc, #464]	; (800a66c <scaraKeyFlow+0x200>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f040 80ee 	bne.w	800a680 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800a4a4:	4b71      	ldr	r3, [pc, #452]	; (800a66c <scaraKeyFlow+0x200>)
 800a4a6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d12c      	bne.n	800a508 <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	ed93 0b00 	vldr	d0, [r3]
 800a4b6:	486e      	ldr	r0, [pc, #440]	; (800a670 <scaraKeyFlow+0x204>)
 800a4b8:	f7fd fb62 	bl	8007b80 <scaraFlowLSPB>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	ed93 0b00 	vldr	d0, [r3]
 800a4ca:	486a      	ldr	r0, [pc, #424]	; (800a674 <scaraKeyFlow+0x208>)
 800a4cc:	f7fd fb58 	bl	8007b80 <scaraFlowLSPB>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800a4d6:	4b65      	ldr	r3, [pc, #404]	; (800a66c <scaraKeyFlow+0x200>)
 800a4d8:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800a4dc:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800a4e0:	4b62      	ldr	r3, [pc, #392]	; (800a66c <scaraKeyFlow+0x200>)
 800a4e2:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800a4e6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800a4ea:	4b60      	ldr	r3, [pc, #384]	; (800a66c <scaraKeyFlow+0x200>)
 800a4ec:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800a4f0:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800a4f4:	4b5d      	ldr	r3, [pc, #372]	; (800a66c <scaraKeyFlow+0x200>)
 800a4f6:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800a4fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800a4fe:	4b5b      	ldr	r3, [pc, #364]	; (800a66c <scaraKeyFlow+0x200>)
 800a500:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800a504:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 800a508:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <scaraKeyFlow+0xaa>
			return status1;
 800a510:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a514:	e26b      	b.n	800a9ee <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a516:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <scaraKeyFlow+0xb8>
			return status2;
 800a51e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a522:	e264      	b.n	800a9ee <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 800a524:	4b54      	ldr	r3, [pc, #336]	; (800a678 <scaraKeyFlow+0x20c>)
 800a526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a52a:	461a      	mov	r2, r3
 800a52c:	4623      	mov	r3, r4
 800a52e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a532:	f7f5 feb9 	bl	80002a8 <__aeabi_dsub>
 800a536:	4603      	mov	r3, r0
 800a538:	460c      	mov	r4, r1
 800a53a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 800a53e:	4b4e      	ldr	r3, [pc, #312]	; (800a678 <scaraKeyFlow+0x20c>)
 800a540:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a544:	461a      	mov	r2, r3
 800a546:	4623      	mov	r3, r4
 800a548:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a54c:	f7f5 feac 	bl	80002a8 <__aeabi_dsub>
 800a550:	4603      	mov	r3, r0
 800a552:	460c      	mov	r4, r1
 800a554:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800a558:	4b44      	ldr	r3, [pc, #272]	; (800a66c <scaraKeyFlow+0x200>)
 800a55a:	7a1b      	ldrb	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d116      	bne.n	800a58e <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 800a560:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800a564:	4845      	ldr	r0, [pc, #276]	; (800a67c <scaraKeyFlow+0x210>)
 800a566:	f7fd f9fb 	bl	8007960 <scaraFlowLine>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 800a570:	4b3e      	ldr	r3, [pc, #248]	; (800a66c <scaraKeyFlow+0x200>)
 800a572:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800a576:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 800a57a:	4b3c      	ldr	r3, [pc, #240]	; (800a66c <scaraKeyFlow+0x200>)
 800a57c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a580:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 800a584:	4b39      	ldr	r3, [pc, #228]	; (800a66c <scaraKeyFlow+0x200>)
 800a586:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800a58a:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 800a58e:	f107 0210 	add.w	r2, r7, #16
 800a592:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800a596:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 800a59a:	f107 0210 	add.w	r2, r7, #16
 800a59e:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800a5a2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800a5a6:	f107 0210 	add.w	r2, r7, #16
 800a5aa:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800a5ae:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 800a5b2:	4b2e      	ldr	r3, [pc, #184]	; (800a66c <scaraKeyFlow+0x200>)
 800a5b4:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800a5b8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f5 ffc1 	bl	8000544 <__aeabi_i2d>
 800a5c2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a5c6:	f7f6 f827 	bl	8000618 <__aeabi_dmul>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f5 fe6b 	bl	80002ac <__adddf3>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	460c      	mov	r4, r1
 800a5da:	f107 0210 	add.w	r2, r7, #16
 800a5de:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800a5e2:	f107 0210 	add.w	r2, r7, #16
 800a5e6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800a5ea:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800a5ee:	f107 0210 	add.w	r2, r7, #16
 800a5f2:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800a5f6:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800a5fa:	f107 0210 	add.w	r2, r7, #16
 800a5fe:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800a602:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a606:	f107 0210 	add.w	r2, r7, #16
 800a60a:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800a60e:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <scaraKeyFlow+0x200>)
 800a614:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a61c:	f107 0210 	add.w	r2, r7, #16
 800a620:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a624:	f107 0210 	add.w	r2, r7, #16
 800a628:	f107 0308 	add.w	r3, r7, #8
 800a62c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a630:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a634:	f107 0410 	add.w	r4, r7, #16
 800a638:	4668      	mov	r0, sp
 800a63a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a63e:	22b0      	movs	r2, #176	; 0xb0
 800a640:	4619      	mov	r1, r3
 800a642:	f00b f925 	bl	8015890 <memcpy>
 800a646:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a64a:	cb0c      	ldmia	r3, {r2, r3}
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7f8 ffc7 	bl	80035e0 <kinematicInverse>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a658:	2307      	movs	r3, #7
 800a65a:	e1c8      	b.n	800a9ee <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a65c:	f107 0110 	add.w	r1, r7, #16
 800a660:	1d3b      	adds	r3, r7, #4
 800a662:	22b8      	movs	r2, #184	; 0xb8
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	f00b f913 	bl	8015890 <memcpy>
 800a66a:	e1bf      	b.n	800a9ec <scaraKeyFlow+0x580>
 800a66c:	200053d0 	.word	0x200053d0
 800a670:	200054e8 	.word	0x200054e8
 800a674:	20005640 	.word	0x20005640
 800a678:	20005dd8 	.word	0x20005dd8
 800a67c:	200053e0 	.word	0x200053e0
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a680:	4b4c      	ldr	r3, [pc, #304]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2b01      	cmp	r3, #1
 800a686:	f040 81af 	bne.w	800a9e8 <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a68a:	4b4a      	ldr	r3, [pc, #296]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a68c:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a690:	2b00      	cmp	r3, #0
 800a692:	d173      	bne.n	800a77c <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	ed93 0b00 	vldr	d0, [r3]
 800a69c:	4846      	ldr	r0, [pc, #280]	; (800a7b8 <scaraKeyFlow+0x34c>)
 800a69e:	f7fd fa6f 	bl	8007b80 <scaraFlowLSPB>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	ed93 0b00 	vldr	d0, [r3]
 800a6b0:	4842      	ldr	r0, [pc, #264]	; (800a7bc <scaraKeyFlow+0x350>)
 800a6b2:	f7fd fa65 	bl	8007b80 <scaraFlowLSPB>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	ed93 0b00 	vldr	d0, [r3]
 800a6c4:	483e      	ldr	r0, [pc, #248]	; (800a7c0 <scaraKeyFlow+0x354>)
 800a6c6:	f7fd fa5b 	bl	8007b80 <scaraFlowLSPB>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	ed93 0b00 	vldr	d0, [r3]
 800a6d8:	483a      	ldr	r0, [pc, #232]	; (800a7c4 <scaraKeyFlow+0x358>)
 800a6da:	f7fd fa51 	bl	8007b80 <scaraFlowLSPB>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a6e4:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a6e6:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a6ea:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a6ee:	4b31      	ldr	r3, [pc, #196]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a6f0:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800a6f4:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a6f8:	4b2e      	ldr	r3, [pc, #184]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a6fa:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800a6fe:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a702:	4b2c      	ldr	r3, [pc, #176]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a704:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800a708:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a70c:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a70e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a712:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a716:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a71a:	4b26      	ldr	r3, [pc, #152]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a71c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a720:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a724:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a728:	4b22      	ldr	r3, [pc, #136]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a72a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a72e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a732:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a736:	4b1f      	ldr	r3, [pc, #124]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a738:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800a73c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a740:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a744:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a746:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a74a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a74e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a752:	4b18      	ldr	r3, [pc, #96]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a754:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800a758:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a75c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a760:	4b14      	ldr	r3, [pc, #80]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a762:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800a766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a76a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a76e:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <scaraKeyFlow+0x348>)
 800a770:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800a774:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a778:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a77c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <scaraKeyFlow+0x31e>
			return status1;
 800a784:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a788:	e131      	b.n	800a9ee <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a78a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <scaraKeyFlow+0x32c>
			return status2;
 800a792:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a796:	e12a      	b.n	800a9ee <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a798:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <scaraKeyFlow+0x33a>
			return status3;
 800a7a0:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a7a4:	e123      	b.n	800a9ee <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a7a6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <scaraKeyFlow+0x35c>
			return status4;
 800a7ae:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a7b2:	e11c      	b.n	800a9ee <scaraKeyFlow+0x582>
 800a7b4:	200053d0 	.word	0x200053d0
 800a7b8:	200057a0 	.word	0x200057a0
 800a7bc:	200058f8 	.word	0x200058f8
 800a7c0:	20005a50 	.word	0x20005a50
 800a7c4:	20005ba8 	.word	0x20005ba8
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 800a7c8:	4b8d      	ldr	r3, [pc, #564]	; (800aa00 <scaraKeyFlow+0x594>)
 800a7ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a7d6:	f7f5 fd67 	bl	80002a8 <__aeabi_dsub>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 800a7e2:	4b87      	ldr	r3, [pc, #540]	; (800aa00 <scaraKeyFlow+0x594>)
 800a7e4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4623      	mov	r3, r4
 800a7ec:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800a7f0:	f7f5 fd5a 	bl	80002a8 <__aeabi_dsub>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 800a7fc:	4b80      	ldr	r3, [pc, #512]	; (800aa00 <scaraKeyFlow+0x594>)
 800a7fe:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800a802:	461a      	mov	r2, r3
 800a804:	4623      	mov	r3, r4
 800a806:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800a80a:	f7f5 fd4d 	bl	80002a8 <__aeabi_dsub>
 800a80e:	4603      	mov	r3, r0
 800a810:	460c      	mov	r4, r1
 800a812:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 800a816:	4b7a      	ldr	r3, [pc, #488]	; (800aa00 <scaraKeyFlow+0x594>)
 800a818:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a81c:	461a      	mov	r2, r3
 800a81e:	4623      	mov	r3, r4
 800a820:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800a824:	f7f5 fd40 	bl	80002a8 <__aeabi_dsub>
 800a828:	4603      	mov	r3, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 800a830:	4b74      	ldr	r3, [pc, #464]	; (800aa04 <scaraKeyFlow+0x598>)
 800a832:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800a836:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a83a:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f5 fe80 	bl	8000544 <__aeabi_i2d>
 800a844:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a848:	f7f5 fee6 	bl	8000618 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4620      	mov	r0, r4
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fd2a 	bl	80002ac <__adddf3>
 800a858:	4603      	mov	r3, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	f107 0210 	add.w	r2, r7, #16
 800a860:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 800a864:	4b67      	ldr	r3, [pc, #412]	; (800aa04 <scaraKeyFlow+0x598>)
 800a866:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800a86a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a86e:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800a872:	4618      	mov	r0, r3
 800a874:	f7f5 fe66 	bl	8000544 <__aeabi_i2d>
 800a878:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a87c:	f7f5 fecc 	bl	8000618 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fd10 	bl	80002ac <__adddf3>
 800a88c:	4603      	mov	r3, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	f107 0210 	add.w	r2, r7, #16
 800a894:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 800a898:	4b5a      	ldr	r3, [pc, #360]	; (800aa04 <scaraKeyFlow+0x598>)
 800a89a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a89e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8a2:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f5 fe4c 	bl	8000544 <__aeabi_i2d>
 800a8ac:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a8b0:	f7f5 feb2 	bl	8000618 <__aeabi_dmul>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f7f5 fcf6 	bl	80002ac <__adddf3>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	f107 0210 	add.w	r2, r7, #16
 800a8c8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800a8cc:	4b4d      	ldr	r3, [pc, #308]	; (800aa04 <scaraKeyFlow+0x598>)
 800a8ce:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800a8d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8d6:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f5 fe32 	bl	8000544 <__aeabi_i2d>
 800a8e0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a8e4:	f7f5 fe98 	bl	8000618 <__aeabi_dmul>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f5 fcdc 	bl	80002ac <__adddf3>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	f107 0210 	add.w	r2, r7, #16
 800a8fc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a900:	f107 0210 	add.w	r2, r7, #16
 800a904:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a908:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a90c:	f107 0210 	add.w	r2, r7, #16
 800a910:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a914:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a918:	f107 0210 	add.w	r2, r7, #16
 800a91c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a920:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a924:	f107 0210 	add.w	r2, r7, #16
 800a928:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a92c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a930:	f107 0210 	add.w	r2, r7, #16
 800a934:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800a938:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a93c:	f107 0210 	add.w	r2, r7, #16
 800a940:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800a944:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a948:	f107 0210 	add.w	r2, r7, #16
 800a94c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800a950:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a954:	f107 0210 	add.w	r2, r7, #16
 800a958:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a95c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a960:	4b28      	ldr	r3, [pc, #160]	; (800aa04 <scaraKeyFlow+0x598>)
 800a962:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a96a:	f107 0210 	add.w	r2, r7, #16
 800a96e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a972:	f107 0210 	add.w	r2, r7, #16
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a97e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a982:	f107 0310 	add.w	r3, r7, #16
 800a986:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a98a:	f107 0310 	add.w	r3, r7, #16
 800a98e:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a992:	f107 0310 	add.w	r3, r7, #16
 800a996:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a99a:	f107 0310 	add.w	r3, r7, #16
 800a99e:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a9a2:	eeb0 3a44 	vmov.f32	s6, s8
 800a9a6:	eef0 3a64 	vmov.f32	s7, s9
 800a9aa:	eeb0 2a45 	vmov.f32	s4, s10
 800a9ae:	eef0 2a65 	vmov.f32	s5, s11
 800a9b2:	eeb0 1a46 	vmov.f32	s2, s12
 800a9b6:	eef0 1a66 	vmov.f32	s3, s13
 800a9ba:	eeb0 0a47 	vmov.f32	s0, s14
 800a9be:	eef0 0a67 	vmov.f32	s1, s15
 800a9c2:	f7fe f96d 	bl	8008ca0 <scaraCheckWorkSpace4>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a9cc:	2307      	movs	r3, #7
 800a9ce:	e00e      	b.n	800a9ee <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a9d0:	f107 0110 	add.w	r1, r7, #16
 800a9d4:	1d3b      	adds	r3, r7, #4
 800a9d6:	22b8      	movs	r2, #184	; 0xb8
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f00a ff59 	bl	8015890 <memcpy>
		}
		kinematicForward(pos_Next);
 800a9de:	1d3b      	adds	r3, r7, #4
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f7f8 fcc1 	bl	8003368 <kinematicForward>
 800a9e6:	e001      	b.n	800a9ec <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e000      	b.n	800a9ee <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9fa:	b002      	add	sp, #8
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20005dd8 	.word	0x20005dd8
 800aa04:	200053d0 	.word	0x200053d0

0800aa08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa0e:	2300      	movs	r3, #0
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <HAL_MspInit+0x54>)
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	4a11      	ldr	r2, [pc, #68]	; (800aa5c <HAL_MspInit+0x54>)
 800aa18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa1c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <HAL_MspInit+0x54>)
 800aa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa26:	607b      	str	r3, [r7, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	603b      	str	r3, [r7, #0]
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <HAL_MspInit+0x54>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <HAL_MspInit+0x54>)
 800aa34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa38:	6413      	str	r3, [r2, #64]	; 0x40
 800aa3a:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <HAL_MspInit+0x54>)
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aa46:	2200      	movs	r2, #0
 800aa48:	210f      	movs	r1, #15
 800aa4a:	f06f 0001 	mvn.w	r0, #1
 800aa4e:	f000 fb85 	bl	800b15c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	40023800 	.word	0x40023800

0800aa60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	; 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800aa70:	2200      	movs	r2, #0
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	2036      	movs	r0, #54	; 0x36
 800aa76:	f000 fb71 	bl	800b15c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800aa7a:	2036      	movs	r0, #54	; 0x36
 800aa7c:	f000 fb8a 	bl	800b194 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	4b1f      	ldr	r3, [pc, #124]	; (800ab04 <HAL_InitTick+0xa4>)
 800aa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa88:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <HAL_InitTick+0xa4>)
 800aa8a:	f043 0310 	orr.w	r3, r3, #16
 800aa8e:	6413      	str	r3, [r2, #64]	; 0x40
 800aa90:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <HAL_InitTick+0xa4>)
 800aa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aa9c:	f107 0210 	add.w	r2, r7, #16
 800aaa0:	f107 0314 	add.w	r3, r7, #20
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f002 ff16 	bl	800d8d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800aaac:	f002 feec 	bl	800d888 <HAL_RCC_GetPCLK1Freq>
 800aab0:	4603      	mov	r3, r0
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	4a13      	ldr	r2, [pc, #76]	; (800ab08 <HAL_InitTick+0xa8>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	0c9b      	lsrs	r3, r3, #18
 800aac0:	3b01      	subs	r3, #1
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800aac4:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <HAL_InitTick+0xac>)
 800aac6:	4a12      	ldr	r2, [pc, #72]	; (800ab10 <HAL_InitTick+0xb0>)
 800aac8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800aaca:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <HAL_InitTick+0xac>)
 800aacc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aad0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800aad2:	4a0e      	ldr	r2, [pc, #56]	; (800ab0c <HAL_InitTick+0xac>)
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <HAL_InitTick+0xac>)
 800aada:	2200      	movs	r2, #0
 800aadc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <HAL_InitTick+0xac>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800aae4:	4809      	ldr	r0, [pc, #36]	; (800ab0c <HAL_InitTick+0xac>)
 800aae6:	f002 ff29 	bl	800d93c <HAL_TIM_Base_Init>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800aaf0:	4806      	ldr	r0, [pc, #24]	; (800ab0c <HAL_InitTick+0xac>)
 800aaf2:	f002 ff4e 	bl	800d992 <HAL_TIM_Base_Start_IT>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	e000      	b.n	800aafc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3730      	adds	r7, #48	; 0x30
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	40023800 	.word	0x40023800
 800ab08:	431bde83 	.word	0x431bde83
 800ab0c:	200060b8 	.word	0x200060b8
 800ab10:	40001000 	.word	0x40001000

0800ab14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800ab28:	2164      	movs	r1, #100	; 0x64
 800ab2a:	4802      	ldr	r0, [pc, #8]	; (800ab34 <HardFault_Handler+0x10>)
 800ab2c:	f7f6 ffce 	bl	8001acc <LOG_REPORT>
 800ab30:	e7fa      	b.n	800ab28 <HardFault_Handler+0x4>
 800ab32:	bf00      	nop
 800ab34:	0801bb30 	.word	0x0801bb30

0800ab38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ab3c:	2174      	movs	r1, #116	; 0x74
 800ab3e:	4802      	ldr	r0, [pc, #8]	; (800ab48 <MemManage_Handler+0x10>)
 800ab40:	f7f6 ffc4 	bl	8001acc <LOG_REPORT>
 800ab44:	e7fa      	b.n	800ab3c <MemManage_Handler+0x4>
 800ab46:	bf00      	nop
 800ab48:	0801bb48 	.word	0x0801bb48

0800ab4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800ab50:	2184      	movs	r1, #132	; 0x84
 800ab52:	4802      	ldr	r0, [pc, #8]	; (800ab5c <BusFault_Handler+0x10>)
 800ab54:	f7f6 ffba 	bl	8001acc <LOG_REPORT>
 800ab58:	e7fa      	b.n	800ab50 <BusFault_Handler+0x4>
 800ab5a:	bf00      	nop
 800ab5c:	0801bb5c 	.word	0x0801bb5c

0800ab60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab64:	e7fe      	b.n	800ab64 <UsageFault_Handler+0x4>

0800ab66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab66:	b480      	push	{r7}
 800ab68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab6a:	bf00      	nop
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ab78:	4802      	ldr	r0, [pc, #8]	; (800ab84 <DMA1_Stream4_IRQHandler+0x10>)
 800ab7a:	f000 fc41 	bl	800b400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ab7e:	bf00      	nop
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20006178 	.word	0x20006178

0800ab88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ab8c:	4802      	ldr	r0, [pc, #8]	; (800ab98 <UART4_IRQHandler+0x10>)
 800ab8e:	f003 fa3f 	bl	800e010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20006138 	.word	0x20006138

0800ab9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aba0:	4802      	ldr	r0, [pc, #8]	; (800abac <TIM6_DAC_IRQHandler+0x10>)
 800aba2:	f002 ff1a 	bl	800d9da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aba6:	bf00      	nop
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	200060b8 	.word	0x200060b8

0800abb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800abb4:	4b05      	ldr	r3, [pc, #20]	; (800abcc <TIM7_IRQHandler+0x1c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2101      	movs	r1, #1
 800abba:	4618      	mov	r0, r3
 800abbc:	f006 ffe8 	bl	8011b90 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800abc0:	4803      	ldr	r0, [pc, #12]	; (800abd0 <TIM7_IRQHandler+0x20>)
 800abc2:	f002 ff0a 	bl	800d9da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800abc6:	bf00      	nop
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2000530c 	.word	0x2000530c
 800abd0:	200060f8 	.word	0x200060f8

0800abd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800abd8:	4802      	ldr	r0, [pc, #8]	; (800abe4 <OTG_FS_IRQHandler+0x10>)
 800abda:	f001 f9e1 	bl	800bfa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800abde:	bf00      	nop
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20006a80 	.word	0x20006a80

0800abe8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800abf0:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <_sbrk+0x50>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <_sbrk+0x16>
		heap_end = &end;
 800abf8:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <_sbrk+0x50>)
 800abfa:	4a10      	ldr	r2, [pc, #64]	; (800ac3c <_sbrk+0x54>)
 800abfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800abfe:	4b0e      	ldr	r3, [pc, #56]	; (800ac38 <_sbrk+0x50>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <_sbrk+0x50>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	466a      	mov	r2, sp
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d907      	bls.n	800ac22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ac12:	f00a fe03 	bl	801581c <__errno>
 800ac16:	4602      	mov	r2, r0
 800ac18:	230c      	movs	r3, #12
 800ac1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac20:	e006      	b.n	800ac30 <_sbrk+0x48>
	}

	heap_end += incr;
 800ac22:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <_sbrk+0x50>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4413      	add	r3, r2
 800ac2a:	4a03      	ldr	r2, [pc, #12]	; (800ac38 <_sbrk+0x50>)
 800ac2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	200014ac 	.word	0x200014ac
 800ac3c:	20006e90 	.word	0x20006e90

0800ac40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ac44:	4b08      	ldr	r3, [pc, #32]	; (800ac68 <SystemInit+0x28>)
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	4a07      	ldr	r2, [pc, #28]	; (800ac68 <SystemInit+0x28>)
 800ac4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ac54:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <SystemInit+0x28>)
 800ac56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac5a:	609a      	str	r2, [r3, #8]
#endif
}
 800ac5c:	bf00      	nop
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	e000ed00 	.word	0xe000ed00

0800ac6c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac72:	463b      	mov	r3, r7
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800ac7a:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac7c:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <MX_TIM7_Init+0x68>)
 800ac7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800ac80:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac82:	2253      	movs	r2, #83	; 0x53
 800ac84:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac86:	4b12      	ldr	r3, [pc, #72]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800ac8c:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac8e:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac94:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ac9a:	480d      	ldr	r0, [pc, #52]	; (800acd0 <MX_TIM7_Init+0x64>)
 800ac9c:	f002 fe4e 	bl	800d93c <HAL_TIM_Base_Init>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800aca6:	f7f8 ff2b 	bl	8003b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acaa:	2300      	movs	r3, #0
 800acac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acae:	2300      	movs	r3, #0
 800acb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800acb2:	463b      	mov	r3, r7
 800acb4:	4619      	mov	r1, r3
 800acb6:	4806      	ldr	r0, [pc, #24]	; (800acd0 <MX_TIM7_Init+0x64>)
 800acb8:	f003 f860 	bl	800dd7c <HAL_TIMEx_MasterConfigSynchronization>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800acc2:	f7f8 ff1d 	bl	8003b00 <Error_Handler>
  }

}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	200060f8 	.word	0x200060f8
 800acd4:	40001400 	.word	0x40001400

0800acd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a0e      	ldr	r2, [pc, #56]	; (800ad20 <HAL_TIM_Base_MspInit+0x48>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d115      	bne.n	800ad16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <HAL_TIM_Base_MspInit+0x4c>)
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	4a0c      	ldr	r2, [pc, #48]	; (800ad24 <HAL_TIM_Base_MspInit+0x4c>)
 800acf4:	f043 0320 	orr.w	r3, r3, #32
 800acf8:	6413      	str	r3, [r2, #64]	; 0x40
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <HAL_TIM_Base_MspInit+0x4c>)
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f003 0320 	and.w	r3, r3, #32
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800ad06:	2200      	movs	r2, #0
 800ad08:	2105      	movs	r1, #5
 800ad0a:	2037      	movs	r0, #55	; 0x37
 800ad0c:	f000 fa26 	bl	800b15c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ad10:	2037      	movs	r0, #55	; 0x37
 800ad12:	f000 fa3f 	bl	800b194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	40001400 	.word	0x40001400
 800ad24:	40023800 	.word	0x40023800

0800ad28 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800ad2c:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad2e:	4a12      	ldr	r2, [pc, #72]	; (800ad78 <MX_UART4_Init+0x50>)
 800ad30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ad32:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ad38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ad3a:	4b0e      	ldr	r3, [pc, #56]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad4e:	220c      	movs	r2, #12
 800ad50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ad5e:	4805      	ldr	r0, [pc, #20]	; (800ad74 <MX_UART4_Init+0x4c>)
 800ad60:	f003 f89c 	bl	800de9c <HAL_UART_Init>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ad6a:	f7f8 fec9 	bl	8003b00 <Error_Handler>
  }

}
 800ad6e:	bf00      	nop
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20006138 	.word	0x20006138
 800ad78:	40004c00 	.word	0x40004c00

0800ad7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	; 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad84:	f107 0314 	add.w	r3, r7, #20
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	605a      	str	r2, [r3, #4]
 800ad8e:	609a      	str	r2, [r3, #8]
 800ad90:	60da      	str	r2, [r3, #12]
 800ad92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a34      	ldr	r2, [pc, #208]	; (800ae6c <HAL_UART_MspInit+0xf0>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d161      	bne.n	800ae62 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]
 800ada2:	4b33      	ldr	r3, [pc, #204]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	4a32      	ldr	r2, [pc, #200]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800ada8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adac:	6413      	str	r3, [r2, #64]	; 0x40
 800adae:	4b30      	ldr	r3, [pc, #192]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adb6:	613b      	str	r3, [r7, #16]
 800adb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	4b2c      	ldr	r3, [pc, #176]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	4a2b      	ldr	r2, [pc, #172]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	6313      	str	r3, [r2, #48]	; 0x30
 800adca:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <HAL_UART_MspInit+0xf4>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800add6:	2303      	movs	r3, #3
 800add8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adda:	2302      	movs	r3, #2
 800addc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800adde:	2301      	movs	r3, #1
 800ade0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade2:	2303      	movs	r3, #3
 800ade4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ade6:	2308      	movs	r3, #8
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adea:	f107 0314 	add.w	r3, r7, #20
 800adee:	4619      	mov	r1, r3
 800adf0:	4820      	ldr	r0, [pc, #128]	; (800ae74 <HAL_UART_MspInit+0xf8>)
 800adf2:	f000 fd7b 	bl	800b8ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800adf8:	4a20      	ldr	r2, [pc, #128]	; (800ae7c <HAL_UART_MspInit+0x100>)
 800adfa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800adfc:	4b1e      	ldr	r3, [pc, #120]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800adfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae02:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae04:	4b1c      	ldr	r3, [pc, #112]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae06:	2240      	movs	r2, #64	; 0x40
 800ae08:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae10:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae16:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae18:	4b17      	ldr	r3, [pc, #92]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae1e:	4b16      	ldr	r3, [pc, #88]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800ae24:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae30:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800ae36:	4810      	ldr	r0, [pc, #64]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae38:	f000 f9ba 	bl	800b1b0 <HAL_DMA_Init>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800ae42:	f7f8 fe5d 	bl	8003b00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a0b      	ldr	r2, [pc, #44]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae4c:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <HAL_UART_MspInit+0xfc>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800ae52:	2200      	movs	r2, #0
 800ae54:	2105      	movs	r1, #5
 800ae56:	2034      	movs	r0, #52	; 0x34
 800ae58:	f000 f980 	bl	800b15c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ae5c:	2034      	movs	r0, #52	; 0x34
 800ae5e:	f000 f999 	bl	800b194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800ae62:	bf00      	nop
 800ae64:	3728      	adds	r7, #40	; 0x28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	40004c00 	.word	0x40004c00
 800ae70:	40023800 	.word	0x40023800
 800ae74:	40020000 	.word	0x40020000
 800ae78:	20006178 	.word	0x20006178
 800ae7c:	40026070 	.word	0x40026070

0800ae80 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a0c      	ldr	r2, [pc, #48]	; (800aec0 <HAL_UART_TxCpltCallback+0x40>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d112      	bne.n	800aeb8 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800ae92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae96:	490b      	ldr	r1, [pc, #44]	; (800aec4 <HAL_UART_TxCpltCallback+0x44>)
 800ae98:	480b      	ldr	r0, [pc, #44]	; (800aec8 <HAL_UART_TxCpltCallback+0x48>)
 800ae9a:	f7f8 fed0 	bl	8003c3e <ringBuff_PopArray>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800aea8:	89fb      	ldrh	r3, [r7, #14]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4905      	ldr	r1, [pc, #20]	; (800aec4 <HAL_UART_TxCpltCallback+0x44>)
 800aeae:	4807      	ldr	r0, [pc, #28]	; (800aecc <HAL_UART_TxCpltCallback+0x4c>)
 800aeb0:	f003 f842 	bl	800df38 <HAL_UART_Transmit_DMA>
 800aeb4:	e000      	b.n	800aeb8 <HAL_UART_TxCpltCallback+0x38>
			return;
 800aeb6:	bf00      	nop
	}
}
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	40004c00 	.word	0x40004c00
 800aec4:	2000520c 	.word	0x2000520c
 800aec8:	20000894 	.word	0x20000894
 800aecc:	20006138 	.word	0x20006138

0800aed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800aed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800aed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800aed6:	e003      	b.n	800aee0 <LoopCopyDataInit>

0800aed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800aeda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800aedc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800aede:	3104      	adds	r1, #4

0800aee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800aee0:	480b      	ldr	r0, [pc, #44]	; (800af10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800aee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800aee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800aee8:	d3f6      	bcc.n	800aed8 <CopyDataInit>
  ldr  r2, =_sbss
 800aeea:	4a0b      	ldr	r2, [pc, #44]	; (800af18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800aeec:	e002      	b.n	800aef4 <LoopFillZerobss>

0800aeee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800aeee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800aef0:	f842 3b04 	str.w	r3, [r2], #4

0800aef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800aef4:	4b09      	ldr	r3, [pc, #36]	; (800af1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800aef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800aef8:	d3f9      	bcc.n	800aeee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800aefa:	f7ff fea1 	bl	800ac40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aefe:	f00a fc93 	bl	8015828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af02:	f7f8 fd6b 	bl	80039dc <main>
  bx  lr    
 800af06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800af08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800af0c:	0801c150 	.word	0x0801c150
  ldr  r0, =_sdata
 800af10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800af14:	20001034 	.word	0x20001034
  ldr  r2, =_sbss
 800af18:	20001038 	.word	0x20001038
  ldr  r3, = _ebss
 800af1c:	20006e8c 	.word	0x20006e8c

0800af20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af20:	e7fe      	b.n	800af20 <ADC_IRQHandler>
	...

0800af24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <HAL_Init+0x40>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a0d      	ldr	r2, [pc, #52]	; (800af64 <HAL_Init+0x40>)
 800af2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800af34:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <HAL_Init+0x40>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a0a      	ldr	r2, [pc, #40]	; (800af64 <HAL_Init+0x40>)
 800af3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800af40:	4b08      	ldr	r3, [pc, #32]	; (800af64 <HAL_Init+0x40>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a07      	ldr	r2, [pc, #28]	; (800af64 <HAL_Init+0x40>)
 800af46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af4c:	2003      	movs	r0, #3
 800af4e:	f000 f8fa 	bl	800b146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800af52:	2000      	movs	r0, #0
 800af54:	f7ff fd84 	bl	800aa60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800af58:	f7ff fd56 	bl	800aa08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	40023c00 	.word	0x40023c00

0800af68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <HAL_IncTick+0x20>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	461a      	mov	r2, r3
 800af72:	4b06      	ldr	r3, [pc, #24]	; (800af8c <HAL_IncTick+0x24>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4413      	add	r3, r2
 800af78:	4a04      	ldr	r2, [pc, #16]	; (800af8c <HAL_IncTick+0x24>)
 800af7a:	6013      	str	r3, [r2, #0]
}
 800af7c:	bf00      	nop
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000ce8 	.word	0x20000ce8
 800af8c:	200061d8 	.word	0x200061d8

0800af90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
  return uwTick;
 800af94:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <HAL_GetTick+0x14>)
 800af96:	681b      	ldr	r3, [r3, #0]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	200061d8 	.word	0x200061d8

0800afa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800afb0:	f7ff ffee 	bl	800af90 <HAL_GetTick>
 800afb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc0:	d005      	beq.n	800afce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <HAL_Delay+0x40>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4413      	add	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800afce:	bf00      	nop
 800afd0:	f7ff ffde 	bl	800af90 <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d8f7      	bhi.n	800afd0 <HAL_Delay+0x28>
  {
  }
}
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20000ce8 	.word	0x20000ce8

0800afec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800affc:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <__NVIC_SetPriorityGrouping+0x44>)
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b008:	4013      	ands	r3, r2
 800b00a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b01e:	4a04      	ldr	r2, [pc, #16]	; (800b030 <__NVIC_SetPriorityGrouping+0x44>)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	60d3      	str	r3, [r2, #12]
}
 800b024:	bf00      	nop
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	e000ed00 	.word	0xe000ed00

0800b034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <__NVIC_GetPriorityGrouping+0x18>)
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	0a1b      	lsrs	r3, r3, #8
 800b03e:	f003 0307 	and.w	r3, r3, #7
}
 800b042:	4618      	mov	r0, r3
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	e000ed00 	.word	0xe000ed00

0800b050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	db0b      	blt.n	800b07a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	f003 021f 	and.w	r2, r3, #31
 800b068:	4907      	ldr	r1, [pc, #28]	; (800b088 <__NVIC_EnableIRQ+0x38>)
 800b06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b06e:	095b      	lsrs	r3, r3, #5
 800b070:	2001      	movs	r0, #1
 800b072:	fa00 f202 	lsl.w	r2, r0, r2
 800b076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b07a:	bf00      	nop
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	e000e100 	.word	0xe000e100

0800b08c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	6039      	str	r1, [r7, #0]
 800b096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	db0a      	blt.n	800b0b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	490c      	ldr	r1, [pc, #48]	; (800b0d8 <__NVIC_SetPriority+0x4c>)
 800b0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0aa:	0112      	lsls	r2, r2, #4
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b0b4:	e00a      	b.n	800b0cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	4908      	ldr	r1, [pc, #32]	; (800b0dc <__NVIC_SetPriority+0x50>)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	3b04      	subs	r3, #4
 800b0c4:	0112      	lsls	r2, r2, #4
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	440b      	add	r3, r1
 800b0ca:	761a      	strb	r2, [r3, #24]
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	e000e100 	.word	0xe000e100
 800b0dc:	e000ed00 	.word	0xe000ed00

0800b0e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b089      	sub	sp, #36	; 0x24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	f1c3 0307 	rsb	r3, r3, #7
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	bf28      	it	cs
 800b0fe:	2304      	movcs	r3, #4
 800b100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	3304      	adds	r3, #4
 800b106:	2b06      	cmp	r3, #6
 800b108:	d902      	bls.n	800b110 <NVIC_EncodePriority+0x30>
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	3b03      	subs	r3, #3
 800b10e:	e000      	b.n	800b112 <NVIC_EncodePriority+0x32>
 800b110:	2300      	movs	r3, #0
 800b112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	43da      	mvns	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	401a      	ands	r2, r3
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b128:	f04f 31ff 	mov.w	r1, #4294967295
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	fa01 f303 	lsl.w	r3, r1, r3
 800b132:	43d9      	mvns	r1, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b138:	4313      	orrs	r3, r2
         );
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3724      	adds	r7, #36	; 0x24
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff ff4c 	bl	800afec <__NVIC_SetPriorityGrouping>
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b16e:	f7ff ff61 	bl	800b034 <__NVIC_GetPriorityGrouping>
 800b172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	6978      	ldr	r0, [r7, #20]
 800b17a:	f7ff ffb1 	bl	800b0e0 <NVIC_EncodePriority>
 800b17e:	4602      	mov	r2, r0
 800b180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b184:	4611      	mov	r1, r2
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff ff80 	bl	800b08c <__NVIC_SetPriority>
}
 800b18c:	bf00      	nop
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b19e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ff54 	bl	800b050 <__NVIC_EnableIRQ>
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b1bc:	f7ff fee8 	bl	800af90 <HAL_GetTick>
 800b1c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e099      	b.n	800b300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0201 	bic.w	r2, r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1ec:	e00f      	b.n	800b20e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b1ee:	f7ff fecf 	bl	800af90 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	d908      	bls.n	800b20e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2203      	movs	r2, #3
 800b206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e078      	b.n	800b300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e8      	bne.n	800b1ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	4b38      	ldr	r3, [pc, #224]	; (800b308 <HAL_DMA_Init+0x158>)
 800b228:	4013      	ands	r3, r2
 800b22a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b23a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2b04      	cmp	r3, #4
 800b266:	d107      	bne.n	800b278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b270:	4313      	orrs	r3, r2
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f023 0307 	bic.w	r3, r3, #7
 800b28e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d117      	bne.n	800b2d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00e      	beq.n	800b2d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa9f 	bl	800b7f8 <DMA_CheckFifoParam>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d008      	beq.n	800b2d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2240      	movs	r2, #64	; 0x40
 800b2c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e016      	b.n	800b300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa56 	bl	800b78c <DMA_CalcBaseAndBitshift>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e8:	223f      	movs	r2, #63	; 0x3f
 800b2ea:	409a      	lsls	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	f010803f 	.word	0xf010803f

0800b30c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d101      	bne.n	800b332 <HAL_DMA_Start_IT+0x26>
 800b32e:	2302      	movs	r3, #2
 800b330:	e040      	b.n	800b3b4 <HAL_DMA_Start_IT+0xa8>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b01      	cmp	r3, #1
 800b344:	d12f      	bne.n	800b3a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2202      	movs	r2, #2
 800b34a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 f9e8 	bl	800b730 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b364:	223f      	movs	r2, #63	; 0x3f
 800b366:	409a      	lsls	r2, r3
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0216 	orr.w	r2, r2, #22
 800b37a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d007      	beq.n	800b394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0208 	orr.w	r2, r2, #8
 800b392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	e005      	b.n	800b3b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d004      	beq.n	800b3da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2280      	movs	r2, #128	; 0x80
 800b3d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e00c      	b.n	800b3f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2205      	movs	r2, #5
 800b3de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0201 	bic.w	r2, r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b40c:	4b92      	ldr	r3, [pc, #584]	; (800b658 <HAL_DMA_IRQHandler+0x258>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a92      	ldr	r2, [pc, #584]	; (800b65c <HAL_DMA_IRQHandler+0x25c>)
 800b412:	fba2 2303 	umull	r2, r3, r2, r3
 800b416:	0a9b      	lsrs	r3, r3, #10
 800b418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b41e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b42a:	2208      	movs	r2, #8
 800b42c:	409a      	lsls	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4013      	ands	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01a      	beq.n	800b46c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d013      	beq.n	800b46c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0204 	bic.w	r2, r2, #4
 800b452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b458:	2208      	movs	r2, #8
 800b45a:	409a      	lsls	r2, r3
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b464:	f043 0201 	orr.w	r2, r3, #1
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b470:	2201      	movs	r2, #1
 800b472:	409a      	lsls	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4013      	ands	r3, r2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d012      	beq.n	800b4a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00b      	beq.n	800b4a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b48e:	2201      	movs	r2, #1
 800b490:	409a      	lsls	r2, r3
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49a:	f043 0202 	orr.w	r2, r3, #2
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4a6:	2204      	movs	r2, #4
 800b4a8:	409a      	lsls	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d012      	beq.n	800b4d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	409a      	lsls	r2, r3
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d0:	f043 0204 	orr.w	r2, r3, #4
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4dc:	2210      	movs	r2, #16
 800b4de:	409a      	lsls	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d043      	beq.n	800b570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0308 	and.w	r3, r3, #8
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d03c      	beq.n	800b570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4fa:	2210      	movs	r2, #16
 800b4fc:	409a      	lsls	r2, r3
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d018      	beq.n	800b542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d108      	bne.n	800b530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	d024      	beq.n	800b570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
 800b52e:	e01f      	b.n	800b570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01b      	beq.n	800b570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	4798      	blx	r3
 800b540:	e016      	b.n	800b570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d107      	bne.n	800b560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 0208 	bic.w	r2, r2, #8
 800b55e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b574:	2220      	movs	r2, #32
 800b576:	409a      	lsls	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 808e 	beq.w	800b69e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0310 	and.w	r3, r3, #16
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8086 	beq.w	800b69e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b596:	2220      	movs	r2, #32
 800b598:	409a      	lsls	r2, r3
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	d136      	bne.n	800b618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f022 0216 	bic.w	r2, r2, #22
 800b5b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695a      	ldr	r2, [r3, #20]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d103      	bne.n	800b5da <HAL_DMA_IRQHandler+0x1da>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f022 0208 	bic.w	r2, r2, #8
 800b5e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ee:	223f      	movs	r2, #63	; 0x3f
 800b5f0:	409a      	lsls	r2, r3
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d07d      	beq.n	800b70a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
        }
        return;
 800b616:	e078      	b.n	800b70a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d01c      	beq.n	800b660 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d108      	bne.n	800b646 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d030      	beq.n	800b69e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
 800b644:	e02b      	b.n	800b69e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d027      	beq.n	800b69e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
 800b656:	e022      	b.n	800b69e <HAL_DMA_IRQHandler+0x29e>
 800b658:	20000ce0 	.word	0x20000ce0
 800b65c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10f      	bne.n	800b68e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f022 0210 	bic.w	r2, r2, #16
 800b67c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d032      	beq.n	800b70c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d022      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2205      	movs	r2, #5
 800b6b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f022 0201 	bic.w	r2, r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	60bb      	str	r3, [r7, #8]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d307      	bcc.n	800b6e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1f2      	bne.n	800b6ca <HAL_DMA_IRQHandler+0x2ca>
 800b6e4:	e000      	b.n	800b6e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b6e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d005      	beq.n	800b70c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	4798      	blx	r3
 800b708:	e000      	b.n	800b70c <HAL_DMA_IRQHandler+0x30c>
        return;
 800b70a:	bf00      	nop
    }
  }
}
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop

0800b714 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b722:	b2db      	uxtb	r3, r3
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b74c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b40      	cmp	r3, #64	; 0x40
 800b75c:	d108      	bne.n	800b770 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b76e:	e007      	b.n	800b780 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	60da      	str	r2, [r3, #12]
}
 800b780:	bf00      	nop
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	3b10      	subs	r3, #16
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <DMA_CalcBaseAndBitshift+0x64>)
 800b79e:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a2:	091b      	lsrs	r3, r3, #4
 800b7a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b7a6:	4a13      	ldr	r2, [pc, #76]	; (800b7f4 <DMA_CalcBaseAndBitshift+0x68>)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d909      	bls.n	800b7ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b7c2:	f023 0303 	bic.w	r3, r3, #3
 800b7c6:	1d1a      	adds	r2, r3, #4
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	659a      	str	r2, [r3, #88]	; 0x58
 800b7cc:	e007      	b.n	800b7de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	aaaaaaab 	.word	0xaaaaaaab
 800b7f4:	0801bbe4 	.word	0x0801bbe4

0800b7f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d11f      	bne.n	800b852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b03      	cmp	r3, #3
 800b816:	d855      	bhi.n	800b8c4 <DMA_CheckFifoParam+0xcc>
 800b818:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <DMA_CheckFifoParam+0x28>)
 800b81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81e:	bf00      	nop
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b843 	.word	0x0800b843
 800b828:	0800b831 	.word	0x0800b831
 800b82c:	0800b8c5 	.word	0x0800b8c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d045      	beq.n	800b8c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b840:	e042      	b.n	800b8c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b84a:	d13f      	bne.n	800b8cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b850:	e03c      	b.n	800b8cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b85a:	d121      	bne.n	800b8a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d836      	bhi.n	800b8d0 <DMA_CheckFifoParam+0xd8>
 800b862:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <DMA_CheckFifoParam+0x70>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b879 	.word	0x0800b879
 800b86c:	0800b87f 	.word	0x0800b87f
 800b870:	0800b879 	.word	0x0800b879
 800b874:	0800b891 	.word	0x0800b891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	73fb      	strb	r3, [r7, #15]
      break;
 800b87c:	e02f      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d024      	beq.n	800b8d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b88e:	e021      	b.n	800b8d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b898:	d11e      	bne.n	800b8d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b89e:	e01b      	b.n	800b8d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d902      	bls.n	800b8ac <DMA_CheckFifoParam+0xb4>
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d003      	beq.n	800b8b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b8aa:	e018      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b0:	e015      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00e      	beq.n	800b8dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c2:	e00b      	b.n	800b8dc <DMA_CheckFifoParam+0xe4>
      break;
 800b8c4:	bf00      	nop
 800b8c6:	e00a      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;
 800b8c8:	bf00      	nop
 800b8ca:	e008      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;
 800b8cc:	bf00      	nop
 800b8ce:	e006      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;
 800b8d0:	bf00      	nop
 800b8d2:	e004      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;
 800b8d4:	bf00      	nop
 800b8d6:	e002      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;   
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <DMA_CheckFifoParam+0xe6>
      break;
 800b8dc:	bf00      	nop
    }
  } 
  
  return status; 
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b089      	sub	sp, #36	; 0x24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b8fe:	2300      	movs	r3, #0
 800b900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	e16b      	b.n	800bbe0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b908:	2201      	movs	r2, #1
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	fa02 f303 	lsl.w	r3, r2, r3
 800b910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	4013      	ands	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	429a      	cmp	r2, r3
 800b922:	f040 815a 	bne.w	800bbda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d00b      	beq.n	800b946 <HAL_GPIO_Init+0x5a>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d007      	beq.n	800b946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b93a:	2b11      	cmp	r3, #17
 800b93c:	d003      	beq.n	800b946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2b12      	cmp	r3, #18
 800b944:	d130      	bne.n	800b9a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	2203      	movs	r2, #3
 800b952:	fa02 f303 	lsl.w	r3, r2, r3
 800b956:	43db      	mvns	r3, r3
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	4013      	ands	r3, r2
 800b95c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	fa02 f303 	lsl.w	r3, r2, r3
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b97c:	2201      	movs	r2, #1
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	fa02 f303 	lsl.w	r3, r2, r3
 800b984:	43db      	mvns	r3, r3
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	4013      	ands	r3, r2
 800b98a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	091b      	lsrs	r3, r3, #4
 800b992:	f003 0201 	and.w	r2, r3, #1
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	fa02 f303 	lsl.w	r3, r2, r3
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	2203      	movs	r2, #3
 800b9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b8:	43db      	mvns	r3, r3
 800b9ba:	69ba      	ldr	r2, [r7, #24]
 800b9bc:	4013      	ands	r3, r2
 800b9be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69ba      	ldr	r2, [r7, #24]
 800b9d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d003      	beq.n	800b9e8 <HAL_GPIO_Init+0xfc>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	2b12      	cmp	r3, #18
 800b9e6:	d123      	bne.n	800ba30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	08da      	lsrs	r2, r3, #3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3208      	adds	r2, #8
 800b9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	220f      	movs	r2, #15
 800ba00:	fa02 f303 	lsl.w	r3, r2, r3
 800ba04:	43db      	mvns	r3, r3
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	fa02 f303 	lsl.w	r3, r2, r3
 800ba1c:	69ba      	ldr	r2, [r7, #24]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	08da      	lsrs	r2, r3, #3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3208      	adds	r2, #8
 800ba2a:	69b9      	ldr	r1, [r7, #24]
 800ba2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba40:	43db      	mvns	r3, r3
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	4013      	ands	r3, r2
 800ba46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	f003 0203 	and.w	r2, r3, #3
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	fa02 f303 	lsl.w	r3, r2, r3
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	69ba      	ldr	r2, [r7, #24]
 800ba62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80b4 	beq.w	800bbda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	4b5f      	ldr	r3, [pc, #380]	; (800bbf4 <HAL_GPIO_Init+0x308>)
 800ba78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7a:	4a5e      	ldr	r2, [pc, #376]	; (800bbf4 <HAL_GPIO_Init+0x308>)
 800ba7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba80:	6453      	str	r3, [r2, #68]	; 0x44
 800ba82:	4b5c      	ldr	r3, [pc, #368]	; (800bbf4 <HAL_GPIO_Init+0x308>)
 800ba84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba8e:	4a5a      	ldr	r2, [pc, #360]	; (800bbf8 <HAL_GPIO_Init+0x30c>)
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	089b      	lsrs	r3, r3, #2
 800ba94:	3302      	adds	r3, #2
 800ba96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	f003 0303 	and.w	r3, r3, #3
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	220f      	movs	r2, #15
 800baa6:	fa02 f303 	lsl.w	r3, r2, r3
 800baaa:	43db      	mvns	r3, r3
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	4013      	ands	r3, r2
 800bab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a51      	ldr	r2, [pc, #324]	; (800bbfc <HAL_GPIO_Init+0x310>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d02b      	beq.n	800bb12 <HAL_GPIO_Init+0x226>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a50      	ldr	r2, [pc, #320]	; (800bc00 <HAL_GPIO_Init+0x314>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d025      	beq.n	800bb0e <HAL_GPIO_Init+0x222>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a4f      	ldr	r2, [pc, #316]	; (800bc04 <HAL_GPIO_Init+0x318>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d01f      	beq.n	800bb0a <HAL_GPIO_Init+0x21e>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a4e      	ldr	r2, [pc, #312]	; (800bc08 <HAL_GPIO_Init+0x31c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d019      	beq.n	800bb06 <HAL_GPIO_Init+0x21a>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a4d      	ldr	r2, [pc, #308]	; (800bc0c <HAL_GPIO_Init+0x320>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d013      	beq.n	800bb02 <HAL_GPIO_Init+0x216>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a4c      	ldr	r2, [pc, #304]	; (800bc10 <HAL_GPIO_Init+0x324>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00d      	beq.n	800bafe <HAL_GPIO_Init+0x212>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a4b      	ldr	r2, [pc, #300]	; (800bc14 <HAL_GPIO_Init+0x328>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d007      	beq.n	800bafa <HAL_GPIO_Init+0x20e>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a4a      	ldr	r2, [pc, #296]	; (800bc18 <HAL_GPIO_Init+0x32c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d101      	bne.n	800baf6 <HAL_GPIO_Init+0x20a>
 800baf2:	2307      	movs	r3, #7
 800baf4:	e00e      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800baf6:	2308      	movs	r3, #8
 800baf8:	e00c      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bafa:	2306      	movs	r3, #6
 800bafc:	e00a      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bafe:	2305      	movs	r3, #5
 800bb00:	e008      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bb02:	2304      	movs	r3, #4
 800bb04:	e006      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bb06:	2303      	movs	r3, #3
 800bb08:	e004      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	e002      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <HAL_GPIO_Init+0x228>
 800bb12:	2300      	movs	r3, #0
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	f002 0203 	and.w	r2, r2, #3
 800bb1a:	0092      	lsls	r2, r2, #2
 800bb1c:	4093      	lsls	r3, r2
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb24:	4934      	ldr	r1, [pc, #208]	; (800bbf8 <HAL_GPIO_Init+0x30c>)
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	089b      	lsrs	r3, r3, #2
 800bb2a:	3302      	adds	r3, #2
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bb32:	4b3a      	ldr	r3, [pc, #232]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	43db      	mvns	r3, r3
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	4013      	ands	r3, r2
 800bb40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bb56:	4a31      	ldr	r2, [pc, #196]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bb5c:	4b2f      	ldr	r3, [pc, #188]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	43db      	mvns	r3, r3
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bb80:	4a26      	ldr	r2, [pc, #152]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bb86:	4b25      	ldr	r3, [pc, #148]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	43db      	mvns	r3, r3
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	4013      	ands	r3, r2
 800bb94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bba2:	69ba      	ldr	r2, [r7, #24]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bbaa:	4a1c      	ldr	r2, [pc, #112]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bbb0:	4b1a      	ldr	r3, [pc, #104]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	43db      	mvns	r3, r3
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bbd4:	4a11      	ldr	r2, [pc, #68]	; (800bc1c <HAL_GPIO_Init+0x330>)
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	61fb      	str	r3, [r7, #28]
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	2b0f      	cmp	r3, #15
 800bbe4:	f67f ae90 	bls.w	800b908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bbe8:	bf00      	nop
 800bbea:	3724      	adds	r7, #36	; 0x24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	40023800 	.word	0x40023800
 800bbf8:	40013800 	.word	0x40013800
 800bbfc:	40020000 	.word	0x40020000
 800bc00:	40020400 	.word	0x40020400
 800bc04:	40020800 	.word	0x40020800
 800bc08:	40020c00 	.word	0x40020c00
 800bc0c:	40021000 	.word	0x40021000
 800bc10:	40021400 	.word	0x40021400
 800bc14:	40021800 	.word	0x40021800
 800bc18:	40021c00 	.word	0x40021c00
 800bc1c:	40013c00 	.word	0x40013c00

0800bc20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	807b      	strh	r3, [r7, #2]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bc30:	787b      	ldrb	r3, [r7, #1]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bc36:	887a      	ldrh	r2, [r7, #2]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bc3c:	e003      	b.n	800bc46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bc3e:	887b      	ldrh	r3, [r7, #2]
 800bc40:	041a      	lsls	r2, r3, #16
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	619a      	str	r2, [r3, #24]
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e043      	b.n	800bcf2 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7f7 fab0 	bl	80031e4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f003 f810 	bl	800ecb4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6818      	ldr	r0, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	f003 f85a 	bl	800ed58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6858      	ldr	r0, [r3, #4]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	f003 f88f 	bl	800edd4 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	6892      	ldr	r2, [r2, #8]
 800bcbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	6892      	ldr	r2, [r2, #8]
 800bcca:	f041 0101 	orr.w	r1, r1, #1
 800bcce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bcda:	4b08      	ldr	r3, [pc, #32]	; (800bcfc <HAL_NOR_Init+0xa8>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	e002      	b.n	800bce8 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bce2:	4b06      	ldr	r3, [pc, #24]	; (800bcfc <HAL_NOR_Init+0xa8>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200014b0 	.word	0x200014b0

0800bd00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd02:	b08f      	sub	sp, #60	; 0x3c
 800bd04:	af0a      	add	r7, sp, #40	; 0x28
 800bd06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e10f      	b.n	800bf32 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d106      	bne.n	800bd32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f009 fa75 	bl	801521c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2203      	movs	r2, #3
 800bd36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f003 f994 	bl	800f07e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	687e      	ldr	r6, [r7, #4]
 800bd5e:	466d      	mov	r5, sp
 800bd60:	f106 0410 	add.w	r4, r6, #16
 800bd64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bd70:	e885 0003 	stmia.w	r5, {r0, r1}
 800bd74:	1d33      	adds	r3, r6, #4
 800bd76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd78:	6838      	ldr	r0, [r7, #0]
 800bd7a:	f003 f86b 	bl	800ee54 <USB_CoreInit>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2202      	movs	r2, #2
 800bd88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e0d0      	b.n	800bf32 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2100      	movs	r1, #0
 800bd96:	4618      	mov	r0, r3
 800bd98:	f003 f982 	bl	800f0a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
 800bda0:	e04a      	b.n	800be38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bda2:	7bfa      	ldrb	r2, [r7, #15]
 800bda4:	6879      	ldr	r1, [r7, #4]
 800bda6:	4613      	mov	r3, r2
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	440b      	add	r3, r1
 800bdb0:	333d      	adds	r3, #61	; 0x3d
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	333c      	adds	r3, #60	; 0x3c
 800bdc6:	7bfa      	ldrb	r2, [r7, #15]
 800bdc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bdca:	7bfa      	ldrb	r2, [r7, #15]
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
 800bdce:	b298      	uxth	r0, r3
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	1a9b      	subs	r3, r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	440b      	add	r3, r1
 800bddc:	3342      	adds	r3, #66	; 0x42
 800bdde:	4602      	mov	r2, r0
 800bde0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bde2:	7bfa      	ldrb	r2, [r7, #15]
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	440b      	add	r3, r1
 800bdf0:	333f      	adds	r3, #63	; 0x3f
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bdf6:	7bfa      	ldrb	r2, [r7, #15]
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	3344      	adds	r3, #68	; 0x44
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	3348      	adds	r3, #72	; 0x48
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800be1e:	7bfa      	ldrb	r2, [r7, #15]
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3350      	adds	r3, #80	; 0x50
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be32:	7bfb      	ldrb	r3, [r7, #15]
 800be34:	3301      	adds	r3, #1
 800be36:	73fb      	strb	r3, [r7, #15]
 800be38:	7bfa      	ldrb	r2, [r7, #15]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d3af      	bcc.n	800bda2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	e044      	b.n	800bed2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800be48:	7bfa      	ldrb	r2, [r7, #15]
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800be5e:	7bfa      	ldrb	r2, [r7, #15]
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	1a9b      	subs	r3, r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800be70:	7bfa      	ldrb	r2, [r7, #15]
 800be72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800be74:	7bfa      	ldrb	r2, [r7, #15]
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	4613      	mov	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	440b      	add	r3, r1
 800be82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800be8a:	7bfa      	ldrb	r2, [r7, #15]
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bea0:	7bfa      	ldrb	r2, [r7, #15]
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	440b      	add	r3, r1
 800beae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800beb6:	7bfa      	ldrb	r2, [r7, #15]
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	3301      	adds	r3, #1
 800bed0:	73fb      	strb	r3, [r7, #15]
 800bed2:	7bfa      	ldrb	r2, [r7, #15]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d3b5      	bcc.n	800be48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	603b      	str	r3, [r7, #0]
 800bee2:	687e      	ldr	r6, [r7, #4]
 800bee4:	466d      	mov	r5, sp
 800bee6:	f106 0410 	add.w	r4, r6, #16
 800beea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800beec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800beee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bef6:	e885 0003 	stmia.w	r5, {r0, r1}
 800befa:	1d33      	adds	r3, r6, #4
 800befc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800befe:	6838      	ldr	r0, [r7, #0]
 800bf00:	f003 f8f8 	bl	800f0f4 <USB_DevInit>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e00d      	b.n	800bf32 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f004 f8ed 	bl	801010a <USB_DevDisconnect>

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d101      	bne.n	800bf56 <HAL_PCD_Start+0x1c>
 800bf52:	2302      	movs	r3, #2
 800bf54:	e020      	b.n	800bf98 <HAL_PCD_Start+0x5e>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d109      	bne.n	800bf7a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d005      	beq.n	800bf7a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f004 f8ab 	bl	80100da <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f003 f867 	bl	800f05c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b08d      	sub	sp, #52	; 0x34
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f004 f952 	bl	8010260 <USB_GetMode>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 838e 	bne.w	800c6e0 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f004 f8b6 	bl	801013a <USB_ReadInterrupts>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 8384 	beq.w	800c6de <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f004 f8ad 	bl	801013a <USB_ReadInterrupts>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f003 0302 	and.w	r3, r3, #2
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d107      	bne.n	800bffa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	695a      	ldr	r2, [r3, #20]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f002 0202 	and.w	r2, r2, #2
 800bff8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f004 f89b 	bl	801013a <USB_ReadInterrupts>
 800c004:	4603      	mov	r3, r0
 800c006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c00a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c00e:	d17b      	bne.n	800c108 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800c010:	2300      	movs	r3, #0
 800c012:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	f004 f8a1 	bl	8010160 <USB_ReadDevAllOutEpInterrupt>
 800c01e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c020:	e06f      	b.n	800c102 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	f003 0301 	and.w	r3, r3, #1
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d064      	beq.n	800c0f6 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	4611      	mov	r1, r2
 800c036:	4618      	mov	r0, r3
 800c038:	f004 f8c6 	bl	80101c8 <USB_ReadDevOutEPInterrupt>
 800c03c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c054:	461a      	mov	r2, r3
 800c056:	2301      	movs	r3, #1
 800c058:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c05a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fe0d 	bl	800cc7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	f003 0308 	and.w	r3, r3, #8
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00c      	beq.n	800c086 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 ff0c 	bl	800ce8c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c080:	461a      	mov	r2, r3
 800c082:	2308      	movs	r3, #8
 800c084:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	f003 0310 	and.w	r3, r3, #16
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09c:	461a      	mov	r2, r3
 800c09e:	2310      	movs	r3, #16
 800c0a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d015      	beq.n	800c0d8 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d108      	bne.n	800c0c6 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0be:	461a      	mov	r2, r3
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	f004 f911 	bl	80102e8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	015a      	lsls	r2, r3, #5
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	2320      	movs	r3, #32
 800c0d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d009      	beq.n	800c0f6 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	085b      	lsrs	r3, r3, #1
 800c100:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	2b00      	cmp	r3, #0
 800c106:	d18c      	bne.n	800c022 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f004 f814 	bl	801013a <USB_ReadInterrupts>
 800c112:	4603      	mov	r3, r0
 800c114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c118:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c11c:	f040 80c4 	bne.w	800c2a8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4618      	mov	r0, r3
 800c126:	f004 f835 	bl	8010194 <USB_ReadDevAllInEpInterrupt>
 800c12a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c130:	e0b6      	b.n	800c2a0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 80ab 	beq.w	800c294 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c144:	b2d2      	uxtb	r2, r2
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f004 f85b 	bl	8010204 <USB_ReadDevInEPInterrupt>
 800c14e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	2b00      	cmp	r3, #0
 800c158:	d05b      	beq.n	800c212 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	2201      	movs	r2, #1
 800c162:	fa02 f303 	lsl.w	r3, r2, r3
 800c166:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	43db      	mvns	r3, r3
 800c174:	69f9      	ldr	r1, [r7, #28]
 800c176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c17a:	4013      	ands	r3, r2
 800c17c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18a:	461a      	mov	r2, r3
 800c18c:	2301      	movs	r3, #1
 800c18e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d11b      	bne.n	800c1d0 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19c:	4613      	mov	r3, r2
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	3348      	adds	r3, #72	; 0x48
 800c1a8:	6819      	ldr	r1, [r3, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	1a9b      	subs	r3, r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4403      	add	r3, r0
 800c1b8:	3344      	adds	r3, #68	; 0x44
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4419      	add	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4403      	add	r3, r0
 800c1cc:	3348      	adds	r3, #72	; 0x48
 800c1ce:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f009 f8a1 	bl	801531e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d116      	bne.n	800c212 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d113      	bne.n	800c212 <HAL_PCD_IRQHandler+0x272>
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3350      	adds	r3, #80	; 0x50
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d108      	bne.n	800c212 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c20a:	461a      	mov	r2, r3
 800c20c:	2101      	movs	r1, #1
 800c20e:	f004 f86b 	bl	80102e8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	f003 0308 	and.w	r3, r3, #8
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d008      	beq.n	800c22e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	461a      	mov	r2, r3
 800c22a:	2308      	movs	r3, #8
 800c22c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	f003 0310 	and.w	r3, r3, #16
 800c234:	2b00      	cmp	r3, #0
 800c236:	d008      	beq.n	800c24a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	461a      	mov	r2, r3
 800c246:	2310      	movs	r3, #16
 800c248:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c250:	2b00      	cmp	r3, #0
 800c252:	d008      	beq.n	800c266 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	015a      	lsls	r2, r3, #5
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	4413      	add	r3, r2
 800c25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c260:	461a      	mov	r2, r3
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d008      	beq.n	800c282 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27c:	461a      	mov	r2, r3
 800c27e:	2302      	movs	r3, #2
 800c280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c28c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fc67 	bl	800cb62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	3301      	adds	r3, #1
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	085b      	lsrs	r3, r3, #1
 800c29e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f47f af45 	bne.w	800c132 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f003 ff44 	bl	801013a <USB_ReadInterrupts>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2bc:	d122      	bne.n	800c304 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	69fa      	ldr	r2, [r7, #28]
 800c2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2cc:	f023 0301 	bic.w	r3, r3, #1
 800c2d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d108      	bne.n	800c2ee <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fe88 	bl	800cffc <HAL_PCDEx_LPM_Callback>
 800c2ec:	e002      	b.n	800c2f4 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f009 f88c 	bl	801540c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	695a      	ldr	r2, [r3, #20]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4618      	mov	r0, r3
 800c30a:	f003 ff16 	bl	801013a <USB_ReadInterrupts>
 800c30e:	4603      	mov	r3, r0
 800c310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c318:	d112      	bne.n	800c340 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b01      	cmp	r3, #1
 800c328:	d102      	bne.n	800c330 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f009 f848 	bl	80153c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	695a      	ldr	r2, [r3, #20]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c33e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4618      	mov	r0, r3
 800c346:	f003 fef8 	bl	801013a <USB_ReadInterrupts>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c354:	f040 80a7 	bne.w	800c4a6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2110      	movs	r1, #16
 800c372:	4618      	mov	r0, r3
 800c374:	f003 f830 	bl	800f3d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c378:	2300      	movs	r3, #0
 800c37a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c37c:	e036      	b.n	800c3ec <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38a:	461a      	mov	r2, r3
 800c38c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c390:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	015a      	lsls	r2, r3, #5
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	4413      	add	r3, r2
 800c39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3a2:	0151      	lsls	r1, r2, #5
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	440a      	add	r2, r1
 800c3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d6:	0151      	lsls	r1, r2, #5
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	440a      	add	r2, r1
 800c3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d3c3      	bcc.n	800c37e <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	69fa      	ldr	r2, [r7, #28]
 800c400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c404:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c408:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d016      	beq.n	800c440 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c41c:	69fa      	ldr	r2, [r7, #28]
 800c41e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c422:	f043 030b 	orr.w	r3, r3, #11
 800c426:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c432:	69fa      	ldr	r2, [r7, #28]
 800c434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c438:	f043 030b 	orr.w	r3, r3, #11
 800c43c:	6453      	str	r3, [r2, #68]	; 0x44
 800c43e:	e015      	b.n	800c46c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c44e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c452:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c456:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	69fa      	ldr	r2, [r7, #28]
 800c462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c466:	f043 030b 	orr.w	r3, r3, #11
 800c46a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	69fa      	ldr	r2, [r7, #28]
 800c476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c47a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c47e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c490:	461a      	mov	r2, r3
 800c492:	f003 ff29 	bl	80102e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	695a      	ldr	r2, [r3, #20]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c4a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f003 fe45 	bl	801013a <USB_ReadInterrupts>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4ba:	d124      	bne.n	800c506 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f003 fedb 	bl	801027c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f002 ffe5 	bl	800f49a <USB_GetDevSpeed>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681c      	ldr	r4, [r3, #0]
 800c4dc:	f001 f9c8 	bl	800d870 <HAL_RCC_GetHCLKFreq>
 800c4e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f002 fd14 	bl	800ef18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f008 ff3c 	bl	801536e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	695a      	ldr	r2, [r3, #20]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c504:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f003 fe15 	bl	801013a <USB_ReadInterrupts>
 800c510:	4603      	mov	r3, r0
 800c512:	f003 0310 	and.w	r3, r3, #16
 800c516:	2b10      	cmp	r3, #16
 800c518:	d161      	bne.n	800c5de <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699a      	ldr	r2, [r3, #24]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f022 0210 	bic.w	r2, r2, #16
 800c528:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f003 020f 	and.w	r2, r3, #15
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	4413      	add	r3, r2
 800c546:	3304      	adds	r3, #4
 800c548:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	0c5b      	lsrs	r3, r3, #17
 800c54e:	f003 030f 	and.w	r3, r3, #15
 800c552:	2b02      	cmp	r3, #2
 800c554:	d124      	bne.n	800c5a0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c556:	693a      	ldr	r2, [r7, #16]
 800c558:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c55c:	4013      	ands	r3, r2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d035      	beq.n	800c5ce <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c56c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c570:	b29b      	uxth	r3, r3
 800c572:	461a      	mov	r2, r3
 800c574:	6a38      	ldr	r0, [r7, #32]
 800c576:	f003 fc8d 	bl	800fe94 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68da      	ldr	r2, [r3, #12]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	091b      	lsrs	r3, r3, #4
 800c582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c586:	441a      	add	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	699a      	ldr	r2, [r3, #24]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	091b      	lsrs	r3, r3, #4
 800c594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c598:	441a      	add	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	619a      	str	r2, [r3, #24]
 800c59e:	e016      	b.n	800c5ce <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	0c5b      	lsrs	r3, r3, #17
 800c5a4:	f003 030f 	and.w	r3, r3, #15
 800c5a8:	2b06      	cmp	r3, #6
 800c5aa:	d110      	bne.n	800c5ce <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5b2:	2208      	movs	r2, #8
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6a38      	ldr	r0, [r7, #32]
 800c5b8:	f003 fc6c 	bl	800fe94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	699a      	ldr	r2, [r3, #24]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	091b      	lsrs	r3, r3, #4
 800c5c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5c8:	441a      	add	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	699a      	ldr	r2, [r3, #24]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f042 0210 	orr.w	r2, r2, #16
 800c5dc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f003 fda9 	bl	801013a <USB_ReadInterrupts>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	f003 0308 	and.w	r3, r3, #8
 800c5ee:	2b08      	cmp	r3, #8
 800c5f0:	d10a      	bne.n	800c608 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f008 fead 	bl	8015352 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	695a      	ldr	r2, [r3, #20]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f002 0208 	and.w	r2, r2, #8
 800c606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f003 fd94 	bl	801013a <USB_ReadInterrupts>
 800c612:	4603      	mov	r3, r0
 800c614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c61c:	d10f      	bne.n	800c63e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c61e:	2300      	movs	r3, #0
 800c620:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	b2db      	uxtb	r3, r3
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f008 ff0f 	bl	801544c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	695a      	ldr	r2, [r3, #20]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c63c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f003 fd79 	bl	801013a <USB_ReadInterrupts>
 800c648:	4603      	mov	r3, r0
 800c64a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c64e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c652:	d10f      	bne.n	800c674 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c654:	2300      	movs	r3, #0
 800c656:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	4619      	mov	r1, r3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f008 fee2 	bl	8015428 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	695a      	ldr	r2, [r3, #20]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4618      	mov	r0, r3
 800c67a:	f003 fd5e 	bl	801013a <USB_ReadInterrupts>
 800c67e:	4603      	mov	r3, r0
 800c680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c688:	d10a      	bne.n	800c6a0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f008 fef0 	bl	8015470 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	695a      	ldr	r2, [r3, #20]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c69e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f003 fd48 	bl	801013a <USB_ReadInterrupts>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d115      	bne.n	800c6e0 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f003 0304 	and.w	r3, r3, #4
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d002      	beq.n	800c6cc <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f008 fee0 	bl	801548c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6859      	ldr	r1, [r3, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	605a      	str	r2, [r3, #4]
 800c6dc:	e000      	b.n	800c6e0 <HAL_PCD_IRQHandler+0x740>
      return;
 800c6de:	bf00      	nop
    }
  }
}
 800c6e0:	3734      	adds	r7, #52	; 0x34
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd90      	pop	{r4, r7, pc}

0800c6e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d101      	bne.n	800c700 <HAL_PCD_SetAddress+0x1a>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e013      	b.n	800c728 <HAL_PCD_SetAddress+0x42>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	78fa      	ldrb	r2, [r7, #3]
 800c70c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	78fa      	ldrb	r2, [r7, #3]
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f003 fcb8 	bl	801008e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	4608      	mov	r0, r1
 800c73a:	4611      	mov	r1, r2
 800c73c:	461a      	mov	r2, r3
 800c73e:	4603      	mov	r3, r0
 800c740:	70fb      	strb	r3, [r7, #3]
 800c742:	460b      	mov	r3, r1
 800c744:	803b      	strh	r3, [r7, #0]
 800c746:	4613      	mov	r3, r2
 800c748:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c752:	2b00      	cmp	r3, #0
 800c754:	da0f      	bge.n	800c776 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	f003 020f 	and.w	r2, r3, #15
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	1a9b      	subs	r3, r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	3338      	adds	r3, #56	; 0x38
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4413      	add	r3, r2
 800c76a:	3304      	adds	r3, #4
 800c76c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2201      	movs	r2, #1
 800c772:	705a      	strb	r2, [r3, #1]
 800c774:	e00f      	b.n	800c796 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c776:	78fb      	ldrb	r3, [r7, #3]
 800c778:	f003 020f 	and.w	r2, r3, #15
 800c77c:	4613      	mov	r3, r2
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	1a9b      	subs	r3, r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	4413      	add	r3, r2
 800c78c:	3304      	adds	r3, #4
 800c78e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c796:	78fb      	ldrb	r3, [r7, #3]
 800c798:	f003 030f 	and.w	r3, r3, #15
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c7a2:	883a      	ldrh	r2, [r7, #0]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	78ba      	ldrb	r2, [r7, #2]
 800c7ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c7c0:	78bb      	ldrb	r3, [r7, #2]
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d102      	bne.n	800c7cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d101      	bne.n	800c7da <HAL_PCD_EP_Open+0xaa>
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e00e      	b.n	800c7f8 <HAL_PCD_EP_Open+0xc8>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f002 fe7b 	bl	800f4e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c80c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c810:	2b00      	cmp	r3, #0
 800c812:	da0f      	bge.n	800c834 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	f003 020f 	and.w	r2, r3, #15
 800c81a:	4613      	mov	r3, r2
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	1a9b      	subs	r3, r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	3338      	adds	r3, #56	; 0x38
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	4413      	add	r3, r2
 800c828:	3304      	adds	r3, #4
 800c82a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2201      	movs	r2, #1
 800c830:	705a      	strb	r2, [r3, #1]
 800c832:	e00f      	b.n	800c854 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	f003 020f 	and.w	r2, r3, #15
 800c83a:	4613      	mov	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	4413      	add	r3, r2
 800c84a:	3304      	adds	r3, #4
 800c84c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	f003 030f 	and.w	r3, r3, #15
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_PCD_EP_Close+0x6e>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e00e      	b.n	800c88c <HAL_PCD_EP_Close+0x8c>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68f9      	ldr	r1, [r7, #12]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f002 feb9 	bl	800f5f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	607a      	str	r2, [r7, #4]
 800c89e:	603b      	str	r3, [r7, #0]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	f003 020f 	and.w	r2, r3, #15
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	1a9b      	subs	r3, r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	f003 030f 	and.w	r3, r3, #15
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d102      	bne.n	800c8f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c8f0:	7afb      	ldrb	r3, [r7, #11]
 800c8f2:	f003 030f 	and.w	r3, r3, #15
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d109      	bne.n	800c90e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6818      	ldr	r0, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	461a      	mov	r2, r3
 800c906:	6979      	ldr	r1, [r7, #20]
 800c908:	f003 f93c 	bl	800fb84 <USB_EP0StartXfer>
 800c90c:	e008      	b.n	800c920 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	461a      	mov	r2, r3
 800c91a:	6979      	ldr	r1, [r7, #20]
 800c91c:	f002 feee 	bl	800f6fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c936:	78fb      	ldrb	r3, [r7, #3]
 800c938:	f003 020f 	and.w	r2, r3, #15
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	1a9b      	subs	r3, r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c94c:	681b      	ldr	r3, [r3, #0]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b086      	sub	sp, #24
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
 800c966:	460b      	mov	r3, r1
 800c968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c96a:	7afb      	ldrb	r3, [r7, #11]
 800c96c:	f003 020f 	and.w	r2, r3, #15
 800c970:	4613      	mov	r3, r2
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	1a9b      	subs	r3, r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	3338      	adds	r3, #56	; 0x38
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	4413      	add	r3, r2
 800c97e:	3304      	adds	r3, #4
 800c980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2201      	movs	r2, #1
 800c998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c99a:	7afb      	ldrb	r3, [r7, #11]
 800c99c:	f003 030f 	and.w	r3, r3, #15
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d102      	bne.n	800c9b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c9b4:	7afb      	ldrb	r3, [r7, #11]
 800c9b6:	f003 030f 	and.w	r3, r3, #15
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d109      	bne.n	800c9d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6979      	ldr	r1, [r7, #20]
 800c9cc:	f003 f8da 	bl	800fb84 <USB_EP0StartXfer>
 800c9d0:	e008      	b.n	800c9e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	6979      	ldr	r1, [r7, #20]
 800c9e0:	f002 fe8c 	bl	800f6fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c9fa:	78fb      	ldrb	r3, [r7, #3]
 800c9fc:	f003 020f 	and.w	r2, r3, #15
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d901      	bls.n	800ca0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e050      	b.n	800caae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	da0f      	bge.n	800ca34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	f003 020f 	and.w	r2, r3, #15
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	3338      	adds	r3, #56	; 0x38
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4413      	add	r3, r2
 800ca28:	3304      	adds	r3, #4
 800ca2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	705a      	strb	r2, [r3, #1]
 800ca32:	e00d      	b.n	800ca50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ca34:	78fa      	ldrb	r2, [r7, #3]
 800ca36:	4613      	mov	r3, r2
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	4413      	add	r3, r2
 800ca46:	3304      	adds	r3, #4
 800ca48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_PCD_EP_SetStall+0x82>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e01e      	b.n	800caae <HAL_PCD_EP_SetStall+0xc0>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68f9      	ldr	r1, [r7, #12]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f003 fa31 	bl	800fee6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	f003 030f 	and.w	r3, r3, #15
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10a      	bne.n	800caa4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	b2d9      	uxtb	r1, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f003 fc22 	bl	80102e8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cac2:	78fb      	ldrb	r3, [r7, #3]
 800cac4:	f003 020f 	and.w	r2, r3, #15
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d901      	bls.n	800cad4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e042      	b.n	800cb5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	da0f      	bge.n	800cafc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	f003 020f 	and.w	r2, r3, #15
 800cae2:	4613      	mov	r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	1a9b      	subs	r3, r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	3338      	adds	r3, #56	; 0x38
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	4413      	add	r3, r2
 800caf0:	3304      	adds	r3, #4
 800caf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	705a      	strb	r2, [r3, #1]
 800cafa:	e00f      	b.n	800cb1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cafc:	78fb      	ldrb	r3, [r7, #3]
 800cafe:	f003 020f 	and.w	r2, r3, #15
 800cb02:	4613      	mov	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	4413      	add	r3, r2
 800cb12:	3304      	adds	r3, #4
 800cb14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d101      	bne.n	800cb3c <HAL_PCD_EP_ClrStall+0x86>
 800cb38:	2302      	movs	r3, #2
 800cb3a:	e00e      	b.n	800cb5a <HAL_PCD_EP_ClrStall+0xa4>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68f9      	ldr	r1, [r7, #12]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f003 fa39 	bl	800ffc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b08a      	sub	sp, #40	; 0x28
 800cb66:	af02      	add	r7, sp, #8
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	1a9b      	subs	r3, r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	3338      	adds	r3, #56	; 0x38
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	4413      	add	r3, r2
 800cb86:	3304      	adds	r3, #4
 800cb88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	699a      	ldr	r2, [r3, #24]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d901      	bls.n	800cb9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e06c      	b.n	800cc74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	695a      	ldr	r2, [r3, #20]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d902      	bls.n	800cbb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	3303      	adds	r3, #3
 800cbba:	089b      	lsrs	r3, r3, #2
 800cbbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbbe:	e02b      	b.n	800cc18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	695a      	ldr	r2, [r3, #20]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d902      	bls.n	800cbdc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	3303      	adds	r3, #3
 800cbe0:	089b      	lsrs	r3, r3, #2
 800cbe2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	68d9      	ldr	r1, [r3, #12]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	6978      	ldr	r0, [r7, #20]
 800cbfc:	f003 f915 	bl	800fe2a <USB_WritePacket>

    ep->xfer_buff  += len;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	441a      	add	r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	699a      	ldr	r2, [r3, #24]
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	441a      	add	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	69ba      	ldr	r2, [r7, #24]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d809      	bhi.n	800cc42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	699a      	ldr	r2, [r3, #24]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d203      	bcs.n	800cc42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1be      	bne.n	800cbc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	695a      	ldr	r2, [r3, #20]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d811      	bhi.n	800cc72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	2201      	movs	r2, #1
 800cc56:	fa02 f303 	lsl.w	r3, r2, r3
 800cc5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	43db      	mvns	r3, r3
 800cc68:	6939      	ldr	r1, [r7, #16]
 800cc6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc6e:	4013      	ands	r3, r2
 800cc70:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3720      	adds	r7, #32
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	333c      	adds	r3, #60	; 0x3c
 800cc94:	3304      	adds	r3, #4
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	015a      	lsls	r2, r3, #5
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	4413      	add	r3, r2
 800cca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	f040 80b3 	bne.w	800ce1a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f003 0308 	and.w	r3, r3, #8
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d028      	beq.n	800cd10 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4a70      	ldr	r2, [pc, #448]	; (800ce84 <PCD_EP_OutXfrComplete_int+0x208>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d90e      	bls.n	800cce4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d009      	beq.n	800cce4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cce2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f008 faed 	bl	80152c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	f003 faf6 	bl	80102e8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	015a      	lsls	r2, r3, #5
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	4413      	add	r3, r2
 800cd04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd08:	461a      	mov	r2, r3
 800cd0a:	2308      	movs	r3, #8
 800cd0c:	6093      	str	r3, [r2, #8]
 800cd0e:	e0b3      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	f003 0320 	and.w	r3, r3, #32
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d009      	beq.n	800cd2e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	015a      	lsls	r2, r3, #5
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	4413      	add	r3, r2
 800cd22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd26:	461a      	mov	r2, r3
 800cd28:	2320      	movs	r3, #32
 800cd2a:	6093      	str	r3, [r2, #8]
 800cd2c:	e0a4      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f040 809f 	bne.w	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	4a51      	ldr	r2, [pc, #324]	; (800ce84 <PCD_EP_OutXfrComplete_int+0x208>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d90f      	bls.n	800cd62 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00a      	beq.n	800cd62 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd5e:	6093      	str	r3, [r2, #8]
 800cd60:	e08a      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	4613      	mov	r3, r2
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	1a9b      	subs	r3, r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	440b      	add	r3, r1
 800cd70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cd74:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	0159      	lsls	r1, r3, #5
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	440b      	add	r3, r1
 800cd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800cd88:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	1a9b      	subs	r3, r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4403      	add	r3, r0
 800cd98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cd9c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	4613      	mov	r3, r2
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	1a9b      	subs	r3, r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	440b      	add	r3, r1
 800cdac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cdb0:	6819      	ldr	r1, [r3, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	1a9b      	subs	r3, r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4403      	add	r3, r0
 800cdc0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4419      	add	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	1a9b      	subs	r3, r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4403      	add	r3, r0
 800cdd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cdda:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f008 fa80 	bl	80152e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d144      	bne.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	1a9b      	subs	r3, r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	440b      	add	r3, r1
 800cdfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d138      	bne.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce10:	461a      	mov	r2, r3
 800ce12:	2101      	movs	r1, #1
 800ce14:	f003 fa68 	bl	80102e8 <USB_EP0_OutStart>
 800ce18:	e02e      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <PCD_EP_OutXfrComplete_int+0x20c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d124      	bne.n	800ce6c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00a      	beq.n	800ce42 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce38:	461a      	mov	r2, r3
 800ce3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce3e:	6093      	str	r3, [r2, #8]
 800ce40:	e01a      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f003 0320 	and.w	r3, r3, #32
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d008      	beq.n	800ce5e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	015a      	lsls	r2, r3, #5
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2320      	movs	r3, #32
 800ce5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f008 fa3f 	bl	80152e8 <HAL_PCD_DataOutStageCallback>
 800ce6a:	e005      	b.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f008 fa38 	bl	80152e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	4f54300a 	.word	0x4f54300a
 800ce88:	4f54310a 	.word	0x4f54310a

0800ce8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	333c      	adds	r3, #60	; 0x3c
 800cea4:	3304      	adds	r3, #4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d113      	bne.n	800ceea <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <PCD_EP_OutSetupPacket_int+0xb8>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d922      	bls.n	800cf10 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01d      	beq.n	800cf10 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee0:	461a      	mov	r2, r3
 800cee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cee6:	6093      	str	r3, [r2, #8]
 800cee8:	e012      	b.n	800cf10 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	4a16      	ldr	r2, [pc, #88]	; (800cf48 <PCD_EP_OutSetupPacket_int+0xbc>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d10e      	bne.n	800cf10 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d009      	beq.n	800cf10 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	015a      	lsls	r2, r3, #5
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	4413      	add	r3, r2
 800cf04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf08:	461a      	mov	r2, r3
 800cf0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f008 f9d7 	bl	80152c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4a0a      	ldr	r2, [pc, #40]	; (800cf44 <PCD_EP_OutSetupPacket_int+0xb8>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d90c      	bls.n	800cf38 <PCD_EP_OutSetupPacket_int+0xac>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d108      	bne.n	800cf38 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf30:	461a      	mov	r2, r3
 800cf32:	2101      	movs	r1, #1
 800cf34:	f003 f9d8 	bl	80102e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3718      	adds	r7, #24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	4f54300a 	.word	0x4f54300a
 800cf48:	4f54310a 	.word	0x4f54310a

0800cf4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cf64:	78fb      	ldrb	r3, [r7, #3]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d107      	bne.n	800cf7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cf6a:	883b      	ldrh	r3, [r7, #0]
 800cf6c:	0419      	lsls	r1, r3, #16
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	430a      	orrs	r2, r1
 800cf76:	629a      	str	r2, [r3, #40]	; 0x28
 800cf78:	e028      	b.n	800cfcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf80:	0c1b      	lsrs	r3, r3, #16
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	4413      	add	r3, r2
 800cf86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	73fb      	strb	r3, [r7, #15]
 800cf8c:	e00d      	b.n	800cfaa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	3340      	adds	r3, #64	; 0x40
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	0c1b      	lsrs	r3, r3, #16
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	73fb      	strb	r3, [r7, #15]
 800cfaa:	7bfa      	ldrb	r2, [r7, #15]
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d3ec      	bcc.n	800cf8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cfb4:	883b      	ldrh	r3, [r7, #0]
 800cfb6:	0418      	lsls	r0, r3, #16
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6819      	ldr	r1, [r3, #0]
 800cfbc:	78fb      	ldrb	r3, [r7, #3]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	4302      	orrs	r2, r0
 800cfc4:	3340      	adds	r3, #64	; 0x40
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	440b      	add	r3, r1
 800cfca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b083      	sub	sp, #12
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	887a      	ldrh	r2, [r7, #2]
 800cfec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e25b      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d075      	beq.n	800d11e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d032:	4ba3      	ldr	r3, [pc, #652]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f003 030c 	and.w	r3, r3, #12
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	d00c      	beq.n	800d058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d03e:	4ba0      	ldr	r3, [pc, #640]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d046:	2b08      	cmp	r3, #8
 800d048:	d112      	bne.n	800d070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d04a:	4b9d      	ldr	r3, [pc, #628]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d056:	d10b      	bne.n	800d070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d058:	4b99      	ldr	r3, [pc, #612]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d05b      	beq.n	800d11c <HAL_RCC_OscConfig+0x108>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d157      	bne.n	800d11c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e236      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d078:	d106      	bne.n	800d088 <HAL_RCC_OscConfig+0x74>
 800d07a:	4b91      	ldr	r3, [pc, #580]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a90      	ldr	r2, [pc, #576]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	e01d      	b.n	800d0c4 <HAL_RCC_OscConfig+0xb0>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d090:	d10c      	bne.n	800d0ac <HAL_RCC_OscConfig+0x98>
 800d092:	4b8b      	ldr	r3, [pc, #556]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a8a      	ldr	r2, [pc, #552]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	4b88      	ldr	r3, [pc, #544]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a87      	ldr	r2, [pc, #540]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0a8:	6013      	str	r3, [r2, #0]
 800d0aa:	e00b      	b.n	800d0c4 <HAL_RCC_OscConfig+0xb0>
 800d0ac:	4b84      	ldr	r3, [pc, #528]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a83      	ldr	r2, [pc, #524]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	4b81      	ldr	r3, [pc, #516]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a80      	ldr	r2, [pc, #512]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d013      	beq.n	800d0f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0cc:	f7fd ff60 	bl	800af90 <HAL_GetTick>
 800d0d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0d2:	e008      	b.n	800d0e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0d4:	f7fd ff5c 	bl	800af90 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b64      	cmp	r3, #100	; 0x64
 800d0e0:	d901      	bls.n	800d0e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	e1fb      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0e6:	4b76      	ldr	r3, [pc, #472]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0f0      	beq.n	800d0d4 <HAL_RCC_OscConfig+0xc0>
 800d0f2:	e014      	b.n	800d11e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0f4:	f7fd ff4c 	bl	800af90 <HAL_GetTick>
 800d0f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0fa:	e008      	b.n	800d10e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0fc:	f7fd ff48 	bl	800af90 <HAL_GetTick>
 800d100:	4602      	mov	r2, r0
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	2b64      	cmp	r3, #100	; 0x64
 800d108:	d901      	bls.n	800d10e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d10a:	2303      	movs	r3, #3
 800d10c:	e1e7      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d10e:	4b6c      	ldr	r3, [pc, #432]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1f0      	bne.n	800d0fc <HAL_RCC_OscConfig+0xe8>
 800d11a:	e000      	b.n	800d11e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d11c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0302 	and.w	r3, r3, #2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d063      	beq.n	800d1f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d12a:	4b65      	ldr	r3, [pc, #404]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f003 030c 	and.w	r3, r3, #12
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00b      	beq.n	800d14e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d136:	4b62      	ldr	r3, [pc, #392]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d13e:	2b08      	cmp	r3, #8
 800d140:	d11c      	bne.n	800d17c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d142:	4b5f      	ldr	r3, [pc, #380]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d116      	bne.n	800d17c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d14e:	4b5c      	ldr	r3, [pc, #368]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f003 0302 	and.w	r3, r3, #2
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <HAL_RCC_OscConfig+0x152>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d001      	beq.n	800d166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e1bb      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d166:	4b56      	ldr	r3, [pc, #344]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	4952      	ldr	r1, [pc, #328]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d176:	4313      	orrs	r3, r2
 800d178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d17a:	e03a      	b.n	800d1f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d020      	beq.n	800d1c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d184:	4b4f      	ldr	r3, [pc, #316]	; (800d2c4 <HAL_RCC_OscConfig+0x2b0>)
 800d186:	2201      	movs	r2, #1
 800d188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d18a:	f7fd ff01 	bl	800af90 <HAL_GetTick>
 800d18e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d190:	e008      	b.n	800d1a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d192:	f7fd fefd 	bl	800af90 <HAL_GetTick>
 800d196:	4602      	mov	r2, r0
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d901      	bls.n	800d1a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e19c      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d1a4:	4b46      	ldr	r3, [pc, #280]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0302 	and.w	r3, r3, #2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0f0      	beq.n	800d192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1b0:	4b43      	ldr	r3, [pc, #268]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	4940      	ldr	r1, [pc, #256]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	600b      	str	r3, [r1, #0]
 800d1c4:	e015      	b.n	800d1f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1c6:	4b3f      	ldr	r3, [pc, #252]	; (800d2c4 <HAL_RCC_OscConfig+0x2b0>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1cc:	f7fd fee0 	bl	800af90 <HAL_GetTick>
 800d1d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d1d2:	e008      	b.n	800d1e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d1d4:	f7fd fedc 	bl	800af90 <HAL_GetTick>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d901      	bls.n	800d1e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	e17b      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d1e6:	4b36      	ldr	r3, [pc, #216]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1f0      	bne.n	800d1d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 0308 	and.w	r3, r3, #8
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d030      	beq.n	800d260 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d016      	beq.n	800d234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d206:	4b30      	ldr	r3, [pc, #192]	; (800d2c8 <HAL_RCC_OscConfig+0x2b4>)
 800d208:	2201      	movs	r2, #1
 800d20a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d20c:	f7fd fec0 	bl	800af90 <HAL_GetTick>
 800d210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d212:	e008      	b.n	800d226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d214:	f7fd febc 	bl	800af90 <HAL_GetTick>
 800d218:	4602      	mov	r2, r0
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d901      	bls.n	800d226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e15b      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d226:	4b26      	ldr	r3, [pc, #152]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d0f0      	beq.n	800d214 <HAL_RCC_OscConfig+0x200>
 800d232:	e015      	b.n	800d260 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d234:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <HAL_RCC_OscConfig+0x2b4>)
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d23a:	f7fd fea9 	bl	800af90 <HAL_GetTick>
 800d23e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d240:	e008      	b.n	800d254 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d242:	f7fd fea5 	bl	800af90 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d901      	bls.n	800d254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	e144      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d254:	4b1a      	ldr	r3, [pc, #104]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1f0      	bne.n	800d242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 80a0 	beq.w	800d3ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d26e:	2300      	movs	r3, #0
 800d270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d272:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10f      	bne.n	800d29e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d27e:	2300      	movs	r3, #0
 800d280:	60bb      	str	r3, [r7, #8]
 800d282:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	4a0e      	ldr	r2, [pc, #56]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d28c:	6413      	str	r3, [r2, #64]	; 0x40
 800d28e:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <HAL_RCC_OscConfig+0x2ac>)
 800d290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d296:	60bb      	str	r3, [r7, #8]
 800d298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d29a:	2301      	movs	r3, #1
 800d29c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d29e:	4b0b      	ldr	r3, [pc, #44]	; (800d2cc <HAL_RCC_OscConfig+0x2b8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d121      	bne.n	800d2ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d2aa:	4b08      	ldr	r3, [pc, #32]	; (800d2cc <HAL_RCC_OscConfig+0x2b8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a07      	ldr	r2, [pc, #28]	; (800d2cc <HAL_RCC_OscConfig+0x2b8>)
 800d2b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d2b6:	f7fd fe6b 	bl	800af90 <HAL_GetTick>
 800d2ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2bc:	e011      	b.n	800d2e2 <HAL_RCC_OscConfig+0x2ce>
 800d2be:	bf00      	nop
 800d2c0:	40023800 	.word	0x40023800
 800d2c4:	42470000 	.word	0x42470000
 800d2c8:	42470e80 	.word	0x42470e80
 800d2cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2d0:	f7fd fe5e 	bl	800af90 <HAL_GetTick>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d901      	bls.n	800d2e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	e0fd      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2e2:	4b81      	ldr	r3, [pc, #516]	; (800d4e8 <HAL_RCC_OscConfig+0x4d4>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0f0      	beq.n	800d2d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d106      	bne.n	800d304 <HAL_RCC_OscConfig+0x2f0>
 800d2f6:	4b7d      	ldr	r3, [pc, #500]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2fa:	4a7c      	ldr	r2, [pc, #496]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d2fc:	f043 0301 	orr.w	r3, r3, #1
 800d300:	6713      	str	r3, [r2, #112]	; 0x70
 800d302:	e01c      	b.n	800d33e <HAL_RCC_OscConfig+0x32a>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	2b05      	cmp	r3, #5
 800d30a:	d10c      	bne.n	800d326 <HAL_RCC_OscConfig+0x312>
 800d30c:	4b77      	ldr	r3, [pc, #476]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d310:	4a76      	ldr	r2, [pc, #472]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d312:	f043 0304 	orr.w	r3, r3, #4
 800d316:	6713      	str	r3, [r2, #112]	; 0x70
 800d318:	4b74      	ldr	r3, [pc, #464]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31c:	4a73      	ldr	r2, [pc, #460]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d31e:	f043 0301 	orr.w	r3, r3, #1
 800d322:	6713      	str	r3, [r2, #112]	; 0x70
 800d324:	e00b      	b.n	800d33e <HAL_RCC_OscConfig+0x32a>
 800d326:	4b71      	ldr	r3, [pc, #452]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32a:	4a70      	ldr	r2, [pc, #448]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d32c:	f023 0301 	bic.w	r3, r3, #1
 800d330:	6713      	str	r3, [r2, #112]	; 0x70
 800d332:	4b6e      	ldr	r3, [pc, #440]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d336:	4a6d      	ldr	r2, [pc, #436]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d338:	f023 0304 	bic.w	r3, r3, #4
 800d33c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d015      	beq.n	800d372 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d346:	f7fd fe23 	bl	800af90 <HAL_GetTick>
 800d34a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d34c:	e00a      	b.n	800d364 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d34e:	f7fd fe1f 	bl	800af90 <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	f241 3288 	movw	r2, #5000	; 0x1388
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d901      	bls.n	800d364 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e0bc      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d364:	4b61      	ldr	r3, [pc, #388]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d368:	f003 0302 	and.w	r3, r3, #2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0ee      	beq.n	800d34e <HAL_RCC_OscConfig+0x33a>
 800d370:	e014      	b.n	800d39c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d372:	f7fd fe0d 	bl	800af90 <HAL_GetTick>
 800d376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d378:	e00a      	b.n	800d390 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d37a:	f7fd fe09 	bl	800af90 <HAL_GetTick>
 800d37e:	4602      	mov	r2, r0
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	f241 3288 	movw	r2, #5000	; 0x1388
 800d388:	4293      	cmp	r3, r2
 800d38a:	d901      	bls.n	800d390 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e0a6      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d390:	4b56      	ldr	r3, [pc, #344]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1ee      	bne.n	800d37a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d105      	bne.n	800d3ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3a2:	4b52      	ldr	r3, [pc, #328]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a6:	4a51      	ldr	r2, [pc, #324]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d3a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f000 8092 	beq.w	800d4dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d3b8:	4b4c      	ldr	r3, [pc, #304]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f003 030c 	and.w	r3, r3, #12
 800d3c0:	2b08      	cmp	r3, #8
 800d3c2:	d05c      	beq.n	800d47e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d141      	bne.n	800d450 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3cc:	4b48      	ldr	r3, [pc, #288]	; (800d4f0 <HAL_RCC_OscConfig+0x4dc>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3d2:	f7fd fddd 	bl	800af90 <HAL_GetTick>
 800d3d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3d8:	e008      	b.n	800d3ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3da:	f7fd fdd9 	bl	800af90 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d901      	bls.n	800d3ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e078      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3ec:	4b3f      	ldr	r3, [pc, #252]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1f0      	bne.n	800d3da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	69da      	ldr	r2, [r3, #28]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	431a      	orrs	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	019b      	lsls	r3, r3, #6
 800d408:	431a      	orrs	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40e:	085b      	lsrs	r3, r3, #1
 800d410:	3b01      	subs	r3, #1
 800d412:	041b      	lsls	r3, r3, #16
 800d414:	431a      	orrs	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	061b      	lsls	r3, r3, #24
 800d41c:	4933      	ldr	r1, [pc, #204]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d422:	4b33      	ldr	r3, [pc, #204]	; (800d4f0 <HAL_RCC_OscConfig+0x4dc>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d428:	f7fd fdb2 	bl	800af90 <HAL_GetTick>
 800d42c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d42e:	e008      	b.n	800d442 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d430:	f7fd fdae 	bl	800af90 <HAL_GetTick>
 800d434:	4602      	mov	r2, r0
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d901      	bls.n	800d442 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e04d      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d442:	4b2a      	ldr	r3, [pc, #168]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0f0      	beq.n	800d430 <HAL_RCC_OscConfig+0x41c>
 800d44e:	e045      	b.n	800d4dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d450:	4b27      	ldr	r3, [pc, #156]	; (800d4f0 <HAL_RCC_OscConfig+0x4dc>)
 800d452:	2200      	movs	r2, #0
 800d454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d456:	f7fd fd9b 	bl	800af90 <HAL_GetTick>
 800d45a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d45c:	e008      	b.n	800d470 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d45e:	f7fd fd97 	bl	800af90 <HAL_GetTick>
 800d462:	4602      	mov	r2, r0
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d901      	bls.n	800d470 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e036      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d470:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1f0      	bne.n	800d45e <HAL_RCC_OscConfig+0x44a>
 800d47c:	e02e      	b.n	800d4dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d101      	bne.n	800d48a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e029      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d48a:	4b18      	ldr	r3, [pc, #96]	; (800d4ec <HAL_RCC_OscConfig+0x4d8>)
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d11c      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d115      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d10d      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d106      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d001      	beq.n	800d4dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	40007000 	.word	0x40007000
 800d4ec:	40023800 	.word	0x40023800
 800d4f0:	42470060 	.word	0x42470060

0800d4f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e0cc      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d508:	4b68      	ldr	r3, [pc, #416]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 030f 	and.w	r3, r3, #15
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d90c      	bls.n	800d530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d516:	4b65      	ldr	r3, [pc, #404]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	b2d2      	uxtb	r2, r2
 800d51c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d51e:	4b63      	ldr	r3, [pc, #396]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 030f 	and.w	r3, r3, #15
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d001      	beq.n	800d530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	e0b8      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0302 	and.w	r3, r3, #2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d020      	beq.n	800d57e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	2b00      	cmp	r3, #0
 800d546:	d005      	beq.n	800d554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d548:	4b59      	ldr	r3, [pc, #356]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	4a58      	ldr	r2, [pc, #352]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d54e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f003 0308 	and.w	r3, r3, #8
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d005      	beq.n	800d56c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d560:	4b53      	ldr	r3, [pc, #332]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	4a52      	ldr	r2, [pc, #328]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d56a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d56c:	4b50      	ldr	r3, [pc, #320]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	494d      	ldr	r1, [pc, #308]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d57a:	4313      	orrs	r3, r2
 800d57c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d044      	beq.n	800d614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d107      	bne.n	800d5a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d592:	4b47      	ldr	r3, [pc, #284]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d119      	bne.n	800d5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e07f      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d003      	beq.n	800d5b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	d107      	bne.n	800d5c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5b2:	4b3f      	ldr	r3, [pc, #252]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e06f      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5c2:	4b3b      	ldr	r3, [pc, #236]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e067      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d5d2:	4b37      	ldr	r3, [pc, #220]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	f023 0203 	bic.w	r2, r3, #3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	4934      	ldr	r1, [pc, #208]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d5e4:	f7fd fcd4 	bl	800af90 <HAL_GetTick>
 800d5e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5ea:	e00a      	b.n	800d602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5ec:	f7fd fcd0 	bl	800af90 <HAL_GetTick>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d901      	bls.n	800d602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e04f      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d602:	4b2b      	ldr	r3, [pc, #172]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f003 020c 	and.w	r2, r3, #12
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	429a      	cmp	r2, r3
 800d612:	d1eb      	bne.n	800d5ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d614:	4b25      	ldr	r3, [pc, #148]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 030f 	and.w	r3, r3, #15
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d20c      	bcs.n	800d63c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d622:	4b22      	ldr	r3, [pc, #136]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	b2d2      	uxtb	r2, r2
 800d628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d62a:	4b20      	ldr	r3, [pc, #128]	; (800d6ac <HAL_RCC_ClockConfig+0x1b8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 030f 	and.w	r3, r3, #15
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d001      	beq.n	800d63c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e032      	b.n	800d6a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f003 0304 	and.w	r3, r3, #4
 800d644:	2b00      	cmp	r3, #0
 800d646:	d008      	beq.n	800d65a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d648:	4b19      	ldr	r3, [pc, #100]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	4916      	ldr	r1, [pc, #88]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d656:	4313      	orrs	r3, r2
 800d658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f003 0308 	and.w	r3, r3, #8
 800d662:	2b00      	cmp	r3, #0
 800d664:	d009      	beq.n	800d67a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d666:	4b12      	ldr	r3, [pc, #72]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	490e      	ldr	r1, [pc, #56]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d676:	4313      	orrs	r3, r2
 800d678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d67a:	f000 f821 	bl	800d6c0 <HAL_RCC_GetSysClockFreq>
 800d67e:	4601      	mov	r1, r0
 800d680:	4b0b      	ldr	r3, [pc, #44]	; (800d6b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	091b      	lsrs	r3, r3, #4
 800d686:	f003 030f 	and.w	r3, r3, #15
 800d68a:	4a0a      	ldr	r2, [pc, #40]	; (800d6b4 <HAL_RCC_ClockConfig+0x1c0>)
 800d68c:	5cd3      	ldrb	r3, [r2, r3]
 800d68e:	fa21 f303 	lsr.w	r3, r1, r3
 800d692:	4a09      	ldr	r2, [pc, #36]	; (800d6b8 <HAL_RCC_ClockConfig+0x1c4>)
 800d694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <HAL_RCC_ClockConfig+0x1c8>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fd f9e0 	bl	800aa60 <HAL_InitTick>

  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	40023c00 	.word	0x40023c00
 800d6b0:	40023800 	.word	0x40023800
 800d6b4:	0801bbcc 	.word	0x0801bbcc
 800d6b8:	20000ce0 	.word	0x20000ce0
 800d6bc:	20000ce4 	.word	0x20000ce4

0800d6c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	607b      	str	r3, [r7, #4]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d6d6:	4b63      	ldr	r3, [pc, #396]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f003 030c 	and.w	r3, r3, #12
 800d6de:	2b04      	cmp	r3, #4
 800d6e0:	d007      	beq.n	800d6f2 <HAL_RCC_GetSysClockFreq+0x32>
 800d6e2:	2b08      	cmp	r3, #8
 800d6e4:	d008      	beq.n	800d6f8 <HAL_RCC_GetSysClockFreq+0x38>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f040 80b4 	bne.w	800d854 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d6ec:	4b5e      	ldr	r3, [pc, #376]	; (800d868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d6ee:	60bb      	str	r3, [r7, #8]
       break;
 800d6f0:	e0b3      	b.n	800d85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d6f2:	4b5e      	ldr	r3, [pc, #376]	; (800d86c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d6f4:	60bb      	str	r3, [r7, #8]
      break;
 800d6f6:	e0b0      	b.n	800d85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d6f8:	4b5a      	ldr	r3, [pc, #360]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d702:	4b58      	ldr	r3, [pc, #352]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d04a      	beq.n	800d7a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d70e:	4b55      	ldr	r3, [pc, #340]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	099b      	lsrs	r3, r3, #6
 800d714:	f04f 0400 	mov.w	r4, #0
 800d718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	ea03 0501 	and.w	r5, r3, r1
 800d724:	ea04 0602 	and.w	r6, r4, r2
 800d728:	4629      	mov	r1, r5
 800d72a:	4632      	mov	r2, r6
 800d72c:	f04f 0300 	mov.w	r3, #0
 800d730:	f04f 0400 	mov.w	r4, #0
 800d734:	0154      	lsls	r4, r2, #5
 800d736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d73a:	014b      	lsls	r3, r1, #5
 800d73c:	4619      	mov	r1, r3
 800d73e:	4622      	mov	r2, r4
 800d740:	1b49      	subs	r1, r1, r5
 800d742:	eb62 0206 	sbc.w	r2, r2, r6
 800d746:	f04f 0300 	mov.w	r3, #0
 800d74a:	f04f 0400 	mov.w	r4, #0
 800d74e:	0194      	lsls	r4, r2, #6
 800d750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d754:	018b      	lsls	r3, r1, #6
 800d756:	1a5b      	subs	r3, r3, r1
 800d758:	eb64 0402 	sbc.w	r4, r4, r2
 800d75c:	f04f 0100 	mov.w	r1, #0
 800d760:	f04f 0200 	mov.w	r2, #0
 800d764:	00e2      	lsls	r2, r4, #3
 800d766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d76a:	00d9      	lsls	r1, r3, #3
 800d76c:	460b      	mov	r3, r1
 800d76e:	4614      	mov	r4, r2
 800d770:	195b      	adds	r3, r3, r5
 800d772:	eb44 0406 	adc.w	r4, r4, r6
 800d776:	f04f 0100 	mov.w	r1, #0
 800d77a:	f04f 0200 	mov.w	r2, #0
 800d77e:	0262      	lsls	r2, r4, #9
 800d780:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d784:	0259      	lsls	r1, r3, #9
 800d786:	460b      	mov	r3, r1
 800d788:	4614      	mov	r4, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	4621      	mov	r1, r4
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f04f 0400 	mov.w	r4, #0
 800d794:	461a      	mov	r2, r3
 800d796:	4623      	mov	r3, r4
 800d798:	f7f3 fa86 	bl	8000ca8 <__aeabi_uldivmod>
 800d79c:	4603      	mov	r3, r0
 800d79e:	460c      	mov	r4, r1
 800d7a0:	60fb      	str	r3, [r7, #12]
 800d7a2:	e049      	b.n	800d838 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d7a4:	4b2f      	ldr	r3, [pc, #188]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	099b      	lsrs	r3, r3, #6
 800d7aa:	f04f 0400 	mov.w	r4, #0
 800d7ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	ea03 0501 	and.w	r5, r3, r1
 800d7ba:	ea04 0602 	and.w	r6, r4, r2
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	f04f 0300 	mov.w	r3, #0
 800d7c6:	f04f 0400 	mov.w	r4, #0
 800d7ca:	0154      	lsls	r4, r2, #5
 800d7cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d7d0:	014b      	lsls	r3, r1, #5
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	1b49      	subs	r1, r1, r5
 800d7d8:	eb62 0206 	sbc.w	r2, r2, r6
 800d7dc:	f04f 0300 	mov.w	r3, #0
 800d7e0:	f04f 0400 	mov.w	r4, #0
 800d7e4:	0194      	lsls	r4, r2, #6
 800d7e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d7ea:	018b      	lsls	r3, r1, #6
 800d7ec:	1a5b      	subs	r3, r3, r1
 800d7ee:	eb64 0402 	sbc.w	r4, r4, r2
 800d7f2:	f04f 0100 	mov.w	r1, #0
 800d7f6:	f04f 0200 	mov.w	r2, #0
 800d7fa:	00e2      	lsls	r2, r4, #3
 800d7fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d800:	00d9      	lsls	r1, r3, #3
 800d802:	460b      	mov	r3, r1
 800d804:	4614      	mov	r4, r2
 800d806:	195b      	adds	r3, r3, r5
 800d808:	eb44 0406 	adc.w	r4, r4, r6
 800d80c:	f04f 0100 	mov.w	r1, #0
 800d810:	f04f 0200 	mov.w	r2, #0
 800d814:	02a2      	lsls	r2, r4, #10
 800d816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d81a:	0299      	lsls	r1, r3, #10
 800d81c:	460b      	mov	r3, r1
 800d81e:	4614      	mov	r4, r2
 800d820:	4618      	mov	r0, r3
 800d822:	4621      	mov	r1, r4
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f04f 0400 	mov.w	r4, #0
 800d82a:	461a      	mov	r2, r3
 800d82c:	4623      	mov	r3, r4
 800d82e:	f7f3 fa3b 	bl	8000ca8 <__aeabi_uldivmod>
 800d832:	4603      	mov	r3, r0
 800d834:	460c      	mov	r4, r1
 800d836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	0c1b      	lsrs	r3, r3, #16
 800d83e:	f003 0303 	and.w	r3, r3, #3
 800d842:	3301      	adds	r3, #1
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d850:	60bb      	str	r3, [r7, #8]
      break;
 800d852:	e002      	b.n	800d85a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d854:	4b04      	ldr	r3, [pc, #16]	; (800d868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d856:	60bb      	str	r3, [r7, #8]
      break;
 800d858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d85a:	68bb      	ldr	r3, [r7, #8]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d864:	40023800 	.word	0x40023800
 800d868:	00f42400 	.word	0x00f42400
 800d86c:	007a1200 	.word	0x007a1200

0800d870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d874:	4b03      	ldr	r3, [pc, #12]	; (800d884 <HAL_RCC_GetHCLKFreq+0x14>)
 800d876:	681b      	ldr	r3, [r3, #0]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000ce0 	.word	0x20000ce0

0800d888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d88c:	f7ff fff0 	bl	800d870 <HAL_RCC_GetHCLKFreq>
 800d890:	4601      	mov	r1, r0
 800d892:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	0a9b      	lsrs	r3, r3, #10
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	4a03      	ldr	r2, [pc, #12]	; (800d8ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800d89e:	5cd3      	ldrb	r3, [r2, r3]
 800d8a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	40023800 	.word	0x40023800
 800d8ac:	0801bbdc 	.word	0x0801bbdc

0800d8b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d8b4:	f7ff ffdc 	bl	800d870 <HAL_RCC_GetHCLKFreq>
 800d8b8:	4601      	mov	r1, r0
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	0b5b      	lsrs	r3, r3, #13
 800d8c0:	f003 0307 	and.w	r3, r3, #7
 800d8c4:	4a03      	ldr	r2, [pc, #12]	; (800d8d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d8c6:	5cd3      	ldrb	r3, [r2, r3]
 800d8c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	40023800 	.word	0x40023800
 800d8d4:	0801bbdc 	.word	0x0801bbdc

0800d8d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	220f      	movs	r2, #15
 800d8e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d8e8:	4b12      	ldr	r3, [pc, #72]	; (800d934 <HAL_RCC_GetClockConfig+0x5c>)
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f003 0203 	and.w	r2, r3, #3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d8f4:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <HAL_RCC_GetClockConfig+0x5c>)
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d900:	4b0c      	ldr	r3, [pc, #48]	; (800d934 <HAL_RCC_GetClockConfig+0x5c>)
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d90c:	4b09      	ldr	r3, [pc, #36]	; (800d934 <HAL_RCC_GetClockConfig+0x5c>)
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	08db      	lsrs	r3, r3, #3
 800d912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <HAL_RCC_GetClockConfig+0x60>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 020f 	and.w	r2, r3, #15
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	40023800 	.word	0x40023800
 800d938:	40023c00 	.word	0x40023c00

0800d93c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e01d      	b.n	800d98a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7fd f9b8 	bl	800acd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2202      	movs	r2, #2
 800d96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3304      	adds	r3, #4
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f000 f95e 	bl	800dc3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d992:	b480      	push	{r7}
 800d994:	b085      	sub	sp, #20
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68da      	ldr	r2, [r3, #12]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f042 0201 	orr.w	r2, r2, #1
 800d9a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b06      	cmp	r3, #6
 800d9ba:	d007      	beq.n	800d9cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f042 0201 	orr.w	r2, r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	f003 0302 	and.w	r3, r3, #2
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d122      	bne.n	800da36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f003 0302 	and.w	r3, r3, #2
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d11b      	bne.n	800da36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f06f 0202 	mvn.w	r2, #2
 800da06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	f003 0303 	and.w	r3, r3, #3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f8ee 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
 800da22:	e005      	b.n	800da30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 f8e0 	bl	800dbea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f8f1 	bl	800dc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	f003 0304 	and.w	r3, r3, #4
 800da40:	2b04      	cmp	r3, #4
 800da42:	d122      	bne.n	800da8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d11b      	bne.n	800da8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f06f 0204 	mvn.w	r2, #4
 800da5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2202      	movs	r2, #2
 800da60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f8c4 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
 800da76:	e005      	b.n	800da84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f8b6 	bl	800dbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f8c7 	bl	800dc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	f003 0308 	and.w	r3, r3, #8
 800da94:	2b08      	cmp	r3, #8
 800da96:	d122      	bne.n	800dade <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	f003 0308 	and.w	r3, r3, #8
 800daa2:	2b08      	cmp	r3, #8
 800daa4:	d11b      	bne.n	800dade <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f06f 0208 	mvn.w	r2, #8
 800daae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2204      	movs	r2, #4
 800dab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	f003 0303 	and.w	r3, r3, #3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f89a 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
 800daca:	e005      	b.n	800dad8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f88c 	bl	800dbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f89d 	bl	800dc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	f003 0310 	and.w	r3, r3, #16
 800dae8:	2b10      	cmp	r3, #16
 800daea:	d122      	bne.n	800db32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f003 0310 	and.w	r3, r3, #16
 800daf6:	2b10      	cmp	r3, #16
 800daf8:	d11b      	bne.n	800db32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f06f 0210 	mvn.w	r2, #16
 800db02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2208      	movs	r2, #8
 800db08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 f870 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
 800db1e:	e005      	b.n	800db2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f862 	bl	800dbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f873 	bl	800dc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d10e      	bne.n	800db5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d107      	bne.n	800db5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f06f 0201 	mvn.w	r2, #1
 800db56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7f5 ffbf 	bl	8003adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db68:	2b80      	cmp	r3, #128	; 0x80
 800db6a:	d10e      	bne.n	800db8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db76:	2b80      	cmp	r3, #128	; 0x80
 800db78:	d107      	bne.n	800db8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f97f 	bl	800de88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db94:	2b40      	cmp	r3, #64	; 0x40
 800db96:	d10e      	bne.n	800dbb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba2:	2b40      	cmp	r3, #64	; 0x40
 800dba4:	d107      	bne.n	800dbb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f838 	bl	800dc26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	f003 0320 	and.w	r3, r3, #32
 800dbc0:	2b20      	cmp	r3, #32
 800dbc2:	d10e      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	f003 0320 	and.w	r3, r3, #32
 800dbce:	2b20      	cmp	r3, #32
 800dbd0:	d107      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f06f 0220 	mvn.w	r2, #32
 800dbda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f949 	bl	800de74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbe2:	bf00      	nop
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b083      	sub	sp, #12
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc2e:	bf00      	nop
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a40      	ldr	r2, [pc, #256]	; (800dd50 <TIM_Base_SetConfig+0x114>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d013      	beq.n	800dc7c <TIM_Base_SetConfig+0x40>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc5a:	d00f      	beq.n	800dc7c <TIM_Base_SetConfig+0x40>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a3d      	ldr	r2, [pc, #244]	; (800dd54 <TIM_Base_SetConfig+0x118>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d00b      	beq.n	800dc7c <TIM_Base_SetConfig+0x40>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a3c      	ldr	r2, [pc, #240]	; (800dd58 <TIM_Base_SetConfig+0x11c>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d007      	beq.n	800dc7c <TIM_Base_SetConfig+0x40>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a3b      	ldr	r2, [pc, #236]	; (800dd5c <TIM_Base_SetConfig+0x120>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d003      	beq.n	800dc7c <TIM_Base_SetConfig+0x40>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a3a      	ldr	r2, [pc, #232]	; (800dd60 <TIM_Base_SetConfig+0x124>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d108      	bne.n	800dc8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a2f      	ldr	r2, [pc, #188]	; (800dd50 <TIM_Base_SetConfig+0x114>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d02b      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc9c:	d027      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a2c      	ldr	r2, [pc, #176]	; (800dd54 <TIM_Base_SetConfig+0x118>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d023      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a2b      	ldr	r2, [pc, #172]	; (800dd58 <TIM_Base_SetConfig+0x11c>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d01f      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a2a      	ldr	r2, [pc, #168]	; (800dd5c <TIM_Base_SetConfig+0x120>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d01b      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a29      	ldr	r2, [pc, #164]	; (800dd60 <TIM_Base_SetConfig+0x124>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d017      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a28      	ldr	r2, [pc, #160]	; (800dd64 <TIM_Base_SetConfig+0x128>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d013      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a27      	ldr	r2, [pc, #156]	; (800dd68 <TIM_Base_SetConfig+0x12c>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d00f      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a26      	ldr	r2, [pc, #152]	; (800dd6c <TIM_Base_SetConfig+0x130>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d00b      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a25      	ldr	r2, [pc, #148]	; (800dd70 <TIM_Base_SetConfig+0x134>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d007      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a24      	ldr	r2, [pc, #144]	; (800dd74 <TIM_Base_SetConfig+0x138>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d003      	beq.n	800dcee <TIM_Base_SetConfig+0xb2>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a23      	ldr	r2, [pc, #140]	; (800dd78 <TIM_Base_SetConfig+0x13c>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d108      	bne.n	800dd00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	689a      	ldr	r2, [r3, #8]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a0a      	ldr	r2, [pc, #40]	; (800dd50 <TIM_Base_SetConfig+0x114>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d003      	beq.n	800dd34 <TIM_Base_SetConfig+0xf8>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a0c      	ldr	r2, [pc, #48]	; (800dd60 <TIM_Base_SetConfig+0x124>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d103      	bne.n	800dd3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	691a      	ldr	r2, [r3, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	615a      	str	r2, [r3, #20]
}
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	40010000 	.word	0x40010000
 800dd54:	40000400 	.word	0x40000400
 800dd58:	40000800 	.word	0x40000800
 800dd5c:	40000c00 	.word	0x40000c00
 800dd60:	40010400 	.word	0x40010400
 800dd64:	40014000 	.word	0x40014000
 800dd68:	40014400 	.word	0x40014400
 800dd6c:	40014800 	.word	0x40014800
 800dd70:	40001800 	.word	0x40001800
 800dd74:	40001c00 	.word	0x40001c00
 800dd78:	40002000 	.word	0x40002000

0800dd7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd90:	2302      	movs	r3, #2
 800dd92:	e05a      	b.n	800de4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2202      	movs	r2, #2
 800dda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a21      	ldr	r2, [pc, #132]	; (800de58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d022      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dde0:	d01d      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a1d      	ldr	r2, [pc, #116]	; (800de5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d018      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a1b      	ldr	r2, [pc, #108]	; (800de60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d013      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a1a      	ldr	r2, [pc, #104]	; (800de64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d00e      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a18      	ldr	r2, [pc, #96]	; (800de68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d009      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a17      	ldr	r2, [pc, #92]	; (800de6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d004      	beq.n	800de1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a15      	ldr	r2, [pc, #84]	; (800de70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d10c      	bne.n	800de38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	4313      	orrs	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	40010000 	.word	0x40010000
 800de5c:	40000400 	.word	0x40000400
 800de60:	40000800 	.word	0x40000800
 800de64:	40000c00 	.word	0x40000c00
 800de68:	40010400 	.word	0x40010400
 800de6c:	40014000 	.word	0x40014000
 800de70:	40001800 	.word	0x40001800

0800de74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	e03f      	b.n	800df2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d106      	bne.n	800dec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7fc ff5a 	bl	800ad7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2224      	movs	r2, #36	; 0x24
 800decc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68da      	ldr	r2, [r3, #12]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fb6b 	bl	800e5bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	691a      	ldr	r2, [r3, #16]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800def4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	695a      	ldr	r2, [r3, #20]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	68da      	ldr	r2, [r3, #12]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2220      	movs	r2, #32
 800df20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2220      	movs	r2, #32
 800df28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	4613      	mov	r3, r2
 800df44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b20      	cmp	r3, #32
 800df50:	d153      	bne.n	800dffa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <HAL_UART_Transmit_DMA+0x26>
 800df58:	88fb      	ldrh	r3, [r7, #6]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e04c      	b.n	800dffc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d101      	bne.n	800df70 <HAL_UART_Transmit_DMA+0x38>
 800df6c:	2302      	movs	r3, #2
 800df6e:	e045      	b.n	800dffc <HAL_UART_Transmit_DMA+0xc4>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	88fa      	ldrh	r2, [r7, #6]
 800df82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	88fa      	ldrh	r2, [r7, #6]
 800df88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2221      	movs	r2, #33	; 0x21
 800df94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9c:	4a19      	ldr	r2, [pc, #100]	; (800e004 <HAL_UART_Transmit_DMA+0xcc>)
 800df9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa4:	4a18      	ldr	r2, [pc, #96]	; (800e008 <HAL_UART_Transmit_DMA+0xd0>)
 800dfa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfac:	4a17      	ldr	r2, [pc, #92]	; (800e00c <HAL_UART_Transmit_DMA+0xd4>)
 800dfae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800dfb8:	f107 0308 	add.w	r3, r7, #8
 800dfbc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	6819      	ldr	r1, [r3, #0]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3304      	adds	r3, #4
 800dfcc:	461a      	mov	r2, r3
 800dfce:	88fb      	ldrh	r3, [r7, #6]
 800dfd0:	f7fd f99c 	bl	800b30c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dfdc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	695a      	ldr	r2, [r3, #20]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dff4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800dff6:	2300      	movs	r3, #0
 800dff8:	e000      	b.n	800dffc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800dffa:	2302      	movs	r3, #2
  }
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	0800e24d 	.word	0x0800e24d
 800e008:	0800e29f 	.word	0x0800e29f
 800e00c:	0800e2bb 	.word	0x0800e2bb

0800e010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	695b      	ldr	r3, [r3, #20]
 800e02e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e030:	2300      	movs	r3, #0
 800e032:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e034:	2300      	movs	r3, #0
 800e036:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	f003 030f 	and.w	r3, r3, #15
 800e03e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10d      	bne.n	800e062 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	f003 0320 	and.w	r3, r3, #32
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d008      	beq.n	800e062 <HAL_UART_IRQHandler+0x52>
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	f003 0320 	and.w	r3, r3, #32
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa2d 	bl	800e4ba <UART_Receive_IT>
      return;
 800e060:	e0d1      	b.n	800e206 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 80b0 	beq.w	800e1ca <HAL_UART_IRQHandler+0x1ba>
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d105      	bne.n	800e080 <HAL_UART_IRQHandler+0x70>
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 80a5 	beq.w	800e1ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <HAL_UART_IRQHandler+0x90>
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e090:	2b00      	cmp	r3, #0
 800e092:	d005      	beq.n	800e0a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e098:	f043 0201 	orr.w	r2, r3, #1
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	f003 0304 	and.w	r3, r3, #4
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00a      	beq.n	800e0c0 <HAL_UART_IRQHandler+0xb0>
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d005      	beq.n	800e0c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b8:	f043 0202 	orr.w	r2, r3, #2
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f003 0302 	and.w	r3, r3, #2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xd0>
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f003 0301 	and.w	r3, r3, #1
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d8:	f043 0204 	orr.w	r2, r3, #4
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00f      	beq.n	800e10a <HAL_UART_IRQHandler+0xfa>
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	f003 0320 	and.w	r3, r3, #32
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d104      	bne.n	800e0fe <HAL_UART_IRQHandler+0xee>
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f003 0301 	and.w	r3, r3, #1
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e102:	f043 0208 	orr.w	r2, r3, #8
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d078      	beq.n	800e204 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d007      	beq.n	800e12c <HAL_UART_IRQHandler+0x11c>
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	f003 0320 	and.w	r3, r3, #32
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f9c7 	bl	800e4ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	695b      	ldr	r3, [r3, #20]
 800e132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e136:	2b40      	cmp	r3, #64	; 0x40
 800e138:	bf0c      	ite	eq
 800e13a:	2301      	moveq	r3, #1
 800e13c:	2300      	movne	r3, #0
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e146:	f003 0308 	and.w	r3, r3, #8
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d102      	bne.n	800e154 <HAL_UART_IRQHandler+0x144>
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d031      	beq.n	800e1b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f910 	bl	800e37a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e164:	2b40      	cmp	r3, #64	; 0x40
 800e166:	d123      	bne.n	800e1b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	695a      	ldr	r2, [r3, #20]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e176:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d013      	beq.n	800e1a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e184:	4a21      	ldr	r2, [pc, #132]	; (800e20c <HAL_UART_IRQHandler+0x1fc>)
 800e186:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fd f915 	bl	800b3bc <HAL_DMA_Abort_IT>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d016      	beq.n	800e1c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1a2:	4610      	mov	r0, r2
 800e1a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a6:	e00e      	b.n	800e1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f845 	bl	800e238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1ae:	e00a      	b.n	800e1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f841 	bl	800e238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1b6:	e006      	b.n	800e1c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 f83d 	bl	800e238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e1c4:	e01e      	b.n	800e204 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1c6:	bf00      	nop
    return;
 800e1c8:	e01c      	b.n	800e204 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x1d6>
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f8fd 	bl	800e3de <UART_Transmit_IT>
    return;
 800e1e4:	e00f      	b.n	800e206 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00a      	beq.n	800e206 <HAL_UART_IRQHandler+0x1f6>
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d005      	beq.n	800e206 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f945 	bl	800e48a <UART_EndTransmit_IT>
    return;
 800e200:	bf00      	nop
 800e202:	e000      	b.n	800e206 <HAL_UART_IRQHandler+0x1f6>
    return;
 800e204:	bf00      	nop
  }
}
 800e206:	3720      	adds	r7, #32
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	0800e3b7 	.word	0x0800e3b7

0800e210 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e218:	bf00      	nop
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e258:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e264:	2b00      	cmp	r3, #0
 800e266:	d113      	bne.n	800e290 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	695a      	ldr	r2, [r3, #20]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e27c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68da      	ldr	r2, [r3, #12]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e28c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e28e:	e002      	b.n	800e296 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7fc fdf5 	bl	800ae80 <HAL_UART_TxCpltCallback>
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f7ff ffaf 	bl	800e210 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2b2:	bf00      	nop
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2d6:	2b80      	cmp	r3, #128	; 0x80
 800e2d8:	bf0c      	ite	eq
 800e2da:	2301      	moveq	r3, #1
 800e2dc:	2300      	movne	r3, #0
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b21      	cmp	r3, #33	; 0x21
 800e2ec:	d108      	bne.n	800e300 <UART_DMAError+0x46>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d005      	beq.n	800e300 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e2fa:	68b8      	ldr	r0, [r7, #8]
 800e2fc:	f000 f827 	bl	800e34e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	bf0c      	ite	eq
 800e30e:	2301      	moveq	r3, #1
 800e310:	2300      	movne	r3, #0
 800e312:	b2db      	uxtb	r3, r3
 800e314:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b22      	cmp	r3, #34	; 0x22
 800e320:	d108      	bne.n	800e334 <UART_DMAError+0x7a>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d005      	beq.n	800e334 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e32e:	68b8      	ldr	r0, [r7, #8]
 800e330:	f000 f823 	bl	800e37a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e338:	f043 0210 	orr.w	r2, r3, #16
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e340:	68b8      	ldr	r0, [r7, #8]
 800e342:	f7ff ff79 	bl	800e238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	68da      	ldr	r2, [r3, #12]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e364:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2220      	movs	r2, #32
 800e36a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e36e:	bf00      	nop
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68da      	ldr	r2, [r3, #12]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e390:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	695a      	ldr	r2, [r3, #20]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f022 0201 	bic.w	r2, r2, #1
 800e3a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2220      	movs	r2, #32
 800e3a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e3aa:	bf00      	nop
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b084      	sub	sp, #16
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff ff31 	bl	800e238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3d6:	bf00      	nop
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	2b21      	cmp	r3, #33	; 0x21
 800e3f0:	d144      	bne.n	800e47c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3fa:	d11a      	bne.n	800e432 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a1b      	ldr	r3, [r3, #32]
 800e400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e410:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d105      	bne.n	800e426 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	1c9a      	adds	r2, r3, #2
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	621a      	str	r2, [r3, #32]
 800e424:	e00e      	b.n	800e444 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	621a      	str	r2, [r3, #32]
 800e430:	e008      	b.n	800e444 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a1b      	ldr	r3, [r3, #32]
 800e436:	1c59      	adds	r1, r3, #1
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	6211      	str	r1, [r2, #32]
 800e43c:	781a      	ldrb	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b01      	subs	r3, #1
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	4619      	mov	r1, r3
 800e452:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10f      	bne.n	800e478 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68da      	ldr	r2, [r3, #12]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	e000      	b.n	800e47e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e47c:	2302      	movs	r3, #2
  }
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b082      	sub	sp, #8
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68da      	ldr	r2, [r3, #12]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2220      	movs	r2, #32
 800e4a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7fc fce8 	bl	800ae80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b084      	sub	sp, #16
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b22      	cmp	r3, #34	; 0x22
 800e4cc:	d171      	bne.n	800e5b2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4d6:	d123      	bne.n	800e520 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4dc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10e      	bne.n	800e504 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fc:	1c9a      	adds	r2, r3, #2
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	629a      	str	r2, [r3, #40]	; 0x28
 800e502:	e029      	b.n	800e558 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	b29a      	uxth	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e518:	1c5a      	adds	r2, r3, #1
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	629a      	str	r2, [r3, #40]	; 0x28
 800e51e:	e01b      	b.n	800e558 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10a      	bne.n	800e53e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6858      	ldr	r0, [r3, #4]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e532:	1c59      	adds	r1, r3, #1
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	6291      	str	r1, [r2, #40]	; 0x28
 800e538:	b2c2      	uxtb	r2, r0
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	e00c      	b.n	800e558 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	b2da      	uxtb	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54a:	1c58      	adds	r0, r3, #1
 800e54c:	6879      	ldr	r1, [r7, #4]
 800e54e:	6288      	str	r0, [r1, #40]	; 0x28
 800e550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e554:	b2d2      	uxtb	r2, r2
 800e556:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	3b01      	subs	r3, #1
 800e560:	b29b      	uxth	r3, r3
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	4619      	mov	r1, r3
 800e566:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d120      	bne.n	800e5ae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68da      	ldr	r2, [r3, #12]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f022 0220 	bic.w	r2, r2, #32
 800e57a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	68da      	ldr	r2, [r3, #12]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e58a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	695a      	ldr	r2, [r3, #20]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 0201 	bic.w	r2, r2, #1
 800e59a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2220      	movs	r2, #32
 800e5a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fe3d 	bl	800e224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e002      	b.n	800e5b4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e000      	b.n	800e5b4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e5b2:	2302      	movs	r3, #2
  }
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68da      	ldr	r2, [r3, #12]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	430a      	orrs	r2, r1
 800e5da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	689a      	ldr	r2, [r3, #8]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	431a      	orrs	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	69db      	ldr	r3, [r3, #28]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e5fe:	f023 030c 	bic.w	r3, r3, #12
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	68f9      	ldr	r1, [r7, #12]
 800e608:	430b      	orrs	r3, r1
 800e60a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	695b      	ldr	r3, [r3, #20]
 800e612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	699a      	ldr	r2, [r3, #24]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	430a      	orrs	r2, r1
 800e620:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	69db      	ldr	r3, [r3, #28]
 800e626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e62a:	f040 818b 	bne.w	800e944 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4ac1      	ldr	r2, [pc, #772]	; (800e938 <UART_SetConfig+0x37c>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d005      	beq.n	800e644 <UART_SetConfig+0x88>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4abf      	ldr	r2, [pc, #764]	; (800e93c <UART_SetConfig+0x380>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	f040 80bd 	bne.w	800e7be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e644:	f7ff f934 	bl	800d8b0 <HAL_RCC_GetPCLK2Freq>
 800e648:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	461d      	mov	r5, r3
 800e64e:	f04f 0600 	mov.w	r6, #0
 800e652:	46a8      	mov	r8, r5
 800e654:	46b1      	mov	r9, r6
 800e656:	eb18 0308 	adds.w	r3, r8, r8
 800e65a:	eb49 0409 	adc.w	r4, r9, r9
 800e65e:	4698      	mov	r8, r3
 800e660:	46a1      	mov	r9, r4
 800e662:	eb18 0805 	adds.w	r8, r8, r5
 800e666:	eb49 0906 	adc.w	r9, r9, r6
 800e66a:	f04f 0100 	mov.w	r1, #0
 800e66e:	f04f 0200 	mov.w	r2, #0
 800e672:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e676:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e67a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e67e:	4688      	mov	r8, r1
 800e680:	4691      	mov	r9, r2
 800e682:	eb18 0005 	adds.w	r0, r8, r5
 800e686:	eb49 0106 	adc.w	r1, r9, r6
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	461d      	mov	r5, r3
 800e690:	f04f 0600 	mov.w	r6, #0
 800e694:	196b      	adds	r3, r5, r5
 800e696:	eb46 0406 	adc.w	r4, r6, r6
 800e69a:	461a      	mov	r2, r3
 800e69c:	4623      	mov	r3, r4
 800e69e:	f7f2 fb03 	bl	8000ca8 <__aeabi_uldivmod>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	460c      	mov	r4, r1
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	4ba5      	ldr	r3, [pc, #660]	; (800e940 <UART_SetConfig+0x384>)
 800e6aa:	fba3 2302 	umull	r2, r3, r3, r2
 800e6ae:	095b      	lsrs	r3, r3, #5
 800e6b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	461d      	mov	r5, r3
 800e6b8:	f04f 0600 	mov.w	r6, #0
 800e6bc:	46a9      	mov	r9, r5
 800e6be:	46b2      	mov	sl, r6
 800e6c0:	eb19 0309 	adds.w	r3, r9, r9
 800e6c4:	eb4a 040a 	adc.w	r4, sl, sl
 800e6c8:	4699      	mov	r9, r3
 800e6ca:	46a2      	mov	sl, r4
 800e6cc:	eb19 0905 	adds.w	r9, r9, r5
 800e6d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800e6d4:	f04f 0100 	mov.w	r1, #0
 800e6d8:	f04f 0200 	mov.w	r2, #0
 800e6dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e6e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e6e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	4692      	mov	sl, r2
 800e6ec:	eb19 0005 	adds.w	r0, r9, r5
 800e6f0:	eb4a 0106 	adc.w	r1, sl, r6
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	461d      	mov	r5, r3
 800e6fa:	f04f 0600 	mov.w	r6, #0
 800e6fe:	196b      	adds	r3, r5, r5
 800e700:	eb46 0406 	adc.w	r4, r6, r6
 800e704:	461a      	mov	r2, r3
 800e706:	4623      	mov	r3, r4
 800e708:	f7f2 face 	bl	8000ca8 <__aeabi_uldivmod>
 800e70c:	4603      	mov	r3, r0
 800e70e:	460c      	mov	r4, r1
 800e710:	461a      	mov	r2, r3
 800e712:	4b8b      	ldr	r3, [pc, #556]	; (800e940 <UART_SetConfig+0x384>)
 800e714:	fba3 1302 	umull	r1, r3, r3, r2
 800e718:	095b      	lsrs	r3, r3, #5
 800e71a:	2164      	movs	r1, #100	; 0x64
 800e71c:	fb01 f303 	mul.w	r3, r1, r3
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	00db      	lsls	r3, r3, #3
 800e724:	3332      	adds	r3, #50	; 0x32
 800e726:	4a86      	ldr	r2, [pc, #536]	; (800e940 <UART_SetConfig+0x384>)
 800e728:	fba2 2303 	umull	r2, r3, r2, r3
 800e72c:	095b      	lsrs	r3, r3, #5
 800e72e:	005b      	lsls	r3, r3, #1
 800e730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e734:	4498      	add	r8, r3
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	461d      	mov	r5, r3
 800e73a:	f04f 0600 	mov.w	r6, #0
 800e73e:	46a9      	mov	r9, r5
 800e740:	46b2      	mov	sl, r6
 800e742:	eb19 0309 	adds.w	r3, r9, r9
 800e746:	eb4a 040a 	adc.w	r4, sl, sl
 800e74a:	4699      	mov	r9, r3
 800e74c:	46a2      	mov	sl, r4
 800e74e:	eb19 0905 	adds.w	r9, r9, r5
 800e752:	eb4a 0a06 	adc.w	sl, sl, r6
 800e756:	f04f 0100 	mov.w	r1, #0
 800e75a:	f04f 0200 	mov.w	r2, #0
 800e75e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e76a:	4689      	mov	r9, r1
 800e76c:	4692      	mov	sl, r2
 800e76e:	eb19 0005 	adds.w	r0, r9, r5
 800e772:	eb4a 0106 	adc.w	r1, sl, r6
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	461d      	mov	r5, r3
 800e77c:	f04f 0600 	mov.w	r6, #0
 800e780:	196b      	adds	r3, r5, r5
 800e782:	eb46 0406 	adc.w	r4, r6, r6
 800e786:	461a      	mov	r2, r3
 800e788:	4623      	mov	r3, r4
 800e78a:	f7f2 fa8d 	bl	8000ca8 <__aeabi_uldivmod>
 800e78e:	4603      	mov	r3, r0
 800e790:	460c      	mov	r4, r1
 800e792:	461a      	mov	r2, r3
 800e794:	4b6a      	ldr	r3, [pc, #424]	; (800e940 <UART_SetConfig+0x384>)
 800e796:	fba3 1302 	umull	r1, r3, r3, r2
 800e79a:	095b      	lsrs	r3, r3, #5
 800e79c:	2164      	movs	r1, #100	; 0x64
 800e79e:	fb01 f303 	mul.w	r3, r1, r3
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	3332      	adds	r3, #50	; 0x32
 800e7a8:	4a65      	ldr	r2, [pc, #404]	; (800e940 <UART_SetConfig+0x384>)
 800e7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ae:	095b      	lsrs	r3, r3, #5
 800e7b0:	f003 0207 	and.w	r2, r3, #7
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4442      	add	r2, r8
 800e7ba:	609a      	str	r2, [r3, #8]
 800e7bc:	e26f      	b.n	800ec9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e7be:	f7ff f863 	bl	800d888 <HAL_RCC_GetPCLK1Freq>
 800e7c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	f04f 0600 	mov.w	r6, #0
 800e7cc:	46a8      	mov	r8, r5
 800e7ce:	46b1      	mov	r9, r6
 800e7d0:	eb18 0308 	adds.w	r3, r8, r8
 800e7d4:	eb49 0409 	adc.w	r4, r9, r9
 800e7d8:	4698      	mov	r8, r3
 800e7da:	46a1      	mov	r9, r4
 800e7dc:	eb18 0805 	adds.w	r8, r8, r5
 800e7e0:	eb49 0906 	adc.w	r9, r9, r6
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	f04f 0200 	mov.w	r2, #0
 800e7ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e7f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e7f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e7f8:	4688      	mov	r8, r1
 800e7fa:	4691      	mov	r9, r2
 800e7fc:	eb18 0005 	adds.w	r0, r8, r5
 800e800:	eb49 0106 	adc.w	r1, r9, r6
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	461d      	mov	r5, r3
 800e80a:	f04f 0600 	mov.w	r6, #0
 800e80e:	196b      	adds	r3, r5, r5
 800e810:	eb46 0406 	adc.w	r4, r6, r6
 800e814:	461a      	mov	r2, r3
 800e816:	4623      	mov	r3, r4
 800e818:	f7f2 fa46 	bl	8000ca8 <__aeabi_uldivmod>
 800e81c:	4603      	mov	r3, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	461a      	mov	r2, r3
 800e822:	4b47      	ldr	r3, [pc, #284]	; (800e940 <UART_SetConfig+0x384>)
 800e824:	fba3 2302 	umull	r2, r3, r3, r2
 800e828:	095b      	lsrs	r3, r3, #5
 800e82a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	461d      	mov	r5, r3
 800e832:	f04f 0600 	mov.w	r6, #0
 800e836:	46a9      	mov	r9, r5
 800e838:	46b2      	mov	sl, r6
 800e83a:	eb19 0309 	adds.w	r3, r9, r9
 800e83e:	eb4a 040a 	adc.w	r4, sl, sl
 800e842:	4699      	mov	r9, r3
 800e844:	46a2      	mov	sl, r4
 800e846:	eb19 0905 	adds.w	r9, r9, r5
 800e84a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e84e:	f04f 0100 	mov.w	r1, #0
 800e852:	f04f 0200 	mov.w	r2, #0
 800e856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e85a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e85e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e862:	4689      	mov	r9, r1
 800e864:	4692      	mov	sl, r2
 800e866:	eb19 0005 	adds.w	r0, r9, r5
 800e86a:	eb4a 0106 	adc.w	r1, sl, r6
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	461d      	mov	r5, r3
 800e874:	f04f 0600 	mov.w	r6, #0
 800e878:	196b      	adds	r3, r5, r5
 800e87a:	eb46 0406 	adc.w	r4, r6, r6
 800e87e:	461a      	mov	r2, r3
 800e880:	4623      	mov	r3, r4
 800e882:	f7f2 fa11 	bl	8000ca8 <__aeabi_uldivmod>
 800e886:	4603      	mov	r3, r0
 800e888:	460c      	mov	r4, r1
 800e88a:	461a      	mov	r2, r3
 800e88c:	4b2c      	ldr	r3, [pc, #176]	; (800e940 <UART_SetConfig+0x384>)
 800e88e:	fba3 1302 	umull	r1, r3, r3, r2
 800e892:	095b      	lsrs	r3, r3, #5
 800e894:	2164      	movs	r1, #100	; 0x64
 800e896:	fb01 f303 	mul.w	r3, r1, r3
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	3332      	adds	r3, #50	; 0x32
 800e8a0:	4a27      	ldr	r2, [pc, #156]	; (800e940 <UART_SetConfig+0x384>)
 800e8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a6:	095b      	lsrs	r3, r3, #5
 800e8a8:	005b      	lsls	r3, r3, #1
 800e8aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e8ae:	4498      	add	r8, r3
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	461d      	mov	r5, r3
 800e8b4:	f04f 0600 	mov.w	r6, #0
 800e8b8:	46a9      	mov	r9, r5
 800e8ba:	46b2      	mov	sl, r6
 800e8bc:	eb19 0309 	adds.w	r3, r9, r9
 800e8c0:	eb4a 040a 	adc.w	r4, sl, sl
 800e8c4:	4699      	mov	r9, r3
 800e8c6:	46a2      	mov	sl, r4
 800e8c8:	eb19 0905 	adds.w	r9, r9, r5
 800e8cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800e8d0:	f04f 0100 	mov.w	r1, #0
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e8e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e8e4:	4689      	mov	r9, r1
 800e8e6:	4692      	mov	sl, r2
 800e8e8:	eb19 0005 	adds.w	r0, r9, r5
 800e8ec:	eb4a 0106 	adc.w	r1, sl, r6
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	461d      	mov	r5, r3
 800e8f6:	f04f 0600 	mov.w	r6, #0
 800e8fa:	196b      	adds	r3, r5, r5
 800e8fc:	eb46 0406 	adc.w	r4, r6, r6
 800e900:	461a      	mov	r2, r3
 800e902:	4623      	mov	r3, r4
 800e904:	f7f2 f9d0 	bl	8000ca8 <__aeabi_uldivmod>
 800e908:	4603      	mov	r3, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	461a      	mov	r2, r3
 800e90e:	4b0c      	ldr	r3, [pc, #48]	; (800e940 <UART_SetConfig+0x384>)
 800e910:	fba3 1302 	umull	r1, r3, r3, r2
 800e914:	095b      	lsrs	r3, r3, #5
 800e916:	2164      	movs	r1, #100	; 0x64
 800e918:	fb01 f303 	mul.w	r3, r1, r3
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	3332      	adds	r3, #50	; 0x32
 800e922:	4a07      	ldr	r2, [pc, #28]	; (800e940 <UART_SetConfig+0x384>)
 800e924:	fba2 2303 	umull	r2, r3, r2, r3
 800e928:	095b      	lsrs	r3, r3, #5
 800e92a:	f003 0207 	and.w	r2, r3, #7
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4442      	add	r2, r8
 800e934:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e936:	e1b2      	b.n	800ec9e <UART_SetConfig+0x6e2>
 800e938:	40011000 	.word	0x40011000
 800e93c:	40011400 	.word	0x40011400
 800e940:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4ad7      	ldr	r2, [pc, #860]	; (800eca8 <UART_SetConfig+0x6ec>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d005      	beq.n	800e95a <UART_SetConfig+0x39e>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4ad6      	ldr	r2, [pc, #856]	; (800ecac <UART_SetConfig+0x6f0>)
 800e954:	4293      	cmp	r3, r2
 800e956:	f040 80d1 	bne.w	800eafc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e95a:	f7fe ffa9 	bl	800d8b0 <HAL_RCC_GetPCLK2Freq>
 800e95e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	469a      	mov	sl, r3
 800e964:	f04f 0b00 	mov.w	fp, #0
 800e968:	46d0      	mov	r8, sl
 800e96a:	46d9      	mov	r9, fp
 800e96c:	eb18 0308 	adds.w	r3, r8, r8
 800e970:	eb49 0409 	adc.w	r4, r9, r9
 800e974:	4698      	mov	r8, r3
 800e976:	46a1      	mov	r9, r4
 800e978:	eb18 080a 	adds.w	r8, r8, sl
 800e97c:	eb49 090b 	adc.w	r9, r9, fp
 800e980:	f04f 0100 	mov.w	r1, #0
 800e984:	f04f 0200 	mov.w	r2, #0
 800e988:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e98c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e990:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e994:	4688      	mov	r8, r1
 800e996:	4691      	mov	r9, r2
 800e998:	eb1a 0508 	adds.w	r5, sl, r8
 800e99c:	eb4b 0609 	adc.w	r6, fp, r9
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f04f 0200 	mov.w	r2, #0
 800e9aa:	f04f 0300 	mov.w	r3, #0
 800e9ae:	f04f 0400 	mov.w	r4, #0
 800e9b2:	0094      	lsls	r4, r2, #2
 800e9b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e9b8:	008b      	lsls	r3, r1, #2
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4623      	mov	r3, r4
 800e9be:	4628      	mov	r0, r5
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	f7f2 f971 	bl	8000ca8 <__aeabi_uldivmod>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	460c      	mov	r4, r1
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	4bb8      	ldr	r3, [pc, #736]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800e9ce:	fba3 2302 	umull	r2, r3, r3, r2
 800e9d2:	095b      	lsrs	r3, r3, #5
 800e9d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	469b      	mov	fp, r3
 800e9dc:	f04f 0c00 	mov.w	ip, #0
 800e9e0:	46d9      	mov	r9, fp
 800e9e2:	46e2      	mov	sl, ip
 800e9e4:	eb19 0309 	adds.w	r3, r9, r9
 800e9e8:	eb4a 040a 	adc.w	r4, sl, sl
 800e9ec:	4699      	mov	r9, r3
 800e9ee:	46a2      	mov	sl, r4
 800e9f0:	eb19 090b 	adds.w	r9, r9, fp
 800e9f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e9f8:	f04f 0100 	mov.w	r1, #0
 800e9fc:	f04f 0200 	mov.w	r2, #0
 800ea00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea0c:	4689      	mov	r9, r1
 800ea0e:	4692      	mov	sl, r2
 800ea10:	eb1b 0509 	adds.w	r5, fp, r9
 800ea14:	eb4c 060a 	adc.w	r6, ip, sl
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f04f 0200 	mov.w	r2, #0
 800ea22:	f04f 0300 	mov.w	r3, #0
 800ea26:	f04f 0400 	mov.w	r4, #0
 800ea2a:	0094      	lsls	r4, r2, #2
 800ea2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea30:	008b      	lsls	r3, r1, #2
 800ea32:	461a      	mov	r2, r3
 800ea34:	4623      	mov	r3, r4
 800ea36:	4628      	mov	r0, r5
 800ea38:	4631      	mov	r1, r6
 800ea3a:	f7f2 f935 	bl	8000ca8 <__aeabi_uldivmod>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	460c      	mov	r4, r1
 800ea42:	461a      	mov	r2, r3
 800ea44:	4b9a      	ldr	r3, [pc, #616]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ea46:	fba3 1302 	umull	r1, r3, r3, r2
 800ea4a:	095b      	lsrs	r3, r3, #5
 800ea4c:	2164      	movs	r1, #100	; 0x64
 800ea4e:	fb01 f303 	mul.w	r3, r1, r3
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	011b      	lsls	r3, r3, #4
 800ea56:	3332      	adds	r3, #50	; 0x32
 800ea58:	4a95      	ldr	r2, [pc, #596]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ea5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea5e:	095b      	lsrs	r3, r3, #5
 800ea60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea64:	4498      	add	r8, r3
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	469b      	mov	fp, r3
 800ea6a:	f04f 0c00 	mov.w	ip, #0
 800ea6e:	46d9      	mov	r9, fp
 800ea70:	46e2      	mov	sl, ip
 800ea72:	eb19 0309 	adds.w	r3, r9, r9
 800ea76:	eb4a 040a 	adc.w	r4, sl, sl
 800ea7a:	4699      	mov	r9, r3
 800ea7c:	46a2      	mov	sl, r4
 800ea7e:	eb19 090b 	adds.w	r9, r9, fp
 800ea82:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea86:	f04f 0100 	mov.w	r1, #0
 800ea8a:	f04f 0200 	mov.w	r2, #0
 800ea8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea9a:	4689      	mov	r9, r1
 800ea9c:	4692      	mov	sl, r2
 800ea9e:	eb1b 0509 	adds.w	r5, fp, r9
 800eaa2:	eb4c 060a 	adc.w	r6, ip, sl
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	f04f 0200 	mov.w	r2, #0
 800eab0:	f04f 0300 	mov.w	r3, #0
 800eab4:	f04f 0400 	mov.w	r4, #0
 800eab8:	0094      	lsls	r4, r2, #2
 800eaba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eabe:	008b      	lsls	r3, r1, #2
 800eac0:	461a      	mov	r2, r3
 800eac2:	4623      	mov	r3, r4
 800eac4:	4628      	mov	r0, r5
 800eac6:	4631      	mov	r1, r6
 800eac8:	f7f2 f8ee 	bl	8000ca8 <__aeabi_uldivmod>
 800eacc:	4603      	mov	r3, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	461a      	mov	r2, r3
 800ead2:	4b77      	ldr	r3, [pc, #476]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ead4:	fba3 1302 	umull	r1, r3, r3, r2
 800ead8:	095b      	lsrs	r3, r3, #5
 800eada:	2164      	movs	r1, #100	; 0x64
 800eadc:	fb01 f303 	mul.w	r3, r1, r3
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	011b      	lsls	r3, r3, #4
 800eae4:	3332      	adds	r3, #50	; 0x32
 800eae6:	4a72      	ldr	r2, [pc, #456]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800eae8:	fba2 2303 	umull	r2, r3, r2, r3
 800eaec:	095b      	lsrs	r3, r3, #5
 800eaee:	f003 020f 	and.w	r2, r3, #15
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4442      	add	r2, r8
 800eaf8:	609a      	str	r2, [r3, #8]
 800eafa:	e0d0      	b.n	800ec9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800eafc:	f7fe fec4 	bl	800d888 <HAL_RCC_GetPCLK1Freq>
 800eb00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	469a      	mov	sl, r3
 800eb06:	f04f 0b00 	mov.w	fp, #0
 800eb0a:	46d0      	mov	r8, sl
 800eb0c:	46d9      	mov	r9, fp
 800eb0e:	eb18 0308 	adds.w	r3, r8, r8
 800eb12:	eb49 0409 	adc.w	r4, r9, r9
 800eb16:	4698      	mov	r8, r3
 800eb18:	46a1      	mov	r9, r4
 800eb1a:	eb18 080a 	adds.w	r8, r8, sl
 800eb1e:	eb49 090b 	adc.w	r9, r9, fp
 800eb22:	f04f 0100 	mov.w	r1, #0
 800eb26:	f04f 0200 	mov.w	r2, #0
 800eb2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eb2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eb32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eb36:	4688      	mov	r8, r1
 800eb38:	4691      	mov	r9, r2
 800eb3a:	eb1a 0508 	adds.w	r5, sl, r8
 800eb3e:	eb4b 0609 	adc.w	r6, fp, r9
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	4619      	mov	r1, r3
 800eb48:	f04f 0200 	mov.w	r2, #0
 800eb4c:	f04f 0300 	mov.w	r3, #0
 800eb50:	f04f 0400 	mov.w	r4, #0
 800eb54:	0094      	lsls	r4, r2, #2
 800eb56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eb5a:	008b      	lsls	r3, r1, #2
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	4623      	mov	r3, r4
 800eb60:	4628      	mov	r0, r5
 800eb62:	4631      	mov	r1, r6
 800eb64:	f7f2 f8a0 	bl	8000ca8 <__aeabi_uldivmod>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	4b50      	ldr	r3, [pc, #320]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800eb70:	fba3 2302 	umull	r2, r3, r3, r2
 800eb74:	095b      	lsrs	r3, r3, #5
 800eb76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	469b      	mov	fp, r3
 800eb7e:	f04f 0c00 	mov.w	ip, #0
 800eb82:	46d9      	mov	r9, fp
 800eb84:	46e2      	mov	sl, ip
 800eb86:	eb19 0309 	adds.w	r3, r9, r9
 800eb8a:	eb4a 040a 	adc.w	r4, sl, sl
 800eb8e:	4699      	mov	r9, r3
 800eb90:	46a2      	mov	sl, r4
 800eb92:	eb19 090b 	adds.w	r9, r9, fp
 800eb96:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eb9a:	f04f 0100 	mov.w	r1, #0
 800eb9e:	f04f 0200 	mov.w	r2, #0
 800eba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eba6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ebaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ebae:	4689      	mov	r9, r1
 800ebb0:	4692      	mov	sl, r2
 800ebb2:	eb1b 0509 	adds.w	r5, fp, r9
 800ebb6:	eb4c 060a 	adc.w	r6, ip, sl
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	f04f 0200 	mov.w	r2, #0
 800ebc4:	f04f 0300 	mov.w	r3, #0
 800ebc8:	f04f 0400 	mov.w	r4, #0
 800ebcc:	0094      	lsls	r4, r2, #2
 800ebce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ebd2:	008b      	lsls	r3, r1, #2
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	4623      	mov	r3, r4
 800ebd8:	4628      	mov	r0, r5
 800ebda:	4631      	mov	r1, r6
 800ebdc:	f7f2 f864 	bl	8000ca8 <__aeabi_uldivmod>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	4b32      	ldr	r3, [pc, #200]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ebe8:	fba3 1302 	umull	r1, r3, r3, r2
 800ebec:	095b      	lsrs	r3, r3, #5
 800ebee:	2164      	movs	r1, #100	; 0x64
 800ebf0:	fb01 f303 	mul.w	r3, r1, r3
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	011b      	lsls	r3, r3, #4
 800ebf8:	3332      	adds	r3, #50	; 0x32
 800ebfa:	4a2d      	ldr	r2, [pc, #180]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ebfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ec00:	095b      	lsrs	r3, r3, #5
 800ec02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec06:	4498      	add	r8, r3
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	469b      	mov	fp, r3
 800ec0c:	f04f 0c00 	mov.w	ip, #0
 800ec10:	46d9      	mov	r9, fp
 800ec12:	46e2      	mov	sl, ip
 800ec14:	eb19 0309 	adds.w	r3, r9, r9
 800ec18:	eb4a 040a 	adc.w	r4, sl, sl
 800ec1c:	4699      	mov	r9, r3
 800ec1e:	46a2      	mov	sl, r4
 800ec20:	eb19 090b 	adds.w	r9, r9, fp
 800ec24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ec28:	f04f 0100 	mov.w	r1, #0
 800ec2c:	f04f 0200 	mov.w	r2, #0
 800ec30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec3c:	4689      	mov	r9, r1
 800ec3e:	4692      	mov	sl, r2
 800ec40:	eb1b 0509 	adds.w	r5, fp, r9
 800ec44:	eb4c 060a 	adc.w	r6, ip, sl
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	f04f 0200 	mov.w	r2, #0
 800ec52:	f04f 0300 	mov.w	r3, #0
 800ec56:	f04f 0400 	mov.w	r4, #0
 800ec5a:	0094      	lsls	r4, r2, #2
 800ec5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ec60:	008b      	lsls	r3, r1, #2
 800ec62:	461a      	mov	r2, r3
 800ec64:	4623      	mov	r3, r4
 800ec66:	4628      	mov	r0, r5
 800ec68:	4631      	mov	r1, r6
 800ec6a:	f7f2 f81d 	bl	8000ca8 <__aeabi_uldivmod>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	460c      	mov	r4, r1
 800ec72:	461a      	mov	r2, r3
 800ec74:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ec76:	fba3 1302 	umull	r1, r3, r3, r2
 800ec7a:	095b      	lsrs	r3, r3, #5
 800ec7c:	2164      	movs	r1, #100	; 0x64
 800ec7e:	fb01 f303 	mul.w	r3, r1, r3
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	011b      	lsls	r3, r3, #4
 800ec86:	3332      	adds	r3, #50	; 0x32
 800ec88:	4a09      	ldr	r2, [pc, #36]	; (800ecb0 <UART_SetConfig+0x6f4>)
 800ec8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec8e:	095b      	lsrs	r3, r3, #5
 800ec90:	f003 020f 	and.w	r2, r3, #15
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4442      	add	r2, r8
 800ec9a:	609a      	str	r2, [r3, #8]
}
 800ec9c:	e7ff      	b.n	800ec9e <UART_SetConfig+0x6e2>
 800ec9e:	bf00      	nop
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca8:	40011000 	.word	0x40011000
 800ecac:	40011400 	.word	0x40011400
 800ecb0:	51eb851f 	.word	0x51eb851f

0800ecb4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eccc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	4b20      	ldr	r3, [pc, #128]	; (800ed54 <FSMC_NORSRAM_Init+0xa0>)
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ecde:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ece4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ecea:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ecf0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ecf6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ecfc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ed02:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ed08:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ed0e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ed14:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800ed1a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ed20:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	2b08      	cmp	r3, #8
 800ed2e:	d103      	bne.n	800ed38 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed36:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	fff00080 	.word	0xfff00080

0800ed58 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed72:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ed7a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed86:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ed8e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ed96:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800eda0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	3b02      	subs	r3, #2
 800eda8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800edaa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800edb0:	4313      	orrs	r3, r2
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6979      	ldr	r1, [r7, #20]
 800edc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	371c      	adds	r7, #28
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
	...

0800edd4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b087      	sub	sp, #28
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edec:	d122      	bne.n	800ee34 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800edf8:	697a      	ldr	r2, [r7, #20]
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800edfc:	4013      	ands	r3, r2
 800edfe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee0a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ee12:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ee1a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ee20:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	4313      	orrs	r3, r2
 800ee26:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	6979      	ldr	r1, [r7, #20]
 800ee2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee32:	e005      	b.n	800ee40 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ee3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	cff00000 	.word	0xcff00000

0800ee54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee54:	b084      	sub	sp, #16
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	f107 001c 	add.w	r0, r7, #28
 800ee62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d122      	bne.n	800eeb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ee80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d105      	bne.n	800eea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f001 fa7c 	bl	80103a4 <USB_CoreReset>
 800eeac:	4603      	mov	r3, r0
 800eeae:	73fb      	strb	r3, [r7, #15]
 800eeb0:	e01a      	b.n	800eee8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f001 fa70 	bl	80103a4 <USB_CoreReset>
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	639a      	str	r2, [r3, #56]	; 0x38
 800eeda:	e005      	b.n	800eee8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d10b      	bne.n	800ef06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	f043 0206 	orr.w	r2, r3, #6
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f043 0220 	orr.w	r2, r3, #32
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef12:	b004      	add	sp, #16
 800ef14:	4770      	bx	lr
	...

0800ef18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	4613      	mov	r3, r2
 800ef24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ef26:	79fb      	ldrb	r3, [r7, #7]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d165      	bne.n	800eff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	4a41      	ldr	r2, [pc, #260]	; (800f034 <USB_SetTurnaroundTime+0x11c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d906      	bls.n	800ef42 <USB_SetTurnaroundTime+0x2a>
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	4a40      	ldr	r2, [pc, #256]	; (800f038 <USB_SetTurnaroundTime+0x120>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d802      	bhi.n	800ef42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ef3c:	230f      	movs	r3, #15
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	e062      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	4a3c      	ldr	r2, [pc, #240]	; (800f038 <USB_SetTurnaroundTime+0x120>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d906      	bls.n	800ef58 <USB_SetTurnaroundTime+0x40>
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	4a3b      	ldr	r2, [pc, #236]	; (800f03c <USB_SetTurnaroundTime+0x124>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d802      	bhi.n	800ef58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ef52:	230e      	movs	r3, #14
 800ef54:	617b      	str	r3, [r7, #20]
 800ef56:	e057      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	4a38      	ldr	r2, [pc, #224]	; (800f03c <USB_SetTurnaroundTime+0x124>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d906      	bls.n	800ef6e <USB_SetTurnaroundTime+0x56>
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	4a37      	ldr	r2, [pc, #220]	; (800f040 <USB_SetTurnaroundTime+0x128>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d802      	bhi.n	800ef6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ef68:	230d      	movs	r3, #13
 800ef6a:	617b      	str	r3, [r7, #20]
 800ef6c:	e04c      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	4a33      	ldr	r2, [pc, #204]	; (800f040 <USB_SetTurnaroundTime+0x128>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d906      	bls.n	800ef84 <USB_SetTurnaroundTime+0x6c>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	4a32      	ldr	r2, [pc, #200]	; (800f044 <USB_SetTurnaroundTime+0x12c>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d802      	bhi.n	800ef84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ef7e:	230c      	movs	r3, #12
 800ef80:	617b      	str	r3, [r7, #20]
 800ef82:	e041      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	4a2f      	ldr	r2, [pc, #188]	; (800f044 <USB_SetTurnaroundTime+0x12c>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d906      	bls.n	800ef9a <USB_SetTurnaroundTime+0x82>
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	4a2e      	ldr	r2, [pc, #184]	; (800f048 <USB_SetTurnaroundTime+0x130>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d802      	bhi.n	800ef9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ef94:	230b      	movs	r3, #11
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	e036      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	4a2a      	ldr	r2, [pc, #168]	; (800f048 <USB_SetTurnaroundTime+0x130>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d906      	bls.n	800efb0 <USB_SetTurnaroundTime+0x98>
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	4a29      	ldr	r2, [pc, #164]	; (800f04c <USB_SetTurnaroundTime+0x134>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d802      	bhi.n	800efb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800efaa:	230a      	movs	r3, #10
 800efac:	617b      	str	r3, [r7, #20]
 800efae:	e02b      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	4a26      	ldr	r2, [pc, #152]	; (800f04c <USB_SetTurnaroundTime+0x134>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d906      	bls.n	800efc6 <USB_SetTurnaroundTime+0xae>
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	4a25      	ldr	r2, [pc, #148]	; (800f050 <USB_SetTurnaroundTime+0x138>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d802      	bhi.n	800efc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800efc0:	2309      	movs	r3, #9
 800efc2:	617b      	str	r3, [r7, #20]
 800efc4:	e020      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	4a21      	ldr	r2, [pc, #132]	; (800f050 <USB_SetTurnaroundTime+0x138>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d906      	bls.n	800efdc <USB_SetTurnaroundTime+0xc4>
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	4a20      	ldr	r2, [pc, #128]	; (800f054 <USB_SetTurnaroundTime+0x13c>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d802      	bhi.n	800efdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800efd6:	2308      	movs	r3, #8
 800efd8:	617b      	str	r3, [r7, #20]
 800efda:	e015      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	4a1d      	ldr	r2, [pc, #116]	; (800f054 <USB_SetTurnaroundTime+0x13c>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d906      	bls.n	800eff2 <USB_SetTurnaroundTime+0xda>
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	4a1c      	ldr	r2, [pc, #112]	; (800f058 <USB_SetTurnaroundTime+0x140>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d802      	bhi.n	800eff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800efec:	2307      	movs	r3, #7
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	e00a      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eff2:	2306      	movs	r3, #6
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	e007      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d102      	bne.n	800f004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800effe:	2309      	movs	r3, #9
 800f000:	617b      	str	r3, [r7, #20]
 800f002:	e001      	b.n	800f008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f004:	2309      	movs	r3, #9
 800f006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	68da      	ldr	r2, [r3, #12]
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	029b      	lsls	r3, r3, #10
 800f01c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f020:	431a      	orrs	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	371c      	adds	r7, #28
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	00d8acbf 	.word	0x00d8acbf
 800f038:	00e4e1bf 	.word	0x00e4e1bf
 800f03c:	00f423ff 	.word	0x00f423ff
 800f040:	0106737f 	.word	0x0106737f
 800f044:	011a499f 	.word	0x011a499f
 800f048:	01312cff 	.word	0x01312cff
 800f04c:	014ca43f 	.word	0x014ca43f
 800f050:	016e35ff 	.word	0x016e35ff
 800f054:	01a6ab1f 	.word	0x01a6ab1f
 800f058:	01e847ff 	.word	0x01e847ff

0800f05c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	f043 0201 	orr.w	r2, r3, #1
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f07e:	b480      	push	{r7}
 800f080:	b083      	sub	sp, #12
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f023 0201 	bic.w	r2, r3, #1
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f0b8:	78fb      	ldrb	r3, [r7, #3]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d106      	bne.n	800f0cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	60da      	str	r2, [r3, #12]
 800f0ca:	e00b      	b.n	800f0e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f0cc:	78fb      	ldrb	r3, [r7, #3]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d106      	bne.n	800f0e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	60da      	str	r2, [r3, #12]
 800f0de:	e001      	b.n	800f0e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e003      	b.n	800f0ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f0e4:	2032      	movs	r0, #50	; 0x32
 800f0e6:	f7fb ff5f 	bl	800afa8 <HAL_Delay>

  return HAL_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f10e:	2300      	movs	r3, #0
 800f110:	613b      	str	r3, [r7, #16]
 800f112:	e009      	b.n	800f128 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	3340      	adds	r3, #64	; 0x40
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	3301      	adds	r3, #1
 800f126:	613b      	str	r3, [r7, #16]
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2b0e      	cmp	r3, #14
 800f12c:	d9f2      	bls.n	800f114 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f130:	2b00      	cmp	r3, #0
 800f132:	d112      	bne.n	800f15a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f138:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f144:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f150:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	639a      	str	r2, [r3, #56]	; 0x38
 800f158:	e00b      	b.n	800f172 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f16a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f178:	461a      	mov	r2, r3
 800f17a:	2300      	movs	r3, #0
 800f17c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f184:	4619      	mov	r1, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f18c:	461a      	mov	r2, r3
 800f18e:	680b      	ldr	r3, [r1, #0]
 800f190:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f194:	2b01      	cmp	r3, #1
 800f196:	d10c      	bne.n	800f1b2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d104      	bne.n	800f1a8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f19e:	2100      	movs	r1, #0
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f961 	bl	800f468 <USB_SetDevSpeed>
 800f1a6:	e008      	b.n	800f1ba <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f95c 	bl	800f468 <USB_SetDevSpeed>
 800f1b0:	e003      	b.n	800f1ba <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f1b2:	2103      	movs	r1, #3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f957 	bl	800f468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f1ba:	2110      	movs	r1, #16
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f90b 	bl	800f3d8 <USB_FlushTxFifo>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 f929 	bl	800f424 <USB_FlushRxFifo>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f200:	2300      	movs	r3, #0
 800f202:	613b      	str	r3, [r7, #16]
 800f204:	e043      	b.n	800f28e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	015a      	lsls	r2, r3, #5
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f21c:	d118      	bne.n	800f250 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f230:	461a      	mov	r2, r3
 800f232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f236:	6013      	str	r3, [r2, #0]
 800f238:	e013      	b.n	800f262 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	015a      	lsls	r2, r3, #5
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	4413      	add	r3, r2
 800f242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f246:	461a      	mov	r2, r3
 800f248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f24c:	6013      	str	r3, [r2, #0]
 800f24e:	e008      	b.n	800f262 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	015a      	lsls	r2, r3, #5
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	4413      	add	r3, r2
 800f258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25c:	461a      	mov	r2, r3
 800f25e:	2300      	movs	r3, #0
 800f260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	015a      	lsls	r2, r3, #5
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	4413      	add	r3, r2
 800f26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f26e:	461a      	mov	r2, r3
 800f270:	2300      	movs	r3, #0
 800f272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	015a      	lsls	r2, r3, #5
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	4413      	add	r3, r2
 800f27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f280:	461a      	mov	r2, r3
 800f282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	3301      	adds	r3, #1
 800f28c:	613b      	str	r3, [r7, #16]
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	429a      	cmp	r2, r3
 800f294:	d3b7      	bcc.n	800f206 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f296:	2300      	movs	r3, #0
 800f298:	613b      	str	r3, [r7, #16]
 800f29a:	e043      	b.n	800f324 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	015a      	lsls	r2, r3, #5
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2b2:	d118      	bne.n	800f2e6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10a      	bne.n	800f2d0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2cc:	6013      	str	r3, [r2, #0]
 800f2ce:	e013      	b.n	800f2f8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f2e2:	6013      	str	r3, [r2, #0]
 800f2e4:	e008      	b.n	800f2f8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	015a      	lsls	r2, r3, #5
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	015a      	lsls	r2, r3, #5
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4413      	add	r3, r2
 800f300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f304:	461a      	mov	r2, r3
 800f306:	2300      	movs	r3, #0
 800f308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	015a      	lsls	r2, r3, #5
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4413      	add	r3, r2
 800f312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f316:	461a      	mov	r2, r3
 800f318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f31c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	3301      	adds	r3, #1
 800f322:	613b      	str	r3, [r7, #16]
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d3b7      	bcc.n	800f29c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f33a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f33e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	2b01      	cmp	r3, #1
 800f344:	d111      	bne.n	800f36a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f34c:	461a      	mov	r2, r3
 800f34e:	4b20      	ldr	r3, [pc, #128]	; (800f3d0 <USB_DevInit+0x2dc>)
 800f350:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f364:	f043 0303 	orr.w	r3, r3, #3
 800f368:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f376:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d105      	bne.n	800f38a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	699b      	ldr	r3, [r3, #24]
 800f382:	f043 0210 	orr.w	r2, r3, #16
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	699a      	ldr	r2, [r3, #24]
 800f38e:	4b11      	ldr	r3, [pc, #68]	; (800f3d4 <USB_DevInit+0x2e0>)
 800f390:	4313      	orrs	r3, r2
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d005      	beq.n	800f3a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	699b      	ldr	r3, [r3, #24]
 800f3a0:	f043 0208 	orr.w	r2, r3, #8
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d107      	bne.n	800f3be <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	699b      	ldr	r3, [r3, #24]
 800f3b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3b6:	f043 0304 	orr.w	r3, r3, #4
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3ca:	b004      	add	sp, #16
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	00800100 	.word	0x00800100
 800f3d4:	803c3800 	.word	0x803c3800

0800f3d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	019b      	lsls	r3, r3, #6
 800f3ea:	f043 0220 	orr.w	r2, r3, #32
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	4a09      	ldr	r2, [pc, #36]	; (800f420 <USB_FlushTxFifo+0x48>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d901      	bls.n	800f404 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f400:	2303      	movs	r3, #3
 800f402:	e006      	b.n	800f412 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	f003 0320 	and.w	r3, r3, #32
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d0f0      	beq.n	800f3f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	00030d40 	.word	0x00030d40

0800f424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2210      	movs	r2, #16
 800f434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4a09      	ldr	r2, [pc, #36]	; (800f464 <USB_FlushRxFifo+0x40>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d901      	bls.n	800f448 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f444:	2303      	movs	r3, #3
 800f446:	e006      	b.n	800f456 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	691b      	ldr	r3, [r3, #16]
 800f44c:	f003 0310 	and.w	r3, r3, #16
 800f450:	2b10      	cmp	r3, #16
 800f452:	d0f0      	beq.n	800f436 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3714      	adds	r7, #20
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	00030d40 	.word	0x00030d40

0800f468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	68f9      	ldr	r1, [r7, #12]
 800f484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f488:	4313      	orrs	r3, r2
 800f48a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f49a:	b480      	push	{r7}
 800f49c:	b087      	sub	sp, #28
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	f003 0306 	and.w	r3, r3, #6
 800f4b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d102      	bne.n	800f4c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	75fb      	strb	r3, [r7, #23]
 800f4be:	e00a      	b.n	800f4d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d002      	beq.n	800f4cc <USB_GetDevSpeed+0x32>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2b06      	cmp	r3, #6
 800f4ca:	d102      	bne.n	800f4d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	75fb      	strb	r3, [r7, #23]
 800f4d0:	e001      	b.n	800f4d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f4d2:	230f      	movs	r3, #15
 800f4d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	371c      	adds	r7, #28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	785b      	ldrb	r3, [r3, #1]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d13a      	bne.n	800f576 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f506:	69da      	ldr	r2, [r3, #28]
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 030f 	and.w	r3, r3, #15
 800f510:	2101      	movs	r1, #1
 800f512:	fa01 f303 	lsl.w	r3, r1, r3
 800f516:	b29b      	uxth	r3, r3
 800f518:	68f9      	ldr	r1, [r7, #12]
 800f51a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f51e:	4313      	orrs	r3, r2
 800f520:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	015a      	lsls	r2, r3, #5
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	4413      	add	r3, r2
 800f52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d155      	bne.n	800f5e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	78db      	ldrb	r3, [r3, #3]
 800f552:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f554:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	059b      	lsls	r3, r3, #22
 800f55a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f55c:	4313      	orrs	r3, r2
 800f55e:	68ba      	ldr	r2, [r7, #8]
 800f560:	0151      	lsls	r1, r2, #5
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	440a      	add	r2, r1
 800f566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f56e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f572:	6013      	str	r3, [r2, #0]
 800f574:	e036      	b.n	800f5e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57c:	69da      	ldr	r2, [r3, #28]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	f003 030f 	and.w	r3, r3, #15
 800f586:	2101      	movs	r1, #1
 800f588:	fa01 f303 	lsl.w	r3, r1, r3
 800f58c:	041b      	lsls	r3, r3, #16
 800f58e:	68f9      	ldr	r1, [r7, #12]
 800f590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f594:	4313      	orrs	r3, r2
 800f596:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d11a      	bne.n	800f5e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	78db      	ldrb	r3, [r3, #3]
 800f5c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f5ca:	430b      	orrs	r3, r1
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	0151      	lsls	r1, r2, #5
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	440a      	add	r2, r1
 800f5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
	...

0800f5f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	785b      	ldrb	r3, [r3, #1]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d135      	bne.n	800f67c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	f003 030f 	and.w	r3, r3, #15
 800f620:	2101      	movs	r1, #1
 800f622:	fa01 f303 	lsl.w	r3, r1, r3
 800f626:	b29b      	uxth	r3, r3
 800f628:	43db      	mvns	r3, r3
 800f62a:	68f9      	ldr	r1, [r7, #12]
 800f62c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f630:	4013      	ands	r3, r2
 800f632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f63a:	69da      	ldr	r2, [r3, #28]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	f003 030f 	and.w	r3, r3, #15
 800f644:	2101      	movs	r1, #1
 800f646:	fa01 f303 	lsl.w	r3, r1, r3
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	43db      	mvns	r3, r3
 800f64e:	68f9      	ldr	r1, [r7, #12]
 800f650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f654:	4013      	ands	r3, r2
 800f656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	0159      	lsls	r1, r3, #5
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	440b      	add	r3, r1
 800f66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f672:	4619      	mov	r1, r3
 800f674:	4b1f      	ldr	r3, [pc, #124]	; (800f6f4 <USB_DeactivateEndpoint+0x100>)
 800f676:	4013      	ands	r3, r2
 800f678:	600b      	str	r3, [r1, #0]
 800f67a:	e034      	b.n	800f6e6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	f003 030f 	and.w	r3, r3, #15
 800f68c:	2101      	movs	r1, #1
 800f68e:	fa01 f303 	lsl.w	r3, r1, r3
 800f692:	041b      	lsls	r3, r3, #16
 800f694:	43db      	mvns	r3, r3
 800f696:	68f9      	ldr	r1, [r7, #12]
 800f698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f69c:	4013      	ands	r3, r2
 800f69e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6a6:	69da      	ldr	r2, [r3, #28]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	f003 030f 	and.w	r3, r3, #15
 800f6b0:	2101      	movs	r1, #1
 800f6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f6b6:	041b      	lsls	r3, r3, #16
 800f6b8:	43db      	mvns	r3, r3
 800f6ba:	68f9      	ldr	r1, [r7, #12]
 800f6bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6c0:	4013      	ands	r3, r2
 800f6c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	015a      	lsls	r2, r3, #5
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	0159      	lsls	r1, r3, #5
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	440b      	add	r3, r1
 800f6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6de:	4619      	mov	r1, r3
 800f6e0:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <USB_DeactivateEndpoint+0x104>)
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3714      	adds	r7, #20
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	ec337800 	.word	0xec337800
 800f6f8:	eff37800 	.word	0xeff37800

0800f6fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08a      	sub	sp, #40	; 0x28
 800f700:	af02      	add	r7, sp, #8
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4613      	mov	r3, r2
 800f708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	785b      	ldrb	r3, [r3, #1]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	f040 815c 	bne.w	800f9d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	695b      	ldr	r3, [r3, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d132      	bne.n	800f78c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	015a      	lsls	r2, r3, #5
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	4413      	add	r3, r2
 800f72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f732:	691b      	ldr	r3, [r3, #16]
 800f734:	69ba      	ldr	r2, [r7, #24]
 800f736:	0151      	lsls	r1, r2, #5
 800f738:	69fa      	ldr	r2, [r7, #28]
 800f73a:	440a      	add	r2, r1
 800f73c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f740:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f744:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	015a      	lsls	r2, r3, #5
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	4413      	add	r3, r2
 800f752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	69ba      	ldr	r2, [r7, #24]
 800f75a:	0151      	lsls	r1, r2, #5
 800f75c:	69fa      	ldr	r2, [r7, #28]
 800f75e:	440a      	add	r2, r1
 800f760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	015a      	lsls	r2, r3, #5
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	4413      	add	r3, r2
 800f772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	0151      	lsls	r1, r2, #5
 800f77c:	69fa      	ldr	r2, [r7, #28]
 800f77e:	440a      	add	r2, r1
 800f780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f784:	0cdb      	lsrs	r3, r3, #19
 800f786:	04db      	lsls	r3, r3, #19
 800f788:	6113      	str	r3, [r2, #16]
 800f78a:	e074      	b.n	800f876 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	015a      	lsls	r2, r3, #5
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	4413      	add	r3, r2
 800f794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	69ba      	ldr	r2, [r7, #24]
 800f79c:	0151      	lsls	r1, r2, #5
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	440a      	add	r2, r1
 800f7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7a6:	0cdb      	lsrs	r3, r3, #19
 800f7a8:	04db      	lsls	r3, r3, #19
 800f7aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	015a      	lsls	r2, r3, #5
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	69ba      	ldr	r2, [r7, #24]
 800f7bc:	0151      	lsls	r1, r2, #5
 800f7be:	69fa      	ldr	r2, [r7, #28]
 800f7c0:	440a      	add	r2, r1
 800f7c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	015a      	lsls	r2, r3, #5
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7dc:	691a      	ldr	r2, [r3, #16]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	6959      	ldr	r1, [r3, #20]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	440b      	add	r3, r1
 800f7e8:	1e59      	subs	r1, r3, #1
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7f2:	04d9      	lsls	r1, r3, #19
 800f7f4:	4b9d      	ldr	r3, [pc, #628]	; (800fa6c <USB_EPStartXfer+0x370>)
 800f7f6:	400b      	ands	r3, r1
 800f7f8:	69b9      	ldr	r1, [r7, #24]
 800f7fa:	0148      	lsls	r0, r1, #5
 800f7fc:	69f9      	ldr	r1, [r7, #28]
 800f7fe:	4401      	add	r1, r0
 800f800:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f804:	4313      	orrs	r3, r2
 800f806:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	015a      	lsls	r2, r3, #5
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	4413      	add	r3, r2
 800f810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f814:	691a      	ldr	r2, [r3, #16]
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f81e:	69b9      	ldr	r1, [r7, #24]
 800f820:	0148      	lsls	r0, r1, #5
 800f822:	69f9      	ldr	r1, [r7, #28]
 800f824:	4401      	add	r1, r0
 800f826:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f82a:	4313      	orrs	r3, r2
 800f82c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	78db      	ldrb	r3, [r3, #3]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d11f      	bne.n	800f876 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	69ba      	ldr	r2, [r7, #24]
 800f846:	0151      	lsls	r1, r2, #5
 800f848:	69fa      	ldr	r2, [r7, #28]
 800f84a:	440a      	add	r2, r1
 800f84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f850:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f854:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	015a      	lsls	r2, r3, #5
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	4413      	add	r3, r2
 800f85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f862:	691b      	ldr	r3, [r3, #16]
 800f864:	69ba      	ldr	r2, [r7, #24]
 800f866:	0151      	lsls	r1, r2, #5
 800f868:	69fa      	ldr	r2, [r7, #28]
 800f86a:	440a      	add	r2, r1
 800f86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f874:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d14b      	bne.n	800f914 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d009      	beq.n	800f898 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	015a      	lsls	r2, r3, #5
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	4413      	add	r3, r2
 800f88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f890:	461a      	mov	r2, r3
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	78db      	ldrb	r3, [r3, #3]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d128      	bne.n	800f8f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d110      	bne.n	800f8d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69ba      	ldr	r2, [r7, #24]
 800f8c0:	0151      	lsls	r1, r2, #5
 800f8c2:	69fa      	ldr	r2, [r7, #28]
 800f8c4:	440a      	add	r2, r1
 800f8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8ce:	6013      	str	r3, [r2, #0]
 800f8d0:	e00f      	b.n	800f8f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	015a      	lsls	r2, r3, #5
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	4413      	add	r3, r2
 800f8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	69ba      	ldr	r2, [r7, #24]
 800f8e2:	0151      	lsls	r1, r2, #5
 800f8e4:	69fa      	ldr	r2, [r7, #28]
 800f8e6:	440a      	add	r2, r1
 800f8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	015a      	lsls	r2, r3, #5
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	69ba      	ldr	r2, [r7, #24]
 800f902:	0151      	lsls	r1, r2, #5
 800f904:	69fa      	ldr	r2, [r7, #28]
 800f906:	440a      	add	r2, r1
 800f908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f90c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	e12f      	b.n	800fb74 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	69ba      	ldr	r2, [r7, #24]
 800f924:	0151      	lsls	r1, r2, #5
 800f926:	69fa      	ldr	r2, [r7, #28]
 800f928:	440a      	add	r2, r1
 800f92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f92e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f932:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	78db      	ldrb	r3, [r3, #3]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d015      	beq.n	800f968 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	f000 8117 	beq.w	800fb74 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	f003 030f 	and.w	r3, r3, #15
 800f956:	2101      	movs	r1, #1
 800f958:	fa01 f303 	lsl.w	r3, r1, r3
 800f95c:	69f9      	ldr	r1, [r7, #28]
 800f95e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f962:	4313      	orrs	r3, r2
 800f964:	634b      	str	r3, [r1, #52]	; 0x34
 800f966:	e105      	b.n	800fb74 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f974:	2b00      	cmp	r3, #0
 800f976:	d110      	bne.n	800f99a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	015a      	lsls	r2, r3, #5
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	4413      	add	r3, r2
 800f980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69ba      	ldr	r2, [r7, #24]
 800f988:	0151      	lsls	r1, r2, #5
 800f98a:	69fa      	ldr	r2, [r7, #28]
 800f98c:	440a      	add	r2, r1
 800f98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	e00f      	b.n	800f9ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	69ba      	ldr	r2, [r7, #24]
 800f9aa:	0151      	lsls	r1, r2, #5
 800f9ac:	69fa      	ldr	r2, [r7, #28]
 800f9ae:	440a      	add	r2, r1
 800f9b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	68d9      	ldr	r1, [r3, #12]
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	781a      	ldrb	r2, [r3, #0]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	695b      	ldr	r3, [r3, #20]
 800f9c6:	b298      	uxth	r0, r3
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f000 fa2b 	bl	800fe2a <USB_WritePacket>
 800f9d4:	e0ce      	b.n	800fb74 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	015a      	lsls	r2, r3, #5
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	4413      	add	r3, r2
 800f9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	69ba      	ldr	r2, [r7, #24]
 800f9e6:	0151      	lsls	r1, r2, #5
 800f9e8:	69fa      	ldr	r2, [r7, #28]
 800f9ea:	440a      	add	r2, r1
 800f9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9f0:	0cdb      	lsrs	r3, r3, #19
 800f9f2:	04db      	lsls	r3, r3, #19
 800f9f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	015a      	lsls	r2, r3, #5
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa02:	691b      	ldr	r3, [r3, #16]
 800fa04:	69ba      	ldr	r2, [r7, #24]
 800fa06:	0151      	lsls	r1, r2, #5
 800fa08:	69fa      	ldr	r2, [r7, #28]
 800fa0a:	440a      	add	r2, r1
 800fa0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d126      	bne.n	800fa70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	015a      	lsls	r2, r3, #5
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	4413      	add	r3, r2
 800fa2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa2e:	691a      	ldr	r2, [r3, #16]
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa38:	69b9      	ldr	r1, [r7, #24]
 800fa3a:	0148      	lsls	r0, r1, #5
 800fa3c:	69f9      	ldr	r1, [r7, #28]
 800fa3e:	4401      	add	r1, r0
 800fa40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa44:	4313      	orrs	r3, r2
 800fa46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa54:	691b      	ldr	r3, [r3, #16]
 800fa56:	69ba      	ldr	r2, [r7, #24]
 800fa58:	0151      	lsls	r1, r2, #5
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	440a      	add	r2, r1
 800fa5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa66:	6113      	str	r3, [r2, #16]
 800fa68:	e036      	b.n	800fad8 <USB_EPStartXfer+0x3dc>
 800fa6a:	bf00      	nop
 800fa6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	695a      	ldr	r2, [r3, #20]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	4413      	add	r3, r2
 800fa7a:	1e5a      	subs	r2, r3, #1
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	015a      	lsls	r2, r3, #5
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa92:	691a      	ldr	r2, [r3, #16]
 800fa94:	8afb      	ldrh	r3, [r7, #22]
 800fa96:	04d9      	lsls	r1, r3, #19
 800fa98:	4b39      	ldr	r3, [pc, #228]	; (800fb80 <USB_EPStartXfer+0x484>)
 800fa9a:	400b      	ands	r3, r1
 800fa9c:	69b9      	ldr	r1, [r7, #24]
 800fa9e:	0148      	lsls	r0, r1, #5
 800faa0:	69f9      	ldr	r1, [r7, #28]
 800faa2:	4401      	add	r1, r0
 800faa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800faa8:	4313      	orrs	r3, r2
 800faaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	015a      	lsls	r2, r3, #5
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	4413      	add	r3, r2
 800fab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fab8:	691a      	ldr	r2, [r3, #16]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	8af9      	ldrh	r1, [r7, #22]
 800fac0:	fb01 f303 	mul.w	r3, r1, r3
 800fac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fac8:	69b9      	ldr	r1, [r7, #24]
 800faca:	0148      	lsls	r0, r1, #5
 800facc:	69f9      	ldr	r1, [r7, #28]
 800face:	4401      	add	r1, r0
 800fad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fad4:	4313      	orrs	r3, r2
 800fad6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d10d      	bne.n	800fafa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d009      	beq.n	800fafa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	68d9      	ldr	r1, [r3, #12]
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf6:	460a      	mov	r2, r1
 800faf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	78db      	ldrb	r3, [r3, #3]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d128      	bne.n	800fb54 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d110      	bne.n	800fb34 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	015a      	lsls	r2, r3, #5
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	4413      	add	r3, r2
 800fb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	69ba      	ldr	r2, [r7, #24]
 800fb22:	0151      	lsls	r1, r2, #5
 800fb24:	69fa      	ldr	r2, [r7, #28]
 800fb26:	440a      	add	r2, r1
 800fb28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb30:	6013      	str	r3, [r2, #0]
 800fb32:	e00f      	b.n	800fb54 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fb34:	69bb      	ldr	r3, [r7, #24]
 800fb36:	015a      	lsls	r2, r3, #5
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	69ba      	ldr	r2, [r7, #24]
 800fb44:	0151      	lsls	r1, r2, #5
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	440a      	add	r2, r1
 800fb4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	015a      	lsls	r2, r3, #5
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	69ba      	ldr	r2, [r7, #24]
 800fb64:	0151      	lsls	r1, r2, #5
 800fb66:	69fa      	ldr	r2, [r7, #28]
 800fb68:	440a      	add	r2, r1
 800fb6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	1ff80000 	.word	0x1ff80000

0800fb84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	f040 80cd 	bne.w	800fd40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	695b      	ldr	r3, [r3, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d132      	bne.n	800fc14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	015a      	lsls	r2, r3, #5
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	693a      	ldr	r2, [r7, #16]
 800fbbe:	0151      	lsls	r1, r2, #5
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	440a      	add	r2, r1
 800fbc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fbcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fbd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	015a      	lsls	r2, r3, #5
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	4413      	add	r3, r2
 800fbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbde:	691b      	ldr	r3, [r3, #16]
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	0151      	lsls	r1, r2, #5
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	440a      	add	r2, r1
 800fbe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	015a      	lsls	r2, r3, #5
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	0151      	lsls	r1, r2, #5
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	440a      	add	r2, r1
 800fc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc0c:	0cdb      	lsrs	r3, r3, #19
 800fc0e:	04db      	lsls	r3, r3, #19
 800fc10:	6113      	str	r3, [r2, #16]
 800fc12:	e04e      	b.n	800fcb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	015a      	lsls	r2, r3, #5
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	0151      	lsls	r1, r2, #5
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	440a      	add	r2, r1
 800fc2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc2e:	0cdb      	lsrs	r3, r3, #19
 800fc30:	04db      	lsls	r3, r3, #19
 800fc32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	015a      	lsls	r2, r3, #5
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	0151      	lsls	r1, r2, #5
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	440a      	add	r2, r1
 800fc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	695a      	ldr	r2, [r3, #20]
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d903      	bls.n	800fc6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	689a      	ldr	r2, [r3, #8]
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	015a      	lsls	r2, r3, #5
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	4413      	add	r3, r2
 800fc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	0151      	lsls	r1, r2, #5
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	440a      	add	r2, r1
 800fc82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	015a      	lsls	r2, r3, #5
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	4413      	add	r3, r2
 800fc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc98:	691a      	ldr	r2, [r3, #16]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fca2:	6939      	ldr	r1, [r7, #16]
 800fca4:	0148      	lsls	r0, r1, #5
 800fca6:	6979      	ldr	r1, [r7, #20]
 800fca8:	4401      	add	r1, r0
 800fcaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fcb2:	79fb      	ldrb	r3, [r7, #7]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d11e      	bne.n	800fcf6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d009      	beq.n	800fcd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	015a      	lsls	r2, r3, #5
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fccc:	461a      	mov	r2, r3
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	015a      	lsls	r2, r3, #5
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	4413      	add	r3, r2
 800fcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	0151      	lsls	r1, r2, #5
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	440a      	add	r2, r1
 800fcea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	e092      	b.n	800fe1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	693a      	ldr	r2, [r7, #16]
 800fd06:	0151      	lsls	r1, r2, #5
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	440a      	add	r2, r1
 800fd0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	695b      	ldr	r3, [r3, #20]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d07e      	beq.n	800fe1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	f003 030f 	and.w	r3, r3, #15
 800fd2e:	2101      	movs	r1, #1
 800fd30:	fa01 f303 	lsl.w	r3, r1, r3
 800fd34:	6979      	ldr	r1, [r7, #20]
 800fd36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	634b      	str	r3, [r1, #52]	; 0x34
 800fd3e:	e06d      	b.n	800fe1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	0151      	lsls	r1, r2, #5
 800fd52:	697a      	ldr	r2, [r7, #20]
 800fd54:	440a      	add	r2, r1
 800fd56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd5a:	0cdb      	lsrs	r3, r3, #19
 800fd5c:	04db      	lsls	r3, r3, #19
 800fd5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	0151      	lsls	r1, r2, #5
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	440a      	add	r2, r1
 800fd76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	695b      	ldr	r3, [r3, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	015a      	lsls	r2, r3, #5
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	693a      	ldr	r2, [r7, #16]
 800fda4:	0151      	lsls	r1, r2, #5
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	440a      	add	r2, r1
 800fdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	015a      	lsls	r2, r3, #5
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc0:	691a      	ldr	r2, [r3, #16]
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	689b      	ldr	r3, [r3, #8]
 800fdc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdca:	6939      	ldr	r1, [r7, #16]
 800fdcc:	0148      	lsls	r0, r1, #5
 800fdce:	6979      	ldr	r1, [r7, #20]
 800fdd0:	4401      	add	r1, r0
 800fdd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fdda:	79fb      	ldrb	r3, [r7, #7]
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d10d      	bne.n	800fdfc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d009      	beq.n	800fdfc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	68d9      	ldr	r1, [r3, #12]
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf8:	460a      	mov	r2, r1
 800fdfa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	015a      	lsls	r2, r3, #5
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	4413      	add	r3, r2
 800fe04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	693a      	ldr	r2, [r7, #16]
 800fe0c:	0151      	lsls	r1, r2, #5
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	440a      	add	r2, r1
 800fe12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	371c      	adds	r7, #28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b089      	sub	sp, #36	; 0x24
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	60b9      	str	r1, [r7, #8]
 800fe34:	4611      	mov	r1, r2
 800fe36:	461a      	mov	r2, r3
 800fe38:	460b      	mov	r3, r1
 800fe3a:	71fb      	strb	r3, [r7, #7]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fe48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d11a      	bne.n	800fe86 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fe50:	88bb      	ldrh	r3, [r7, #4]
 800fe52:	3303      	adds	r3, #3
 800fe54:	089b      	lsrs	r3, r3, #2
 800fe56:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fe58:	2300      	movs	r3, #0
 800fe5a:	61bb      	str	r3, [r7, #24]
 800fe5c:	e00f      	b.n	800fe7e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	031a      	lsls	r2, r3, #12
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	4413      	add	r3, r2
 800fe66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	3304      	adds	r3, #4
 800fe76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	61bb      	str	r3, [r7, #24]
 800fe7e:	69ba      	ldr	r2, [r7, #24]
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d3eb      	bcc.n	800fe5e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3724      	adds	r7, #36	; 0x24
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b089      	sub	sp, #36	; 0x24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	4613      	mov	r3, r2
 800fea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800feaa:	88fb      	ldrh	r3, [r7, #6]
 800feac:	3303      	adds	r3, #3
 800feae:	089b      	lsrs	r3, r3, #2
 800feb0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800feb2:	2300      	movs	r3, #0
 800feb4:	61bb      	str	r3, [r7, #24]
 800feb6:	e00b      	b.n	800fed0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	601a      	str	r2, [r3, #0]
    pDest++;
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	3304      	adds	r3, #4
 800fec8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	3301      	adds	r3, #1
 800fece:	61bb      	str	r3, [r7, #24]
 800fed0:	69ba      	ldr	r2, [r7, #24]
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d3ef      	bcc.n	800feb8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800fed8:	69fb      	ldr	r3, [r7, #28]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3724      	adds	r7, #36	; 0x24
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b085      	sub	sp, #20
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	785b      	ldrb	r3, [r3, #1]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d12c      	bne.n	800ff5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	015a      	lsls	r2, r3, #5
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	4413      	add	r3, r2
 800ff0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	db12      	blt.n	800ff3a <USB_EPSetStall+0x54>
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00f      	beq.n	800ff3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	015a      	lsls	r2, r3, #5
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	4413      	add	r3, r2
 800ff22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	0151      	lsls	r1, r2, #5
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	440a      	add	r2, r1
 800ff30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ff38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68ba      	ldr	r2, [r7, #8]
 800ff4a:	0151      	lsls	r1, r2, #5
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	440a      	add	r2, r1
 800ff50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	e02b      	b.n	800ffb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	db12      	blt.n	800ff94 <USB_EPSetStall+0xae>
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00f      	beq.n	800ff94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	0151      	lsls	r1, r2, #5
 800ff86:	68fa      	ldr	r2, [r7, #12]
 800ff88:	440a      	add	r2, r1
 800ff8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ff92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	015a      	lsls	r2, r3, #5
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	0151      	lsls	r1, r2, #5
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	440a      	add	r2, r1
 800ffaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr

0800ffc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ffc2:	b480      	push	{r7}
 800ffc4:	b085      	sub	sp, #20
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
 800ffca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d128      	bne.n	8010030 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	015a      	lsls	r2, r3, #5
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	0151      	lsls	r1, r2, #5
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	440a      	add	r2, r1
 800fff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	78db      	ldrb	r3, [r3, #3]
 8010002:	2b03      	cmp	r3, #3
 8010004:	d003      	beq.n	801000e <USB_EPClearStall+0x4c>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	78db      	ldrb	r3, [r3, #3]
 801000a:	2b02      	cmp	r3, #2
 801000c:	d138      	bne.n	8010080 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	4413      	add	r3, r2
 8010016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	440a      	add	r2, r1
 8010024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	e027      	b.n	8010080 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	015a      	lsls	r2, r3, #5
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	4413      	add	r3, r2
 8010038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	0151      	lsls	r1, r2, #5
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	440a      	add	r2, r1
 8010046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801004a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801004e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	78db      	ldrb	r3, [r3, #3]
 8010054:	2b03      	cmp	r3, #3
 8010056:	d003      	beq.n	8010060 <USB_EPClearStall+0x9e>
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	78db      	ldrb	r3, [r3, #3]
 801005c:	2b02      	cmp	r3, #2
 801005e:	d10f      	bne.n	8010080 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	0151      	lsls	r1, r2, #5
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	440a      	add	r2, r1
 8010076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801007a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801007e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3714      	adds	r7, #20
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr

0801008e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801008e:	b480      	push	{r7}
 8010090:	b085      	sub	sp, #20
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
 8010096:	460b      	mov	r3, r1
 8010098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80100b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	011b      	lsls	r3, r3, #4
 80100be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80100c2:	68f9      	ldr	r1, [r7, #12]
 80100c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100c8:	4313      	orrs	r3, r2
 80100ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80100cc:	2300      	movs	r3, #0
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3714      	adds	r7, #20
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	68fa      	ldr	r2, [r7, #12]
 80100f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100f4:	f023 0302 	bic.w	r3, r3, #2
 80100f8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80100fa:	2003      	movs	r0, #3
 80100fc:	f7fa ff54 	bl	800afa8 <HAL_Delay>

  return HAL_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b084      	sub	sp, #16
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010124:	f043 0302 	orr.w	r3, r3, #2
 8010128:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801012a:	2003      	movs	r0, #3
 801012c:	f7fa ff3c 	bl	800afa8 <HAL_Delay>

  return HAL_OK;
 8010130:	2300      	movs	r3, #0
}
 8010132:	4618      	mov	r0, r3
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801013a:	b480      	push	{r7}
 801013c:	b085      	sub	sp, #20
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	699b      	ldr	r3, [r3, #24]
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4013      	ands	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010152:	68fb      	ldr	r3, [r7, #12]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017c:	69db      	ldr	r3, [r3, #28]
 801017e:	68ba      	ldr	r2, [r7, #8]
 8010180:	4013      	ands	r3, r2
 8010182:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	0c1b      	lsrs	r3, r3, #16
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101b0:	69db      	ldr	r3, [r3, #28]
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	4013      	ands	r3, r2
 80101b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	b29b      	uxth	r3, r3
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80101d8:	78fb      	ldrb	r3, [r7, #3]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ee:	695b      	ldr	r3, [r3, #20]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	4013      	ands	r3, r2
 80101f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80101f6:	68bb      	ldr	r3, [r7, #8]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010204:	b480      	push	{r7}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010226:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010228:	78fb      	ldrb	r3, [r7, #3]
 801022a:	f003 030f 	and.w	r3, r3, #15
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	fa22 f303 	lsr.w	r3, r2, r3
 8010234:	01db      	lsls	r3, r3, #7
 8010236:	b2db      	uxtb	r3, r3
 8010238:	693a      	ldr	r2, [r7, #16]
 801023a:	4313      	orrs	r3, r2
 801023c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	015a      	lsls	r2, r3, #5
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	4413      	add	r3, r2
 8010246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	4013      	ands	r3, r2
 8010250:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010252:	68bb      	ldr	r3, [r7, #8]
}
 8010254:	4618      	mov	r0, r3
 8010256:	371c      	adds	r7, #28
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	695b      	ldr	r3, [r3, #20]
 801026c:	f003 0301 	and.w	r3, r3, #1
}
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010296:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801029a:	f023 0307 	bic.w	r3, r3, #7
 801029e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f003 0306 	and.w	r3, r3, #6
 80102ac:	2b04      	cmp	r3, #4
 80102ae:	d109      	bne.n	80102c4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102be:	f043 0303 	orr.w	r3, r3, #3
 80102c2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3714      	adds	r7, #20
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr
	...

080102e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b087      	sub	sp, #28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	460b      	mov	r3, r1
 80102f2:	607a      	str	r2, [r7, #4]
 80102f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	333c      	adds	r3, #60	; 0x3c
 80102fe:	3304      	adds	r3, #4
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	4a26      	ldr	r2, [pc, #152]	; (80103a0 <USB_EP0_OutStart+0xb8>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d90a      	bls.n	8010322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801031c:	d101      	bne.n	8010322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801031e:	2300      	movs	r3, #0
 8010320:	e037      	b.n	8010392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010328:	461a      	mov	r2, r3
 801032a:	2300      	movs	r3, #0
 801032c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	697a      	ldr	r2, [r7, #20]
 8010338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801033c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010350:	f043 0318 	orr.w	r3, r3, #24
 8010354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	697a      	ldr	r2, [r7, #20]
 8010360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010364:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801036a:	7afb      	ldrb	r3, [r7, #11]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d10f      	bne.n	8010390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010376:	461a      	mov	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801038a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801038e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	371c      	adds	r7, #28
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	4f54300a 	.word	0x4f54300a

080103a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80103ac:	2300      	movs	r3, #0
 80103ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3301      	adds	r3, #1
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	4a13      	ldr	r2, [pc, #76]	; (8010408 <USB_CoreReset+0x64>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d901      	bls.n	80103c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e01b      	b.n	80103fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	691b      	ldr	r3, [r3, #16]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	daf2      	bge.n	80103b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80103ca:	2300      	movs	r3, #0
 80103cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	f043 0201 	orr.w	r2, r3, #1
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3301      	adds	r3, #1
 80103de:	60fb      	str	r3, [r7, #12]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4a09      	ldr	r2, [pc, #36]	; (8010408 <USB_CoreReset+0x64>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d901      	bls.n	80103ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80103e8:	2303      	movs	r3, #3
 80103ea:	e006      	b.n	80103fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	691b      	ldr	r3, [r3, #16]
 80103f0:	f003 0301 	and.w	r3, r3, #1
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d0f0      	beq.n	80103da <USB_CoreReset+0x36>

  return HAL_OK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop
 8010408:	00030d40 	.word	0x00030d40

0801040c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	7c1b      	ldrb	r3, [r3, #16]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d115      	bne.n	8010450 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010428:	2202      	movs	r2, #2
 801042a:	2181      	movs	r1, #129	; 0x81
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f005 f8a2 	bl	8015576 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010438:	f44f 7300 	mov.w	r3, #512	; 0x200
 801043c:	2202      	movs	r2, #2
 801043e:	2101      	movs	r1, #1
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f005 f898 	bl	8015576 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 801044e:	e012      	b.n	8010476 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010450:	2340      	movs	r3, #64	; 0x40
 8010452:	2202      	movs	r2, #2
 8010454:	2181      	movs	r1, #129	; 0x81
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f005 f88d 	bl	8015576 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010462:	2340      	movs	r3, #64	; 0x40
 8010464:	2202      	movs	r2, #2
 8010466:	2101      	movs	r1, #1
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f005 f884 	bl	8015576 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2201      	movs	r2, #1
 8010472:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010476:	2308      	movs	r3, #8
 8010478:	2203      	movs	r2, #3
 801047a:	2182      	movs	r1, #130	; 0x82
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f005 f87a 	bl	8015576 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2201      	movs	r2, #1
 8010486:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8010488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801048c:	f005 f9f0 	bl	8015870 <malloc>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80104a4:	2301      	movs	r3, #1
 80104a6:	73fb      	strb	r3, [r7, #15]
 80104a8:	e026      	b.n	80104f8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104b0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	2200      	movs	r2, #0
 80104c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	7c1b      	ldrb	r3, [r3, #16]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d109      	bne.n	80104e8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80104da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104de:	2101      	movs	r1, #1
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f005 f939 	bl	8015758 <USBD_LL_PrepareReceive>
 80104e6:	e007      	b.n	80104f8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80104ee:	2340      	movs	r3, #64	; 0x40
 80104f0:	2101      	movs	r1, #1
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f005 f930 	bl	8015758 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b084      	sub	sp, #16
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	460b      	mov	r3, r1
 801050c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801050e:	2300      	movs	r3, #0
 8010510:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010512:	2181      	movs	r1, #129	; 0x81
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f005 f854 	bl	80155c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010520:	2101      	movs	r1, #1
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f005 f84d 	bl	80155c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010530:	2182      	movs	r1, #130	; 0x82
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f005 f845 	bl	80155c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00e      	beq.n	8010566 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010558:	4618      	mov	r0, r3
 801055a:	f005 f991 	bl	8015880 <free>
    pdev->pClassData = NULL;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8010566:	7bfb      	ldrb	r3, [r7, #15]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010580:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010582:	2300      	movs	r3, #0
 8010584:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010586:	2300      	movs	r3, #0
 8010588:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801058a:	2300      	movs	r3, #0
 801058c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010596:	2b00      	cmp	r3, #0
 8010598:	d039      	beq.n	801060e <USBD_CDC_Setup+0x9e>
 801059a:	2b20      	cmp	r3, #32
 801059c:	d17c      	bne.n	8010698 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	88db      	ldrh	r3, [r3, #6]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d029      	beq.n	80105fa <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	b25b      	sxtb	r3, r3
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	da11      	bge.n	80105d4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80105bc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	88d2      	ldrh	r2, [r2, #6]
 80105c2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80105c4:	6939      	ldr	r1, [r7, #16]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	88db      	ldrh	r3, [r3, #6]
 80105ca:	461a      	mov	r2, r3
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f001 f9c9 	bl	8011964 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80105d2:	e068      	b.n	80106a6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	785a      	ldrb	r2, [r3, #1]
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	88db      	ldrh	r3, [r3, #6]
 80105e2:	b2da      	uxtb	r2, r3
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80105ea:	6939      	ldr	r1, [r7, #16]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	88db      	ldrh	r3, [r3, #6]
 80105f0:	461a      	mov	r2, r3
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f001 f9e4 	bl	80119c0 <USBD_CtlPrepareRx>
    break;
 80105f8:	e055      	b.n	80106a6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	683a      	ldr	r2, [r7, #0]
 8010604:	7850      	ldrb	r0, [r2, #1]
 8010606:	2200      	movs	r2, #0
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	4798      	blx	r3
    break;
 801060c:	e04b      	b.n	80106a6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	785b      	ldrb	r3, [r3, #1]
 8010612:	2b0a      	cmp	r3, #10
 8010614:	d017      	beq.n	8010646 <USBD_CDC_Setup+0xd6>
 8010616:	2b0b      	cmp	r3, #11
 8010618:	d029      	beq.n	801066e <USBD_CDC_Setup+0xfe>
 801061a:	2b00      	cmp	r3, #0
 801061c:	d133      	bne.n	8010686 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010624:	2b03      	cmp	r3, #3
 8010626:	d107      	bne.n	8010638 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8010628:	f107 030c 	add.w	r3, r7, #12
 801062c:	2202      	movs	r2, #2
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f001 f997 	bl	8011964 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010636:	e02e      	b.n	8010696 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f001 f927 	bl	801188e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010640:	2302      	movs	r3, #2
 8010642:	75fb      	strb	r3, [r7, #23]
      break;
 8010644:	e027      	b.n	8010696 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801064c:	2b03      	cmp	r3, #3
 801064e:	d107      	bne.n	8010660 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8010650:	f107 030f 	add.w	r3, r7, #15
 8010654:	2201      	movs	r2, #1
 8010656:	4619      	mov	r1, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f001 f983 	bl	8011964 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 801065e:	e01a      	b.n	8010696 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f001 f913 	bl	801188e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010668:	2302      	movs	r3, #2
 801066a:	75fb      	strb	r3, [r7, #23]
      break;
 801066c:	e013      	b.n	8010696 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010674:	2b03      	cmp	r3, #3
 8010676:	d00d      	beq.n	8010694 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f001 f907 	bl	801188e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010680:	2302      	movs	r3, #2
 8010682:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010684:	e006      	b.n	8010694 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f001 f900 	bl	801188e <USBD_CtlError>
      ret = USBD_FAIL;
 801068e:	2302      	movs	r3, #2
 8010690:	75fb      	strb	r3, [r7, #23]
      break;
 8010692:	e000      	b.n	8010696 <USBD_CDC_Setup+0x126>
      break;
 8010694:	bf00      	nop
    }
    break;
 8010696:	e006      	b.n	80106a6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8010698:	6839      	ldr	r1, [r7, #0]
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f001 f8f7 	bl	801188e <USBD_CtlError>
    ret = USBD_FAIL;
 80106a0:	2302      	movs	r3, #2
 80106a2:	75fb      	strb	r3, [r7, #23]
    break;
 80106a4:	bf00      	nop
  }

  return ret;
 80106a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80106c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80106ca:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d03a      	beq.n	801074c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80106d6:	78fa      	ldrb	r2, [r7, #3]
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	4613      	mov	r3, r2
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	4413      	add	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	440b      	add	r3, r1
 80106e4:	331c      	adds	r3, #28
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d029      	beq.n	8010740 <USBD_CDC_DataIn+0x90>
 80106ec:	78fa      	ldrb	r2, [r7, #3]
 80106ee:	6879      	ldr	r1, [r7, #4]
 80106f0:	4613      	mov	r3, r2
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	440b      	add	r3, r1
 80106fa:	331c      	adds	r3, #28
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	78f9      	ldrb	r1, [r7, #3]
 8010700:	68b8      	ldr	r0, [r7, #8]
 8010702:	460b      	mov	r3, r1
 8010704:	00db      	lsls	r3, r3, #3
 8010706:	1a5b      	subs	r3, r3, r1
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4403      	add	r3, r0
 801070c:	3344      	adds	r3, #68	; 0x44
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	fbb2 f1f3 	udiv	r1, r2, r3
 8010714:	fb03 f301 	mul.w	r3, r3, r1
 8010718:	1ad3      	subs	r3, r2, r3
 801071a:	2b00      	cmp	r3, #0
 801071c:	d110      	bne.n	8010740 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801071e:	78fa      	ldrb	r2, [r7, #3]
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	4613      	mov	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	440b      	add	r3, r1
 801072c:	331c      	adds	r3, #28
 801072e:	2200      	movs	r2, #0
 8010730:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8010732:	78f9      	ldrb	r1, [r7, #3]
 8010734:	2300      	movs	r3, #0
 8010736:	2200      	movs	r2, #0
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f004 ffea 	bl	8015712 <USBD_LL_Transmit>
 801073e:	e003      	b.n	8010748 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2200      	movs	r2, #0
 8010744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	e000      	b.n	801074e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801074c:	2302      	movs	r3, #2
  }
}
 801074e:	4618      	mov	r0, r3
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b084      	sub	sp, #16
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	460b      	mov	r3, r1
 8010760:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010768:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 801076a:	78fb      	ldrb	r3, [r7, #3]
 801076c:	4619      	mov	r1, r3
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f005 f815 	bl	801579e <USBD_LL_GetRxDataSize>
 8010774:	4602      	mov	r2, r0
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00d      	beq.n	80107a2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801079a:	4611      	mov	r1, r2
 801079c:	4798      	blx	r3

    return USBD_OK;
 801079e:	2300      	movs	r3, #0
 80107a0:	e000      	b.n	80107a4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80107a2:	2302      	movs	r3, #2
  }
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107ba:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d015      	beq.n	80107f2 <USBD_CDC_EP0_RxReady+0x46>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80107cc:	2bff      	cmp	r3, #255	; 0xff
 80107ce:	d010      	beq.n	80107f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80107de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107e6:	b292      	uxth	r2, r2
 80107e8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	22ff      	movs	r2, #255	; 0xff
 80107ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80107f2:	2300      	movs	r3, #0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2243      	movs	r2, #67	; 0x43
 8010808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801080a:	4b03      	ldr	r3, [pc, #12]	; (8010818 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801080c:	4618      	mov	r0, r3
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr
 8010818:	20000d74 	.word	0x20000d74

0801081c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2243      	movs	r2, #67	; 0x43
 8010828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801082a:	4b03      	ldr	r3, [pc, #12]	; (8010838 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801082c:	4618      	mov	r0, r3
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	20000d30 	.word	0x20000d30

0801083c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2243      	movs	r2, #67	; 0x43
 8010848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801084a:	4b03      	ldr	r3, [pc, #12]	; (8010858 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801084c:	4618      	mov	r0, r3
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	20000db8 	.word	0x20000db8

0801085c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	220a      	movs	r2, #10
 8010868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801086a:	4b03      	ldr	r3, [pc, #12]	; (8010878 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	20000cec 	.word	0x20000cec

0801087c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010886:	2302      	movs	r3, #2
 8010888:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d005      	beq.n	801089c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801089c:	7bfb      	ldrb	r3, [r7, #15]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b087      	sub	sp, #28
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	60f8      	str	r0, [r7, #12]
 80108b2:	60b9      	str	r1, [r7, #8]
 80108b4:	4613      	mov	r3, r2
 80108b6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80108be:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80108c8:	88fa      	ldrh	r2, [r7, #6]
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	371c      	adds	r7, #28
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80108de:	b480      	push	{r7}
 80108e0:	b085      	sub	sp, #20
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80108ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3714      	adds	r7, #20
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr

08010906 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010906:	b580      	push	{r7, lr}
 8010908:	b084      	sub	sp, #16
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010914:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801091c:	2b00      	cmp	r3, #0
 801091e:	d01c      	beq.n	801095a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010926:	2b00      	cmp	r3, #0
 8010928:	d115      	bne.n	8010956 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2201      	movs	r2, #1
 801092e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010948:	b29b      	uxth	r3, r3
 801094a:	2181      	movs	r1, #129	; 0x81
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f004 fee0 	bl	8015712 <USBD_LL_Transmit>

      return USBD_OK;
 8010952:	2300      	movs	r3, #0
 8010954:	e002      	b.n	801095c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8010956:	2301      	movs	r3, #1
 8010958:	e000      	b.n	801095c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801095a:	2302      	movs	r3, #2
  }
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010972:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801097a:	2b00      	cmp	r3, #0
 801097c:	d017      	beq.n	80109ae <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	7c1b      	ldrb	r3, [r3, #16]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d109      	bne.n	801099a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010990:	2101      	movs	r1, #1
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f004 fee0 	bl	8015758 <USBD_LL_PrepareReceive>
 8010998:	e007      	b.n	80109aa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109a0:	2340      	movs	r3, #64	; 0x40
 80109a2:	2101      	movs	r1, #1
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f004 fed7 	bl	8015758 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	e000      	b.n	80109b0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80109ae:	2302      	movs	r3, #2
  }
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d101      	bne.n	80109d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80109cc:	2302      	movs	r3, #2
 80109ce:	e01a      	b.n	8010a06 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d003      	beq.n	80109e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d003      	beq.n	80109f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2201      	movs	r2, #1
 80109f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	79fa      	ldrb	r2, [r7, #7]
 80109fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f004 fd52 	bl	80154a8 <USBD_LL_Init>

  return USBD_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b085      	sub	sp, #20
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d006      	beq.n	8010a30 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	683a      	ldr	r2, [r7, #0]
 8010a26:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	73fb      	strb	r3, [r7, #15]
 8010a2e:	e001      	b.n	8010a34 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010a30:	2302      	movs	r3, #2
 8010a32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3714      	adds	r7, #20
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b082      	sub	sp, #8
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f004 fd78 	bl	8015540 <USBD_LL_Start>

  return USBD_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010a5a:	b480      	push	{r7}
 8010a5c:	b083      	sub	sp, #12
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010a7c:	2302      	movs	r3, #2
 8010a7e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00c      	beq.n	8010aa4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	78fa      	ldrb	r2, [r7, #3]
 8010a94:	4611      	mov	r1, r2
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	4798      	blx	r3
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d101      	bne.n	8010aa4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	78fa      	ldrb	r2, [r7, #3]
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	4798      	blx	r3
  return USBD_OK;
 8010aca:	2300      	movs	r3, #0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010ae4:	6839      	ldr	r1, [r7, #0]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f000 fe94 	bl	8011814 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8010afa:	461a      	mov	r2, r3
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010b08:	f003 031f 	and.w	r3, r3, #31
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d00c      	beq.n	8010b2a <USBD_LL_SetupStage+0x56>
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d302      	bcc.n	8010b1a <USBD_LL_SetupStage+0x46>
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d010      	beq.n	8010b3a <USBD_LL_SetupStage+0x66>
 8010b18:	e017      	b.n	8010b4a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fa04 	bl	8010f30 <USBD_StdDevReq>
    break;
 8010b28:	e01a      	b.n	8010b60 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 fa66 	bl	8011004 <USBD_StdItfReq>
    break;
 8010b38:	e012      	b.n	8010b60 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 faa4 	bl	8011090 <USBD_StdEPReq>
    break;
 8010b48:	e00a      	b.n	8010b60 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010b50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	4619      	mov	r1, r3
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f004 fd51 	bl	8015600 <USBD_LL_StallEP>
    break;
 8010b5e:	bf00      	nop
  }

  return USBD_OK;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b086      	sub	sp, #24
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	60f8      	str	r0, [r7, #12]
 8010b72:	460b      	mov	r3, r1
 8010b74:	607a      	str	r2, [r7, #4]
 8010b76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d14b      	bne.n	8010c16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010b84:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d134      	bne.n	8010bfa <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	68da      	ldr	r2, [r3, #12]
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	691b      	ldr	r3, [r3, #16]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d919      	bls.n	8010bd0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	68da      	ldr	r2, [r3, #12]
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	691b      	ldr	r3, [r3, #16]
 8010ba4:	1ad2      	subs	r2, r2, r3
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	68da      	ldr	r2, [r3, #12]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d203      	bcs.n	8010bbe <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	e002      	b.n	8010bc4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f000 ff17 	bl	80119fc <USBD_CtlContinueRx>
 8010bce:	e038      	b.n	8010c42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00a      	beq.n	8010bf2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d105      	bne.n	8010bf2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f000 ff14 	bl	8011a20 <USBD_CtlSendStatus>
 8010bf8:	e023      	b.n	8010c42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010c00:	2b05      	cmp	r3, #5
 8010c02:	d11e      	bne.n	8010c42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2200      	movs	r2, #0
 8010c08:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f004 fcf6 	bl	8015600 <USBD_LL_StallEP>
 8010c14:	e015      	b.n	8010c42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c1c:	699b      	ldr	r3, [r3, #24]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00d      	beq.n	8010c3e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010c28:	2b03      	cmp	r3, #3
 8010c2a:	d108      	bne.n	8010c3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c32:	699b      	ldr	r3, [r3, #24]
 8010c34:	7afa      	ldrb	r2, [r7, #11]
 8010c36:	4611      	mov	r1, r2
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	4798      	blx	r3
 8010c3c:	e001      	b.n	8010c42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010c3e:	2302      	movs	r3, #2
 8010c40:	e000      	b.n	8010c44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010c42:	2300      	movs	r3, #0
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3718      	adds	r7, #24
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b086      	sub	sp, #24
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	460b      	mov	r3, r1
 8010c56:	607a      	str	r2, [r7, #4]
 8010c58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010c5a:	7afb      	ldrb	r3, [r7, #11]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d17f      	bne.n	8010d60 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	3314      	adds	r3, #20
 8010c64:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d15c      	bne.n	8010d2a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	68da      	ldr	r2, [r3, #12]
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d915      	bls.n	8010ca8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	68da      	ldr	r2, [r3, #12]
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	1ad2      	subs	r2, r2, r3
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	461a      	mov	r2, r3
 8010c92:	6879      	ldr	r1, [r7, #4]
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f000 fe81 	bl	801199c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f004 fd59 	bl	8015758 <USBD_LL_PrepareReceive>
 8010ca6:	e04e      	b.n	8010d46 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	6912      	ldr	r2, [r2, #16]
 8010cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cb4:	fb02 f201 	mul.w	r2, r2, r1
 8010cb8:	1a9b      	subs	r3, r3, r2
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d11c      	bne.n	8010cf8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	689a      	ldr	r2, [r3, #8]
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d316      	bcc.n	8010cf8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	689a      	ldr	r2, [r3, #8]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d20f      	bcs.n	8010cf8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010cd8:	2200      	movs	r2, #0
 8010cda:	2100      	movs	r1, #0
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f000 fe5d 	bl	801199c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010cea:	2300      	movs	r3, #0
 8010cec:	2200      	movs	r2, #0
 8010cee:	2100      	movs	r1, #0
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f004 fd31 	bl	8015758 <USBD_LL_PrepareReceive>
 8010cf6:	e026      	b.n	8010d46 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00a      	beq.n	8010d1a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d105      	bne.n	8010d1a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010d1a:	2180      	movs	r1, #128	; 0x80
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f004 fc6f 	bl	8015600 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f000 fe8f 	bl	8011a46 <USBD_CtlReceiveStatus>
 8010d28:	e00d      	b.n	8010d46 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010d30:	2b04      	cmp	r3, #4
 8010d32:	d004      	beq.n	8010d3e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d103      	bne.n	8010d46 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010d3e:	2180      	movs	r1, #128	; 0x80
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f004 fc5d 	bl	8015600 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d11d      	bne.n	8010d8c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f7ff fe82 	bl	8010a5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010d5e:	e015      	b.n	8010d8c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d66:	695b      	ldr	r3, [r3, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00d      	beq.n	8010d88 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010d72:	2b03      	cmp	r3, #3
 8010d74:	d108      	bne.n	8010d88 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d7c:	695b      	ldr	r3, [r3, #20]
 8010d7e:	7afa      	ldrb	r2, [r7, #11]
 8010d80:	4611      	mov	r1, r2
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	4798      	blx	r3
 8010d86:	e001      	b.n	8010d8c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010d88:	2302      	movs	r3, #2
 8010d8a:	e000      	b.n	8010d8e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010d8c:	2300      	movs	r3, #0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b082      	sub	sp, #8
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d9e:	2340      	movs	r3, #64	; 0x40
 8010da0:	2200      	movs	r2, #0
 8010da2:	2100      	movs	r1, #0
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f004 fbe6 	bl	8015576 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2201      	movs	r2, #1
 8010dae:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2240      	movs	r2, #64	; 0x40
 8010db6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dba:	2340      	movs	r3, #64	; 0x40
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	2180      	movs	r1, #128	; 0x80
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f004 fbd8 	bl	8015576 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2240      	movs	r2, #64	; 0x40
 8010dd0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d009      	beq.n	8010e0e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6852      	ldr	r2, [r2, #4]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	4611      	mov	r1, r2
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	4798      	blx	r3
  }

  return USBD_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	460b      	mov	r3, r1
 8010e22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	78fa      	ldrb	r2, [r7, #3]
 8010e28:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2204      	movs	r2, #4
 8010e50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010e54:	2300      	movs	r3, #0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010e62:	b480      	push	{r7}
 8010e64:	b083      	sub	sp, #12
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d10b      	bne.n	8010eae <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e9c:	69db      	ldr	r3, [r3, #28]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d005      	beq.n	8010eae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b083      	sub	sp, #12
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	460b      	mov	r3, r1
 8010edc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b082      	sub	sp, #8
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	6852      	ldr	r2, [r2, #4]
 8010f1e:	b2d2      	uxtb	r2, r2
 8010f20:	4611      	mov	r1, r2
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	4798      	blx	r3

  return USBD_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f46:	2b20      	cmp	r3, #32
 8010f48:	d004      	beq.n	8010f54 <USBD_StdDevReq+0x24>
 8010f4a:	2b40      	cmp	r3, #64	; 0x40
 8010f4c:	d002      	beq.n	8010f54 <USBD_StdDevReq+0x24>
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d008      	beq.n	8010f64 <USBD_StdDevReq+0x34>
 8010f52:	e04c      	b.n	8010fee <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	4798      	blx	r3
    break;
 8010f62:	e049      	b.n	8010ff8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	785b      	ldrb	r3, [r3, #1]
 8010f68:	2b09      	cmp	r3, #9
 8010f6a:	d83a      	bhi.n	8010fe2 <USBD_StdDevReq+0xb2>
 8010f6c:	a201      	add	r2, pc, #4	; (adr r2, 8010f74 <USBD_StdDevReq+0x44>)
 8010f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f72:	bf00      	nop
 8010f74:	08010fc5 	.word	0x08010fc5
 8010f78:	08010fd9 	.word	0x08010fd9
 8010f7c:	08010fe3 	.word	0x08010fe3
 8010f80:	08010fcf 	.word	0x08010fcf
 8010f84:	08010fe3 	.word	0x08010fe3
 8010f88:	08010fa7 	.word	0x08010fa7
 8010f8c:	08010f9d 	.word	0x08010f9d
 8010f90:	08010fe3 	.word	0x08010fe3
 8010f94:	08010fbb 	.word	0x08010fbb
 8010f98:	08010fb1 	.word	0x08010fb1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010f9c:	6839      	ldr	r1, [r7, #0]
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f000 f9d2 	bl	8011348 <USBD_GetDescriptor>
      break;
 8010fa4:	e022      	b.n	8010fec <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8010fa6:	6839      	ldr	r1, [r7, #0]
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fac7 	bl	801153c <USBD_SetAddress>
      break;
 8010fae:	e01d      	b.n	8010fec <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fb04 	bl	80115c0 <USBD_SetConfig>
      break;
 8010fb8:	e018      	b.n	8010fec <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 fb8d 	bl	80116dc <USBD_GetConfig>
      break;
 8010fc2:	e013      	b.n	8010fec <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fbbc 	bl	8011744 <USBD_GetStatus>
      break;
 8010fcc:	e00e      	b.n	8010fec <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010fce:	6839      	ldr	r1, [r7, #0]
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f000 fbea 	bl	80117aa <USBD_SetFeature>
      break;
 8010fd6:	e009      	b.n	8010fec <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8010fd8:	6839      	ldr	r1, [r7, #0]
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fbf9 	bl	80117d2 <USBD_ClrFeature>
      break;
 8010fe0:	e004      	b.n	8010fec <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010fe2:	6839      	ldr	r1, [r7, #0]
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 fc52 	bl	801188e <USBD_CtlError>
      break;
 8010fea:	bf00      	nop
    }
    break;
 8010fec:	e004      	b.n	8010ff8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010fee:	6839      	ldr	r1, [r7, #0]
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fc4c 	bl	801188e <USBD_CtlError>
    break;
 8010ff6:	bf00      	nop
  }

  return ret;
 8010ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop

08011004 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801100e:	2300      	movs	r3, #0
 8011010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801101a:	2b20      	cmp	r3, #32
 801101c:	d003      	beq.n	8011026 <USBD_StdItfReq+0x22>
 801101e:	2b40      	cmp	r3, #64	; 0x40
 8011020:	d001      	beq.n	8011026 <USBD_StdItfReq+0x22>
 8011022:	2b00      	cmp	r3, #0
 8011024:	d12a      	bne.n	801107c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801102c:	3b01      	subs	r3, #1
 801102e:	2b02      	cmp	r3, #2
 8011030:	d81d      	bhi.n	801106e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	889b      	ldrh	r3, [r3, #4]
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b01      	cmp	r3, #1
 801103a:	d813      	bhi.n	8011064 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011042:	689b      	ldr	r3, [r3, #8]
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	4798      	blx	r3
 801104a:	4603      	mov	r3, r0
 801104c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	88db      	ldrh	r3, [r3, #6]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d110      	bne.n	8011078 <USBD_StdItfReq+0x74>
 8011056:	7bfb      	ldrb	r3, [r7, #15]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d10d      	bne.n	8011078 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 fcdf 	bl	8011a20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011062:	e009      	b.n	8011078 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011064:	6839      	ldr	r1, [r7, #0]
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fc11 	bl	801188e <USBD_CtlError>
      break;
 801106c:	e004      	b.n	8011078 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 fc0c 	bl	801188e <USBD_CtlError>
      break;
 8011076:	e000      	b.n	801107a <USBD_StdItfReq+0x76>
      break;
 8011078:	bf00      	nop
    }
    break;
 801107a:	e004      	b.n	8011086 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fc05 	bl	801188e <USBD_CtlError>
    break;
 8011084:	bf00      	nop
  }

  return USBD_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	889b      	ldrh	r3, [r3, #4]
 80110a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110ac:	2b20      	cmp	r3, #32
 80110ae:	d004      	beq.n	80110ba <USBD_StdEPReq+0x2a>
 80110b0:	2b40      	cmp	r3, #64	; 0x40
 80110b2:	d002      	beq.n	80110ba <USBD_StdEPReq+0x2a>
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d008      	beq.n	80110ca <USBD_StdEPReq+0x3a>
 80110b8:	e13b      	b.n	8011332 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	6839      	ldr	r1, [r7, #0]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	4798      	blx	r3
    break;
 80110c8:	e138      	b.n	801133c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110d2:	2b20      	cmp	r3, #32
 80110d4:	d10a      	bne.n	80110ec <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	4798      	blx	r3
 80110e4:	4603      	mov	r3, r0
 80110e6:	73fb      	strb	r3, [r7, #15]

      return ret;
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	e128      	b.n	801133e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	785b      	ldrb	r3, [r3, #1]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d03e      	beq.n	8011172 <USBD_StdEPReq+0xe2>
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	d002      	beq.n	80110fe <USBD_StdEPReq+0x6e>
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d070      	beq.n	80111de <USBD_StdEPReq+0x14e>
 80110fc:	e113      	b.n	8011326 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011104:	2b02      	cmp	r3, #2
 8011106:	d002      	beq.n	801110e <USBD_StdEPReq+0x7e>
 8011108:	2b03      	cmp	r3, #3
 801110a:	d015      	beq.n	8011138 <USBD_StdEPReq+0xa8>
 801110c:	e02b      	b.n	8011166 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d00c      	beq.n	801112e <USBD_StdEPReq+0x9e>
 8011114:	7bbb      	ldrb	r3, [r7, #14]
 8011116:	2b80      	cmp	r3, #128	; 0x80
 8011118:	d009      	beq.n	801112e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801111a:	7bbb      	ldrb	r3, [r7, #14]
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f004 fa6e 	bl	8015600 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011124:	2180      	movs	r1, #128	; 0x80
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f004 fa6a 	bl	8015600 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801112c:	e020      	b.n	8011170 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 801112e:	6839      	ldr	r1, [r7, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f000 fbac 	bl	801188e <USBD_CtlError>
        break;
 8011136:	e01b      	b.n	8011170 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	885b      	ldrh	r3, [r3, #2]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d10e      	bne.n	801115e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011140:	7bbb      	ldrb	r3, [r7, #14]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d00b      	beq.n	801115e <USBD_StdEPReq+0xce>
 8011146:	7bbb      	ldrb	r3, [r7, #14]
 8011148:	2b80      	cmp	r3, #128	; 0x80
 801114a:	d008      	beq.n	801115e <USBD_StdEPReq+0xce>
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	88db      	ldrh	r3, [r3, #6]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d104      	bne.n	801115e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8011154:	7bbb      	ldrb	r3, [r7, #14]
 8011156:	4619      	mov	r1, r3
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f004 fa51 	bl	8015600 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 fc5e 	bl	8011a20 <USBD_CtlSendStatus>

        break;
 8011164:	e004      	b.n	8011170 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 fb90 	bl	801188e <USBD_CtlError>
        break;
 801116e:	bf00      	nop
      }
      break;
 8011170:	e0de      	b.n	8011330 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011178:	2b02      	cmp	r3, #2
 801117a:	d002      	beq.n	8011182 <USBD_StdEPReq+0xf2>
 801117c:	2b03      	cmp	r3, #3
 801117e:	d015      	beq.n	80111ac <USBD_StdEPReq+0x11c>
 8011180:	e026      	b.n	80111d0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011182:	7bbb      	ldrb	r3, [r7, #14]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00c      	beq.n	80111a2 <USBD_StdEPReq+0x112>
 8011188:	7bbb      	ldrb	r3, [r7, #14]
 801118a:	2b80      	cmp	r3, #128	; 0x80
 801118c:	d009      	beq.n	80111a2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801118e:	7bbb      	ldrb	r3, [r7, #14]
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f004 fa34 	bl	8015600 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011198:	2180      	movs	r1, #128	; 0x80
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f004 fa30 	bl	8015600 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80111a0:	e01c      	b.n	80111dc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80111a2:	6839      	ldr	r1, [r7, #0]
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 fb72 	bl	801188e <USBD_CtlError>
        break;
 80111aa:	e017      	b.n	80111dc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	885b      	ldrh	r3, [r3, #2]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d112      	bne.n	80111da <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80111b4:	7bbb      	ldrb	r3, [r7, #14]
 80111b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d004      	beq.n	80111c8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80111be:	7bbb      	ldrb	r3, [r7, #14]
 80111c0:	4619      	mov	r1, r3
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f004 fa3b 	bl	801563e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 fc29 	bl	8011a20 <USBD_CtlSendStatus>
        }
        break;
 80111ce:	e004      	b.n	80111da <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 fb5b 	bl	801188e <USBD_CtlError>
        break;
 80111d8:	e000      	b.n	80111dc <USBD_StdEPReq+0x14c>
        break;
 80111da:	bf00      	nop
      }
      break;
 80111dc:	e0a8      	b.n	8011330 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d002      	beq.n	80111ee <USBD_StdEPReq+0x15e>
 80111e8:	2b03      	cmp	r3, #3
 80111ea:	d031      	beq.n	8011250 <USBD_StdEPReq+0x1c0>
 80111ec:	e095      	b.n	801131a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d007      	beq.n	8011204 <USBD_StdEPReq+0x174>
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	2b80      	cmp	r3, #128	; 0x80
 80111f8:	d004      	beq.n	8011204 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80111fa:	6839      	ldr	r1, [r7, #0]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 fb46 	bl	801188e <USBD_CtlError>
          break;
 8011202:	e08f      	b.n	8011324 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011208:	2b00      	cmp	r3, #0
 801120a:	da0b      	bge.n	8011224 <USBD_StdEPReq+0x194>
 801120c:	7bbb      	ldrb	r3, [r7, #14]
 801120e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011212:	4613      	mov	r3, r2
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	3310      	adds	r3, #16
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	4413      	add	r3, r2
 8011220:	3304      	adds	r3, #4
 8011222:	e00a      	b.n	801123a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801122a:	4613      	mov	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	4413      	add	r3, r2
 801123a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	2200      	movs	r2, #0
 8011240:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	2202      	movs	r2, #2
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fb8b 	bl	8011964 <USBD_CtlSendData>
          break;
 801124e:	e069      	b.n	8011324 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8011250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011254:	2b00      	cmp	r3, #0
 8011256:	da11      	bge.n	801127c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	f003 020f 	and.w	r2, r3, #15
 801125e:	6879      	ldr	r1, [r7, #4]
 8011260:	4613      	mov	r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	4413      	add	r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	440b      	add	r3, r1
 801126a:	3318      	adds	r3, #24
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d117      	bne.n	80112a2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 fb0a 	bl	801188e <USBD_CtlError>
            break;
 801127a:	e053      	b.n	8011324 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801127c:	7bbb      	ldrb	r3, [r7, #14]
 801127e:	f003 020f 	and.w	r2, r3, #15
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	4613      	mov	r3, r2
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	4413      	add	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	440b      	add	r3, r1
 801128e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d104      	bne.n	80112a2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 faf7 	bl	801188e <USBD_CtlError>
            break;
 80112a0:	e040      	b.n	8011324 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80112a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	da0b      	bge.n	80112c2 <USBD_StdEPReq+0x232>
 80112aa:	7bbb      	ldrb	r3, [r7, #14]
 80112ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112b0:	4613      	mov	r3, r2
 80112b2:	009b      	lsls	r3, r3, #2
 80112b4:	4413      	add	r3, r2
 80112b6:	009b      	lsls	r3, r3, #2
 80112b8:	3310      	adds	r3, #16
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	4413      	add	r3, r2
 80112be:	3304      	adds	r3, #4
 80112c0:	e00a      	b.n	80112d8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80112c2:	7bbb      	ldrb	r3, [r7, #14]
 80112c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80112c8:	4613      	mov	r3, r2
 80112ca:	009b      	lsls	r3, r3, #2
 80112cc:	4413      	add	r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	4413      	add	r3, r2
 80112d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80112da:	7bbb      	ldrb	r3, [r7, #14]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <USBD_StdEPReq+0x256>
 80112e0:	7bbb      	ldrb	r3, [r7, #14]
 80112e2:	2b80      	cmp	r3, #128	; 0x80
 80112e4:	d103      	bne.n	80112ee <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2200      	movs	r2, #0
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	e00e      	b.n	801130c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80112ee:	7bbb      	ldrb	r3, [r7, #14]
 80112f0:	4619      	mov	r1, r3
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f004 f9c2 	bl	801567c <USBD_LL_IsStallEP>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d003      	beq.n	8011306 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2201      	movs	r2, #1
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	e002      	b.n	801130c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2202      	movs	r2, #2
 8011310:	4619      	mov	r1, r3
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fb26 	bl	8011964 <USBD_CtlSendData>
          break;
 8011318:	e004      	b.n	8011324 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 801131a:	6839      	ldr	r1, [r7, #0]
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 fab6 	bl	801188e <USBD_CtlError>
        break;
 8011322:	bf00      	nop
      }
      break;
 8011324:	e004      	b.n	8011330 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fab0 	bl	801188e <USBD_CtlError>
      break;
 801132e:	bf00      	nop
    }
    break;
 8011330:	e004      	b.n	801133c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 faaa 	bl	801188e <USBD_CtlError>
    break;
 801133a:	bf00      	nop
  }

  return ret;
 801133c:	7bfb      	ldrb	r3, [r7, #15]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
	...

08011348 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	885b      	ldrh	r3, [r3, #2]
 8011356:	0a1b      	lsrs	r3, r3, #8
 8011358:	b29b      	uxth	r3, r3
 801135a:	3b01      	subs	r3, #1
 801135c:	2b06      	cmp	r3, #6
 801135e:	f200 80c9 	bhi.w	80114f4 <USBD_GetDescriptor+0x1ac>
 8011362:	a201      	add	r2, pc, #4	; (adr r2, 8011368 <USBD_GetDescriptor+0x20>)
 8011364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011368:	08011385 	.word	0x08011385
 801136c:	0801139d 	.word	0x0801139d
 8011370:	080113dd 	.word	0x080113dd
 8011374:	080114f5 	.word	0x080114f5
 8011378:	080114f5 	.word	0x080114f5
 801137c:	080114a1 	.word	0x080114a1
 8011380:	080114c7 	.word	0x080114c7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	7c12      	ldrb	r2, [r2, #16]
 8011390:	f107 010a 	add.w	r1, r7, #10
 8011394:	4610      	mov	r0, r2
 8011396:	4798      	blx	r3
 8011398:	60f8      	str	r0, [r7, #12]
    break;
 801139a:	e0b0      	b.n	80114fe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7c1b      	ldrb	r3, [r3, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d10d      	bne.n	80113c0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80113aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ac:	f107 020a 	add.w	r2, r7, #10
 80113b0:	4610      	mov	r0, r2
 80113b2:	4798      	blx	r3
 80113b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	3301      	adds	r3, #1
 80113ba:	2202      	movs	r2, #2
 80113bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80113be:	e09e      	b.n	80114fe <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80113c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c8:	f107 020a 	add.w	r2, r7, #10
 80113cc:	4610      	mov	r0, r2
 80113ce:	4798      	blx	r3
 80113d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	3301      	adds	r3, #1
 80113d6:	2202      	movs	r2, #2
 80113d8:	701a      	strb	r2, [r3, #0]
    break;
 80113da:	e090      	b.n	80114fe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	885b      	ldrh	r3, [r3, #2]
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b05      	cmp	r3, #5
 80113e4:	d856      	bhi.n	8011494 <USBD_GetDescriptor+0x14c>
 80113e6:	a201      	add	r2, pc, #4	; (adr r2, 80113ec <USBD_GetDescriptor+0xa4>)
 80113e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ec:	08011405 	.word	0x08011405
 80113f0:	0801141d 	.word	0x0801141d
 80113f4:	08011435 	.word	0x08011435
 80113f8:	0801144d 	.word	0x0801144d
 80113fc:	08011465 	.word	0x08011465
 8011400:	0801147d 	.word	0x0801147d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	7c12      	ldrb	r2, [r2, #16]
 8011410:	f107 010a 	add.w	r1, r7, #10
 8011414:	4610      	mov	r0, r2
 8011416:	4798      	blx	r3
 8011418:	60f8      	str	r0, [r7, #12]
      break;
 801141a:	e040      	b.n	801149e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	7c12      	ldrb	r2, [r2, #16]
 8011428:	f107 010a 	add.w	r1, r7, #10
 801142c:	4610      	mov	r0, r2
 801142e:	4798      	blx	r3
 8011430:	60f8      	str	r0, [r7, #12]
      break;
 8011432:	e034      	b.n	801149e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	7c12      	ldrb	r2, [r2, #16]
 8011440:	f107 010a 	add.w	r1, r7, #10
 8011444:	4610      	mov	r0, r2
 8011446:	4798      	blx	r3
 8011448:	60f8      	str	r0, [r7, #12]
      break;
 801144a:	e028      	b.n	801149e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011452:	691b      	ldr	r3, [r3, #16]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	7c12      	ldrb	r2, [r2, #16]
 8011458:	f107 010a 	add.w	r1, r7, #10
 801145c:	4610      	mov	r0, r2
 801145e:	4798      	blx	r3
 8011460:	60f8      	str	r0, [r7, #12]
      break;
 8011462:	e01c      	b.n	801149e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	7c12      	ldrb	r2, [r2, #16]
 8011470:	f107 010a 	add.w	r1, r7, #10
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
 8011478:	60f8      	str	r0, [r7, #12]
      break;
 801147a:	e010      	b.n	801149e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011482:	699b      	ldr	r3, [r3, #24]
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	7c12      	ldrb	r2, [r2, #16]
 8011488:	f107 010a 	add.w	r1, r7, #10
 801148c:	4610      	mov	r0, r2
 801148e:	4798      	blx	r3
 8011490:	60f8      	str	r0, [r7, #12]
      break;
 8011492:	e004      	b.n	801149e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8011494:	6839      	ldr	r1, [r7, #0]
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f9f9 	bl	801188e <USBD_CtlError>
      return;
 801149c:	e04b      	b.n	8011536 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 801149e:	e02e      	b.n	80114fe <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7c1b      	ldrb	r3, [r3, #16]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d109      	bne.n	80114bc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80114ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114b0:	f107 020a 	add.w	r2, r7, #10
 80114b4:	4610      	mov	r0, r2
 80114b6:	4798      	blx	r3
 80114b8:	60f8      	str	r0, [r7, #12]
      break;
 80114ba:	e020      	b.n	80114fe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80114bc:	6839      	ldr	r1, [r7, #0]
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f000 f9e5 	bl	801188e <USBD_CtlError>
      return;
 80114c4:	e037      	b.n	8011536 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	7c1b      	ldrb	r3, [r3, #16]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d10d      	bne.n	80114ea <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80114d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d6:	f107 020a 	add.w	r2, r7, #10
 80114da:	4610      	mov	r0, r2
 80114dc:	4798      	blx	r3
 80114de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3301      	adds	r3, #1
 80114e4:	2207      	movs	r2, #7
 80114e6:	701a      	strb	r2, [r3, #0]
      break;
 80114e8:	e009      	b.n	80114fe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f9ce 	bl	801188e <USBD_CtlError>
      return;
 80114f2:	e020      	b.n	8011536 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80114f4:	6839      	ldr	r1, [r7, #0]
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 f9c9 	bl	801188e <USBD_CtlError>
    return;
 80114fc:	e01b      	b.n	8011536 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80114fe:	897b      	ldrh	r3, [r7, #10]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d011      	beq.n	8011528 <USBD_GetDescriptor+0x1e0>
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	88db      	ldrh	r3, [r3, #6]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d00d      	beq.n	8011528 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	88da      	ldrh	r2, [r3, #6]
 8011510:	897b      	ldrh	r3, [r7, #10]
 8011512:	4293      	cmp	r3, r2
 8011514:	bf28      	it	cs
 8011516:	4613      	movcs	r3, r2
 8011518:	b29b      	uxth	r3, r3
 801151a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 801151c:	897b      	ldrh	r3, [r7, #10]
 801151e:	461a      	mov	r2, r3
 8011520:	68f9      	ldr	r1, [r7, #12]
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 fa1e 	bl	8011964 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	88db      	ldrh	r3, [r3, #6]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d102      	bne.n	8011536 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 fa75 	bl	8011a20 <USBD_CtlSendStatus>
  }
}
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	889b      	ldrh	r3, [r3, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d130      	bne.n	80115b0 <USBD_SetAddress+0x74>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	88db      	ldrh	r3, [r3, #6]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d12c      	bne.n	80115b0 <USBD_SetAddress+0x74>
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	885b      	ldrh	r3, [r3, #2]
 801155a:	2b7f      	cmp	r3, #127	; 0x7f
 801155c:	d828      	bhi.n	80115b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	885b      	ldrh	r3, [r3, #2]
 8011562:	b2db      	uxtb	r3, r3
 8011564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011568:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011570:	2b03      	cmp	r3, #3
 8011572:	d104      	bne.n	801157e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f989 	bl	801188e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801157c:	e01c      	b.n	80115b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	7bfa      	ldrb	r2, [r7, #15]
 8011582:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011586:	7bfb      	ldrb	r3, [r7, #15]
 8011588:	4619      	mov	r1, r3
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f004 f8a2 	bl	80156d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 fa45 	bl	8011a20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011596:	7bfb      	ldrb	r3, [r7, #15]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d004      	beq.n	80115a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2202      	movs	r2, #2
 80115a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115a4:	e008      	b.n	80115b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2201      	movs	r2, #1
 80115aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ae:	e003      	b.n	80115b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80115b0:	6839      	ldr	r1, [r7, #0]
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 f96b 	bl	801188e <USBD_CtlError>
  }
}
 80115b8:	bf00      	nop
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	885b      	ldrh	r3, [r3, #2]
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	4b41      	ldr	r3, [pc, #260]	; (80116d8 <USBD_SetConfig+0x118>)
 80115d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80115d4:	4b40      	ldr	r3, [pc, #256]	; (80116d8 <USBD_SetConfig+0x118>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d904      	bls.n	80115e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80115dc:	6839      	ldr	r1, [r7, #0]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f955 	bl	801188e <USBD_CtlError>
 80115e4:	e075      	b.n	80116d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80115ec:	2b02      	cmp	r3, #2
 80115ee:	d002      	beq.n	80115f6 <USBD_SetConfig+0x36>
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d023      	beq.n	801163c <USBD_SetConfig+0x7c>
 80115f4:	e062      	b.n	80116bc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80115f6:	4b38      	ldr	r3, [pc, #224]	; (80116d8 <USBD_SetConfig+0x118>)
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d01a      	beq.n	8011634 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80115fe:	4b36      	ldr	r3, [pc, #216]	; (80116d8 <USBD_SetConfig+0x118>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	461a      	mov	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2203      	movs	r2, #3
 801160c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011610:	4b31      	ldr	r3, [pc, #196]	; (80116d8 <USBD_SetConfig+0x118>)
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	4619      	mov	r1, r3
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fa2a 	bl	8010a70 <USBD_SetClassConfig>
 801161c:	4603      	mov	r3, r0
 801161e:	2b02      	cmp	r3, #2
 8011620:	d104      	bne.n	801162c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f932 	bl	801188e <USBD_CtlError>
          return;
 801162a:	e052      	b.n	80116d2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 f9f7 	bl	8011a20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011632:	e04e      	b.n	80116d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 f9f3 	bl	8011a20 <USBD_CtlSendStatus>
      break;
 801163a:	e04a      	b.n	80116d2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801163c:	4b26      	ldr	r3, [pc, #152]	; (80116d8 <USBD_SetConfig+0x118>)
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d112      	bne.n	801166a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2202      	movs	r2, #2
 8011648:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 801164c:	4b22      	ldr	r3, [pc, #136]	; (80116d8 <USBD_SetConfig+0x118>)
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	461a      	mov	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8011656:	4b20      	ldr	r3, [pc, #128]	; (80116d8 <USBD_SetConfig+0x118>)
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	4619      	mov	r1, r3
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff fa26 	bl	8010aae <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f9dc 	bl	8011a20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011668:	e033      	b.n	80116d2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801166a:	4b1b      	ldr	r3, [pc, #108]	; (80116d8 <USBD_SetConfig+0x118>)
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	461a      	mov	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	429a      	cmp	r2, r3
 8011676:	d01d      	beq.n	80116b4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	b2db      	uxtb	r3, r3
 801167e:	4619      	mov	r1, r3
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7ff fa14 	bl	8010aae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011686:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <USBD_SetConfig+0x118>)
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	461a      	mov	r2, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011690:	4b11      	ldr	r3, [pc, #68]	; (80116d8 <USBD_SetConfig+0x118>)
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	4619      	mov	r1, r3
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff f9ea 	bl	8010a70 <USBD_SetClassConfig>
 801169c:	4603      	mov	r3, r0
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d104      	bne.n	80116ac <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80116a2:	6839      	ldr	r1, [r7, #0]
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f000 f8f2 	bl	801188e <USBD_CtlError>
          return;
 80116aa:	e012      	b.n	80116d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f9b7 	bl	8011a20 <USBD_CtlSendStatus>
      break;
 80116b2:	e00e      	b.n	80116d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 f9b3 	bl	8011a20 <USBD_CtlSendStatus>
      break;
 80116ba:	e00a      	b.n	80116d2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80116bc:	6839      	ldr	r1, [r7, #0]
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f8e5 	bl	801188e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80116c4:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <USBD_SetConfig+0x118>)
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	4619      	mov	r1, r3
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7ff f9ef 	bl	8010aae <USBD_ClrClassConfig>
      break;
 80116d0:	bf00      	nop
    }
  }
}
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	200014b4 	.word	0x200014b4

080116dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	88db      	ldrh	r3, [r3, #6]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d004      	beq.n	80116f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80116ee:	6839      	ldr	r1, [r7, #0]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 f8cc 	bl	801188e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80116f6:	e021      	b.n	801173c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80116fe:	2b01      	cmp	r3, #1
 8011700:	db17      	blt.n	8011732 <USBD_GetConfig+0x56>
 8011702:	2b02      	cmp	r3, #2
 8011704:	dd02      	ble.n	801170c <USBD_GetConfig+0x30>
 8011706:	2b03      	cmp	r3, #3
 8011708:	d00b      	beq.n	8011722 <USBD_GetConfig+0x46>
 801170a:	e012      	b.n	8011732 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	3308      	adds	r3, #8
 8011716:	2201      	movs	r2, #1
 8011718:	4619      	mov	r1, r3
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 f922 	bl	8011964 <USBD_CtlSendData>
      break;
 8011720:	e00c      	b.n	801173c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	3304      	adds	r3, #4
 8011726:	2201      	movs	r2, #1
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f91a 	bl	8011964 <USBD_CtlSendData>
      break;
 8011730:	e004      	b.n	801173c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8011732:	6839      	ldr	r1, [r7, #0]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f8aa 	bl	801188e <USBD_CtlError>
      break;
 801173a:	bf00      	nop
}
 801173c:	bf00      	nop
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011754:	3b01      	subs	r3, #1
 8011756:	2b02      	cmp	r3, #2
 8011758:	d81e      	bhi.n	8011798 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	88db      	ldrh	r3, [r3, #6]
 801175e:	2b02      	cmp	r3, #2
 8011760:	d004      	beq.n	801176c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011762:	6839      	ldr	r1, [r7, #0]
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f892 	bl	801188e <USBD_CtlError>
      break;
 801176a:	e01a      	b.n	80117a2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2201      	movs	r2, #1
 8011770:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011778:	2b00      	cmp	r3, #0
 801177a:	d005      	beq.n	8011788 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	f043 0202 	orr.w	r2, r3, #2
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	330c      	adds	r3, #12
 801178c:	2202      	movs	r2, #2
 801178e:	4619      	mov	r1, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f000 f8e7 	bl	8011964 <USBD_CtlSendData>
    break;
 8011796:	e004      	b.n	80117a2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 f877 	bl	801188e <USBD_CtlError>
    break;
 80117a0:	bf00      	nop
  }
}
 80117a2:	bf00      	nop
 80117a4:	3708      	adds	r7, #8
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b082      	sub	sp, #8
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	885b      	ldrh	r3, [r3, #2]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d106      	bne.n	80117ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2201      	movs	r2, #1
 80117c0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 f92b 	bl	8011a20 <USBD_CtlSendStatus>
  }

}
 80117ca:	bf00      	nop
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b082      	sub	sp, #8
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
 80117da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117e2:	3b01      	subs	r3, #1
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d80b      	bhi.n	8011800 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	885b      	ldrh	r3, [r3, #2]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d10c      	bne.n	801180a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f911 	bl	8011a20 <USBD_CtlSendStatus>
    }
    break;
 80117fe:	e004      	b.n	801180a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f843 	bl	801188e <USBD_CtlError>
    break;
 8011808:	e000      	b.n	801180c <USBD_ClrFeature+0x3a>
    break;
 801180a:	bf00      	nop
  }
}
 801180c:	bf00      	nop
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	781a      	ldrb	r2, [r3, #0]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	785a      	ldrb	r2, [r3, #1]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	3302      	adds	r3, #2
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	b29a      	uxth	r2, r3
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	3303      	adds	r3, #3
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	b29b      	uxth	r3, r3
 801183e:	021b      	lsls	r3, r3, #8
 8011840:	b29b      	uxth	r3, r3
 8011842:	4413      	add	r3, r2
 8011844:	b29a      	uxth	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	3304      	adds	r3, #4
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	b29a      	uxth	r2, r3
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	3305      	adds	r3, #5
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	b29b      	uxth	r3, r3
 801185a:	021b      	lsls	r3, r3, #8
 801185c:	b29b      	uxth	r3, r3
 801185e:	4413      	add	r3, r2
 8011860:	b29a      	uxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	3306      	adds	r3, #6
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	b29a      	uxth	r2, r3
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	3307      	adds	r3, #7
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	b29b      	uxth	r3, r3
 8011876:	021b      	lsls	r3, r3, #8
 8011878:	b29b      	uxth	r3, r3
 801187a:	4413      	add	r3, r2
 801187c:	b29a      	uxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	80da      	strh	r2, [r3, #6]

}
 8011882:	bf00      	nop
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011898:	2180      	movs	r1, #128	; 0x80
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f003 feb0 	bl	8015600 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80118a0:	2100      	movs	r1, #0
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f003 feac 	bl	8015600 <USBD_LL_StallEP>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80118bc:	2300      	movs	r3, #0
 80118be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d032      	beq.n	801192c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80118c6:	68f8      	ldr	r0, [r7, #12]
 80118c8:	f000 f834 	bl	8011934 <USBD_GetLen>
 80118cc:	4603      	mov	r3, r0
 80118ce:	3301      	adds	r3, #1
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	1c5a      	adds	r2, r3, #1
 80118de:	75fa      	strb	r2, [r7, #23]
 80118e0:	461a      	mov	r2, r3
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	4413      	add	r3, r2
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	7812      	ldrb	r2, [r2, #0]
 80118ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
 80118ee:	1c5a      	adds	r2, r3, #1
 80118f0:	75fa      	strb	r2, [r7, #23]
 80118f2:	461a      	mov	r2, r3
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	4413      	add	r3, r2
 80118f8:	2203      	movs	r2, #3
 80118fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80118fc:	e012      	b.n	8011924 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	60fa      	str	r2, [r7, #12]
 8011904:	7dfa      	ldrb	r2, [r7, #23]
 8011906:	1c51      	adds	r1, r2, #1
 8011908:	75f9      	strb	r1, [r7, #23]
 801190a:	4611      	mov	r1, r2
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	440a      	add	r2, r1
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011914:	7dfb      	ldrb	r3, [r7, #23]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	75fa      	strb	r2, [r7, #23]
 801191a:	461a      	mov	r2, r3
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	4413      	add	r3, r2
 8011920:	2200      	movs	r2, #0
 8011922:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1e8      	bne.n	80118fe <USBD_GetString+0x4e>
    }
  }
}
 801192c:	bf00      	nop
 801192e:	3718      	adds	r7, #24
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 801193c:	2300      	movs	r3, #0
 801193e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011940:	e005      	b.n	801194e <USBD_GetLen+0x1a>
    {
        len++;
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	3301      	adds	r3, #1
 8011946:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3301      	adds	r3, #1
 801194c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1f5      	bne.n	8011942 <USBD_GetLen+0xe>
    }

    return len;
 8011956:	7bfb      	ldrb	r3, [r7, #15]
}
 8011958:	4618      	mov	r0, r3
 801195a:	3714      	adds	r7, #20
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr

08011964 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2202      	movs	r2, #2
 8011976:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 801197a:	88fa      	ldrh	r2, [r7, #6]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011980:	88fa      	ldrh	r2, [r7, #6]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011986:	88fb      	ldrh	r3, [r7, #6]
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	2100      	movs	r1, #0
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f003 fec0 	bl	8015712 <USBD_LL_Transmit>

  return USBD_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3710      	adds	r7, #16
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	4613      	mov	r3, r2
 80119a8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80119aa:	88fb      	ldrh	r3, [r7, #6]
 80119ac:	68ba      	ldr	r2, [r7, #8]
 80119ae:	2100      	movs	r1, #0
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f003 feae 	bl	8015712 <USBD_LL_Transmit>

  return USBD_OK;
 80119b6:	2300      	movs	r3, #0
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	4613      	mov	r3, r2
 80119cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2203      	movs	r2, #3
 80119d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80119d6:	88fa      	ldrh	r2, [r7, #6]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80119de:	88fa      	ldrh	r2, [r7, #6]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80119e6:	88fb      	ldrh	r3, [r7, #6]
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	2100      	movs	r1, #0
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f003 feb3 	bl	8015758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	4613      	mov	r3, r2
 8011a08:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a0a:	88fb      	ldrh	r3, [r7, #6]
 8011a0c:	68ba      	ldr	r2, [r7, #8]
 8011a0e:	2100      	movs	r1, #0
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f003 fea1 	bl	8015758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2204      	movs	r2, #4
 8011a2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011a30:	2300      	movs	r3, #0
 8011a32:	2200      	movs	r2, #0
 8011a34:	2100      	movs	r1, #0
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f003 fe6b 	bl	8015712 <USBD_LL_Transmit>

  return USBD_OK;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}

08011a46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8011a46:	b580      	push	{r7, lr}
 8011a48:	b082      	sub	sp, #8
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2205      	movs	r2, #5
 8011a52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011a56:	2300      	movs	r3, #0
 8011a58:	2200      	movs	r2, #0
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f003 fe7b 	bl	8015758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a62:	2300      	movs	r3, #0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b085      	sub	sp, #20
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	4603      	mov	r3, r0
 8011a74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011a76:	2300      	movs	r3, #0
 8011a78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a7e:	2b84      	cmp	r3, #132	; 0x84
 8011a80:	d005      	beq.n	8011a8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011a82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	4413      	add	r3, r2
 8011a8a:	3303      	adds	r3, #3
 8011a8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3714      	adds	r7, #20
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011aa2:	f3ef 8305 	mrs	r3, IPSR
 8011aa6:	607b      	str	r3, [r7, #4]
  return(result);
 8011aa8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	bf14      	ite	ne
 8011aae:	2301      	movne	r3, #1
 8011ab0:	2300      	moveq	r3, #0
 8011ab2:	b2db      	uxtb	r3, r3
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011ac4:	f001 fd56 	bl	8013574 <vTaskStartScheduler>
  
  return osOK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	bd80      	pop	{r7, pc}

08011ace <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ad0:	b089      	sub	sp, #36	; 0x24
 8011ad2:	af04      	add	r7, sp, #16
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	695b      	ldr	r3, [r3, #20]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d020      	beq.n	8011b22 <osThreadCreate+0x54>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	699b      	ldr	r3, [r3, #24]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d01c      	beq.n	8011b22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	685c      	ldr	r4, [r3, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681d      	ldr	r5, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	691e      	ldr	r6, [r3, #16]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff ffb6 	bl	8011a6c <makeFreeRtosPriority>
 8011b00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	695b      	ldr	r3, [r3, #20]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b0a:	9202      	str	r2, [sp, #8]
 8011b0c:	9301      	str	r3, [sp, #4]
 8011b0e:	9100      	str	r1, [sp, #0]
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	4632      	mov	r2, r6
 8011b14:	4629      	mov	r1, r5
 8011b16:	4620      	mov	r0, r4
 8011b18:	f001 fb71 	bl	80131fe <xTaskCreateStatic>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	e01c      	b.n	8011b5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685c      	ldr	r4, [r3, #4]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b2e:	b29e      	uxth	r6, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff ff98 	bl	8011a6c <makeFreeRtosPriority>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	f107 030c 	add.w	r3, r7, #12
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	9200      	str	r2, [sp, #0]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	4632      	mov	r2, r6
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f001 fbaf 	bl	80132b0 <xTaskCreate>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d001      	beq.n	8011b5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	e000      	b.n	8011b5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3714      	adds	r7, #20
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <osDelay+0x16>
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	e000      	b.n	8011b7e <osDelay+0x18>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f001 fcc4 	bl	801350c <vTaskDelay>
  
  return osOK;
 8011b84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
	...

08011b90 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af02      	add	r7, sp, #8
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011ba2:	f7ff ff7b 	bl	8011a9c <inHandlerMode>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d01c      	beq.n	8011be6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	f107 0208 	add.w	r2, r7, #8
 8011bb2:	f107 030c 	add.w	r3, r7, #12
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	4613      	mov	r3, r2
 8011bba:	2201      	movs	r2, #1
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f002 fbab 	bl	8014318 <xTaskGenericNotifyFromISR>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d002      	beq.n	8011bce <osSignalSet+0x3e>
      return 0x80000000;
 8011bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bcc:	e019      	b.n	8011c02 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d015      	beq.n	8011c00 <osSignalSet+0x70>
 8011bd4:	4b0d      	ldr	r3, [pc, #52]	; (8011c0c <osSignalSet+0x7c>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
 8011be4:	e00c      	b.n	8011c00 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011be6:	6839      	ldr	r1, [r7, #0]
 8011be8:	f107 0308 	add.w	r3, r7, #8
 8011bec:	2201      	movs	r2, #1
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f002 faf2 	bl	80141d8 <xTaskGenericNotify>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d002      	beq.n	8011c00 <osSignalSet+0x70>
    return 0x80000000;
 8011bfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bfe:	e000      	b.n	8011c02 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011c00:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	e000ed04 	.word	0xe000ed04

08011c10 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011c10:	b590      	push	{r4, r7, lr}
 8011c12:	b089      	sub	sp, #36	; 0x24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011c20:	2300      	movs	r3, #0
 8011c22:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c2a:	d103      	bne.n	8011c34 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c30:	61fb      	str	r3, [r7, #28]
 8011c32:	e009      	b.n	8011c48 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d006      	beq.n	8011c48 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d101      	bne.n	8011c48 <osSignalWait+0x38>
      ticks = 1;
 8011c44:	2301      	movs	r3, #1
 8011c46:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011c48:	f7ff ff28 	bl	8011a9c <inHandlerMode>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d002      	beq.n	8011c58 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011c52:	2382      	movs	r3, #130	; 0x82
 8011c54:	613b      	str	r3, [r7, #16]
 8011c56:	e01b      	b.n	8011c90 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	f107 0310 	add.w	r3, r7, #16
 8011c5e:	1d1a      	adds	r2, r3, #4
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	2000      	movs	r0, #0
 8011c64:	f002 fa5e 	bl	8014124 <xTaskNotifyWait>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d008      	beq.n	8011c80 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d102      	bne.n	8011c7a <osSignalWait+0x6a>
 8011c74:	2300      	movs	r3, #0
 8011c76:	613b      	str	r3, [r7, #16]
 8011c78:	e00a      	b.n	8011c90 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011c7a:	2340      	movs	r3, #64	; 0x40
 8011c7c:	613b      	str	r3, [r7, #16]
 8011c7e:	e007      	b.n	8011c90 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	da02      	bge.n	8011c8c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011c86:	2386      	movs	r3, #134	; 0x86
 8011c88:	613b      	str	r3, [r7, #16]
 8011c8a:	e001      	b.n	8011c90 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011c8c:	2308      	movs	r3, #8
 8011c8e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	461c      	mov	r4, r3
 8011c94:	f107 0310 	add.w	r3, r7, #16
 8011c98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	3724      	adds	r7, #36	; 0x24
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd90      	pop	{r4, r7, pc}

08011ca8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	2001      	movs	r0, #1
 8011cc0:	f000 fce0 	bl	8012684 <xQueueCreateMutexStatic>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	e003      	b.n	8011cd0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011cc8:	2001      	movs	r0, #1
 8011cca:	f000 fcc3 	bl	8012654 <xQueueCreateMutex>
 8011cce:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <osMutexWait+0x18>
    return osErrorParameter;
 8011cec:	2380      	movs	r3, #128	; 0x80
 8011cee:	e03a      	b.n	8011d66 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfa:	d103      	bne.n	8011d04 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011d00:	60fb      	str	r3, [r7, #12]
 8011d02:	e009      	b.n	8011d18 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d006      	beq.n	8011d18 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d101      	bne.n	8011d18 <osMutexWait+0x40>
      ticks = 1;
 8011d14:	2301      	movs	r3, #1
 8011d16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011d18:	f7ff fec0 	bl	8011a9c <inHandlerMode>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d017      	beq.n	8011d52 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011d22:	f107 0308 	add.w	r3, r7, #8
 8011d26:	461a      	mov	r2, r3
 8011d28:	2100      	movs	r1, #0
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f001 f8c2 	bl	8012eb4 <xQueueReceiveFromISR>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d001      	beq.n	8011d3a <osMutexWait+0x62>
      return osErrorOS;
 8011d36:	23ff      	movs	r3, #255	; 0xff
 8011d38:	e015      	b.n	8011d66 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d011      	beq.n	8011d64 <osMutexWait+0x8c>
 8011d40:	4b0b      	ldr	r3, [pc, #44]	; (8011d70 <osMutexWait+0x98>)
 8011d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	e008      	b.n	8011d64 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011d52:	68f9      	ldr	r1, [r7, #12]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f000 ffa5 	bl	8012ca4 <xQueueSemaphoreTake>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d001      	beq.n	8011d64 <osMutexWait+0x8c>
    return osErrorOS;
 8011d60:	23ff      	movs	r3, #255	; 0xff
 8011d62:	e000      	b.n	8011d66 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	e000ed04 	.word	0xe000ed04

08011d74 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d80:	2300      	movs	r3, #0
 8011d82:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011d84:	f7ff fe8a 	bl	8011a9c <inHandlerMode>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d016      	beq.n	8011dbc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011d8e:	f107 0308 	add.w	r3, r7, #8
 8011d92:	4619      	mov	r1, r3
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fe1f 	bl	80129d8 <xQueueGiveFromISR>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d001      	beq.n	8011da4 <osMutexRelease+0x30>
      return osErrorOS;
 8011da0:	23ff      	movs	r3, #255	; 0xff
 8011da2:	e017      	b.n	8011dd4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d013      	beq.n	8011dd2 <osMutexRelease+0x5e>
 8011daa:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <osMutexRelease+0x68>)
 8011dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	f3bf 8f4f 	dsb	sy
 8011db6:	f3bf 8f6f 	isb	sy
 8011dba:	e00a      	b.n	8011dd2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 fc7a 	bl	80126bc <xQueueGenericSend>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d001      	beq.n	8011dd2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011dce:	23ff      	movs	r3, #255	; 0xff
 8011dd0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	e000ed04 	.word	0xe000ed04

08011de0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	3303      	adds	r3, #3
 8011dee:	f023 0303 	bic.w	r3, r3, #3
 8011df2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011df4:	2014      	movs	r0, #20
 8011df6:	f002 fdfb 	bl	80149f0 <pvPortMalloc>
 8011dfa:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d046      	beq.n	8011e90 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011e10:	697b      	ldr	r3, [r7, #20]
 8011e12:	2200      	movs	r2, #0
 8011e14:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f002 fde8 	bl	80149f0 <pvPortMalloc>
 8011e20:	4602      	mov	r2, r0
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d02b      	beq.n	8011e86 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	68fa      	ldr	r2, [r7, #12]
 8011e34:	fb02 f303 	mul.w	r3, r2, r3
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f002 fdd9 	bl	80149f0 <pvPortMalloc>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d011      	beq.n	8011e70 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	613b      	str	r3, [r7, #16]
 8011e50:	e008      	b.n	8011e64 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	685a      	ldr	r2, [r3, #4]
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	4413      	add	r3, r2
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	3301      	adds	r3, #1
 8011e62:	613b      	str	r3, [r7, #16]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	693a      	ldr	r2, [r7, #16]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d3f1      	bcc.n	8011e52 <osPoolCreate+0x72>
 8011e6e:	e00f      	b.n	8011e90 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f002 fe7d 	bl	8014b74 <vPortFree>
        vPortFree(thePool);
 8011e7a:	6978      	ldr	r0, [r7, #20]
 8011e7c:	f002 fe7a 	bl	8014b74 <vPortFree>
        thePool = NULL;
 8011e80:	2300      	movs	r3, #0
 8011e82:	617b      	str	r3, [r7, #20]
 8011e84:	e004      	b.n	8011e90 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011e86:	6978      	ldr	r0, [r7, #20]
 8011e88:	f002 fe74 	bl	8014b74 <vPortFree>
      thePool = NULL;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011e90:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3718      	adds	r7, #24
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b08a      	sub	sp, #40	; 0x28
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011eaa:	f7ff fdf7 	bl	8011a9c <inHandlerMode>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00e      	beq.n	8011ed2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8011eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ebc:	f383 8811 	msr	BASEPRI, r3
 8011ec0:	f3bf 8f6f 	isb	sy
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	617a      	str	r2, [r7, #20]
 8011eca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ecc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ece:	627b      	str	r3, [r7, #36]	; 0x24
 8011ed0:	e001      	b.n	8011ed6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011ed2:	f002 fc73 	bl	80147bc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	61fb      	str	r3, [r7, #28]
 8011eda:	e029      	b.n	8011f30 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	69fa      	ldr	r2, [r7, #28]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	69ba      	ldr	r2, [r7, #24]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d301      	bcc.n	8011ef4 <osPoolAlloc+0x5a>
      index = 0;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685a      	ldr	r2, [r3, #4]
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	4413      	add	r3, r2
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d113      	bne.n	8011f2a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	4413      	add	r3, r2
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4619      	mov	r1, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	69ba      	ldr	r2, [r7, #24]
 8011f1a:	fb02 f303 	mul.w	r3, r2, r3
 8011f1e:	440b      	add	r3, r1
 8011f20:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	69ba      	ldr	r2, [r7, #24]
 8011f26:	611a      	str	r2, [r3, #16]
      break;
 8011f28:	e007      	b.n	8011f3a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	61fb      	str	r3, [r7, #28]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	69fa      	ldr	r2, [r7, #28]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d3d0      	bcc.n	8011edc <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011f3a:	f7ff fdaf 	bl	8011a9c <inHandlerMode>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d005      	beq.n	8011f50 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f46:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f383 8811 	msr	BASEPRI, r3
 8011f4e:	e001      	b.n	8011f54 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011f50:	f002 fc62 	bl	8014818 <vPortExitCritical>
  }
  
  return p;
 8011f54:	6a3b      	ldr	r3, [r7, #32]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3728      	adds	r7, #40	; 0x28
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011f5e:	b480      	push	{r7}
 8011f60:	b085      	sub	sp, #20
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d101      	bne.n	8011f72 <osPoolFree+0x14>
    return osErrorParameter;
 8011f6e:	2380      	movs	r3, #128	; 0x80
 8011f70:	e030      	b.n	8011fd4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d101      	bne.n	8011f7c <osPoolFree+0x1e>
    return osErrorParameter;
 8011f78:	2380      	movs	r3, #128	; 0x80
 8011f7a:	e02b      	b.n	8011fd4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	683a      	ldr	r2, [r7, #0]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d201      	bcs.n	8011f8a <osPoolFree+0x2c>
    return osErrorParameter;
 8011f86:	2380      	movs	r3, #128	; 0x80
 8011f88:	e024      	b.n	8011fd4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	6812      	ldr	r2, [r2, #0]
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	68da      	ldr	r2, [r3, #12]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f9e:	fb02 f201 	mul.w	r2, r2, r1
 8011fa2:	1a9b      	subs	r3, r3, r2
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <osPoolFree+0x4e>
    return osErrorParameter;
 8011fa8:	2380      	movs	r3, #128	; 0x80
 8011faa:	e013      	b.n	8011fd4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fb6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d301      	bcc.n	8011fc6 <osPoolFree+0x68>
    return osErrorParameter;
 8011fc2:	2380      	movs	r3, #128	; 0x80
 8011fc4:	e006      	b.n	8011fd4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	4413      	add	r3, r2
 8011fce:	2200      	movs	r2, #0
 8011fd0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011fe0:	b590      	push	{r4, r7, lr}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	689c      	ldr	r4, [r3, #8]
 8011ffe:	200c      	movs	r0, #12
 8012000:	f002 fcf6 	bl	80149f0 <pvPortMalloc>
 8012004:	4603      	mov	r3, r0
 8012006:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <osMailCreate+0x36>
    return NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	e038      	b.n	8012088 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	689b      	ldr	r3, [r3, #8]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	681c      	ldr	r4, [r3, #0]
 801202a:	2200      	movs	r2, #0
 801202c:	2104      	movs	r1, #4
 801202e:	f000 fa9b 	bl	8012568 <xQueueGenericCreate>
 8012032:	4603      	mov	r3, r0
 8012034:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d107      	bne.n	8012052 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	689b      	ldr	r3, [r3, #8]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4618      	mov	r0, r3
 801204a:	f002 fd93 	bl	8014b74 <vPortFree>
    return NULL;
 801204e:	2300      	movs	r3, #0
 8012050:	e01a      	b.n	8012088 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	689b      	ldr	r3, [r3, #8]
 8012056:	681c      	ldr	r4, [r3, #0]
 8012058:	f107 030c 	add.w	r3, r7, #12
 801205c:	4618      	mov	r0, r3
 801205e:	f7ff febf 	bl	8011de0 <osPoolCreate>
 8012062:	4603      	mov	r3, r0
 8012064:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d107      	bne.n	8012082 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4618      	mov	r0, r3
 801207a:	f002 fd7b 	bl	8014b74 <vPortFree>
    return NULL;
 801207e:	2300      	movs	r3, #0
 8012080:	e002      	b.n	8012088 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	689b      	ldr	r3, [r3, #8]
 8012086:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012088:	4618      	mov	r0, r3
 801208a:	371c      	adds	r7, #28
 801208c:	46bd      	mov	sp, r7
 801208e:	bd90      	pop	{r4, r7, pc}

08012090 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d101      	bne.n	80120a4 <osMailAlloc+0x14>
    return NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	e006      	b.n	80120b2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7ff fef6 	bl	8011e9a <osPoolAlloc>
 80120ae:	60f8      	str	r0, [r7, #12]
  
  return p;
 80120b0:	68fb      	ldr	r3, [r7, #12]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3710      	adds	r7, #16
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
	...

080120bc <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d101      	bne.n	80120d0 <osMailPut+0x14>
    return osErrorParameter;
 80120cc:	2380      	movs	r3, #128	; 0x80
 80120ce:	e02c      	b.n	801212a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80120d4:	f7ff fce2 	bl	8011a9c <inHandlerMode>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d018      	beq.n	8012110 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6858      	ldr	r0, [r3, #4]
 80120e2:	f107 020c 	add.w	r2, r7, #12
 80120e6:	4639      	mov	r1, r7
 80120e8:	2300      	movs	r3, #0
 80120ea:	f000 fbe1 	bl	80128b0 <xQueueGenericSendFromISR>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d001      	beq.n	80120f8 <osMailPut+0x3c>
      return osErrorOS;
 80120f4:	23ff      	movs	r3, #255	; 0xff
 80120f6:	e018      	b.n	801212a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d014      	beq.n	8012128 <osMailPut+0x6c>
 80120fe:	4b0d      	ldr	r3, [pc, #52]	; (8012134 <osMailPut+0x78>)
 8012100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	e00b      	b.n	8012128 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6858      	ldr	r0, [r3, #4]
 8012114:	4639      	mov	r1, r7
 8012116:	2300      	movs	r3, #0
 8012118:	2200      	movs	r2, #0
 801211a:	f000 facf 	bl	80126bc <xQueueGenericSend>
 801211e:	4603      	mov	r3, r0
 8012120:	2b01      	cmp	r3, #1
 8012122:	d001      	beq.n	8012128 <osMailPut+0x6c>
      return osErrorOS;
 8012124:	23ff      	movs	r3, #255	; 0xff
 8012126:	e000      	b.n	801212a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	e000ed04 	.word	0xe000ed04

08012138 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012138:	b590      	push	{r4, r7, lr}
 801213a:	b08b      	sub	sp, #44	; 0x2c
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10a      	bne.n	8012164 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801214e:	2380      	movs	r3, #128	; 0x80
 8012150:	617b      	str	r3, [r7, #20]
    return event;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	461c      	mov	r4, r3
 8012156:	f107 0314 	add.w	r3, r7, #20
 801215a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801215e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012162:	e056      	b.n	8012212 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012164:	2300      	movs	r3, #0
 8012166:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012172:	d103      	bne.n	801217c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012174:	f04f 33ff 	mov.w	r3, #4294967295
 8012178:	627b      	str	r3, [r7, #36]	; 0x24
 801217a:	e009      	b.n	8012190 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d006      	beq.n	8012190 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <osMailGet+0x58>
      ticks = 1;
 801218c:	2301      	movs	r3, #1
 801218e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012190:	f7ff fc84 	bl	8011a9c <inHandlerMode>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d01d      	beq.n	80121d6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	6858      	ldr	r0, [r3, #4]
 801219e:	f107 0220 	add.w	r2, r7, #32
 80121a2:	f107 0314 	add.w	r3, r7, #20
 80121a6:	3304      	adds	r3, #4
 80121a8:	4619      	mov	r1, r3
 80121aa:	f000 fe83 	bl	8012eb4 <xQueueReceiveFromISR>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d102      	bne.n	80121ba <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80121b4:	2320      	movs	r3, #32
 80121b6:	617b      	str	r3, [r7, #20]
 80121b8:	e001      	b.n	80121be <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d01e      	beq.n	8012202 <osMailGet+0xca>
 80121c4:	4b15      	ldr	r3, [pc, #84]	; (801221c <osMailGet+0xe4>)
 80121c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ca:	601a      	str	r2, [r3, #0]
 80121cc:	f3bf 8f4f 	dsb	sy
 80121d0:	f3bf 8f6f 	isb	sy
 80121d4:	e015      	b.n	8012202 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	6858      	ldr	r0, [r3, #4]
 80121da:	f107 0314 	add.w	r3, r7, #20
 80121de:	3304      	adds	r3, #4
 80121e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e2:	4619      	mov	r1, r3
 80121e4:	f000 fc82 	bl	8012aec <xQueueReceive>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d102      	bne.n	80121f4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80121ee:	2320      	movs	r3, #32
 80121f0:	617b      	str	r3, [r7, #20]
 80121f2:	e006      	b.n	8012202 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d101      	bne.n	80121fe <osMailGet+0xc6>
 80121fa:	2300      	movs	r3, #0
 80121fc:	e000      	b.n	8012200 <osMailGet+0xc8>
 80121fe:	2340      	movs	r3, #64	; 0x40
 8012200:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	461c      	mov	r4, r3
 8012206:	f107 0314 	add.w	r3, r7, #20
 801220a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801220e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	372c      	adds	r7, #44	; 0x2c
 8012216:	46bd      	mov	sp, r7
 8012218:	bd90      	pop	{r4, r7, pc}
 801221a:	bf00      	nop
 801221c:	e000ed04 	.word	0xe000ed04

08012220 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d101      	bne.n	8012234 <osMailFree+0x14>
    return osErrorParameter;
 8012230:	2380      	movs	r3, #128	; 0x80
 8012232:	e006      	b.n	8012242 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	689b      	ldr	r3, [r3, #8]
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	4618      	mov	r0, r3
 801223c:	f7ff fe8f 	bl	8011f5e <osPoolFree>
 8012240:	4603      	mov	r3, r0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3708      	adds	r7, #8
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801224a:	b480      	push	{r7}
 801224c:	b083      	sub	sp, #12
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f103 0208 	add.w	r2, r3, #8
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f04f 32ff 	mov.w	r2, #4294967295
 8012262:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f103 0208 	add.w	r2, r3, #8
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f103 0208 	add.w	r2, r3, #8
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801227e:	bf00      	nop
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr

0801228a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801228a:	b480      	push	{r7}
 801228c:	b083      	sub	sp, #12
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2200      	movs	r2, #0
 8012296:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012298:	bf00      	nop
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122a4:	b480      	push	{r7}
 80122a6:	b085      	sub	sp, #20
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	689a      	ldr	r2, [r3, #8]
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	689b      	ldr	r3, [r3, #8]
 80122c6:	683a      	ldr	r2, [r7, #0]
 80122c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	683a      	ldr	r2, [r7, #0]
 80122ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	1c5a      	adds	r2, r3, #1
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	601a      	str	r2, [r3, #0]
}
 80122e0:	bf00      	nop
 80122e2:	3714      	adds	r7, #20
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr

080122ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012302:	d103      	bne.n	801230c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	60fb      	str	r3, [r7, #12]
 801230a:	e00c      	b.n	8012326 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3308      	adds	r3, #8
 8012310:	60fb      	str	r3, [r7, #12]
 8012312:	e002      	b.n	801231a <vListInsert+0x2e>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	60fb      	str	r3, [r7, #12]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	68ba      	ldr	r2, [r7, #8]
 8012322:	429a      	cmp	r2, r3
 8012324:	d2f6      	bcs.n	8012314 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	685a      	ldr	r2, [r3, #4]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	683a      	ldr	r2, [r7, #0]
 8012334:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	1c5a      	adds	r2, r3, #1
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	601a      	str	r2, [r3, #0]
}
 8012352:	bf00      	nop
 8012354:	3714      	adds	r7, #20
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801235e:	b480      	push	{r7}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	691b      	ldr	r3, [r3, #16]
 801236a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	6892      	ldr	r2, [r2, #8]
 8012374:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	6852      	ldr	r2, [r2, #4]
 801237e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	429a      	cmp	r2, r3
 8012388:	d103      	bne.n	8012392 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	689a      	ldr	r2, [r3, #8]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2200      	movs	r2, #0
 8012396:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	1e5a      	subs	r2, r3, #1
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3714      	adds	r7, #20
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
	...

080123b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d109      	bne.n	80123dc <xQueueGenericReset+0x28>
	__asm volatile
 80123c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	60bb      	str	r3, [r7, #8]
 80123da:	e7fe      	b.n	80123da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80123dc:	f002 f9ee 	bl	80147bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123e8:	68f9      	ldr	r1, [r7, #12]
 80123ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80123ec:	fb01 f303 	mul.w	r3, r1, r3
 80123f0:	441a      	add	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801240c:	3b01      	subs	r3, #1
 801240e:	68f9      	ldr	r1, [r7, #12]
 8012410:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012412:	fb01 f303 	mul.w	r3, r1, r3
 8012416:	441a      	add	r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	22ff      	movs	r2, #255	; 0xff
 8012420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	22ff      	movs	r2, #255	; 0xff
 8012428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d114      	bne.n	801245c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d01a      	beq.n	8012470 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	3310      	adds	r3, #16
 801243e:	4618      	mov	r0, r3
 8012440:	f001 fada 	bl	80139f8 <xTaskRemoveFromEventList>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d012      	beq.n	8012470 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801244a:	4b0d      	ldr	r3, [pc, #52]	; (8012480 <xQueueGenericReset+0xcc>)
 801244c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	f3bf 8f4f 	dsb	sy
 8012456:	f3bf 8f6f 	isb	sy
 801245a:	e009      	b.n	8012470 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	3310      	adds	r3, #16
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff fef2 	bl	801224a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	3324      	adds	r3, #36	; 0x24
 801246a:	4618      	mov	r0, r3
 801246c:	f7ff feed 	bl	801224a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012470:	f002 f9d2 	bl	8014818 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012474:	2301      	movs	r3, #1
}
 8012476:	4618      	mov	r0, r3
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	e000ed04 	.word	0xe000ed04

08012484 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012484:	b580      	push	{r7, lr}
 8012486:	b08e      	sub	sp, #56	; 0x38
 8012488:	af02      	add	r7, sp, #8
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
 8012490:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d109      	bne.n	80124ac <xQueueGenericCreateStatic+0x28>
 8012498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801249c:	f383 8811 	msr	BASEPRI, r3
 80124a0:	f3bf 8f6f 	isb	sy
 80124a4:	f3bf 8f4f 	dsb	sy
 80124a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80124aa:	e7fe      	b.n	80124aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d109      	bne.n	80124c6 <xQueueGenericCreateStatic+0x42>
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
 80124c4:	e7fe      	b.n	80124c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <xQueueGenericCreateStatic+0x4e>
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <xQueueGenericCreateStatic+0x52>
 80124d2:	2301      	movs	r3, #1
 80124d4:	e000      	b.n	80124d8 <xQueueGenericCreateStatic+0x54>
 80124d6:	2300      	movs	r3, #0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d109      	bne.n	80124f0 <xQueueGenericCreateStatic+0x6c>
 80124dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e0:	f383 8811 	msr	BASEPRI, r3
 80124e4:	f3bf 8f6f 	isb	sy
 80124e8:	f3bf 8f4f 	dsb	sy
 80124ec:	623b      	str	r3, [r7, #32]
 80124ee:	e7fe      	b.n	80124ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d102      	bne.n	80124fc <xQueueGenericCreateStatic+0x78>
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d101      	bne.n	8012500 <xQueueGenericCreateStatic+0x7c>
 80124fc:	2301      	movs	r3, #1
 80124fe:	e000      	b.n	8012502 <xQueueGenericCreateStatic+0x7e>
 8012500:	2300      	movs	r3, #0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d109      	bne.n	801251a <xQueueGenericCreateStatic+0x96>
 8012506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250a:	f383 8811 	msr	BASEPRI, r3
 801250e:	f3bf 8f6f 	isb	sy
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	61fb      	str	r3, [r7, #28]
 8012518:	e7fe      	b.n	8012518 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801251a:	2348      	movs	r3, #72	; 0x48
 801251c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	2b48      	cmp	r3, #72	; 0x48
 8012522:	d009      	beq.n	8012538 <xQueueGenericCreateStatic+0xb4>
 8012524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012528:	f383 8811 	msr	BASEPRI, r3
 801252c:	f3bf 8f6f 	isb	sy
 8012530:	f3bf 8f4f 	dsb	sy
 8012534:	61bb      	str	r3, [r7, #24]
 8012536:	e7fe      	b.n	8012536 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00d      	beq.n	801255e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	2201      	movs	r2, #1
 8012546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801254a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	4613      	mov	r3, r2
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	68b9      	ldr	r1, [r7, #8]
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f000 f842 	bl	80125e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012560:	4618      	mov	r0, r3
 8012562:	3730      	adds	r7, #48	; 0x30
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012568:	b580      	push	{r7, lr}
 801256a:	b08a      	sub	sp, #40	; 0x28
 801256c:	af02      	add	r7, sp, #8
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	4613      	mov	r3, r2
 8012574:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d109      	bne.n	8012590 <xQueueGenericCreate+0x28>
 801257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012580:	f383 8811 	msr	BASEPRI, r3
 8012584:	f3bf 8f6f 	isb	sy
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	613b      	str	r3, [r7, #16]
 801258e:	e7fe      	b.n	801258e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d102      	bne.n	801259c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012596:	2300      	movs	r3, #0
 8012598:	61fb      	str	r3, [r7, #28]
 801259a:	e004      	b.n	80125a6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	fb02 f303 	mul.w	r3, r2, r3
 80125a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	3348      	adds	r3, #72	; 0x48
 80125aa:	4618      	mov	r0, r3
 80125ac:	f002 fa20 	bl	80149f0 <pvPortMalloc>
 80125b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00f      	beq.n	80125d8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	3348      	adds	r3, #72	; 0x48
 80125bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80125c6:	79fa      	ldrb	r2, [r7, #7]
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	4613      	mov	r3, r2
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	68b9      	ldr	r1, [r7, #8]
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f000 f805 	bl	80125e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80125d8:	69bb      	ldr	r3, [r7, #24]
	}
 80125da:	4618      	mov	r0, r3
 80125dc:	3720      	adds	r7, #32
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80125e2:	b580      	push	{r7, lr}
 80125e4:	b084      	sub	sp, #16
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	60f8      	str	r0, [r7, #12]
 80125ea:	60b9      	str	r1, [r7, #8]
 80125ec:	607a      	str	r2, [r7, #4]
 80125ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d103      	bne.n	80125fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	69ba      	ldr	r2, [r7, #24]
 80125fa:	601a      	str	r2, [r3, #0]
 80125fc:	e002      	b.n	8012604 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012610:	2101      	movs	r1, #1
 8012612:	69b8      	ldr	r0, [r7, #24]
 8012614:	f7ff fece 	bl	80123b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012618:	bf00      	nop
 801261a:	3710      	adds	r7, #16
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00e      	beq.n	801264c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2200      	movs	r2, #0
 8012632:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2200      	movs	r2, #0
 801263e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012640:	2300      	movs	r3, #0
 8012642:	2200      	movs	r2, #0
 8012644:	2100      	movs	r1, #0
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 f838 	bl	80126bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801264c:	bf00      	nop
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012654:	b580      	push	{r7, lr}
 8012656:	b086      	sub	sp, #24
 8012658:	af00      	add	r7, sp, #0
 801265a:	4603      	mov	r3, r0
 801265c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801265e:	2301      	movs	r3, #1
 8012660:	617b      	str	r3, [r7, #20]
 8012662:	2300      	movs	r3, #0
 8012664:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012666:	79fb      	ldrb	r3, [r7, #7]
 8012668:	461a      	mov	r2, r3
 801266a:	6939      	ldr	r1, [r7, #16]
 801266c:	6978      	ldr	r0, [r7, #20]
 801266e:	f7ff ff7b 	bl	8012568 <xQueueGenericCreate>
 8012672:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7ff ffd3 	bl	8012620 <prvInitialiseMutex>

		return pxNewQueue;
 801267a:	68fb      	ldr	r3, [r7, #12]
	}
 801267c:	4618      	mov	r0, r3
 801267e:	3718      	adds	r7, #24
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af02      	add	r7, sp, #8
 801268a:	4603      	mov	r3, r0
 801268c:	6039      	str	r1, [r7, #0]
 801268e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012690:	2301      	movs	r3, #1
 8012692:	617b      	str	r3, [r7, #20]
 8012694:	2300      	movs	r3, #0
 8012696:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012698:	79fb      	ldrb	r3, [r7, #7]
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	2200      	movs	r2, #0
 80126a0:	6939      	ldr	r1, [r7, #16]
 80126a2:	6978      	ldr	r0, [r7, #20]
 80126a4:	f7ff feee 	bl	8012484 <xQueueGenericCreateStatic>
 80126a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f7ff ffb8 	bl	8012620 <prvInitialiseMutex>

		return pxNewQueue;
 80126b0:	68fb      	ldr	r3, [r7, #12]
	}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3718      	adds	r7, #24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
	...

080126bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b08e      	sub	sp, #56	; 0x38
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
 80126c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80126ca:	2300      	movs	r3, #0
 80126cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d109      	bne.n	80126ec <xQueueGenericSend+0x30>
 80126d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126dc:	f383 8811 	msr	BASEPRI, r3
 80126e0:	f3bf 8f6f 	isb	sy
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80126ea:	e7fe      	b.n	80126ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d103      	bne.n	80126fa <xQueueGenericSend+0x3e>
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <xQueueGenericSend+0x42>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e000      	b.n	8012700 <xQueueGenericSend+0x44>
 80126fe:	2300      	movs	r3, #0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d109      	bne.n	8012718 <xQueueGenericSend+0x5c>
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	627b      	str	r3, [r7, #36]	; 0x24
 8012716:	e7fe      	b.n	8012716 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2b02      	cmp	r3, #2
 801271c:	d103      	bne.n	8012726 <xQueueGenericSend+0x6a>
 801271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012722:	2b01      	cmp	r3, #1
 8012724:	d101      	bne.n	801272a <xQueueGenericSend+0x6e>
 8012726:	2301      	movs	r3, #1
 8012728:	e000      	b.n	801272c <xQueueGenericSend+0x70>
 801272a:	2300      	movs	r3, #0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d109      	bne.n	8012744 <xQueueGenericSend+0x88>
 8012730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012734:	f383 8811 	msr	BASEPRI, r3
 8012738:	f3bf 8f6f 	isb	sy
 801273c:	f3bf 8f4f 	dsb	sy
 8012740:	623b      	str	r3, [r7, #32]
 8012742:	e7fe      	b.n	8012742 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012744:	f001 fb14 	bl	8013d70 <xTaskGetSchedulerState>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d102      	bne.n	8012754 <xQueueGenericSend+0x98>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d101      	bne.n	8012758 <xQueueGenericSend+0x9c>
 8012754:	2301      	movs	r3, #1
 8012756:	e000      	b.n	801275a <xQueueGenericSend+0x9e>
 8012758:	2300      	movs	r3, #0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d109      	bne.n	8012772 <xQueueGenericSend+0xb6>
 801275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	61fb      	str	r3, [r7, #28]
 8012770:	e7fe      	b.n	8012770 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012772:	f002 f823 	bl	80147bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801277e:	429a      	cmp	r2, r3
 8012780:	d302      	bcc.n	8012788 <xQueueGenericSend+0xcc>
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	2b02      	cmp	r3, #2
 8012786:	d129      	bne.n	80127dc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012788:	683a      	ldr	r2, [r7, #0]
 801278a:	68b9      	ldr	r1, [r7, #8]
 801278c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801278e:	f000 fc26 	bl	8012fde <prvCopyDataToQueue>
 8012792:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012798:	2b00      	cmp	r3, #0
 801279a:	d010      	beq.n	80127be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279e:	3324      	adds	r3, #36	; 0x24
 80127a0:	4618      	mov	r0, r3
 80127a2:	f001 f929 	bl	80139f8 <xTaskRemoveFromEventList>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d013      	beq.n	80127d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80127ac:	4b3f      	ldr	r3, [pc, #252]	; (80128ac <xQueueGenericSend+0x1f0>)
 80127ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	f3bf 8f4f 	dsb	sy
 80127b8:	f3bf 8f6f 	isb	sy
 80127bc:	e00a      	b.n	80127d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80127be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d007      	beq.n	80127d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80127c4:	4b39      	ldr	r3, [pc, #228]	; (80128ac <xQueueGenericSend+0x1f0>)
 80127c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ca:	601a      	str	r2, [r3, #0]
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80127d4:	f002 f820 	bl	8014818 <vPortExitCritical>
				return pdPASS;
 80127d8:	2301      	movs	r3, #1
 80127da:	e063      	b.n	80128a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d103      	bne.n	80127ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80127e2:	f002 f819 	bl	8014818 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80127e6:	2300      	movs	r3, #0
 80127e8:	e05c      	b.n	80128a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80127ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d106      	bne.n	80127fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80127f0:	f107 0314 	add.w	r3, r7, #20
 80127f4:	4618      	mov	r0, r3
 80127f6:	f001 f961 	bl	8013abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127fa:	2301      	movs	r3, #1
 80127fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80127fe:	f002 f80b 	bl	8014818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012802:	f000 ff15 	bl	8013630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012806:	f001 ffd9 	bl	80147bc <vPortEnterCritical>
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012810:	b25b      	sxtb	r3, r3
 8012812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012816:	d103      	bne.n	8012820 <xQueueGenericSend+0x164>
 8012818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281a:	2200      	movs	r2, #0
 801281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012826:	b25b      	sxtb	r3, r3
 8012828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801282c:	d103      	bne.n	8012836 <xQueueGenericSend+0x17a>
 801282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012830:	2200      	movs	r2, #0
 8012832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012836:	f001 ffef 	bl	8014818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801283a:	1d3a      	adds	r2, r7, #4
 801283c:	f107 0314 	add.w	r3, r7, #20
 8012840:	4611      	mov	r1, r2
 8012842:	4618      	mov	r0, r3
 8012844:	f001 f950 	bl	8013ae8 <xTaskCheckForTimeOut>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d124      	bne.n	8012898 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801284e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012850:	f000 fcbd 	bl	80131ce <prvIsQueueFull>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d018      	beq.n	801288c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	3310      	adds	r3, #16
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	4611      	mov	r1, r2
 8012862:	4618      	mov	r0, r3
 8012864:	f001 f8a4 	bl	80139b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801286a:	f000 fc48 	bl	80130fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801286e:	f000 feed 	bl	801364c <xTaskResumeAll>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	f47f af7c 	bne.w	8012772 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801287a:	4b0c      	ldr	r3, [pc, #48]	; (80128ac <xQueueGenericSend+0x1f0>)
 801287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012880:	601a      	str	r2, [r3, #0]
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	e772      	b.n	8012772 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801288c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801288e:	f000 fc36 	bl	80130fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012892:	f000 fedb 	bl	801364c <xTaskResumeAll>
 8012896:	e76c      	b.n	8012772 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801289a:	f000 fc30 	bl	80130fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801289e:	f000 fed5 	bl	801364c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80128a2:	2300      	movs	r3, #0
		}
	}
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3738      	adds	r7, #56	; 0x38
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	e000ed04 	.word	0xe000ed04

080128b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b08e      	sub	sp, #56	; 0x38
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	60b9      	str	r1, [r7, #8]
 80128ba:	607a      	str	r2, [r7, #4]
 80128bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d109      	bne.n	80128dc <xQueueGenericSendFromISR+0x2c>
 80128c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128cc:	f383 8811 	msr	BASEPRI, r3
 80128d0:	f3bf 8f6f 	isb	sy
 80128d4:	f3bf 8f4f 	dsb	sy
 80128d8:	627b      	str	r3, [r7, #36]	; 0x24
 80128da:	e7fe      	b.n	80128da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d103      	bne.n	80128ea <xQueueGenericSendFromISR+0x3a>
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d101      	bne.n	80128ee <xQueueGenericSendFromISR+0x3e>
 80128ea:	2301      	movs	r3, #1
 80128ec:	e000      	b.n	80128f0 <xQueueGenericSendFromISR+0x40>
 80128ee:	2300      	movs	r3, #0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d109      	bne.n	8012908 <xQueueGenericSendFromISR+0x58>
 80128f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	623b      	str	r3, [r7, #32]
 8012906:	e7fe      	b.n	8012906 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b02      	cmp	r3, #2
 801290c:	d103      	bne.n	8012916 <xQueueGenericSendFromISR+0x66>
 801290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012912:	2b01      	cmp	r3, #1
 8012914:	d101      	bne.n	801291a <xQueueGenericSendFromISR+0x6a>
 8012916:	2301      	movs	r3, #1
 8012918:	e000      	b.n	801291c <xQueueGenericSendFromISR+0x6c>
 801291a:	2300      	movs	r3, #0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d109      	bne.n	8012934 <xQueueGenericSendFromISR+0x84>
 8012920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012924:	f383 8811 	msr	BASEPRI, r3
 8012928:	f3bf 8f6f 	isb	sy
 801292c:	f3bf 8f4f 	dsb	sy
 8012930:	61fb      	str	r3, [r7, #28]
 8012932:	e7fe      	b.n	8012932 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012934:	f002 f81e 	bl	8014974 <vPortValidateInterruptPriority>
	__asm volatile
 8012938:	f3ef 8211 	mrs	r2, BASEPRI
 801293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	61ba      	str	r2, [r7, #24]
 801294e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012950:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012952:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801295c:	429a      	cmp	r2, r3
 801295e:	d302      	bcc.n	8012966 <xQueueGenericSendFromISR+0xb6>
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	2b02      	cmp	r3, #2
 8012964:	d12c      	bne.n	80129c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801296c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012970:	683a      	ldr	r2, [r7, #0]
 8012972:	68b9      	ldr	r1, [r7, #8]
 8012974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012976:	f000 fb32 	bl	8012fde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801297a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012982:	d112      	bne.n	80129aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012988:	2b00      	cmp	r3, #0
 801298a:	d016      	beq.n	80129ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298e:	3324      	adds	r3, #36	; 0x24
 8012990:	4618      	mov	r0, r3
 8012992:	f001 f831 	bl	80139f8 <xTaskRemoveFromEventList>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00e      	beq.n	80129ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d00b      	beq.n	80129ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	601a      	str	r2, [r3, #0]
 80129a8:	e007      	b.n	80129ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80129aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80129ae:	3301      	adds	r3, #1
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	b25a      	sxtb	r2, r3
 80129b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80129ba:	2301      	movs	r3, #1
 80129bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80129be:	e001      	b.n	80129c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80129c0:	2300      	movs	r3, #0
 80129c2:	637b      	str	r3, [r7, #52]	; 0x34
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3738      	adds	r7, #56	; 0x38
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b08e      	sub	sp, #56	; 0x38
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d109      	bne.n	8012a00 <xQueueGiveFromISR+0x28>
	__asm volatile
 80129ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f0:	f383 8811 	msr	BASEPRI, r3
 80129f4:	f3bf 8f6f 	isb	sy
 80129f8:	f3bf 8f4f 	dsb	sy
 80129fc:	623b      	str	r3, [r7, #32]
 80129fe:	e7fe      	b.n	80129fe <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d009      	beq.n	8012a1c <xQueueGiveFromISR+0x44>
 8012a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0c:	f383 8811 	msr	BASEPRI, r3
 8012a10:	f3bf 8f6f 	isb	sy
 8012a14:	f3bf 8f4f 	dsb	sy
 8012a18:	61fb      	str	r3, [r7, #28]
 8012a1a:	e7fe      	b.n	8012a1a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d103      	bne.n	8012a2c <xQueueGiveFromISR+0x54>
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d101      	bne.n	8012a30 <xQueueGiveFromISR+0x58>
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e000      	b.n	8012a32 <xQueueGiveFromISR+0x5a>
 8012a30:	2300      	movs	r3, #0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d109      	bne.n	8012a4a <xQueueGiveFromISR+0x72>
 8012a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3a:	f383 8811 	msr	BASEPRI, r3
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	61bb      	str	r3, [r7, #24]
 8012a48:	e7fe      	b.n	8012a48 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a4a:	f001 ff93 	bl	8014974 <vPortValidateInterruptPriority>
	__asm volatile
 8012a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8012a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a56:	f383 8811 	msr	BASEPRI, r3
 8012a5a:	f3bf 8f6f 	isb	sy
 8012a5e:	f3bf 8f4f 	dsb	sy
 8012a62:	617a      	str	r2, [r7, #20]
 8012a64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012a66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d22b      	bcs.n	8012ad2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a94:	d112      	bne.n	8012abc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d016      	beq.n	8012acc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	3324      	adds	r3, #36	; 0x24
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f000 ffa8 	bl	80139f8 <xTaskRemoveFromEventList>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00e      	beq.n	8012acc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00b      	beq.n	8012acc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	601a      	str	r2, [r3, #0]
 8012aba:	e007      	b.n	8012acc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	b25a      	sxtb	r2, r3
 8012ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012acc:	2301      	movs	r3, #1
 8012ace:	637b      	str	r3, [r7, #52]	; 0x34
 8012ad0:	e001      	b.n	8012ad6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3738      	adds	r7, #56	; 0x38
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
	...

08012aec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08c      	sub	sp, #48	; 0x30
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012af8:	2300      	movs	r3, #0
 8012afa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d109      	bne.n	8012b1a <xQueueReceive+0x2e>
	__asm volatile
 8012b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0a:	f383 8811 	msr	BASEPRI, r3
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	623b      	str	r3, [r7, #32]
 8012b18:	e7fe      	b.n	8012b18 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d103      	bne.n	8012b28 <xQueueReceive+0x3c>
 8012b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d101      	bne.n	8012b2c <xQueueReceive+0x40>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e000      	b.n	8012b2e <xQueueReceive+0x42>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d109      	bne.n	8012b46 <xQueueReceive+0x5a>
 8012b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b36:	f383 8811 	msr	BASEPRI, r3
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	f3bf 8f4f 	dsb	sy
 8012b42:	61fb      	str	r3, [r7, #28]
 8012b44:	e7fe      	b.n	8012b44 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b46:	f001 f913 	bl	8013d70 <xTaskGetSchedulerState>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d102      	bne.n	8012b56 <xQueueReceive+0x6a>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <xQueueReceive+0x6e>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <xQueueReceive+0x70>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <xQueueReceive+0x88>
 8012b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b64:	f383 8811 	msr	BASEPRI, r3
 8012b68:	f3bf 8f6f 	isb	sy
 8012b6c:	f3bf 8f4f 	dsb	sy
 8012b70:	61bb      	str	r3, [r7, #24]
 8012b72:	e7fe      	b.n	8012b72 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b74:	f001 fe22 	bl	80147bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b7c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d01f      	beq.n	8012bc4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b88:	f000 fa93 	bl	80130b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	1e5a      	subs	r2, r3, #1
 8012b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b92:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	691b      	ldr	r3, [r3, #16]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00f      	beq.n	8012bbc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9e:	3310      	adds	r3, #16
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f000 ff29 	bl	80139f8 <xTaskRemoveFromEventList>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d007      	beq.n	8012bbc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bac:	4b3c      	ldr	r3, [pc, #240]	; (8012ca0 <xQueueReceive+0x1b4>)
 8012bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012bbc:	f001 fe2c 	bl	8014818 <vPortExitCritical>
				return pdPASS;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	e069      	b.n	8012c98 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d103      	bne.n	8012bd2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bca:	f001 fe25 	bl	8014818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e062      	b.n	8012c98 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d106      	bne.n	8012be6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bd8:	f107 0310 	add.w	r3, r7, #16
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f000 ff6d 	bl	8013abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012be2:	2301      	movs	r3, #1
 8012be4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012be6:	f001 fe17 	bl	8014818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bea:	f000 fd21 	bl	8013630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bee:	f001 fde5 	bl	80147bc <vPortEnterCritical>
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bf8:	b25b      	sxtb	r3, r3
 8012bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfe:	d103      	bne.n	8012c08 <xQueueReceive+0x11c>
 8012c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c02:	2200      	movs	r2, #0
 8012c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c0e:	b25b      	sxtb	r3, r3
 8012c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c14:	d103      	bne.n	8012c1e <xQueueReceive+0x132>
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	2200      	movs	r2, #0
 8012c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c1e:	f001 fdfb 	bl	8014818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c22:	1d3a      	adds	r2, r7, #4
 8012c24:	f107 0310 	add.w	r3, r7, #16
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f000 ff5c 	bl	8013ae8 <xTaskCheckForTimeOut>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d123      	bne.n	8012c7e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c38:	f000 fab3 	bl	80131a2 <prvIsQueueEmpty>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d017      	beq.n	8012c72 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c44:	3324      	adds	r3, #36	; 0x24
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	4611      	mov	r1, r2
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 feb0 	bl	80139b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c52:	f000 fa54 	bl	80130fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c56:	f000 fcf9 	bl	801364c <xTaskResumeAll>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d189      	bne.n	8012b74 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012c60:	4b0f      	ldr	r3, [pc, #60]	; (8012ca0 <xQueueReceive+0x1b4>)
 8012c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c66:	601a      	str	r2, [r3, #0]
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	e780      	b.n	8012b74 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c74:	f000 fa43 	bl	80130fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c78:	f000 fce8 	bl	801364c <xTaskResumeAll>
 8012c7c:	e77a      	b.n	8012b74 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c80:	f000 fa3d 	bl	80130fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c84:	f000 fce2 	bl	801364c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c8a:	f000 fa8a 	bl	80131a2 <prvIsQueueEmpty>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	f43f af6f 	beq.w	8012b74 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3730      	adds	r7, #48	; 0x30
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	e000ed04 	.word	0xe000ed04

08012ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b08e      	sub	sp, #56	; 0x38
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d109      	bne.n	8012cd4 <xQueueSemaphoreTake+0x30>
 8012cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc4:	f383 8811 	msr	BASEPRI, r3
 8012cc8:	f3bf 8f6f 	isb	sy
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	623b      	str	r3, [r7, #32]
 8012cd2:	e7fe      	b.n	8012cd2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d009      	beq.n	8012cf0 <xQueueSemaphoreTake+0x4c>
 8012cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	61fb      	str	r3, [r7, #28]
 8012cee:	e7fe      	b.n	8012cee <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012cf0:	f001 f83e 	bl	8013d70 <xTaskGetSchedulerState>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d102      	bne.n	8012d00 <xQueueSemaphoreTake+0x5c>
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <xQueueSemaphoreTake+0x60>
 8012d00:	2301      	movs	r3, #1
 8012d02:	e000      	b.n	8012d06 <xQueueSemaphoreTake+0x62>
 8012d04:	2300      	movs	r3, #0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d109      	bne.n	8012d1e <xQueueSemaphoreTake+0x7a>
 8012d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0e:	f383 8811 	msr	BASEPRI, r3
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	f3bf 8f4f 	dsb	sy
 8012d1a:	61bb      	str	r3, [r7, #24]
 8012d1c:	e7fe      	b.n	8012d1c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d1e:	f001 fd4d 	bl	80147bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d26:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d024      	beq.n	8012d78 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d30:	1e5a      	subs	r2, r3, #1
 8012d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d34:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d104      	bne.n	8012d48 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012d3e:	f001 f9dd 	bl	80140fc <pvTaskIncrementMutexHeldCount>
 8012d42:	4602      	mov	r2, r0
 8012d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d46:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4a:	691b      	ldr	r3, [r3, #16]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00f      	beq.n	8012d70 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d52:	3310      	adds	r3, #16
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 fe4f 	bl	80139f8 <xTaskRemoveFromEventList>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d007      	beq.n	8012d70 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012d60:	4b53      	ldr	r3, [pc, #332]	; (8012eb0 <xQueueSemaphoreTake+0x20c>)
 8012d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d66:	601a      	str	r2, [r3, #0]
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012d70:	f001 fd52 	bl	8014818 <vPortExitCritical>
				return pdPASS;
 8012d74:	2301      	movs	r3, #1
 8012d76:	e096      	b.n	8012ea6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d110      	bne.n	8012da0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d009      	beq.n	8012d98 <xQueueSemaphoreTake+0xf4>
 8012d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	617b      	str	r3, [r7, #20]
 8012d96:	e7fe      	b.n	8012d96 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012d98:	f001 fd3e 	bl	8014818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	e082      	b.n	8012ea6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012da6:	f107 030c 	add.w	r3, r7, #12
 8012daa:	4618      	mov	r0, r3
 8012dac:	f000 fe86 	bl	8013abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012db0:	2301      	movs	r3, #1
 8012db2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012db4:	f001 fd30 	bl	8014818 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012db8:	f000 fc3a 	bl	8013630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012dbc:	f001 fcfe 	bl	80147bc <vPortEnterCritical>
 8012dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012dc6:	b25b      	sxtb	r3, r3
 8012dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dcc:	d103      	bne.n	8012dd6 <xQueueSemaphoreTake+0x132>
 8012dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ddc:	b25b      	sxtb	r3, r3
 8012dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012de2:	d103      	bne.n	8012dec <xQueueSemaphoreTake+0x148>
 8012de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de6:	2200      	movs	r2, #0
 8012de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012dec:	f001 fd14 	bl	8014818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012df0:	463a      	mov	r2, r7
 8012df2:	f107 030c 	add.w	r3, r7, #12
 8012df6:	4611      	mov	r1, r2
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f000 fe75 	bl	8013ae8 <xTaskCheckForTimeOut>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d132      	bne.n	8012e6a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e06:	f000 f9cc 	bl	80131a2 <prvIsQueueEmpty>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d026      	beq.n	8012e5e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d109      	bne.n	8012e2c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012e18:	f001 fcd0 	bl	80147bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f000 ffc3 	bl	8013dac <xTaskPriorityInherit>
 8012e26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012e28:	f001 fcf6 	bl	8014818 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2e:	3324      	adds	r3, #36	; 0x24
 8012e30:	683a      	ldr	r2, [r7, #0]
 8012e32:	4611      	mov	r1, r2
 8012e34:	4618      	mov	r0, r3
 8012e36:	f000 fdbb 	bl	80139b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e3c:	f000 f95f 	bl	80130fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e40:	f000 fc04 	bl	801364c <xTaskResumeAll>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f47f af69 	bne.w	8012d1e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012e4c:	4b18      	ldr	r3, [pc, #96]	; (8012eb0 <xQueueSemaphoreTake+0x20c>)
 8012e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e52:	601a      	str	r2, [r3, #0]
 8012e54:	f3bf 8f4f 	dsb	sy
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	e75f      	b.n	8012d1e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e60:	f000 f94d 	bl	80130fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e64:	f000 fbf2 	bl	801364c <xTaskResumeAll>
 8012e68:	e759      	b.n	8012d1e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e6c:	f000 f947 	bl	80130fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e70:	f000 fbec 	bl	801364c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e76:	f000 f994 	bl	80131a2 <prvIsQueueEmpty>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f43f af4e 	beq.w	8012d1e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00d      	beq.n	8012ea4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8012e88:	f001 fc98 	bl	80147bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e8e:	f000 f88e 	bl	8012fae <prvGetDisinheritPriorityAfterTimeout>
 8012e92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f001 f890 	bl	8013fc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012ea0:	f001 fcba 	bl	8014818 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3738      	adds	r7, #56	; 0x38
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	e000ed04 	.word	0xe000ed04

08012eb4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08e      	sub	sp, #56	; 0x38
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d109      	bne.n	8012ede <xQueueReceiveFromISR+0x2a>
 8012eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ece:	f383 8811 	msr	BASEPRI, r3
 8012ed2:	f3bf 8f6f 	isb	sy
 8012ed6:	f3bf 8f4f 	dsb	sy
 8012eda:	623b      	str	r3, [r7, #32]
 8012edc:	e7fe      	b.n	8012edc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d103      	bne.n	8012eec <xQueueReceiveFromISR+0x38>
 8012ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d101      	bne.n	8012ef0 <xQueueReceiveFromISR+0x3c>
 8012eec:	2301      	movs	r3, #1
 8012eee:	e000      	b.n	8012ef2 <xQueueReceiveFromISR+0x3e>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d109      	bne.n	8012f0a <xQueueReceiveFromISR+0x56>
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	f383 8811 	msr	BASEPRI, r3
 8012efe:	f3bf 8f6f 	isb	sy
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	61fb      	str	r3, [r7, #28]
 8012f08:	e7fe      	b.n	8012f08 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f0a:	f001 fd33 	bl	8014974 <vPortValidateInterruptPriority>
	__asm volatile
 8012f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8012f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	61ba      	str	r2, [r7, #24]
 8012f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d02f      	beq.n	8012f96 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f40:	68b9      	ldr	r1, [r7, #8]
 8012f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f44:	f000 f8b5 	bl	80130b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4a:	1e5a      	subs	r2, r3, #1
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f58:	d112      	bne.n	8012f80 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	691b      	ldr	r3, [r3, #16]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d016      	beq.n	8012f90 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f64:	3310      	adds	r3, #16
 8012f66:	4618      	mov	r0, r3
 8012f68:	f000 fd46 	bl	80139f8 <xTaskRemoveFromEventList>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00e      	beq.n	8012f90 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d00b      	beq.n	8012f90 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	601a      	str	r2, [r3, #0]
 8012f7e:	e007      	b.n	8012f90 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f84:	3301      	adds	r3, #1
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	b25a      	sxtb	r2, r3
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012f90:	2301      	movs	r3, #1
 8012f92:	637b      	str	r3, [r7, #52]	; 0x34
 8012f94:	e001      	b.n	8012f9a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8012f96:	2300      	movs	r3, #0
 8012f98:	637b      	str	r3, [r7, #52]	; 0x34
 8012f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3738      	adds	r7, #56	; 0x38
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012fae:	b480      	push	{r7}
 8012fb0:	b085      	sub	sp, #20
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d006      	beq.n	8012fcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f1c3 0307 	rsb	r3, r3, #7
 8012fc8:	60fb      	str	r3, [r7, #12]
 8012fca:	e001      	b.n	8012fd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr

08012fde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012fde:	b580      	push	{r7, lr}
 8012fe0:	b086      	sub	sp, #24
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	60f8      	str	r0, [r7, #12]
 8012fe6:	60b9      	str	r1, [r7, #8]
 8012fe8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012fea:	2300      	movs	r3, #0
 8012fec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ff2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10d      	bne.n	8013018 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d14d      	bne.n	80130a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	f000 ff55 	bl	8013eb8 <xTaskPriorityDisinherit>
 801300e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2200      	movs	r2, #0
 8013014:	605a      	str	r2, [r3, #4]
 8013016:	e043      	b.n	80130a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d119      	bne.n	8013052 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6898      	ldr	r0, [r3, #8]
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013026:	461a      	mov	r2, r3
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	f002 fc31 	bl	8015890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	689a      	ldr	r2, [r3, #8]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013036:	441a      	add	r2, r3
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	689a      	ldr	r2, [r3, #8]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	429a      	cmp	r2, r3
 8013046:	d32b      	bcc.n	80130a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	609a      	str	r2, [r3, #8]
 8013050:	e026      	b.n	80130a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	68d8      	ldr	r0, [r3, #12]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801305a:	461a      	mov	r2, r3
 801305c:	68b9      	ldr	r1, [r7, #8]
 801305e:	f002 fc17 	bl	8015890 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	68da      	ldr	r2, [r3, #12]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801306a:	425b      	negs	r3, r3
 801306c:	441a      	add	r2, r3
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	68da      	ldr	r2, [r3, #12]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	429a      	cmp	r2, r3
 801307c:	d207      	bcs.n	801308e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	685a      	ldr	r2, [r3, #4]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013086:	425b      	negs	r3, r3
 8013088:	441a      	add	r2, r3
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b02      	cmp	r3, #2
 8013092:	d105      	bne.n	80130a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d002      	beq.n	80130a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	3b01      	subs	r3, #1
 801309e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	1c5a      	adds	r2, r3, #1
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80130a8:	697b      	ldr	r3, [r7, #20]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3718      	adds	r7, #24
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
 80130ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d018      	beq.n	80130f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	68da      	ldr	r2, [r3, #12]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130cc:	441a      	add	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	68da      	ldr	r2, [r3, #12]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d303      	bcc.n	80130e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	68d9      	ldr	r1, [r3, #12]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ee:	461a      	mov	r2, r3
 80130f0:	6838      	ldr	r0, [r7, #0]
 80130f2:	f002 fbcd 	bl	8015890 <memcpy>
	}
}
 80130f6:	bf00      	nop
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80130fe:	b580      	push	{r7, lr}
 8013100:	b084      	sub	sp, #16
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013106:	f001 fb59 	bl	80147bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013110:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013112:	e011      	b.n	8013138 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	2b00      	cmp	r3, #0
 801311a:	d012      	beq.n	8013142 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	3324      	adds	r3, #36	; 0x24
 8013120:	4618      	mov	r0, r3
 8013122:	f000 fc69 	bl	80139f8 <xTaskRemoveFromEventList>
 8013126:	4603      	mov	r3, r0
 8013128:	2b00      	cmp	r3, #0
 801312a:	d001      	beq.n	8013130 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801312c:	f000 fd3c 	bl	8013ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013130:	7bfb      	ldrb	r3, [r7, #15]
 8013132:	3b01      	subs	r3, #1
 8013134:	b2db      	uxtb	r3, r3
 8013136:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801313c:	2b00      	cmp	r3, #0
 801313e:	dce9      	bgt.n	8013114 <prvUnlockQueue+0x16>
 8013140:	e000      	b.n	8013144 <prvUnlockQueue+0x46>
					break;
 8013142:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	22ff      	movs	r2, #255	; 0xff
 8013148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801314c:	f001 fb64 	bl	8014818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013150:	f001 fb34 	bl	80147bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801315a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801315c:	e011      	b.n	8013182 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d012      	beq.n	801318c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	3310      	adds	r3, #16
 801316a:	4618      	mov	r0, r3
 801316c:	f000 fc44 	bl	80139f8 <xTaskRemoveFromEventList>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d001      	beq.n	801317a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013176:	f000 fd17 	bl	8013ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801317a:	7bbb      	ldrb	r3, [r7, #14]
 801317c:	3b01      	subs	r3, #1
 801317e:	b2db      	uxtb	r3, r3
 8013180:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013186:	2b00      	cmp	r3, #0
 8013188:	dce9      	bgt.n	801315e <prvUnlockQueue+0x60>
 801318a:	e000      	b.n	801318e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801318c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	22ff      	movs	r2, #255	; 0xff
 8013192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013196:	f001 fb3f 	bl	8014818 <vPortExitCritical>
}
 801319a:	bf00      	nop
 801319c:	3710      	adds	r7, #16
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}

080131a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80131aa:	f001 fb07 	bl	80147bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d102      	bne.n	80131bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80131b6:	2301      	movs	r3, #1
 80131b8:	60fb      	str	r3, [r7, #12]
 80131ba:	e001      	b.n	80131c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80131bc:	2300      	movs	r3, #0
 80131be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80131c0:	f001 fb2a 	bl	8014818 <vPortExitCritical>

	return xReturn;
 80131c4:	68fb      	ldr	r3, [r7, #12]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b084      	sub	sp, #16
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80131d6:	f001 faf1 	bl	80147bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d102      	bne.n	80131ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80131e6:	2301      	movs	r3, #1
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	e001      	b.n	80131f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80131ec:	2300      	movs	r3, #0
 80131ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80131f0:	f001 fb12 	bl	8014818 <vPortExitCritical>

	return xReturn;
 80131f4:	68fb      	ldr	r3, [r7, #12]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b08e      	sub	sp, #56	; 0x38
 8013202:	af04      	add	r7, sp, #16
 8013204:	60f8      	str	r0, [r7, #12]
 8013206:	60b9      	str	r1, [r7, #8]
 8013208:	607a      	str	r2, [r7, #4]
 801320a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320e:	2b00      	cmp	r3, #0
 8013210:	d109      	bne.n	8013226 <xTaskCreateStatic+0x28>
	__asm volatile
 8013212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013216:	f383 8811 	msr	BASEPRI, r3
 801321a:	f3bf 8f6f 	isb	sy
 801321e:	f3bf 8f4f 	dsb	sy
 8013222:	623b      	str	r3, [r7, #32]
 8013224:	e7fe      	b.n	8013224 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013228:	2b00      	cmp	r3, #0
 801322a:	d109      	bne.n	8013240 <xTaskCreateStatic+0x42>
 801322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013230:	f383 8811 	msr	BASEPRI, r3
 8013234:	f3bf 8f6f 	isb	sy
 8013238:	f3bf 8f4f 	dsb	sy
 801323c:	61fb      	str	r3, [r7, #28]
 801323e:	e7fe      	b.n	801323e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013240:	2354      	movs	r3, #84	; 0x54
 8013242:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2b54      	cmp	r3, #84	; 0x54
 8013248:	d009      	beq.n	801325e <xTaskCreateStatic+0x60>
 801324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324e:	f383 8811 	msr	BASEPRI, r3
 8013252:	f3bf 8f6f 	isb	sy
 8013256:	f3bf 8f4f 	dsb	sy
 801325a:	61bb      	str	r3, [r7, #24]
 801325c:	e7fe      	b.n	801325c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013260:	2b00      	cmp	r3, #0
 8013262:	d01e      	beq.n	80132a2 <xTaskCreateStatic+0xa4>
 8013264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013266:	2b00      	cmp	r3, #0
 8013268:	d01b      	beq.n	80132a2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013272:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013276:	2202      	movs	r2, #2
 8013278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801327c:	2300      	movs	r3, #0
 801327e:	9303      	str	r3, [sp, #12]
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013282:	9302      	str	r3, [sp, #8]
 8013284:	f107 0314 	add.w	r3, r7, #20
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	68b9      	ldr	r1, [r7, #8]
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f000 f850 	bl	801333a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801329a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801329c:	f000 f8cc 	bl	8013438 <prvAddNewTaskToReadyList>
 80132a0:	e001      	b.n	80132a6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80132a2:	2300      	movs	r3, #0
 80132a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80132a6:	697b      	ldr	r3, [r7, #20]
	}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3728      	adds	r7, #40	; 0x28
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b08c      	sub	sp, #48	; 0x30
 80132b4:	af04      	add	r7, sp, #16
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	603b      	str	r3, [r7, #0]
 80132bc:	4613      	mov	r3, r2
 80132be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132c0:	88fb      	ldrh	r3, [r7, #6]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	4618      	mov	r0, r3
 80132c6:	f001 fb93 	bl	80149f0 <pvPortMalloc>
 80132ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00e      	beq.n	80132f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80132d2:	2054      	movs	r0, #84	; 0x54
 80132d4:	f001 fb8c 	bl	80149f0 <pvPortMalloc>
 80132d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80132da:	69fb      	ldr	r3, [r7, #28]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d003      	beq.n	80132e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	697a      	ldr	r2, [r7, #20]
 80132e4:	631a      	str	r2, [r3, #48]	; 0x30
 80132e6:	e005      	b.n	80132f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80132e8:	6978      	ldr	r0, [r7, #20]
 80132ea:	f001 fc43 	bl	8014b74 <vPortFree>
 80132ee:	e001      	b.n	80132f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80132f0:	2300      	movs	r3, #0
 80132f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d017      	beq.n	801332a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	2200      	movs	r2, #0
 80132fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013302:	88fa      	ldrh	r2, [r7, #6]
 8013304:	2300      	movs	r3, #0
 8013306:	9303      	str	r3, [sp, #12]
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	9302      	str	r3, [sp, #8]
 801330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330e:	9301      	str	r3, [sp, #4]
 8013310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f000 f80e 	bl	801333a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801331e:	69f8      	ldr	r0, [r7, #28]
 8013320:	f000 f88a 	bl	8013438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013324:	2301      	movs	r3, #1
 8013326:	61bb      	str	r3, [r7, #24]
 8013328:	e002      	b.n	8013330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801332a:	f04f 33ff 	mov.w	r3, #4294967295
 801332e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013330:	69bb      	ldr	r3, [r7, #24]
	}
 8013332:	4618      	mov	r0, r3
 8013334:	3720      	adds	r7, #32
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b088      	sub	sp, #32
 801333e:	af00      	add	r7, sp, #0
 8013340:	60f8      	str	r0, [r7, #12]
 8013342:	60b9      	str	r1, [r7, #8]
 8013344:	607a      	str	r2, [r7, #4]
 8013346:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013352:	3b01      	subs	r3, #1
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	4413      	add	r3, r2
 8013358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	f023 0307 	bic.w	r3, r3, #7
 8013360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	f003 0307 	and.w	r3, r3, #7
 8013368:	2b00      	cmp	r3, #0
 801336a:	d009      	beq.n	8013380 <prvInitialiseNewTask+0x46>
 801336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	617b      	str	r3, [r7, #20]
 801337e:	e7fe      	b.n	801337e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013380:	2300      	movs	r3, #0
 8013382:	61fb      	str	r3, [r7, #28]
 8013384:	e012      	b.n	80133ac <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013386:	68ba      	ldr	r2, [r7, #8]
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	4413      	add	r3, r2
 801338c:	7819      	ldrb	r1, [r3, #0]
 801338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	4413      	add	r3, r2
 8013394:	3334      	adds	r3, #52	; 0x34
 8013396:	460a      	mov	r2, r1
 8013398:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801339a:	68ba      	ldr	r2, [r7, #8]
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	4413      	add	r3, r2
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d006      	beq.n	80133b4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	3301      	adds	r3, #1
 80133aa:	61fb      	str	r3, [r7, #28]
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	2b0f      	cmp	r3, #15
 80133b0:	d9e9      	bls.n	8013386 <prvInitialiseNewTask+0x4c>
 80133b2:	e000      	b.n	80133b6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80133b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80133b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b8:	2200      	movs	r2, #0
 80133ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	2b06      	cmp	r3, #6
 80133c2:	d901      	bls.n	80133c8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80133c4:	2306      	movs	r3, #6
 80133c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80133c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80133ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80133d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d6:	2200      	movs	r2, #0
 80133d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80133da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133dc:	3304      	adds	r3, #4
 80133de:	4618      	mov	r0, r3
 80133e0:	f7fe ff53 	bl	801228a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	3318      	adds	r3, #24
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fe ff4e 	bl	801228a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f6:	f1c3 0207 	rsb	r2, r3, #7
 80133fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80133fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013406:	2200      	movs	r2, #0
 8013408:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340c:	2200      	movs	r2, #0
 801340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	68f9      	ldr	r1, [r7, #12]
 8013416:	69b8      	ldr	r0, [r7, #24]
 8013418:	f001 f8aa 	bl	8014570 <pxPortInitialiseStack>
 801341c:	4602      	mov	r2, r0
 801341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013420:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801342c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801342e:	bf00      	nop
 8013430:	3720      	adds	r7, #32
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013440:	f001 f9bc 	bl	80147bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013444:	4b2a      	ldr	r3, [pc, #168]	; (80134f0 <prvAddNewTaskToReadyList+0xb8>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	3301      	adds	r3, #1
 801344a:	4a29      	ldr	r2, [pc, #164]	; (80134f0 <prvAddNewTaskToReadyList+0xb8>)
 801344c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801344e:	4b29      	ldr	r3, [pc, #164]	; (80134f4 <prvAddNewTaskToReadyList+0xbc>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d109      	bne.n	801346a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013456:	4a27      	ldr	r2, [pc, #156]	; (80134f4 <prvAddNewTaskToReadyList+0xbc>)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801345c:	4b24      	ldr	r3, [pc, #144]	; (80134f0 <prvAddNewTaskToReadyList+0xb8>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b01      	cmp	r3, #1
 8013462:	d110      	bne.n	8013486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013464:	f000 fbc4 	bl	8013bf0 <prvInitialiseTaskLists>
 8013468:	e00d      	b.n	8013486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801346a:	4b23      	ldr	r3, [pc, #140]	; (80134f8 <prvAddNewTaskToReadyList+0xc0>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d109      	bne.n	8013486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013472:	4b20      	ldr	r3, [pc, #128]	; (80134f4 <prvAddNewTaskToReadyList+0xbc>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	429a      	cmp	r2, r3
 801347e:	d802      	bhi.n	8013486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013480:	4a1c      	ldr	r2, [pc, #112]	; (80134f4 <prvAddNewTaskToReadyList+0xbc>)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013486:	4b1d      	ldr	r3, [pc, #116]	; (80134fc <prvAddNewTaskToReadyList+0xc4>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	3301      	adds	r3, #1
 801348c:	4a1b      	ldr	r2, [pc, #108]	; (80134fc <prvAddNewTaskToReadyList+0xc4>)
 801348e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013494:	2201      	movs	r2, #1
 8013496:	409a      	lsls	r2, r3
 8013498:	4b19      	ldr	r3, [pc, #100]	; (8013500 <prvAddNewTaskToReadyList+0xc8>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4313      	orrs	r3, r2
 801349e:	4a18      	ldr	r2, [pc, #96]	; (8013500 <prvAddNewTaskToReadyList+0xc8>)
 80134a0:	6013      	str	r3, [r2, #0]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a6:	4613      	mov	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4413      	add	r3, r2
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	4a15      	ldr	r2, [pc, #84]	; (8013504 <prvAddNewTaskToReadyList+0xcc>)
 80134b0:	441a      	add	r2, r3
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4619      	mov	r1, r3
 80134b8:	4610      	mov	r0, r2
 80134ba:	f7fe fef3 	bl	80122a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80134be:	f001 f9ab 	bl	8014818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80134c2:	4b0d      	ldr	r3, [pc, #52]	; (80134f8 <prvAddNewTaskToReadyList+0xc0>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d00e      	beq.n	80134e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80134ca:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <prvAddNewTaskToReadyList+0xbc>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d207      	bcs.n	80134e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80134d8:	4b0b      	ldr	r3, [pc, #44]	; (8013508 <prvAddNewTaskToReadyList+0xd0>)
 80134da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134de:	601a      	str	r2, [r3, #0]
 80134e0:	f3bf 8f4f 	dsb	sy
 80134e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134e8:	bf00      	nop
 80134ea:	3708      	adds	r7, #8
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	200015b8 	.word	0x200015b8
 80134f4:	200014b8 	.word	0x200014b8
 80134f8:	200015c4 	.word	0x200015c4
 80134fc:	200015d4 	.word	0x200015d4
 8013500:	200015c0 	.word	0x200015c0
 8013504:	200014bc 	.word	0x200014bc
 8013508:	e000ed04 	.word	0xe000ed04

0801350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013514:	2300      	movs	r3, #0
 8013516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d016      	beq.n	801354c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801351e:	4b13      	ldr	r3, [pc, #76]	; (801356c <vTaskDelay+0x60>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d009      	beq.n	801353a <vTaskDelay+0x2e>
 8013526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352a:	f383 8811 	msr	BASEPRI, r3
 801352e:	f3bf 8f6f 	isb	sy
 8013532:	f3bf 8f4f 	dsb	sy
 8013536:	60bb      	str	r3, [r7, #8]
 8013538:	e7fe      	b.n	8013538 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801353a:	f000 f879 	bl	8013630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801353e:	2100      	movs	r1, #0
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 ffaf 	bl	80144a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013546:	f000 f881 	bl	801364c <xTaskResumeAll>
 801354a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d107      	bne.n	8013562 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013552:	4b07      	ldr	r3, [pc, #28]	; (8013570 <vTaskDelay+0x64>)
 8013554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013558:	601a      	str	r2, [r3, #0]
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013562:	bf00      	nop
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	200015e0 	.word	0x200015e0
 8013570:	e000ed04 	.word	0xe000ed04

08013574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b08a      	sub	sp, #40	; 0x28
 8013578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801357a:	2300      	movs	r3, #0
 801357c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801357e:	2300      	movs	r3, #0
 8013580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013582:	463a      	mov	r2, r7
 8013584:	1d39      	adds	r1, r7, #4
 8013586:	f107 0308 	add.w	r3, r7, #8
 801358a:	4618      	mov	r0, r3
 801358c:	f7ee fe90 	bl	80022b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013590:	6839      	ldr	r1, [r7, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	68ba      	ldr	r2, [r7, #8]
 8013596:	9202      	str	r2, [sp, #8]
 8013598:	9301      	str	r3, [sp, #4]
 801359a:	2300      	movs	r3, #0
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	2300      	movs	r3, #0
 80135a0:	460a      	mov	r2, r1
 80135a2:	491d      	ldr	r1, [pc, #116]	; (8013618 <vTaskStartScheduler+0xa4>)
 80135a4:	481d      	ldr	r0, [pc, #116]	; (801361c <vTaskStartScheduler+0xa8>)
 80135a6:	f7ff fe2a 	bl	80131fe <xTaskCreateStatic>
 80135aa:	4602      	mov	r2, r0
 80135ac:	4b1c      	ldr	r3, [pc, #112]	; (8013620 <vTaskStartScheduler+0xac>)
 80135ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80135b0:	4b1b      	ldr	r3, [pc, #108]	; (8013620 <vTaskStartScheduler+0xac>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d002      	beq.n	80135be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80135b8:	2301      	movs	r3, #1
 80135ba:	617b      	str	r3, [r7, #20]
 80135bc:	e001      	b.n	80135c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80135be:	2300      	movs	r3, #0
 80135c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d115      	bne.n	80135f4 <vTaskStartScheduler+0x80>
 80135c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80135da:	4b12      	ldr	r3, [pc, #72]	; (8013624 <vTaskStartScheduler+0xb0>)
 80135dc:	f04f 32ff 	mov.w	r2, #4294967295
 80135e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80135e2:	4b11      	ldr	r3, [pc, #68]	; (8013628 <vTaskStartScheduler+0xb4>)
 80135e4:	2201      	movs	r2, #1
 80135e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80135e8:	4b10      	ldr	r3, [pc, #64]	; (801362c <vTaskStartScheduler+0xb8>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80135ee:	f001 f847 	bl	8014680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80135f2:	e00d      	b.n	8013610 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fa:	d109      	bne.n	8013610 <vTaskStartScheduler+0x9c>
 80135fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013600:	f383 8811 	msr	BASEPRI, r3
 8013604:	f3bf 8f6f 	isb	sy
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	60fb      	str	r3, [r7, #12]
 801360e:	e7fe      	b.n	801360e <vTaskStartScheduler+0x9a>
}
 8013610:	bf00      	nop
 8013612:	3718      	adds	r7, #24
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	0801bb6c 	.word	0x0801bb6c
 801361c:	08013bc1 	.word	0x08013bc1
 8013620:	200015dc 	.word	0x200015dc
 8013624:	200015d8 	.word	0x200015d8
 8013628:	200015c4 	.word	0x200015c4
 801362c:	200015bc 	.word	0x200015bc

08013630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013630:	b480      	push	{r7}
 8013632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013634:	4b04      	ldr	r3, [pc, #16]	; (8013648 <vTaskSuspendAll+0x18>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	3301      	adds	r3, #1
 801363a:	4a03      	ldr	r2, [pc, #12]	; (8013648 <vTaskSuspendAll+0x18>)
 801363c:	6013      	str	r3, [r2, #0]
}
 801363e:	bf00      	nop
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	200015e0 	.word	0x200015e0

0801364c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013652:	2300      	movs	r3, #0
 8013654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013656:	2300      	movs	r3, #0
 8013658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801365a:	4b41      	ldr	r3, [pc, #260]	; (8013760 <xTaskResumeAll+0x114>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d109      	bne.n	8013676 <xTaskResumeAll+0x2a>
 8013662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013666:	f383 8811 	msr	BASEPRI, r3
 801366a:	f3bf 8f6f 	isb	sy
 801366e:	f3bf 8f4f 	dsb	sy
 8013672:	603b      	str	r3, [r7, #0]
 8013674:	e7fe      	b.n	8013674 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013676:	f001 f8a1 	bl	80147bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801367a:	4b39      	ldr	r3, [pc, #228]	; (8013760 <xTaskResumeAll+0x114>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	3b01      	subs	r3, #1
 8013680:	4a37      	ldr	r2, [pc, #220]	; (8013760 <xTaskResumeAll+0x114>)
 8013682:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013684:	4b36      	ldr	r3, [pc, #216]	; (8013760 <xTaskResumeAll+0x114>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d161      	bne.n	8013750 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801368c:	4b35      	ldr	r3, [pc, #212]	; (8013764 <xTaskResumeAll+0x118>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d05d      	beq.n	8013750 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013694:	e02e      	b.n	80136f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013696:	4b34      	ldr	r3, [pc, #208]	; (8013768 <xTaskResumeAll+0x11c>)
 8013698:	68db      	ldr	r3, [r3, #12]
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	3318      	adds	r3, #24
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fe fe5b 	bl	801235e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	3304      	adds	r3, #4
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7fe fe56 	bl	801235e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b6:	2201      	movs	r2, #1
 80136b8:	409a      	lsls	r2, r3
 80136ba:	4b2c      	ldr	r3, [pc, #176]	; (801376c <xTaskResumeAll+0x120>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	4313      	orrs	r3, r2
 80136c0:	4a2a      	ldr	r2, [pc, #168]	; (801376c <xTaskResumeAll+0x120>)
 80136c2:	6013      	str	r3, [r2, #0]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136c8:	4613      	mov	r3, r2
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	4413      	add	r3, r2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	4a27      	ldr	r2, [pc, #156]	; (8013770 <xTaskResumeAll+0x124>)
 80136d2:	441a      	add	r2, r3
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	3304      	adds	r3, #4
 80136d8:	4619      	mov	r1, r3
 80136da:	4610      	mov	r0, r2
 80136dc:	f7fe fde2 	bl	80122a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136e4:	4b23      	ldr	r3, [pc, #140]	; (8013774 <xTaskResumeAll+0x128>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d302      	bcc.n	80136f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80136ee:	4b22      	ldr	r3, [pc, #136]	; (8013778 <xTaskResumeAll+0x12c>)
 80136f0:	2201      	movs	r2, #1
 80136f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80136f4:	4b1c      	ldr	r3, [pc, #112]	; (8013768 <xTaskResumeAll+0x11c>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1cc      	bne.n	8013696 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013702:	f000 fb0f 	bl	8013d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013706:	4b1d      	ldr	r3, [pc, #116]	; (801377c <xTaskResumeAll+0x130>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d010      	beq.n	8013734 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013712:	f000 f837 	bl	8013784 <xTaskIncrementTick>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d002      	beq.n	8013722 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 801371c:	4b16      	ldr	r3, [pc, #88]	; (8013778 <xTaskResumeAll+0x12c>)
 801371e:	2201      	movs	r2, #1
 8013720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	3b01      	subs	r3, #1
 8013726:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d1f1      	bne.n	8013712 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801372e:	4b13      	ldr	r3, [pc, #76]	; (801377c <xTaskResumeAll+0x130>)
 8013730:	2200      	movs	r2, #0
 8013732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013734:	4b10      	ldr	r3, [pc, #64]	; (8013778 <xTaskResumeAll+0x12c>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d009      	beq.n	8013750 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801373c:	2301      	movs	r3, #1
 801373e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013740:	4b0f      	ldr	r3, [pc, #60]	; (8013780 <xTaskResumeAll+0x134>)
 8013742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013746:	601a      	str	r2, [r3, #0]
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013750:	f001 f862 	bl	8014818 <vPortExitCritical>

	return xAlreadyYielded;
 8013754:	68bb      	ldr	r3, [r7, #8]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3710      	adds	r7, #16
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	200015e0 	.word	0x200015e0
 8013764:	200015b8 	.word	0x200015b8
 8013768:	20001578 	.word	0x20001578
 801376c:	200015c0 	.word	0x200015c0
 8013770:	200014bc 	.word	0x200014bc
 8013774:	200014b8 	.word	0x200014b8
 8013778:	200015cc 	.word	0x200015cc
 801377c:	200015c8 	.word	0x200015c8
 8013780:	e000ed04 	.word	0xe000ed04

08013784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b086      	sub	sp, #24
 8013788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801378a:	2300      	movs	r3, #0
 801378c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801378e:	4b50      	ldr	r3, [pc, #320]	; (80138d0 <xTaskIncrementTick+0x14c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	2b00      	cmp	r3, #0
 8013794:	f040 808c 	bne.w	80138b0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013798:	4b4e      	ldr	r3, [pc, #312]	; (80138d4 <xTaskIncrementTick+0x150>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	3301      	adds	r3, #1
 801379e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80137a0:	4a4c      	ldr	r2, [pc, #304]	; (80138d4 <xTaskIncrementTick+0x150>)
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d11f      	bne.n	80137ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80137ac:	4b4a      	ldr	r3, [pc, #296]	; (80138d8 <xTaskIncrementTick+0x154>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d009      	beq.n	80137ca <xTaskIncrementTick+0x46>
 80137b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ba:	f383 8811 	msr	BASEPRI, r3
 80137be:	f3bf 8f6f 	isb	sy
 80137c2:	f3bf 8f4f 	dsb	sy
 80137c6:	603b      	str	r3, [r7, #0]
 80137c8:	e7fe      	b.n	80137c8 <xTaskIncrementTick+0x44>
 80137ca:	4b43      	ldr	r3, [pc, #268]	; (80138d8 <xTaskIncrementTick+0x154>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	60fb      	str	r3, [r7, #12]
 80137d0:	4b42      	ldr	r3, [pc, #264]	; (80138dc <xTaskIncrementTick+0x158>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	4a40      	ldr	r2, [pc, #256]	; (80138d8 <xTaskIncrementTick+0x154>)
 80137d6:	6013      	str	r3, [r2, #0]
 80137d8:	4a40      	ldr	r2, [pc, #256]	; (80138dc <xTaskIncrementTick+0x158>)
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	6013      	str	r3, [r2, #0]
 80137de:	4b40      	ldr	r3, [pc, #256]	; (80138e0 <xTaskIncrementTick+0x15c>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	3301      	adds	r3, #1
 80137e4:	4a3e      	ldr	r2, [pc, #248]	; (80138e0 <xTaskIncrementTick+0x15c>)
 80137e6:	6013      	str	r3, [r2, #0]
 80137e8:	f000 fa9c 	bl	8013d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80137ec:	4b3d      	ldr	r3, [pc, #244]	; (80138e4 <xTaskIncrementTick+0x160>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	693a      	ldr	r2, [r7, #16]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d34d      	bcc.n	8013892 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80137f6:	4b38      	ldr	r3, [pc, #224]	; (80138d8 <xTaskIncrementTick+0x154>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d101      	bne.n	8013804 <xTaskIncrementTick+0x80>
 8013800:	2301      	movs	r3, #1
 8013802:	e000      	b.n	8013806 <xTaskIncrementTick+0x82>
 8013804:	2300      	movs	r3, #0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d004      	beq.n	8013814 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801380a:	4b36      	ldr	r3, [pc, #216]	; (80138e4 <xTaskIncrementTick+0x160>)
 801380c:	f04f 32ff 	mov.w	r2, #4294967295
 8013810:	601a      	str	r2, [r3, #0]
					break;
 8013812:	e03e      	b.n	8013892 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013814:	4b30      	ldr	r3, [pc, #192]	; (80138d8 <xTaskIncrementTick+0x154>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013824:	693a      	ldr	r2, [r7, #16]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	429a      	cmp	r2, r3
 801382a:	d203      	bcs.n	8013834 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801382c:	4a2d      	ldr	r2, [pc, #180]	; (80138e4 <xTaskIncrementTick+0x160>)
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6013      	str	r3, [r2, #0]
						break;
 8013832:	e02e      	b.n	8013892 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	3304      	adds	r3, #4
 8013838:	4618      	mov	r0, r3
 801383a:	f7fe fd90 	bl	801235e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013842:	2b00      	cmp	r3, #0
 8013844:	d004      	beq.n	8013850 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	3318      	adds	r3, #24
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fd87 	bl	801235e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013854:	2201      	movs	r2, #1
 8013856:	409a      	lsls	r2, r3
 8013858:	4b23      	ldr	r3, [pc, #140]	; (80138e8 <xTaskIncrementTick+0x164>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4313      	orrs	r3, r2
 801385e:	4a22      	ldr	r2, [pc, #136]	; (80138e8 <xTaskIncrementTick+0x164>)
 8013860:	6013      	str	r3, [r2, #0]
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013866:	4613      	mov	r3, r2
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	4413      	add	r3, r2
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	4a1f      	ldr	r2, [pc, #124]	; (80138ec <xTaskIncrementTick+0x168>)
 8013870:	441a      	add	r2, r3
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	3304      	adds	r3, #4
 8013876:	4619      	mov	r1, r3
 8013878:	4610      	mov	r0, r2
 801387a:	f7fe fd13 	bl	80122a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013882:	4b1b      	ldr	r3, [pc, #108]	; (80138f0 <xTaskIncrementTick+0x16c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013888:	429a      	cmp	r2, r3
 801388a:	d3b4      	bcc.n	80137f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801388c:	2301      	movs	r3, #1
 801388e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013890:	e7b1      	b.n	80137f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013892:	4b17      	ldr	r3, [pc, #92]	; (80138f0 <xTaskIncrementTick+0x16c>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013898:	4914      	ldr	r1, [pc, #80]	; (80138ec <xTaskIncrementTick+0x168>)
 801389a:	4613      	mov	r3, r2
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	4413      	add	r3, r2
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	440b      	add	r3, r1
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d907      	bls.n	80138ba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80138aa:	2301      	movs	r3, #1
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	e004      	b.n	80138ba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80138b0:	4b10      	ldr	r3, [pc, #64]	; (80138f4 <xTaskIncrementTick+0x170>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	3301      	adds	r3, #1
 80138b6:	4a0f      	ldr	r2, [pc, #60]	; (80138f4 <xTaskIncrementTick+0x170>)
 80138b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80138ba:	4b0f      	ldr	r3, [pc, #60]	; (80138f8 <xTaskIncrementTick+0x174>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d001      	beq.n	80138c6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80138c2:	2301      	movs	r3, #1
 80138c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80138c6:	697b      	ldr	r3, [r7, #20]
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3718      	adds	r7, #24
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	200015e0 	.word	0x200015e0
 80138d4:	200015bc 	.word	0x200015bc
 80138d8:	20001570 	.word	0x20001570
 80138dc:	20001574 	.word	0x20001574
 80138e0:	200015d0 	.word	0x200015d0
 80138e4:	200015d8 	.word	0x200015d8
 80138e8:	200015c0 	.word	0x200015c0
 80138ec:	200014bc 	.word	0x200014bc
 80138f0:	200014b8 	.word	0x200014b8
 80138f4:	200015c8 	.word	0x200015c8
 80138f8:	200015cc 	.word	0x200015cc

080138fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80138fc:	b480      	push	{r7}
 80138fe:	b087      	sub	sp, #28
 8013900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013902:	4b26      	ldr	r3, [pc, #152]	; (801399c <vTaskSwitchContext+0xa0>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d003      	beq.n	8013912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801390a:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <vTaskSwitchContext+0xa4>)
 801390c:	2201      	movs	r2, #1
 801390e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013910:	e03e      	b.n	8013990 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013912:	4b23      	ldr	r3, [pc, #140]	; (80139a0 <vTaskSwitchContext+0xa4>)
 8013914:	2200      	movs	r2, #0
 8013916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013918:	4b22      	ldr	r3, [pc, #136]	; (80139a4 <vTaskSwitchContext+0xa8>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	fab3 f383 	clz	r3, r3
 8013924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013926:	7afb      	ldrb	r3, [r7, #11]
 8013928:	f1c3 031f 	rsb	r3, r3, #31
 801392c:	617b      	str	r3, [r7, #20]
 801392e:	491e      	ldr	r1, [pc, #120]	; (80139a8 <vTaskSwitchContext+0xac>)
 8013930:	697a      	ldr	r2, [r7, #20]
 8013932:	4613      	mov	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	4413      	add	r3, r2
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	440b      	add	r3, r1
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d109      	bne.n	8013956 <vTaskSwitchContext+0x5a>
	__asm volatile
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	607b      	str	r3, [r7, #4]
 8013954:	e7fe      	b.n	8013954 <vTaskSwitchContext+0x58>
 8013956:	697a      	ldr	r2, [r7, #20]
 8013958:	4613      	mov	r3, r2
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	4413      	add	r3, r2
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	4a11      	ldr	r2, [pc, #68]	; (80139a8 <vTaskSwitchContext+0xac>)
 8013962:	4413      	add	r3, r2
 8013964:	613b      	str	r3, [r7, #16]
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	685a      	ldr	r2, [r3, #4]
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	605a      	str	r2, [r3, #4]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	685a      	ldr	r2, [r3, #4]
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	3308      	adds	r3, #8
 8013978:	429a      	cmp	r2, r3
 801397a:	d104      	bne.n	8013986 <vTaskSwitchContext+0x8a>
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	605a      	str	r2, [r3, #4]
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	4a07      	ldr	r2, [pc, #28]	; (80139ac <vTaskSwitchContext+0xb0>)
 801398e:	6013      	str	r3, [r2, #0]
}
 8013990:	bf00      	nop
 8013992:	371c      	adds	r7, #28
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr
 801399c:	200015e0 	.word	0x200015e0
 80139a0:	200015cc 	.word	0x200015cc
 80139a4:	200015c0 	.word	0x200015c0
 80139a8:	200014bc 	.word	0x200014bc
 80139ac:	200014b8 	.word	0x200014b8

080139b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d109      	bne.n	80139d4 <vTaskPlaceOnEventList+0x24>
 80139c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c4:	f383 8811 	msr	BASEPRI, r3
 80139c8:	f3bf 8f6f 	isb	sy
 80139cc:	f3bf 8f4f 	dsb	sy
 80139d0:	60fb      	str	r3, [r7, #12]
 80139d2:	e7fe      	b.n	80139d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139d4:	4b07      	ldr	r3, [pc, #28]	; (80139f4 <vTaskPlaceOnEventList+0x44>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	3318      	adds	r3, #24
 80139da:	4619      	mov	r1, r3
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7fe fc85 	bl	80122ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80139e2:	2101      	movs	r1, #1
 80139e4:	6838      	ldr	r0, [r7, #0]
 80139e6:	f000 fd5d 	bl	80144a4 <prvAddCurrentTaskToDelayedList>
}
 80139ea:	bf00      	nop
 80139ec:	3710      	adds	r7, #16
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	200014b8 	.word	0x200014b8

080139f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d109      	bne.n	8013a22 <xTaskRemoveFromEventList+0x2a>
 8013a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	60fb      	str	r3, [r7, #12]
 8013a20:	e7fe      	b.n	8013a20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	3318      	adds	r3, #24
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fe fc99 	bl	801235e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a2c:	4b1d      	ldr	r3, [pc, #116]	; (8013aa4 <xTaskRemoveFromEventList+0xac>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d11c      	bne.n	8013a6e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	3304      	adds	r3, #4
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7fe fc90 	bl	801235e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a42:	2201      	movs	r2, #1
 8013a44:	409a      	lsls	r2, r3
 8013a46:	4b18      	ldr	r3, [pc, #96]	; (8013aa8 <xTaskRemoveFromEventList+0xb0>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4313      	orrs	r3, r2
 8013a4c:	4a16      	ldr	r2, [pc, #88]	; (8013aa8 <xTaskRemoveFromEventList+0xb0>)
 8013a4e:	6013      	str	r3, [r2, #0]
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a54:	4613      	mov	r3, r2
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	4413      	add	r3, r2
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4a13      	ldr	r2, [pc, #76]	; (8013aac <xTaskRemoveFromEventList+0xb4>)
 8013a5e:	441a      	add	r2, r3
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	3304      	adds	r3, #4
 8013a64:	4619      	mov	r1, r3
 8013a66:	4610      	mov	r0, r2
 8013a68:	f7fe fc1c 	bl	80122a4 <vListInsertEnd>
 8013a6c:	e005      	b.n	8013a7a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	3318      	adds	r3, #24
 8013a72:	4619      	mov	r1, r3
 8013a74:	480e      	ldr	r0, [pc, #56]	; (8013ab0 <xTaskRemoveFromEventList+0xb8>)
 8013a76:	f7fe fc15 	bl	80122a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a7e:	4b0d      	ldr	r3, [pc, #52]	; (8013ab4 <xTaskRemoveFromEventList+0xbc>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d905      	bls.n	8013a94 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013a8c:	4b0a      	ldr	r3, [pc, #40]	; (8013ab8 <xTaskRemoveFromEventList+0xc0>)
 8013a8e:	2201      	movs	r2, #1
 8013a90:	601a      	str	r2, [r3, #0]
 8013a92:	e001      	b.n	8013a98 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013a94:	2300      	movs	r3, #0
 8013a96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013a98:	697b      	ldr	r3, [r7, #20]
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3718      	adds	r7, #24
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	200015e0 	.word	0x200015e0
 8013aa8:	200015c0 	.word	0x200015c0
 8013aac:	200014bc 	.word	0x200014bc
 8013ab0:	20001578 	.word	0x20001578
 8013ab4:	200014b8 	.word	0x200014b8
 8013ab8:	200015cc 	.word	0x200015cc

08013abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013ac4:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <vTaskInternalSetTimeOutState+0x24>)
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013acc:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <vTaskInternalSetTimeOutState+0x28>)
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	605a      	str	r2, [r3, #4]
}
 8013ad4:	bf00      	nop
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	200015d0 	.word	0x200015d0
 8013ae4:	200015bc 	.word	0x200015bc

08013ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b088      	sub	sp, #32
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d109      	bne.n	8013b0c <xTaskCheckForTimeOut+0x24>
 8013af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afc:	f383 8811 	msr	BASEPRI, r3
 8013b00:	f3bf 8f6f 	isb	sy
 8013b04:	f3bf 8f4f 	dsb	sy
 8013b08:	613b      	str	r3, [r7, #16]
 8013b0a:	e7fe      	b.n	8013b0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <xTaskCheckForTimeOut+0x3e>
 8013b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b16:	f383 8811 	msr	BASEPRI, r3
 8013b1a:	f3bf 8f6f 	isb	sy
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	60fb      	str	r3, [r7, #12]
 8013b24:	e7fe      	b.n	8013b24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013b26:	f000 fe49 	bl	80147bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013b2a:	4b1d      	ldr	r3, [pc, #116]	; (8013ba0 <xTaskCheckForTimeOut+0xb8>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	69ba      	ldr	r2, [r7, #24]
 8013b36:	1ad3      	subs	r3, r2, r3
 8013b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b42:	d102      	bne.n	8013b4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013b44:	2300      	movs	r3, #0
 8013b46:	61fb      	str	r3, [r7, #28]
 8013b48:	e023      	b.n	8013b92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	4b15      	ldr	r3, [pc, #84]	; (8013ba4 <xTaskCheckForTimeOut+0xbc>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d007      	beq.n	8013b66 <xTaskCheckForTimeOut+0x7e>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	69ba      	ldr	r2, [r7, #24]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d302      	bcc.n	8013b66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013b60:	2301      	movs	r3, #1
 8013b62:	61fb      	str	r3, [r7, #28]
 8013b64:	e015      	b.n	8013b92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	697a      	ldr	r2, [r7, #20]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d20b      	bcs.n	8013b88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	681a      	ldr	r2, [r3, #0]
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	1ad2      	subs	r2, r2, r3
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f7ff ff9d 	bl	8013abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013b82:	2300      	movs	r3, #0
 8013b84:	61fb      	str	r3, [r7, #28]
 8013b86:	e004      	b.n	8013b92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013b92:	f000 fe41 	bl	8014818 <vPortExitCritical>

	return xReturn;
 8013b96:	69fb      	ldr	r3, [r7, #28]
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3720      	adds	r7, #32
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	200015bc 	.word	0x200015bc
 8013ba4:	200015d0 	.word	0x200015d0

08013ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013ba8:	b480      	push	{r7}
 8013baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013bac:	4b03      	ldr	r3, [pc, #12]	; (8013bbc <vTaskMissedYield+0x14>)
 8013bae:	2201      	movs	r2, #1
 8013bb0:	601a      	str	r2, [r3, #0]
}
 8013bb2:	bf00      	nop
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	200015cc 	.word	0x200015cc

08013bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013bc8:	f000 f852 	bl	8013c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013bcc:	4b06      	ldr	r3, [pc, #24]	; (8013be8 <prvIdleTask+0x28>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d9f9      	bls.n	8013bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013bd4:	4b05      	ldr	r3, [pc, #20]	; (8013bec <prvIdleTask+0x2c>)
 8013bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bda:	601a      	str	r2, [r3, #0]
 8013bdc:	f3bf 8f4f 	dsb	sy
 8013be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013be4:	e7f0      	b.n	8013bc8 <prvIdleTask+0x8>
 8013be6:	bf00      	nop
 8013be8:	200014bc 	.word	0x200014bc
 8013bec:	e000ed04 	.word	0xe000ed04

08013bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b082      	sub	sp, #8
 8013bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	607b      	str	r3, [r7, #4]
 8013bfa:	e00c      	b.n	8013c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	4613      	mov	r3, r2
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	4413      	add	r3, r2
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	4a12      	ldr	r2, [pc, #72]	; (8013c50 <prvInitialiseTaskLists+0x60>)
 8013c08:	4413      	add	r3, r2
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fb1d 	bl	801224a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	3301      	adds	r3, #1
 8013c14:	607b      	str	r3, [r7, #4]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b06      	cmp	r3, #6
 8013c1a:	d9ef      	bls.n	8013bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c1c:	480d      	ldr	r0, [pc, #52]	; (8013c54 <prvInitialiseTaskLists+0x64>)
 8013c1e:	f7fe fb14 	bl	801224a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c22:	480d      	ldr	r0, [pc, #52]	; (8013c58 <prvInitialiseTaskLists+0x68>)
 8013c24:	f7fe fb11 	bl	801224a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013c28:	480c      	ldr	r0, [pc, #48]	; (8013c5c <prvInitialiseTaskLists+0x6c>)
 8013c2a:	f7fe fb0e 	bl	801224a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013c2e:	480c      	ldr	r0, [pc, #48]	; (8013c60 <prvInitialiseTaskLists+0x70>)
 8013c30:	f7fe fb0b 	bl	801224a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013c34:	480b      	ldr	r0, [pc, #44]	; (8013c64 <prvInitialiseTaskLists+0x74>)
 8013c36:	f7fe fb08 	bl	801224a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013c3a:	4b0b      	ldr	r3, [pc, #44]	; (8013c68 <prvInitialiseTaskLists+0x78>)
 8013c3c:	4a05      	ldr	r2, [pc, #20]	; (8013c54 <prvInitialiseTaskLists+0x64>)
 8013c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013c40:	4b0a      	ldr	r3, [pc, #40]	; (8013c6c <prvInitialiseTaskLists+0x7c>)
 8013c42:	4a05      	ldr	r2, [pc, #20]	; (8013c58 <prvInitialiseTaskLists+0x68>)
 8013c44:	601a      	str	r2, [r3, #0]
}
 8013c46:	bf00      	nop
 8013c48:	3708      	adds	r7, #8
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	200014bc 	.word	0x200014bc
 8013c54:	20001548 	.word	0x20001548
 8013c58:	2000155c 	.word	0x2000155c
 8013c5c:	20001578 	.word	0x20001578
 8013c60:	2000158c 	.word	0x2000158c
 8013c64:	200015a4 	.word	0x200015a4
 8013c68:	20001570 	.word	0x20001570
 8013c6c:	20001574 	.word	0x20001574

08013c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c76:	e019      	b.n	8013cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013c78:	f000 fda0 	bl	80147bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013c7c:	4b0f      	ldr	r3, [pc, #60]	; (8013cbc <prvCheckTasksWaitingTermination+0x4c>)
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3304      	adds	r3, #4
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7fe fb68 	bl	801235e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013c8e:	4b0c      	ldr	r3, [pc, #48]	; (8013cc0 <prvCheckTasksWaitingTermination+0x50>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	3b01      	subs	r3, #1
 8013c94:	4a0a      	ldr	r2, [pc, #40]	; (8013cc0 <prvCheckTasksWaitingTermination+0x50>)
 8013c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013c98:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <prvCheckTasksWaitingTermination+0x54>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	4a09      	ldr	r2, [pc, #36]	; (8013cc4 <prvCheckTasksWaitingTermination+0x54>)
 8013ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013ca2:	f000 fdb9 	bl	8014818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 f80e 	bl	8013cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013cac:	4b05      	ldr	r3, [pc, #20]	; (8013cc4 <prvCheckTasksWaitingTermination+0x54>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d1e1      	bne.n	8013c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013cb4:	bf00      	nop
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	2000158c 	.word	0x2000158c
 8013cc0:	200015b8 	.word	0x200015b8
 8013cc4:	200015a0 	.word	0x200015a0

08013cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d108      	bne.n	8013cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 ff48 	bl	8014b74 <vPortFree>
				vPortFree( pxTCB );
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 ff45 	bl	8014b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013cea:	e017      	b.n	8013d1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d103      	bne.n	8013cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 ff3c 	bl	8014b74 <vPortFree>
	}
 8013cfc:	e00e      	b.n	8013d1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d04:	2b02      	cmp	r3, #2
 8013d06:	d009      	beq.n	8013d1c <prvDeleteTCB+0x54>
 8013d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0c:	f383 8811 	msr	BASEPRI, r3
 8013d10:	f3bf 8f6f 	isb	sy
 8013d14:	f3bf 8f4f 	dsb	sy
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	e7fe      	b.n	8013d1a <prvDeleteTCB+0x52>
	}
 8013d1c:	bf00      	nop
 8013d1e:	3710      	adds	r7, #16
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d2a:	4b0f      	ldr	r3, [pc, #60]	; (8013d68 <prvResetNextTaskUnblockTime+0x44>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <prvResetNextTaskUnblockTime+0x14>
 8013d34:	2301      	movs	r3, #1
 8013d36:	e000      	b.n	8013d3a <prvResetNextTaskUnblockTime+0x16>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d004      	beq.n	8013d48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d3e:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <prvResetNextTaskUnblockTime+0x48>)
 8013d40:	f04f 32ff 	mov.w	r2, #4294967295
 8013d44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013d46:	e008      	b.n	8013d5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013d48:	4b07      	ldr	r3, [pc, #28]	; (8013d68 <prvResetNextTaskUnblockTime+0x44>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	4a05      	ldr	r2, [pc, #20]	; (8013d6c <prvResetNextTaskUnblockTime+0x48>)
 8013d58:	6013      	str	r3, [r2, #0]
}
 8013d5a:	bf00      	nop
 8013d5c:	370c      	adds	r7, #12
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop
 8013d68:	20001570 	.word	0x20001570
 8013d6c:	200015d8 	.word	0x200015d8

08013d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013d70:	b480      	push	{r7}
 8013d72:	b083      	sub	sp, #12
 8013d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013d76:	4b0b      	ldr	r3, [pc, #44]	; (8013da4 <xTaskGetSchedulerState+0x34>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d102      	bne.n	8013d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	607b      	str	r3, [r7, #4]
 8013d82:	e008      	b.n	8013d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d84:	4b08      	ldr	r3, [pc, #32]	; (8013da8 <xTaskGetSchedulerState+0x38>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d102      	bne.n	8013d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013d8c:	2302      	movs	r3, #2
 8013d8e:	607b      	str	r3, [r7, #4]
 8013d90:	e001      	b.n	8013d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013d92:	2300      	movs	r3, #0
 8013d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013d96:	687b      	ldr	r3, [r7, #4]
	}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	370c      	adds	r7, #12
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr
 8013da4:	200015c4 	.word	0x200015c4
 8013da8:	200015e0 	.word	0x200015e0

08013dac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013db8:	2300      	movs	r3, #0
 8013dba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d06e      	beq.n	8013ea0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc6:	4b39      	ldr	r3, [pc, #228]	; (8013eac <xTaskPriorityInherit+0x100>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d25e      	bcs.n	8013e8e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	699b      	ldr	r3, [r3, #24]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	db06      	blt.n	8013de6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dd8:	4b34      	ldr	r3, [pc, #208]	; (8013eac <xTaskPriorityInherit+0x100>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dde:	f1c3 0207 	rsb	r2, r3, #7
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	6959      	ldr	r1, [r3, #20]
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dee:	4613      	mov	r3, r2
 8013df0:	009b      	lsls	r3, r3, #2
 8013df2:	4413      	add	r3, r2
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	4a2e      	ldr	r2, [pc, #184]	; (8013eb0 <xTaskPriorityInherit+0x104>)
 8013df8:	4413      	add	r3, r2
 8013dfa:	4299      	cmp	r1, r3
 8013dfc:	d101      	bne.n	8013e02 <xTaskPriorityInherit+0x56>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e000      	b.n	8013e04 <xTaskPriorityInherit+0x58>
 8013e02:	2300      	movs	r3, #0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d03a      	beq.n	8013e7e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	3304      	adds	r3, #4
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7fe faa6 	bl	801235e <uxListRemove>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d115      	bne.n	8013e44 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e1c:	4924      	ldr	r1, [pc, #144]	; (8013eb0 <xTaskPriorityInherit+0x104>)
 8013e1e:	4613      	mov	r3, r2
 8013e20:	009b      	lsls	r3, r3, #2
 8013e22:	4413      	add	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	440b      	add	r3, r1
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d10a      	bne.n	8013e44 <xTaskPriorityInherit+0x98>
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e32:	2201      	movs	r2, #1
 8013e34:	fa02 f303 	lsl.w	r3, r2, r3
 8013e38:	43da      	mvns	r2, r3
 8013e3a:	4b1e      	ldr	r3, [pc, #120]	; (8013eb4 <xTaskPriorityInherit+0x108>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4013      	ands	r3, r2
 8013e40:	4a1c      	ldr	r2, [pc, #112]	; (8013eb4 <xTaskPriorityInherit+0x108>)
 8013e42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e44:	4b19      	ldr	r3, [pc, #100]	; (8013eac <xTaskPriorityInherit+0x100>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e52:	2201      	movs	r2, #1
 8013e54:	409a      	lsls	r2, r3
 8013e56:	4b17      	ldr	r3, [pc, #92]	; (8013eb4 <xTaskPriorityInherit+0x108>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	4a15      	ldr	r2, [pc, #84]	; (8013eb4 <xTaskPriorityInherit+0x108>)
 8013e5e:	6013      	str	r3, [r2, #0]
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e64:	4613      	mov	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	4413      	add	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4a10      	ldr	r2, [pc, #64]	; (8013eb0 <xTaskPriorityInherit+0x104>)
 8013e6e:	441a      	add	r2, r3
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	3304      	adds	r3, #4
 8013e74:	4619      	mov	r1, r3
 8013e76:	4610      	mov	r0, r2
 8013e78:	f7fe fa14 	bl	80122a4 <vListInsertEnd>
 8013e7c:	e004      	b.n	8013e88 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e7e:	4b0b      	ldr	r3, [pc, #44]	; (8013eac <xTaskPriorityInherit+0x100>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013e88:	2301      	movs	r3, #1
 8013e8a:	60fb      	str	r3, [r7, #12]
 8013e8c:	e008      	b.n	8013ea0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e92:	4b06      	ldr	r3, [pc, #24]	; (8013eac <xTaskPriorityInherit+0x100>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d201      	bcs.n	8013ea0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
	}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3710      	adds	r7, #16
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	200014b8 	.word	0x200014b8
 8013eb0:	200014bc 	.word	0x200014bc
 8013eb4:	200015c0 	.word	0x200015c0

08013eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b086      	sub	sp, #24
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d06c      	beq.n	8013fa8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013ece:	4b39      	ldr	r3, [pc, #228]	; (8013fb4 <xTaskPriorityDisinherit+0xfc>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	693a      	ldr	r2, [r7, #16]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d009      	beq.n	8013eec <xTaskPriorityDisinherit+0x34>
 8013ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	e7fe      	b.n	8013eea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d109      	bne.n	8013f08 <xTaskPriorityDisinherit+0x50>
 8013ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef8:	f383 8811 	msr	BASEPRI, r3
 8013efc:	f3bf 8f6f 	isb	sy
 8013f00:	f3bf 8f4f 	dsb	sy
 8013f04:	60bb      	str	r3, [r7, #8]
 8013f06:	e7fe      	b.n	8013f06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f0c:	1e5a      	subs	r2, r3, #1
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d044      	beq.n	8013fa8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d140      	bne.n	8013fa8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	3304      	adds	r3, #4
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fe fa17 	bl	801235e <uxListRemove>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d115      	bne.n	8013f62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f3a:	491f      	ldr	r1, [pc, #124]	; (8013fb8 <xTaskPriorityDisinherit+0x100>)
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	4413      	add	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	440b      	add	r3, r1
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10a      	bne.n	8013f62 <xTaskPriorityDisinherit+0xaa>
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f50:	2201      	movs	r2, #1
 8013f52:	fa02 f303 	lsl.w	r3, r2, r3
 8013f56:	43da      	mvns	r2, r3
 8013f58:	4b18      	ldr	r3, [pc, #96]	; (8013fbc <xTaskPriorityDisinherit+0x104>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	4013      	ands	r3, r2
 8013f5e:	4a17      	ldr	r2, [pc, #92]	; (8013fbc <xTaskPriorityDisinherit+0x104>)
 8013f60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6e:	f1c3 0207 	rsb	r2, r3, #7
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	409a      	lsls	r2, r3
 8013f7e:	4b0f      	ldr	r3, [pc, #60]	; (8013fbc <xTaskPriorityDisinherit+0x104>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	4313      	orrs	r3, r2
 8013f84:	4a0d      	ldr	r2, [pc, #52]	; (8013fbc <xTaskPriorityDisinherit+0x104>)
 8013f86:	6013      	str	r3, [r2, #0]
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4413      	add	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	4a08      	ldr	r2, [pc, #32]	; (8013fb8 <xTaskPriorityDisinherit+0x100>)
 8013f96:	441a      	add	r2, r3
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	3304      	adds	r3, #4
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	f7fe f980 	bl	80122a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013fa8:	697b      	ldr	r3, [r7, #20]
	}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3718      	adds	r7, #24
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	200014b8 	.word	0x200014b8
 8013fb8:	200014bc 	.word	0x200014bc
 8013fbc:	200015c0 	.word	0x200015c0

08013fc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b088      	sub	sp, #32
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013fce:	2301      	movs	r3, #1
 8013fd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f000 8086 	beq.w	80140e6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013fda:	69bb      	ldr	r3, [r7, #24]
 8013fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d109      	bne.n	8013ff6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8013fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe6:	f383 8811 	msr	BASEPRI, r3
 8013fea:	f3bf 8f6f 	isb	sy
 8013fee:	f3bf 8f4f 	dsb	sy
 8013ff2:	60fb      	str	r3, [r7, #12]
 8013ff4:	e7fe      	b.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013ff6:	69bb      	ldr	r3, [r7, #24]
 8013ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ffa:	683a      	ldr	r2, [r7, #0]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d902      	bls.n	8014006 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	61fb      	str	r3, [r7, #28]
 8014004:	e002      	b.n	801400c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801400a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801400c:	69bb      	ldr	r3, [r7, #24]
 801400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014010:	69fa      	ldr	r2, [r7, #28]
 8014012:	429a      	cmp	r2, r3
 8014014:	d067      	beq.n	80140e6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801401a:	697a      	ldr	r2, [r7, #20]
 801401c:	429a      	cmp	r2, r3
 801401e:	d162      	bne.n	80140e6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014020:	4b33      	ldr	r3, [pc, #204]	; (80140f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	69ba      	ldr	r2, [r7, #24]
 8014026:	429a      	cmp	r2, r3
 8014028:	d109      	bne.n	801403e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402e:	f383 8811 	msr	BASEPRI, r3
 8014032:	f3bf 8f6f 	isb	sy
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	60bb      	str	r3, [r7, #8]
 801403c:	e7fe      	b.n	801403c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014042:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	69fa      	ldr	r2, [r7, #28]
 8014048:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	699b      	ldr	r3, [r3, #24]
 801404e:	2b00      	cmp	r3, #0
 8014050:	db04      	blt.n	801405c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	f1c3 0207 	rsb	r2, r3, #7
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801405c:	69bb      	ldr	r3, [r7, #24]
 801405e:	6959      	ldr	r1, [r3, #20]
 8014060:	693a      	ldr	r2, [r7, #16]
 8014062:	4613      	mov	r3, r2
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	4413      	add	r3, r2
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4a22      	ldr	r2, [pc, #136]	; (80140f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801406c:	4413      	add	r3, r2
 801406e:	4299      	cmp	r1, r3
 8014070:	d101      	bne.n	8014076 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8014072:	2301      	movs	r3, #1
 8014074:	e000      	b.n	8014078 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8014076:	2300      	movs	r3, #0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d034      	beq.n	80140e6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801407c:	69bb      	ldr	r3, [r7, #24]
 801407e:	3304      	adds	r3, #4
 8014080:	4618      	mov	r0, r3
 8014082:	f7fe f96c 	bl	801235e <uxListRemove>
 8014086:	4603      	mov	r3, r0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d115      	bne.n	80140b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014090:	4918      	ldr	r1, [pc, #96]	; (80140f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014092:	4613      	mov	r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	4413      	add	r3, r2
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	440b      	add	r3, r1
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d10a      	bne.n	80140b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a6:	2201      	movs	r2, #1
 80140a8:	fa02 f303 	lsl.w	r3, r2, r3
 80140ac:	43da      	mvns	r2, r3
 80140ae:	4b12      	ldr	r3, [pc, #72]	; (80140f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4013      	ands	r3, r2
 80140b4:	4a10      	ldr	r2, [pc, #64]	; (80140f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140b6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140bc:	2201      	movs	r2, #1
 80140be:	409a      	lsls	r2, r3
 80140c0:	4b0d      	ldr	r3, [pc, #52]	; (80140f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	4313      	orrs	r3, r2
 80140c6:	4a0c      	ldr	r2, [pc, #48]	; (80140f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140c8:	6013      	str	r3, [r2, #0]
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ce:	4613      	mov	r3, r2
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	4413      	add	r3, r2
 80140d4:	009b      	lsls	r3, r3, #2
 80140d6:	4a07      	ldr	r2, [pc, #28]	; (80140f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80140d8:	441a      	add	r2, r3
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	3304      	adds	r3, #4
 80140de:	4619      	mov	r1, r3
 80140e0:	4610      	mov	r0, r2
 80140e2:	f7fe f8df 	bl	80122a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140e6:	bf00      	nop
 80140e8:	3720      	adds	r7, #32
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	200014b8 	.word	0x200014b8
 80140f4:	200014bc 	.word	0x200014bc
 80140f8:	200015c0 	.word	0x200015c0

080140fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80140fc:	b480      	push	{r7}
 80140fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014100:	4b07      	ldr	r3, [pc, #28]	; (8014120 <pvTaskIncrementMutexHeldCount+0x24>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d004      	beq.n	8014112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014108:	4b05      	ldr	r3, [pc, #20]	; (8014120 <pvTaskIncrementMutexHeldCount+0x24>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801410e:	3201      	adds	r2, #1
 8014110:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014112:	4b03      	ldr	r3, [pc, #12]	; (8014120 <pvTaskIncrementMutexHeldCount+0x24>)
 8014114:	681b      	ldr	r3, [r3, #0]
	}
 8014116:	4618      	mov	r0, r3
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	200014b8 	.word	0x200014b8

08014124 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014132:	f000 fb43 	bl	80147bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014136:	4b26      	ldr	r3, [pc, #152]	; (80141d0 <xTaskNotifyWait+0xac>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b02      	cmp	r3, #2
 8014142:	d01a      	beq.n	801417a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014144:	4b22      	ldr	r3, [pc, #136]	; (80141d0 <xTaskNotifyWait+0xac>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801414a:	68fa      	ldr	r2, [r7, #12]
 801414c:	43d2      	mvns	r2, r2
 801414e:	400a      	ands	r2, r1
 8014150:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014152:	4b1f      	ldr	r3, [pc, #124]	; (80141d0 <xTaskNotifyWait+0xac>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00b      	beq.n	801417a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014162:	2101      	movs	r1, #1
 8014164:	6838      	ldr	r0, [r7, #0]
 8014166:	f000 f99d 	bl	80144a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801416a:	4b1a      	ldr	r3, [pc, #104]	; (80141d4 <xTaskNotifyWait+0xb0>)
 801416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014170:	601a      	str	r2, [r3, #0]
 8014172:	f3bf 8f4f 	dsb	sy
 8014176:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801417a:	f000 fb4d 	bl	8014818 <vPortExitCritical>

		taskENTER_CRITICAL();
 801417e:	f000 fb1d 	bl	80147bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014188:	4b11      	ldr	r3, [pc, #68]	; (80141d0 <xTaskNotifyWait+0xac>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014192:	4b0f      	ldr	r3, [pc, #60]	; (80141d0 <xTaskNotifyWait+0xac>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801419a:	b2db      	uxtb	r3, r3
 801419c:	2b02      	cmp	r3, #2
 801419e:	d002      	beq.n	80141a6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80141a0:	2300      	movs	r3, #0
 80141a2:	617b      	str	r3, [r7, #20]
 80141a4:	e008      	b.n	80141b8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80141a6:	4b0a      	ldr	r3, [pc, #40]	; (80141d0 <xTaskNotifyWait+0xac>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80141ac:	68ba      	ldr	r2, [r7, #8]
 80141ae:	43d2      	mvns	r2, r2
 80141b0:	400a      	ands	r2, r1
 80141b2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80141b4:	2301      	movs	r3, #1
 80141b6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141b8:	4b05      	ldr	r3, [pc, #20]	; (80141d0 <xTaskNotifyWait+0xac>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2200      	movs	r2, #0
 80141be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80141c2:	f000 fb29 	bl	8014818 <vPortExitCritical>

		return xReturn;
 80141c6:	697b      	ldr	r3, [r7, #20]
	}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	200014b8 	.word	0x200014b8
 80141d4:	e000ed04 	.word	0xe000ed04

080141d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b08a      	sub	sp, #40	; 0x28
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	603b      	str	r3, [r7, #0]
 80141e4:	4613      	mov	r3, r2
 80141e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80141e8:	2301      	movs	r3, #1
 80141ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d109      	bne.n	8014206 <xTaskGenericNotify+0x2e>
 80141f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f6:	f383 8811 	msr	BASEPRI, r3
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	f3bf 8f4f 	dsb	sy
 8014202:	61bb      	str	r3, [r7, #24]
 8014204:	e7fe      	b.n	8014204 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801420a:	f000 fad7 	bl	80147bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d003      	beq.n	801421c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014214:	6a3b      	ldr	r3, [r7, #32]
 8014216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801421c:	6a3b      	ldr	r3, [r7, #32]
 801421e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014222:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014224:	6a3b      	ldr	r3, [r7, #32]
 8014226:	2202      	movs	r2, #2
 8014228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	2b04      	cmp	r3, #4
 8014230:	d827      	bhi.n	8014282 <xTaskGenericNotify+0xaa>
 8014232:	a201      	add	r2, pc, #4	; (adr r2, 8014238 <xTaskGenericNotify+0x60>)
 8014234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014238:	08014283 	.word	0x08014283
 801423c:	0801424d 	.word	0x0801424d
 8014240:	0801425b 	.word	0x0801425b
 8014244:	08014267 	.word	0x08014267
 8014248:	0801426f 	.word	0x0801426f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801424c:	6a3b      	ldr	r3, [r7, #32]
 801424e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	431a      	orrs	r2, r3
 8014254:	6a3b      	ldr	r3, [r7, #32]
 8014256:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014258:	e013      	b.n	8014282 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801425a:	6a3b      	ldr	r3, [r7, #32]
 801425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	6a3b      	ldr	r3, [r7, #32]
 8014262:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014264:	e00d      	b.n	8014282 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014266:	6a3b      	ldr	r3, [r7, #32]
 8014268:	68ba      	ldr	r2, [r7, #8]
 801426a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801426c:	e009      	b.n	8014282 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801426e:	7ffb      	ldrb	r3, [r7, #31]
 8014270:	2b02      	cmp	r3, #2
 8014272:	d003      	beq.n	801427c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014274:	6a3b      	ldr	r3, [r7, #32]
 8014276:	68ba      	ldr	r2, [r7, #8]
 8014278:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801427a:	e001      	b.n	8014280 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 801427c:	2300      	movs	r3, #0
 801427e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014280:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014282:	7ffb      	ldrb	r3, [r7, #31]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d138      	bne.n	80142fa <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014288:	6a3b      	ldr	r3, [r7, #32]
 801428a:	3304      	adds	r3, #4
 801428c:	4618      	mov	r0, r3
 801428e:	f7fe f866 	bl	801235e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014292:	6a3b      	ldr	r3, [r7, #32]
 8014294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014296:	2201      	movs	r2, #1
 8014298:	409a      	lsls	r2, r3
 801429a:	4b1b      	ldr	r3, [pc, #108]	; (8014308 <xTaskGenericNotify+0x130>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4313      	orrs	r3, r2
 80142a0:	4a19      	ldr	r2, [pc, #100]	; (8014308 <xTaskGenericNotify+0x130>)
 80142a2:	6013      	str	r3, [r2, #0]
 80142a4:	6a3b      	ldr	r3, [r7, #32]
 80142a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a8:	4613      	mov	r3, r2
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	4413      	add	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	4a16      	ldr	r2, [pc, #88]	; (801430c <xTaskGenericNotify+0x134>)
 80142b2:	441a      	add	r2, r3
 80142b4:	6a3b      	ldr	r3, [r7, #32]
 80142b6:	3304      	adds	r3, #4
 80142b8:	4619      	mov	r1, r3
 80142ba:	4610      	mov	r0, r2
 80142bc:	f7fd fff2 	bl	80122a4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80142c0:	6a3b      	ldr	r3, [r7, #32]
 80142c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d009      	beq.n	80142dc <xTaskGenericNotify+0x104>
 80142c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142cc:	f383 8811 	msr	BASEPRI, r3
 80142d0:	f3bf 8f6f 	isb	sy
 80142d4:	f3bf 8f4f 	dsb	sy
 80142d8:	617b      	str	r3, [r7, #20]
 80142da:	e7fe      	b.n	80142da <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80142dc:	6a3b      	ldr	r3, [r7, #32]
 80142de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e0:	4b0b      	ldr	r3, [pc, #44]	; (8014310 <xTaskGenericNotify+0x138>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d907      	bls.n	80142fa <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80142ea:	4b0a      	ldr	r3, [pc, #40]	; (8014314 <xTaskGenericNotify+0x13c>)
 80142ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142f0:	601a      	str	r2, [r3, #0]
 80142f2:	f3bf 8f4f 	dsb	sy
 80142f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80142fa:	f000 fa8d 	bl	8014818 <vPortExitCritical>

		return xReturn;
 80142fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014300:	4618      	mov	r0, r3
 8014302:	3728      	adds	r7, #40	; 0x28
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	200015c0 	.word	0x200015c0
 801430c:	200014bc 	.word	0x200014bc
 8014310:	200014b8 	.word	0x200014b8
 8014314:	e000ed04 	.word	0xe000ed04

08014318 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014318:	b580      	push	{r7, lr}
 801431a:	b08e      	sub	sp, #56	; 0x38
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	603b      	str	r3, [r7, #0]
 8014324:	4613      	mov	r3, r2
 8014326:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014328:	2301      	movs	r3, #1
 801432a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d109      	bne.n	8014346 <xTaskGenericNotifyFromISR+0x2e>
 8014332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014336:	f383 8811 	msr	BASEPRI, r3
 801433a:	f3bf 8f6f 	isb	sy
 801433e:	f3bf 8f4f 	dsb	sy
 8014342:	627b      	str	r3, [r7, #36]	; 0x24
 8014344:	e7fe      	b.n	8014344 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014346:	f000 fb15 	bl	8014974 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801434e:	f3ef 8211 	mrs	r2, BASEPRI
 8014352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014356:	f383 8811 	msr	BASEPRI, r3
 801435a:	f3bf 8f6f 	isb	sy
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	623a      	str	r2, [r7, #32]
 8014364:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014366:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014368:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d003      	beq.n	8014378 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014384:	2202      	movs	r2, #2
 8014386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801438a:	79fb      	ldrb	r3, [r7, #7]
 801438c:	2b04      	cmp	r3, #4
 801438e:	d829      	bhi.n	80143e4 <xTaskGenericNotifyFromISR+0xcc>
 8014390:	a201      	add	r2, pc, #4	; (adr r2, 8014398 <xTaskGenericNotifyFromISR+0x80>)
 8014392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014396:	bf00      	nop
 8014398:	080143e5 	.word	0x080143e5
 801439c:	080143ad 	.word	0x080143ad
 80143a0:	080143bb 	.word	0x080143bb
 80143a4:	080143c7 	.word	0x080143c7
 80143a8:	080143cf 	.word	0x080143cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80143ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	431a      	orrs	r2, r3
 80143b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143b8:	e014      	b.n	80143e4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143be:	1c5a      	adds	r2, r3, #1
 80143c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143c4:	e00e      	b.n	80143e4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80143c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c8:	68ba      	ldr	r2, [r7, #8]
 80143ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80143cc:	e00a      	b.n	80143e4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80143ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80143d2:	2b02      	cmp	r3, #2
 80143d4:	d003      	beq.n	80143de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80143dc:	e001      	b.n	80143e2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80143de:	2300      	movs	r3, #0
 80143e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80143e2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80143e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d145      	bne.n	8014478 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80143ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d009      	beq.n	8014408 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80143f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	61bb      	str	r3, [r7, #24]
 8014406:	e7fe      	b.n	8014406 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014408:	4b20      	ldr	r3, [pc, #128]	; (801448c <xTaskGenericNotifyFromISR+0x174>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d11c      	bne.n	801444a <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014412:	3304      	adds	r3, #4
 8014414:	4618      	mov	r0, r3
 8014416:	f7fd ffa2 	bl	801235e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441e:	2201      	movs	r2, #1
 8014420:	409a      	lsls	r2, r3
 8014422:	4b1b      	ldr	r3, [pc, #108]	; (8014490 <xTaskGenericNotifyFromISR+0x178>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4313      	orrs	r3, r2
 8014428:	4a19      	ldr	r2, [pc, #100]	; (8014490 <xTaskGenericNotifyFromISR+0x178>)
 801442a:	6013      	str	r3, [r2, #0]
 801442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014430:	4613      	mov	r3, r2
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	4413      	add	r3, r2
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	4a16      	ldr	r2, [pc, #88]	; (8014494 <xTaskGenericNotifyFromISR+0x17c>)
 801443a:	441a      	add	r2, r3
 801443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443e:	3304      	adds	r3, #4
 8014440:	4619      	mov	r1, r3
 8014442:	4610      	mov	r0, r2
 8014444:	f7fd ff2e 	bl	80122a4 <vListInsertEnd>
 8014448:	e005      	b.n	8014456 <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444c:	3318      	adds	r3, #24
 801444e:	4619      	mov	r1, r3
 8014450:	4811      	ldr	r0, [pc, #68]	; (8014498 <xTaskGenericNotifyFromISR+0x180>)
 8014452:	f7fd ff27 	bl	80122a4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801445a:	4b10      	ldr	r3, [pc, #64]	; (801449c <xTaskGenericNotifyFromISR+0x184>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014460:	429a      	cmp	r2, r3
 8014462:	d909      	bls.n	8014478 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014466:	2b00      	cmp	r3, #0
 8014468:	d003      	beq.n	8014472 <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801446c:	2201      	movs	r2, #1
 801446e:	601a      	str	r2, [r3, #0]
 8014470:	e002      	b.n	8014478 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8014472:	4b0b      	ldr	r3, [pc, #44]	; (80144a0 <xTaskGenericNotifyFromISR+0x188>)
 8014474:	2201      	movs	r2, #1
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014484:	4618      	mov	r0, r3
 8014486:	3738      	adds	r7, #56	; 0x38
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	200015e0 	.word	0x200015e0
 8014490:	200015c0 	.word	0x200015c0
 8014494:	200014bc 	.word	0x200014bc
 8014498:	20001578 	.word	0x20001578
 801449c:	200014b8 	.word	0x200014b8
 80144a0:	200015cc 	.word	0x200015cc

080144a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80144ae:	4b29      	ldr	r3, [pc, #164]	; (8014554 <prvAddCurrentTaskToDelayedList+0xb0>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144b4:	4b28      	ldr	r3, [pc, #160]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	3304      	adds	r3, #4
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7fd ff4f 	bl	801235e <uxListRemove>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d10b      	bne.n	80144de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80144c6:	4b24      	ldr	r3, [pc, #144]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144cc:	2201      	movs	r2, #1
 80144ce:	fa02 f303 	lsl.w	r3, r2, r3
 80144d2:	43da      	mvns	r2, r3
 80144d4:	4b21      	ldr	r3, [pc, #132]	; (801455c <prvAddCurrentTaskToDelayedList+0xb8>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	4013      	ands	r3, r2
 80144da:	4a20      	ldr	r2, [pc, #128]	; (801455c <prvAddCurrentTaskToDelayedList+0xb8>)
 80144dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144e4:	d10a      	bne.n	80144fc <prvAddCurrentTaskToDelayedList+0x58>
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d007      	beq.n	80144fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80144ec:	4b1a      	ldr	r3, [pc, #104]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	3304      	adds	r3, #4
 80144f2:	4619      	mov	r1, r3
 80144f4:	481a      	ldr	r0, [pc, #104]	; (8014560 <prvAddCurrentTaskToDelayedList+0xbc>)
 80144f6:	f7fd fed5 	bl	80122a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80144fa:	e026      	b.n	801454a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	4413      	add	r3, r2
 8014502:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014504:	4b14      	ldr	r3, [pc, #80]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801450c:	68ba      	ldr	r2, [r7, #8]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	429a      	cmp	r2, r3
 8014512:	d209      	bcs.n	8014528 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014514:	4b13      	ldr	r3, [pc, #76]	; (8014564 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	4b0f      	ldr	r3, [pc, #60]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3304      	adds	r3, #4
 801451e:	4619      	mov	r1, r3
 8014520:	4610      	mov	r0, r2
 8014522:	f7fd fee3 	bl	80122ec <vListInsert>
}
 8014526:	e010      	b.n	801454a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014528:	4b0f      	ldr	r3, [pc, #60]	; (8014568 <prvAddCurrentTaskToDelayedList+0xc4>)
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <prvAddCurrentTaskToDelayedList+0xb4>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	3304      	adds	r3, #4
 8014532:	4619      	mov	r1, r3
 8014534:	4610      	mov	r0, r2
 8014536:	f7fd fed9 	bl	80122ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801453a:	4b0c      	ldr	r3, [pc, #48]	; (801456c <prvAddCurrentTaskToDelayedList+0xc8>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	68ba      	ldr	r2, [r7, #8]
 8014540:	429a      	cmp	r2, r3
 8014542:	d202      	bcs.n	801454a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014544:	4a09      	ldr	r2, [pc, #36]	; (801456c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	6013      	str	r3, [r2, #0]
}
 801454a:	bf00      	nop
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	200015bc 	.word	0x200015bc
 8014558:	200014b8 	.word	0x200014b8
 801455c:	200015c0 	.word	0x200015c0
 8014560:	200015a4 	.word	0x200015a4
 8014564:	20001574 	.word	0x20001574
 8014568:	20001570 	.word	0x20001570
 801456c:	200015d8 	.word	0x200015d8

08014570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014570:	b480      	push	{r7}
 8014572:	b085      	sub	sp, #20
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	3b04      	subs	r3, #4
 8014580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	3b04      	subs	r3, #4
 801458e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	f023 0201 	bic.w	r2, r3, #1
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	3b04      	subs	r3, #4
 801459e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80145a0:	4a0c      	ldr	r2, [pc, #48]	; (80145d4 <pxPortInitialiseStack+0x64>)
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	3b14      	subs	r3, #20
 80145aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	3b04      	subs	r3, #4
 80145b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f06f 0202 	mvn.w	r2, #2
 80145be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	3b20      	subs	r3, #32
 80145c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80145c6:	68fb      	ldr	r3, [r7, #12]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3714      	adds	r7, #20
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	080145d9 	.word	0x080145d9

080145d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80145de:	2300      	movs	r3, #0
 80145e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80145e2:	4b11      	ldr	r3, [pc, #68]	; (8014628 <prvTaskExitError+0x50>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ea:	d009      	beq.n	8014600 <prvTaskExitError+0x28>
	__asm volatile
 80145ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f0:	f383 8811 	msr	BASEPRI, r3
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	f3bf 8f4f 	dsb	sy
 80145fc:	60fb      	str	r3, [r7, #12]
 80145fe:	e7fe      	b.n	80145fe <prvTaskExitError+0x26>
 8014600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014612:	bf00      	nop
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0fc      	beq.n	8014614 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801461a:	bf00      	nop
 801461c:	3714      	adds	r7, #20
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop
 8014628:	20000dfc 	.word	0x20000dfc
 801462c:	00000000 	.word	0x00000000

08014630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014630:	4b07      	ldr	r3, [pc, #28]	; (8014650 <pxCurrentTCBConst2>)
 8014632:	6819      	ldr	r1, [r3, #0]
 8014634:	6808      	ldr	r0, [r1, #0]
 8014636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463a:	f380 8809 	msr	PSP, r0
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f04f 0000 	mov.w	r0, #0
 8014646:	f380 8811 	msr	BASEPRI, r0
 801464a:	4770      	bx	lr
 801464c:	f3af 8000 	nop.w

08014650 <pxCurrentTCBConst2>:
 8014650:	200014b8 	.word	0x200014b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014654:	bf00      	nop
 8014656:	bf00      	nop

08014658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014658:	4808      	ldr	r0, [pc, #32]	; (801467c <prvPortStartFirstTask+0x24>)
 801465a:	6800      	ldr	r0, [r0, #0]
 801465c:	6800      	ldr	r0, [r0, #0]
 801465e:	f380 8808 	msr	MSP, r0
 8014662:	f04f 0000 	mov.w	r0, #0
 8014666:	f380 8814 	msr	CONTROL, r0
 801466a:	b662      	cpsie	i
 801466c:	b661      	cpsie	f
 801466e:	f3bf 8f4f 	dsb	sy
 8014672:	f3bf 8f6f 	isb	sy
 8014676:	df00      	svc	0
 8014678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801467a:	bf00      	nop
 801467c:	e000ed08 	.word	0xe000ed08

08014680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014686:	4b44      	ldr	r3, [pc, #272]	; (8014798 <xPortStartScheduler+0x118>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	4a44      	ldr	r2, [pc, #272]	; (801479c <xPortStartScheduler+0x11c>)
 801468c:	4293      	cmp	r3, r2
 801468e:	d109      	bne.n	80146a4 <xPortStartScheduler+0x24>
 8014690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014694:	f383 8811 	msr	BASEPRI, r3
 8014698:	f3bf 8f6f 	isb	sy
 801469c:	f3bf 8f4f 	dsb	sy
 80146a0:	613b      	str	r3, [r7, #16]
 80146a2:	e7fe      	b.n	80146a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80146a4:	4b3c      	ldr	r3, [pc, #240]	; (8014798 <xPortStartScheduler+0x118>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4a3d      	ldr	r2, [pc, #244]	; (80147a0 <xPortStartScheduler+0x120>)
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d109      	bne.n	80146c2 <xPortStartScheduler+0x42>
 80146ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	60fb      	str	r3, [r7, #12]
 80146c0:	e7fe      	b.n	80146c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80146c2:	4b38      	ldr	r3, [pc, #224]	; (80147a4 <xPortStartScheduler+0x124>)
 80146c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	22ff      	movs	r2, #255	; 0xff
 80146d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80146dc:	78fb      	ldrb	r3, [r7, #3]
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80146e4:	b2da      	uxtb	r2, r3
 80146e6:	4b30      	ldr	r3, [pc, #192]	; (80147a8 <xPortStartScheduler+0x128>)
 80146e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80146ea:	4b30      	ldr	r3, [pc, #192]	; (80147ac <xPortStartScheduler+0x12c>)
 80146ec:	2207      	movs	r2, #7
 80146ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80146f0:	e009      	b.n	8014706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80146f2:	4b2e      	ldr	r3, [pc, #184]	; (80147ac <xPortStartScheduler+0x12c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	4a2c      	ldr	r2, [pc, #176]	; (80147ac <xPortStartScheduler+0x12c>)
 80146fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80146fc:	78fb      	ldrb	r3, [r7, #3]
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	005b      	lsls	r3, r3, #1
 8014702:	b2db      	uxtb	r3, r3
 8014704:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014706:	78fb      	ldrb	r3, [r7, #3]
 8014708:	b2db      	uxtb	r3, r3
 801470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801470e:	2b80      	cmp	r3, #128	; 0x80
 8014710:	d0ef      	beq.n	80146f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014712:	4b26      	ldr	r3, [pc, #152]	; (80147ac <xPortStartScheduler+0x12c>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	f1c3 0307 	rsb	r3, r3, #7
 801471a:	2b04      	cmp	r3, #4
 801471c:	d009      	beq.n	8014732 <xPortStartScheduler+0xb2>
 801471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014722:	f383 8811 	msr	BASEPRI, r3
 8014726:	f3bf 8f6f 	isb	sy
 801472a:	f3bf 8f4f 	dsb	sy
 801472e:	60bb      	str	r3, [r7, #8]
 8014730:	e7fe      	b.n	8014730 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014732:	4b1e      	ldr	r3, [pc, #120]	; (80147ac <xPortStartScheduler+0x12c>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	021b      	lsls	r3, r3, #8
 8014738:	4a1c      	ldr	r2, [pc, #112]	; (80147ac <xPortStartScheduler+0x12c>)
 801473a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801473c:	4b1b      	ldr	r3, [pc, #108]	; (80147ac <xPortStartScheduler+0x12c>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014744:	4a19      	ldr	r2, [pc, #100]	; (80147ac <xPortStartScheduler+0x12c>)
 8014746:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	b2da      	uxtb	r2, r3
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014750:	4b17      	ldr	r3, [pc, #92]	; (80147b0 <xPortStartScheduler+0x130>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4a16      	ldr	r2, [pc, #88]	; (80147b0 <xPortStartScheduler+0x130>)
 8014756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801475a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801475c:	4b14      	ldr	r3, [pc, #80]	; (80147b0 <xPortStartScheduler+0x130>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4a13      	ldr	r2, [pc, #76]	; (80147b0 <xPortStartScheduler+0x130>)
 8014762:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014766:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014768:	f000 f8d6 	bl	8014918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801476c:	4b11      	ldr	r3, [pc, #68]	; (80147b4 <xPortStartScheduler+0x134>)
 801476e:	2200      	movs	r2, #0
 8014770:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014772:	f000 f8f5 	bl	8014960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014776:	4b10      	ldr	r3, [pc, #64]	; (80147b8 <xPortStartScheduler+0x138>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a0f      	ldr	r2, [pc, #60]	; (80147b8 <xPortStartScheduler+0x138>)
 801477c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014780:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014782:	f7ff ff69 	bl	8014658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014786:	f7ff f8b9 	bl	80138fc <vTaskSwitchContext>
	prvTaskExitError();
 801478a:	f7ff ff25 	bl	80145d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	e000ed00 	.word	0xe000ed00
 801479c:	410fc271 	.word	0x410fc271
 80147a0:	410fc270 	.word	0x410fc270
 80147a4:	e000e400 	.word	0xe000e400
 80147a8:	200015e4 	.word	0x200015e4
 80147ac:	200015e8 	.word	0x200015e8
 80147b0:	e000ed20 	.word	0xe000ed20
 80147b4:	20000dfc 	.word	0x20000dfc
 80147b8:	e000ef34 	.word	0xe000ef34

080147bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80147d4:	4b0e      	ldr	r3, [pc, #56]	; (8014810 <vPortEnterCritical+0x54>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3301      	adds	r3, #1
 80147da:	4a0d      	ldr	r2, [pc, #52]	; (8014810 <vPortEnterCritical+0x54>)
 80147dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80147de:	4b0c      	ldr	r3, [pc, #48]	; (8014810 <vPortEnterCritical+0x54>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d10e      	bne.n	8014804 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80147e6:	4b0b      	ldr	r3, [pc, #44]	; (8014814 <vPortEnterCritical+0x58>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d009      	beq.n	8014804 <vPortEnterCritical+0x48>
 80147f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f4:	f383 8811 	msr	BASEPRI, r3
 80147f8:	f3bf 8f6f 	isb	sy
 80147fc:	f3bf 8f4f 	dsb	sy
 8014800:	603b      	str	r3, [r7, #0]
 8014802:	e7fe      	b.n	8014802 <vPortEnterCritical+0x46>
	}
}
 8014804:	bf00      	nop
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr
 8014810:	20000dfc 	.word	0x20000dfc
 8014814:	e000ed04 	.word	0xe000ed04

08014818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801481e:	4b11      	ldr	r3, [pc, #68]	; (8014864 <vPortExitCritical+0x4c>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d109      	bne.n	801483a <vPortExitCritical+0x22>
 8014826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801482a:	f383 8811 	msr	BASEPRI, r3
 801482e:	f3bf 8f6f 	isb	sy
 8014832:	f3bf 8f4f 	dsb	sy
 8014836:	607b      	str	r3, [r7, #4]
 8014838:	e7fe      	b.n	8014838 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801483a:	4b0a      	ldr	r3, [pc, #40]	; (8014864 <vPortExitCritical+0x4c>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	3b01      	subs	r3, #1
 8014840:	4a08      	ldr	r2, [pc, #32]	; (8014864 <vPortExitCritical+0x4c>)
 8014842:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014844:	4b07      	ldr	r3, [pc, #28]	; (8014864 <vPortExitCritical+0x4c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d104      	bne.n	8014856 <vPortExitCritical+0x3e>
 801484c:	2300      	movs	r3, #0
 801484e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014856:	bf00      	nop
 8014858:	370c      	adds	r7, #12
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr
 8014862:	bf00      	nop
 8014864:	20000dfc 	.word	0x20000dfc
	...

08014870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014870:	f3ef 8009 	mrs	r0, PSP
 8014874:	f3bf 8f6f 	isb	sy
 8014878:	4b15      	ldr	r3, [pc, #84]	; (80148d0 <pxCurrentTCBConst>)
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	f01e 0f10 	tst.w	lr, #16
 8014880:	bf08      	it	eq
 8014882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488a:	6010      	str	r0, [r2, #0]
 801488c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014894:	f380 8811 	msr	BASEPRI, r0
 8014898:	f3bf 8f4f 	dsb	sy
 801489c:	f3bf 8f6f 	isb	sy
 80148a0:	f7ff f82c 	bl	80138fc <vTaskSwitchContext>
 80148a4:	f04f 0000 	mov.w	r0, #0
 80148a8:	f380 8811 	msr	BASEPRI, r0
 80148ac:	bc09      	pop	{r0, r3}
 80148ae:	6819      	ldr	r1, [r3, #0]
 80148b0:	6808      	ldr	r0, [r1, #0]
 80148b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b6:	f01e 0f10 	tst.w	lr, #16
 80148ba:	bf08      	it	eq
 80148bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80148c0:	f380 8809 	msr	PSP, r0
 80148c4:	f3bf 8f6f 	isb	sy
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	f3af 8000 	nop.w

080148d0 <pxCurrentTCBConst>:
 80148d0:	200014b8 	.word	0x200014b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop

080148d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
	__asm volatile
 80148de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e2:	f383 8811 	msr	BASEPRI, r3
 80148e6:	f3bf 8f6f 	isb	sy
 80148ea:	f3bf 8f4f 	dsb	sy
 80148ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80148f0:	f7fe ff48 	bl	8013784 <xTaskIncrementTick>
 80148f4:	4603      	mov	r3, r0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d003      	beq.n	8014902 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80148fa:	4b06      	ldr	r3, [pc, #24]	; (8014914 <SysTick_Handler+0x3c>)
 80148fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014900:	601a      	str	r2, [r3, #0]
 8014902:	2300      	movs	r3, #0
 8014904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	e000ed04 	.word	0xe000ed04

08014918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014918:	b480      	push	{r7}
 801491a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801491c:	4b0b      	ldr	r3, [pc, #44]	; (801494c <vPortSetupTimerInterrupt+0x34>)
 801491e:	2200      	movs	r2, #0
 8014920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014922:	4b0b      	ldr	r3, [pc, #44]	; (8014950 <vPortSetupTimerInterrupt+0x38>)
 8014924:	2200      	movs	r2, #0
 8014926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014928:	4b0a      	ldr	r3, [pc, #40]	; (8014954 <vPortSetupTimerInterrupt+0x3c>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	4a0a      	ldr	r2, [pc, #40]	; (8014958 <vPortSetupTimerInterrupt+0x40>)
 801492e:	fba2 2303 	umull	r2, r3, r2, r3
 8014932:	099b      	lsrs	r3, r3, #6
 8014934:	4a09      	ldr	r2, [pc, #36]	; (801495c <vPortSetupTimerInterrupt+0x44>)
 8014936:	3b01      	subs	r3, #1
 8014938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801493a:	4b04      	ldr	r3, [pc, #16]	; (801494c <vPortSetupTimerInterrupt+0x34>)
 801493c:	2207      	movs	r2, #7
 801493e:	601a      	str	r2, [r3, #0]
}
 8014940:	bf00      	nop
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr
 801494a:	bf00      	nop
 801494c:	e000e010 	.word	0xe000e010
 8014950:	e000e018 	.word	0xe000e018
 8014954:	20000ce0 	.word	0x20000ce0
 8014958:	10624dd3 	.word	0x10624dd3
 801495c:	e000e014 	.word	0xe000e014

08014960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014970 <vPortEnableVFP+0x10>
 8014964:	6801      	ldr	r1, [r0, #0]
 8014966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801496a:	6001      	str	r1, [r0, #0]
 801496c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801496e:	bf00      	nop
 8014970:	e000ed88 	.word	0xe000ed88

08014974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014974:	b480      	push	{r7}
 8014976:	b085      	sub	sp, #20
 8014978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801497a:	f3ef 8305 	mrs	r3, IPSR
 801497e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	2b0f      	cmp	r3, #15
 8014984:	d913      	bls.n	80149ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014986:	4a16      	ldr	r2, [pc, #88]	; (80149e0 <vPortValidateInterruptPriority+0x6c>)
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	4413      	add	r3, r2
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014990:	4b14      	ldr	r3, [pc, #80]	; (80149e4 <vPortValidateInterruptPriority+0x70>)
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	7afa      	ldrb	r2, [r7, #11]
 8014996:	429a      	cmp	r2, r3
 8014998:	d209      	bcs.n	80149ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801499e:	f383 8811 	msr	BASEPRI, r3
 80149a2:	f3bf 8f6f 	isb	sy
 80149a6:	f3bf 8f4f 	dsb	sy
 80149aa:	607b      	str	r3, [r7, #4]
 80149ac:	e7fe      	b.n	80149ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80149ae:	4b0e      	ldr	r3, [pc, #56]	; (80149e8 <vPortValidateInterruptPriority+0x74>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80149b6:	4b0d      	ldr	r3, [pc, #52]	; (80149ec <vPortValidateInterruptPriority+0x78>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d909      	bls.n	80149d2 <vPortValidateInterruptPriority+0x5e>
 80149be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c2:	f383 8811 	msr	BASEPRI, r3
 80149c6:	f3bf 8f6f 	isb	sy
 80149ca:	f3bf 8f4f 	dsb	sy
 80149ce:	603b      	str	r3, [r7, #0]
 80149d0:	e7fe      	b.n	80149d0 <vPortValidateInterruptPriority+0x5c>
	}
 80149d2:	bf00      	nop
 80149d4:	3714      	adds	r7, #20
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr
 80149de:	bf00      	nop
 80149e0:	e000e3f0 	.word	0xe000e3f0
 80149e4:	200015e4 	.word	0x200015e4
 80149e8:	e000ed0c 	.word	0xe000ed0c
 80149ec:	200015e8 	.word	0x200015e8

080149f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08a      	sub	sp, #40	; 0x28
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80149f8:	2300      	movs	r3, #0
 80149fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80149fc:	f7fe fe18 	bl	8013630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014a00:	4b57      	ldr	r3, [pc, #348]	; (8014b60 <pvPortMalloc+0x170>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d101      	bne.n	8014a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014a08:	f000 f90c 	bl	8014c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a0c:	4b55      	ldr	r3, [pc, #340]	; (8014b64 <pvPortMalloc+0x174>)
 8014a0e:	681a      	ldr	r2, [r3, #0]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	4013      	ands	r3, r2
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	f040 808c 	bne.w	8014b32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d01c      	beq.n	8014a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014a20:	2208      	movs	r2, #8
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	4413      	add	r3, r2
 8014a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f003 0307 	and.w	r3, r3, #7
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d013      	beq.n	8014a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f023 0307 	bic.w	r3, r3, #7
 8014a38:	3308      	adds	r3, #8
 8014a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f003 0307 	and.w	r3, r3, #7
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <pvPortMalloc+0x6a>
 8014a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4a:	f383 8811 	msr	BASEPRI, r3
 8014a4e:	f3bf 8f6f 	isb	sy
 8014a52:	f3bf 8f4f 	dsb	sy
 8014a56:	617b      	str	r3, [r7, #20]
 8014a58:	e7fe      	b.n	8014a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d068      	beq.n	8014b32 <pvPortMalloc+0x142>
 8014a60:	4b41      	ldr	r3, [pc, #260]	; (8014b68 <pvPortMalloc+0x178>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d863      	bhi.n	8014b32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014a6a:	4b40      	ldr	r3, [pc, #256]	; (8014b6c <pvPortMalloc+0x17c>)
 8014a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014a6e:	4b3f      	ldr	r3, [pc, #252]	; (8014b6c <pvPortMalloc+0x17c>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014a74:	e004      	b.n	8014a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d903      	bls.n	8014a92 <pvPortMalloc+0xa2>
 8014a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d1f1      	bne.n	8014a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014a92:	4b33      	ldr	r3, [pc, #204]	; (8014b60 <pvPortMalloc+0x170>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d04a      	beq.n	8014b32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014a9c:	6a3b      	ldr	r3, [r7, #32]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2208      	movs	r2, #8
 8014aa2:	4413      	add	r3, r2
 8014aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	6a3b      	ldr	r3, [r7, #32]
 8014aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab0:	685a      	ldr	r2, [r3, #4]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	1ad2      	subs	r2, r2, r3
 8014ab6:	2308      	movs	r3, #8
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d91e      	bls.n	8014afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	f003 0307 	and.w	r3, r3, #7
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d009      	beq.n	8014ae4 <pvPortMalloc+0xf4>
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	613b      	str	r3, [r7, #16]
 8014ae2:	e7fe      	b.n	8014ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae6:	685a      	ldr	r2, [r3, #4]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	1ad2      	subs	r2, r2, r3
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014af6:	69b8      	ldr	r0, [r7, #24]
 8014af8:	f000 f8f6 	bl	8014ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014afc:	4b1a      	ldr	r3, [pc, #104]	; (8014b68 <pvPortMalloc+0x178>)
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	1ad3      	subs	r3, r2, r3
 8014b06:	4a18      	ldr	r2, [pc, #96]	; (8014b68 <pvPortMalloc+0x178>)
 8014b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b0a:	4b17      	ldr	r3, [pc, #92]	; (8014b68 <pvPortMalloc+0x178>)
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	4b18      	ldr	r3, [pc, #96]	; (8014b70 <pvPortMalloc+0x180>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d203      	bcs.n	8014b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b16:	4b14      	ldr	r3, [pc, #80]	; (8014b68 <pvPortMalloc+0x178>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	4a15      	ldr	r2, [pc, #84]	; (8014b70 <pvPortMalloc+0x180>)
 8014b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b20:	685a      	ldr	r2, [r3, #4]
 8014b22:	4b10      	ldr	r3, [pc, #64]	; (8014b64 <pvPortMalloc+0x174>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	431a      	orrs	r2, r3
 8014b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2e:	2200      	movs	r2, #0
 8014b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014b32:	f7fe fd8b 	bl	801364c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	f003 0307 	and.w	r3, r3, #7
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d009      	beq.n	8014b54 <pvPortMalloc+0x164>
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	60fb      	str	r3, [r7, #12]
 8014b52:	e7fe      	b.n	8014b52 <pvPortMalloc+0x162>
	return pvReturn;
 8014b54:	69fb      	ldr	r3, [r7, #28]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3728      	adds	r7, #40	; 0x28
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	200051f4 	.word	0x200051f4
 8014b64:	20005200 	.word	0x20005200
 8014b68:	200051f8 	.word	0x200051f8
 8014b6c:	200051ec 	.word	0x200051ec
 8014b70:	200051fc 	.word	0x200051fc

08014b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b086      	sub	sp, #24
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d046      	beq.n	8014c14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014b86:	2308      	movs	r3, #8
 8014b88:	425b      	negs	r3, r3
 8014b8a:	697a      	ldr	r2, [r7, #20]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	685a      	ldr	r2, [r3, #4]
 8014b98:	4b20      	ldr	r3, [pc, #128]	; (8014c1c <vPortFree+0xa8>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4013      	ands	r3, r2
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d109      	bne.n	8014bb6 <vPortFree+0x42>
 8014ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	60fb      	str	r3, [r7, #12]
 8014bb4:	e7fe      	b.n	8014bb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d009      	beq.n	8014bd2 <vPortFree+0x5e>
 8014bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	60bb      	str	r3, [r7, #8]
 8014bd0:	e7fe      	b.n	8014bd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	685a      	ldr	r2, [r3, #4]
 8014bd6:	4b11      	ldr	r3, [pc, #68]	; (8014c1c <vPortFree+0xa8>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4013      	ands	r3, r2
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d019      	beq.n	8014c14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d115      	bne.n	8014c14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	685a      	ldr	r2, [r3, #4]
 8014bec:	4b0b      	ldr	r3, [pc, #44]	; (8014c1c <vPortFree+0xa8>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	43db      	mvns	r3, r3
 8014bf2:	401a      	ands	r2, r3
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014bf8:	f7fe fd1a 	bl	8013630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	685a      	ldr	r2, [r3, #4]
 8014c00:	4b07      	ldr	r3, [pc, #28]	; (8014c20 <vPortFree+0xac>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4413      	add	r3, r2
 8014c06:	4a06      	ldr	r2, [pc, #24]	; (8014c20 <vPortFree+0xac>)
 8014c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c0a:	6938      	ldr	r0, [r7, #16]
 8014c0c:	f000 f86c 	bl	8014ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014c10:	f7fe fd1c 	bl	801364c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c14:	bf00      	nop
 8014c16:	3718      	adds	r7, #24
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	20005200 	.word	0x20005200
 8014c20:	200051f8 	.word	0x200051f8

08014c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014c30:	4b27      	ldr	r3, [pc, #156]	; (8014cd0 <prvHeapInit+0xac>)
 8014c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f003 0307 	and.w	r3, r3, #7
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d00c      	beq.n	8014c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	3307      	adds	r3, #7
 8014c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f023 0307 	bic.w	r3, r3, #7
 8014c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014c4c:	68ba      	ldr	r2, [r7, #8]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	4a1f      	ldr	r2, [pc, #124]	; (8014cd0 <prvHeapInit+0xac>)
 8014c54:	4413      	add	r3, r2
 8014c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014c5c:	4a1d      	ldr	r2, [pc, #116]	; (8014cd4 <prvHeapInit+0xb0>)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014c62:	4b1c      	ldr	r3, [pc, #112]	; (8014cd4 <prvHeapInit+0xb0>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014c70:	2208      	movs	r2, #8
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f023 0307 	bic.w	r3, r3, #7
 8014c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	4a15      	ldr	r2, [pc, #84]	; (8014cd8 <prvHeapInit+0xb4>)
 8014c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014c86:	4b14      	ldr	r3, [pc, #80]	; (8014cd8 <prvHeapInit+0xb4>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014c8e:	4b12      	ldr	r3, [pc, #72]	; (8014cd8 <prvHeapInit+0xb4>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2200      	movs	r2, #0
 8014c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	68fa      	ldr	r2, [r7, #12]
 8014c9e:	1ad2      	subs	r2, r2, r3
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014ca4:	4b0c      	ldr	r3, [pc, #48]	; (8014cd8 <prvHeapInit+0xb4>)
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	4a0a      	ldr	r2, [pc, #40]	; (8014cdc <prvHeapInit+0xb8>)
 8014cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	4a09      	ldr	r2, [pc, #36]	; (8014ce0 <prvHeapInit+0xbc>)
 8014cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014cbc:	4b09      	ldr	r3, [pc, #36]	; (8014ce4 <prvHeapInit+0xc0>)
 8014cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014cc2:	601a      	str	r2, [r3, #0]
}
 8014cc4:	bf00      	nop
 8014cc6:	3714      	adds	r7, #20
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr
 8014cd0:	200015ec 	.word	0x200015ec
 8014cd4:	200051ec 	.word	0x200051ec
 8014cd8:	200051f4 	.word	0x200051f4
 8014cdc:	200051fc 	.word	0x200051fc
 8014ce0:	200051f8 	.word	0x200051f8
 8014ce4:	20005200 	.word	0x20005200

08014ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b085      	sub	sp, #20
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014cf0:	4b28      	ldr	r3, [pc, #160]	; (8014d94 <prvInsertBlockIntoFreeList+0xac>)
 8014cf2:	60fb      	str	r3, [r7, #12]
 8014cf4:	e002      	b.n	8014cfc <prvInsertBlockIntoFreeList+0x14>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d8f7      	bhi.n	8014cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	685b      	ldr	r3, [r3, #4]
 8014d0e:	68ba      	ldr	r2, [r7, #8]
 8014d10:	4413      	add	r3, r2
 8014d12:	687a      	ldr	r2, [r7, #4]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d108      	bne.n	8014d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	685a      	ldr	r2, [r3, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	685b      	ldr	r3, [r3, #4]
 8014d20:	441a      	add	r2, r3
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	68ba      	ldr	r2, [r7, #8]
 8014d34:	441a      	add	r2, r3
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d118      	bne.n	8014d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	4b15      	ldr	r3, [pc, #84]	; (8014d98 <prvInsertBlockIntoFreeList+0xb0>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d00d      	beq.n	8014d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	685a      	ldr	r2, [r3, #4]
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	441a      	add	r2, r3
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	601a      	str	r2, [r3, #0]
 8014d64:	e008      	b.n	8014d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014d66:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <prvInsertBlockIntoFreeList+0xb0>)
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	e003      	b.n	8014d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d002      	beq.n	8014d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d86:	bf00      	nop
 8014d88:	3714      	adds	r7, #20
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr
 8014d92:	bf00      	nop
 8014d94:	200051ec 	.word	0x200051ec
 8014d98:	200051f4 	.word	0x200051f4

08014d9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014da0:	2200      	movs	r2, #0
 8014da2:	4912      	ldr	r1, [pc, #72]	; (8014dec <MX_USB_DEVICE_Init+0x50>)
 8014da4:	4812      	ldr	r0, [pc, #72]	; (8014df0 <MX_USB_DEVICE_Init+0x54>)
 8014da6:	f7fb fe07 	bl	80109b8 <USBD_Init>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d001      	beq.n	8014db4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014db0:	f7ee fea6 	bl	8003b00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014db4:	490f      	ldr	r1, [pc, #60]	; (8014df4 <MX_USB_DEVICE_Init+0x58>)
 8014db6:	480e      	ldr	r0, [pc, #56]	; (8014df0 <MX_USB_DEVICE_Init+0x54>)
 8014db8:	f7fb fe29 	bl	8010a0e <USBD_RegisterClass>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d001      	beq.n	8014dc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014dc2:	f7ee fe9d 	bl	8003b00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014dc6:	490c      	ldr	r1, [pc, #48]	; (8014df8 <MX_USB_DEVICE_Init+0x5c>)
 8014dc8:	4809      	ldr	r0, [pc, #36]	; (8014df0 <MX_USB_DEVICE_Init+0x54>)
 8014dca:	f7fb fd57 	bl	801087c <USBD_CDC_RegisterInterface>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d001      	beq.n	8014dd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014dd4:	f7ee fe94 	bl	8003b00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014dd8:	4805      	ldr	r0, [pc, #20]	; (8014df0 <MX_USB_DEVICE_Init+0x54>)
 8014dda:	f7fb fe32 	bl	8010a42 <USBD_Start>
 8014dde:	4603      	mov	r3, r0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d001      	beq.n	8014de8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014de4:	f7ee fe8c 	bl	8003b00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014de8:	bf00      	nop
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	20000e10 	.word	0x20000e10
 8014df0:	200061dc 	.word	0x200061dc
 8014df4:	20000cf8 	.word	0x20000cf8
 8014df8:	20000e00 	.word	0x20000e00

08014dfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014e00:	2200      	movs	r2, #0
 8014e02:	4905      	ldr	r1, [pc, #20]	; (8014e18 <CDC_Init_FS+0x1c>)
 8014e04:	4805      	ldr	r0, [pc, #20]	; (8014e1c <CDC_Init_FS+0x20>)
 8014e06:	f7fb fd50 	bl	80108aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014e0a:	4905      	ldr	r1, [pc, #20]	; (8014e20 <CDC_Init_FS+0x24>)
 8014e0c:	4803      	ldr	r0, [pc, #12]	; (8014e1c <CDC_Init_FS+0x20>)
 8014e0e:	f7fb fd66 	bl	80108de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014e12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	20006678 	.word	0x20006678
 8014e1c:	200061dc 	.word	0x200061dc
 8014e20:	20006478 	.word	0x20006478

08014e24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014e24:	b480      	push	{r7}
 8014e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014e28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr

08014e34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	6039      	str	r1, [r7, #0]
 8014e3e:	71fb      	strb	r3, [r7, #7]
 8014e40:	4613      	mov	r3, r2
 8014e42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014e44:	79fb      	ldrb	r3, [r7, #7]
 8014e46:	2b23      	cmp	r3, #35	; 0x23
 8014e48:	f200 808c 	bhi.w	8014f64 <CDC_Control_FS+0x130>
 8014e4c:	a201      	add	r2, pc, #4	; (adr r2, 8014e54 <CDC_Control_FS+0x20>)
 8014e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e52:	bf00      	nop
 8014e54:	08014f65 	.word	0x08014f65
 8014e58:	08014f65 	.word	0x08014f65
 8014e5c:	08014f65 	.word	0x08014f65
 8014e60:	08014f65 	.word	0x08014f65
 8014e64:	08014f65 	.word	0x08014f65
 8014e68:	08014f65 	.word	0x08014f65
 8014e6c:	08014f65 	.word	0x08014f65
 8014e70:	08014f65 	.word	0x08014f65
 8014e74:	08014f65 	.word	0x08014f65
 8014e78:	08014f65 	.word	0x08014f65
 8014e7c:	08014f65 	.word	0x08014f65
 8014e80:	08014f65 	.word	0x08014f65
 8014e84:	08014f65 	.word	0x08014f65
 8014e88:	08014f65 	.word	0x08014f65
 8014e8c:	08014f65 	.word	0x08014f65
 8014e90:	08014f65 	.word	0x08014f65
 8014e94:	08014f65 	.word	0x08014f65
 8014e98:	08014f65 	.word	0x08014f65
 8014e9c:	08014f65 	.word	0x08014f65
 8014ea0:	08014f65 	.word	0x08014f65
 8014ea4:	08014f65 	.word	0x08014f65
 8014ea8:	08014f65 	.word	0x08014f65
 8014eac:	08014f65 	.word	0x08014f65
 8014eb0:	08014f65 	.word	0x08014f65
 8014eb4:	08014f65 	.word	0x08014f65
 8014eb8:	08014f65 	.word	0x08014f65
 8014ebc:	08014f65 	.word	0x08014f65
 8014ec0:	08014f65 	.word	0x08014f65
 8014ec4:	08014f65 	.word	0x08014f65
 8014ec8:	08014f65 	.word	0x08014f65
 8014ecc:	08014f65 	.word	0x08014f65
 8014ed0:	08014f65 	.word	0x08014f65
 8014ed4:	08014ee5 	.word	0x08014ee5
 8014ed8:	08014f1f 	.word	0x08014f1f
 8014edc:	08014f65 	.word	0x08014f65
 8014ee0:	08014f65 	.word	0x08014f65
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	781a      	ldrb	r2, [r3, #0]
 8014ee8:	4b22      	ldr	r3, [pc, #136]	; (8014f74 <CDC_Control_FS+0x140>)
 8014eea:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	785a      	ldrb	r2, [r3, #1]
 8014ef0:	4b20      	ldr	r3, [pc, #128]	; (8014f74 <CDC_Control_FS+0x140>)
 8014ef2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	789a      	ldrb	r2, [r3, #2]
 8014ef8:	4b1e      	ldr	r3, [pc, #120]	; (8014f74 <CDC_Control_FS+0x140>)
 8014efa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	78da      	ldrb	r2, [r3, #3]
 8014f00:	4b1c      	ldr	r3, [pc, #112]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f02:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	791a      	ldrb	r2, [r3, #4]
 8014f08:	4b1a      	ldr	r3, [pc, #104]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f0a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	795a      	ldrb	r2, [r3, #5]
 8014f10:	4b18      	ldr	r3, [pc, #96]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f12:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	799a      	ldrb	r2, [r3, #6]
 8014f18:	4b16      	ldr	r3, [pc, #88]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f1a:	719a      	strb	r2, [r3, #6]
    	break;
 8014f1c:	e023      	b.n	8014f66 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8014f1e:	4b15      	ldr	r3, [pc, #84]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f20:	781a      	ldrb	r2, [r3, #0]
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	4a12      	ldr	r2, [pc, #72]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f2c:	7852      	ldrb	r2, [r2, #1]
 8014f2e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	3302      	adds	r3, #2
 8014f34:	4a0f      	ldr	r2, [pc, #60]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f36:	7892      	ldrb	r2, [r2, #2]
 8014f38:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	3303      	adds	r3, #3
 8014f3e:	4a0d      	ldr	r2, [pc, #52]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f40:	78d2      	ldrb	r2, [r2, #3]
 8014f42:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	3304      	adds	r3, #4
 8014f48:	4a0a      	ldr	r2, [pc, #40]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f4a:	7912      	ldrb	r2, [r2, #4]
 8014f4c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	3305      	adds	r3, #5
 8014f52:	4a08      	ldr	r2, [pc, #32]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f54:	7952      	ldrb	r2, [r2, #5]
 8014f56:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	3306      	adds	r3, #6
 8014f5c:	4a05      	ldr	r2, [pc, #20]	; (8014f74 <CDC_Control_FS+0x140>)
 8014f5e:	7992      	ldrb	r2, [r2, #6]
 8014f60:	701a      	strb	r2, [r3, #0]
    break;
 8014f62:	e000      	b.n	8014f66 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014f64:	bf00      	nop
  }

  return (USBD_OK);
 8014f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr
 8014f74:	20006878 	.word	0x20006878

08014f78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	461a      	mov	r2, r3
 8014f8a:	6879      	ldr	r1, [r7, #4]
 8014f8c:	4807      	ldr	r0, [pc, #28]	; (8014fac <CDC_Receive_FS+0x34>)
 8014f8e:	f7ee fe2e 	bl	8003bee <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014f92:	6879      	ldr	r1, [r7, #4]
 8014f94:	4806      	ldr	r0, [pc, #24]	; (8014fb0 <CDC_Receive_FS+0x38>)
 8014f96:	f7fb fca2 	bl	80108de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014f9a:	4805      	ldr	r0, [pc, #20]	; (8014fb0 <CDC_Receive_FS+0x38>)
 8014f9c:	f7fb fce2 	bl	8010964 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014fa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3708      	adds	r7, #8
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	2000007c 	.word	0x2000007c
 8014fb0:	200061dc 	.word	0x200061dc

08014fb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014fc4:	4b0d      	ldr	r3, [pc, #52]	; (8014ffc <CDC_Transmit_FS+0x48>)
 8014fc6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014fca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d001      	beq.n	8014fda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	e00b      	b.n	8014ff2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014fda:	887b      	ldrh	r3, [r7, #2]
 8014fdc:	461a      	mov	r2, r3
 8014fde:	6879      	ldr	r1, [r7, #4]
 8014fe0:	4806      	ldr	r0, [pc, #24]	; (8014ffc <CDC_Transmit_FS+0x48>)
 8014fe2:	f7fb fc62 	bl	80108aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014fe6:	4805      	ldr	r0, [pc, #20]	; (8014ffc <CDC_Transmit_FS+0x48>)
 8014fe8:	f7fb fc8d 	bl	8010906 <USBD_CDC_TransmitPacket>
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	200061dc 	.word	0x200061dc

08015000 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
 8015006:	4603      	mov	r3, r0
 8015008:	6039      	str	r1, [r7, #0]
 801500a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	2212      	movs	r2, #18
 8015010:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015012:	4b03      	ldr	r3, [pc, #12]	; (8015020 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015014:	4618      	mov	r0, r3
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr
 8015020:	20000e2c 	.word	0x20000e2c

08015024 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015024:	b480      	push	{r7}
 8015026:	b083      	sub	sp, #12
 8015028:	af00      	add	r7, sp, #0
 801502a:	4603      	mov	r3, r0
 801502c:	6039      	str	r1, [r7, #0]
 801502e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	2204      	movs	r2, #4
 8015034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015036:	4b03      	ldr	r3, [pc, #12]	; (8015044 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015038:	4618      	mov	r0, r3
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr
 8015044:	20000e40 	.word	0x20000e40

08015048 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	4603      	mov	r3, r0
 8015050:	6039      	str	r1, [r7, #0]
 8015052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015054:	79fb      	ldrb	r3, [r7, #7]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d105      	bne.n	8015066 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	4907      	ldr	r1, [pc, #28]	; (801507c <USBD_FS_ProductStrDescriptor+0x34>)
 801505e:	4808      	ldr	r0, [pc, #32]	; (8015080 <USBD_FS_ProductStrDescriptor+0x38>)
 8015060:	f7fc fc26 	bl	80118b0 <USBD_GetString>
 8015064:	e004      	b.n	8015070 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	4904      	ldr	r1, [pc, #16]	; (801507c <USBD_FS_ProductStrDescriptor+0x34>)
 801506a:	4805      	ldr	r0, [pc, #20]	; (8015080 <USBD_FS_ProductStrDescriptor+0x38>)
 801506c:	f7fc fc20 	bl	80118b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015070:	4b02      	ldr	r3, [pc, #8]	; (801507c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	20006880 	.word	0x20006880
 8015080:	0801bb74 	.word	0x0801bb74

08015084 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	4603      	mov	r3, r0
 801508c:	6039      	str	r1, [r7, #0]
 801508e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015090:	683a      	ldr	r2, [r7, #0]
 8015092:	4904      	ldr	r1, [pc, #16]	; (80150a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015094:	4804      	ldr	r0, [pc, #16]	; (80150a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015096:	f7fc fc0b 	bl	80118b0 <USBD_GetString>
  return USBD_StrDesc;
 801509a:	4b02      	ldr	r3, [pc, #8]	; (80150a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801509c:	4618      	mov	r0, r3
 801509e:	3708      	adds	r7, #8
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	20006880 	.word	0x20006880
 80150a8:	0801bb8c 	.word	0x0801bb8c

080150ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	4603      	mov	r3, r0
 80150b4:	6039      	str	r1, [r7, #0]
 80150b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	221a      	movs	r2, #26
 80150bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80150be:	f000 f843 	bl	8015148 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80150c2:	4b02      	ldr	r3, [pc, #8]	; (80150cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	20000e44 	.word	0x20000e44

080150d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	6039      	str	r1, [r7, #0]
 80150da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80150dc:	79fb      	ldrb	r3, [r7, #7]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d105      	bne.n	80150ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	4907      	ldr	r1, [pc, #28]	; (8015104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80150e6:	4808      	ldr	r0, [pc, #32]	; (8015108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150e8:	f7fc fbe2 	bl	80118b0 <USBD_GetString>
 80150ec:	e004      	b.n	80150f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80150ee:	683a      	ldr	r2, [r7, #0]
 80150f0:	4904      	ldr	r1, [pc, #16]	; (8015104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80150f2:	4805      	ldr	r0, [pc, #20]	; (8015108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150f4:	f7fc fbdc 	bl	80118b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80150f8:	4b02      	ldr	r3, [pc, #8]	; (8015104 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3708      	adds	r7, #8
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	20006880 	.word	0x20006880
 8015108:	0801bba0 	.word	0x0801bba0

0801510c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	4603      	mov	r3, r0
 8015114:	6039      	str	r1, [r7, #0]
 8015116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015118:	79fb      	ldrb	r3, [r7, #7]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d105      	bne.n	801512a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801511e:	683a      	ldr	r2, [r7, #0]
 8015120:	4907      	ldr	r1, [pc, #28]	; (8015140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015122:	4808      	ldr	r0, [pc, #32]	; (8015144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015124:	f7fc fbc4 	bl	80118b0 <USBD_GetString>
 8015128:	e004      	b.n	8015134 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801512a:	683a      	ldr	r2, [r7, #0]
 801512c:	4904      	ldr	r1, [pc, #16]	; (8015140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801512e:	4805      	ldr	r0, [pc, #20]	; (8015144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015130:	f7fc fbbe 	bl	80118b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015134:	4b02      	ldr	r3, [pc, #8]	; (8015140 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015136:	4618      	mov	r0, r3
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	20006880 	.word	0x20006880
 8015144:	0801bbac 	.word	0x0801bbac

08015148 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801514e:	4b0f      	ldr	r3, [pc, #60]	; (801518c <Get_SerialNum+0x44>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015154:	4b0e      	ldr	r3, [pc, #56]	; (8015190 <Get_SerialNum+0x48>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801515a:	4b0e      	ldr	r3, [pc, #56]	; (8015194 <Get_SerialNum+0x4c>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4413      	add	r3, r2
 8015166:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d009      	beq.n	8015182 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801516e:	2208      	movs	r2, #8
 8015170:	4909      	ldr	r1, [pc, #36]	; (8015198 <Get_SerialNum+0x50>)
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f000 f814 	bl	80151a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015178:	2204      	movs	r2, #4
 801517a:	4908      	ldr	r1, [pc, #32]	; (801519c <Get_SerialNum+0x54>)
 801517c:	68b8      	ldr	r0, [r7, #8]
 801517e:	f000 f80f 	bl	80151a0 <IntToUnicode>
  }
}
 8015182:	bf00      	nop
 8015184:	3710      	adds	r7, #16
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	1fff7a10 	.word	0x1fff7a10
 8015190:	1fff7a14 	.word	0x1fff7a14
 8015194:	1fff7a18 	.word	0x1fff7a18
 8015198:	20000e46 	.word	0x20000e46
 801519c:	20000e56 	.word	0x20000e56

080151a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b087      	sub	sp, #28
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	4613      	mov	r3, r2
 80151ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80151b2:	2300      	movs	r3, #0
 80151b4:	75fb      	strb	r3, [r7, #23]
 80151b6:	e027      	b.n	8015208 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	0f1b      	lsrs	r3, r3, #28
 80151bc:	2b09      	cmp	r3, #9
 80151be:	d80b      	bhi.n	80151d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	0f1b      	lsrs	r3, r3, #28
 80151c4:	b2da      	uxtb	r2, r3
 80151c6:	7dfb      	ldrb	r3, [r7, #23]
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	4619      	mov	r1, r3
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	440b      	add	r3, r1
 80151d0:	3230      	adds	r2, #48	; 0x30
 80151d2:	b2d2      	uxtb	r2, r2
 80151d4:	701a      	strb	r2, [r3, #0]
 80151d6:	e00a      	b.n	80151ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	0f1b      	lsrs	r3, r3, #28
 80151dc:	b2da      	uxtb	r2, r3
 80151de:	7dfb      	ldrb	r3, [r7, #23]
 80151e0:	005b      	lsls	r3, r3, #1
 80151e2:	4619      	mov	r1, r3
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	440b      	add	r3, r1
 80151e8:	3237      	adds	r2, #55	; 0x37
 80151ea:	b2d2      	uxtb	r2, r2
 80151ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	011b      	lsls	r3, r3, #4
 80151f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80151f4:	7dfb      	ldrb	r3, [r7, #23]
 80151f6:	005b      	lsls	r3, r3, #1
 80151f8:	3301      	adds	r3, #1
 80151fa:	68ba      	ldr	r2, [r7, #8]
 80151fc:	4413      	add	r3, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015202:	7dfb      	ldrb	r3, [r7, #23]
 8015204:	3301      	adds	r3, #1
 8015206:	75fb      	strb	r3, [r7, #23]
 8015208:	7dfa      	ldrb	r2, [r7, #23]
 801520a:	79fb      	ldrb	r3, [r7, #7]
 801520c:	429a      	cmp	r2, r3
 801520e:	d3d3      	bcc.n	80151b8 <IntToUnicode+0x18>
  }
}
 8015210:	bf00      	nop
 8015212:	371c      	adds	r7, #28
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr

0801521c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b08a      	sub	sp, #40	; 0x28
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015224:	f107 0314 	add.w	r3, r7, #20
 8015228:	2200      	movs	r2, #0
 801522a:	601a      	str	r2, [r3, #0]
 801522c:	605a      	str	r2, [r3, #4]
 801522e:	609a      	str	r2, [r3, #8]
 8015230:	60da      	str	r2, [r3, #12]
 8015232:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801523c:	d13a      	bne.n	80152b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801523e:	2300      	movs	r3, #0
 8015240:	613b      	str	r3, [r7, #16]
 8015242:	4b1e      	ldr	r3, [pc, #120]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 8015244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015246:	4a1d      	ldr	r2, [pc, #116]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 8015248:	f043 0301 	orr.w	r3, r3, #1
 801524c:	6313      	str	r3, [r2, #48]	; 0x30
 801524e:	4b1b      	ldr	r3, [pc, #108]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 8015250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015252:	f003 0301 	and.w	r3, r3, #1
 8015256:	613b      	str	r3, [r7, #16]
 8015258:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801525a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801525e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015260:	2302      	movs	r3, #2
 8015262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015264:	2300      	movs	r3, #0
 8015266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015268:	2303      	movs	r3, #3
 801526a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801526c:	230a      	movs	r3, #10
 801526e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015270:	f107 0314 	add.w	r3, r7, #20
 8015274:	4619      	mov	r1, r3
 8015276:	4812      	ldr	r0, [pc, #72]	; (80152c0 <HAL_PCD_MspInit+0xa4>)
 8015278:	f7f6 fb38 	bl	800b8ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801527c:	4b0f      	ldr	r3, [pc, #60]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 801527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015280:	4a0e      	ldr	r2, [pc, #56]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 8015282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015286:	6353      	str	r3, [r2, #52]	; 0x34
 8015288:	2300      	movs	r3, #0
 801528a:	60fb      	str	r3, [r7, #12]
 801528c:	4b0b      	ldr	r3, [pc, #44]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 801528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015290:	4a0a      	ldr	r2, [pc, #40]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 8015292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015296:	6453      	str	r3, [r2, #68]	; 0x44
 8015298:	4b08      	ldr	r3, [pc, #32]	; (80152bc <HAL_PCD_MspInit+0xa0>)
 801529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801529c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80152a0:	60fb      	str	r3, [r7, #12]
 80152a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80152a4:	2200      	movs	r2, #0
 80152a6:	2105      	movs	r1, #5
 80152a8:	2043      	movs	r0, #67	; 0x43
 80152aa:	f7f5 ff57 	bl	800b15c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80152ae:	2043      	movs	r0, #67	; 0x43
 80152b0:	f7f5 ff70 	bl	800b194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80152b4:	bf00      	nop
 80152b6:	3728      	adds	r7, #40	; 0x28
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	40023800 	.word	0x40023800
 80152c0:	40020000 	.word	0x40020000

080152c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80152d8:	4619      	mov	r1, r3
 80152da:	4610      	mov	r0, r2
 80152dc:	f7fb fbfa 	bl	8010ad4 <USBD_LL_SetupStage>
}
 80152e0:	bf00      	nop
 80152e2:	3708      	adds	r7, #8
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	460b      	mov	r3, r1
 80152f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80152fa:	78fa      	ldrb	r2, [r7, #3]
 80152fc:	6879      	ldr	r1, [r7, #4]
 80152fe:	4613      	mov	r3, r2
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	1a9b      	subs	r3, r3, r2
 8015304:	009b      	lsls	r3, r3, #2
 8015306:	440b      	add	r3, r1
 8015308:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	78fb      	ldrb	r3, [r7, #3]
 8015310:	4619      	mov	r1, r3
 8015312:	f7fb fc2a 	bl	8010b6a <USBD_LL_DataOutStage>
}
 8015316:	bf00      	nop
 8015318:	3708      	adds	r7, #8
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801531e:	b580      	push	{r7, lr}
 8015320:	b082      	sub	sp, #8
 8015322:	af00      	add	r7, sp, #0
 8015324:	6078      	str	r0, [r7, #4]
 8015326:	460b      	mov	r3, r1
 8015328:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015330:	78fa      	ldrb	r2, [r7, #3]
 8015332:	6879      	ldr	r1, [r7, #4]
 8015334:	4613      	mov	r3, r2
 8015336:	00db      	lsls	r3, r3, #3
 8015338:	1a9b      	subs	r3, r3, r2
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	440b      	add	r3, r1
 801533e:	3348      	adds	r3, #72	; 0x48
 8015340:	681a      	ldr	r2, [r3, #0]
 8015342:	78fb      	ldrb	r3, [r7, #3]
 8015344:	4619      	mov	r1, r3
 8015346:	f7fb fc81 	bl	8010c4c <USBD_LL_DataInStage>
}
 801534a:	bf00      	nop
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015352:	b580      	push	{r7, lr}
 8015354:	b082      	sub	sp, #8
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015360:	4618      	mov	r0, r3
 8015362:	f7fb fd8f 	bl	8010e84 <USBD_LL_SOF>
}
 8015366:	bf00      	nop
 8015368:	3708      	adds	r7, #8
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}

0801536e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801536e:	b580      	push	{r7, lr}
 8015370:	b084      	sub	sp, #16
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015376:	2301      	movs	r3, #1
 8015378:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	68db      	ldr	r3, [r3, #12]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d102      	bne.n	8015388 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015382:	2300      	movs	r3, #0
 8015384:	73fb      	strb	r3, [r7, #15]
 8015386:	e008      	b.n	801539a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	68db      	ldr	r3, [r3, #12]
 801538c:	2b02      	cmp	r3, #2
 801538e:	d102      	bne.n	8015396 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015390:	2301      	movs	r3, #1
 8015392:	73fb      	strb	r3, [r7, #15]
 8015394:	e001      	b.n	801539a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015396:	f7ee fbb3 	bl	8003b00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153a0:	7bfa      	ldrb	r2, [r7, #15]
 80153a2:	4611      	mov	r1, r2
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fb fd37 	bl	8010e18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fb fcf0 	bl	8010d96 <USBD_LL_Reset>
}
 80153b6:	bf00      	nop
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
	...

080153c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fb fd32 	bl	8010e38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	6812      	ldr	r2, [r2, #0]
 80153e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80153e6:	f043 0301 	orr.w	r3, r3, #1
 80153ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6a1b      	ldr	r3, [r3, #32]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d005      	beq.n	8015400 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80153f4:	4b04      	ldr	r3, [pc, #16]	; (8015408 <HAL_PCD_SuspendCallback+0x48>)
 80153f6:	691b      	ldr	r3, [r3, #16]
 80153f8:	4a03      	ldr	r2, [pc, #12]	; (8015408 <HAL_PCD_SuspendCallback+0x48>)
 80153fa:	f043 0306 	orr.w	r3, r3, #6
 80153fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	e000ed00 	.word	0xe000ed00

0801540c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801541a:	4618      	mov	r0, r3
 801541c:	f7fb fd21 	bl	8010e62 <USBD_LL_Resume>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	460b      	mov	r3, r1
 8015432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801543a:	78fa      	ldrb	r2, [r7, #3]
 801543c:	4611      	mov	r1, r2
 801543e:	4618      	mov	r0, r3
 8015440:	f7fb fd47 	bl	8010ed2 <USBD_LL_IsoOUTIncomplete>
}
 8015444:	bf00      	nop
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	460b      	mov	r3, r1
 8015456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801545e:	78fa      	ldrb	r2, [r7, #3]
 8015460:	4611      	mov	r1, r2
 8015462:	4618      	mov	r0, r3
 8015464:	f7fb fd28 	bl	8010eb8 <USBD_LL_IsoINIncomplete>
}
 8015468:	bf00      	nop
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801547e:	4618      	mov	r0, r3
 8015480:	f7fb fd34 	bl	8010eec <USBD_LL_DevConnected>
}
 8015484:	bf00      	nop
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801549a:	4618      	mov	r0, r3
 801549c:	f7fb fd31 	bl	8010f02 <USBD_LL_DevDisconnected>
}
 80154a0:	bf00      	nop
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}

080154a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d13c      	bne.n	8015532 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80154b8:	4a20      	ldr	r2, [pc, #128]	; (801553c <USBD_LL_Init+0x94>)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	4a1e      	ldr	r2, [pc, #120]	; (801553c <USBD_LL_Init+0x94>)
 80154c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80154c8:	4b1c      	ldr	r3, [pc, #112]	; (801553c <USBD_LL_Init+0x94>)
 80154ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80154ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80154d0:	4b1a      	ldr	r3, [pc, #104]	; (801553c <USBD_LL_Init+0x94>)
 80154d2:	2204      	movs	r2, #4
 80154d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80154d6:	4b19      	ldr	r3, [pc, #100]	; (801553c <USBD_LL_Init+0x94>)
 80154d8:	2202      	movs	r2, #2
 80154da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80154dc:	4b17      	ldr	r3, [pc, #92]	; (801553c <USBD_LL_Init+0x94>)
 80154de:	2200      	movs	r2, #0
 80154e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80154e2:	4b16      	ldr	r3, [pc, #88]	; (801553c <USBD_LL_Init+0x94>)
 80154e4:	2202      	movs	r2, #2
 80154e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80154e8:	4b14      	ldr	r3, [pc, #80]	; (801553c <USBD_LL_Init+0x94>)
 80154ea:	2200      	movs	r2, #0
 80154ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80154ee:	4b13      	ldr	r3, [pc, #76]	; (801553c <USBD_LL_Init+0x94>)
 80154f0:	2200      	movs	r2, #0
 80154f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80154f4:	4b11      	ldr	r3, [pc, #68]	; (801553c <USBD_LL_Init+0x94>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80154fa:	4b10      	ldr	r3, [pc, #64]	; (801553c <USBD_LL_Init+0x94>)
 80154fc:	2200      	movs	r2, #0
 80154fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015500:	4b0e      	ldr	r3, [pc, #56]	; (801553c <USBD_LL_Init+0x94>)
 8015502:	2200      	movs	r2, #0
 8015504:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015506:	480d      	ldr	r0, [pc, #52]	; (801553c <USBD_LL_Init+0x94>)
 8015508:	f7f6 fbfa 	bl	800bd00 <HAL_PCD_Init>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d001      	beq.n	8015516 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015512:	f7ee faf5 	bl	8003b00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015516:	2180      	movs	r1, #128	; 0x80
 8015518:	4808      	ldr	r0, [pc, #32]	; (801553c <USBD_LL_Init+0x94>)
 801551a:	f7f7 fd5e 	bl	800cfda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801551e:	2240      	movs	r2, #64	; 0x40
 8015520:	2100      	movs	r1, #0
 8015522:	4806      	ldr	r0, [pc, #24]	; (801553c <USBD_LL_Init+0x94>)
 8015524:	f7f7 fd12 	bl	800cf4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015528:	2280      	movs	r2, #128	; 0x80
 801552a:	2101      	movs	r1, #1
 801552c:	4803      	ldr	r0, [pc, #12]	; (801553c <USBD_LL_Init+0x94>)
 801552e:	f7f7 fd0d 	bl	800cf4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015532:	2300      	movs	r3, #0
}
 8015534:	4618      	mov	r0, r3
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	20006a80 	.word	0x20006a80

08015540 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015548:	2300      	movs	r3, #0
 801554a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015556:	4618      	mov	r0, r3
 8015558:	f7f6 fcef 	bl	800bf3a <HAL_PCD_Start>
 801555c:	4603      	mov	r3, r0
 801555e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015560:	7bfb      	ldrb	r3, [r7, #15]
 8015562:	4618      	mov	r0, r3
 8015564:	f000 f92e 	bl	80157c4 <USBD_Get_USB_Status>
 8015568:	4603      	mov	r3, r0
 801556a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801556c:	7bbb      	ldrb	r3, [r7, #14]
}
 801556e:	4618      	mov	r0, r3
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b084      	sub	sp, #16
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
 801557e:	4608      	mov	r0, r1
 8015580:	4611      	mov	r1, r2
 8015582:	461a      	mov	r2, r3
 8015584:	4603      	mov	r3, r0
 8015586:	70fb      	strb	r3, [r7, #3]
 8015588:	460b      	mov	r3, r1
 801558a:	70bb      	strb	r3, [r7, #2]
 801558c:	4613      	mov	r3, r2
 801558e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015590:	2300      	movs	r3, #0
 8015592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801559e:	78bb      	ldrb	r3, [r7, #2]
 80155a0:	883a      	ldrh	r2, [r7, #0]
 80155a2:	78f9      	ldrb	r1, [r7, #3]
 80155a4:	f7f7 f8c4 	bl	800c730 <HAL_PCD_EP_Open>
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 f908 	bl	80157c4 <USBD_Get_USB_Status>
 80155b4:	4603      	mov	r3, r0
 80155b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80155b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3710      	adds	r7, #16
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b084      	sub	sp, #16
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
 80155ca:	460b      	mov	r3, r1
 80155cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155ce:	2300      	movs	r3, #0
 80155d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155d2:	2300      	movs	r3, #0
 80155d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80155dc:	78fa      	ldrb	r2, [r7, #3]
 80155de:	4611      	mov	r1, r2
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7f7 f90d 	bl	800c800 <HAL_PCD_EP_Close>
 80155e6:	4603      	mov	r3, r0
 80155e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80155ea:	7bfb      	ldrb	r3, [r7, #15]
 80155ec:	4618      	mov	r0, r3
 80155ee:	f000 f8e9 	bl	80157c4 <USBD_Get_USB_Status>
 80155f2:	4603      	mov	r3, r0
 80155f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80155f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3710      	adds	r7, #16
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	460b      	mov	r3, r1
 801560a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801560c:	2300      	movs	r3, #0
 801560e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015610:	2300      	movs	r3, #0
 8015612:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801561a:	78fa      	ldrb	r2, [r7, #3]
 801561c:	4611      	mov	r1, r2
 801561e:	4618      	mov	r0, r3
 8015620:	f7f7 f9e5 	bl	800c9ee <HAL_PCD_EP_SetStall>
 8015624:	4603      	mov	r3, r0
 8015626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015628:	7bfb      	ldrb	r3, [r7, #15]
 801562a:	4618      	mov	r0, r3
 801562c:	f000 f8ca 	bl	80157c4 <USBD_Get_USB_Status>
 8015630:	4603      	mov	r3, r0
 8015632:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015634:	7bbb      	ldrb	r3, [r7, #14]
}
 8015636:	4618      	mov	r0, r3
 8015638:	3710      	adds	r7, #16
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b084      	sub	sp, #16
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	460b      	mov	r3, r1
 8015648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801564a:	2300      	movs	r3, #0
 801564c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801564e:	2300      	movs	r3, #0
 8015650:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015658:	78fa      	ldrb	r2, [r7, #3]
 801565a:	4611      	mov	r1, r2
 801565c:	4618      	mov	r0, r3
 801565e:	f7f7 fa2a 	bl	800cab6 <HAL_PCD_EP_ClrStall>
 8015662:	4603      	mov	r3, r0
 8015664:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015666:	7bfb      	ldrb	r3, [r7, #15]
 8015668:	4618      	mov	r0, r3
 801566a:	f000 f8ab 	bl	80157c4 <USBD_Get_USB_Status>
 801566e:	4603      	mov	r3, r0
 8015670:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015672:	7bbb      	ldrb	r3, [r7, #14]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3710      	adds	r7, #16
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801567c:	b480      	push	{r7}
 801567e:	b085      	sub	sp, #20
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	460b      	mov	r3, r1
 8015686:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801568e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015694:	2b00      	cmp	r3, #0
 8015696:	da0b      	bge.n	80156b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015698:	78fb      	ldrb	r3, [r7, #3]
 801569a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801569e:	68f9      	ldr	r1, [r7, #12]
 80156a0:	4613      	mov	r3, r2
 80156a2:	00db      	lsls	r3, r3, #3
 80156a4:	1a9b      	subs	r3, r3, r2
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	440b      	add	r3, r1
 80156aa:	333e      	adds	r3, #62	; 0x3e
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	e00b      	b.n	80156c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80156b0:	78fb      	ldrb	r3, [r7, #3]
 80156b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80156b6:	68f9      	ldr	r1, [r7, #12]
 80156b8:	4613      	mov	r3, r2
 80156ba:	00db      	lsls	r3, r3, #3
 80156bc:	1a9b      	subs	r3, r3, r2
 80156be:	009b      	lsls	r3, r3, #2
 80156c0:	440b      	add	r3, r1
 80156c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80156c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3714      	adds	r7, #20
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	460b      	mov	r3, r1
 80156de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156e0:	2300      	movs	r3, #0
 80156e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156e4:	2300      	movs	r3, #0
 80156e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80156ee:	78fa      	ldrb	r2, [r7, #3]
 80156f0:	4611      	mov	r1, r2
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7f6 fff7 	bl	800c6e6 <HAL_PCD_SetAddress>
 80156f8:	4603      	mov	r3, r0
 80156fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80156fc:	7bfb      	ldrb	r3, [r7, #15]
 80156fe:	4618      	mov	r0, r3
 8015700:	f000 f860 	bl	80157c4 <USBD_Get_USB_Status>
 8015704:	4603      	mov	r3, r0
 8015706:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015708:	7bbb      	ldrb	r3, [r7, #14]
}
 801570a:	4618      	mov	r0, r3
 801570c:	3710      	adds	r7, #16
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b086      	sub	sp, #24
 8015716:	af00      	add	r7, sp, #0
 8015718:	60f8      	str	r0, [r7, #12]
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	461a      	mov	r2, r3
 801571e:	460b      	mov	r3, r1
 8015720:	72fb      	strb	r3, [r7, #11]
 8015722:	4613      	mov	r3, r2
 8015724:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015726:	2300      	movs	r3, #0
 8015728:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801572a:	2300      	movs	r3, #0
 801572c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015734:	893b      	ldrh	r3, [r7, #8]
 8015736:	7af9      	ldrb	r1, [r7, #11]
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	f7f7 f90e 	bl	800c95a <HAL_PCD_EP_Transmit>
 801573e:	4603      	mov	r3, r0
 8015740:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015742:	7dfb      	ldrb	r3, [r7, #23]
 8015744:	4618      	mov	r0, r3
 8015746:	f000 f83d 	bl	80157c4 <USBD_Get_USB_Status>
 801574a:	4603      	mov	r3, r0
 801574c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801574e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015750:	4618      	mov	r0, r3
 8015752:	3718      	adds	r7, #24
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}

08015758 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	607a      	str	r2, [r7, #4]
 8015762:	461a      	mov	r2, r3
 8015764:	460b      	mov	r3, r1
 8015766:	72fb      	strb	r3, [r7, #11]
 8015768:	4613      	mov	r3, r2
 801576a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801576c:	2300      	movs	r3, #0
 801576e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015770:	2300      	movs	r3, #0
 8015772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801577a:	893b      	ldrh	r3, [r7, #8]
 801577c:	7af9      	ldrb	r1, [r7, #11]
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	f7f7 f888 	bl	800c894 <HAL_PCD_EP_Receive>
 8015784:	4603      	mov	r3, r0
 8015786:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015788:	7dfb      	ldrb	r3, [r7, #23]
 801578a:	4618      	mov	r0, r3
 801578c:	f000 f81a 	bl	80157c4 <USBD_Get_USB_Status>
 8015790:	4603      	mov	r3, r0
 8015792:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015794:	7dbb      	ldrb	r3, [r7, #22]
}
 8015796:	4618      	mov	r0, r3
 8015798:	3718      	adds	r7, #24
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}

0801579e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801579e:	b580      	push	{r7, lr}
 80157a0:	b082      	sub	sp, #8
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	6078      	str	r0, [r7, #4]
 80157a6:	460b      	mov	r3, r1
 80157a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80157b0:	78fa      	ldrb	r2, [r7, #3]
 80157b2:	4611      	mov	r1, r2
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f7 f8b8 	bl	800c92a <HAL_PCD_EP_GetRxCount>
 80157ba:	4603      	mov	r3, r0
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157ce:	2300      	movs	r3, #0
 80157d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80157d2:	79fb      	ldrb	r3, [r7, #7]
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d817      	bhi.n	8015808 <USBD_Get_USB_Status+0x44>
 80157d8:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <USBD_Get_USB_Status+0x1c>)
 80157da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157de:	bf00      	nop
 80157e0:	080157f1 	.word	0x080157f1
 80157e4:	080157f7 	.word	0x080157f7
 80157e8:	080157fd 	.word	0x080157fd
 80157ec:	08015803 	.word	0x08015803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80157f0:	2300      	movs	r3, #0
 80157f2:	73fb      	strb	r3, [r7, #15]
    break;
 80157f4:	e00b      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80157f6:	2302      	movs	r3, #2
 80157f8:	73fb      	strb	r3, [r7, #15]
    break;
 80157fa:	e008      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80157fc:	2301      	movs	r3, #1
 80157fe:	73fb      	strb	r3, [r7, #15]
    break;
 8015800:	e005      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015802:	2302      	movs	r3, #2
 8015804:	73fb      	strb	r3, [r7, #15]
    break;
 8015806:	e002      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015808:	2302      	movs	r3, #2
 801580a:	73fb      	strb	r3, [r7, #15]
    break;
 801580c:	bf00      	nop
  }
  return usb_status;
 801580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015810:	4618      	mov	r0, r3
 8015812:	3714      	adds	r7, #20
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <__errno>:
 801581c:	4b01      	ldr	r3, [pc, #4]	; (8015824 <__errno+0x8>)
 801581e:	6818      	ldr	r0, [r3, #0]
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	20000e60 	.word	0x20000e60

08015828 <__libc_init_array>:
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	4e0d      	ldr	r6, [pc, #52]	; (8015860 <__libc_init_array+0x38>)
 801582c:	4c0d      	ldr	r4, [pc, #52]	; (8015864 <__libc_init_array+0x3c>)
 801582e:	1ba4      	subs	r4, r4, r6
 8015830:	10a4      	asrs	r4, r4, #2
 8015832:	2500      	movs	r5, #0
 8015834:	42a5      	cmp	r5, r4
 8015836:	d109      	bne.n	801584c <__libc_init_array+0x24>
 8015838:	4e0b      	ldr	r6, [pc, #44]	; (8015868 <__libc_init_array+0x40>)
 801583a:	4c0c      	ldr	r4, [pc, #48]	; (801586c <__libc_init_array+0x44>)
 801583c:	f005 fece 	bl	801b5dc <_init>
 8015840:	1ba4      	subs	r4, r4, r6
 8015842:	10a4      	asrs	r4, r4, #2
 8015844:	2500      	movs	r5, #0
 8015846:	42a5      	cmp	r5, r4
 8015848:	d105      	bne.n	8015856 <__libc_init_array+0x2e>
 801584a:	bd70      	pop	{r4, r5, r6, pc}
 801584c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015850:	4798      	blx	r3
 8015852:	3501      	adds	r5, #1
 8015854:	e7ee      	b.n	8015834 <__libc_init_array+0xc>
 8015856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801585a:	4798      	blx	r3
 801585c:	3501      	adds	r5, #1
 801585e:	e7f2      	b.n	8015846 <__libc_init_array+0x1e>
 8015860:	0801c148 	.word	0x0801c148
 8015864:	0801c148 	.word	0x0801c148
 8015868:	0801c148 	.word	0x0801c148
 801586c:	0801c14c 	.word	0x0801c14c

08015870 <malloc>:
 8015870:	4b02      	ldr	r3, [pc, #8]	; (801587c <malloc+0xc>)
 8015872:	4601      	mov	r1, r0
 8015874:	6818      	ldr	r0, [r3, #0]
 8015876:	f000 b885 	b.w	8015984 <_malloc_r>
 801587a:	bf00      	nop
 801587c:	20000e60 	.word	0x20000e60

08015880 <free>:
 8015880:	4b02      	ldr	r3, [pc, #8]	; (801588c <free+0xc>)
 8015882:	4601      	mov	r1, r0
 8015884:	6818      	ldr	r0, [r3, #0]
 8015886:	f000 b82f 	b.w	80158e8 <_free_r>
 801588a:	bf00      	nop
 801588c:	20000e60 	.word	0x20000e60

08015890 <memcpy>:
 8015890:	b510      	push	{r4, lr}
 8015892:	1e43      	subs	r3, r0, #1
 8015894:	440a      	add	r2, r1
 8015896:	4291      	cmp	r1, r2
 8015898:	d100      	bne.n	801589c <memcpy+0xc>
 801589a:	bd10      	pop	{r4, pc}
 801589c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158a4:	e7f7      	b.n	8015896 <memcpy+0x6>

080158a6 <memmove>:
 80158a6:	4288      	cmp	r0, r1
 80158a8:	b510      	push	{r4, lr}
 80158aa:	eb01 0302 	add.w	r3, r1, r2
 80158ae:	d807      	bhi.n	80158c0 <memmove+0x1a>
 80158b0:	1e42      	subs	r2, r0, #1
 80158b2:	4299      	cmp	r1, r3
 80158b4:	d00a      	beq.n	80158cc <memmove+0x26>
 80158b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80158be:	e7f8      	b.n	80158b2 <memmove+0xc>
 80158c0:	4283      	cmp	r3, r0
 80158c2:	d9f5      	bls.n	80158b0 <memmove+0xa>
 80158c4:	1881      	adds	r1, r0, r2
 80158c6:	1ad2      	subs	r2, r2, r3
 80158c8:	42d3      	cmn	r3, r2
 80158ca:	d100      	bne.n	80158ce <memmove+0x28>
 80158cc:	bd10      	pop	{r4, pc}
 80158ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80158d6:	e7f7      	b.n	80158c8 <memmove+0x22>

080158d8 <memset>:
 80158d8:	4402      	add	r2, r0
 80158da:	4603      	mov	r3, r0
 80158dc:	4293      	cmp	r3, r2
 80158de:	d100      	bne.n	80158e2 <memset+0xa>
 80158e0:	4770      	bx	lr
 80158e2:	f803 1b01 	strb.w	r1, [r3], #1
 80158e6:	e7f9      	b.n	80158dc <memset+0x4>

080158e8 <_free_r>:
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	4605      	mov	r5, r0
 80158ec:	2900      	cmp	r1, #0
 80158ee:	d045      	beq.n	801597c <_free_r+0x94>
 80158f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158f4:	1f0c      	subs	r4, r1, #4
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	bfb8      	it	lt
 80158fa:	18e4      	addlt	r4, r4, r3
 80158fc:	f002 ffce 	bl	801889c <__malloc_lock>
 8015900:	4a1f      	ldr	r2, [pc, #124]	; (8015980 <_free_r+0x98>)
 8015902:	6813      	ldr	r3, [r2, #0]
 8015904:	4610      	mov	r0, r2
 8015906:	b933      	cbnz	r3, 8015916 <_free_r+0x2e>
 8015908:	6063      	str	r3, [r4, #4]
 801590a:	6014      	str	r4, [r2, #0]
 801590c:	4628      	mov	r0, r5
 801590e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015912:	f002 bfc4 	b.w	801889e <__malloc_unlock>
 8015916:	42a3      	cmp	r3, r4
 8015918:	d90c      	bls.n	8015934 <_free_r+0x4c>
 801591a:	6821      	ldr	r1, [r4, #0]
 801591c:	1862      	adds	r2, r4, r1
 801591e:	4293      	cmp	r3, r2
 8015920:	bf04      	itt	eq
 8015922:	681a      	ldreq	r2, [r3, #0]
 8015924:	685b      	ldreq	r3, [r3, #4]
 8015926:	6063      	str	r3, [r4, #4]
 8015928:	bf04      	itt	eq
 801592a:	1852      	addeq	r2, r2, r1
 801592c:	6022      	streq	r2, [r4, #0]
 801592e:	6004      	str	r4, [r0, #0]
 8015930:	e7ec      	b.n	801590c <_free_r+0x24>
 8015932:	4613      	mov	r3, r2
 8015934:	685a      	ldr	r2, [r3, #4]
 8015936:	b10a      	cbz	r2, 801593c <_free_r+0x54>
 8015938:	42a2      	cmp	r2, r4
 801593a:	d9fa      	bls.n	8015932 <_free_r+0x4a>
 801593c:	6819      	ldr	r1, [r3, #0]
 801593e:	1858      	adds	r0, r3, r1
 8015940:	42a0      	cmp	r0, r4
 8015942:	d10b      	bne.n	801595c <_free_r+0x74>
 8015944:	6820      	ldr	r0, [r4, #0]
 8015946:	4401      	add	r1, r0
 8015948:	1858      	adds	r0, r3, r1
 801594a:	4282      	cmp	r2, r0
 801594c:	6019      	str	r1, [r3, #0]
 801594e:	d1dd      	bne.n	801590c <_free_r+0x24>
 8015950:	6810      	ldr	r0, [r2, #0]
 8015952:	6852      	ldr	r2, [r2, #4]
 8015954:	605a      	str	r2, [r3, #4]
 8015956:	4401      	add	r1, r0
 8015958:	6019      	str	r1, [r3, #0]
 801595a:	e7d7      	b.n	801590c <_free_r+0x24>
 801595c:	d902      	bls.n	8015964 <_free_r+0x7c>
 801595e:	230c      	movs	r3, #12
 8015960:	602b      	str	r3, [r5, #0]
 8015962:	e7d3      	b.n	801590c <_free_r+0x24>
 8015964:	6820      	ldr	r0, [r4, #0]
 8015966:	1821      	adds	r1, r4, r0
 8015968:	428a      	cmp	r2, r1
 801596a:	bf04      	itt	eq
 801596c:	6811      	ldreq	r1, [r2, #0]
 801596e:	6852      	ldreq	r2, [r2, #4]
 8015970:	6062      	str	r2, [r4, #4]
 8015972:	bf04      	itt	eq
 8015974:	1809      	addeq	r1, r1, r0
 8015976:	6021      	streq	r1, [r4, #0]
 8015978:	605c      	str	r4, [r3, #4]
 801597a:	e7c7      	b.n	801590c <_free_r+0x24>
 801597c:	bd38      	pop	{r3, r4, r5, pc}
 801597e:	bf00      	nop
 8015980:	20005204 	.word	0x20005204

08015984 <_malloc_r>:
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	1ccd      	adds	r5, r1, #3
 8015988:	f025 0503 	bic.w	r5, r5, #3
 801598c:	3508      	adds	r5, #8
 801598e:	2d0c      	cmp	r5, #12
 8015990:	bf38      	it	cc
 8015992:	250c      	movcc	r5, #12
 8015994:	2d00      	cmp	r5, #0
 8015996:	4606      	mov	r6, r0
 8015998:	db01      	blt.n	801599e <_malloc_r+0x1a>
 801599a:	42a9      	cmp	r1, r5
 801599c:	d903      	bls.n	80159a6 <_malloc_r+0x22>
 801599e:	230c      	movs	r3, #12
 80159a0:	6033      	str	r3, [r6, #0]
 80159a2:	2000      	movs	r0, #0
 80159a4:	bd70      	pop	{r4, r5, r6, pc}
 80159a6:	f002 ff79 	bl	801889c <__malloc_lock>
 80159aa:	4a21      	ldr	r2, [pc, #132]	; (8015a30 <_malloc_r+0xac>)
 80159ac:	6814      	ldr	r4, [r2, #0]
 80159ae:	4621      	mov	r1, r4
 80159b0:	b991      	cbnz	r1, 80159d8 <_malloc_r+0x54>
 80159b2:	4c20      	ldr	r4, [pc, #128]	; (8015a34 <_malloc_r+0xb0>)
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	b91b      	cbnz	r3, 80159c0 <_malloc_r+0x3c>
 80159b8:	4630      	mov	r0, r6
 80159ba:	f000 fe7b 	bl	80166b4 <_sbrk_r>
 80159be:	6020      	str	r0, [r4, #0]
 80159c0:	4629      	mov	r1, r5
 80159c2:	4630      	mov	r0, r6
 80159c4:	f000 fe76 	bl	80166b4 <_sbrk_r>
 80159c8:	1c43      	adds	r3, r0, #1
 80159ca:	d124      	bne.n	8015a16 <_malloc_r+0x92>
 80159cc:	230c      	movs	r3, #12
 80159ce:	6033      	str	r3, [r6, #0]
 80159d0:	4630      	mov	r0, r6
 80159d2:	f002 ff64 	bl	801889e <__malloc_unlock>
 80159d6:	e7e4      	b.n	80159a2 <_malloc_r+0x1e>
 80159d8:	680b      	ldr	r3, [r1, #0]
 80159da:	1b5b      	subs	r3, r3, r5
 80159dc:	d418      	bmi.n	8015a10 <_malloc_r+0x8c>
 80159de:	2b0b      	cmp	r3, #11
 80159e0:	d90f      	bls.n	8015a02 <_malloc_r+0x7e>
 80159e2:	600b      	str	r3, [r1, #0]
 80159e4:	50cd      	str	r5, [r1, r3]
 80159e6:	18cc      	adds	r4, r1, r3
 80159e8:	4630      	mov	r0, r6
 80159ea:	f002 ff58 	bl	801889e <__malloc_unlock>
 80159ee:	f104 000b 	add.w	r0, r4, #11
 80159f2:	1d23      	adds	r3, r4, #4
 80159f4:	f020 0007 	bic.w	r0, r0, #7
 80159f8:	1ac3      	subs	r3, r0, r3
 80159fa:	d0d3      	beq.n	80159a4 <_malloc_r+0x20>
 80159fc:	425a      	negs	r2, r3
 80159fe:	50e2      	str	r2, [r4, r3]
 8015a00:	e7d0      	b.n	80159a4 <_malloc_r+0x20>
 8015a02:	428c      	cmp	r4, r1
 8015a04:	684b      	ldr	r3, [r1, #4]
 8015a06:	bf16      	itet	ne
 8015a08:	6063      	strne	r3, [r4, #4]
 8015a0a:	6013      	streq	r3, [r2, #0]
 8015a0c:	460c      	movne	r4, r1
 8015a0e:	e7eb      	b.n	80159e8 <_malloc_r+0x64>
 8015a10:	460c      	mov	r4, r1
 8015a12:	6849      	ldr	r1, [r1, #4]
 8015a14:	e7cc      	b.n	80159b0 <_malloc_r+0x2c>
 8015a16:	1cc4      	adds	r4, r0, #3
 8015a18:	f024 0403 	bic.w	r4, r4, #3
 8015a1c:	42a0      	cmp	r0, r4
 8015a1e:	d005      	beq.n	8015a2c <_malloc_r+0xa8>
 8015a20:	1a21      	subs	r1, r4, r0
 8015a22:	4630      	mov	r0, r6
 8015a24:	f000 fe46 	bl	80166b4 <_sbrk_r>
 8015a28:	3001      	adds	r0, #1
 8015a2a:	d0cf      	beq.n	80159cc <_malloc_r+0x48>
 8015a2c:	6025      	str	r5, [r4, #0]
 8015a2e:	e7db      	b.n	80159e8 <_malloc_r+0x64>
 8015a30:	20005204 	.word	0x20005204
 8015a34:	20005208 	.word	0x20005208

08015a38 <__cvt>:
 8015a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a3c:	ec55 4b10 	vmov	r4, r5, d0
 8015a40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015a42:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a46:	2d00      	cmp	r5, #0
 8015a48:	460e      	mov	r6, r1
 8015a4a:	4691      	mov	r9, r2
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	bfb8      	it	lt
 8015a50:	4622      	movlt	r2, r4
 8015a52:	462b      	mov	r3, r5
 8015a54:	f027 0720 	bic.w	r7, r7, #32
 8015a58:	bfbb      	ittet	lt
 8015a5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a5e:	461d      	movlt	r5, r3
 8015a60:	2300      	movge	r3, #0
 8015a62:	232d      	movlt	r3, #45	; 0x2d
 8015a64:	bfb8      	it	lt
 8015a66:	4614      	movlt	r4, r2
 8015a68:	2f46      	cmp	r7, #70	; 0x46
 8015a6a:	700b      	strb	r3, [r1, #0]
 8015a6c:	d004      	beq.n	8015a78 <__cvt+0x40>
 8015a6e:	2f45      	cmp	r7, #69	; 0x45
 8015a70:	d100      	bne.n	8015a74 <__cvt+0x3c>
 8015a72:	3601      	adds	r6, #1
 8015a74:	2102      	movs	r1, #2
 8015a76:	e000      	b.n	8015a7a <__cvt+0x42>
 8015a78:	2103      	movs	r1, #3
 8015a7a:	ab03      	add	r3, sp, #12
 8015a7c:	9301      	str	r3, [sp, #4]
 8015a7e:	ab02      	add	r3, sp, #8
 8015a80:	9300      	str	r3, [sp, #0]
 8015a82:	4632      	mov	r2, r6
 8015a84:	4653      	mov	r3, sl
 8015a86:	ec45 4b10 	vmov	d0, r4, r5
 8015a8a:	f001 fdf5 	bl	8017678 <_dtoa_r>
 8015a8e:	2f47      	cmp	r7, #71	; 0x47
 8015a90:	4680      	mov	r8, r0
 8015a92:	d102      	bne.n	8015a9a <__cvt+0x62>
 8015a94:	f019 0f01 	tst.w	r9, #1
 8015a98:	d026      	beq.n	8015ae8 <__cvt+0xb0>
 8015a9a:	2f46      	cmp	r7, #70	; 0x46
 8015a9c:	eb08 0906 	add.w	r9, r8, r6
 8015aa0:	d111      	bne.n	8015ac6 <__cvt+0x8e>
 8015aa2:	f898 3000 	ldrb.w	r3, [r8]
 8015aa6:	2b30      	cmp	r3, #48	; 0x30
 8015aa8:	d10a      	bne.n	8015ac0 <__cvt+0x88>
 8015aaa:	2200      	movs	r2, #0
 8015aac:	2300      	movs	r3, #0
 8015aae:	4620      	mov	r0, r4
 8015ab0:	4629      	mov	r1, r5
 8015ab2:	f7eb f819 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ab6:	b918      	cbnz	r0, 8015ac0 <__cvt+0x88>
 8015ab8:	f1c6 0601 	rsb	r6, r6, #1
 8015abc:	f8ca 6000 	str.w	r6, [sl]
 8015ac0:	f8da 3000 	ldr.w	r3, [sl]
 8015ac4:	4499      	add	r9, r3
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4620      	mov	r0, r4
 8015acc:	4629      	mov	r1, r5
 8015ace:	f7eb f80b 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ad2:	b938      	cbnz	r0, 8015ae4 <__cvt+0xac>
 8015ad4:	2230      	movs	r2, #48	; 0x30
 8015ad6:	9b03      	ldr	r3, [sp, #12]
 8015ad8:	454b      	cmp	r3, r9
 8015ada:	d205      	bcs.n	8015ae8 <__cvt+0xb0>
 8015adc:	1c59      	adds	r1, r3, #1
 8015ade:	9103      	str	r1, [sp, #12]
 8015ae0:	701a      	strb	r2, [r3, #0]
 8015ae2:	e7f8      	b.n	8015ad6 <__cvt+0x9e>
 8015ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ae8:	9b03      	ldr	r3, [sp, #12]
 8015aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aec:	eba3 0308 	sub.w	r3, r3, r8
 8015af0:	4640      	mov	r0, r8
 8015af2:	6013      	str	r3, [r2, #0]
 8015af4:	b004      	add	sp, #16
 8015af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015afa <__exponent>:
 8015afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015afc:	2900      	cmp	r1, #0
 8015afe:	4604      	mov	r4, r0
 8015b00:	bfba      	itte	lt
 8015b02:	4249      	neglt	r1, r1
 8015b04:	232d      	movlt	r3, #45	; 0x2d
 8015b06:	232b      	movge	r3, #43	; 0x2b
 8015b08:	2909      	cmp	r1, #9
 8015b0a:	f804 2b02 	strb.w	r2, [r4], #2
 8015b0e:	7043      	strb	r3, [r0, #1]
 8015b10:	dd20      	ble.n	8015b54 <__exponent+0x5a>
 8015b12:	f10d 0307 	add.w	r3, sp, #7
 8015b16:	461f      	mov	r7, r3
 8015b18:	260a      	movs	r6, #10
 8015b1a:	fb91 f5f6 	sdiv	r5, r1, r6
 8015b1e:	fb06 1115 	mls	r1, r6, r5, r1
 8015b22:	3130      	adds	r1, #48	; 0x30
 8015b24:	2d09      	cmp	r5, #9
 8015b26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015b2a:	f103 32ff 	add.w	r2, r3, #4294967295
 8015b2e:	4629      	mov	r1, r5
 8015b30:	dc09      	bgt.n	8015b46 <__exponent+0x4c>
 8015b32:	3130      	adds	r1, #48	; 0x30
 8015b34:	3b02      	subs	r3, #2
 8015b36:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015b3a:	42bb      	cmp	r3, r7
 8015b3c:	4622      	mov	r2, r4
 8015b3e:	d304      	bcc.n	8015b4a <__exponent+0x50>
 8015b40:	1a10      	subs	r0, r2, r0
 8015b42:	b003      	add	sp, #12
 8015b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b46:	4613      	mov	r3, r2
 8015b48:	e7e7      	b.n	8015b1a <__exponent+0x20>
 8015b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b4e:	f804 2b01 	strb.w	r2, [r4], #1
 8015b52:	e7f2      	b.n	8015b3a <__exponent+0x40>
 8015b54:	2330      	movs	r3, #48	; 0x30
 8015b56:	4419      	add	r1, r3
 8015b58:	7083      	strb	r3, [r0, #2]
 8015b5a:	1d02      	adds	r2, r0, #4
 8015b5c:	70c1      	strb	r1, [r0, #3]
 8015b5e:	e7ef      	b.n	8015b40 <__exponent+0x46>

08015b60 <_printf_float>:
 8015b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b64:	b08d      	sub	sp, #52	; 0x34
 8015b66:	460c      	mov	r4, r1
 8015b68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b6c:	4616      	mov	r6, r2
 8015b6e:	461f      	mov	r7, r3
 8015b70:	4605      	mov	r5, r0
 8015b72:	f002 fe73 	bl	801885c <_localeconv_r>
 8015b76:	6803      	ldr	r3, [r0, #0]
 8015b78:	9304      	str	r3, [sp, #16]
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7ea fb32 	bl	80001e4 <strlen>
 8015b80:	2300      	movs	r3, #0
 8015b82:	930a      	str	r3, [sp, #40]	; 0x28
 8015b84:	f8d8 3000 	ldr.w	r3, [r8]
 8015b88:	9005      	str	r0, [sp, #20]
 8015b8a:	3307      	adds	r3, #7
 8015b8c:	f023 0307 	bic.w	r3, r3, #7
 8015b90:	f103 0208 	add.w	r2, r3, #8
 8015b94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b98:	f8d4 b000 	ldr.w	fp, [r4]
 8015b9c:	f8c8 2000 	str.w	r2, [r8]
 8015ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015ba8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015bac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015bb0:	9307      	str	r3, [sp, #28]
 8015bb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8015bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8015bba:	4ba7      	ldr	r3, [pc, #668]	; (8015e58 <_printf_float+0x2f8>)
 8015bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bc0:	f7ea ffc4 	bl	8000b4c <__aeabi_dcmpun>
 8015bc4:	bb70      	cbnz	r0, 8015c24 <_printf_float+0xc4>
 8015bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8015bca:	4ba3      	ldr	r3, [pc, #652]	; (8015e58 <_printf_float+0x2f8>)
 8015bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bd0:	f7ea ff9e 	bl	8000b10 <__aeabi_dcmple>
 8015bd4:	bb30      	cbnz	r0, 8015c24 <_printf_float+0xc4>
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	2300      	movs	r3, #0
 8015bda:	4640      	mov	r0, r8
 8015bdc:	4649      	mov	r1, r9
 8015bde:	f7ea ff8d 	bl	8000afc <__aeabi_dcmplt>
 8015be2:	b110      	cbz	r0, 8015bea <_printf_float+0x8a>
 8015be4:	232d      	movs	r3, #45	; 0x2d
 8015be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bea:	4a9c      	ldr	r2, [pc, #624]	; (8015e5c <_printf_float+0x2fc>)
 8015bec:	4b9c      	ldr	r3, [pc, #624]	; (8015e60 <_printf_float+0x300>)
 8015bee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bf2:	bf8c      	ite	hi
 8015bf4:	4690      	movhi	r8, r2
 8015bf6:	4698      	movls	r8, r3
 8015bf8:	2303      	movs	r3, #3
 8015bfa:	f02b 0204 	bic.w	r2, fp, #4
 8015bfe:	6123      	str	r3, [r4, #16]
 8015c00:	6022      	str	r2, [r4, #0]
 8015c02:	f04f 0900 	mov.w	r9, #0
 8015c06:	9700      	str	r7, [sp, #0]
 8015c08:	4633      	mov	r3, r6
 8015c0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015c0c:	4621      	mov	r1, r4
 8015c0e:	4628      	mov	r0, r5
 8015c10:	f000 f9e6 	bl	8015fe0 <_printf_common>
 8015c14:	3001      	adds	r0, #1
 8015c16:	f040 808d 	bne.w	8015d34 <_printf_float+0x1d4>
 8015c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c1e:	b00d      	add	sp, #52	; 0x34
 8015c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c24:	4642      	mov	r2, r8
 8015c26:	464b      	mov	r3, r9
 8015c28:	4640      	mov	r0, r8
 8015c2a:	4649      	mov	r1, r9
 8015c2c:	f7ea ff8e 	bl	8000b4c <__aeabi_dcmpun>
 8015c30:	b110      	cbz	r0, 8015c38 <_printf_float+0xd8>
 8015c32:	4a8c      	ldr	r2, [pc, #560]	; (8015e64 <_printf_float+0x304>)
 8015c34:	4b8c      	ldr	r3, [pc, #560]	; (8015e68 <_printf_float+0x308>)
 8015c36:	e7da      	b.n	8015bee <_printf_float+0x8e>
 8015c38:	6861      	ldr	r1, [r4, #4]
 8015c3a:	1c4b      	adds	r3, r1, #1
 8015c3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015c40:	a80a      	add	r0, sp, #40	; 0x28
 8015c42:	d13e      	bne.n	8015cc2 <_printf_float+0x162>
 8015c44:	2306      	movs	r3, #6
 8015c46:	6063      	str	r3, [r4, #4]
 8015c48:	2300      	movs	r3, #0
 8015c4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c4e:	ab09      	add	r3, sp, #36	; 0x24
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	ec49 8b10 	vmov	d0, r8, r9
 8015c56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c5a:	6022      	str	r2, [r4, #0]
 8015c5c:	f8cd a004 	str.w	sl, [sp, #4]
 8015c60:	6861      	ldr	r1, [r4, #4]
 8015c62:	4628      	mov	r0, r5
 8015c64:	f7ff fee8 	bl	8015a38 <__cvt>
 8015c68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c6c:	2b47      	cmp	r3, #71	; 0x47
 8015c6e:	4680      	mov	r8, r0
 8015c70:	d109      	bne.n	8015c86 <_printf_float+0x126>
 8015c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c74:	1cd8      	adds	r0, r3, #3
 8015c76:	db02      	blt.n	8015c7e <_printf_float+0x11e>
 8015c78:	6862      	ldr	r2, [r4, #4]
 8015c7a:	4293      	cmp	r3, r2
 8015c7c:	dd47      	ble.n	8015d0e <_printf_float+0x1ae>
 8015c7e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c82:	fa5f fa8a 	uxtb.w	sl, sl
 8015c86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c8c:	d824      	bhi.n	8015cd8 <_printf_float+0x178>
 8015c8e:	3901      	subs	r1, #1
 8015c90:	4652      	mov	r2, sl
 8015c92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c96:	9109      	str	r1, [sp, #36]	; 0x24
 8015c98:	f7ff ff2f 	bl	8015afa <__exponent>
 8015c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c9e:	1813      	adds	r3, r2, r0
 8015ca0:	2a01      	cmp	r2, #1
 8015ca2:	4681      	mov	r9, r0
 8015ca4:	6123      	str	r3, [r4, #16]
 8015ca6:	dc02      	bgt.n	8015cae <_printf_float+0x14e>
 8015ca8:	6822      	ldr	r2, [r4, #0]
 8015caa:	07d1      	lsls	r1, r2, #31
 8015cac:	d501      	bpl.n	8015cb2 <_printf_float+0x152>
 8015cae:	3301      	adds	r3, #1
 8015cb0:	6123      	str	r3, [r4, #16]
 8015cb2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d0a5      	beq.n	8015c06 <_printf_float+0xa6>
 8015cba:	232d      	movs	r3, #45	; 0x2d
 8015cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc0:	e7a1      	b.n	8015c06 <_printf_float+0xa6>
 8015cc2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015cc6:	f000 8177 	beq.w	8015fb8 <_printf_float+0x458>
 8015cca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015cce:	d1bb      	bne.n	8015c48 <_printf_float+0xe8>
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d1b9      	bne.n	8015c48 <_printf_float+0xe8>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	e7b6      	b.n	8015c46 <_printf_float+0xe6>
 8015cd8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015cdc:	d119      	bne.n	8015d12 <_printf_float+0x1b2>
 8015cde:	2900      	cmp	r1, #0
 8015ce0:	6863      	ldr	r3, [r4, #4]
 8015ce2:	dd0c      	ble.n	8015cfe <_printf_float+0x19e>
 8015ce4:	6121      	str	r1, [r4, #16]
 8015ce6:	b913      	cbnz	r3, 8015cee <_printf_float+0x18e>
 8015ce8:	6822      	ldr	r2, [r4, #0]
 8015cea:	07d2      	lsls	r2, r2, #31
 8015cec:	d502      	bpl.n	8015cf4 <_printf_float+0x194>
 8015cee:	3301      	adds	r3, #1
 8015cf0:	440b      	add	r3, r1
 8015cf2:	6123      	str	r3, [r4, #16]
 8015cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015cf8:	f04f 0900 	mov.w	r9, #0
 8015cfc:	e7d9      	b.n	8015cb2 <_printf_float+0x152>
 8015cfe:	b913      	cbnz	r3, 8015d06 <_printf_float+0x1a6>
 8015d00:	6822      	ldr	r2, [r4, #0]
 8015d02:	07d0      	lsls	r0, r2, #31
 8015d04:	d501      	bpl.n	8015d0a <_printf_float+0x1aa>
 8015d06:	3302      	adds	r3, #2
 8015d08:	e7f3      	b.n	8015cf2 <_printf_float+0x192>
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	e7f1      	b.n	8015cf2 <_printf_float+0x192>
 8015d0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015d12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015d16:	4293      	cmp	r3, r2
 8015d18:	db05      	blt.n	8015d26 <_printf_float+0x1c6>
 8015d1a:	6822      	ldr	r2, [r4, #0]
 8015d1c:	6123      	str	r3, [r4, #16]
 8015d1e:	07d1      	lsls	r1, r2, #31
 8015d20:	d5e8      	bpl.n	8015cf4 <_printf_float+0x194>
 8015d22:	3301      	adds	r3, #1
 8015d24:	e7e5      	b.n	8015cf2 <_printf_float+0x192>
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	bfd4      	ite	le
 8015d2a:	f1c3 0302 	rsble	r3, r3, #2
 8015d2e:	2301      	movgt	r3, #1
 8015d30:	4413      	add	r3, r2
 8015d32:	e7de      	b.n	8015cf2 <_printf_float+0x192>
 8015d34:	6823      	ldr	r3, [r4, #0]
 8015d36:	055a      	lsls	r2, r3, #21
 8015d38:	d407      	bmi.n	8015d4a <_printf_float+0x1ea>
 8015d3a:	6923      	ldr	r3, [r4, #16]
 8015d3c:	4642      	mov	r2, r8
 8015d3e:	4631      	mov	r1, r6
 8015d40:	4628      	mov	r0, r5
 8015d42:	47b8      	blx	r7
 8015d44:	3001      	adds	r0, #1
 8015d46:	d12b      	bne.n	8015da0 <_printf_float+0x240>
 8015d48:	e767      	b.n	8015c1a <_printf_float+0xba>
 8015d4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d4e:	f240 80dc 	bls.w	8015f0a <_printf_float+0x3aa>
 8015d52:	2200      	movs	r2, #0
 8015d54:	2300      	movs	r3, #0
 8015d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d5a:	f7ea fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	d033      	beq.n	8015dca <_printf_float+0x26a>
 8015d62:	2301      	movs	r3, #1
 8015d64:	4a41      	ldr	r2, [pc, #260]	; (8015e6c <_printf_float+0x30c>)
 8015d66:	4631      	mov	r1, r6
 8015d68:	4628      	mov	r0, r5
 8015d6a:	47b8      	blx	r7
 8015d6c:	3001      	adds	r0, #1
 8015d6e:	f43f af54 	beq.w	8015c1a <_printf_float+0xba>
 8015d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d76:	429a      	cmp	r2, r3
 8015d78:	db02      	blt.n	8015d80 <_printf_float+0x220>
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	07d8      	lsls	r0, r3, #31
 8015d7e:	d50f      	bpl.n	8015da0 <_printf_float+0x240>
 8015d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d84:	4631      	mov	r1, r6
 8015d86:	4628      	mov	r0, r5
 8015d88:	47b8      	blx	r7
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	f43f af45 	beq.w	8015c1a <_printf_float+0xba>
 8015d90:	f04f 0800 	mov.w	r8, #0
 8015d94:	f104 091a 	add.w	r9, r4, #26
 8015d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	4543      	cmp	r3, r8
 8015d9e:	dc09      	bgt.n	8015db4 <_printf_float+0x254>
 8015da0:	6823      	ldr	r3, [r4, #0]
 8015da2:	079b      	lsls	r3, r3, #30
 8015da4:	f100 8103 	bmi.w	8015fae <_printf_float+0x44e>
 8015da8:	68e0      	ldr	r0, [r4, #12]
 8015daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dac:	4298      	cmp	r0, r3
 8015dae:	bfb8      	it	lt
 8015db0:	4618      	movlt	r0, r3
 8015db2:	e734      	b.n	8015c1e <_printf_float+0xbe>
 8015db4:	2301      	movs	r3, #1
 8015db6:	464a      	mov	r2, r9
 8015db8:	4631      	mov	r1, r6
 8015dba:	4628      	mov	r0, r5
 8015dbc:	47b8      	blx	r7
 8015dbe:	3001      	adds	r0, #1
 8015dc0:	f43f af2b 	beq.w	8015c1a <_printf_float+0xba>
 8015dc4:	f108 0801 	add.w	r8, r8, #1
 8015dc8:	e7e6      	b.n	8015d98 <_printf_float+0x238>
 8015dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	dc2b      	bgt.n	8015e28 <_printf_float+0x2c8>
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	4a26      	ldr	r2, [pc, #152]	; (8015e6c <_printf_float+0x30c>)
 8015dd4:	4631      	mov	r1, r6
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	47b8      	blx	r7
 8015dda:	3001      	adds	r0, #1
 8015ddc:	f43f af1d 	beq.w	8015c1a <_printf_float+0xba>
 8015de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de2:	b923      	cbnz	r3, 8015dee <_printf_float+0x28e>
 8015de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de6:	b913      	cbnz	r3, 8015dee <_printf_float+0x28e>
 8015de8:	6823      	ldr	r3, [r4, #0]
 8015dea:	07d9      	lsls	r1, r3, #31
 8015dec:	d5d8      	bpl.n	8015da0 <_printf_float+0x240>
 8015dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015df2:	4631      	mov	r1, r6
 8015df4:	4628      	mov	r0, r5
 8015df6:	47b8      	blx	r7
 8015df8:	3001      	adds	r0, #1
 8015dfa:	f43f af0e 	beq.w	8015c1a <_printf_float+0xba>
 8015dfe:	f04f 0900 	mov.w	r9, #0
 8015e02:	f104 0a1a 	add.w	sl, r4, #26
 8015e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e08:	425b      	negs	r3, r3
 8015e0a:	454b      	cmp	r3, r9
 8015e0c:	dc01      	bgt.n	8015e12 <_printf_float+0x2b2>
 8015e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e10:	e794      	b.n	8015d3c <_printf_float+0x1dc>
 8015e12:	2301      	movs	r3, #1
 8015e14:	4652      	mov	r2, sl
 8015e16:	4631      	mov	r1, r6
 8015e18:	4628      	mov	r0, r5
 8015e1a:	47b8      	blx	r7
 8015e1c:	3001      	adds	r0, #1
 8015e1e:	f43f aefc 	beq.w	8015c1a <_printf_float+0xba>
 8015e22:	f109 0901 	add.w	r9, r9, #1
 8015e26:	e7ee      	b.n	8015e06 <_printf_float+0x2a6>
 8015e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	bfa8      	it	ge
 8015e30:	461a      	movge	r2, r3
 8015e32:	2a00      	cmp	r2, #0
 8015e34:	4691      	mov	r9, r2
 8015e36:	dd07      	ble.n	8015e48 <_printf_float+0x2e8>
 8015e38:	4613      	mov	r3, r2
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	4642      	mov	r2, r8
 8015e3e:	4628      	mov	r0, r5
 8015e40:	47b8      	blx	r7
 8015e42:	3001      	adds	r0, #1
 8015e44:	f43f aee9 	beq.w	8015c1a <_printf_float+0xba>
 8015e48:	f104 031a 	add.w	r3, r4, #26
 8015e4c:	f04f 0b00 	mov.w	fp, #0
 8015e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e54:	9306      	str	r3, [sp, #24]
 8015e56:	e015      	b.n	8015e84 <_printf_float+0x324>
 8015e58:	7fefffff 	.word	0x7fefffff
 8015e5c:	0801bbf0 	.word	0x0801bbf0
 8015e60:	0801bbec 	.word	0x0801bbec
 8015e64:	0801bbf8 	.word	0x0801bbf8
 8015e68:	0801bbf4 	.word	0x0801bbf4
 8015e6c:	0801bdb3 	.word	0x0801bdb3
 8015e70:	2301      	movs	r3, #1
 8015e72:	9a06      	ldr	r2, [sp, #24]
 8015e74:	4631      	mov	r1, r6
 8015e76:	4628      	mov	r0, r5
 8015e78:	47b8      	blx	r7
 8015e7a:	3001      	adds	r0, #1
 8015e7c:	f43f aecd 	beq.w	8015c1a <_printf_float+0xba>
 8015e80:	f10b 0b01 	add.w	fp, fp, #1
 8015e84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e88:	ebaa 0309 	sub.w	r3, sl, r9
 8015e8c:	455b      	cmp	r3, fp
 8015e8e:	dcef      	bgt.n	8015e70 <_printf_float+0x310>
 8015e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e94:	429a      	cmp	r2, r3
 8015e96:	44d0      	add	r8, sl
 8015e98:	db15      	blt.n	8015ec6 <_printf_float+0x366>
 8015e9a:	6823      	ldr	r3, [r4, #0]
 8015e9c:	07da      	lsls	r2, r3, #31
 8015e9e:	d412      	bmi.n	8015ec6 <_printf_float+0x366>
 8015ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ea4:	eba3 020a 	sub.w	r2, r3, sl
 8015ea8:	eba3 0a01 	sub.w	sl, r3, r1
 8015eac:	4592      	cmp	sl, r2
 8015eae:	bfa8      	it	ge
 8015eb0:	4692      	movge	sl, r2
 8015eb2:	f1ba 0f00 	cmp.w	sl, #0
 8015eb6:	dc0e      	bgt.n	8015ed6 <_printf_float+0x376>
 8015eb8:	f04f 0800 	mov.w	r8, #0
 8015ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ec0:	f104 091a 	add.w	r9, r4, #26
 8015ec4:	e019      	b.n	8015efa <_printf_float+0x39a>
 8015ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015eca:	4631      	mov	r1, r6
 8015ecc:	4628      	mov	r0, r5
 8015ece:	47b8      	blx	r7
 8015ed0:	3001      	adds	r0, #1
 8015ed2:	d1e5      	bne.n	8015ea0 <_printf_float+0x340>
 8015ed4:	e6a1      	b.n	8015c1a <_printf_float+0xba>
 8015ed6:	4653      	mov	r3, sl
 8015ed8:	4642      	mov	r2, r8
 8015eda:	4631      	mov	r1, r6
 8015edc:	4628      	mov	r0, r5
 8015ede:	47b8      	blx	r7
 8015ee0:	3001      	adds	r0, #1
 8015ee2:	d1e9      	bne.n	8015eb8 <_printf_float+0x358>
 8015ee4:	e699      	b.n	8015c1a <_printf_float+0xba>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	464a      	mov	r2, r9
 8015eea:	4631      	mov	r1, r6
 8015eec:	4628      	mov	r0, r5
 8015eee:	47b8      	blx	r7
 8015ef0:	3001      	adds	r0, #1
 8015ef2:	f43f ae92 	beq.w	8015c1a <_printf_float+0xba>
 8015ef6:	f108 0801 	add.w	r8, r8, #1
 8015efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015efe:	1a9b      	subs	r3, r3, r2
 8015f00:	eba3 030a 	sub.w	r3, r3, sl
 8015f04:	4543      	cmp	r3, r8
 8015f06:	dcee      	bgt.n	8015ee6 <_printf_float+0x386>
 8015f08:	e74a      	b.n	8015da0 <_printf_float+0x240>
 8015f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f0c:	2a01      	cmp	r2, #1
 8015f0e:	dc01      	bgt.n	8015f14 <_printf_float+0x3b4>
 8015f10:	07db      	lsls	r3, r3, #31
 8015f12:	d53a      	bpl.n	8015f8a <_printf_float+0x42a>
 8015f14:	2301      	movs	r3, #1
 8015f16:	4642      	mov	r2, r8
 8015f18:	4631      	mov	r1, r6
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	47b8      	blx	r7
 8015f1e:	3001      	adds	r0, #1
 8015f20:	f43f ae7b 	beq.w	8015c1a <_printf_float+0xba>
 8015f24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f28:	4631      	mov	r1, r6
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	47b8      	blx	r7
 8015f2e:	3001      	adds	r0, #1
 8015f30:	f108 0801 	add.w	r8, r8, #1
 8015f34:	f43f ae71 	beq.w	8015c1a <_printf_float+0xba>
 8015f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f44:	2300      	movs	r3, #0
 8015f46:	f7ea fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8015f4a:	b9c8      	cbnz	r0, 8015f80 <_printf_float+0x420>
 8015f4c:	4653      	mov	r3, sl
 8015f4e:	4642      	mov	r2, r8
 8015f50:	4631      	mov	r1, r6
 8015f52:	4628      	mov	r0, r5
 8015f54:	47b8      	blx	r7
 8015f56:	3001      	adds	r0, #1
 8015f58:	d10e      	bne.n	8015f78 <_printf_float+0x418>
 8015f5a:	e65e      	b.n	8015c1a <_printf_float+0xba>
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	4652      	mov	r2, sl
 8015f60:	4631      	mov	r1, r6
 8015f62:	4628      	mov	r0, r5
 8015f64:	47b8      	blx	r7
 8015f66:	3001      	adds	r0, #1
 8015f68:	f43f ae57 	beq.w	8015c1a <_printf_float+0xba>
 8015f6c:	f108 0801 	add.w	r8, r8, #1
 8015f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f72:	3b01      	subs	r3, #1
 8015f74:	4543      	cmp	r3, r8
 8015f76:	dcf1      	bgt.n	8015f5c <_printf_float+0x3fc>
 8015f78:	464b      	mov	r3, r9
 8015f7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f7e:	e6de      	b.n	8015d3e <_printf_float+0x1de>
 8015f80:	f04f 0800 	mov.w	r8, #0
 8015f84:	f104 0a1a 	add.w	sl, r4, #26
 8015f88:	e7f2      	b.n	8015f70 <_printf_float+0x410>
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	e7df      	b.n	8015f4e <_printf_float+0x3ee>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	464a      	mov	r2, r9
 8015f92:	4631      	mov	r1, r6
 8015f94:	4628      	mov	r0, r5
 8015f96:	47b8      	blx	r7
 8015f98:	3001      	adds	r0, #1
 8015f9a:	f43f ae3e 	beq.w	8015c1a <_printf_float+0xba>
 8015f9e:	f108 0801 	add.w	r8, r8, #1
 8015fa2:	68e3      	ldr	r3, [r4, #12]
 8015fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fa6:	1a9b      	subs	r3, r3, r2
 8015fa8:	4543      	cmp	r3, r8
 8015faa:	dcf0      	bgt.n	8015f8e <_printf_float+0x42e>
 8015fac:	e6fc      	b.n	8015da8 <_printf_float+0x248>
 8015fae:	f04f 0800 	mov.w	r8, #0
 8015fb2:	f104 0919 	add.w	r9, r4, #25
 8015fb6:	e7f4      	b.n	8015fa2 <_printf_float+0x442>
 8015fb8:	2900      	cmp	r1, #0
 8015fba:	f43f ae8b 	beq.w	8015cd4 <_printf_float+0x174>
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015fc4:	ab09      	add	r3, sp, #36	; 0x24
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	ec49 8b10 	vmov	d0, r8, r9
 8015fcc:	6022      	str	r2, [r4, #0]
 8015fce:	f8cd a004 	str.w	sl, [sp, #4]
 8015fd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f7ff fd2e 	bl	8015a38 <__cvt>
 8015fdc:	4680      	mov	r8, r0
 8015fde:	e648      	b.n	8015c72 <_printf_float+0x112>

08015fe0 <_printf_common>:
 8015fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fe4:	4691      	mov	r9, r2
 8015fe6:	461f      	mov	r7, r3
 8015fe8:	688a      	ldr	r2, [r1, #8]
 8015fea:	690b      	ldr	r3, [r1, #16]
 8015fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ff0:	4293      	cmp	r3, r2
 8015ff2:	bfb8      	it	lt
 8015ff4:	4613      	movlt	r3, r2
 8015ff6:	f8c9 3000 	str.w	r3, [r9]
 8015ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ffe:	4606      	mov	r6, r0
 8016000:	460c      	mov	r4, r1
 8016002:	b112      	cbz	r2, 801600a <_printf_common+0x2a>
 8016004:	3301      	adds	r3, #1
 8016006:	f8c9 3000 	str.w	r3, [r9]
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	0699      	lsls	r1, r3, #26
 801600e:	bf42      	ittt	mi
 8016010:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016014:	3302      	addmi	r3, #2
 8016016:	f8c9 3000 	strmi.w	r3, [r9]
 801601a:	6825      	ldr	r5, [r4, #0]
 801601c:	f015 0506 	ands.w	r5, r5, #6
 8016020:	d107      	bne.n	8016032 <_printf_common+0x52>
 8016022:	f104 0a19 	add.w	sl, r4, #25
 8016026:	68e3      	ldr	r3, [r4, #12]
 8016028:	f8d9 2000 	ldr.w	r2, [r9]
 801602c:	1a9b      	subs	r3, r3, r2
 801602e:	42ab      	cmp	r3, r5
 8016030:	dc28      	bgt.n	8016084 <_printf_common+0xa4>
 8016032:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016036:	6822      	ldr	r2, [r4, #0]
 8016038:	3300      	adds	r3, #0
 801603a:	bf18      	it	ne
 801603c:	2301      	movne	r3, #1
 801603e:	0692      	lsls	r2, r2, #26
 8016040:	d42d      	bmi.n	801609e <_printf_common+0xbe>
 8016042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016046:	4639      	mov	r1, r7
 8016048:	4630      	mov	r0, r6
 801604a:	47c0      	blx	r8
 801604c:	3001      	adds	r0, #1
 801604e:	d020      	beq.n	8016092 <_printf_common+0xb2>
 8016050:	6823      	ldr	r3, [r4, #0]
 8016052:	68e5      	ldr	r5, [r4, #12]
 8016054:	f8d9 2000 	ldr.w	r2, [r9]
 8016058:	f003 0306 	and.w	r3, r3, #6
 801605c:	2b04      	cmp	r3, #4
 801605e:	bf08      	it	eq
 8016060:	1aad      	subeq	r5, r5, r2
 8016062:	68a3      	ldr	r3, [r4, #8]
 8016064:	6922      	ldr	r2, [r4, #16]
 8016066:	bf0c      	ite	eq
 8016068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801606c:	2500      	movne	r5, #0
 801606e:	4293      	cmp	r3, r2
 8016070:	bfc4      	itt	gt
 8016072:	1a9b      	subgt	r3, r3, r2
 8016074:	18ed      	addgt	r5, r5, r3
 8016076:	f04f 0900 	mov.w	r9, #0
 801607a:	341a      	adds	r4, #26
 801607c:	454d      	cmp	r5, r9
 801607e:	d11a      	bne.n	80160b6 <_printf_common+0xd6>
 8016080:	2000      	movs	r0, #0
 8016082:	e008      	b.n	8016096 <_printf_common+0xb6>
 8016084:	2301      	movs	r3, #1
 8016086:	4652      	mov	r2, sl
 8016088:	4639      	mov	r1, r7
 801608a:	4630      	mov	r0, r6
 801608c:	47c0      	blx	r8
 801608e:	3001      	adds	r0, #1
 8016090:	d103      	bne.n	801609a <_printf_common+0xba>
 8016092:	f04f 30ff 	mov.w	r0, #4294967295
 8016096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801609a:	3501      	adds	r5, #1
 801609c:	e7c3      	b.n	8016026 <_printf_common+0x46>
 801609e:	18e1      	adds	r1, r4, r3
 80160a0:	1c5a      	adds	r2, r3, #1
 80160a2:	2030      	movs	r0, #48	; 0x30
 80160a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80160a8:	4422      	add	r2, r4
 80160aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80160ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80160b2:	3302      	adds	r3, #2
 80160b4:	e7c5      	b.n	8016042 <_printf_common+0x62>
 80160b6:	2301      	movs	r3, #1
 80160b8:	4622      	mov	r2, r4
 80160ba:	4639      	mov	r1, r7
 80160bc:	4630      	mov	r0, r6
 80160be:	47c0      	blx	r8
 80160c0:	3001      	adds	r0, #1
 80160c2:	d0e6      	beq.n	8016092 <_printf_common+0xb2>
 80160c4:	f109 0901 	add.w	r9, r9, #1
 80160c8:	e7d8      	b.n	801607c <_printf_common+0x9c>
	...

080160cc <_printf_i>:
 80160cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80160d4:	460c      	mov	r4, r1
 80160d6:	7e09      	ldrb	r1, [r1, #24]
 80160d8:	b085      	sub	sp, #20
 80160da:	296e      	cmp	r1, #110	; 0x6e
 80160dc:	4617      	mov	r7, r2
 80160de:	4606      	mov	r6, r0
 80160e0:	4698      	mov	r8, r3
 80160e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160e4:	f000 80b3 	beq.w	801624e <_printf_i+0x182>
 80160e8:	d822      	bhi.n	8016130 <_printf_i+0x64>
 80160ea:	2963      	cmp	r1, #99	; 0x63
 80160ec:	d036      	beq.n	801615c <_printf_i+0x90>
 80160ee:	d80a      	bhi.n	8016106 <_printf_i+0x3a>
 80160f0:	2900      	cmp	r1, #0
 80160f2:	f000 80b9 	beq.w	8016268 <_printf_i+0x19c>
 80160f6:	2958      	cmp	r1, #88	; 0x58
 80160f8:	f000 8083 	beq.w	8016202 <_printf_i+0x136>
 80160fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016100:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016104:	e032      	b.n	801616c <_printf_i+0xa0>
 8016106:	2964      	cmp	r1, #100	; 0x64
 8016108:	d001      	beq.n	801610e <_printf_i+0x42>
 801610a:	2969      	cmp	r1, #105	; 0x69
 801610c:	d1f6      	bne.n	80160fc <_printf_i+0x30>
 801610e:	6820      	ldr	r0, [r4, #0]
 8016110:	6813      	ldr	r3, [r2, #0]
 8016112:	0605      	lsls	r5, r0, #24
 8016114:	f103 0104 	add.w	r1, r3, #4
 8016118:	d52a      	bpl.n	8016170 <_printf_i+0xa4>
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	6011      	str	r1, [r2, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	da03      	bge.n	801612a <_printf_i+0x5e>
 8016122:	222d      	movs	r2, #45	; 0x2d
 8016124:	425b      	negs	r3, r3
 8016126:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801612a:	486f      	ldr	r0, [pc, #444]	; (80162e8 <_printf_i+0x21c>)
 801612c:	220a      	movs	r2, #10
 801612e:	e039      	b.n	80161a4 <_printf_i+0xd8>
 8016130:	2973      	cmp	r1, #115	; 0x73
 8016132:	f000 809d 	beq.w	8016270 <_printf_i+0x1a4>
 8016136:	d808      	bhi.n	801614a <_printf_i+0x7e>
 8016138:	296f      	cmp	r1, #111	; 0x6f
 801613a:	d020      	beq.n	801617e <_printf_i+0xb2>
 801613c:	2970      	cmp	r1, #112	; 0x70
 801613e:	d1dd      	bne.n	80160fc <_printf_i+0x30>
 8016140:	6823      	ldr	r3, [r4, #0]
 8016142:	f043 0320 	orr.w	r3, r3, #32
 8016146:	6023      	str	r3, [r4, #0]
 8016148:	e003      	b.n	8016152 <_printf_i+0x86>
 801614a:	2975      	cmp	r1, #117	; 0x75
 801614c:	d017      	beq.n	801617e <_printf_i+0xb2>
 801614e:	2978      	cmp	r1, #120	; 0x78
 8016150:	d1d4      	bne.n	80160fc <_printf_i+0x30>
 8016152:	2378      	movs	r3, #120	; 0x78
 8016154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016158:	4864      	ldr	r0, [pc, #400]	; (80162ec <_printf_i+0x220>)
 801615a:	e055      	b.n	8016208 <_printf_i+0x13c>
 801615c:	6813      	ldr	r3, [r2, #0]
 801615e:	1d19      	adds	r1, r3, #4
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	6011      	str	r1, [r2, #0]
 8016164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801616c:	2301      	movs	r3, #1
 801616e:	e08c      	b.n	801628a <_printf_i+0x1be>
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	6011      	str	r1, [r2, #0]
 8016174:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016178:	bf18      	it	ne
 801617a:	b21b      	sxthne	r3, r3
 801617c:	e7cf      	b.n	801611e <_printf_i+0x52>
 801617e:	6813      	ldr	r3, [r2, #0]
 8016180:	6825      	ldr	r5, [r4, #0]
 8016182:	1d18      	adds	r0, r3, #4
 8016184:	6010      	str	r0, [r2, #0]
 8016186:	0628      	lsls	r0, r5, #24
 8016188:	d501      	bpl.n	801618e <_printf_i+0xc2>
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	e002      	b.n	8016194 <_printf_i+0xc8>
 801618e:	0668      	lsls	r0, r5, #25
 8016190:	d5fb      	bpl.n	801618a <_printf_i+0xbe>
 8016192:	881b      	ldrh	r3, [r3, #0]
 8016194:	4854      	ldr	r0, [pc, #336]	; (80162e8 <_printf_i+0x21c>)
 8016196:	296f      	cmp	r1, #111	; 0x6f
 8016198:	bf14      	ite	ne
 801619a:	220a      	movne	r2, #10
 801619c:	2208      	moveq	r2, #8
 801619e:	2100      	movs	r1, #0
 80161a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80161a4:	6865      	ldr	r5, [r4, #4]
 80161a6:	60a5      	str	r5, [r4, #8]
 80161a8:	2d00      	cmp	r5, #0
 80161aa:	f2c0 8095 	blt.w	80162d8 <_printf_i+0x20c>
 80161ae:	6821      	ldr	r1, [r4, #0]
 80161b0:	f021 0104 	bic.w	r1, r1, #4
 80161b4:	6021      	str	r1, [r4, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d13d      	bne.n	8016236 <_printf_i+0x16a>
 80161ba:	2d00      	cmp	r5, #0
 80161bc:	f040 808e 	bne.w	80162dc <_printf_i+0x210>
 80161c0:	4665      	mov	r5, ip
 80161c2:	2a08      	cmp	r2, #8
 80161c4:	d10b      	bne.n	80161de <_printf_i+0x112>
 80161c6:	6823      	ldr	r3, [r4, #0]
 80161c8:	07db      	lsls	r3, r3, #31
 80161ca:	d508      	bpl.n	80161de <_printf_i+0x112>
 80161cc:	6923      	ldr	r3, [r4, #16]
 80161ce:	6862      	ldr	r2, [r4, #4]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	bfde      	ittt	le
 80161d4:	2330      	movle	r3, #48	; 0x30
 80161d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80161da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80161de:	ebac 0305 	sub.w	r3, ip, r5
 80161e2:	6123      	str	r3, [r4, #16]
 80161e4:	f8cd 8000 	str.w	r8, [sp]
 80161e8:	463b      	mov	r3, r7
 80161ea:	aa03      	add	r2, sp, #12
 80161ec:	4621      	mov	r1, r4
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7ff fef6 	bl	8015fe0 <_printf_common>
 80161f4:	3001      	adds	r0, #1
 80161f6:	d14d      	bne.n	8016294 <_printf_i+0x1c8>
 80161f8:	f04f 30ff 	mov.w	r0, #4294967295
 80161fc:	b005      	add	sp, #20
 80161fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016202:	4839      	ldr	r0, [pc, #228]	; (80162e8 <_printf_i+0x21c>)
 8016204:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016208:	6813      	ldr	r3, [r2, #0]
 801620a:	6821      	ldr	r1, [r4, #0]
 801620c:	1d1d      	adds	r5, r3, #4
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	6015      	str	r5, [r2, #0]
 8016212:	060a      	lsls	r2, r1, #24
 8016214:	d50b      	bpl.n	801622e <_printf_i+0x162>
 8016216:	07ca      	lsls	r2, r1, #31
 8016218:	bf44      	itt	mi
 801621a:	f041 0120 	orrmi.w	r1, r1, #32
 801621e:	6021      	strmi	r1, [r4, #0]
 8016220:	b91b      	cbnz	r3, 801622a <_printf_i+0x15e>
 8016222:	6822      	ldr	r2, [r4, #0]
 8016224:	f022 0220 	bic.w	r2, r2, #32
 8016228:	6022      	str	r2, [r4, #0]
 801622a:	2210      	movs	r2, #16
 801622c:	e7b7      	b.n	801619e <_printf_i+0xd2>
 801622e:	064d      	lsls	r5, r1, #25
 8016230:	bf48      	it	mi
 8016232:	b29b      	uxthmi	r3, r3
 8016234:	e7ef      	b.n	8016216 <_printf_i+0x14a>
 8016236:	4665      	mov	r5, ip
 8016238:	fbb3 f1f2 	udiv	r1, r3, r2
 801623c:	fb02 3311 	mls	r3, r2, r1, r3
 8016240:	5cc3      	ldrb	r3, [r0, r3]
 8016242:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016246:	460b      	mov	r3, r1
 8016248:	2900      	cmp	r1, #0
 801624a:	d1f5      	bne.n	8016238 <_printf_i+0x16c>
 801624c:	e7b9      	b.n	80161c2 <_printf_i+0xf6>
 801624e:	6813      	ldr	r3, [r2, #0]
 8016250:	6825      	ldr	r5, [r4, #0]
 8016252:	6961      	ldr	r1, [r4, #20]
 8016254:	1d18      	adds	r0, r3, #4
 8016256:	6010      	str	r0, [r2, #0]
 8016258:	0628      	lsls	r0, r5, #24
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	d501      	bpl.n	8016262 <_printf_i+0x196>
 801625e:	6019      	str	r1, [r3, #0]
 8016260:	e002      	b.n	8016268 <_printf_i+0x19c>
 8016262:	066a      	lsls	r2, r5, #25
 8016264:	d5fb      	bpl.n	801625e <_printf_i+0x192>
 8016266:	8019      	strh	r1, [r3, #0]
 8016268:	2300      	movs	r3, #0
 801626a:	6123      	str	r3, [r4, #16]
 801626c:	4665      	mov	r5, ip
 801626e:	e7b9      	b.n	80161e4 <_printf_i+0x118>
 8016270:	6813      	ldr	r3, [r2, #0]
 8016272:	1d19      	adds	r1, r3, #4
 8016274:	6011      	str	r1, [r2, #0]
 8016276:	681d      	ldr	r5, [r3, #0]
 8016278:	6862      	ldr	r2, [r4, #4]
 801627a:	2100      	movs	r1, #0
 801627c:	4628      	mov	r0, r5
 801627e:	f7e9 ffbf 	bl	8000200 <memchr>
 8016282:	b108      	cbz	r0, 8016288 <_printf_i+0x1bc>
 8016284:	1b40      	subs	r0, r0, r5
 8016286:	6060      	str	r0, [r4, #4]
 8016288:	6863      	ldr	r3, [r4, #4]
 801628a:	6123      	str	r3, [r4, #16]
 801628c:	2300      	movs	r3, #0
 801628e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016292:	e7a7      	b.n	80161e4 <_printf_i+0x118>
 8016294:	6923      	ldr	r3, [r4, #16]
 8016296:	462a      	mov	r2, r5
 8016298:	4639      	mov	r1, r7
 801629a:	4630      	mov	r0, r6
 801629c:	47c0      	blx	r8
 801629e:	3001      	adds	r0, #1
 80162a0:	d0aa      	beq.n	80161f8 <_printf_i+0x12c>
 80162a2:	6823      	ldr	r3, [r4, #0]
 80162a4:	079b      	lsls	r3, r3, #30
 80162a6:	d413      	bmi.n	80162d0 <_printf_i+0x204>
 80162a8:	68e0      	ldr	r0, [r4, #12]
 80162aa:	9b03      	ldr	r3, [sp, #12]
 80162ac:	4298      	cmp	r0, r3
 80162ae:	bfb8      	it	lt
 80162b0:	4618      	movlt	r0, r3
 80162b2:	e7a3      	b.n	80161fc <_printf_i+0x130>
 80162b4:	2301      	movs	r3, #1
 80162b6:	464a      	mov	r2, r9
 80162b8:	4639      	mov	r1, r7
 80162ba:	4630      	mov	r0, r6
 80162bc:	47c0      	blx	r8
 80162be:	3001      	adds	r0, #1
 80162c0:	d09a      	beq.n	80161f8 <_printf_i+0x12c>
 80162c2:	3501      	adds	r5, #1
 80162c4:	68e3      	ldr	r3, [r4, #12]
 80162c6:	9a03      	ldr	r2, [sp, #12]
 80162c8:	1a9b      	subs	r3, r3, r2
 80162ca:	42ab      	cmp	r3, r5
 80162cc:	dcf2      	bgt.n	80162b4 <_printf_i+0x1e8>
 80162ce:	e7eb      	b.n	80162a8 <_printf_i+0x1dc>
 80162d0:	2500      	movs	r5, #0
 80162d2:	f104 0919 	add.w	r9, r4, #25
 80162d6:	e7f5      	b.n	80162c4 <_printf_i+0x1f8>
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1ac      	bne.n	8016236 <_printf_i+0x16a>
 80162dc:	7803      	ldrb	r3, [r0, #0]
 80162de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162e6:	e76c      	b.n	80161c2 <_printf_i+0xf6>
 80162e8:	0801bbfc 	.word	0x0801bbfc
 80162ec:	0801bc0d 	.word	0x0801bc0d

080162f0 <_scanf_float>:
 80162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f4:	469a      	mov	sl, r3
 80162f6:	688b      	ldr	r3, [r1, #8]
 80162f8:	4616      	mov	r6, r2
 80162fa:	1e5a      	subs	r2, r3, #1
 80162fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016300:	b087      	sub	sp, #28
 8016302:	bf83      	ittte	hi
 8016304:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016308:	189b      	addhi	r3, r3, r2
 801630a:	9301      	strhi	r3, [sp, #4]
 801630c:	2300      	movls	r3, #0
 801630e:	bf86      	itte	hi
 8016310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016314:	608b      	strhi	r3, [r1, #8]
 8016316:	9301      	strls	r3, [sp, #4]
 8016318:	680b      	ldr	r3, [r1, #0]
 801631a:	4688      	mov	r8, r1
 801631c:	f04f 0b00 	mov.w	fp, #0
 8016320:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016324:	f848 3b1c 	str.w	r3, [r8], #28
 8016328:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801632c:	4607      	mov	r7, r0
 801632e:	460c      	mov	r4, r1
 8016330:	4645      	mov	r5, r8
 8016332:	465a      	mov	r2, fp
 8016334:	46d9      	mov	r9, fp
 8016336:	f8cd b008 	str.w	fp, [sp, #8]
 801633a:	68a1      	ldr	r1, [r4, #8]
 801633c:	b181      	cbz	r1, 8016360 <_scanf_float+0x70>
 801633e:	6833      	ldr	r3, [r6, #0]
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b49      	cmp	r3, #73	; 0x49
 8016344:	d071      	beq.n	801642a <_scanf_float+0x13a>
 8016346:	d84d      	bhi.n	80163e4 <_scanf_float+0xf4>
 8016348:	2b39      	cmp	r3, #57	; 0x39
 801634a:	d840      	bhi.n	80163ce <_scanf_float+0xde>
 801634c:	2b31      	cmp	r3, #49	; 0x31
 801634e:	f080 8088 	bcs.w	8016462 <_scanf_float+0x172>
 8016352:	2b2d      	cmp	r3, #45	; 0x2d
 8016354:	f000 8090 	beq.w	8016478 <_scanf_float+0x188>
 8016358:	d815      	bhi.n	8016386 <_scanf_float+0x96>
 801635a:	2b2b      	cmp	r3, #43	; 0x2b
 801635c:	f000 808c 	beq.w	8016478 <_scanf_float+0x188>
 8016360:	f1b9 0f00 	cmp.w	r9, #0
 8016364:	d003      	beq.n	801636e <_scanf_float+0x7e>
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801636c:	6023      	str	r3, [r4, #0]
 801636e:	3a01      	subs	r2, #1
 8016370:	2a01      	cmp	r2, #1
 8016372:	f200 80ea 	bhi.w	801654a <_scanf_float+0x25a>
 8016376:	4545      	cmp	r5, r8
 8016378:	f200 80dc 	bhi.w	8016534 <_scanf_float+0x244>
 801637c:	2601      	movs	r6, #1
 801637e:	4630      	mov	r0, r6
 8016380:	b007      	add	sp, #28
 8016382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016386:	2b2e      	cmp	r3, #46	; 0x2e
 8016388:	f000 809f 	beq.w	80164ca <_scanf_float+0x1da>
 801638c:	2b30      	cmp	r3, #48	; 0x30
 801638e:	d1e7      	bne.n	8016360 <_scanf_float+0x70>
 8016390:	6820      	ldr	r0, [r4, #0]
 8016392:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016396:	d064      	beq.n	8016462 <_scanf_float+0x172>
 8016398:	9b01      	ldr	r3, [sp, #4]
 801639a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801639e:	6020      	str	r0, [r4, #0]
 80163a0:	f109 0901 	add.w	r9, r9, #1
 80163a4:	b11b      	cbz	r3, 80163ae <_scanf_float+0xbe>
 80163a6:	3b01      	subs	r3, #1
 80163a8:	3101      	adds	r1, #1
 80163aa:	9301      	str	r3, [sp, #4]
 80163ac:	60a1      	str	r1, [r4, #8]
 80163ae:	68a3      	ldr	r3, [r4, #8]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	60a3      	str	r3, [r4, #8]
 80163b4:	6923      	ldr	r3, [r4, #16]
 80163b6:	3301      	adds	r3, #1
 80163b8:	6123      	str	r3, [r4, #16]
 80163ba:	6873      	ldr	r3, [r6, #4]
 80163bc:	3b01      	subs	r3, #1
 80163be:	2b00      	cmp	r3, #0
 80163c0:	6073      	str	r3, [r6, #4]
 80163c2:	f340 80ac 	ble.w	801651e <_scanf_float+0x22e>
 80163c6:	6833      	ldr	r3, [r6, #0]
 80163c8:	3301      	adds	r3, #1
 80163ca:	6033      	str	r3, [r6, #0]
 80163cc:	e7b5      	b.n	801633a <_scanf_float+0x4a>
 80163ce:	2b45      	cmp	r3, #69	; 0x45
 80163d0:	f000 8085 	beq.w	80164de <_scanf_float+0x1ee>
 80163d4:	2b46      	cmp	r3, #70	; 0x46
 80163d6:	d06a      	beq.n	80164ae <_scanf_float+0x1be>
 80163d8:	2b41      	cmp	r3, #65	; 0x41
 80163da:	d1c1      	bne.n	8016360 <_scanf_float+0x70>
 80163dc:	2a01      	cmp	r2, #1
 80163de:	d1bf      	bne.n	8016360 <_scanf_float+0x70>
 80163e0:	2202      	movs	r2, #2
 80163e2:	e046      	b.n	8016472 <_scanf_float+0x182>
 80163e4:	2b65      	cmp	r3, #101	; 0x65
 80163e6:	d07a      	beq.n	80164de <_scanf_float+0x1ee>
 80163e8:	d818      	bhi.n	801641c <_scanf_float+0x12c>
 80163ea:	2b54      	cmp	r3, #84	; 0x54
 80163ec:	d066      	beq.n	80164bc <_scanf_float+0x1cc>
 80163ee:	d811      	bhi.n	8016414 <_scanf_float+0x124>
 80163f0:	2b4e      	cmp	r3, #78	; 0x4e
 80163f2:	d1b5      	bne.n	8016360 <_scanf_float+0x70>
 80163f4:	2a00      	cmp	r2, #0
 80163f6:	d146      	bne.n	8016486 <_scanf_float+0x196>
 80163f8:	f1b9 0f00 	cmp.w	r9, #0
 80163fc:	d145      	bne.n	801648a <_scanf_float+0x19a>
 80163fe:	6821      	ldr	r1, [r4, #0]
 8016400:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016404:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016408:	d13f      	bne.n	801648a <_scanf_float+0x19a>
 801640a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801640e:	6021      	str	r1, [r4, #0]
 8016410:	2201      	movs	r2, #1
 8016412:	e02e      	b.n	8016472 <_scanf_float+0x182>
 8016414:	2b59      	cmp	r3, #89	; 0x59
 8016416:	d01e      	beq.n	8016456 <_scanf_float+0x166>
 8016418:	2b61      	cmp	r3, #97	; 0x61
 801641a:	e7de      	b.n	80163da <_scanf_float+0xea>
 801641c:	2b6e      	cmp	r3, #110	; 0x6e
 801641e:	d0e9      	beq.n	80163f4 <_scanf_float+0x104>
 8016420:	d815      	bhi.n	801644e <_scanf_float+0x15e>
 8016422:	2b66      	cmp	r3, #102	; 0x66
 8016424:	d043      	beq.n	80164ae <_scanf_float+0x1be>
 8016426:	2b69      	cmp	r3, #105	; 0x69
 8016428:	d19a      	bne.n	8016360 <_scanf_float+0x70>
 801642a:	f1bb 0f00 	cmp.w	fp, #0
 801642e:	d138      	bne.n	80164a2 <_scanf_float+0x1b2>
 8016430:	f1b9 0f00 	cmp.w	r9, #0
 8016434:	d197      	bne.n	8016366 <_scanf_float+0x76>
 8016436:	6821      	ldr	r1, [r4, #0]
 8016438:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801643c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016440:	d195      	bne.n	801636e <_scanf_float+0x7e>
 8016442:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016446:	6021      	str	r1, [r4, #0]
 8016448:	f04f 0b01 	mov.w	fp, #1
 801644c:	e011      	b.n	8016472 <_scanf_float+0x182>
 801644e:	2b74      	cmp	r3, #116	; 0x74
 8016450:	d034      	beq.n	80164bc <_scanf_float+0x1cc>
 8016452:	2b79      	cmp	r3, #121	; 0x79
 8016454:	d184      	bne.n	8016360 <_scanf_float+0x70>
 8016456:	f1bb 0f07 	cmp.w	fp, #7
 801645a:	d181      	bne.n	8016360 <_scanf_float+0x70>
 801645c:	f04f 0b08 	mov.w	fp, #8
 8016460:	e007      	b.n	8016472 <_scanf_float+0x182>
 8016462:	eb12 0f0b 	cmn.w	r2, fp
 8016466:	f47f af7b 	bne.w	8016360 <_scanf_float+0x70>
 801646a:	6821      	ldr	r1, [r4, #0]
 801646c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016470:	6021      	str	r1, [r4, #0]
 8016472:	702b      	strb	r3, [r5, #0]
 8016474:	3501      	adds	r5, #1
 8016476:	e79a      	b.n	80163ae <_scanf_float+0xbe>
 8016478:	6821      	ldr	r1, [r4, #0]
 801647a:	0608      	lsls	r0, r1, #24
 801647c:	f57f af70 	bpl.w	8016360 <_scanf_float+0x70>
 8016480:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016484:	e7f4      	b.n	8016470 <_scanf_float+0x180>
 8016486:	2a02      	cmp	r2, #2
 8016488:	d047      	beq.n	801651a <_scanf_float+0x22a>
 801648a:	f1bb 0f01 	cmp.w	fp, #1
 801648e:	d003      	beq.n	8016498 <_scanf_float+0x1a8>
 8016490:	f1bb 0f04 	cmp.w	fp, #4
 8016494:	f47f af64 	bne.w	8016360 <_scanf_float+0x70>
 8016498:	f10b 0b01 	add.w	fp, fp, #1
 801649c:	fa5f fb8b 	uxtb.w	fp, fp
 80164a0:	e7e7      	b.n	8016472 <_scanf_float+0x182>
 80164a2:	f1bb 0f03 	cmp.w	fp, #3
 80164a6:	d0f7      	beq.n	8016498 <_scanf_float+0x1a8>
 80164a8:	f1bb 0f05 	cmp.w	fp, #5
 80164ac:	e7f2      	b.n	8016494 <_scanf_float+0x1a4>
 80164ae:	f1bb 0f02 	cmp.w	fp, #2
 80164b2:	f47f af55 	bne.w	8016360 <_scanf_float+0x70>
 80164b6:	f04f 0b03 	mov.w	fp, #3
 80164ba:	e7da      	b.n	8016472 <_scanf_float+0x182>
 80164bc:	f1bb 0f06 	cmp.w	fp, #6
 80164c0:	f47f af4e 	bne.w	8016360 <_scanf_float+0x70>
 80164c4:	f04f 0b07 	mov.w	fp, #7
 80164c8:	e7d3      	b.n	8016472 <_scanf_float+0x182>
 80164ca:	6821      	ldr	r1, [r4, #0]
 80164cc:	0588      	lsls	r0, r1, #22
 80164ce:	f57f af47 	bpl.w	8016360 <_scanf_float+0x70>
 80164d2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80164d6:	6021      	str	r1, [r4, #0]
 80164d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80164dc:	e7c9      	b.n	8016472 <_scanf_float+0x182>
 80164de:	6821      	ldr	r1, [r4, #0]
 80164e0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80164e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80164e8:	d006      	beq.n	80164f8 <_scanf_float+0x208>
 80164ea:	0548      	lsls	r0, r1, #21
 80164ec:	f57f af38 	bpl.w	8016360 <_scanf_float+0x70>
 80164f0:	f1b9 0f00 	cmp.w	r9, #0
 80164f4:	f43f af3b 	beq.w	801636e <_scanf_float+0x7e>
 80164f8:	0588      	lsls	r0, r1, #22
 80164fa:	bf58      	it	pl
 80164fc:	9802      	ldrpl	r0, [sp, #8]
 80164fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016502:	bf58      	it	pl
 8016504:	eba9 0000 	subpl.w	r0, r9, r0
 8016508:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801650c:	bf58      	it	pl
 801650e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016512:	6021      	str	r1, [r4, #0]
 8016514:	f04f 0900 	mov.w	r9, #0
 8016518:	e7ab      	b.n	8016472 <_scanf_float+0x182>
 801651a:	2203      	movs	r2, #3
 801651c:	e7a9      	b.n	8016472 <_scanf_float+0x182>
 801651e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016522:	9205      	str	r2, [sp, #20]
 8016524:	4631      	mov	r1, r6
 8016526:	4638      	mov	r0, r7
 8016528:	4798      	blx	r3
 801652a:	9a05      	ldr	r2, [sp, #20]
 801652c:	2800      	cmp	r0, #0
 801652e:	f43f af04 	beq.w	801633a <_scanf_float+0x4a>
 8016532:	e715      	b.n	8016360 <_scanf_float+0x70>
 8016534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801653c:	4632      	mov	r2, r6
 801653e:	4638      	mov	r0, r7
 8016540:	4798      	blx	r3
 8016542:	6923      	ldr	r3, [r4, #16]
 8016544:	3b01      	subs	r3, #1
 8016546:	6123      	str	r3, [r4, #16]
 8016548:	e715      	b.n	8016376 <_scanf_float+0x86>
 801654a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801654e:	2b06      	cmp	r3, #6
 8016550:	d80a      	bhi.n	8016568 <_scanf_float+0x278>
 8016552:	f1bb 0f02 	cmp.w	fp, #2
 8016556:	d968      	bls.n	801662a <_scanf_float+0x33a>
 8016558:	f1ab 0b03 	sub.w	fp, fp, #3
 801655c:	fa5f fb8b 	uxtb.w	fp, fp
 8016560:	eba5 0b0b 	sub.w	fp, r5, fp
 8016564:	455d      	cmp	r5, fp
 8016566:	d14b      	bne.n	8016600 <_scanf_float+0x310>
 8016568:	6823      	ldr	r3, [r4, #0]
 801656a:	05da      	lsls	r2, r3, #23
 801656c:	d51f      	bpl.n	80165ae <_scanf_float+0x2be>
 801656e:	055b      	lsls	r3, r3, #21
 8016570:	d468      	bmi.n	8016644 <_scanf_float+0x354>
 8016572:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016576:	6923      	ldr	r3, [r4, #16]
 8016578:	2965      	cmp	r1, #101	; 0x65
 801657a:	f103 33ff 	add.w	r3, r3, #4294967295
 801657e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016582:	6123      	str	r3, [r4, #16]
 8016584:	d00d      	beq.n	80165a2 <_scanf_float+0x2b2>
 8016586:	2945      	cmp	r1, #69	; 0x45
 8016588:	d00b      	beq.n	80165a2 <_scanf_float+0x2b2>
 801658a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801658e:	4632      	mov	r2, r6
 8016590:	4638      	mov	r0, r7
 8016592:	4798      	blx	r3
 8016594:	6923      	ldr	r3, [r4, #16]
 8016596:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801659a:	3b01      	subs	r3, #1
 801659c:	f1a5 0b02 	sub.w	fp, r5, #2
 80165a0:	6123      	str	r3, [r4, #16]
 80165a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165a6:	4632      	mov	r2, r6
 80165a8:	4638      	mov	r0, r7
 80165aa:	4798      	blx	r3
 80165ac:	465d      	mov	r5, fp
 80165ae:	6826      	ldr	r6, [r4, #0]
 80165b0:	f016 0610 	ands.w	r6, r6, #16
 80165b4:	d17a      	bne.n	80166ac <_scanf_float+0x3bc>
 80165b6:	702e      	strb	r6, [r5, #0]
 80165b8:	6823      	ldr	r3, [r4, #0]
 80165ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80165be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80165c2:	d142      	bne.n	801664a <_scanf_float+0x35a>
 80165c4:	9b02      	ldr	r3, [sp, #8]
 80165c6:	eba9 0303 	sub.w	r3, r9, r3
 80165ca:	425a      	negs	r2, r3
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d149      	bne.n	8016664 <_scanf_float+0x374>
 80165d0:	2200      	movs	r2, #0
 80165d2:	4641      	mov	r1, r8
 80165d4:	4638      	mov	r0, r7
 80165d6:	f000 ff23 	bl	8017420 <_strtod_r>
 80165da:	6825      	ldr	r5, [r4, #0]
 80165dc:	f8da 3000 	ldr.w	r3, [sl]
 80165e0:	f015 0f02 	tst.w	r5, #2
 80165e4:	f103 0204 	add.w	r2, r3, #4
 80165e8:	ec59 8b10 	vmov	r8, r9, d0
 80165ec:	f8ca 2000 	str.w	r2, [sl]
 80165f0:	d043      	beq.n	801667a <_scanf_float+0x38a>
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	e9c3 8900 	strd	r8, r9, [r3]
 80165f8:	68e3      	ldr	r3, [r4, #12]
 80165fa:	3301      	adds	r3, #1
 80165fc:	60e3      	str	r3, [r4, #12]
 80165fe:	e6be      	b.n	801637e <_scanf_float+0x8e>
 8016600:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016604:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016608:	4632      	mov	r2, r6
 801660a:	4638      	mov	r0, r7
 801660c:	4798      	blx	r3
 801660e:	6923      	ldr	r3, [r4, #16]
 8016610:	3b01      	subs	r3, #1
 8016612:	6123      	str	r3, [r4, #16]
 8016614:	e7a6      	b.n	8016564 <_scanf_float+0x274>
 8016616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801661a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801661e:	4632      	mov	r2, r6
 8016620:	4638      	mov	r0, r7
 8016622:	4798      	blx	r3
 8016624:	6923      	ldr	r3, [r4, #16]
 8016626:	3b01      	subs	r3, #1
 8016628:	6123      	str	r3, [r4, #16]
 801662a:	4545      	cmp	r5, r8
 801662c:	d8f3      	bhi.n	8016616 <_scanf_float+0x326>
 801662e:	e6a5      	b.n	801637c <_scanf_float+0x8c>
 8016630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016634:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016638:	4632      	mov	r2, r6
 801663a:	4638      	mov	r0, r7
 801663c:	4798      	blx	r3
 801663e:	6923      	ldr	r3, [r4, #16]
 8016640:	3b01      	subs	r3, #1
 8016642:	6123      	str	r3, [r4, #16]
 8016644:	4545      	cmp	r5, r8
 8016646:	d8f3      	bhi.n	8016630 <_scanf_float+0x340>
 8016648:	e698      	b.n	801637c <_scanf_float+0x8c>
 801664a:	9b03      	ldr	r3, [sp, #12]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d0bf      	beq.n	80165d0 <_scanf_float+0x2e0>
 8016650:	9904      	ldr	r1, [sp, #16]
 8016652:	230a      	movs	r3, #10
 8016654:	4632      	mov	r2, r6
 8016656:	3101      	adds	r1, #1
 8016658:	4638      	mov	r0, r7
 801665a:	f000 ff6d 	bl	8017538 <_strtol_r>
 801665e:	9b03      	ldr	r3, [sp, #12]
 8016660:	9d04      	ldr	r5, [sp, #16]
 8016662:	1ac2      	subs	r2, r0, r3
 8016664:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016668:	429d      	cmp	r5, r3
 801666a:	bf28      	it	cs
 801666c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016670:	490f      	ldr	r1, [pc, #60]	; (80166b0 <_scanf_float+0x3c0>)
 8016672:	4628      	mov	r0, r5
 8016674:	f000 f868 	bl	8016748 <siprintf>
 8016678:	e7aa      	b.n	80165d0 <_scanf_float+0x2e0>
 801667a:	f015 0504 	ands.w	r5, r5, #4
 801667e:	d1b8      	bne.n	80165f2 <_scanf_float+0x302>
 8016680:	681f      	ldr	r7, [r3, #0]
 8016682:	ee10 2a10 	vmov	r2, s0
 8016686:	464b      	mov	r3, r9
 8016688:	ee10 0a10 	vmov	r0, s0
 801668c:	4649      	mov	r1, r9
 801668e:	f7ea fa5d 	bl	8000b4c <__aeabi_dcmpun>
 8016692:	b128      	cbz	r0, 80166a0 <_scanf_float+0x3b0>
 8016694:	4628      	mov	r0, r5
 8016696:	f000 f81d 	bl	80166d4 <nanf>
 801669a:	ed87 0a00 	vstr	s0, [r7]
 801669e:	e7ab      	b.n	80165f8 <_scanf_float+0x308>
 80166a0:	4640      	mov	r0, r8
 80166a2:	4649      	mov	r1, r9
 80166a4:	f7ea fab0 	bl	8000c08 <__aeabi_d2f>
 80166a8:	6038      	str	r0, [r7, #0]
 80166aa:	e7a5      	b.n	80165f8 <_scanf_float+0x308>
 80166ac:	2600      	movs	r6, #0
 80166ae:	e666      	b.n	801637e <_scanf_float+0x8e>
 80166b0:	0801bc1e 	.word	0x0801bc1e

080166b4 <_sbrk_r>:
 80166b4:	b538      	push	{r3, r4, r5, lr}
 80166b6:	4c06      	ldr	r4, [pc, #24]	; (80166d0 <_sbrk_r+0x1c>)
 80166b8:	2300      	movs	r3, #0
 80166ba:	4605      	mov	r5, r0
 80166bc:	4608      	mov	r0, r1
 80166be:	6023      	str	r3, [r4, #0]
 80166c0:	f7f4 fa92 	bl	800abe8 <_sbrk>
 80166c4:	1c43      	adds	r3, r0, #1
 80166c6:	d102      	bne.n	80166ce <_sbrk_r+0x1a>
 80166c8:	6823      	ldr	r3, [r4, #0]
 80166ca:	b103      	cbz	r3, 80166ce <_sbrk_r+0x1a>
 80166cc:	602b      	str	r3, [r5, #0]
 80166ce:	bd38      	pop	{r3, r4, r5, pc}
 80166d0:	20006e88 	.word	0x20006e88

080166d4 <nanf>:
 80166d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80166dc <nanf+0x8>
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop
 80166dc:	7fc00000 	.word	0x7fc00000

080166e0 <sniprintf>:
 80166e0:	b40c      	push	{r2, r3}
 80166e2:	b530      	push	{r4, r5, lr}
 80166e4:	4b17      	ldr	r3, [pc, #92]	; (8016744 <sniprintf+0x64>)
 80166e6:	1e0c      	subs	r4, r1, #0
 80166e8:	b09d      	sub	sp, #116	; 0x74
 80166ea:	681d      	ldr	r5, [r3, #0]
 80166ec:	da08      	bge.n	8016700 <sniprintf+0x20>
 80166ee:	238b      	movs	r3, #139	; 0x8b
 80166f0:	602b      	str	r3, [r5, #0]
 80166f2:	f04f 30ff 	mov.w	r0, #4294967295
 80166f6:	b01d      	add	sp, #116	; 0x74
 80166f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166fc:	b002      	add	sp, #8
 80166fe:	4770      	bx	lr
 8016700:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016704:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016708:	bf14      	ite	ne
 801670a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801670e:	4623      	moveq	r3, r4
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	9307      	str	r3, [sp, #28]
 8016714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016718:	9002      	str	r0, [sp, #8]
 801671a:	9006      	str	r0, [sp, #24]
 801671c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016722:	ab21      	add	r3, sp, #132	; 0x84
 8016724:	a902      	add	r1, sp, #8
 8016726:	4628      	mov	r0, r5
 8016728:	9301      	str	r3, [sp, #4]
 801672a:	f002 fd21 	bl	8019170 <_svfiprintf_r>
 801672e:	1c43      	adds	r3, r0, #1
 8016730:	bfbc      	itt	lt
 8016732:	238b      	movlt	r3, #139	; 0x8b
 8016734:	602b      	strlt	r3, [r5, #0]
 8016736:	2c00      	cmp	r4, #0
 8016738:	d0dd      	beq.n	80166f6 <sniprintf+0x16>
 801673a:	9b02      	ldr	r3, [sp, #8]
 801673c:	2200      	movs	r2, #0
 801673e:	701a      	strb	r2, [r3, #0]
 8016740:	e7d9      	b.n	80166f6 <sniprintf+0x16>
 8016742:	bf00      	nop
 8016744:	20000e60 	.word	0x20000e60

08016748 <siprintf>:
 8016748:	b40e      	push	{r1, r2, r3}
 801674a:	b500      	push	{lr}
 801674c:	b09c      	sub	sp, #112	; 0x70
 801674e:	ab1d      	add	r3, sp, #116	; 0x74
 8016750:	9002      	str	r0, [sp, #8]
 8016752:	9006      	str	r0, [sp, #24]
 8016754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016758:	4809      	ldr	r0, [pc, #36]	; (8016780 <siprintf+0x38>)
 801675a:	9107      	str	r1, [sp, #28]
 801675c:	9104      	str	r1, [sp, #16]
 801675e:	4909      	ldr	r1, [pc, #36]	; (8016784 <siprintf+0x3c>)
 8016760:	f853 2b04 	ldr.w	r2, [r3], #4
 8016764:	9105      	str	r1, [sp, #20]
 8016766:	6800      	ldr	r0, [r0, #0]
 8016768:	9301      	str	r3, [sp, #4]
 801676a:	a902      	add	r1, sp, #8
 801676c:	f002 fd00 	bl	8019170 <_svfiprintf_r>
 8016770:	9b02      	ldr	r3, [sp, #8]
 8016772:	2200      	movs	r2, #0
 8016774:	701a      	strb	r2, [r3, #0]
 8016776:	b01c      	add	sp, #112	; 0x70
 8016778:	f85d eb04 	ldr.w	lr, [sp], #4
 801677c:	b003      	add	sp, #12
 801677e:	4770      	bx	lr
 8016780:	20000e60 	.word	0x20000e60
 8016784:	ffff0208 	.word	0xffff0208

08016788 <siscanf>:
 8016788:	b40e      	push	{r1, r2, r3}
 801678a:	b530      	push	{r4, r5, lr}
 801678c:	b09c      	sub	sp, #112	; 0x70
 801678e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016790:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016794:	f854 5b04 	ldr.w	r5, [r4], #4
 8016798:	f8ad 2014 	strh.w	r2, [sp, #20]
 801679c:	9002      	str	r0, [sp, #8]
 801679e:	9006      	str	r0, [sp, #24]
 80167a0:	f7e9 fd20 	bl	80001e4 <strlen>
 80167a4:	4b0b      	ldr	r3, [pc, #44]	; (80167d4 <siscanf+0x4c>)
 80167a6:	9003      	str	r0, [sp, #12]
 80167a8:	9007      	str	r0, [sp, #28]
 80167aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80167ac:	480a      	ldr	r0, [pc, #40]	; (80167d8 <siscanf+0x50>)
 80167ae:	9401      	str	r4, [sp, #4]
 80167b0:	2300      	movs	r3, #0
 80167b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80167b4:	9314      	str	r3, [sp, #80]	; 0x50
 80167b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167be:	462a      	mov	r2, r5
 80167c0:	4623      	mov	r3, r4
 80167c2:	a902      	add	r1, sp, #8
 80167c4:	6800      	ldr	r0, [r0, #0]
 80167c6:	f002 fe25 	bl	8019414 <__ssvfiscanf_r>
 80167ca:	b01c      	add	sp, #112	; 0x70
 80167cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167d0:	b003      	add	sp, #12
 80167d2:	4770      	bx	lr
 80167d4:	080167dd 	.word	0x080167dd
 80167d8:	20000e60 	.word	0x20000e60

080167dc <__seofread>:
 80167dc:	2000      	movs	r0, #0
 80167de:	4770      	bx	lr

080167e0 <strcat>:
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4603      	mov	r3, r0
 80167e4:	781a      	ldrb	r2, [r3, #0]
 80167e6:	1c5c      	adds	r4, r3, #1
 80167e8:	b93a      	cbnz	r2, 80167fa <strcat+0x1a>
 80167ea:	3b01      	subs	r3, #1
 80167ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80167f4:	2a00      	cmp	r2, #0
 80167f6:	d1f9      	bne.n	80167ec <strcat+0xc>
 80167f8:	bd10      	pop	{r4, pc}
 80167fa:	4623      	mov	r3, r4
 80167fc:	e7f2      	b.n	80167e4 <strcat+0x4>

080167fe <sulp>:
 80167fe:	b570      	push	{r4, r5, r6, lr}
 8016800:	4604      	mov	r4, r0
 8016802:	460d      	mov	r5, r1
 8016804:	ec45 4b10 	vmov	d0, r4, r5
 8016808:	4616      	mov	r6, r2
 801680a:	f002 fb15 	bl	8018e38 <__ulp>
 801680e:	ec51 0b10 	vmov	r0, r1, d0
 8016812:	b17e      	cbz	r6, 8016834 <sulp+0x36>
 8016814:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801681c:	2b00      	cmp	r3, #0
 801681e:	dd09      	ble.n	8016834 <sulp+0x36>
 8016820:	051b      	lsls	r3, r3, #20
 8016822:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016826:	2400      	movs	r4, #0
 8016828:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801682c:	4622      	mov	r2, r4
 801682e:	462b      	mov	r3, r5
 8016830:	f7e9 fef2 	bl	8000618 <__aeabi_dmul>
 8016834:	bd70      	pop	{r4, r5, r6, pc}
	...

08016838 <_strtod_l>:
 8016838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801683c:	461f      	mov	r7, r3
 801683e:	b0a1      	sub	sp, #132	; 0x84
 8016840:	2300      	movs	r3, #0
 8016842:	4681      	mov	r9, r0
 8016844:	4638      	mov	r0, r7
 8016846:	460e      	mov	r6, r1
 8016848:	9217      	str	r2, [sp, #92]	; 0x5c
 801684a:	931c      	str	r3, [sp, #112]	; 0x70
 801684c:	f002 f804 	bl	8018858 <__localeconv_l>
 8016850:	4680      	mov	r8, r0
 8016852:	6800      	ldr	r0, [r0, #0]
 8016854:	f7e9 fcc6 	bl	80001e4 <strlen>
 8016858:	f04f 0a00 	mov.w	sl, #0
 801685c:	4604      	mov	r4, r0
 801685e:	f04f 0b00 	mov.w	fp, #0
 8016862:	961b      	str	r6, [sp, #108]	; 0x6c
 8016864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016866:	781a      	ldrb	r2, [r3, #0]
 8016868:	2a0d      	cmp	r2, #13
 801686a:	d832      	bhi.n	80168d2 <_strtod_l+0x9a>
 801686c:	2a09      	cmp	r2, #9
 801686e:	d236      	bcs.n	80168de <_strtod_l+0xa6>
 8016870:	2a00      	cmp	r2, #0
 8016872:	d03e      	beq.n	80168f2 <_strtod_l+0xba>
 8016874:	2300      	movs	r3, #0
 8016876:	930d      	str	r3, [sp, #52]	; 0x34
 8016878:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801687a:	782b      	ldrb	r3, [r5, #0]
 801687c:	2b30      	cmp	r3, #48	; 0x30
 801687e:	f040 80ac 	bne.w	80169da <_strtod_l+0x1a2>
 8016882:	786b      	ldrb	r3, [r5, #1]
 8016884:	2b58      	cmp	r3, #88	; 0x58
 8016886:	d001      	beq.n	801688c <_strtod_l+0x54>
 8016888:	2b78      	cmp	r3, #120	; 0x78
 801688a:	d167      	bne.n	801695c <_strtod_l+0x124>
 801688c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	ab1c      	add	r3, sp, #112	; 0x70
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	9702      	str	r7, [sp, #8]
 8016896:	ab1d      	add	r3, sp, #116	; 0x74
 8016898:	4a88      	ldr	r2, [pc, #544]	; (8016abc <_strtod_l+0x284>)
 801689a:	a91b      	add	r1, sp, #108	; 0x6c
 801689c:	4648      	mov	r0, r9
 801689e:	f001 fcf2 	bl	8018286 <__gethex>
 80168a2:	f010 0407 	ands.w	r4, r0, #7
 80168a6:	4606      	mov	r6, r0
 80168a8:	d005      	beq.n	80168b6 <_strtod_l+0x7e>
 80168aa:	2c06      	cmp	r4, #6
 80168ac:	d12b      	bne.n	8016906 <_strtod_l+0xce>
 80168ae:	3501      	adds	r5, #1
 80168b0:	2300      	movs	r3, #0
 80168b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80168b4:	930d      	str	r3, [sp, #52]	; 0x34
 80168b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f040 859a 	bne.w	80173f2 <_strtod_l+0xbba>
 80168be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168c0:	b1e3      	cbz	r3, 80168fc <_strtod_l+0xc4>
 80168c2:	4652      	mov	r2, sl
 80168c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80168c8:	ec43 2b10 	vmov	d0, r2, r3
 80168cc:	b021      	add	sp, #132	; 0x84
 80168ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d2:	2a2b      	cmp	r2, #43	; 0x2b
 80168d4:	d015      	beq.n	8016902 <_strtod_l+0xca>
 80168d6:	2a2d      	cmp	r2, #45	; 0x2d
 80168d8:	d004      	beq.n	80168e4 <_strtod_l+0xac>
 80168da:	2a20      	cmp	r2, #32
 80168dc:	d1ca      	bne.n	8016874 <_strtod_l+0x3c>
 80168de:	3301      	adds	r3, #1
 80168e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80168e2:	e7bf      	b.n	8016864 <_strtod_l+0x2c>
 80168e4:	2201      	movs	r2, #1
 80168e6:	920d      	str	r2, [sp, #52]	; 0x34
 80168e8:	1c5a      	adds	r2, r3, #1
 80168ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80168ec:	785b      	ldrb	r3, [r3, #1]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d1c2      	bne.n	8016878 <_strtod_l+0x40>
 80168f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	f040 8579 	bne.w	80173ee <_strtod_l+0xbb6>
 80168fc:	4652      	mov	r2, sl
 80168fe:	465b      	mov	r3, fp
 8016900:	e7e2      	b.n	80168c8 <_strtod_l+0x90>
 8016902:	2200      	movs	r2, #0
 8016904:	e7ef      	b.n	80168e6 <_strtod_l+0xae>
 8016906:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016908:	b13a      	cbz	r2, 801691a <_strtod_l+0xe2>
 801690a:	2135      	movs	r1, #53	; 0x35
 801690c:	a81e      	add	r0, sp, #120	; 0x78
 801690e:	f002 fb8b 	bl	8019028 <__copybits>
 8016912:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016914:	4648      	mov	r0, r9
 8016916:	f001 fff7 	bl	8018908 <_Bfree>
 801691a:	3c01      	subs	r4, #1
 801691c:	2c04      	cmp	r4, #4
 801691e:	d806      	bhi.n	801692e <_strtod_l+0xf6>
 8016920:	e8df f004 	tbb	[pc, r4]
 8016924:	1714030a 	.word	0x1714030a
 8016928:	0a          	.byte	0x0a
 8016929:	00          	.byte	0x00
 801692a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801692e:	0730      	lsls	r0, r6, #28
 8016930:	d5c1      	bpl.n	80168b6 <_strtod_l+0x7e>
 8016932:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016936:	e7be      	b.n	80168b6 <_strtod_l+0x7e>
 8016938:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801693c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801693e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016942:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016946:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801694a:	e7f0      	b.n	801692e <_strtod_l+0xf6>
 801694c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016ac0 <_strtod_l+0x288>
 8016950:	e7ed      	b.n	801692e <_strtod_l+0xf6>
 8016952:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016956:	f04f 3aff 	mov.w	sl, #4294967295
 801695a:	e7e8      	b.n	801692e <_strtod_l+0xf6>
 801695c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801695e:	1c5a      	adds	r2, r3, #1
 8016960:	921b      	str	r2, [sp, #108]	; 0x6c
 8016962:	785b      	ldrb	r3, [r3, #1]
 8016964:	2b30      	cmp	r3, #48	; 0x30
 8016966:	d0f9      	beq.n	801695c <_strtod_l+0x124>
 8016968:	2b00      	cmp	r3, #0
 801696a:	d0a4      	beq.n	80168b6 <_strtod_l+0x7e>
 801696c:	2301      	movs	r3, #1
 801696e:	2500      	movs	r5, #0
 8016970:	9306      	str	r3, [sp, #24]
 8016972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016974:	9308      	str	r3, [sp, #32]
 8016976:	9507      	str	r5, [sp, #28]
 8016978:	9505      	str	r5, [sp, #20]
 801697a:	220a      	movs	r2, #10
 801697c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801697e:	7807      	ldrb	r7, [r0, #0]
 8016980:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016984:	b2d9      	uxtb	r1, r3
 8016986:	2909      	cmp	r1, #9
 8016988:	d929      	bls.n	80169de <_strtod_l+0x1a6>
 801698a:	4622      	mov	r2, r4
 801698c:	f8d8 1000 	ldr.w	r1, [r8]
 8016990:	f003 f81a 	bl	80199c8 <strncmp>
 8016994:	2800      	cmp	r0, #0
 8016996:	d031      	beq.n	80169fc <_strtod_l+0x1c4>
 8016998:	2000      	movs	r0, #0
 801699a:	9c05      	ldr	r4, [sp, #20]
 801699c:	9004      	str	r0, [sp, #16]
 801699e:	463b      	mov	r3, r7
 80169a0:	4602      	mov	r2, r0
 80169a2:	2b65      	cmp	r3, #101	; 0x65
 80169a4:	d001      	beq.n	80169aa <_strtod_l+0x172>
 80169a6:	2b45      	cmp	r3, #69	; 0x45
 80169a8:	d114      	bne.n	80169d4 <_strtod_l+0x19c>
 80169aa:	b924      	cbnz	r4, 80169b6 <_strtod_l+0x17e>
 80169ac:	b910      	cbnz	r0, 80169b4 <_strtod_l+0x17c>
 80169ae:	9b06      	ldr	r3, [sp, #24]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d09e      	beq.n	80168f2 <_strtod_l+0xba>
 80169b4:	2400      	movs	r4, #0
 80169b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80169b8:	1c73      	adds	r3, r6, #1
 80169ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80169bc:	7873      	ldrb	r3, [r6, #1]
 80169be:	2b2b      	cmp	r3, #43	; 0x2b
 80169c0:	d078      	beq.n	8016ab4 <_strtod_l+0x27c>
 80169c2:	2b2d      	cmp	r3, #45	; 0x2d
 80169c4:	d070      	beq.n	8016aa8 <_strtod_l+0x270>
 80169c6:	f04f 0c00 	mov.w	ip, #0
 80169ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80169ce:	2f09      	cmp	r7, #9
 80169d0:	d97c      	bls.n	8016acc <_strtod_l+0x294>
 80169d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80169d4:	f04f 0e00 	mov.w	lr, #0
 80169d8:	e09a      	b.n	8016b10 <_strtod_l+0x2d8>
 80169da:	2300      	movs	r3, #0
 80169dc:	e7c7      	b.n	801696e <_strtod_l+0x136>
 80169de:	9905      	ldr	r1, [sp, #20]
 80169e0:	2908      	cmp	r1, #8
 80169e2:	bfdd      	ittte	le
 80169e4:	9907      	ldrle	r1, [sp, #28]
 80169e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80169ea:	9307      	strle	r3, [sp, #28]
 80169ec:	fb02 3505 	mlagt	r5, r2, r5, r3
 80169f0:	9b05      	ldr	r3, [sp, #20]
 80169f2:	3001      	adds	r0, #1
 80169f4:	3301      	adds	r3, #1
 80169f6:	9305      	str	r3, [sp, #20]
 80169f8:	901b      	str	r0, [sp, #108]	; 0x6c
 80169fa:	e7bf      	b.n	801697c <_strtod_l+0x144>
 80169fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169fe:	191a      	adds	r2, r3, r4
 8016a00:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a02:	9a05      	ldr	r2, [sp, #20]
 8016a04:	5d1b      	ldrb	r3, [r3, r4]
 8016a06:	2a00      	cmp	r2, #0
 8016a08:	d037      	beq.n	8016a7a <_strtod_l+0x242>
 8016a0a:	9c05      	ldr	r4, [sp, #20]
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016a12:	2909      	cmp	r1, #9
 8016a14:	d913      	bls.n	8016a3e <_strtod_l+0x206>
 8016a16:	2101      	movs	r1, #1
 8016a18:	9104      	str	r1, [sp, #16]
 8016a1a:	e7c2      	b.n	80169a2 <_strtod_l+0x16a>
 8016a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a1e:	1c5a      	adds	r2, r3, #1
 8016a20:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a22:	785b      	ldrb	r3, [r3, #1]
 8016a24:	3001      	adds	r0, #1
 8016a26:	2b30      	cmp	r3, #48	; 0x30
 8016a28:	d0f8      	beq.n	8016a1c <_strtod_l+0x1e4>
 8016a2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016a2e:	2a08      	cmp	r2, #8
 8016a30:	f200 84e4 	bhi.w	80173fc <_strtod_l+0xbc4>
 8016a34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a36:	9208      	str	r2, [sp, #32]
 8016a38:	4602      	mov	r2, r0
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016a42:	f100 0101 	add.w	r1, r0, #1
 8016a46:	d012      	beq.n	8016a6e <_strtod_l+0x236>
 8016a48:	440a      	add	r2, r1
 8016a4a:	eb00 0c04 	add.w	ip, r0, r4
 8016a4e:	4621      	mov	r1, r4
 8016a50:	270a      	movs	r7, #10
 8016a52:	458c      	cmp	ip, r1
 8016a54:	d113      	bne.n	8016a7e <_strtod_l+0x246>
 8016a56:	1821      	adds	r1, r4, r0
 8016a58:	2908      	cmp	r1, #8
 8016a5a:	f104 0401 	add.w	r4, r4, #1
 8016a5e:	4404      	add	r4, r0
 8016a60:	dc19      	bgt.n	8016a96 <_strtod_l+0x25e>
 8016a62:	9b07      	ldr	r3, [sp, #28]
 8016a64:	210a      	movs	r1, #10
 8016a66:	fb01 e303 	mla	r3, r1, r3, lr
 8016a6a:	9307      	str	r3, [sp, #28]
 8016a6c:	2100      	movs	r1, #0
 8016a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a70:	1c58      	adds	r0, r3, #1
 8016a72:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a74:	785b      	ldrb	r3, [r3, #1]
 8016a76:	4608      	mov	r0, r1
 8016a78:	e7c9      	b.n	8016a0e <_strtod_l+0x1d6>
 8016a7a:	9805      	ldr	r0, [sp, #20]
 8016a7c:	e7d3      	b.n	8016a26 <_strtod_l+0x1ee>
 8016a7e:	2908      	cmp	r1, #8
 8016a80:	f101 0101 	add.w	r1, r1, #1
 8016a84:	dc03      	bgt.n	8016a8e <_strtod_l+0x256>
 8016a86:	9b07      	ldr	r3, [sp, #28]
 8016a88:	437b      	muls	r3, r7
 8016a8a:	9307      	str	r3, [sp, #28]
 8016a8c:	e7e1      	b.n	8016a52 <_strtod_l+0x21a>
 8016a8e:	2910      	cmp	r1, #16
 8016a90:	bfd8      	it	le
 8016a92:	437d      	mulle	r5, r7
 8016a94:	e7dd      	b.n	8016a52 <_strtod_l+0x21a>
 8016a96:	2c10      	cmp	r4, #16
 8016a98:	bfdc      	itt	le
 8016a9a:	210a      	movle	r1, #10
 8016a9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016aa0:	e7e4      	b.n	8016a6c <_strtod_l+0x234>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	9304      	str	r3, [sp, #16]
 8016aa6:	e781      	b.n	80169ac <_strtod_l+0x174>
 8016aa8:	f04f 0c01 	mov.w	ip, #1
 8016aac:	1cb3      	adds	r3, r6, #2
 8016aae:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ab0:	78b3      	ldrb	r3, [r6, #2]
 8016ab2:	e78a      	b.n	80169ca <_strtod_l+0x192>
 8016ab4:	f04f 0c00 	mov.w	ip, #0
 8016ab8:	e7f8      	b.n	8016aac <_strtod_l+0x274>
 8016aba:	bf00      	nop
 8016abc:	0801bc24 	.word	0x0801bc24
 8016ac0:	7ff00000 	.word	0x7ff00000
 8016ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ac6:	1c5f      	adds	r7, r3, #1
 8016ac8:	971b      	str	r7, [sp, #108]	; 0x6c
 8016aca:	785b      	ldrb	r3, [r3, #1]
 8016acc:	2b30      	cmp	r3, #48	; 0x30
 8016ace:	d0f9      	beq.n	8016ac4 <_strtod_l+0x28c>
 8016ad0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016ad4:	2f08      	cmp	r7, #8
 8016ad6:	f63f af7d 	bhi.w	80169d4 <_strtod_l+0x19c>
 8016ada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ae4:	1c5f      	adds	r7, r3, #1
 8016ae6:	971b      	str	r7, [sp, #108]	; 0x6c
 8016ae8:	785b      	ldrb	r3, [r3, #1]
 8016aea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016aee:	f1b8 0f09 	cmp.w	r8, #9
 8016af2:	d937      	bls.n	8016b64 <_strtod_l+0x32c>
 8016af4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016af6:	1a7f      	subs	r7, r7, r1
 8016af8:	2f08      	cmp	r7, #8
 8016afa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016afe:	dc37      	bgt.n	8016b70 <_strtod_l+0x338>
 8016b00:	45be      	cmp	lr, r7
 8016b02:	bfa8      	it	ge
 8016b04:	46be      	movge	lr, r7
 8016b06:	f1bc 0f00 	cmp.w	ip, #0
 8016b0a:	d001      	beq.n	8016b10 <_strtod_l+0x2d8>
 8016b0c:	f1ce 0e00 	rsb	lr, lr, #0
 8016b10:	2c00      	cmp	r4, #0
 8016b12:	d151      	bne.n	8016bb8 <_strtod_l+0x380>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	f47f aece 	bne.w	80168b6 <_strtod_l+0x7e>
 8016b1a:	9a06      	ldr	r2, [sp, #24]
 8016b1c:	2a00      	cmp	r2, #0
 8016b1e:	f47f aeca 	bne.w	80168b6 <_strtod_l+0x7e>
 8016b22:	9a04      	ldr	r2, [sp, #16]
 8016b24:	2a00      	cmp	r2, #0
 8016b26:	f47f aee4 	bne.w	80168f2 <_strtod_l+0xba>
 8016b2a:	2b4e      	cmp	r3, #78	; 0x4e
 8016b2c:	d027      	beq.n	8016b7e <_strtod_l+0x346>
 8016b2e:	dc21      	bgt.n	8016b74 <_strtod_l+0x33c>
 8016b30:	2b49      	cmp	r3, #73	; 0x49
 8016b32:	f47f aede 	bne.w	80168f2 <_strtod_l+0xba>
 8016b36:	49a0      	ldr	r1, [pc, #640]	; (8016db8 <_strtod_l+0x580>)
 8016b38:	a81b      	add	r0, sp, #108	; 0x6c
 8016b3a:	f001 fdd7 	bl	80186ec <__match>
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	f43f aed7 	beq.w	80168f2 <_strtod_l+0xba>
 8016b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b46:	499d      	ldr	r1, [pc, #628]	; (8016dbc <_strtod_l+0x584>)
 8016b48:	3b01      	subs	r3, #1
 8016b4a:	a81b      	add	r0, sp, #108	; 0x6c
 8016b4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b4e:	f001 fdcd 	bl	80186ec <__match>
 8016b52:	b910      	cbnz	r0, 8016b5a <_strtod_l+0x322>
 8016b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b56:	3301      	adds	r3, #1
 8016b58:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016dd0 <_strtod_l+0x598>
 8016b5e:	f04f 0a00 	mov.w	sl, #0
 8016b62:	e6a8      	b.n	80168b6 <_strtod_l+0x7e>
 8016b64:	210a      	movs	r1, #10
 8016b66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016b6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016b6e:	e7b8      	b.n	8016ae2 <_strtod_l+0x2aa>
 8016b70:	46be      	mov	lr, r7
 8016b72:	e7c8      	b.n	8016b06 <_strtod_l+0x2ce>
 8016b74:	2b69      	cmp	r3, #105	; 0x69
 8016b76:	d0de      	beq.n	8016b36 <_strtod_l+0x2fe>
 8016b78:	2b6e      	cmp	r3, #110	; 0x6e
 8016b7a:	f47f aeba 	bne.w	80168f2 <_strtod_l+0xba>
 8016b7e:	4990      	ldr	r1, [pc, #576]	; (8016dc0 <_strtod_l+0x588>)
 8016b80:	a81b      	add	r0, sp, #108	; 0x6c
 8016b82:	f001 fdb3 	bl	80186ec <__match>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	f43f aeb3 	beq.w	80168f2 <_strtod_l+0xba>
 8016b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	2b28      	cmp	r3, #40	; 0x28
 8016b92:	d10e      	bne.n	8016bb2 <_strtod_l+0x37a>
 8016b94:	aa1e      	add	r2, sp, #120	; 0x78
 8016b96:	498b      	ldr	r1, [pc, #556]	; (8016dc4 <_strtod_l+0x58c>)
 8016b98:	a81b      	add	r0, sp, #108	; 0x6c
 8016b9a:	f001 fdbb 	bl	8018714 <__hexnan>
 8016b9e:	2805      	cmp	r0, #5
 8016ba0:	d107      	bne.n	8016bb2 <_strtod_l+0x37a>
 8016ba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016ba4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016ba8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016bac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016bb0:	e681      	b.n	80168b6 <_strtod_l+0x7e>
 8016bb2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016dd8 <_strtod_l+0x5a0>
 8016bb6:	e7d2      	b.n	8016b5e <_strtod_l+0x326>
 8016bb8:	ebae 0302 	sub.w	r3, lr, r2
 8016bbc:	9306      	str	r3, [sp, #24]
 8016bbe:	9b05      	ldr	r3, [sp, #20]
 8016bc0:	9807      	ldr	r0, [sp, #28]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	bf08      	it	eq
 8016bc6:	4623      	moveq	r3, r4
 8016bc8:	2c10      	cmp	r4, #16
 8016bca:	9305      	str	r3, [sp, #20]
 8016bcc:	46a0      	mov	r8, r4
 8016bce:	bfa8      	it	ge
 8016bd0:	f04f 0810 	movge.w	r8, #16
 8016bd4:	f7e9 fca6 	bl	8000524 <__aeabi_ui2d>
 8016bd8:	2c09      	cmp	r4, #9
 8016bda:	4682      	mov	sl, r0
 8016bdc:	468b      	mov	fp, r1
 8016bde:	dc13      	bgt.n	8016c08 <_strtod_l+0x3d0>
 8016be0:	9b06      	ldr	r3, [sp, #24]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	f43f ae67 	beq.w	80168b6 <_strtod_l+0x7e>
 8016be8:	9b06      	ldr	r3, [sp, #24]
 8016bea:	dd7a      	ble.n	8016ce2 <_strtod_l+0x4aa>
 8016bec:	2b16      	cmp	r3, #22
 8016bee:	dc61      	bgt.n	8016cb4 <_strtod_l+0x47c>
 8016bf0:	4a75      	ldr	r2, [pc, #468]	; (8016dc8 <_strtod_l+0x590>)
 8016bf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016bf6:	e9de 0100 	ldrd	r0, r1, [lr]
 8016bfa:	4652      	mov	r2, sl
 8016bfc:	465b      	mov	r3, fp
 8016bfe:	f7e9 fd0b 	bl	8000618 <__aeabi_dmul>
 8016c02:	4682      	mov	sl, r0
 8016c04:	468b      	mov	fp, r1
 8016c06:	e656      	b.n	80168b6 <_strtod_l+0x7e>
 8016c08:	4b6f      	ldr	r3, [pc, #444]	; (8016dc8 <_strtod_l+0x590>)
 8016c0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016c0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016c12:	f7e9 fd01 	bl	8000618 <__aeabi_dmul>
 8016c16:	4606      	mov	r6, r0
 8016c18:	4628      	mov	r0, r5
 8016c1a:	460f      	mov	r7, r1
 8016c1c:	f7e9 fc82 	bl	8000524 <__aeabi_ui2d>
 8016c20:	4602      	mov	r2, r0
 8016c22:	460b      	mov	r3, r1
 8016c24:	4630      	mov	r0, r6
 8016c26:	4639      	mov	r1, r7
 8016c28:	f7e9 fb40 	bl	80002ac <__adddf3>
 8016c2c:	2c0f      	cmp	r4, #15
 8016c2e:	4682      	mov	sl, r0
 8016c30:	468b      	mov	fp, r1
 8016c32:	ddd5      	ble.n	8016be0 <_strtod_l+0x3a8>
 8016c34:	9b06      	ldr	r3, [sp, #24]
 8016c36:	eba4 0808 	sub.w	r8, r4, r8
 8016c3a:	4498      	add	r8, r3
 8016c3c:	f1b8 0f00 	cmp.w	r8, #0
 8016c40:	f340 8096 	ble.w	8016d70 <_strtod_l+0x538>
 8016c44:	f018 030f 	ands.w	r3, r8, #15
 8016c48:	d00a      	beq.n	8016c60 <_strtod_l+0x428>
 8016c4a:	495f      	ldr	r1, [pc, #380]	; (8016dc8 <_strtod_l+0x590>)
 8016c4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016c50:	4652      	mov	r2, sl
 8016c52:	465b      	mov	r3, fp
 8016c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c58:	f7e9 fcde 	bl	8000618 <__aeabi_dmul>
 8016c5c:	4682      	mov	sl, r0
 8016c5e:	468b      	mov	fp, r1
 8016c60:	f038 080f 	bics.w	r8, r8, #15
 8016c64:	d073      	beq.n	8016d4e <_strtod_l+0x516>
 8016c66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016c6a:	dd47      	ble.n	8016cfc <_strtod_l+0x4c4>
 8016c6c:	2400      	movs	r4, #0
 8016c6e:	46a0      	mov	r8, r4
 8016c70:	9407      	str	r4, [sp, #28]
 8016c72:	9405      	str	r4, [sp, #20]
 8016c74:	2322      	movs	r3, #34	; 0x22
 8016c76:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016dd0 <_strtod_l+0x598>
 8016c7a:	f8c9 3000 	str.w	r3, [r9]
 8016c7e:	f04f 0a00 	mov.w	sl, #0
 8016c82:	9b07      	ldr	r3, [sp, #28]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	f43f ae16 	beq.w	80168b6 <_strtod_l+0x7e>
 8016c8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c8c:	4648      	mov	r0, r9
 8016c8e:	f001 fe3b 	bl	8018908 <_Bfree>
 8016c92:	9905      	ldr	r1, [sp, #20]
 8016c94:	4648      	mov	r0, r9
 8016c96:	f001 fe37 	bl	8018908 <_Bfree>
 8016c9a:	4641      	mov	r1, r8
 8016c9c:	4648      	mov	r0, r9
 8016c9e:	f001 fe33 	bl	8018908 <_Bfree>
 8016ca2:	9907      	ldr	r1, [sp, #28]
 8016ca4:	4648      	mov	r0, r9
 8016ca6:	f001 fe2f 	bl	8018908 <_Bfree>
 8016caa:	4621      	mov	r1, r4
 8016cac:	4648      	mov	r0, r9
 8016cae:	f001 fe2b 	bl	8018908 <_Bfree>
 8016cb2:	e600      	b.n	80168b6 <_strtod_l+0x7e>
 8016cb4:	9a06      	ldr	r2, [sp, #24]
 8016cb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016cba:	4293      	cmp	r3, r2
 8016cbc:	dbba      	blt.n	8016c34 <_strtod_l+0x3fc>
 8016cbe:	4d42      	ldr	r5, [pc, #264]	; (8016dc8 <_strtod_l+0x590>)
 8016cc0:	f1c4 040f 	rsb	r4, r4, #15
 8016cc4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016cc8:	4652      	mov	r2, sl
 8016cca:	465b      	mov	r3, fp
 8016ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cd0:	f7e9 fca2 	bl	8000618 <__aeabi_dmul>
 8016cd4:	9b06      	ldr	r3, [sp, #24]
 8016cd6:	1b1c      	subs	r4, r3, r4
 8016cd8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016cdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ce0:	e78d      	b.n	8016bfe <_strtod_l+0x3c6>
 8016ce2:	f113 0f16 	cmn.w	r3, #22
 8016ce6:	dba5      	blt.n	8016c34 <_strtod_l+0x3fc>
 8016ce8:	4a37      	ldr	r2, [pc, #220]	; (8016dc8 <_strtod_l+0x590>)
 8016cea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016cee:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016cf2:	4650      	mov	r0, sl
 8016cf4:	4659      	mov	r1, fp
 8016cf6:	f7e9 fdb9 	bl	800086c <__aeabi_ddiv>
 8016cfa:	e782      	b.n	8016c02 <_strtod_l+0x3ca>
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	4e33      	ldr	r6, [pc, #204]	; (8016dcc <_strtod_l+0x594>)
 8016d00:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016d04:	4650      	mov	r0, sl
 8016d06:	4659      	mov	r1, fp
 8016d08:	461d      	mov	r5, r3
 8016d0a:	f1b8 0f01 	cmp.w	r8, #1
 8016d0e:	dc21      	bgt.n	8016d54 <_strtod_l+0x51c>
 8016d10:	b10b      	cbz	r3, 8016d16 <_strtod_l+0x4de>
 8016d12:	4682      	mov	sl, r0
 8016d14:	468b      	mov	fp, r1
 8016d16:	4b2d      	ldr	r3, [pc, #180]	; (8016dcc <_strtod_l+0x594>)
 8016d18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016d1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016d20:	4652      	mov	r2, sl
 8016d22:	465b      	mov	r3, fp
 8016d24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016d28:	f7e9 fc76 	bl	8000618 <__aeabi_dmul>
 8016d2c:	4b28      	ldr	r3, [pc, #160]	; (8016dd0 <_strtod_l+0x598>)
 8016d2e:	460a      	mov	r2, r1
 8016d30:	400b      	ands	r3, r1
 8016d32:	4928      	ldr	r1, [pc, #160]	; (8016dd4 <_strtod_l+0x59c>)
 8016d34:	428b      	cmp	r3, r1
 8016d36:	4682      	mov	sl, r0
 8016d38:	d898      	bhi.n	8016c6c <_strtod_l+0x434>
 8016d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016d3e:	428b      	cmp	r3, r1
 8016d40:	bf86      	itte	hi
 8016d42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016ddc <_strtod_l+0x5a4>
 8016d46:	f04f 3aff 	movhi.w	sl, #4294967295
 8016d4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016d4e:	2300      	movs	r3, #0
 8016d50:	9304      	str	r3, [sp, #16]
 8016d52:	e077      	b.n	8016e44 <_strtod_l+0x60c>
 8016d54:	f018 0f01 	tst.w	r8, #1
 8016d58:	d006      	beq.n	8016d68 <_strtod_l+0x530>
 8016d5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d62:	f7e9 fc59 	bl	8000618 <__aeabi_dmul>
 8016d66:	2301      	movs	r3, #1
 8016d68:	3501      	adds	r5, #1
 8016d6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d6e:	e7cc      	b.n	8016d0a <_strtod_l+0x4d2>
 8016d70:	d0ed      	beq.n	8016d4e <_strtod_l+0x516>
 8016d72:	f1c8 0800 	rsb	r8, r8, #0
 8016d76:	f018 020f 	ands.w	r2, r8, #15
 8016d7a:	d00a      	beq.n	8016d92 <_strtod_l+0x55a>
 8016d7c:	4b12      	ldr	r3, [pc, #72]	; (8016dc8 <_strtod_l+0x590>)
 8016d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d82:	4650      	mov	r0, sl
 8016d84:	4659      	mov	r1, fp
 8016d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d8a:	f7e9 fd6f 	bl	800086c <__aeabi_ddiv>
 8016d8e:	4682      	mov	sl, r0
 8016d90:	468b      	mov	fp, r1
 8016d92:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016d96:	d0da      	beq.n	8016d4e <_strtod_l+0x516>
 8016d98:	f1b8 0f1f 	cmp.w	r8, #31
 8016d9c:	dd20      	ble.n	8016de0 <_strtod_l+0x5a8>
 8016d9e:	2400      	movs	r4, #0
 8016da0:	46a0      	mov	r8, r4
 8016da2:	9407      	str	r4, [sp, #28]
 8016da4:	9405      	str	r4, [sp, #20]
 8016da6:	2322      	movs	r3, #34	; 0x22
 8016da8:	f04f 0a00 	mov.w	sl, #0
 8016dac:	f04f 0b00 	mov.w	fp, #0
 8016db0:	f8c9 3000 	str.w	r3, [r9]
 8016db4:	e765      	b.n	8016c82 <_strtod_l+0x44a>
 8016db6:	bf00      	nop
 8016db8:	0801bbf1 	.word	0x0801bbf1
 8016dbc:	0801bc7b 	.word	0x0801bc7b
 8016dc0:	0801bbf9 	.word	0x0801bbf9
 8016dc4:	0801bc38 	.word	0x0801bc38
 8016dc8:	0801bcb8 	.word	0x0801bcb8
 8016dcc:	0801bc90 	.word	0x0801bc90
 8016dd0:	7ff00000 	.word	0x7ff00000
 8016dd4:	7ca00000 	.word	0x7ca00000
 8016dd8:	fff80000 	.word	0xfff80000
 8016ddc:	7fefffff 	.word	0x7fefffff
 8016de0:	f018 0310 	ands.w	r3, r8, #16
 8016de4:	bf18      	it	ne
 8016de6:	236a      	movne	r3, #106	; 0x6a
 8016de8:	4da0      	ldr	r5, [pc, #640]	; (801706c <_strtod_l+0x834>)
 8016dea:	9304      	str	r3, [sp, #16]
 8016dec:	4650      	mov	r0, sl
 8016dee:	4659      	mov	r1, fp
 8016df0:	2300      	movs	r3, #0
 8016df2:	f1b8 0f00 	cmp.w	r8, #0
 8016df6:	f300 810a 	bgt.w	801700e <_strtod_l+0x7d6>
 8016dfa:	b10b      	cbz	r3, 8016e00 <_strtod_l+0x5c8>
 8016dfc:	4682      	mov	sl, r0
 8016dfe:	468b      	mov	fp, r1
 8016e00:	9b04      	ldr	r3, [sp, #16]
 8016e02:	b1bb      	cbz	r3, 8016e34 <_strtod_l+0x5fc>
 8016e04:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016e08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	4659      	mov	r1, fp
 8016e10:	dd10      	ble.n	8016e34 <_strtod_l+0x5fc>
 8016e12:	2b1f      	cmp	r3, #31
 8016e14:	f340 8107 	ble.w	8017026 <_strtod_l+0x7ee>
 8016e18:	2b34      	cmp	r3, #52	; 0x34
 8016e1a:	bfde      	ittt	le
 8016e1c:	3b20      	suble	r3, #32
 8016e1e:	f04f 32ff 	movle.w	r2, #4294967295
 8016e22:	fa02 f303 	lslle.w	r3, r2, r3
 8016e26:	f04f 0a00 	mov.w	sl, #0
 8016e2a:	bfcc      	ite	gt
 8016e2c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016e30:	ea03 0b01 	andle.w	fp, r3, r1
 8016e34:	2200      	movs	r2, #0
 8016e36:	2300      	movs	r3, #0
 8016e38:	4650      	mov	r0, sl
 8016e3a:	4659      	mov	r1, fp
 8016e3c:	f7e9 fe54 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d1ac      	bne.n	8016d9e <_strtod_l+0x566>
 8016e44:	9b07      	ldr	r3, [sp, #28]
 8016e46:	9300      	str	r3, [sp, #0]
 8016e48:	9a05      	ldr	r2, [sp, #20]
 8016e4a:	9908      	ldr	r1, [sp, #32]
 8016e4c:	4623      	mov	r3, r4
 8016e4e:	4648      	mov	r0, r9
 8016e50:	f001 fdac 	bl	80189ac <__s2b>
 8016e54:	9007      	str	r0, [sp, #28]
 8016e56:	2800      	cmp	r0, #0
 8016e58:	f43f af08 	beq.w	8016c6c <_strtod_l+0x434>
 8016e5c:	9a06      	ldr	r2, [sp, #24]
 8016e5e:	9b06      	ldr	r3, [sp, #24]
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	f1c3 0300 	rsb	r3, r3, #0
 8016e66:	bfa8      	it	ge
 8016e68:	2300      	movge	r3, #0
 8016e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8016e6c:	2400      	movs	r4, #0
 8016e6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016e72:	9316      	str	r3, [sp, #88]	; 0x58
 8016e74:	46a0      	mov	r8, r4
 8016e76:	9b07      	ldr	r3, [sp, #28]
 8016e78:	4648      	mov	r0, r9
 8016e7a:	6859      	ldr	r1, [r3, #4]
 8016e7c:	f001 fd10 	bl	80188a0 <_Balloc>
 8016e80:	9005      	str	r0, [sp, #20]
 8016e82:	2800      	cmp	r0, #0
 8016e84:	f43f aef6 	beq.w	8016c74 <_strtod_l+0x43c>
 8016e88:	9b07      	ldr	r3, [sp, #28]
 8016e8a:	691a      	ldr	r2, [r3, #16]
 8016e8c:	3202      	adds	r2, #2
 8016e8e:	f103 010c 	add.w	r1, r3, #12
 8016e92:	0092      	lsls	r2, r2, #2
 8016e94:	300c      	adds	r0, #12
 8016e96:	f7fe fcfb 	bl	8015890 <memcpy>
 8016e9a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e9c:	a91d      	add	r1, sp, #116	; 0x74
 8016e9e:	ec4b ab10 	vmov	d0, sl, fp
 8016ea2:	4648      	mov	r0, r9
 8016ea4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016ea8:	f002 f83c 	bl	8018f24 <__d2b>
 8016eac:	901c      	str	r0, [sp, #112]	; 0x70
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	f43f aee0 	beq.w	8016c74 <_strtod_l+0x43c>
 8016eb4:	2101      	movs	r1, #1
 8016eb6:	4648      	mov	r0, r9
 8016eb8:	f001 fe04 	bl	8018ac4 <__i2b>
 8016ebc:	4680      	mov	r8, r0
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f43f aed8 	beq.w	8016c74 <_strtod_l+0x43c>
 8016ec4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016ec6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ec8:	2e00      	cmp	r6, #0
 8016eca:	bfab      	itete	ge
 8016ecc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016ece:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016ed0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016ed2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016ed4:	bfac      	ite	ge
 8016ed6:	18f7      	addge	r7, r6, r3
 8016ed8:	1b9d      	sublt	r5, r3, r6
 8016eda:	9b04      	ldr	r3, [sp, #16]
 8016edc:	1af6      	subs	r6, r6, r3
 8016ede:	4416      	add	r6, r2
 8016ee0:	4b63      	ldr	r3, [pc, #396]	; (8017070 <_strtod_l+0x838>)
 8016ee2:	3e01      	subs	r6, #1
 8016ee4:	429e      	cmp	r6, r3
 8016ee6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016eea:	f280 80af 	bge.w	801704c <_strtod_l+0x814>
 8016eee:	1b9b      	subs	r3, r3, r6
 8016ef0:	2b1f      	cmp	r3, #31
 8016ef2:	eba2 0203 	sub.w	r2, r2, r3
 8016ef6:	f04f 0101 	mov.w	r1, #1
 8016efa:	f300 809b 	bgt.w	8017034 <_strtod_l+0x7fc>
 8016efe:	fa01 f303 	lsl.w	r3, r1, r3
 8016f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f04:	2300      	movs	r3, #0
 8016f06:	930a      	str	r3, [sp, #40]	; 0x28
 8016f08:	18be      	adds	r6, r7, r2
 8016f0a:	9b04      	ldr	r3, [sp, #16]
 8016f0c:	42b7      	cmp	r7, r6
 8016f0e:	4415      	add	r5, r2
 8016f10:	441d      	add	r5, r3
 8016f12:	463b      	mov	r3, r7
 8016f14:	bfa8      	it	ge
 8016f16:	4633      	movge	r3, r6
 8016f18:	42ab      	cmp	r3, r5
 8016f1a:	bfa8      	it	ge
 8016f1c:	462b      	movge	r3, r5
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	bfc2      	ittt	gt
 8016f22:	1af6      	subgt	r6, r6, r3
 8016f24:	1aed      	subgt	r5, r5, r3
 8016f26:	1aff      	subgt	r7, r7, r3
 8016f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f2a:	b1bb      	cbz	r3, 8016f5c <_strtod_l+0x724>
 8016f2c:	4641      	mov	r1, r8
 8016f2e:	461a      	mov	r2, r3
 8016f30:	4648      	mov	r0, r9
 8016f32:	f001 fe67 	bl	8018c04 <__pow5mult>
 8016f36:	4680      	mov	r8, r0
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f43f ae9b 	beq.w	8016c74 <_strtod_l+0x43c>
 8016f3e:	4601      	mov	r1, r0
 8016f40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f42:	4648      	mov	r0, r9
 8016f44:	f001 fdc7 	bl	8018ad6 <__multiply>
 8016f48:	900c      	str	r0, [sp, #48]	; 0x30
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	f43f ae92 	beq.w	8016c74 <_strtod_l+0x43c>
 8016f50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f52:	4648      	mov	r0, r9
 8016f54:	f001 fcd8 	bl	8018908 <_Bfree>
 8016f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f5a:	931c      	str	r3, [sp, #112]	; 0x70
 8016f5c:	2e00      	cmp	r6, #0
 8016f5e:	dc7a      	bgt.n	8017056 <_strtod_l+0x81e>
 8016f60:	9b06      	ldr	r3, [sp, #24]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	dd08      	ble.n	8016f78 <_strtod_l+0x740>
 8016f66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f68:	9905      	ldr	r1, [sp, #20]
 8016f6a:	4648      	mov	r0, r9
 8016f6c:	f001 fe4a 	bl	8018c04 <__pow5mult>
 8016f70:	9005      	str	r0, [sp, #20]
 8016f72:	2800      	cmp	r0, #0
 8016f74:	f43f ae7e 	beq.w	8016c74 <_strtod_l+0x43c>
 8016f78:	2d00      	cmp	r5, #0
 8016f7a:	dd08      	ble.n	8016f8e <_strtod_l+0x756>
 8016f7c:	462a      	mov	r2, r5
 8016f7e:	9905      	ldr	r1, [sp, #20]
 8016f80:	4648      	mov	r0, r9
 8016f82:	f001 fe8d 	bl	8018ca0 <__lshift>
 8016f86:	9005      	str	r0, [sp, #20]
 8016f88:	2800      	cmp	r0, #0
 8016f8a:	f43f ae73 	beq.w	8016c74 <_strtod_l+0x43c>
 8016f8e:	2f00      	cmp	r7, #0
 8016f90:	dd08      	ble.n	8016fa4 <_strtod_l+0x76c>
 8016f92:	4641      	mov	r1, r8
 8016f94:	463a      	mov	r2, r7
 8016f96:	4648      	mov	r0, r9
 8016f98:	f001 fe82 	bl	8018ca0 <__lshift>
 8016f9c:	4680      	mov	r8, r0
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	f43f ae68 	beq.w	8016c74 <_strtod_l+0x43c>
 8016fa4:	9a05      	ldr	r2, [sp, #20]
 8016fa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fa8:	4648      	mov	r0, r9
 8016faa:	f001 fee7 	bl	8018d7c <__mdiff>
 8016fae:	4604      	mov	r4, r0
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	f43f ae5f 	beq.w	8016c74 <_strtod_l+0x43c>
 8016fb6:	68c3      	ldr	r3, [r0, #12]
 8016fb8:	930c      	str	r3, [sp, #48]	; 0x30
 8016fba:	2300      	movs	r3, #0
 8016fbc:	60c3      	str	r3, [r0, #12]
 8016fbe:	4641      	mov	r1, r8
 8016fc0:	f001 fec2 	bl	8018d48 <__mcmp>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	da55      	bge.n	8017074 <_strtod_l+0x83c>
 8016fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fca:	b9e3      	cbnz	r3, 8017006 <_strtod_l+0x7ce>
 8016fcc:	f1ba 0f00 	cmp.w	sl, #0
 8016fd0:	d119      	bne.n	8017006 <_strtod_l+0x7ce>
 8016fd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016fd6:	b9b3      	cbnz	r3, 8017006 <_strtod_l+0x7ce>
 8016fd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016fdc:	0d1b      	lsrs	r3, r3, #20
 8016fde:	051b      	lsls	r3, r3, #20
 8016fe0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016fe4:	d90f      	bls.n	8017006 <_strtod_l+0x7ce>
 8016fe6:	6963      	ldr	r3, [r4, #20]
 8016fe8:	b913      	cbnz	r3, 8016ff0 <_strtod_l+0x7b8>
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	dd0a      	ble.n	8017006 <_strtod_l+0x7ce>
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	4648      	mov	r0, r9
 8016ff6:	f001 fe53 	bl	8018ca0 <__lshift>
 8016ffa:	4641      	mov	r1, r8
 8016ffc:	4604      	mov	r4, r0
 8016ffe:	f001 fea3 	bl	8018d48 <__mcmp>
 8017002:	2800      	cmp	r0, #0
 8017004:	dc67      	bgt.n	80170d6 <_strtod_l+0x89e>
 8017006:	9b04      	ldr	r3, [sp, #16]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d171      	bne.n	80170f0 <_strtod_l+0x8b8>
 801700c:	e63d      	b.n	8016c8a <_strtod_l+0x452>
 801700e:	f018 0f01 	tst.w	r8, #1
 8017012:	d004      	beq.n	801701e <_strtod_l+0x7e6>
 8017014:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017018:	f7e9 fafe 	bl	8000618 <__aeabi_dmul>
 801701c:	2301      	movs	r3, #1
 801701e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017022:	3508      	adds	r5, #8
 8017024:	e6e5      	b.n	8016df2 <_strtod_l+0x5ba>
 8017026:	f04f 32ff 	mov.w	r2, #4294967295
 801702a:	fa02 f303 	lsl.w	r3, r2, r3
 801702e:	ea03 0a0a 	and.w	sl, r3, sl
 8017032:	e6ff      	b.n	8016e34 <_strtod_l+0x5fc>
 8017034:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017038:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801703c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017040:	36e2      	adds	r6, #226	; 0xe2
 8017042:	fa01 f306 	lsl.w	r3, r1, r6
 8017046:	930a      	str	r3, [sp, #40]	; 0x28
 8017048:	910f      	str	r1, [sp, #60]	; 0x3c
 801704a:	e75d      	b.n	8016f08 <_strtod_l+0x6d0>
 801704c:	2300      	movs	r3, #0
 801704e:	930a      	str	r3, [sp, #40]	; 0x28
 8017050:	2301      	movs	r3, #1
 8017052:	930f      	str	r3, [sp, #60]	; 0x3c
 8017054:	e758      	b.n	8016f08 <_strtod_l+0x6d0>
 8017056:	4632      	mov	r2, r6
 8017058:	991c      	ldr	r1, [sp, #112]	; 0x70
 801705a:	4648      	mov	r0, r9
 801705c:	f001 fe20 	bl	8018ca0 <__lshift>
 8017060:	901c      	str	r0, [sp, #112]	; 0x70
 8017062:	2800      	cmp	r0, #0
 8017064:	f47f af7c 	bne.w	8016f60 <_strtod_l+0x728>
 8017068:	e604      	b.n	8016c74 <_strtod_l+0x43c>
 801706a:	bf00      	nop
 801706c:	0801bc50 	.word	0x0801bc50
 8017070:	fffffc02 	.word	0xfffffc02
 8017074:	465d      	mov	r5, fp
 8017076:	f040 8086 	bne.w	8017186 <_strtod_l+0x94e>
 801707a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801707c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017080:	b32a      	cbz	r2, 80170ce <_strtod_l+0x896>
 8017082:	4aaf      	ldr	r2, [pc, #700]	; (8017340 <_strtod_l+0xb08>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d153      	bne.n	8017130 <_strtod_l+0x8f8>
 8017088:	9b04      	ldr	r3, [sp, #16]
 801708a:	4650      	mov	r0, sl
 801708c:	b1d3      	cbz	r3, 80170c4 <_strtod_l+0x88c>
 801708e:	4aad      	ldr	r2, [pc, #692]	; (8017344 <_strtod_l+0xb0c>)
 8017090:	402a      	ands	r2, r5
 8017092:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017096:	f04f 31ff 	mov.w	r1, #4294967295
 801709a:	d816      	bhi.n	80170ca <_strtod_l+0x892>
 801709c:	0d12      	lsrs	r2, r2, #20
 801709e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80170a2:	fa01 f303 	lsl.w	r3, r1, r3
 80170a6:	4298      	cmp	r0, r3
 80170a8:	d142      	bne.n	8017130 <_strtod_l+0x8f8>
 80170aa:	4ba7      	ldr	r3, [pc, #668]	; (8017348 <_strtod_l+0xb10>)
 80170ac:	429d      	cmp	r5, r3
 80170ae:	d102      	bne.n	80170b6 <_strtod_l+0x87e>
 80170b0:	3001      	adds	r0, #1
 80170b2:	f43f addf 	beq.w	8016c74 <_strtod_l+0x43c>
 80170b6:	4ba3      	ldr	r3, [pc, #652]	; (8017344 <_strtod_l+0xb0c>)
 80170b8:	402b      	ands	r3, r5
 80170ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80170be:	f04f 0a00 	mov.w	sl, #0
 80170c2:	e7a0      	b.n	8017006 <_strtod_l+0x7ce>
 80170c4:	f04f 33ff 	mov.w	r3, #4294967295
 80170c8:	e7ed      	b.n	80170a6 <_strtod_l+0x86e>
 80170ca:	460b      	mov	r3, r1
 80170cc:	e7eb      	b.n	80170a6 <_strtod_l+0x86e>
 80170ce:	bb7b      	cbnz	r3, 8017130 <_strtod_l+0x8f8>
 80170d0:	f1ba 0f00 	cmp.w	sl, #0
 80170d4:	d12c      	bne.n	8017130 <_strtod_l+0x8f8>
 80170d6:	9904      	ldr	r1, [sp, #16]
 80170d8:	4a9a      	ldr	r2, [pc, #616]	; (8017344 <_strtod_l+0xb0c>)
 80170da:	465b      	mov	r3, fp
 80170dc:	b1f1      	cbz	r1, 801711c <_strtod_l+0x8e4>
 80170de:	ea02 010b 	and.w	r1, r2, fp
 80170e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80170e6:	dc19      	bgt.n	801711c <_strtod_l+0x8e4>
 80170e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80170ec:	f77f ae5b 	ble.w	8016da6 <_strtod_l+0x56e>
 80170f0:	4a96      	ldr	r2, [pc, #600]	; (801734c <_strtod_l+0xb14>)
 80170f2:	2300      	movs	r3, #0
 80170f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80170f8:	4650      	mov	r0, sl
 80170fa:	4659      	mov	r1, fp
 80170fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017100:	f7e9 fa8a 	bl	8000618 <__aeabi_dmul>
 8017104:	4682      	mov	sl, r0
 8017106:	468b      	mov	fp, r1
 8017108:	2900      	cmp	r1, #0
 801710a:	f47f adbe 	bne.w	8016c8a <_strtod_l+0x452>
 801710e:	2800      	cmp	r0, #0
 8017110:	f47f adbb 	bne.w	8016c8a <_strtod_l+0x452>
 8017114:	2322      	movs	r3, #34	; 0x22
 8017116:	f8c9 3000 	str.w	r3, [r9]
 801711a:	e5b6      	b.n	8016c8a <_strtod_l+0x452>
 801711c:	4013      	ands	r3, r2
 801711e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017122:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017126:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801712a:	f04f 3aff 	mov.w	sl, #4294967295
 801712e:	e76a      	b.n	8017006 <_strtod_l+0x7ce>
 8017130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017132:	b193      	cbz	r3, 801715a <_strtod_l+0x922>
 8017134:	422b      	tst	r3, r5
 8017136:	f43f af66 	beq.w	8017006 <_strtod_l+0x7ce>
 801713a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801713c:	9a04      	ldr	r2, [sp, #16]
 801713e:	4650      	mov	r0, sl
 8017140:	4659      	mov	r1, fp
 8017142:	b173      	cbz	r3, 8017162 <_strtod_l+0x92a>
 8017144:	f7ff fb5b 	bl	80167fe <sulp>
 8017148:	4602      	mov	r2, r0
 801714a:	460b      	mov	r3, r1
 801714c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017150:	f7e9 f8ac 	bl	80002ac <__adddf3>
 8017154:	4682      	mov	sl, r0
 8017156:	468b      	mov	fp, r1
 8017158:	e755      	b.n	8017006 <_strtod_l+0x7ce>
 801715a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801715c:	ea13 0f0a 	tst.w	r3, sl
 8017160:	e7e9      	b.n	8017136 <_strtod_l+0x8fe>
 8017162:	f7ff fb4c 	bl	80167fe <sulp>
 8017166:	4602      	mov	r2, r0
 8017168:	460b      	mov	r3, r1
 801716a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801716e:	f7e9 f89b 	bl	80002a8 <__aeabi_dsub>
 8017172:	2200      	movs	r2, #0
 8017174:	2300      	movs	r3, #0
 8017176:	4682      	mov	sl, r0
 8017178:	468b      	mov	fp, r1
 801717a:	f7e9 fcb5 	bl	8000ae8 <__aeabi_dcmpeq>
 801717e:	2800      	cmp	r0, #0
 8017180:	f47f ae11 	bne.w	8016da6 <_strtod_l+0x56e>
 8017184:	e73f      	b.n	8017006 <_strtod_l+0x7ce>
 8017186:	4641      	mov	r1, r8
 8017188:	4620      	mov	r0, r4
 801718a:	f001 ff1a 	bl	8018fc2 <__ratio>
 801718e:	ec57 6b10 	vmov	r6, r7, d0
 8017192:	2200      	movs	r2, #0
 8017194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017198:	ee10 0a10 	vmov	r0, s0
 801719c:	4639      	mov	r1, r7
 801719e:	f7e9 fcb7 	bl	8000b10 <__aeabi_dcmple>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d077      	beq.n	8017296 <_strtod_l+0xa5e>
 80171a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d04a      	beq.n	8017242 <_strtod_l+0xa0a>
 80171ac:	4b68      	ldr	r3, [pc, #416]	; (8017350 <_strtod_l+0xb18>)
 80171ae:	2200      	movs	r2, #0
 80171b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171b4:	4f66      	ldr	r7, [pc, #408]	; (8017350 <_strtod_l+0xb18>)
 80171b6:	2600      	movs	r6, #0
 80171b8:	4b62      	ldr	r3, [pc, #392]	; (8017344 <_strtod_l+0xb0c>)
 80171ba:	402b      	ands	r3, r5
 80171bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80171be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171c0:	4b64      	ldr	r3, [pc, #400]	; (8017354 <_strtod_l+0xb1c>)
 80171c2:	429a      	cmp	r2, r3
 80171c4:	f040 80ce 	bne.w	8017364 <_strtod_l+0xb2c>
 80171c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80171d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80171d4:	ec4b ab10 	vmov	d0, sl, fp
 80171d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80171dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80171e0:	f001 fe2a 	bl	8018e38 <__ulp>
 80171e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80171e8:	ec53 2b10 	vmov	r2, r3, d0
 80171ec:	f7e9 fa14 	bl	8000618 <__aeabi_dmul>
 80171f0:	4652      	mov	r2, sl
 80171f2:	465b      	mov	r3, fp
 80171f4:	f7e9 f85a 	bl	80002ac <__adddf3>
 80171f8:	460b      	mov	r3, r1
 80171fa:	4952      	ldr	r1, [pc, #328]	; (8017344 <_strtod_l+0xb0c>)
 80171fc:	4a56      	ldr	r2, [pc, #344]	; (8017358 <_strtod_l+0xb20>)
 80171fe:	4019      	ands	r1, r3
 8017200:	4291      	cmp	r1, r2
 8017202:	4682      	mov	sl, r0
 8017204:	d95b      	bls.n	80172be <_strtod_l+0xa86>
 8017206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017208:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801720c:	4293      	cmp	r3, r2
 801720e:	d103      	bne.n	8017218 <_strtod_l+0x9e0>
 8017210:	9b08      	ldr	r3, [sp, #32]
 8017212:	3301      	adds	r3, #1
 8017214:	f43f ad2e 	beq.w	8016c74 <_strtod_l+0x43c>
 8017218:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017348 <_strtod_l+0xb10>
 801721c:	f04f 3aff 	mov.w	sl, #4294967295
 8017220:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017222:	4648      	mov	r0, r9
 8017224:	f001 fb70 	bl	8018908 <_Bfree>
 8017228:	9905      	ldr	r1, [sp, #20]
 801722a:	4648      	mov	r0, r9
 801722c:	f001 fb6c 	bl	8018908 <_Bfree>
 8017230:	4641      	mov	r1, r8
 8017232:	4648      	mov	r0, r9
 8017234:	f001 fb68 	bl	8018908 <_Bfree>
 8017238:	4621      	mov	r1, r4
 801723a:	4648      	mov	r0, r9
 801723c:	f001 fb64 	bl	8018908 <_Bfree>
 8017240:	e619      	b.n	8016e76 <_strtod_l+0x63e>
 8017242:	f1ba 0f00 	cmp.w	sl, #0
 8017246:	d11a      	bne.n	801727e <_strtod_l+0xa46>
 8017248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801724c:	b9eb      	cbnz	r3, 801728a <_strtod_l+0xa52>
 801724e:	2200      	movs	r2, #0
 8017250:	4b3f      	ldr	r3, [pc, #252]	; (8017350 <_strtod_l+0xb18>)
 8017252:	4630      	mov	r0, r6
 8017254:	4639      	mov	r1, r7
 8017256:	f7e9 fc51 	bl	8000afc <__aeabi_dcmplt>
 801725a:	b9c8      	cbnz	r0, 8017290 <_strtod_l+0xa58>
 801725c:	4630      	mov	r0, r6
 801725e:	4639      	mov	r1, r7
 8017260:	2200      	movs	r2, #0
 8017262:	4b3e      	ldr	r3, [pc, #248]	; (801735c <_strtod_l+0xb24>)
 8017264:	f7e9 f9d8 	bl	8000618 <__aeabi_dmul>
 8017268:	4606      	mov	r6, r0
 801726a:	460f      	mov	r7, r1
 801726c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017270:	9618      	str	r6, [sp, #96]	; 0x60
 8017272:	9319      	str	r3, [sp, #100]	; 0x64
 8017274:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017278:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801727c:	e79c      	b.n	80171b8 <_strtod_l+0x980>
 801727e:	f1ba 0f01 	cmp.w	sl, #1
 8017282:	d102      	bne.n	801728a <_strtod_l+0xa52>
 8017284:	2d00      	cmp	r5, #0
 8017286:	f43f ad8e 	beq.w	8016da6 <_strtod_l+0x56e>
 801728a:	2200      	movs	r2, #0
 801728c:	4b34      	ldr	r3, [pc, #208]	; (8017360 <_strtod_l+0xb28>)
 801728e:	e78f      	b.n	80171b0 <_strtod_l+0x978>
 8017290:	2600      	movs	r6, #0
 8017292:	4f32      	ldr	r7, [pc, #200]	; (801735c <_strtod_l+0xb24>)
 8017294:	e7ea      	b.n	801726c <_strtod_l+0xa34>
 8017296:	4b31      	ldr	r3, [pc, #196]	; (801735c <_strtod_l+0xb24>)
 8017298:	4630      	mov	r0, r6
 801729a:	4639      	mov	r1, r7
 801729c:	2200      	movs	r2, #0
 801729e:	f7e9 f9bb 	bl	8000618 <__aeabi_dmul>
 80172a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172a4:	4606      	mov	r6, r0
 80172a6:	460f      	mov	r7, r1
 80172a8:	b933      	cbnz	r3, 80172b8 <_strtod_l+0xa80>
 80172aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172ae:	9010      	str	r0, [sp, #64]	; 0x40
 80172b0:	9311      	str	r3, [sp, #68]	; 0x44
 80172b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80172b6:	e7df      	b.n	8017278 <_strtod_l+0xa40>
 80172b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80172bc:	e7f9      	b.n	80172b2 <_strtod_l+0xa7a>
 80172be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80172c2:	9b04      	ldr	r3, [sp, #16]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d1ab      	bne.n	8017220 <_strtod_l+0x9e8>
 80172c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80172cc:	0d1b      	lsrs	r3, r3, #20
 80172ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80172d0:	051b      	lsls	r3, r3, #20
 80172d2:	429a      	cmp	r2, r3
 80172d4:	465d      	mov	r5, fp
 80172d6:	d1a3      	bne.n	8017220 <_strtod_l+0x9e8>
 80172d8:	4639      	mov	r1, r7
 80172da:	4630      	mov	r0, r6
 80172dc:	f7e9 fc4c 	bl	8000b78 <__aeabi_d2iz>
 80172e0:	f7e9 f930 	bl	8000544 <__aeabi_i2d>
 80172e4:	460b      	mov	r3, r1
 80172e6:	4602      	mov	r2, r0
 80172e8:	4639      	mov	r1, r7
 80172ea:	4630      	mov	r0, r6
 80172ec:	f7e8 ffdc 	bl	80002a8 <__aeabi_dsub>
 80172f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172f2:	4606      	mov	r6, r0
 80172f4:	460f      	mov	r7, r1
 80172f6:	b933      	cbnz	r3, 8017306 <_strtod_l+0xace>
 80172f8:	f1ba 0f00 	cmp.w	sl, #0
 80172fc:	d103      	bne.n	8017306 <_strtod_l+0xace>
 80172fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017302:	2d00      	cmp	r5, #0
 8017304:	d06d      	beq.n	80173e2 <_strtod_l+0xbaa>
 8017306:	a30a      	add	r3, pc, #40	; (adr r3, 8017330 <_strtod_l+0xaf8>)
 8017308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730c:	4630      	mov	r0, r6
 801730e:	4639      	mov	r1, r7
 8017310:	f7e9 fbf4 	bl	8000afc <__aeabi_dcmplt>
 8017314:	2800      	cmp	r0, #0
 8017316:	f47f acb8 	bne.w	8016c8a <_strtod_l+0x452>
 801731a:	a307      	add	r3, pc, #28	; (adr r3, 8017338 <_strtod_l+0xb00>)
 801731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017320:	4630      	mov	r0, r6
 8017322:	4639      	mov	r1, r7
 8017324:	f7e9 fc08 	bl	8000b38 <__aeabi_dcmpgt>
 8017328:	2800      	cmp	r0, #0
 801732a:	f43f af79 	beq.w	8017220 <_strtod_l+0x9e8>
 801732e:	e4ac      	b.n	8016c8a <_strtod_l+0x452>
 8017330:	94a03595 	.word	0x94a03595
 8017334:	3fdfffff 	.word	0x3fdfffff
 8017338:	35afe535 	.word	0x35afe535
 801733c:	3fe00000 	.word	0x3fe00000
 8017340:	000fffff 	.word	0x000fffff
 8017344:	7ff00000 	.word	0x7ff00000
 8017348:	7fefffff 	.word	0x7fefffff
 801734c:	39500000 	.word	0x39500000
 8017350:	3ff00000 	.word	0x3ff00000
 8017354:	7fe00000 	.word	0x7fe00000
 8017358:	7c9fffff 	.word	0x7c9fffff
 801735c:	3fe00000 	.word	0x3fe00000
 8017360:	bff00000 	.word	0xbff00000
 8017364:	9b04      	ldr	r3, [sp, #16]
 8017366:	b333      	cbz	r3, 80173b6 <_strtod_l+0xb7e>
 8017368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801736a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801736e:	d822      	bhi.n	80173b6 <_strtod_l+0xb7e>
 8017370:	a327      	add	r3, pc, #156	; (adr r3, 8017410 <_strtod_l+0xbd8>)
 8017372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017376:	4630      	mov	r0, r6
 8017378:	4639      	mov	r1, r7
 801737a:	f7e9 fbc9 	bl	8000b10 <__aeabi_dcmple>
 801737e:	b1a0      	cbz	r0, 80173aa <_strtod_l+0xb72>
 8017380:	4639      	mov	r1, r7
 8017382:	4630      	mov	r0, r6
 8017384:	f7e9 fc20 	bl	8000bc8 <__aeabi_d2uiz>
 8017388:	2800      	cmp	r0, #0
 801738a:	bf08      	it	eq
 801738c:	2001      	moveq	r0, #1
 801738e:	f7e9 f8c9 	bl	8000524 <__aeabi_ui2d>
 8017392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017394:	4606      	mov	r6, r0
 8017396:	460f      	mov	r7, r1
 8017398:	bb03      	cbnz	r3, 80173dc <_strtod_l+0xba4>
 801739a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801739e:	9012      	str	r0, [sp, #72]	; 0x48
 80173a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80173a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80173a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80173ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80173b2:	1a9b      	subs	r3, r3, r2
 80173b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80173b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80173ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80173be:	f001 fd3b 	bl	8018e38 <__ulp>
 80173c2:	4650      	mov	r0, sl
 80173c4:	ec53 2b10 	vmov	r2, r3, d0
 80173c8:	4659      	mov	r1, fp
 80173ca:	f7e9 f925 	bl	8000618 <__aeabi_dmul>
 80173ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80173d2:	f7e8 ff6b 	bl	80002ac <__adddf3>
 80173d6:	4682      	mov	sl, r0
 80173d8:	468b      	mov	fp, r1
 80173da:	e772      	b.n	80172c2 <_strtod_l+0xa8a>
 80173dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80173e0:	e7df      	b.n	80173a2 <_strtod_l+0xb6a>
 80173e2:	a30d      	add	r3, pc, #52	; (adr r3, 8017418 <_strtod_l+0xbe0>)
 80173e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e8:	f7e9 fb88 	bl	8000afc <__aeabi_dcmplt>
 80173ec:	e79c      	b.n	8017328 <_strtod_l+0xaf0>
 80173ee:	2300      	movs	r3, #0
 80173f0:	930d      	str	r3, [sp, #52]	; 0x34
 80173f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80173f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173f6:	6013      	str	r3, [r2, #0]
 80173f8:	f7ff ba61 	b.w	80168be <_strtod_l+0x86>
 80173fc:	2b65      	cmp	r3, #101	; 0x65
 80173fe:	f04f 0200 	mov.w	r2, #0
 8017402:	f43f ab4e 	beq.w	8016aa2 <_strtod_l+0x26a>
 8017406:	2101      	movs	r1, #1
 8017408:	4614      	mov	r4, r2
 801740a:	9104      	str	r1, [sp, #16]
 801740c:	f7ff bacb 	b.w	80169a6 <_strtod_l+0x16e>
 8017410:	ffc00000 	.word	0xffc00000
 8017414:	41dfffff 	.word	0x41dfffff
 8017418:	94a03595 	.word	0x94a03595
 801741c:	3fcfffff 	.word	0x3fcfffff

08017420 <_strtod_r>:
 8017420:	4b05      	ldr	r3, [pc, #20]	; (8017438 <_strtod_r+0x18>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	b410      	push	{r4}
 8017426:	6a1b      	ldr	r3, [r3, #32]
 8017428:	4c04      	ldr	r4, [pc, #16]	; (801743c <_strtod_r+0x1c>)
 801742a:	2b00      	cmp	r3, #0
 801742c:	bf08      	it	eq
 801742e:	4623      	moveq	r3, r4
 8017430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017434:	f7ff ba00 	b.w	8016838 <_strtod_l>
 8017438:	20000e60 	.word	0x20000e60
 801743c:	20000ec4 	.word	0x20000ec4

08017440 <_strtol_l.isra.0>:
 8017440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017444:	4680      	mov	r8, r0
 8017446:	4689      	mov	r9, r1
 8017448:	4692      	mov	sl, r2
 801744a:	461e      	mov	r6, r3
 801744c:	460f      	mov	r7, r1
 801744e:	463d      	mov	r5, r7
 8017450:	9808      	ldr	r0, [sp, #32]
 8017452:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017456:	f001 f9ed 	bl	8018834 <__locale_ctype_ptr_l>
 801745a:	4420      	add	r0, r4
 801745c:	7843      	ldrb	r3, [r0, #1]
 801745e:	f013 0308 	ands.w	r3, r3, #8
 8017462:	d132      	bne.n	80174ca <_strtol_l.isra.0+0x8a>
 8017464:	2c2d      	cmp	r4, #45	; 0x2d
 8017466:	d132      	bne.n	80174ce <_strtol_l.isra.0+0x8e>
 8017468:	787c      	ldrb	r4, [r7, #1]
 801746a:	1cbd      	adds	r5, r7, #2
 801746c:	2201      	movs	r2, #1
 801746e:	2e00      	cmp	r6, #0
 8017470:	d05d      	beq.n	801752e <_strtol_l.isra.0+0xee>
 8017472:	2e10      	cmp	r6, #16
 8017474:	d109      	bne.n	801748a <_strtol_l.isra.0+0x4a>
 8017476:	2c30      	cmp	r4, #48	; 0x30
 8017478:	d107      	bne.n	801748a <_strtol_l.isra.0+0x4a>
 801747a:	782b      	ldrb	r3, [r5, #0]
 801747c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017480:	2b58      	cmp	r3, #88	; 0x58
 8017482:	d14f      	bne.n	8017524 <_strtol_l.isra.0+0xe4>
 8017484:	786c      	ldrb	r4, [r5, #1]
 8017486:	2610      	movs	r6, #16
 8017488:	3502      	adds	r5, #2
 801748a:	2a00      	cmp	r2, #0
 801748c:	bf14      	ite	ne
 801748e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017492:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017496:	2700      	movs	r7, #0
 8017498:	fbb1 fcf6 	udiv	ip, r1, r6
 801749c:	4638      	mov	r0, r7
 801749e:	fb06 1e1c 	mls	lr, r6, ip, r1
 80174a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80174a6:	2b09      	cmp	r3, #9
 80174a8:	d817      	bhi.n	80174da <_strtol_l.isra.0+0x9a>
 80174aa:	461c      	mov	r4, r3
 80174ac:	42a6      	cmp	r6, r4
 80174ae:	dd23      	ble.n	80174f8 <_strtol_l.isra.0+0xb8>
 80174b0:	1c7b      	adds	r3, r7, #1
 80174b2:	d007      	beq.n	80174c4 <_strtol_l.isra.0+0x84>
 80174b4:	4584      	cmp	ip, r0
 80174b6:	d31c      	bcc.n	80174f2 <_strtol_l.isra.0+0xb2>
 80174b8:	d101      	bne.n	80174be <_strtol_l.isra.0+0x7e>
 80174ba:	45a6      	cmp	lr, r4
 80174bc:	db19      	blt.n	80174f2 <_strtol_l.isra.0+0xb2>
 80174be:	fb00 4006 	mla	r0, r0, r6, r4
 80174c2:	2701      	movs	r7, #1
 80174c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174c8:	e7eb      	b.n	80174a2 <_strtol_l.isra.0+0x62>
 80174ca:	462f      	mov	r7, r5
 80174cc:	e7bf      	b.n	801744e <_strtol_l.isra.0+0xe>
 80174ce:	2c2b      	cmp	r4, #43	; 0x2b
 80174d0:	bf04      	itt	eq
 80174d2:	1cbd      	addeq	r5, r7, #2
 80174d4:	787c      	ldrbeq	r4, [r7, #1]
 80174d6:	461a      	mov	r2, r3
 80174d8:	e7c9      	b.n	801746e <_strtol_l.isra.0+0x2e>
 80174da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80174de:	2b19      	cmp	r3, #25
 80174e0:	d801      	bhi.n	80174e6 <_strtol_l.isra.0+0xa6>
 80174e2:	3c37      	subs	r4, #55	; 0x37
 80174e4:	e7e2      	b.n	80174ac <_strtol_l.isra.0+0x6c>
 80174e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80174ea:	2b19      	cmp	r3, #25
 80174ec:	d804      	bhi.n	80174f8 <_strtol_l.isra.0+0xb8>
 80174ee:	3c57      	subs	r4, #87	; 0x57
 80174f0:	e7dc      	b.n	80174ac <_strtol_l.isra.0+0x6c>
 80174f2:	f04f 37ff 	mov.w	r7, #4294967295
 80174f6:	e7e5      	b.n	80174c4 <_strtol_l.isra.0+0x84>
 80174f8:	1c7b      	adds	r3, r7, #1
 80174fa:	d108      	bne.n	801750e <_strtol_l.isra.0+0xce>
 80174fc:	2322      	movs	r3, #34	; 0x22
 80174fe:	f8c8 3000 	str.w	r3, [r8]
 8017502:	4608      	mov	r0, r1
 8017504:	f1ba 0f00 	cmp.w	sl, #0
 8017508:	d107      	bne.n	801751a <_strtol_l.isra.0+0xda>
 801750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801750e:	b102      	cbz	r2, 8017512 <_strtol_l.isra.0+0xd2>
 8017510:	4240      	negs	r0, r0
 8017512:	f1ba 0f00 	cmp.w	sl, #0
 8017516:	d0f8      	beq.n	801750a <_strtol_l.isra.0+0xca>
 8017518:	b10f      	cbz	r7, 801751e <_strtol_l.isra.0+0xde>
 801751a:	f105 39ff 	add.w	r9, r5, #4294967295
 801751e:	f8ca 9000 	str.w	r9, [sl]
 8017522:	e7f2      	b.n	801750a <_strtol_l.isra.0+0xca>
 8017524:	2430      	movs	r4, #48	; 0x30
 8017526:	2e00      	cmp	r6, #0
 8017528:	d1af      	bne.n	801748a <_strtol_l.isra.0+0x4a>
 801752a:	2608      	movs	r6, #8
 801752c:	e7ad      	b.n	801748a <_strtol_l.isra.0+0x4a>
 801752e:	2c30      	cmp	r4, #48	; 0x30
 8017530:	d0a3      	beq.n	801747a <_strtol_l.isra.0+0x3a>
 8017532:	260a      	movs	r6, #10
 8017534:	e7a9      	b.n	801748a <_strtol_l.isra.0+0x4a>
	...

08017538 <_strtol_r>:
 8017538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801753a:	4c06      	ldr	r4, [pc, #24]	; (8017554 <_strtol_r+0x1c>)
 801753c:	4d06      	ldr	r5, [pc, #24]	; (8017558 <_strtol_r+0x20>)
 801753e:	6824      	ldr	r4, [r4, #0]
 8017540:	6a24      	ldr	r4, [r4, #32]
 8017542:	2c00      	cmp	r4, #0
 8017544:	bf08      	it	eq
 8017546:	462c      	moveq	r4, r5
 8017548:	9400      	str	r4, [sp, #0]
 801754a:	f7ff ff79 	bl	8017440 <_strtol_l.isra.0>
 801754e:	b003      	add	sp, #12
 8017550:	bd30      	pop	{r4, r5, pc}
 8017552:	bf00      	nop
 8017554:	20000e60 	.word	0x20000e60
 8017558:	20000ec4 	.word	0x20000ec4

0801755c <quorem>:
 801755c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017560:	6903      	ldr	r3, [r0, #16]
 8017562:	690c      	ldr	r4, [r1, #16]
 8017564:	42a3      	cmp	r3, r4
 8017566:	4680      	mov	r8, r0
 8017568:	f2c0 8082 	blt.w	8017670 <quorem+0x114>
 801756c:	3c01      	subs	r4, #1
 801756e:	f101 0714 	add.w	r7, r1, #20
 8017572:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017576:	f100 0614 	add.w	r6, r0, #20
 801757a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801757e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017582:	eb06 030c 	add.w	r3, r6, ip
 8017586:	3501      	adds	r5, #1
 8017588:	eb07 090c 	add.w	r9, r7, ip
 801758c:	9301      	str	r3, [sp, #4]
 801758e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017592:	b395      	cbz	r5, 80175fa <quorem+0x9e>
 8017594:	f04f 0a00 	mov.w	sl, #0
 8017598:	4638      	mov	r0, r7
 801759a:	46b6      	mov	lr, r6
 801759c:	46d3      	mov	fp, sl
 801759e:	f850 2b04 	ldr.w	r2, [r0], #4
 80175a2:	b293      	uxth	r3, r2
 80175a4:	fb05 a303 	mla	r3, r5, r3, sl
 80175a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	ebab 0303 	sub.w	r3, fp, r3
 80175b2:	0c12      	lsrs	r2, r2, #16
 80175b4:	f8de b000 	ldr.w	fp, [lr]
 80175b8:	fb05 a202 	mla	r2, r5, r2, sl
 80175bc:	fa13 f38b 	uxtah	r3, r3, fp
 80175c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80175c4:	fa1f fb82 	uxth.w	fp, r2
 80175c8:	f8de 2000 	ldr.w	r2, [lr]
 80175cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80175d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175da:	4581      	cmp	r9, r0
 80175dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80175e0:	f84e 3b04 	str.w	r3, [lr], #4
 80175e4:	d2db      	bcs.n	801759e <quorem+0x42>
 80175e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80175ea:	b933      	cbnz	r3, 80175fa <quorem+0x9e>
 80175ec:	9b01      	ldr	r3, [sp, #4]
 80175ee:	3b04      	subs	r3, #4
 80175f0:	429e      	cmp	r6, r3
 80175f2:	461a      	mov	r2, r3
 80175f4:	d330      	bcc.n	8017658 <quorem+0xfc>
 80175f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80175fa:	4640      	mov	r0, r8
 80175fc:	f001 fba4 	bl	8018d48 <__mcmp>
 8017600:	2800      	cmp	r0, #0
 8017602:	db25      	blt.n	8017650 <quorem+0xf4>
 8017604:	3501      	adds	r5, #1
 8017606:	4630      	mov	r0, r6
 8017608:	f04f 0c00 	mov.w	ip, #0
 801760c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017610:	f8d0 e000 	ldr.w	lr, [r0]
 8017614:	b293      	uxth	r3, r2
 8017616:	ebac 0303 	sub.w	r3, ip, r3
 801761a:	0c12      	lsrs	r2, r2, #16
 801761c:	fa13 f38e 	uxtah	r3, r3, lr
 8017620:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017628:	b29b      	uxth	r3, r3
 801762a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801762e:	45b9      	cmp	r9, r7
 8017630:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017634:	f840 3b04 	str.w	r3, [r0], #4
 8017638:	d2e8      	bcs.n	801760c <quorem+0xb0>
 801763a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801763e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017642:	b92a      	cbnz	r2, 8017650 <quorem+0xf4>
 8017644:	3b04      	subs	r3, #4
 8017646:	429e      	cmp	r6, r3
 8017648:	461a      	mov	r2, r3
 801764a:	d30b      	bcc.n	8017664 <quorem+0x108>
 801764c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017650:	4628      	mov	r0, r5
 8017652:	b003      	add	sp, #12
 8017654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017658:	6812      	ldr	r2, [r2, #0]
 801765a:	3b04      	subs	r3, #4
 801765c:	2a00      	cmp	r2, #0
 801765e:	d1ca      	bne.n	80175f6 <quorem+0x9a>
 8017660:	3c01      	subs	r4, #1
 8017662:	e7c5      	b.n	80175f0 <quorem+0x94>
 8017664:	6812      	ldr	r2, [r2, #0]
 8017666:	3b04      	subs	r3, #4
 8017668:	2a00      	cmp	r2, #0
 801766a:	d1ef      	bne.n	801764c <quorem+0xf0>
 801766c:	3c01      	subs	r4, #1
 801766e:	e7ea      	b.n	8017646 <quorem+0xea>
 8017670:	2000      	movs	r0, #0
 8017672:	e7ee      	b.n	8017652 <quorem+0xf6>
 8017674:	0000      	movs	r0, r0
	...

08017678 <_dtoa_r>:
 8017678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801767c:	ec57 6b10 	vmov	r6, r7, d0
 8017680:	b097      	sub	sp, #92	; 0x5c
 8017682:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017684:	9106      	str	r1, [sp, #24]
 8017686:	4604      	mov	r4, r0
 8017688:	920b      	str	r2, [sp, #44]	; 0x2c
 801768a:	9312      	str	r3, [sp, #72]	; 0x48
 801768c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017690:	e9cd 6700 	strd	r6, r7, [sp]
 8017694:	b93d      	cbnz	r5, 80176a6 <_dtoa_r+0x2e>
 8017696:	2010      	movs	r0, #16
 8017698:	f7fe f8ea 	bl	8015870 <malloc>
 801769c:	6260      	str	r0, [r4, #36]	; 0x24
 801769e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80176a2:	6005      	str	r5, [r0, #0]
 80176a4:	60c5      	str	r5, [r0, #12]
 80176a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176a8:	6819      	ldr	r1, [r3, #0]
 80176aa:	b151      	cbz	r1, 80176c2 <_dtoa_r+0x4a>
 80176ac:	685a      	ldr	r2, [r3, #4]
 80176ae:	604a      	str	r2, [r1, #4]
 80176b0:	2301      	movs	r3, #1
 80176b2:	4093      	lsls	r3, r2
 80176b4:	608b      	str	r3, [r1, #8]
 80176b6:	4620      	mov	r0, r4
 80176b8:	f001 f926 	bl	8018908 <_Bfree>
 80176bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176be:	2200      	movs	r2, #0
 80176c0:	601a      	str	r2, [r3, #0]
 80176c2:	1e3b      	subs	r3, r7, #0
 80176c4:	bfbb      	ittet	lt
 80176c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80176ca:	9301      	strlt	r3, [sp, #4]
 80176cc:	2300      	movge	r3, #0
 80176ce:	2201      	movlt	r2, #1
 80176d0:	bfac      	ite	ge
 80176d2:	f8c8 3000 	strge.w	r3, [r8]
 80176d6:	f8c8 2000 	strlt.w	r2, [r8]
 80176da:	4baf      	ldr	r3, [pc, #700]	; (8017998 <_dtoa_r+0x320>)
 80176dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176e0:	ea33 0308 	bics.w	r3, r3, r8
 80176e4:	d114      	bne.n	8017710 <_dtoa_r+0x98>
 80176e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80176ec:	6013      	str	r3, [r2, #0]
 80176ee:	9b00      	ldr	r3, [sp, #0]
 80176f0:	b923      	cbnz	r3, 80176fc <_dtoa_r+0x84>
 80176f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80176f6:	2800      	cmp	r0, #0
 80176f8:	f000 8542 	beq.w	8018180 <_dtoa_r+0xb08>
 80176fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80179ac <_dtoa_r+0x334>
 8017702:	2b00      	cmp	r3, #0
 8017704:	f000 8544 	beq.w	8018190 <_dtoa_r+0xb18>
 8017708:	f10b 0303 	add.w	r3, fp, #3
 801770c:	f000 bd3e 	b.w	801818c <_dtoa_r+0xb14>
 8017710:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017714:	2200      	movs	r2, #0
 8017716:	2300      	movs	r3, #0
 8017718:	4630      	mov	r0, r6
 801771a:	4639      	mov	r1, r7
 801771c:	f7e9 f9e4 	bl	8000ae8 <__aeabi_dcmpeq>
 8017720:	4681      	mov	r9, r0
 8017722:	b168      	cbz	r0, 8017740 <_dtoa_r+0xc8>
 8017724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017726:	2301      	movs	r3, #1
 8017728:	6013      	str	r3, [r2, #0]
 801772a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 8524 	beq.w	801817a <_dtoa_r+0xb02>
 8017732:	4b9a      	ldr	r3, [pc, #616]	; (801799c <_dtoa_r+0x324>)
 8017734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017736:	f103 3bff 	add.w	fp, r3, #4294967295
 801773a:	6013      	str	r3, [r2, #0]
 801773c:	f000 bd28 	b.w	8018190 <_dtoa_r+0xb18>
 8017740:	aa14      	add	r2, sp, #80	; 0x50
 8017742:	a915      	add	r1, sp, #84	; 0x54
 8017744:	ec47 6b10 	vmov	d0, r6, r7
 8017748:	4620      	mov	r0, r4
 801774a:	f001 fbeb 	bl	8018f24 <__d2b>
 801774e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017752:	9004      	str	r0, [sp, #16]
 8017754:	2d00      	cmp	r5, #0
 8017756:	d07c      	beq.n	8017852 <_dtoa_r+0x1da>
 8017758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801775c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017760:	46b2      	mov	sl, r6
 8017762:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801776a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801776e:	2200      	movs	r2, #0
 8017770:	4b8b      	ldr	r3, [pc, #556]	; (80179a0 <_dtoa_r+0x328>)
 8017772:	4650      	mov	r0, sl
 8017774:	4659      	mov	r1, fp
 8017776:	f7e8 fd97 	bl	80002a8 <__aeabi_dsub>
 801777a:	a381      	add	r3, pc, #516	; (adr r3, 8017980 <_dtoa_r+0x308>)
 801777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017780:	f7e8 ff4a 	bl	8000618 <__aeabi_dmul>
 8017784:	a380      	add	r3, pc, #512	; (adr r3, 8017988 <_dtoa_r+0x310>)
 8017786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778a:	f7e8 fd8f 	bl	80002ac <__adddf3>
 801778e:	4606      	mov	r6, r0
 8017790:	4628      	mov	r0, r5
 8017792:	460f      	mov	r7, r1
 8017794:	f7e8 fed6 	bl	8000544 <__aeabi_i2d>
 8017798:	a37d      	add	r3, pc, #500	; (adr r3, 8017990 <_dtoa_r+0x318>)
 801779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779e:	f7e8 ff3b 	bl	8000618 <__aeabi_dmul>
 80177a2:	4602      	mov	r2, r0
 80177a4:	460b      	mov	r3, r1
 80177a6:	4630      	mov	r0, r6
 80177a8:	4639      	mov	r1, r7
 80177aa:	f7e8 fd7f 	bl	80002ac <__adddf3>
 80177ae:	4606      	mov	r6, r0
 80177b0:	460f      	mov	r7, r1
 80177b2:	f7e9 f9e1 	bl	8000b78 <__aeabi_d2iz>
 80177b6:	2200      	movs	r2, #0
 80177b8:	4682      	mov	sl, r0
 80177ba:	2300      	movs	r3, #0
 80177bc:	4630      	mov	r0, r6
 80177be:	4639      	mov	r1, r7
 80177c0:	f7e9 f99c 	bl	8000afc <__aeabi_dcmplt>
 80177c4:	b148      	cbz	r0, 80177da <_dtoa_r+0x162>
 80177c6:	4650      	mov	r0, sl
 80177c8:	f7e8 febc 	bl	8000544 <__aeabi_i2d>
 80177cc:	4632      	mov	r2, r6
 80177ce:	463b      	mov	r3, r7
 80177d0:	f7e9 f98a 	bl	8000ae8 <__aeabi_dcmpeq>
 80177d4:	b908      	cbnz	r0, 80177da <_dtoa_r+0x162>
 80177d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177da:	f1ba 0f16 	cmp.w	sl, #22
 80177de:	d859      	bhi.n	8017894 <_dtoa_r+0x21c>
 80177e0:	4970      	ldr	r1, [pc, #448]	; (80179a4 <_dtoa_r+0x32c>)
 80177e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80177e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177ee:	f7e9 f9a3 	bl	8000b38 <__aeabi_dcmpgt>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d050      	beq.n	8017898 <_dtoa_r+0x220>
 80177f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177fa:	2300      	movs	r3, #0
 80177fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80177fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017800:	1b5d      	subs	r5, r3, r5
 8017802:	f1b5 0801 	subs.w	r8, r5, #1
 8017806:	bf49      	itett	mi
 8017808:	f1c5 0301 	rsbmi	r3, r5, #1
 801780c:	2300      	movpl	r3, #0
 801780e:	9305      	strmi	r3, [sp, #20]
 8017810:	f04f 0800 	movmi.w	r8, #0
 8017814:	bf58      	it	pl
 8017816:	9305      	strpl	r3, [sp, #20]
 8017818:	f1ba 0f00 	cmp.w	sl, #0
 801781c:	db3e      	blt.n	801789c <_dtoa_r+0x224>
 801781e:	2300      	movs	r3, #0
 8017820:	44d0      	add	r8, sl
 8017822:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017826:	9307      	str	r3, [sp, #28]
 8017828:	9b06      	ldr	r3, [sp, #24]
 801782a:	2b09      	cmp	r3, #9
 801782c:	f200 8090 	bhi.w	8017950 <_dtoa_r+0x2d8>
 8017830:	2b05      	cmp	r3, #5
 8017832:	bfc4      	itt	gt
 8017834:	3b04      	subgt	r3, #4
 8017836:	9306      	strgt	r3, [sp, #24]
 8017838:	9b06      	ldr	r3, [sp, #24]
 801783a:	f1a3 0302 	sub.w	r3, r3, #2
 801783e:	bfcc      	ite	gt
 8017840:	2500      	movgt	r5, #0
 8017842:	2501      	movle	r5, #1
 8017844:	2b03      	cmp	r3, #3
 8017846:	f200 808f 	bhi.w	8017968 <_dtoa_r+0x2f0>
 801784a:	e8df f003 	tbb	[pc, r3]
 801784e:	7f7d      	.short	0x7f7d
 8017850:	7131      	.short	0x7131
 8017852:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017856:	441d      	add	r5, r3
 8017858:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801785c:	2820      	cmp	r0, #32
 801785e:	dd13      	ble.n	8017888 <_dtoa_r+0x210>
 8017860:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017864:	9b00      	ldr	r3, [sp, #0]
 8017866:	fa08 f800 	lsl.w	r8, r8, r0
 801786a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801786e:	fa23 f000 	lsr.w	r0, r3, r0
 8017872:	ea48 0000 	orr.w	r0, r8, r0
 8017876:	f7e8 fe55 	bl	8000524 <__aeabi_ui2d>
 801787a:	2301      	movs	r3, #1
 801787c:	4682      	mov	sl, r0
 801787e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017882:	3d01      	subs	r5, #1
 8017884:	9313      	str	r3, [sp, #76]	; 0x4c
 8017886:	e772      	b.n	801776e <_dtoa_r+0xf6>
 8017888:	9b00      	ldr	r3, [sp, #0]
 801788a:	f1c0 0020 	rsb	r0, r0, #32
 801788e:	fa03 f000 	lsl.w	r0, r3, r0
 8017892:	e7f0      	b.n	8017876 <_dtoa_r+0x1fe>
 8017894:	2301      	movs	r3, #1
 8017896:	e7b1      	b.n	80177fc <_dtoa_r+0x184>
 8017898:	900f      	str	r0, [sp, #60]	; 0x3c
 801789a:	e7b0      	b.n	80177fe <_dtoa_r+0x186>
 801789c:	9b05      	ldr	r3, [sp, #20]
 801789e:	eba3 030a 	sub.w	r3, r3, sl
 80178a2:	9305      	str	r3, [sp, #20]
 80178a4:	f1ca 0300 	rsb	r3, sl, #0
 80178a8:	9307      	str	r3, [sp, #28]
 80178aa:	2300      	movs	r3, #0
 80178ac:	930e      	str	r3, [sp, #56]	; 0x38
 80178ae:	e7bb      	b.n	8017828 <_dtoa_r+0x1b0>
 80178b0:	2301      	movs	r3, #1
 80178b2:	930a      	str	r3, [sp, #40]	; 0x28
 80178b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	dd59      	ble.n	801796e <_dtoa_r+0x2f6>
 80178ba:	9302      	str	r3, [sp, #8]
 80178bc:	4699      	mov	r9, r3
 80178be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80178c0:	2200      	movs	r2, #0
 80178c2:	6072      	str	r2, [r6, #4]
 80178c4:	2204      	movs	r2, #4
 80178c6:	f102 0014 	add.w	r0, r2, #20
 80178ca:	4298      	cmp	r0, r3
 80178cc:	6871      	ldr	r1, [r6, #4]
 80178ce:	d953      	bls.n	8017978 <_dtoa_r+0x300>
 80178d0:	4620      	mov	r0, r4
 80178d2:	f000 ffe5 	bl	80188a0 <_Balloc>
 80178d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178d8:	6030      	str	r0, [r6, #0]
 80178da:	f1b9 0f0e 	cmp.w	r9, #14
 80178de:	f8d3 b000 	ldr.w	fp, [r3]
 80178e2:	f200 80e6 	bhi.w	8017ab2 <_dtoa_r+0x43a>
 80178e6:	2d00      	cmp	r5, #0
 80178e8:	f000 80e3 	beq.w	8017ab2 <_dtoa_r+0x43a>
 80178ec:	ed9d 7b00 	vldr	d7, [sp]
 80178f0:	f1ba 0f00 	cmp.w	sl, #0
 80178f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80178f8:	dd74      	ble.n	80179e4 <_dtoa_r+0x36c>
 80178fa:	4a2a      	ldr	r2, [pc, #168]	; (80179a4 <_dtoa_r+0x32c>)
 80178fc:	f00a 030f 	and.w	r3, sl, #15
 8017900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017904:	ed93 7b00 	vldr	d7, [r3]
 8017908:	ea4f 162a 	mov.w	r6, sl, asr #4
 801790c:	06f0      	lsls	r0, r6, #27
 801790e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017912:	d565      	bpl.n	80179e0 <_dtoa_r+0x368>
 8017914:	4b24      	ldr	r3, [pc, #144]	; (80179a8 <_dtoa_r+0x330>)
 8017916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801791a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801791e:	f7e8 ffa5 	bl	800086c <__aeabi_ddiv>
 8017922:	e9cd 0100 	strd	r0, r1, [sp]
 8017926:	f006 060f 	and.w	r6, r6, #15
 801792a:	2503      	movs	r5, #3
 801792c:	4f1e      	ldr	r7, [pc, #120]	; (80179a8 <_dtoa_r+0x330>)
 801792e:	e04c      	b.n	80179ca <_dtoa_r+0x352>
 8017930:	2301      	movs	r3, #1
 8017932:	930a      	str	r3, [sp, #40]	; 0x28
 8017934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017936:	4453      	add	r3, sl
 8017938:	f103 0901 	add.w	r9, r3, #1
 801793c:	9302      	str	r3, [sp, #8]
 801793e:	464b      	mov	r3, r9
 8017940:	2b01      	cmp	r3, #1
 8017942:	bfb8      	it	lt
 8017944:	2301      	movlt	r3, #1
 8017946:	e7ba      	b.n	80178be <_dtoa_r+0x246>
 8017948:	2300      	movs	r3, #0
 801794a:	e7b2      	b.n	80178b2 <_dtoa_r+0x23a>
 801794c:	2300      	movs	r3, #0
 801794e:	e7f0      	b.n	8017932 <_dtoa_r+0x2ba>
 8017950:	2501      	movs	r5, #1
 8017952:	2300      	movs	r3, #0
 8017954:	9306      	str	r3, [sp, #24]
 8017956:	950a      	str	r5, [sp, #40]	; 0x28
 8017958:	f04f 33ff 	mov.w	r3, #4294967295
 801795c:	9302      	str	r3, [sp, #8]
 801795e:	4699      	mov	r9, r3
 8017960:	2200      	movs	r2, #0
 8017962:	2312      	movs	r3, #18
 8017964:	920b      	str	r2, [sp, #44]	; 0x2c
 8017966:	e7aa      	b.n	80178be <_dtoa_r+0x246>
 8017968:	2301      	movs	r3, #1
 801796a:	930a      	str	r3, [sp, #40]	; 0x28
 801796c:	e7f4      	b.n	8017958 <_dtoa_r+0x2e0>
 801796e:	2301      	movs	r3, #1
 8017970:	9302      	str	r3, [sp, #8]
 8017972:	4699      	mov	r9, r3
 8017974:	461a      	mov	r2, r3
 8017976:	e7f5      	b.n	8017964 <_dtoa_r+0x2ec>
 8017978:	3101      	adds	r1, #1
 801797a:	6071      	str	r1, [r6, #4]
 801797c:	0052      	lsls	r2, r2, #1
 801797e:	e7a2      	b.n	80178c6 <_dtoa_r+0x24e>
 8017980:	636f4361 	.word	0x636f4361
 8017984:	3fd287a7 	.word	0x3fd287a7
 8017988:	8b60c8b3 	.word	0x8b60c8b3
 801798c:	3fc68a28 	.word	0x3fc68a28
 8017990:	509f79fb 	.word	0x509f79fb
 8017994:	3fd34413 	.word	0x3fd34413
 8017998:	7ff00000 	.word	0x7ff00000
 801799c:	0801bdb4 	.word	0x0801bdb4
 80179a0:	3ff80000 	.word	0x3ff80000
 80179a4:	0801bcb8 	.word	0x0801bcb8
 80179a8:	0801bc90 	.word	0x0801bc90
 80179ac:	0801bc81 	.word	0x0801bc81
 80179b0:	07f1      	lsls	r1, r6, #31
 80179b2:	d508      	bpl.n	80179c6 <_dtoa_r+0x34e>
 80179b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80179b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179bc:	f7e8 fe2c 	bl	8000618 <__aeabi_dmul>
 80179c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80179c4:	3501      	adds	r5, #1
 80179c6:	1076      	asrs	r6, r6, #1
 80179c8:	3708      	adds	r7, #8
 80179ca:	2e00      	cmp	r6, #0
 80179cc:	d1f0      	bne.n	80179b0 <_dtoa_r+0x338>
 80179ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179d6:	f7e8 ff49 	bl	800086c <__aeabi_ddiv>
 80179da:	e9cd 0100 	strd	r0, r1, [sp]
 80179de:	e01a      	b.n	8017a16 <_dtoa_r+0x39e>
 80179e0:	2502      	movs	r5, #2
 80179e2:	e7a3      	b.n	801792c <_dtoa_r+0x2b4>
 80179e4:	f000 80a0 	beq.w	8017b28 <_dtoa_r+0x4b0>
 80179e8:	f1ca 0600 	rsb	r6, sl, #0
 80179ec:	4b9f      	ldr	r3, [pc, #636]	; (8017c6c <_dtoa_r+0x5f4>)
 80179ee:	4fa0      	ldr	r7, [pc, #640]	; (8017c70 <_dtoa_r+0x5f8>)
 80179f0:	f006 020f 	and.w	r2, r6, #15
 80179f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017a00:	f7e8 fe0a 	bl	8000618 <__aeabi_dmul>
 8017a04:	e9cd 0100 	strd	r0, r1, [sp]
 8017a08:	1136      	asrs	r6, r6, #4
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	2502      	movs	r5, #2
 8017a0e:	2e00      	cmp	r6, #0
 8017a10:	d17f      	bne.n	8017b12 <_dtoa_r+0x49a>
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1e1      	bne.n	80179da <_dtoa_r+0x362>
 8017a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	f000 8087 	beq.w	8017b2c <_dtoa_r+0x4b4>
 8017a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a22:	2200      	movs	r2, #0
 8017a24:	4b93      	ldr	r3, [pc, #588]	; (8017c74 <_dtoa_r+0x5fc>)
 8017a26:	4630      	mov	r0, r6
 8017a28:	4639      	mov	r1, r7
 8017a2a:	f7e9 f867 	bl	8000afc <__aeabi_dcmplt>
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	d07c      	beq.n	8017b2c <_dtoa_r+0x4b4>
 8017a32:	f1b9 0f00 	cmp.w	r9, #0
 8017a36:	d079      	beq.n	8017b2c <_dtoa_r+0x4b4>
 8017a38:	9b02      	ldr	r3, [sp, #8]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	dd35      	ble.n	8017aaa <_dtoa_r+0x432>
 8017a3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017a42:	9308      	str	r3, [sp, #32]
 8017a44:	4639      	mov	r1, r7
 8017a46:	2200      	movs	r2, #0
 8017a48:	4b8b      	ldr	r3, [pc, #556]	; (8017c78 <_dtoa_r+0x600>)
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7e8 fde4 	bl	8000618 <__aeabi_dmul>
 8017a50:	e9cd 0100 	strd	r0, r1, [sp]
 8017a54:	9f02      	ldr	r7, [sp, #8]
 8017a56:	3501      	adds	r5, #1
 8017a58:	4628      	mov	r0, r5
 8017a5a:	f7e8 fd73 	bl	8000544 <__aeabi_i2d>
 8017a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a62:	f7e8 fdd9 	bl	8000618 <__aeabi_dmul>
 8017a66:	2200      	movs	r2, #0
 8017a68:	4b84      	ldr	r3, [pc, #528]	; (8017c7c <_dtoa_r+0x604>)
 8017a6a:	f7e8 fc1f 	bl	80002ac <__adddf3>
 8017a6e:	4605      	mov	r5, r0
 8017a70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017a74:	2f00      	cmp	r7, #0
 8017a76:	d15d      	bne.n	8017b34 <_dtoa_r+0x4bc>
 8017a78:	2200      	movs	r2, #0
 8017a7a:	4b81      	ldr	r3, [pc, #516]	; (8017c80 <_dtoa_r+0x608>)
 8017a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a80:	f7e8 fc12 	bl	80002a8 <__aeabi_dsub>
 8017a84:	462a      	mov	r2, r5
 8017a86:	4633      	mov	r3, r6
 8017a88:	e9cd 0100 	strd	r0, r1, [sp]
 8017a8c:	f7e9 f854 	bl	8000b38 <__aeabi_dcmpgt>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	f040 8288 	bne.w	8017fa6 <_dtoa_r+0x92e>
 8017a96:	462a      	mov	r2, r5
 8017a98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aa0:	f7e9 f82c 	bl	8000afc <__aeabi_dcmplt>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	f040 827c 	bne.w	8017fa2 <_dtoa_r+0x92a>
 8017aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017aae:	e9cd 2300 	strd	r2, r3, [sp]
 8017ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	f2c0 8150 	blt.w	8017d5a <_dtoa_r+0x6e2>
 8017aba:	f1ba 0f0e 	cmp.w	sl, #14
 8017abe:	f300 814c 	bgt.w	8017d5a <_dtoa_r+0x6e2>
 8017ac2:	4b6a      	ldr	r3, [pc, #424]	; (8017c6c <_dtoa_r+0x5f4>)
 8017ac4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017ac8:	ed93 7b00 	vldr	d7, [r3]
 8017acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017ad4:	f280 80d8 	bge.w	8017c88 <_dtoa_r+0x610>
 8017ad8:	f1b9 0f00 	cmp.w	r9, #0
 8017adc:	f300 80d4 	bgt.w	8017c88 <_dtoa_r+0x610>
 8017ae0:	f040 825e 	bne.w	8017fa0 <_dtoa_r+0x928>
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	4b66      	ldr	r3, [pc, #408]	; (8017c80 <_dtoa_r+0x608>)
 8017ae8:	ec51 0b17 	vmov	r0, r1, d7
 8017aec:	f7e8 fd94 	bl	8000618 <__aeabi_dmul>
 8017af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017af4:	f7e9 f816 	bl	8000b24 <__aeabi_dcmpge>
 8017af8:	464f      	mov	r7, r9
 8017afa:	464e      	mov	r6, r9
 8017afc:	2800      	cmp	r0, #0
 8017afe:	f040 8234 	bne.w	8017f6a <_dtoa_r+0x8f2>
 8017b02:	2331      	movs	r3, #49	; 0x31
 8017b04:	f10b 0501 	add.w	r5, fp, #1
 8017b08:	f88b 3000 	strb.w	r3, [fp]
 8017b0c:	f10a 0a01 	add.w	sl, sl, #1
 8017b10:	e22f      	b.n	8017f72 <_dtoa_r+0x8fa>
 8017b12:	07f2      	lsls	r2, r6, #31
 8017b14:	d505      	bpl.n	8017b22 <_dtoa_r+0x4aa>
 8017b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b1a:	f7e8 fd7d 	bl	8000618 <__aeabi_dmul>
 8017b1e:	3501      	adds	r5, #1
 8017b20:	2301      	movs	r3, #1
 8017b22:	1076      	asrs	r6, r6, #1
 8017b24:	3708      	adds	r7, #8
 8017b26:	e772      	b.n	8017a0e <_dtoa_r+0x396>
 8017b28:	2502      	movs	r5, #2
 8017b2a:	e774      	b.n	8017a16 <_dtoa_r+0x39e>
 8017b2c:	f8cd a020 	str.w	sl, [sp, #32]
 8017b30:	464f      	mov	r7, r9
 8017b32:	e791      	b.n	8017a58 <_dtoa_r+0x3e0>
 8017b34:	4b4d      	ldr	r3, [pc, #308]	; (8017c6c <_dtoa_r+0x5f4>)
 8017b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017b3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d047      	beq.n	8017bd4 <_dtoa_r+0x55c>
 8017b44:	4602      	mov	r2, r0
 8017b46:	460b      	mov	r3, r1
 8017b48:	2000      	movs	r0, #0
 8017b4a:	494e      	ldr	r1, [pc, #312]	; (8017c84 <_dtoa_r+0x60c>)
 8017b4c:	f7e8 fe8e 	bl	800086c <__aeabi_ddiv>
 8017b50:	462a      	mov	r2, r5
 8017b52:	4633      	mov	r3, r6
 8017b54:	f7e8 fba8 	bl	80002a8 <__aeabi_dsub>
 8017b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b5c:	465d      	mov	r5, fp
 8017b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b62:	f7e9 f809 	bl	8000b78 <__aeabi_d2iz>
 8017b66:	4606      	mov	r6, r0
 8017b68:	f7e8 fcec 	bl	8000544 <__aeabi_i2d>
 8017b6c:	4602      	mov	r2, r0
 8017b6e:	460b      	mov	r3, r1
 8017b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b74:	f7e8 fb98 	bl	80002a8 <__aeabi_dsub>
 8017b78:	3630      	adds	r6, #48	; 0x30
 8017b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8017b7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b82:	e9cd 0100 	strd	r0, r1, [sp]
 8017b86:	f7e8 ffb9 	bl	8000afc <__aeabi_dcmplt>
 8017b8a:	2800      	cmp	r0, #0
 8017b8c:	d163      	bne.n	8017c56 <_dtoa_r+0x5de>
 8017b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b92:	2000      	movs	r0, #0
 8017b94:	4937      	ldr	r1, [pc, #220]	; (8017c74 <_dtoa_r+0x5fc>)
 8017b96:	f7e8 fb87 	bl	80002a8 <__aeabi_dsub>
 8017b9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b9e:	f7e8 ffad 	bl	8000afc <__aeabi_dcmplt>
 8017ba2:	2800      	cmp	r0, #0
 8017ba4:	f040 80b7 	bne.w	8017d16 <_dtoa_r+0x69e>
 8017ba8:	eba5 030b 	sub.w	r3, r5, fp
 8017bac:	429f      	cmp	r7, r3
 8017bae:	f77f af7c 	ble.w	8017aaa <_dtoa_r+0x432>
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	4b30      	ldr	r3, [pc, #192]	; (8017c78 <_dtoa_r+0x600>)
 8017bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bba:	f7e8 fd2d 	bl	8000618 <__aeabi_dmul>
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bc4:	4b2c      	ldr	r3, [pc, #176]	; (8017c78 <_dtoa_r+0x600>)
 8017bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bca:	f7e8 fd25 	bl	8000618 <__aeabi_dmul>
 8017bce:	e9cd 0100 	strd	r0, r1, [sp]
 8017bd2:	e7c4      	b.n	8017b5e <_dtoa_r+0x4e6>
 8017bd4:	462a      	mov	r2, r5
 8017bd6:	4633      	mov	r3, r6
 8017bd8:	f7e8 fd1e 	bl	8000618 <__aeabi_dmul>
 8017bdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017be0:	eb0b 0507 	add.w	r5, fp, r7
 8017be4:	465e      	mov	r6, fp
 8017be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bea:	f7e8 ffc5 	bl	8000b78 <__aeabi_d2iz>
 8017bee:	4607      	mov	r7, r0
 8017bf0:	f7e8 fca8 	bl	8000544 <__aeabi_i2d>
 8017bf4:	3730      	adds	r7, #48	; 0x30
 8017bf6:	4602      	mov	r2, r0
 8017bf8:	460b      	mov	r3, r1
 8017bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bfe:	f7e8 fb53 	bl	80002a8 <__aeabi_dsub>
 8017c02:	f806 7b01 	strb.w	r7, [r6], #1
 8017c06:	42ae      	cmp	r6, r5
 8017c08:	e9cd 0100 	strd	r0, r1, [sp]
 8017c0c:	f04f 0200 	mov.w	r2, #0
 8017c10:	d126      	bne.n	8017c60 <_dtoa_r+0x5e8>
 8017c12:	4b1c      	ldr	r3, [pc, #112]	; (8017c84 <_dtoa_r+0x60c>)
 8017c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c18:	f7e8 fb48 	bl	80002ac <__adddf3>
 8017c1c:	4602      	mov	r2, r0
 8017c1e:	460b      	mov	r3, r1
 8017c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c24:	f7e8 ff88 	bl	8000b38 <__aeabi_dcmpgt>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d174      	bne.n	8017d16 <_dtoa_r+0x69e>
 8017c2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c30:	2000      	movs	r0, #0
 8017c32:	4914      	ldr	r1, [pc, #80]	; (8017c84 <_dtoa_r+0x60c>)
 8017c34:	f7e8 fb38 	bl	80002a8 <__aeabi_dsub>
 8017c38:	4602      	mov	r2, r0
 8017c3a:	460b      	mov	r3, r1
 8017c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c40:	f7e8 ff5c 	bl	8000afc <__aeabi_dcmplt>
 8017c44:	2800      	cmp	r0, #0
 8017c46:	f43f af30 	beq.w	8017aaa <_dtoa_r+0x432>
 8017c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c4e:	2b30      	cmp	r3, #48	; 0x30
 8017c50:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c54:	d002      	beq.n	8017c5c <_dtoa_r+0x5e4>
 8017c56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c5a:	e04a      	b.n	8017cf2 <_dtoa_r+0x67a>
 8017c5c:	4615      	mov	r5, r2
 8017c5e:	e7f4      	b.n	8017c4a <_dtoa_r+0x5d2>
 8017c60:	4b05      	ldr	r3, [pc, #20]	; (8017c78 <_dtoa_r+0x600>)
 8017c62:	f7e8 fcd9 	bl	8000618 <__aeabi_dmul>
 8017c66:	e9cd 0100 	strd	r0, r1, [sp]
 8017c6a:	e7bc      	b.n	8017be6 <_dtoa_r+0x56e>
 8017c6c:	0801bcb8 	.word	0x0801bcb8
 8017c70:	0801bc90 	.word	0x0801bc90
 8017c74:	3ff00000 	.word	0x3ff00000
 8017c78:	40240000 	.word	0x40240000
 8017c7c:	401c0000 	.word	0x401c0000
 8017c80:	40140000 	.word	0x40140000
 8017c84:	3fe00000 	.word	0x3fe00000
 8017c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c8c:	465d      	mov	r5, fp
 8017c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c92:	4630      	mov	r0, r6
 8017c94:	4639      	mov	r1, r7
 8017c96:	f7e8 fde9 	bl	800086c <__aeabi_ddiv>
 8017c9a:	f7e8 ff6d 	bl	8000b78 <__aeabi_d2iz>
 8017c9e:	4680      	mov	r8, r0
 8017ca0:	f7e8 fc50 	bl	8000544 <__aeabi_i2d>
 8017ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ca8:	f7e8 fcb6 	bl	8000618 <__aeabi_dmul>
 8017cac:	4602      	mov	r2, r0
 8017cae:	460b      	mov	r3, r1
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	4639      	mov	r1, r7
 8017cb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017cb8:	f7e8 faf6 	bl	80002a8 <__aeabi_dsub>
 8017cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8017cc0:	eba5 060b 	sub.w	r6, r5, fp
 8017cc4:	45b1      	cmp	r9, r6
 8017cc6:	4602      	mov	r2, r0
 8017cc8:	460b      	mov	r3, r1
 8017cca:	d139      	bne.n	8017d40 <_dtoa_r+0x6c8>
 8017ccc:	f7e8 faee 	bl	80002ac <__adddf3>
 8017cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cd4:	4606      	mov	r6, r0
 8017cd6:	460f      	mov	r7, r1
 8017cd8:	f7e8 ff2e 	bl	8000b38 <__aeabi_dcmpgt>
 8017cdc:	b9c8      	cbnz	r0, 8017d12 <_dtoa_r+0x69a>
 8017cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	4639      	mov	r1, r7
 8017ce6:	f7e8 feff 	bl	8000ae8 <__aeabi_dcmpeq>
 8017cea:	b110      	cbz	r0, 8017cf2 <_dtoa_r+0x67a>
 8017cec:	f018 0f01 	tst.w	r8, #1
 8017cf0:	d10f      	bne.n	8017d12 <_dtoa_r+0x69a>
 8017cf2:	9904      	ldr	r1, [sp, #16]
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	f000 fe07 	bl	8018908 <_Bfree>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cfe:	702b      	strb	r3, [r5, #0]
 8017d00:	f10a 0301 	add.w	r3, sl, #1
 8017d04:	6013      	str	r3, [r2, #0]
 8017d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	f000 8241 	beq.w	8018190 <_dtoa_r+0xb18>
 8017d0e:	601d      	str	r5, [r3, #0]
 8017d10:	e23e      	b.n	8018190 <_dtoa_r+0xb18>
 8017d12:	f8cd a020 	str.w	sl, [sp, #32]
 8017d16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d1a:	2a39      	cmp	r2, #57	; 0x39
 8017d1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017d20:	d108      	bne.n	8017d34 <_dtoa_r+0x6bc>
 8017d22:	459b      	cmp	fp, r3
 8017d24:	d10a      	bne.n	8017d3c <_dtoa_r+0x6c4>
 8017d26:	9b08      	ldr	r3, [sp, #32]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	9308      	str	r3, [sp, #32]
 8017d2c:	2330      	movs	r3, #48	; 0x30
 8017d2e:	f88b 3000 	strb.w	r3, [fp]
 8017d32:	465b      	mov	r3, fp
 8017d34:	781a      	ldrb	r2, [r3, #0]
 8017d36:	3201      	adds	r2, #1
 8017d38:	701a      	strb	r2, [r3, #0]
 8017d3a:	e78c      	b.n	8017c56 <_dtoa_r+0x5de>
 8017d3c:	461d      	mov	r5, r3
 8017d3e:	e7ea      	b.n	8017d16 <_dtoa_r+0x69e>
 8017d40:	2200      	movs	r2, #0
 8017d42:	4b9b      	ldr	r3, [pc, #620]	; (8017fb0 <_dtoa_r+0x938>)
 8017d44:	f7e8 fc68 	bl	8000618 <__aeabi_dmul>
 8017d48:	2200      	movs	r2, #0
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	4606      	mov	r6, r0
 8017d4e:	460f      	mov	r7, r1
 8017d50:	f7e8 feca 	bl	8000ae8 <__aeabi_dcmpeq>
 8017d54:	2800      	cmp	r0, #0
 8017d56:	d09a      	beq.n	8017c8e <_dtoa_r+0x616>
 8017d58:	e7cb      	b.n	8017cf2 <_dtoa_r+0x67a>
 8017d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d5c:	2a00      	cmp	r2, #0
 8017d5e:	f000 808b 	beq.w	8017e78 <_dtoa_r+0x800>
 8017d62:	9a06      	ldr	r2, [sp, #24]
 8017d64:	2a01      	cmp	r2, #1
 8017d66:	dc6e      	bgt.n	8017e46 <_dtoa_r+0x7ce>
 8017d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d6a:	2a00      	cmp	r2, #0
 8017d6c:	d067      	beq.n	8017e3e <_dtoa_r+0x7c6>
 8017d6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017d72:	9f07      	ldr	r7, [sp, #28]
 8017d74:	9d05      	ldr	r5, [sp, #20]
 8017d76:	9a05      	ldr	r2, [sp, #20]
 8017d78:	2101      	movs	r1, #1
 8017d7a:	441a      	add	r2, r3
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	9205      	str	r2, [sp, #20]
 8017d80:	4498      	add	r8, r3
 8017d82:	f000 fe9f 	bl	8018ac4 <__i2b>
 8017d86:	4606      	mov	r6, r0
 8017d88:	2d00      	cmp	r5, #0
 8017d8a:	dd0c      	ble.n	8017da6 <_dtoa_r+0x72e>
 8017d8c:	f1b8 0f00 	cmp.w	r8, #0
 8017d90:	dd09      	ble.n	8017da6 <_dtoa_r+0x72e>
 8017d92:	4545      	cmp	r5, r8
 8017d94:	9a05      	ldr	r2, [sp, #20]
 8017d96:	462b      	mov	r3, r5
 8017d98:	bfa8      	it	ge
 8017d9a:	4643      	movge	r3, r8
 8017d9c:	1ad2      	subs	r2, r2, r3
 8017d9e:	9205      	str	r2, [sp, #20]
 8017da0:	1aed      	subs	r5, r5, r3
 8017da2:	eba8 0803 	sub.w	r8, r8, r3
 8017da6:	9b07      	ldr	r3, [sp, #28]
 8017da8:	b1eb      	cbz	r3, 8017de6 <_dtoa_r+0x76e>
 8017daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d067      	beq.n	8017e80 <_dtoa_r+0x808>
 8017db0:	b18f      	cbz	r7, 8017dd6 <_dtoa_r+0x75e>
 8017db2:	4631      	mov	r1, r6
 8017db4:	463a      	mov	r2, r7
 8017db6:	4620      	mov	r0, r4
 8017db8:	f000 ff24 	bl	8018c04 <__pow5mult>
 8017dbc:	9a04      	ldr	r2, [sp, #16]
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	4606      	mov	r6, r0
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	f000 fe87 	bl	8018ad6 <__multiply>
 8017dc8:	9904      	ldr	r1, [sp, #16]
 8017dca:	9008      	str	r0, [sp, #32]
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f000 fd9b 	bl	8018908 <_Bfree>
 8017dd2:	9b08      	ldr	r3, [sp, #32]
 8017dd4:	9304      	str	r3, [sp, #16]
 8017dd6:	9b07      	ldr	r3, [sp, #28]
 8017dd8:	1bda      	subs	r2, r3, r7
 8017dda:	d004      	beq.n	8017de6 <_dtoa_r+0x76e>
 8017ddc:	9904      	ldr	r1, [sp, #16]
 8017dde:	4620      	mov	r0, r4
 8017de0:	f000 ff10 	bl	8018c04 <__pow5mult>
 8017de4:	9004      	str	r0, [sp, #16]
 8017de6:	2101      	movs	r1, #1
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fe6b 	bl	8018ac4 <__i2b>
 8017dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017df0:	4607      	mov	r7, r0
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 81d0 	beq.w	8018198 <_dtoa_r+0xb20>
 8017df8:	461a      	mov	r2, r3
 8017dfa:	4601      	mov	r1, r0
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	f000 ff01 	bl	8018c04 <__pow5mult>
 8017e02:	9b06      	ldr	r3, [sp, #24]
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	4607      	mov	r7, r0
 8017e08:	dc40      	bgt.n	8017e8c <_dtoa_r+0x814>
 8017e0a:	9b00      	ldr	r3, [sp, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d139      	bne.n	8017e84 <_dtoa_r+0x80c>
 8017e10:	9b01      	ldr	r3, [sp, #4]
 8017e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d136      	bne.n	8017e88 <_dtoa_r+0x810>
 8017e1a:	9b01      	ldr	r3, [sp, #4]
 8017e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e20:	0d1b      	lsrs	r3, r3, #20
 8017e22:	051b      	lsls	r3, r3, #20
 8017e24:	b12b      	cbz	r3, 8017e32 <_dtoa_r+0x7ba>
 8017e26:	9b05      	ldr	r3, [sp, #20]
 8017e28:	3301      	adds	r3, #1
 8017e2a:	9305      	str	r3, [sp, #20]
 8017e2c:	f108 0801 	add.w	r8, r8, #1
 8017e30:	2301      	movs	r3, #1
 8017e32:	9307      	str	r3, [sp, #28]
 8017e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d12a      	bne.n	8017e90 <_dtoa_r+0x818>
 8017e3a:	2001      	movs	r0, #1
 8017e3c:	e030      	b.n	8017ea0 <_dtoa_r+0x828>
 8017e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017e44:	e795      	b.n	8017d72 <_dtoa_r+0x6fa>
 8017e46:	9b07      	ldr	r3, [sp, #28]
 8017e48:	f109 37ff 	add.w	r7, r9, #4294967295
 8017e4c:	42bb      	cmp	r3, r7
 8017e4e:	bfbf      	itttt	lt
 8017e50:	9b07      	ldrlt	r3, [sp, #28]
 8017e52:	9707      	strlt	r7, [sp, #28]
 8017e54:	1afa      	sublt	r2, r7, r3
 8017e56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e58:	bfbb      	ittet	lt
 8017e5a:	189b      	addlt	r3, r3, r2
 8017e5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e5e:	1bdf      	subge	r7, r3, r7
 8017e60:	2700      	movlt	r7, #0
 8017e62:	f1b9 0f00 	cmp.w	r9, #0
 8017e66:	bfb5      	itete	lt
 8017e68:	9b05      	ldrlt	r3, [sp, #20]
 8017e6a:	9d05      	ldrge	r5, [sp, #20]
 8017e6c:	eba3 0509 	sublt.w	r5, r3, r9
 8017e70:	464b      	movge	r3, r9
 8017e72:	bfb8      	it	lt
 8017e74:	2300      	movlt	r3, #0
 8017e76:	e77e      	b.n	8017d76 <_dtoa_r+0x6fe>
 8017e78:	9f07      	ldr	r7, [sp, #28]
 8017e7a:	9d05      	ldr	r5, [sp, #20]
 8017e7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e7e:	e783      	b.n	8017d88 <_dtoa_r+0x710>
 8017e80:	9a07      	ldr	r2, [sp, #28]
 8017e82:	e7ab      	b.n	8017ddc <_dtoa_r+0x764>
 8017e84:	2300      	movs	r3, #0
 8017e86:	e7d4      	b.n	8017e32 <_dtoa_r+0x7ba>
 8017e88:	9b00      	ldr	r3, [sp, #0]
 8017e8a:	e7d2      	b.n	8017e32 <_dtoa_r+0x7ba>
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	9307      	str	r3, [sp, #28]
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017e96:	6918      	ldr	r0, [r3, #16]
 8017e98:	f000 fdc6 	bl	8018a28 <__hi0bits>
 8017e9c:	f1c0 0020 	rsb	r0, r0, #32
 8017ea0:	4440      	add	r0, r8
 8017ea2:	f010 001f 	ands.w	r0, r0, #31
 8017ea6:	d047      	beq.n	8017f38 <_dtoa_r+0x8c0>
 8017ea8:	f1c0 0320 	rsb	r3, r0, #32
 8017eac:	2b04      	cmp	r3, #4
 8017eae:	dd3b      	ble.n	8017f28 <_dtoa_r+0x8b0>
 8017eb0:	9b05      	ldr	r3, [sp, #20]
 8017eb2:	f1c0 001c 	rsb	r0, r0, #28
 8017eb6:	4403      	add	r3, r0
 8017eb8:	9305      	str	r3, [sp, #20]
 8017eba:	4405      	add	r5, r0
 8017ebc:	4480      	add	r8, r0
 8017ebe:	9b05      	ldr	r3, [sp, #20]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	dd05      	ble.n	8017ed0 <_dtoa_r+0x858>
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	9904      	ldr	r1, [sp, #16]
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f000 fee9 	bl	8018ca0 <__lshift>
 8017ece:	9004      	str	r0, [sp, #16]
 8017ed0:	f1b8 0f00 	cmp.w	r8, #0
 8017ed4:	dd05      	ble.n	8017ee2 <_dtoa_r+0x86a>
 8017ed6:	4639      	mov	r1, r7
 8017ed8:	4642      	mov	r2, r8
 8017eda:	4620      	mov	r0, r4
 8017edc:	f000 fee0 	bl	8018ca0 <__lshift>
 8017ee0:	4607      	mov	r7, r0
 8017ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ee4:	b353      	cbz	r3, 8017f3c <_dtoa_r+0x8c4>
 8017ee6:	4639      	mov	r1, r7
 8017ee8:	9804      	ldr	r0, [sp, #16]
 8017eea:	f000 ff2d 	bl	8018d48 <__mcmp>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	da24      	bge.n	8017f3c <_dtoa_r+0x8c4>
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	220a      	movs	r2, #10
 8017ef6:	9904      	ldr	r1, [sp, #16]
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f000 fd1c 	bl	8018936 <__multadd>
 8017efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f00:	9004      	str	r0, [sp, #16]
 8017f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	f000 814d 	beq.w	80181a6 <_dtoa_r+0xb2e>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	4631      	mov	r1, r6
 8017f10:	220a      	movs	r2, #10
 8017f12:	4620      	mov	r0, r4
 8017f14:	f000 fd0f 	bl	8018936 <__multadd>
 8017f18:	9b02      	ldr	r3, [sp, #8]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	4606      	mov	r6, r0
 8017f1e:	dc4f      	bgt.n	8017fc0 <_dtoa_r+0x948>
 8017f20:	9b06      	ldr	r3, [sp, #24]
 8017f22:	2b02      	cmp	r3, #2
 8017f24:	dd4c      	ble.n	8017fc0 <_dtoa_r+0x948>
 8017f26:	e011      	b.n	8017f4c <_dtoa_r+0x8d4>
 8017f28:	d0c9      	beq.n	8017ebe <_dtoa_r+0x846>
 8017f2a:	9a05      	ldr	r2, [sp, #20]
 8017f2c:	331c      	adds	r3, #28
 8017f2e:	441a      	add	r2, r3
 8017f30:	9205      	str	r2, [sp, #20]
 8017f32:	441d      	add	r5, r3
 8017f34:	4498      	add	r8, r3
 8017f36:	e7c2      	b.n	8017ebe <_dtoa_r+0x846>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	e7f6      	b.n	8017f2a <_dtoa_r+0x8b2>
 8017f3c:	f1b9 0f00 	cmp.w	r9, #0
 8017f40:	dc38      	bgt.n	8017fb4 <_dtoa_r+0x93c>
 8017f42:	9b06      	ldr	r3, [sp, #24]
 8017f44:	2b02      	cmp	r3, #2
 8017f46:	dd35      	ble.n	8017fb4 <_dtoa_r+0x93c>
 8017f48:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f4c:	9b02      	ldr	r3, [sp, #8]
 8017f4e:	b963      	cbnz	r3, 8017f6a <_dtoa_r+0x8f2>
 8017f50:	4639      	mov	r1, r7
 8017f52:	2205      	movs	r2, #5
 8017f54:	4620      	mov	r0, r4
 8017f56:	f000 fcee 	bl	8018936 <__multadd>
 8017f5a:	4601      	mov	r1, r0
 8017f5c:	4607      	mov	r7, r0
 8017f5e:	9804      	ldr	r0, [sp, #16]
 8017f60:	f000 fef2 	bl	8018d48 <__mcmp>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	f73f adcc 	bgt.w	8017b02 <_dtoa_r+0x48a>
 8017f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f6c:	465d      	mov	r5, fp
 8017f6e:	ea6f 0a03 	mvn.w	sl, r3
 8017f72:	f04f 0900 	mov.w	r9, #0
 8017f76:	4639      	mov	r1, r7
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f000 fcc5 	bl	8018908 <_Bfree>
 8017f7e:	2e00      	cmp	r6, #0
 8017f80:	f43f aeb7 	beq.w	8017cf2 <_dtoa_r+0x67a>
 8017f84:	f1b9 0f00 	cmp.w	r9, #0
 8017f88:	d005      	beq.n	8017f96 <_dtoa_r+0x91e>
 8017f8a:	45b1      	cmp	r9, r6
 8017f8c:	d003      	beq.n	8017f96 <_dtoa_r+0x91e>
 8017f8e:	4649      	mov	r1, r9
 8017f90:	4620      	mov	r0, r4
 8017f92:	f000 fcb9 	bl	8018908 <_Bfree>
 8017f96:	4631      	mov	r1, r6
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f000 fcb5 	bl	8018908 <_Bfree>
 8017f9e:	e6a8      	b.n	8017cf2 <_dtoa_r+0x67a>
 8017fa0:	2700      	movs	r7, #0
 8017fa2:	463e      	mov	r6, r7
 8017fa4:	e7e1      	b.n	8017f6a <_dtoa_r+0x8f2>
 8017fa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017faa:	463e      	mov	r6, r7
 8017fac:	e5a9      	b.n	8017b02 <_dtoa_r+0x48a>
 8017fae:	bf00      	nop
 8017fb0:	40240000 	.word	0x40240000
 8017fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	f000 80fa 	beq.w	80181b4 <_dtoa_r+0xb3c>
 8017fc0:	2d00      	cmp	r5, #0
 8017fc2:	dd05      	ble.n	8017fd0 <_dtoa_r+0x958>
 8017fc4:	4631      	mov	r1, r6
 8017fc6:	462a      	mov	r2, r5
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f000 fe69 	bl	8018ca0 <__lshift>
 8017fce:	4606      	mov	r6, r0
 8017fd0:	9b07      	ldr	r3, [sp, #28]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d04c      	beq.n	8018070 <_dtoa_r+0x9f8>
 8017fd6:	6871      	ldr	r1, [r6, #4]
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f000 fc61 	bl	80188a0 <_Balloc>
 8017fde:	6932      	ldr	r2, [r6, #16]
 8017fe0:	3202      	adds	r2, #2
 8017fe2:	4605      	mov	r5, r0
 8017fe4:	0092      	lsls	r2, r2, #2
 8017fe6:	f106 010c 	add.w	r1, r6, #12
 8017fea:	300c      	adds	r0, #12
 8017fec:	f7fd fc50 	bl	8015890 <memcpy>
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f000 fe53 	bl	8018ca0 <__lshift>
 8017ffa:	9b00      	ldr	r3, [sp, #0]
 8017ffc:	f8cd b014 	str.w	fp, [sp, #20]
 8018000:	f003 0301 	and.w	r3, r3, #1
 8018004:	46b1      	mov	r9, r6
 8018006:	9307      	str	r3, [sp, #28]
 8018008:	4606      	mov	r6, r0
 801800a:	4639      	mov	r1, r7
 801800c:	9804      	ldr	r0, [sp, #16]
 801800e:	f7ff faa5 	bl	801755c <quorem>
 8018012:	4649      	mov	r1, r9
 8018014:	4605      	mov	r5, r0
 8018016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801801a:	9804      	ldr	r0, [sp, #16]
 801801c:	f000 fe94 	bl	8018d48 <__mcmp>
 8018020:	4632      	mov	r2, r6
 8018022:	9000      	str	r0, [sp, #0]
 8018024:	4639      	mov	r1, r7
 8018026:	4620      	mov	r0, r4
 8018028:	f000 fea8 	bl	8018d7c <__mdiff>
 801802c:	68c3      	ldr	r3, [r0, #12]
 801802e:	4602      	mov	r2, r0
 8018030:	bb03      	cbnz	r3, 8018074 <_dtoa_r+0x9fc>
 8018032:	4601      	mov	r1, r0
 8018034:	9008      	str	r0, [sp, #32]
 8018036:	9804      	ldr	r0, [sp, #16]
 8018038:	f000 fe86 	bl	8018d48 <__mcmp>
 801803c:	9a08      	ldr	r2, [sp, #32]
 801803e:	4603      	mov	r3, r0
 8018040:	4611      	mov	r1, r2
 8018042:	4620      	mov	r0, r4
 8018044:	9308      	str	r3, [sp, #32]
 8018046:	f000 fc5f 	bl	8018908 <_Bfree>
 801804a:	9b08      	ldr	r3, [sp, #32]
 801804c:	b9a3      	cbnz	r3, 8018078 <_dtoa_r+0xa00>
 801804e:	9a06      	ldr	r2, [sp, #24]
 8018050:	b992      	cbnz	r2, 8018078 <_dtoa_r+0xa00>
 8018052:	9a07      	ldr	r2, [sp, #28]
 8018054:	b982      	cbnz	r2, 8018078 <_dtoa_r+0xa00>
 8018056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801805a:	d029      	beq.n	80180b0 <_dtoa_r+0xa38>
 801805c:	9b00      	ldr	r3, [sp, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	dd01      	ble.n	8018066 <_dtoa_r+0x9ee>
 8018062:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018066:	9b05      	ldr	r3, [sp, #20]
 8018068:	1c5d      	adds	r5, r3, #1
 801806a:	f883 8000 	strb.w	r8, [r3]
 801806e:	e782      	b.n	8017f76 <_dtoa_r+0x8fe>
 8018070:	4630      	mov	r0, r6
 8018072:	e7c2      	b.n	8017ffa <_dtoa_r+0x982>
 8018074:	2301      	movs	r3, #1
 8018076:	e7e3      	b.n	8018040 <_dtoa_r+0x9c8>
 8018078:	9a00      	ldr	r2, [sp, #0]
 801807a:	2a00      	cmp	r2, #0
 801807c:	db04      	blt.n	8018088 <_dtoa_r+0xa10>
 801807e:	d125      	bne.n	80180cc <_dtoa_r+0xa54>
 8018080:	9a06      	ldr	r2, [sp, #24]
 8018082:	bb1a      	cbnz	r2, 80180cc <_dtoa_r+0xa54>
 8018084:	9a07      	ldr	r2, [sp, #28]
 8018086:	bb0a      	cbnz	r2, 80180cc <_dtoa_r+0xa54>
 8018088:	2b00      	cmp	r3, #0
 801808a:	ddec      	ble.n	8018066 <_dtoa_r+0x9ee>
 801808c:	2201      	movs	r2, #1
 801808e:	9904      	ldr	r1, [sp, #16]
 8018090:	4620      	mov	r0, r4
 8018092:	f000 fe05 	bl	8018ca0 <__lshift>
 8018096:	4639      	mov	r1, r7
 8018098:	9004      	str	r0, [sp, #16]
 801809a:	f000 fe55 	bl	8018d48 <__mcmp>
 801809e:	2800      	cmp	r0, #0
 80180a0:	dc03      	bgt.n	80180aa <_dtoa_r+0xa32>
 80180a2:	d1e0      	bne.n	8018066 <_dtoa_r+0x9ee>
 80180a4:	f018 0f01 	tst.w	r8, #1
 80180a8:	d0dd      	beq.n	8018066 <_dtoa_r+0x9ee>
 80180aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180ae:	d1d8      	bne.n	8018062 <_dtoa_r+0x9ea>
 80180b0:	9b05      	ldr	r3, [sp, #20]
 80180b2:	9a05      	ldr	r2, [sp, #20]
 80180b4:	1c5d      	adds	r5, r3, #1
 80180b6:	2339      	movs	r3, #57	; 0x39
 80180b8:	7013      	strb	r3, [r2, #0]
 80180ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180be:	2b39      	cmp	r3, #57	; 0x39
 80180c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80180c4:	d04f      	beq.n	8018166 <_dtoa_r+0xaee>
 80180c6:	3301      	adds	r3, #1
 80180c8:	7013      	strb	r3, [r2, #0]
 80180ca:	e754      	b.n	8017f76 <_dtoa_r+0x8fe>
 80180cc:	9a05      	ldr	r2, [sp, #20]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	f102 0501 	add.w	r5, r2, #1
 80180d4:	dd06      	ble.n	80180e4 <_dtoa_r+0xa6c>
 80180d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180da:	d0e9      	beq.n	80180b0 <_dtoa_r+0xa38>
 80180dc:	f108 0801 	add.w	r8, r8, #1
 80180e0:	9b05      	ldr	r3, [sp, #20]
 80180e2:	e7c2      	b.n	801806a <_dtoa_r+0x9f2>
 80180e4:	9a02      	ldr	r2, [sp, #8]
 80180e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80180ea:	eba5 030b 	sub.w	r3, r5, fp
 80180ee:	4293      	cmp	r3, r2
 80180f0:	d021      	beq.n	8018136 <_dtoa_r+0xabe>
 80180f2:	2300      	movs	r3, #0
 80180f4:	220a      	movs	r2, #10
 80180f6:	9904      	ldr	r1, [sp, #16]
 80180f8:	4620      	mov	r0, r4
 80180fa:	f000 fc1c 	bl	8018936 <__multadd>
 80180fe:	45b1      	cmp	r9, r6
 8018100:	9004      	str	r0, [sp, #16]
 8018102:	f04f 0300 	mov.w	r3, #0
 8018106:	f04f 020a 	mov.w	r2, #10
 801810a:	4649      	mov	r1, r9
 801810c:	4620      	mov	r0, r4
 801810e:	d105      	bne.n	801811c <_dtoa_r+0xaa4>
 8018110:	f000 fc11 	bl	8018936 <__multadd>
 8018114:	4681      	mov	r9, r0
 8018116:	4606      	mov	r6, r0
 8018118:	9505      	str	r5, [sp, #20]
 801811a:	e776      	b.n	801800a <_dtoa_r+0x992>
 801811c:	f000 fc0b 	bl	8018936 <__multadd>
 8018120:	4631      	mov	r1, r6
 8018122:	4681      	mov	r9, r0
 8018124:	2300      	movs	r3, #0
 8018126:	220a      	movs	r2, #10
 8018128:	4620      	mov	r0, r4
 801812a:	f000 fc04 	bl	8018936 <__multadd>
 801812e:	4606      	mov	r6, r0
 8018130:	e7f2      	b.n	8018118 <_dtoa_r+0xaa0>
 8018132:	f04f 0900 	mov.w	r9, #0
 8018136:	2201      	movs	r2, #1
 8018138:	9904      	ldr	r1, [sp, #16]
 801813a:	4620      	mov	r0, r4
 801813c:	f000 fdb0 	bl	8018ca0 <__lshift>
 8018140:	4639      	mov	r1, r7
 8018142:	9004      	str	r0, [sp, #16]
 8018144:	f000 fe00 	bl	8018d48 <__mcmp>
 8018148:	2800      	cmp	r0, #0
 801814a:	dcb6      	bgt.n	80180ba <_dtoa_r+0xa42>
 801814c:	d102      	bne.n	8018154 <_dtoa_r+0xadc>
 801814e:	f018 0f01 	tst.w	r8, #1
 8018152:	d1b2      	bne.n	80180ba <_dtoa_r+0xa42>
 8018154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018158:	2b30      	cmp	r3, #48	; 0x30
 801815a:	f105 32ff 	add.w	r2, r5, #4294967295
 801815e:	f47f af0a 	bne.w	8017f76 <_dtoa_r+0x8fe>
 8018162:	4615      	mov	r5, r2
 8018164:	e7f6      	b.n	8018154 <_dtoa_r+0xadc>
 8018166:	4593      	cmp	fp, r2
 8018168:	d105      	bne.n	8018176 <_dtoa_r+0xafe>
 801816a:	2331      	movs	r3, #49	; 0x31
 801816c:	f10a 0a01 	add.w	sl, sl, #1
 8018170:	f88b 3000 	strb.w	r3, [fp]
 8018174:	e6ff      	b.n	8017f76 <_dtoa_r+0x8fe>
 8018176:	4615      	mov	r5, r2
 8018178:	e79f      	b.n	80180ba <_dtoa_r+0xa42>
 801817a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80181e0 <_dtoa_r+0xb68>
 801817e:	e007      	b.n	8018190 <_dtoa_r+0xb18>
 8018180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018182:	f8df b060 	ldr.w	fp, [pc, #96]	; 80181e4 <_dtoa_r+0xb6c>
 8018186:	b11b      	cbz	r3, 8018190 <_dtoa_r+0xb18>
 8018188:	f10b 0308 	add.w	r3, fp, #8
 801818c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801818e:	6013      	str	r3, [r2, #0]
 8018190:	4658      	mov	r0, fp
 8018192:	b017      	add	sp, #92	; 0x5c
 8018194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018198:	9b06      	ldr	r3, [sp, #24]
 801819a:	2b01      	cmp	r3, #1
 801819c:	f77f ae35 	ble.w	8017e0a <_dtoa_r+0x792>
 80181a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181a2:	9307      	str	r3, [sp, #28]
 80181a4:	e649      	b.n	8017e3a <_dtoa_r+0x7c2>
 80181a6:	9b02      	ldr	r3, [sp, #8]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	dc03      	bgt.n	80181b4 <_dtoa_r+0xb3c>
 80181ac:	9b06      	ldr	r3, [sp, #24]
 80181ae:	2b02      	cmp	r3, #2
 80181b0:	f73f aecc 	bgt.w	8017f4c <_dtoa_r+0x8d4>
 80181b4:	465d      	mov	r5, fp
 80181b6:	4639      	mov	r1, r7
 80181b8:	9804      	ldr	r0, [sp, #16]
 80181ba:	f7ff f9cf 	bl	801755c <quorem>
 80181be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181c2:	f805 8b01 	strb.w	r8, [r5], #1
 80181c6:	9a02      	ldr	r2, [sp, #8]
 80181c8:	eba5 030b 	sub.w	r3, r5, fp
 80181cc:	429a      	cmp	r2, r3
 80181ce:	ddb0      	ble.n	8018132 <_dtoa_r+0xaba>
 80181d0:	2300      	movs	r3, #0
 80181d2:	220a      	movs	r2, #10
 80181d4:	9904      	ldr	r1, [sp, #16]
 80181d6:	4620      	mov	r0, r4
 80181d8:	f000 fbad 	bl	8018936 <__multadd>
 80181dc:	9004      	str	r0, [sp, #16]
 80181de:	e7ea      	b.n	80181b6 <_dtoa_r+0xb3e>
 80181e0:	0801bdb3 	.word	0x0801bdb3
 80181e4:	0801bc78 	.word	0x0801bc78

080181e8 <rshift>:
 80181e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ea:	6906      	ldr	r6, [r0, #16]
 80181ec:	114b      	asrs	r3, r1, #5
 80181ee:	429e      	cmp	r6, r3
 80181f0:	f100 0414 	add.w	r4, r0, #20
 80181f4:	dd30      	ble.n	8018258 <rshift+0x70>
 80181f6:	f011 011f 	ands.w	r1, r1, #31
 80181fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80181fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018202:	d108      	bne.n	8018216 <rshift+0x2e>
 8018204:	4621      	mov	r1, r4
 8018206:	42b2      	cmp	r2, r6
 8018208:	460b      	mov	r3, r1
 801820a:	d211      	bcs.n	8018230 <rshift+0x48>
 801820c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018210:	f841 3b04 	str.w	r3, [r1], #4
 8018214:	e7f7      	b.n	8018206 <rshift+0x1e>
 8018216:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801821a:	f1c1 0c20 	rsb	ip, r1, #32
 801821e:	40cd      	lsrs	r5, r1
 8018220:	3204      	adds	r2, #4
 8018222:	4623      	mov	r3, r4
 8018224:	42b2      	cmp	r2, r6
 8018226:	4617      	mov	r7, r2
 8018228:	d30c      	bcc.n	8018244 <rshift+0x5c>
 801822a:	601d      	str	r5, [r3, #0]
 801822c:	b105      	cbz	r5, 8018230 <rshift+0x48>
 801822e:	3304      	adds	r3, #4
 8018230:	1b1a      	subs	r2, r3, r4
 8018232:	42a3      	cmp	r3, r4
 8018234:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018238:	bf08      	it	eq
 801823a:	2300      	moveq	r3, #0
 801823c:	6102      	str	r2, [r0, #16]
 801823e:	bf08      	it	eq
 8018240:	6143      	streq	r3, [r0, #20]
 8018242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018244:	683f      	ldr	r7, [r7, #0]
 8018246:	fa07 f70c 	lsl.w	r7, r7, ip
 801824a:	433d      	orrs	r5, r7
 801824c:	f843 5b04 	str.w	r5, [r3], #4
 8018250:	f852 5b04 	ldr.w	r5, [r2], #4
 8018254:	40cd      	lsrs	r5, r1
 8018256:	e7e5      	b.n	8018224 <rshift+0x3c>
 8018258:	4623      	mov	r3, r4
 801825a:	e7e9      	b.n	8018230 <rshift+0x48>

0801825c <__hexdig_fun>:
 801825c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018260:	2b09      	cmp	r3, #9
 8018262:	d802      	bhi.n	801826a <__hexdig_fun+0xe>
 8018264:	3820      	subs	r0, #32
 8018266:	b2c0      	uxtb	r0, r0
 8018268:	4770      	bx	lr
 801826a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801826e:	2b05      	cmp	r3, #5
 8018270:	d801      	bhi.n	8018276 <__hexdig_fun+0x1a>
 8018272:	3847      	subs	r0, #71	; 0x47
 8018274:	e7f7      	b.n	8018266 <__hexdig_fun+0xa>
 8018276:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801827a:	2b05      	cmp	r3, #5
 801827c:	d801      	bhi.n	8018282 <__hexdig_fun+0x26>
 801827e:	3827      	subs	r0, #39	; 0x27
 8018280:	e7f1      	b.n	8018266 <__hexdig_fun+0xa>
 8018282:	2000      	movs	r0, #0
 8018284:	4770      	bx	lr

08018286 <__gethex>:
 8018286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828a:	b08b      	sub	sp, #44	; 0x2c
 801828c:	468a      	mov	sl, r1
 801828e:	9002      	str	r0, [sp, #8]
 8018290:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018292:	9306      	str	r3, [sp, #24]
 8018294:	4690      	mov	r8, r2
 8018296:	f000 fadf 	bl	8018858 <__localeconv_l>
 801829a:	6803      	ldr	r3, [r0, #0]
 801829c:	9303      	str	r3, [sp, #12]
 801829e:	4618      	mov	r0, r3
 80182a0:	f7e7 ffa0 	bl	80001e4 <strlen>
 80182a4:	9b03      	ldr	r3, [sp, #12]
 80182a6:	9001      	str	r0, [sp, #4]
 80182a8:	4403      	add	r3, r0
 80182aa:	f04f 0b00 	mov.w	fp, #0
 80182ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80182b2:	9307      	str	r3, [sp, #28]
 80182b4:	f8da 3000 	ldr.w	r3, [sl]
 80182b8:	3302      	adds	r3, #2
 80182ba:	461f      	mov	r7, r3
 80182bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80182c0:	2830      	cmp	r0, #48	; 0x30
 80182c2:	d06c      	beq.n	801839e <__gethex+0x118>
 80182c4:	f7ff ffca 	bl	801825c <__hexdig_fun>
 80182c8:	4604      	mov	r4, r0
 80182ca:	2800      	cmp	r0, #0
 80182cc:	d16a      	bne.n	80183a4 <__gethex+0x11e>
 80182ce:	9a01      	ldr	r2, [sp, #4]
 80182d0:	9903      	ldr	r1, [sp, #12]
 80182d2:	4638      	mov	r0, r7
 80182d4:	f001 fb78 	bl	80199c8 <strncmp>
 80182d8:	2800      	cmp	r0, #0
 80182da:	d166      	bne.n	80183aa <__gethex+0x124>
 80182dc:	9b01      	ldr	r3, [sp, #4]
 80182de:	5cf8      	ldrb	r0, [r7, r3]
 80182e0:	18fe      	adds	r6, r7, r3
 80182e2:	f7ff ffbb 	bl	801825c <__hexdig_fun>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d062      	beq.n	80183b0 <__gethex+0x12a>
 80182ea:	4633      	mov	r3, r6
 80182ec:	7818      	ldrb	r0, [r3, #0]
 80182ee:	2830      	cmp	r0, #48	; 0x30
 80182f0:	461f      	mov	r7, r3
 80182f2:	f103 0301 	add.w	r3, r3, #1
 80182f6:	d0f9      	beq.n	80182ec <__gethex+0x66>
 80182f8:	f7ff ffb0 	bl	801825c <__hexdig_fun>
 80182fc:	fab0 f580 	clz	r5, r0
 8018300:	096d      	lsrs	r5, r5, #5
 8018302:	4634      	mov	r4, r6
 8018304:	f04f 0b01 	mov.w	fp, #1
 8018308:	463a      	mov	r2, r7
 801830a:	4616      	mov	r6, r2
 801830c:	3201      	adds	r2, #1
 801830e:	7830      	ldrb	r0, [r6, #0]
 8018310:	f7ff ffa4 	bl	801825c <__hexdig_fun>
 8018314:	2800      	cmp	r0, #0
 8018316:	d1f8      	bne.n	801830a <__gethex+0x84>
 8018318:	9a01      	ldr	r2, [sp, #4]
 801831a:	9903      	ldr	r1, [sp, #12]
 801831c:	4630      	mov	r0, r6
 801831e:	f001 fb53 	bl	80199c8 <strncmp>
 8018322:	b950      	cbnz	r0, 801833a <__gethex+0xb4>
 8018324:	b954      	cbnz	r4, 801833c <__gethex+0xb6>
 8018326:	9b01      	ldr	r3, [sp, #4]
 8018328:	18f4      	adds	r4, r6, r3
 801832a:	4622      	mov	r2, r4
 801832c:	4616      	mov	r6, r2
 801832e:	3201      	adds	r2, #1
 8018330:	7830      	ldrb	r0, [r6, #0]
 8018332:	f7ff ff93 	bl	801825c <__hexdig_fun>
 8018336:	2800      	cmp	r0, #0
 8018338:	d1f8      	bne.n	801832c <__gethex+0xa6>
 801833a:	b10c      	cbz	r4, 8018340 <__gethex+0xba>
 801833c:	1ba4      	subs	r4, r4, r6
 801833e:	00a4      	lsls	r4, r4, #2
 8018340:	7833      	ldrb	r3, [r6, #0]
 8018342:	2b50      	cmp	r3, #80	; 0x50
 8018344:	d001      	beq.n	801834a <__gethex+0xc4>
 8018346:	2b70      	cmp	r3, #112	; 0x70
 8018348:	d140      	bne.n	80183cc <__gethex+0x146>
 801834a:	7873      	ldrb	r3, [r6, #1]
 801834c:	2b2b      	cmp	r3, #43	; 0x2b
 801834e:	d031      	beq.n	80183b4 <__gethex+0x12e>
 8018350:	2b2d      	cmp	r3, #45	; 0x2d
 8018352:	d033      	beq.n	80183bc <__gethex+0x136>
 8018354:	1c71      	adds	r1, r6, #1
 8018356:	f04f 0900 	mov.w	r9, #0
 801835a:	7808      	ldrb	r0, [r1, #0]
 801835c:	f7ff ff7e 	bl	801825c <__hexdig_fun>
 8018360:	1e43      	subs	r3, r0, #1
 8018362:	b2db      	uxtb	r3, r3
 8018364:	2b18      	cmp	r3, #24
 8018366:	d831      	bhi.n	80183cc <__gethex+0x146>
 8018368:	f1a0 0210 	sub.w	r2, r0, #16
 801836c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018370:	f7ff ff74 	bl	801825c <__hexdig_fun>
 8018374:	1e43      	subs	r3, r0, #1
 8018376:	b2db      	uxtb	r3, r3
 8018378:	2b18      	cmp	r3, #24
 801837a:	d922      	bls.n	80183c2 <__gethex+0x13c>
 801837c:	f1b9 0f00 	cmp.w	r9, #0
 8018380:	d000      	beq.n	8018384 <__gethex+0xfe>
 8018382:	4252      	negs	r2, r2
 8018384:	4414      	add	r4, r2
 8018386:	f8ca 1000 	str.w	r1, [sl]
 801838a:	b30d      	cbz	r5, 80183d0 <__gethex+0x14a>
 801838c:	f1bb 0f00 	cmp.w	fp, #0
 8018390:	bf0c      	ite	eq
 8018392:	2706      	moveq	r7, #6
 8018394:	2700      	movne	r7, #0
 8018396:	4638      	mov	r0, r7
 8018398:	b00b      	add	sp, #44	; 0x2c
 801839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801839e:	f10b 0b01 	add.w	fp, fp, #1
 80183a2:	e78a      	b.n	80182ba <__gethex+0x34>
 80183a4:	2500      	movs	r5, #0
 80183a6:	462c      	mov	r4, r5
 80183a8:	e7ae      	b.n	8018308 <__gethex+0x82>
 80183aa:	463e      	mov	r6, r7
 80183ac:	2501      	movs	r5, #1
 80183ae:	e7c7      	b.n	8018340 <__gethex+0xba>
 80183b0:	4604      	mov	r4, r0
 80183b2:	e7fb      	b.n	80183ac <__gethex+0x126>
 80183b4:	f04f 0900 	mov.w	r9, #0
 80183b8:	1cb1      	adds	r1, r6, #2
 80183ba:	e7ce      	b.n	801835a <__gethex+0xd4>
 80183bc:	f04f 0901 	mov.w	r9, #1
 80183c0:	e7fa      	b.n	80183b8 <__gethex+0x132>
 80183c2:	230a      	movs	r3, #10
 80183c4:	fb03 0202 	mla	r2, r3, r2, r0
 80183c8:	3a10      	subs	r2, #16
 80183ca:	e7cf      	b.n	801836c <__gethex+0xe6>
 80183cc:	4631      	mov	r1, r6
 80183ce:	e7da      	b.n	8018386 <__gethex+0x100>
 80183d0:	1bf3      	subs	r3, r6, r7
 80183d2:	3b01      	subs	r3, #1
 80183d4:	4629      	mov	r1, r5
 80183d6:	2b07      	cmp	r3, #7
 80183d8:	dc49      	bgt.n	801846e <__gethex+0x1e8>
 80183da:	9802      	ldr	r0, [sp, #8]
 80183dc:	f000 fa60 	bl	80188a0 <_Balloc>
 80183e0:	9b01      	ldr	r3, [sp, #4]
 80183e2:	f100 0914 	add.w	r9, r0, #20
 80183e6:	f04f 0b00 	mov.w	fp, #0
 80183ea:	f1c3 0301 	rsb	r3, r3, #1
 80183ee:	4605      	mov	r5, r0
 80183f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80183f4:	46da      	mov	sl, fp
 80183f6:	9308      	str	r3, [sp, #32]
 80183f8:	42b7      	cmp	r7, r6
 80183fa:	d33b      	bcc.n	8018474 <__gethex+0x1ee>
 80183fc:	9804      	ldr	r0, [sp, #16]
 80183fe:	f840 ab04 	str.w	sl, [r0], #4
 8018402:	eba0 0009 	sub.w	r0, r0, r9
 8018406:	1080      	asrs	r0, r0, #2
 8018408:	6128      	str	r0, [r5, #16]
 801840a:	0147      	lsls	r7, r0, #5
 801840c:	4650      	mov	r0, sl
 801840e:	f000 fb0b 	bl	8018a28 <__hi0bits>
 8018412:	f8d8 6000 	ldr.w	r6, [r8]
 8018416:	1a3f      	subs	r7, r7, r0
 8018418:	42b7      	cmp	r7, r6
 801841a:	dd64      	ble.n	80184e6 <__gethex+0x260>
 801841c:	1bbf      	subs	r7, r7, r6
 801841e:	4639      	mov	r1, r7
 8018420:	4628      	mov	r0, r5
 8018422:	f000 fe1b 	bl	801905c <__any_on>
 8018426:	4682      	mov	sl, r0
 8018428:	b178      	cbz	r0, 801844a <__gethex+0x1c4>
 801842a:	1e7b      	subs	r3, r7, #1
 801842c:	1159      	asrs	r1, r3, #5
 801842e:	f003 021f 	and.w	r2, r3, #31
 8018432:	f04f 0a01 	mov.w	sl, #1
 8018436:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801843a:	fa0a f202 	lsl.w	r2, sl, r2
 801843e:	420a      	tst	r2, r1
 8018440:	d003      	beq.n	801844a <__gethex+0x1c4>
 8018442:	4553      	cmp	r3, sl
 8018444:	dc46      	bgt.n	80184d4 <__gethex+0x24e>
 8018446:	f04f 0a02 	mov.w	sl, #2
 801844a:	4639      	mov	r1, r7
 801844c:	4628      	mov	r0, r5
 801844e:	f7ff fecb 	bl	80181e8 <rshift>
 8018452:	443c      	add	r4, r7
 8018454:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018458:	42a3      	cmp	r3, r4
 801845a:	da52      	bge.n	8018502 <__gethex+0x27c>
 801845c:	4629      	mov	r1, r5
 801845e:	9802      	ldr	r0, [sp, #8]
 8018460:	f000 fa52 	bl	8018908 <_Bfree>
 8018464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018466:	2300      	movs	r3, #0
 8018468:	6013      	str	r3, [r2, #0]
 801846a:	27a3      	movs	r7, #163	; 0xa3
 801846c:	e793      	b.n	8018396 <__gethex+0x110>
 801846e:	3101      	adds	r1, #1
 8018470:	105b      	asrs	r3, r3, #1
 8018472:	e7b0      	b.n	80183d6 <__gethex+0x150>
 8018474:	1e73      	subs	r3, r6, #1
 8018476:	9305      	str	r3, [sp, #20]
 8018478:	9a07      	ldr	r2, [sp, #28]
 801847a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801847e:	4293      	cmp	r3, r2
 8018480:	d018      	beq.n	80184b4 <__gethex+0x22e>
 8018482:	f1bb 0f20 	cmp.w	fp, #32
 8018486:	d107      	bne.n	8018498 <__gethex+0x212>
 8018488:	9b04      	ldr	r3, [sp, #16]
 801848a:	f8c3 a000 	str.w	sl, [r3]
 801848e:	3304      	adds	r3, #4
 8018490:	f04f 0a00 	mov.w	sl, #0
 8018494:	9304      	str	r3, [sp, #16]
 8018496:	46d3      	mov	fp, sl
 8018498:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801849c:	f7ff fede 	bl	801825c <__hexdig_fun>
 80184a0:	f000 000f 	and.w	r0, r0, #15
 80184a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80184a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80184ac:	f10b 0b04 	add.w	fp, fp, #4
 80184b0:	9b05      	ldr	r3, [sp, #20]
 80184b2:	e00d      	b.n	80184d0 <__gethex+0x24a>
 80184b4:	9b05      	ldr	r3, [sp, #20]
 80184b6:	9a08      	ldr	r2, [sp, #32]
 80184b8:	4413      	add	r3, r2
 80184ba:	42bb      	cmp	r3, r7
 80184bc:	d3e1      	bcc.n	8018482 <__gethex+0x1fc>
 80184be:	4618      	mov	r0, r3
 80184c0:	9a01      	ldr	r2, [sp, #4]
 80184c2:	9903      	ldr	r1, [sp, #12]
 80184c4:	9309      	str	r3, [sp, #36]	; 0x24
 80184c6:	f001 fa7f 	bl	80199c8 <strncmp>
 80184ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d1d8      	bne.n	8018482 <__gethex+0x1fc>
 80184d0:	461e      	mov	r6, r3
 80184d2:	e791      	b.n	80183f8 <__gethex+0x172>
 80184d4:	1eb9      	subs	r1, r7, #2
 80184d6:	4628      	mov	r0, r5
 80184d8:	f000 fdc0 	bl	801905c <__any_on>
 80184dc:	2800      	cmp	r0, #0
 80184de:	d0b2      	beq.n	8018446 <__gethex+0x1c0>
 80184e0:	f04f 0a03 	mov.w	sl, #3
 80184e4:	e7b1      	b.n	801844a <__gethex+0x1c4>
 80184e6:	da09      	bge.n	80184fc <__gethex+0x276>
 80184e8:	1bf7      	subs	r7, r6, r7
 80184ea:	4629      	mov	r1, r5
 80184ec:	463a      	mov	r2, r7
 80184ee:	9802      	ldr	r0, [sp, #8]
 80184f0:	f000 fbd6 	bl	8018ca0 <__lshift>
 80184f4:	1be4      	subs	r4, r4, r7
 80184f6:	4605      	mov	r5, r0
 80184f8:	f100 0914 	add.w	r9, r0, #20
 80184fc:	f04f 0a00 	mov.w	sl, #0
 8018500:	e7a8      	b.n	8018454 <__gethex+0x1ce>
 8018502:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018506:	42a0      	cmp	r0, r4
 8018508:	dd6a      	ble.n	80185e0 <__gethex+0x35a>
 801850a:	1b04      	subs	r4, r0, r4
 801850c:	42a6      	cmp	r6, r4
 801850e:	dc2e      	bgt.n	801856e <__gethex+0x2e8>
 8018510:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018514:	2b02      	cmp	r3, #2
 8018516:	d022      	beq.n	801855e <__gethex+0x2d8>
 8018518:	2b03      	cmp	r3, #3
 801851a:	d024      	beq.n	8018566 <__gethex+0x2e0>
 801851c:	2b01      	cmp	r3, #1
 801851e:	d115      	bne.n	801854c <__gethex+0x2c6>
 8018520:	42a6      	cmp	r6, r4
 8018522:	d113      	bne.n	801854c <__gethex+0x2c6>
 8018524:	2e01      	cmp	r6, #1
 8018526:	dc0b      	bgt.n	8018540 <__gethex+0x2ba>
 8018528:	9a06      	ldr	r2, [sp, #24]
 801852a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801852e:	6013      	str	r3, [r2, #0]
 8018530:	2301      	movs	r3, #1
 8018532:	612b      	str	r3, [r5, #16]
 8018534:	f8c9 3000 	str.w	r3, [r9]
 8018538:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801853a:	2762      	movs	r7, #98	; 0x62
 801853c:	601d      	str	r5, [r3, #0]
 801853e:	e72a      	b.n	8018396 <__gethex+0x110>
 8018540:	1e71      	subs	r1, r6, #1
 8018542:	4628      	mov	r0, r5
 8018544:	f000 fd8a 	bl	801905c <__any_on>
 8018548:	2800      	cmp	r0, #0
 801854a:	d1ed      	bne.n	8018528 <__gethex+0x2a2>
 801854c:	4629      	mov	r1, r5
 801854e:	9802      	ldr	r0, [sp, #8]
 8018550:	f000 f9da 	bl	8018908 <_Bfree>
 8018554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018556:	2300      	movs	r3, #0
 8018558:	6013      	str	r3, [r2, #0]
 801855a:	2750      	movs	r7, #80	; 0x50
 801855c:	e71b      	b.n	8018396 <__gethex+0x110>
 801855e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018560:	2b00      	cmp	r3, #0
 8018562:	d0e1      	beq.n	8018528 <__gethex+0x2a2>
 8018564:	e7f2      	b.n	801854c <__gethex+0x2c6>
 8018566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018568:	2b00      	cmp	r3, #0
 801856a:	d1dd      	bne.n	8018528 <__gethex+0x2a2>
 801856c:	e7ee      	b.n	801854c <__gethex+0x2c6>
 801856e:	1e67      	subs	r7, r4, #1
 8018570:	f1ba 0f00 	cmp.w	sl, #0
 8018574:	d131      	bne.n	80185da <__gethex+0x354>
 8018576:	b127      	cbz	r7, 8018582 <__gethex+0x2fc>
 8018578:	4639      	mov	r1, r7
 801857a:	4628      	mov	r0, r5
 801857c:	f000 fd6e 	bl	801905c <__any_on>
 8018580:	4682      	mov	sl, r0
 8018582:	117a      	asrs	r2, r7, #5
 8018584:	2301      	movs	r3, #1
 8018586:	f007 071f 	and.w	r7, r7, #31
 801858a:	fa03 f707 	lsl.w	r7, r3, r7
 801858e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018592:	4621      	mov	r1, r4
 8018594:	421f      	tst	r7, r3
 8018596:	4628      	mov	r0, r5
 8018598:	bf18      	it	ne
 801859a:	f04a 0a02 	orrne.w	sl, sl, #2
 801859e:	1b36      	subs	r6, r6, r4
 80185a0:	f7ff fe22 	bl	80181e8 <rshift>
 80185a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80185a8:	2702      	movs	r7, #2
 80185aa:	f1ba 0f00 	cmp.w	sl, #0
 80185ae:	d048      	beq.n	8018642 <__gethex+0x3bc>
 80185b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185b4:	2b02      	cmp	r3, #2
 80185b6:	d015      	beq.n	80185e4 <__gethex+0x35e>
 80185b8:	2b03      	cmp	r3, #3
 80185ba:	d017      	beq.n	80185ec <__gethex+0x366>
 80185bc:	2b01      	cmp	r3, #1
 80185be:	d109      	bne.n	80185d4 <__gethex+0x34e>
 80185c0:	f01a 0f02 	tst.w	sl, #2
 80185c4:	d006      	beq.n	80185d4 <__gethex+0x34e>
 80185c6:	f8d9 3000 	ldr.w	r3, [r9]
 80185ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80185ce:	f01a 0f01 	tst.w	sl, #1
 80185d2:	d10e      	bne.n	80185f2 <__gethex+0x36c>
 80185d4:	f047 0710 	orr.w	r7, r7, #16
 80185d8:	e033      	b.n	8018642 <__gethex+0x3bc>
 80185da:	f04f 0a01 	mov.w	sl, #1
 80185de:	e7d0      	b.n	8018582 <__gethex+0x2fc>
 80185e0:	2701      	movs	r7, #1
 80185e2:	e7e2      	b.n	80185aa <__gethex+0x324>
 80185e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185e6:	f1c3 0301 	rsb	r3, r3, #1
 80185ea:	9315      	str	r3, [sp, #84]	; 0x54
 80185ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d0f0      	beq.n	80185d4 <__gethex+0x34e>
 80185f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80185f6:	f105 0314 	add.w	r3, r5, #20
 80185fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80185fe:	eb03 010a 	add.w	r1, r3, sl
 8018602:	f04f 0c00 	mov.w	ip, #0
 8018606:	4618      	mov	r0, r3
 8018608:	f853 2b04 	ldr.w	r2, [r3], #4
 801860c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018610:	d01c      	beq.n	801864c <__gethex+0x3c6>
 8018612:	3201      	adds	r2, #1
 8018614:	6002      	str	r2, [r0, #0]
 8018616:	2f02      	cmp	r7, #2
 8018618:	f105 0314 	add.w	r3, r5, #20
 801861c:	d138      	bne.n	8018690 <__gethex+0x40a>
 801861e:	f8d8 2000 	ldr.w	r2, [r8]
 8018622:	3a01      	subs	r2, #1
 8018624:	42b2      	cmp	r2, r6
 8018626:	d10a      	bne.n	801863e <__gethex+0x3b8>
 8018628:	1171      	asrs	r1, r6, #5
 801862a:	2201      	movs	r2, #1
 801862c:	f006 061f 	and.w	r6, r6, #31
 8018630:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018634:	fa02 f606 	lsl.w	r6, r2, r6
 8018638:	421e      	tst	r6, r3
 801863a:	bf18      	it	ne
 801863c:	4617      	movne	r7, r2
 801863e:	f047 0720 	orr.w	r7, r7, #32
 8018642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018644:	601d      	str	r5, [r3, #0]
 8018646:	9b06      	ldr	r3, [sp, #24]
 8018648:	601c      	str	r4, [r3, #0]
 801864a:	e6a4      	b.n	8018396 <__gethex+0x110>
 801864c:	4299      	cmp	r1, r3
 801864e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018652:	d8d8      	bhi.n	8018606 <__gethex+0x380>
 8018654:	68ab      	ldr	r3, [r5, #8]
 8018656:	4599      	cmp	r9, r3
 8018658:	db12      	blt.n	8018680 <__gethex+0x3fa>
 801865a:	6869      	ldr	r1, [r5, #4]
 801865c:	9802      	ldr	r0, [sp, #8]
 801865e:	3101      	adds	r1, #1
 8018660:	f000 f91e 	bl	80188a0 <_Balloc>
 8018664:	692a      	ldr	r2, [r5, #16]
 8018666:	3202      	adds	r2, #2
 8018668:	f105 010c 	add.w	r1, r5, #12
 801866c:	4683      	mov	fp, r0
 801866e:	0092      	lsls	r2, r2, #2
 8018670:	300c      	adds	r0, #12
 8018672:	f7fd f90d 	bl	8015890 <memcpy>
 8018676:	4629      	mov	r1, r5
 8018678:	9802      	ldr	r0, [sp, #8]
 801867a:	f000 f945 	bl	8018908 <_Bfree>
 801867e:	465d      	mov	r5, fp
 8018680:	692b      	ldr	r3, [r5, #16]
 8018682:	1c5a      	adds	r2, r3, #1
 8018684:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018688:	612a      	str	r2, [r5, #16]
 801868a:	2201      	movs	r2, #1
 801868c:	615a      	str	r2, [r3, #20]
 801868e:	e7c2      	b.n	8018616 <__gethex+0x390>
 8018690:	692a      	ldr	r2, [r5, #16]
 8018692:	454a      	cmp	r2, r9
 8018694:	dd0b      	ble.n	80186ae <__gethex+0x428>
 8018696:	2101      	movs	r1, #1
 8018698:	4628      	mov	r0, r5
 801869a:	f7ff fda5 	bl	80181e8 <rshift>
 801869e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186a2:	3401      	adds	r4, #1
 80186a4:	42a3      	cmp	r3, r4
 80186a6:	f6ff aed9 	blt.w	801845c <__gethex+0x1d6>
 80186aa:	2701      	movs	r7, #1
 80186ac:	e7c7      	b.n	801863e <__gethex+0x3b8>
 80186ae:	f016 061f 	ands.w	r6, r6, #31
 80186b2:	d0fa      	beq.n	80186aa <__gethex+0x424>
 80186b4:	449a      	add	sl, r3
 80186b6:	f1c6 0620 	rsb	r6, r6, #32
 80186ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80186be:	f000 f9b3 	bl	8018a28 <__hi0bits>
 80186c2:	42b0      	cmp	r0, r6
 80186c4:	dbe7      	blt.n	8018696 <__gethex+0x410>
 80186c6:	e7f0      	b.n	80186aa <__gethex+0x424>

080186c8 <L_shift>:
 80186c8:	f1c2 0208 	rsb	r2, r2, #8
 80186cc:	0092      	lsls	r2, r2, #2
 80186ce:	b570      	push	{r4, r5, r6, lr}
 80186d0:	f1c2 0620 	rsb	r6, r2, #32
 80186d4:	6843      	ldr	r3, [r0, #4]
 80186d6:	6804      	ldr	r4, [r0, #0]
 80186d8:	fa03 f506 	lsl.w	r5, r3, r6
 80186dc:	432c      	orrs	r4, r5
 80186de:	40d3      	lsrs	r3, r2
 80186e0:	6004      	str	r4, [r0, #0]
 80186e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80186e6:	4288      	cmp	r0, r1
 80186e8:	d3f4      	bcc.n	80186d4 <L_shift+0xc>
 80186ea:	bd70      	pop	{r4, r5, r6, pc}

080186ec <__match>:
 80186ec:	b530      	push	{r4, r5, lr}
 80186ee:	6803      	ldr	r3, [r0, #0]
 80186f0:	3301      	adds	r3, #1
 80186f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186f6:	b914      	cbnz	r4, 80186fe <__match+0x12>
 80186f8:	6003      	str	r3, [r0, #0]
 80186fa:	2001      	movs	r0, #1
 80186fc:	bd30      	pop	{r4, r5, pc}
 80186fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018702:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018706:	2d19      	cmp	r5, #25
 8018708:	bf98      	it	ls
 801870a:	3220      	addls	r2, #32
 801870c:	42a2      	cmp	r2, r4
 801870e:	d0f0      	beq.n	80186f2 <__match+0x6>
 8018710:	2000      	movs	r0, #0
 8018712:	e7f3      	b.n	80186fc <__match+0x10>

08018714 <__hexnan>:
 8018714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018718:	680b      	ldr	r3, [r1, #0]
 801871a:	6801      	ldr	r1, [r0, #0]
 801871c:	115f      	asrs	r7, r3, #5
 801871e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018722:	f013 031f 	ands.w	r3, r3, #31
 8018726:	b087      	sub	sp, #28
 8018728:	bf18      	it	ne
 801872a:	3704      	addne	r7, #4
 801872c:	2500      	movs	r5, #0
 801872e:	1f3e      	subs	r6, r7, #4
 8018730:	4682      	mov	sl, r0
 8018732:	4690      	mov	r8, r2
 8018734:	9301      	str	r3, [sp, #4]
 8018736:	f847 5c04 	str.w	r5, [r7, #-4]
 801873a:	46b1      	mov	r9, r6
 801873c:	4634      	mov	r4, r6
 801873e:	9502      	str	r5, [sp, #8]
 8018740:	46ab      	mov	fp, r5
 8018742:	784a      	ldrb	r2, [r1, #1]
 8018744:	1c4b      	adds	r3, r1, #1
 8018746:	9303      	str	r3, [sp, #12]
 8018748:	b342      	cbz	r2, 801879c <__hexnan+0x88>
 801874a:	4610      	mov	r0, r2
 801874c:	9105      	str	r1, [sp, #20]
 801874e:	9204      	str	r2, [sp, #16]
 8018750:	f7ff fd84 	bl	801825c <__hexdig_fun>
 8018754:	2800      	cmp	r0, #0
 8018756:	d143      	bne.n	80187e0 <__hexnan+0xcc>
 8018758:	9a04      	ldr	r2, [sp, #16]
 801875a:	9905      	ldr	r1, [sp, #20]
 801875c:	2a20      	cmp	r2, #32
 801875e:	d818      	bhi.n	8018792 <__hexnan+0x7e>
 8018760:	9b02      	ldr	r3, [sp, #8]
 8018762:	459b      	cmp	fp, r3
 8018764:	dd13      	ble.n	801878e <__hexnan+0x7a>
 8018766:	454c      	cmp	r4, r9
 8018768:	d206      	bcs.n	8018778 <__hexnan+0x64>
 801876a:	2d07      	cmp	r5, #7
 801876c:	dc04      	bgt.n	8018778 <__hexnan+0x64>
 801876e:	462a      	mov	r2, r5
 8018770:	4649      	mov	r1, r9
 8018772:	4620      	mov	r0, r4
 8018774:	f7ff ffa8 	bl	80186c8 <L_shift>
 8018778:	4544      	cmp	r4, r8
 801877a:	d944      	bls.n	8018806 <__hexnan+0xf2>
 801877c:	2300      	movs	r3, #0
 801877e:	f1a4 0904 	sub.w	r9, r4, #4
 8018782:	f844 3c04 	str.w	r3, [r4, #-4]
 8018786:	f8cd b008 	str.w	fp, [sp, #8]
 801878a:	464c      	mov	r4, r9
 801878c:	461d      	mov	r5, r3
 801878e:	9903      	ldr	r1, [sp, #12]
 8018790:	e7d7      	b.n	8018742 <__hexnan+0x2e>
 8018792:	2a29      	cmp	r2, #41	; 0x29
 8018794:	d14a      	bne.n	801882c <__hexnan+0x118>
 8018796:	3102      	adds	r1, #2
 8018798:	f8ca 1000 	str.w	r1, [sl]
 801879c:	f1bb 0f00 	cmp.w	fp, #0
 80187a0:	d044      	beq.n	801882c <__hexnan+0x118>
 80187a2:	454c      	cmp	r4, r9
 80187a4:	d206      	bcs.n	80187b4 <__hexnan+0xa0>
 80187a6:	2d07      	cmp	r5, #7
 80187a8:	dc04      	bgt.n	80187b4 <__hexnan+0xa0>
 80187aa:	462a      	mov	r2, r5
 80187ac:	4649      	mov	r1, r9
 80187ae:	4620      	mov	r0, r4
 80187b0:	f7ff ff8a 	bl	80186c8 <L_shift>
 80187b4:	4544      	cmp	r4, r8
 80187b6:	d928      	bls.n	801880a <__hexnan+0xf6>
 80187b8:	4643      	mov	r3, r8
 80187ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80187be:	f843 2b04 	str.w	r2, [r3], #4
 80187c2:	42a6      	cmp	r6, r4
 80187c4:	d2f9      	bcs.n	80187ba <__hexnan+0xa6>
 80187c6:	2200      	movs	r2, #0
 80187c8:	f843 2b04 	str.w	r2, [r3], #4
 80187cc:	429e      	cmp	r6, r3
 80187ce:	d2fb      	bcs.n	80187c8 <__hexnan+0xb4>
 80187d0:	6833      	ldr	r3, [r6, #0]
 80187d2:	b91b      	cbnz	r3, 80187dc <__hexnan+0xc8>
 80187d4:	4546      	cmp	r6, r8
 80187d6:	d127      	bne.n	8018828 <__hexnan+0x114>
 80187d8:	2301      	movs	r3, #1
 80187da:	6033      	str	r3, [r6, #0]
 80187dc:	2005      	movs	r0, #5
 80187de:	e026      	b.n	801882e <__hexnan+0x11a>
 80187e0:	3501      	adds	r5, #1
 80187e2:	2d08      	cmp	r5, #8
 80187e4:	f10b 0b01 	add.w	fp, fp, #1
 80187e8:	dd06      	ble.n	80187f8 <__hexnan+0xe4>
 80187ea:	4544      	cmp	r4, r8
 80187ec:	d9cf      	bls.n	801878e <__hexnan+0x7a>
 80187ee:	2300      	movs	r3, #0
 80187f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80187f4:	2501      	movs	r5, #1
 80187f6:	3c04      	subs	r4, #4
 80187f8:	6822      	ldr	r2, [r4, #0]
 80187fa:	f000 000f 	and.w	r0, r0, #15
 80187fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018802:	6020      	str	r0, [r4, #0]
 8018804:	e7c3      	b.n	801878e <__hexnan+0x7a>
 8018806:	2508      	movs	r5, #8
 8018808:	e7c1      	b.n	801878e <__hexnan+0x7a>
 801880a:	9b01      	ldr	r3, [sp, #4]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d0df      	beq.n	80187d0 <__hexnan+0xbc>
 8018810:	f04f 32ff 	mov.w	r2, #4294967295
 8018814:	f1c3 0320 	rsb	r3, r3, #32
 8018818:	fa22 f303 	lsr.w	r3, r2, r3
 801881c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018820:	401a      	ands	r2, r3
 8018822:	f847 2c04 	str.w	r2, [r7, #-4]
 8018826:	e7d3      	b.n	80187d0 <__hexnan+0xbc>
 8018828:	3e04      	subs	r6, #4
 801882a:	e7d1      	b.n	80187d0 <__hexnan+0xbc>
 801882c:	2004      	movs	r0, #4
 801882e:	b007      	add	sp, #28
 8018830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018834 <__locale_ctype_ptr_l>:
 8018834:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018838:	4770      	bx	lr
	...

0801883c <__locale_ctype_ptr>:
 801883c:	4b04      	ldr	r3, [pc, #16]	; (8018850 <__locale_ctype_ptr+0x14>)
 801883e:	4a05      	ldr	r2, [pc, #20]	; (8018854 <__locale_ctype_ptr+0x18>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6a1b      	ldr	r3, [r3, #32]
 8018844:	2b00      	cmp	r3, #0
 8018846:	bf08      	it	eq
 8018848:	4613      	moveq	r3, r2
 801884a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801884e:	4770      	bx	lr
 8018850:	20000e60 	.word	0x20000e60
 8018854:	20000ec4 	.word	0x20000ec4

08018858 <__localeconv_l>:
 8018858:	30f0      	adds	r0, #240	; 0xf0
 801885a:	4770      	bx	lr

0801885c <_localeconv_r>:
 801885c:	4b04      	ldr	r3, [pc, #16]	; (8018870 <_localeconv_r+0x14>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	6a18      	ldr	r0, [r3, #32]
 8018862:	4b04      	ldr	r3, [pc, #16]	; (8018874 <_localeconv_r+0x18>)
 8018864:	2800      	cmp	r0, #0
 8018866:	bf08      	it	eq
 8018868:	4618      	moveq	r0, r3
 801886a:	30f0      	adds	r0, #240	; 0xf0
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop
 8018870:	20000e60 	.word	0x20000e60
 8018874:	20000ec4 	.word	0x20000ec4

08018878 <__ascii_mbtowc>:
 8018878:	b082      	sub	sp, #8
 801887a:	b901      	cbnz	r1, 801887e <__ascii_mbtowc+0x6>
 801887c:	a901      	add	r1, sp, #4
 801887e:	b142      	cbz	r2, 8018892 <__ascii_mbtowc+0x1a>
 8018880:	b14b      	cbz	r3, 8018896 <__ascii_mbtowc+0x1e>
 8018882:	7813      	ldrb	r3, [r2, #0]
 8018884:	600b      	str	r3, [r1, #0]
 8018886:	7812      	ldrb	r2, [r2, #0]
 8018888:	1c10      	adds	r0, r2, #0
 801888a:	bf18      	it	ne
 801888c:	2001      	movne	r0, #1
 801888e:	b002      	add	sp, #8
 8018890:	4770      	bx	lr
 8018892:	4610      	mov	r0, r2
 8018894:	e7fb      	b.n	801888e <__ascii_mbtowc+0x16>
 8018896:	f06f 0001 	mvn.w	r0, #1
 801889a:	e7f8      	b.n	801888e <__ascii_mbtowc+0x16>

0801889c <__malloc_lock>:
 801889c:	4770      	bx	lr

0801889e <__malloc_unlock>:
 801889e:	4770      	bx	lr

080188a0 <_Balloc>:
 80188a0:	b570      	push	{r4, r5, r6, lr}
 80188a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80188a4:	4604      	mov	r4, r0
 80188a6:	460e      	mov	r6, r1
 80188a8:	b93d      	cbnz	r5, 80188ba <_Balloc+0x1a>
 80188aa:	2010      	movs	r0, #16
 80188ac:	f7fc ffe0 	bl	8015870 <malloc>
 80188b0:	6260      	str	r0, [r4, #36]	; 0x24
 80188b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188b6:	6005      	str	r5, [r0, #0]
 80188b8:	60c5      	str	r5, [r0, #12]
 80188ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80188bc:	68eb      	ldr	r3, [r5, #12]
 80188be:	b183      	cbz	r3, 80188e2 <_Balloc+0x42>
 80188c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80188c8:	b9b8      	cbnz	r0, 80188fa <_Balloc+0x5a>
 80188ca:	2101      	movs	r1, #1
 80188cc:	fa01 f506 	lsl.w	r5, r1, r6
 80188d0:	1d6a      	adds	r2, r5, #5
 80188d2:	0092      	lsls	r2, r2, #2
 80188d4:	4620      	mov	r0, r4
 80188d6:	f000 fbe2 	bl	801909e <_calloc_r>
 80188da:	b160      	cbz	r0, 80188f6 <_Balloc+0x56>
 80188dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188e0:	e00e      	b.n	8018900 <_Balloc+0x60>
 80188e2:	2221      	movs	r2, #33	; 0x21
 80188e4:	2104      	movs	r1, #4
 80188e6:	4620      	mov	r0, r4
 80188e8:	f000 fbd9 	bl	801909e <_calloc_r>
 80188ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188ee:	60e8      	str	r0, [r5, #12]
 80188f0:	68db      	ldr	r3, [r3, #12]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d1e4      	bne.n	80188c0 <_Balloc+0x20>
 80188f6:	2000      	movs	r0, #0
 80188f8:	bd70      	pop	{r4, r5, r6, pc}
 80188fa:	6802      	ldr	r2, [r0, #0]
 80188fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018900:	2300      	movs	r3, #0
 8018902:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018906:	e7f7      	b.n	80188f8 <_Balloc+0x58>

08018908 <_Bfree>:
 8018908:	b570      	push	{r4, r5, r6, lr}
 801890a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801890c:	4606      	mov	r6, r0
 801890e:	460d      	mov	r5, r1
 8018910:	b93c      	cbnz	r4, 8018922 <_Bfree+0x1a>
 8018912:	2010      	movs	r0, #16
 8018914:	f7fc ffac 	bl	8015870 <malloc>
 8018918:	6270      	str	r0, [r6, #36]	; 0x24
 801891a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801891e:	6004      	str	r4, [r0, #0]
 8018920:	60c4      	str	r4, [r0, #12]
 8018922:	b13d      	cbz	r5, 8018934 <_Bfree+0x2c>
 8018924:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018926:	686a      	ldr	r2, [r5, #4]
 8018928:	68db      	ldr	r3, [r3, #12]
 801892a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801892e:	6029      	str	r1, [r5, #0]
 8018930:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018934:	bd70      	pop	{r4, r5, r6, pc}

08018936 <__multadd>:
 8018936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801893a:	690d      	ldr	r5, [r1, #16]
 801893c:	461f      	mov	r7, r3
 801893e:	4606      	mov	r6, r0
 8018940:	460c      	mov	r4, r1
 8018942:	f101 0c14 	add.w	ip, r1, #20
 8018946:	2300      	movs	r3, #0
 8018948:	f8dc 0000 	ldr.w	r0, [ip]
 801894c:	b281      	uxth	r1, r0
 801894e:	fb02 7101 	mla	r1, r2, r1, r7
 8018952:	0c0f      	lsrs	r7, r1, #16
 8018954:	0c00      	lsrs	r0, r0, #16
 8018956:	fb02 7000 	mla	r0, r2, r0, r7
 801895a:	b289      	uxth	r1, r1
 801895c:	3301      	adds	r3, #1
 801895e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018962:	429d      	cmp	r5, r3
 8018964:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018968:	f84c 1b04 	str.w	r1, [ip], #4
 801896c:	dcec      	bgt.n	8018948 <__multadd+0x12>
 801896e:	b1d7      	cbz	r7, 80189a6 <__multadd+0x70>
 8018970:	68a3      	ldr	r3, [r4, #8]
 8018972:	42ab      	cmp	r3, r5
 8018974:	dc12      	bgt.n	801899c <__multadd+0x66>
 8018976:	6861      	ldr	r1, [r4, #4]
 8018978:	4630      	mov	r0, r6
 801897a:	3101      	adds	r1, #1
 801897c:	f7ff ff90 	bl	80188a0 <_Balloc>
 8018980:	6922      	ldr	r2, [r4, #16]
 8018982:	3202      	adds	r2, #2
 8018984:	f104 010c 	add.w	r1, r4, #12
 8018988:	4680      	mov	r8, r0
 801898a:	0092      	lsls	r2, r2, #2
 801898c:	300c      	adds	r0, #12
 801898e:	f7fc ff7f 	bl	8015890 <memcpy>
 8018992:	4621      	mov	r1, r4
 8018994:	4630      	mov	r0, r6
 8018996:	f7ff ffb7 	bl	8018908 <_Bfree>
 801899a:	4644      	mov	r4, r8
 801899c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80189a0:	3501      	adds	r5, #1
 80189a2:	615f      	str	r7, [r3, #20]
 80189a4:	6125      	str	r5, [r4, #16]
 80189a6:	4620      	mov	r0, r4
 80189a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189ac <__s2b>:
 80189ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189b0:	460c      	mov	r4, r1
 80189b2:	4615      	mov	r5, r2
 80189b4:	461f      	mov	r7, r3
 80189b6:	2209      	movs	r2, #9
 80189b8:	3308      	adds	r3, #8
 80189ba:	4606      	mov	r6, r0
 80189bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80189c0:	2100      	movs	r1, #0
 80189c2:	2201      	movs	r2, #1
 80189c4:	429a      	cmp	r2, r3
 80189c6:	db20      	blt.n	8018a0a <__s2b+0x5e>
 80189c8:	4630      	mov	r0, r6
 80189ca:	f7ff ff69 	bl	80188a0 <_Balloc>
 80189ce:	9b08      	ldr	r3, [sp, #32]
 80189d0:	6143      	str	r3, [r0, #20]
 80189d2:	2d09      	cmp	r5, #9
 80189d4:	f04f 0301 	mov.w	r3, #1
 80189d8:	6103      	str	r3, [r0, #16]
 80189da:	dd19      	ble.n	8018a10 <__s2b+0x64>
 80189dc:	f104 0809 	add.w	r8, r4, #9
 80189e0:	46c1      	mov	r9, r8
 80189e2:	442c      	add	r4, r5
 80189e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80189e8:	4601      	mov	r1, r0
 80189ea:	3b30      	subs	r3, #48	; 0x30
 80189ec:	220a      	movs	r2, #10
 80189ee:	4630      	mov	r0, r6
 80189f0:	f7ff ffa1 	bl	8018936 <__multadd>
 80189f4:	45a1      	cmp	r9, r4
 80189f6:	d1f5      	bne.n	80189e4 <__s2b+0x38>
 80189f8:	eb08 0405 	add.w	r4, r8, r5
 80189fc:	3c08      	subs	r4, #8
 80189fe:	1b2d      	subs	r5, r5, r4
 8018a00:	1963      	adds	r3, r4, r5
 8018a02:	42bb      	cmp	r3, r7
 8018a04:	db07      	blt.n	8018a16 <__s2b+0x6a>
 8018a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a0a:	0052      	lsls	r2, r2, #1
 8018a0c:	3101      	adds	r1, #1
 8018a0e:	e7d9      	b.n	80189c4 <__s2b+0x18>
 8018a10:	340a      	adds	r4, #10
 8018a12:	2509      	movs	r5, #9
 8018a14:	e7f3      	b.n	80189fe <__s2b+0x52>
 8018a16:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a1a:	4601      	mov	r1, r0
 8018a1c:	3b30      	subs	r3, #48	; 0x30
 8018a1e:	220a      	movs	r2, #10
 8018a20:	4630      	mov	r0, r6
 8018a22:	f7ff ff88 	bl	8018936 <__multadd>
 8018a26:	e7eb      	b.n	8018a00 <__s2b+0x54>

08018a28 <__hi0bits>:
 8018a28:	0c02      	lsrs	r2, r0, #16
 8018a2a:	0412      	lsls	r2, r2, #16
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	b9b2      	cbnz	r2, 8018a5e <__hi0bits+0x36>
 8018a30:	0403      	lsls	r3, r0, #16
 8018a32:	2010      	movs	r0, #16
 8018a34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a38:	bf04      	itt	eq
 8018a3a:	021b      	lsleq	r3, r3, #8
 8018a3c:	3008      	addeq	r0, #8
 8018a3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a42:	bf04      	itt	eq
 8018a44:	011b      	lsleq	r3, r3, #4
 8018a46:	3004      	addeq	r0, #4
 8018a48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a4c:	bf04      	itt	eq
 8018a4e:	009b      	lsleq	r3, r3, #2
 8018a50:	3002      	addeq	r0, #2
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	db06      	blt.n	8018a64 <__hi0bits+0x3c>
 8018a56:	005b      	lsls	r3, r3, #1
 8018a58:	d503      	bpl.n	8018a62 <__hi0bits+0x3a>
 8018a5a:	3001      	adds	r0, #1
 8018a5c:	4770      	bx	lr
 8018a5e:	2000      	movs	r0, #0
 8018a60:	e7e8      	b.n	8018a34 <__hi0bits+0xc>
 8018a62:	2020      	movs	r0, #32
 8018a64:	4770      	bx	lr

08018a66 <__lo0bits>:
 8018a66:	6803      	ldr	r3, [r0, #0]
 8018a68:	f013 0207 	ands.w	r2, r3, #7
 8018a6c:	4601      	mov	r1, r0
 8018a6e:	d00b      	beq.n	8018a88 <__lo0bits+0x22>
 8018a70:	07da      	lsls	r2, r3, #31
 8018a72:	d423      	bmi.n	8018abc <__lo0bits+0x56>
 8018a74:	0798      	lsls	r0, r3, #30
 8018a76:	bf49      	itett	mi
 8018a78:	085b      	lsrmi	r3, r3, #1
 8018a7a:	089b      	lsrpl	r3, r3, #2
 8018a7c:	2001      	movmi	r0, #1
 8018a7e:	600b      	strmi	r3, [r1, #0]
 8018a80:	bf5c      	itt	pl
 8018a82:	600b      	strpl	r3, [r1, #0]
 8018a84:	2002      	movpl	r0, #2
 8018a86:	4770      	bx	lr
 8018a88:	b298      	uxth	r0, r3
 8018a8a:	b9a8      	cbnz	r0, 8018ab8 <__lo0bits+0x52>
 8018a8c:	0c1b      	lsrs	r3, r3, #16
 8018a8e:	2010      	movs	r0, #16
 8018a90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a94:	bf04      	itt	eq
 8018a96:	0a1b      	lsreq	r3, r3, #8
 8018a98:	3008      	addeq	r0, #8
 8018a9a:	071a      	lsls	r2, r3, #28
 8018a9c:	bf04      	itt	eq
 8018a9e:	091b      	lsreq	r3, r3, #4
 8018aa0:	3004      	addeq	r0, #4
 8018aa2:	079a      	lsls	r2, r3, #30
 8018aa4:	bf04      	itt	eq
 8018aa6:	089b      	lsreq	r3, r3, #2
 8018aa8:	3002      	addeq	r0, #2
 8018aaa:	07da      	lsls	r2, r3, #31
 8018aac:	d402      	bmi.n	8018ab4 <__lo0bits+0x4e>
 8018aae:	085b      	lsrs	r3, r3, #1
 8018ab0:	d006      	beq.n	8018ac0 <__lo0bits+0x5a>
 8018ab2:	3001      	adds	r0, #1
 8018ab4:	600b      	str	r3, [r1, #0]
 8018ab6:	4770      	bx	lr
 8018ab8:	4610      	mov	r0, r2
 8018aba:	e7e9      	b.n	8018a90 <__lo0bits+0x2a>
 8018abc:	2000      	movs	r0, #0
 8018abe:	4770      	bx	lr
 8018ac0:	2020      	movs	r0, #32
 8018ac2:	4770      	bx	lr

08018ac4 <__i2b>:
 8018ac4:	b510      	push	{r4, lr}
 8018ac6:	460c      	mov	r4, r1
 8018ac8:	2101      	movs	r1, #1
 8018aca:	f7ff fee9 	bl	80188a0 <_Balloc>
 8018ace:	2201      	movs	r2, #1
 8018ad0:	6144      	str	r4, [r0, #20]
 8018ad2:	6102      	str	r2, [r0, #16]
 8018ad4:	bd10      	pop	{r4, pc}

08018ad6 <__multiply>:
 8018ad6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ada:	4614      	mov	r4, r2
 8018adc:	690a      	ldr	r2, [r1, #16]
 8018ade:	6923      	ldr	r3, [r4, #16]
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	bfb8      	it	lt
 8018ae4:	460b      	movlt	r3, r1
 8018ae6:	4688      	mov	r8, r1
 8018ae8:	bfbc      	itt	lt
 8018aea:	46a0      	movlt	r8, r4
 8018aec:	461c      	movlt	r4, r3
 8018aee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018af2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018afa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018afe:	eb07 0609 	add.w	r6, r7, r9
 8018b02:	42b3      	cmp	r3, r6
 8018b04:	bfb8      	it	lt
 8018b06:	3101      	addlt	r1, #1
 8018b08:	f7ff feca 	bl	80188a0 <_Balloc>
 8018b0c:	f100 0514 	add.w	r5, r0, #20
 8018b10:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b14:	462b      	mov	r3, r5
 8018b16:	2200      	movs	r2, #0
 8018b18:	4573      	cmp	r3, lr
 8018b1a:	d316      	bcc.n	8018b4a <__multiply+0x74>
 8018b1c:	f104 0214 	add.w	r2, r4, #20
 8018b20:	f108 0114 	add.w	r1, r8, #20
 8018b24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b2c:	9300      	str	r3, [sp, #0]
 8018b2e:	9b00      	ldr	r3, [sp, #0]
 8018b30:	9201      	str	r2, [sp, #4]
 8018b32:	4293      	cmp	r3, r2
 8018b34:	d80c      	bhi.n	8018b50 <__multiply+0x7a>
 8018b36:	2e00      	cmp	r6, #0
 8018b38:	dd03      	ble.n	8018b42 <__multiply+0x6c>
 8018b3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d05d      	beq.n	8018bfe <__multiply+0x128>
 8018b42:	6106      	str	r6, [r0, #16]
 8018b44:	b003      	add	sp, #12
 8018b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b4a:	f843 2b04 	str.w	r2, [r3], #4
 8018b4e:	e7e3      	b.n	8018b18 <__multiply+0x42>
 8018b50:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b54:	f1bb 0f00 	cmp.w	fp, #0
 8018b58:	d023      	beq.n	8018ba2 <__multiply+0xcc>
 8018b5a:	4689      	mov	r9, r1
 8018b5c:	46ac      	mov	ip, r5
 8018b5e:	f04f 0800 	mov.w	r8, #0
 8018b62:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b66:	f8dc a000 	ldr.w	sl, [ip]
 8018b6a:	b2a3      	uxth	r3, r4
 8018b6c:	fa1f fa8a 	uxth.w	sl, sl
 8018b70:	fb0b a303 	mla	r3, fp, r3, sl
 8018b74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b78:	f8dc 4000 	ldr.w	r4, [ip]
 8018b7c:	4443      	add	r3, r8
 8018b7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b82:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b8a:	46e2      	mov	sl, ip
 8018b8c:	b29b      	uxth	r3, r3
 8018b8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b92:	454f      	cmp	r7, r9
 8018b94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b98:	f84a 3b04 	str.w	r3, [sl], #4
 8018b9c:	d82b      	bhi.n	8018bf6 <__multiply+0x120>
 8018b9e:	f8cc 8004 	str.w	r8, [ip, #4]
 8018ba2:	9b01      	ldr	r3, [sp, #4]
 8018ba4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ba8:	3204      	adds	r2, #4
 8018baa:	f1ba 0f00 	cmp.w	sl, #0
 8018bae:	d020      	beq.n	8018bf2 <__multiply+0x11c>
 8018bb0:	682b      	ldr	r3, [r5, #0]
 8018bb2:	4689      	mov	r9, r1
 8018bb4:	46a8      	mov	r8, r5
 8018bb6:	f04f 0b00 	mov.w	fp, #0
 8018bba:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bbe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018bc2:	fb0a 440c 	mla	r4, sl, ip, r4
 8018bc6:	445c      	add	r4, fp
 8018bc8:	46c4      	mov	ip, r8
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bd0:	f84c 3b04 	str.w	r3, [ip], #4
 8018bd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bd8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bdc:	0c1b      	lsrs	r3, r3, #16
 8018bde:	fb0a b303 	mla	r3, sl, r3, fp
 8018be2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018be6:	454f      	cmp	r7, r9
 8018be8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018bec:	d805      	bhi.n	8018bfa <__multiply+0x124>
 8018bee:	f8c8 3004 	str.w	r3, [r8, #4]
 8018bf2:	3504      	adds	r5, #4
 8018bf4:	e79b      	b.n	8018b2e <__multiply+0x58>
 8018bf6:	46d4      	mov	ip, sl
 8018bf8:	e7b3      	b.n	8018b62 <__multiply+0x8c>
 8018bfa:	46e0      	mov	r8, ip
 8018bfc:	e7dd      	b.n	8018bba <__multiply+0xe4>
 8018bfe:	3e01      	subs	r6, #1
 8018c00:	e799      	b.n	8018b36 <__multiply+0x60>
	...

08018c04 <__pow5mult>:
 8018c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c08:	4615      	mov	r5, r2
 8018c0a:	f012 0203 	ands.w	r2, r2, #3
 8018c0e:	4606      	mov	r6, r0
 8018c10:	460f      	mov	r7, r1
 8018c12:	d007      	beq.n	8018c24 <__pow5mult+0x20>
 8018c14:	3a01      	subs	r2, #1
 8018c16:	4c21      	ldr	r4, [pc, #132]	; (8018c9c <__pow5mult+0x98>)
 8018c18:	2300      	movs	r3, #0
 8018c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c1e:	f7ff fe8a 	bl	8018936 <__multadd>
 8018c22:	4607      	mov	r7, r0
 8018c24:	10ad      	asrs	r5, r5, #2
 8018c26:	d035      	beq.n	8018c94 <__pow5mult+0x90>
 8018c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c2a:	b93c      	cbnz	r4, 8018c3c <__pow5mult+0x38>
 8018c2c:	2010      	movs	r0, #16
 8018c2e:	f7fc fe1f 	bl	8015870 <malloc>
 8018c32:	6270      	str	r0, [r6, #36]	; 0x24
 8018c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c38:	6004      	str	r4, [r0, #0]
 8018c3a:	60c4      	str	r4, [r0, #12]
 8018c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c44:	b94c      	cbnz	r4, 8018c5a <__pow5mult+0x56>
 8018c46:	f240 2171 	movw	r1, #625	; 0x271
 8018c4a:	4630      	mov	r0, r6
 8018c4c:	f7ff ff3a 	bl	8018ac4 <__i2b>
 8018c50:	2300      	movs	r3, #0
 8018c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c56:	4604      	mov	r4, r0
 8018c58:	6003      	str	r3, [r0, #0]
 8018c5a:	f04f 0800 	mov.w	r8, #0
 8018c5e:	07eb      	lsls	r3, r5, #31
 8018c60:	d50a      	bpl.n	8018c78 <__pow5mult+0x74>
 8018c62:	4639      	mov	r1, r7
 8018c64:	4622      	mov	r2, r4
 8018c66:	4630      	mov	r0, r6
 8018c68:	f7ff ff35 	bl	8018ad6 <__multiply>
 8018c6c:	4639      	mov	r1, r7
 8018c6e:	4681      	mov	r9, r0
 8018c70:	4630      	mov	r0, r6
 8018c72:	f7ff fe49 	bl	8018908 <_Bfree>
 8018c76:	464f      	mov	r7, r9
 8018c78:	106d      	asrs	r5, r5, #1
 8018c7a:	d00b      	beq.n	8018c94 <__pow5mult+0x90>
 8018c7c:	6820      	ldr	r0, [r4, #0]
 8018c7e:	b938      	cbnz	r0, 8018c90 <__pow5mult+0x8c>
 8018c80:	4622      	mov	r2, r4
 8018c82:	4621      	mov	r1, r4
 8018c84:	4630      	mov	r0, r6
 8018c86:	f7ff ff26 	bl	8018ad6 <__multiply>
 8018c8a:	6020      	str	r0, [r4, #0]
 8018c8c:	f8c0 8000 	str.w	r8, [r0]
 8018c90:	4604      	mov	r4, r0
 8018c92:	e7e4      	b.n	8018c5e <__pow5mult+0x5a>
 8018c94:	4638      	mov	r0, r7
 8018c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c9a:	bf00      	nop
 8018c9c:	0801bd80 	.word	0x0801bd80

08018ca0 <__lshift>:
 8018ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ca4:	460c      	mov	r4, r1
 8018ca6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018caa:	6923      	ldr	r3, [r4, #16]
 8018cac:	6849      	ldr	r1, [r1, #4]
 8018cae:	eb0a 0903 	add.w	r9, sl, r3
 8018cb2:	68a3      	ldr	r3, [r4, #8]
 8018cb4:	4607      	mov	r7, r0
 8018cb6:	4616      	mov	r6, r2
 8018cb8:	f109 0501 	add.w	r5, r9, #1
 8018cbc:	42ab      	cmp	r3, r5
 8018cbe:	db32      	blt.n	8018d26 <__lshift+0x86>
 8018cc0:	4638      	mov	r0, r7
 8018cc2:	f7ff fded 	bl	80188a0 <_Balloc>
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	4680      	mov	r8, r0
 8018cca:	f100 0114 	add.w	r1, r0, #20
 8018cce:	461a      	mov	r2, r3
 8018cd0:	4553      	cmp	r3, sl
 8018cd2:	db2b      	blt.n	8018d2c <__lshift+0x8c>
 8018cd4:	6920      	ldr	r0, [r4, #16]
 8018cd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cda:	f104 0314 	add.w	r3, r4, #20
 8018cde:	f016 021f 	ands.w	r2, r6, #31
 8018ce2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ce6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018cea:	d025      	beq.n	8018d38 <__lshift+0x98>
 8018cec:	f1c2 0e20 	rsb	lr, r2, #32
 8018cf0:	2000      	movs	r0, #0
 8018cf2:	681e      	ldr	r6, [r3, #0]
 8018cf4:	468a      	mov	sl, r1
 8018cf6:	4096      	lsls	r6, r2
 8018cf8:	4330      	orrs	r0, r6
 8018cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8018cfe:	f853 0b04 	ldr.w	r0, [r3], #4
 8018d02:	459c      	cmp	ip, r3
 8018d04:	fa20 f00e 	lsr.w	r0, r0, lr
 8018d08:	d814      	bhi.n	8018d34 <__lshift+0x94>
 8018d0a:	6048      	str	r0, [r1, #4]
 8018d0c:	b108      	cbz	r0, 8018d12 <__lshift+0x72>
 8018d0e:	f109 0502 	add.w	r5, r9, #2
 8018d12:	3d01      	subs	r5, #1
 8018d14:	4638      	mov	r0, r7
 8018d16:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d1a:	4621      	mov	r1, r4
 8018d1c:	f7ff fdf4 	bl	8018908 <_Bfree>
 8018d20:	4640      	mov	r0, r8
 8018d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d26:	3101      	adds	r1, #1
 8018d28:	005b      	lsls	r3, r3, #1
 8018d2a:	e7c7      	b.n	8018cbc <__lshift+0x1c>
 8018d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d30:	3301      	adds	r3, #1
 8018d32:	e7cd      	b.n	8018cd0 <__lshift+0x30>
 8018d34:	4651      	mov	r1, sl
 8018d36:	e7dc      	b.n	8018cf2 <__lshift+0x52>
 8018d38:	3904      	subs	r1, #4
 8018d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d42:	459c      	cmp	ip, r3
 8018d44:	d8f9      	bhi.n	8018d3a <__lshift+0x9a>
 8018d46:	e7e4      	b.n	8018d12 <__lshift+0x72>

08018d48 <__mcmp>:
 8018d48:	6903      	ldr	r3, [r0, #16]
 8018d4a:	690a      	ldr	r2, [r1, #16]
 8018d4c:	1a9b      	subs	r3, r3, r2
 8018d4e:	b530      	push	{r4, r5, lr}
 8018d50:	d10c      	bne.n	8018d6c <__mcmp+0x24>
 8018d52:	0092      	lsls	r2, r2, #2
 8018d54:	3014      	adds	r0, #20
 8018d56:	3114      	adds	r1, #20
 8018d58:	1884      	adds	r4, r0, r2
 8018d5a:	4411      	add	r1, r2
 8018d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d64:	4295      	cmp	r5, r2
 8018d66:	d003      	beq.n	8018d70 <__mcmp+0x28>
 8018d68:	d305      	bcc.n	8018d76 <__mcmp+0x2e>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	bd30      	pop	{r4, r5, pc}
 8018d70:	42a0      	cmp	r0, r4
 8018d72:	d3f3      	bcc.n	8018d5c <__mcmp+0x14>
 8018d74:	e7fa      	b.n	8018d6c <__mcmp+0x24>
 8018d76:	f04f 33ff 	mov.w	r3, #4294967295
 8018d7a:	e7f7      	b.n	8018d6c <__mcmp+0x24>

08018d7c <__mdiff>:
 8018d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d80:	460d      	mov	r5, r1
 8018d82:	4607      	mov	r7, r0
 8018d84:	4611      	mov	r1, r2
 8018d86:	4628      	mov	r0, r5
 8018d88:	4614      	mov	r4, r2
 8018d8a:	f7ff ffdd 	bl	8018d48 <__mcmp>
 8018d8e:	1e06      	subs	r6, r0, #0
 8018d90:	d108      	bne.n	8018da4 <__mdiff+0x28>
 8018d92:	4631      	mov	r1, r6
 8018d94:	4638      	mov	r0, r7
 8018d96:	f7ff fd83 	bl	80188a0 <_Balloc>
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018da4:	bfa4      	itt	ge
 8018da6:	4623      	movge	r3, r4
 8018da8:	462c      	movge	r4, r5
 8018daa:	4638      	mov	r0, r7
 8018dac:	6861      	ldr	r1, [r4, #4]
 8018dae:	bfa6      	itte	ge
 8018db0:	461d      	movge	r5, r3
 8018db2:	2600      	movge	r6, #0
 8018db4:	2601      	movlt	r6, #1
 8018db6:	f7ff fd73 	bl	80188a0 <_Balloc>
 8018dba:	692b      	ldr	r3, [r5, #16]
 8018dbc:	60c6      	str	r6, [r0, #12]
 8018dbe:	6926      	ldr	r6, [r4, #16]
 8018dc0:	f105 0914 	add.w	r9, r5, #20
 8018dc4:	f104 0214 	add.w	r2, r4, #20
 8018dc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018dcc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018dd0:	f100 0514 	add.w	r5, r0, #20
 8018dd4:	f04f 0e00 	mov.w	lr, #0
 8018dd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018ddc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018de0:	fa1e f18a 	uxtah	r1, lr, sl
 8018de4:	b2a3      	uxth	r3, r4
 8018de6:	1ac9      	subs	r1, r1, r3
 8018de8:	0c23      	lsrs	r3, r4, #16
 8018dea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018dee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018df2:	b289      	uxth	r1, r1
 8018df4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018df8:	45c8      	cmp	r8, r9
 8018dfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018dfe:	4694      	mov	ip, r2
 8018e00:	f845 3b04 	str.w	r3, [r5], #4
 8018e04:	d8e8      	bhi.n	8018dd8 <__mdiff+0x5c>
 8018e06:	45bc      	cmp	ip, r7
 8018e08:	d304      	bcc.n	8018e14 <__mdiff+0x98>
 8018e0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018e0e:	b183      	cbz	r3, 8018e32 <__mdiff+0xb6>
 8018e10:	6106      	str	r6, [r0, #16]
 8018e12:	e7c5      	b.n	8018da0 <__mdiff+0x24>
 8018e14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e18:	fa1e f381 	uxtah	r3, lr, r1
 8018e1c:	141a      	asrs	r2, r3, #16
 8018e1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e22:	b29b      	uxth	r3, r3
 8018e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e2c:	f845 3b04 	str.w	r3, [r5], #4
 8018e30:	e7e9      	b.n	8018e06 <__mdiff+0x8a>
 8018e32:	3e01      	subs	r6, #1
 8018e34:	e7e9      	b.n	8018e0a <__mdiff+0x8e>
	...

08018e38 <__ulp>:
 8018e38:	4b12      	ldr	r3, [pc, #72]	; (8018e84 <__ulp+0x4c>)
 8018e3a:	ee10 2a90 	vmov	r2, s1
 8018e3e:	401a      	ands	r2, r3
 8018e40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	dd04      	ble.n	8018e52 <__ulp+0x1a>
 8018e48:	2000      	movs	r0, #0
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	ec41 0b10 	vmov	d0, r0, r1
 8018e50:	4770      	bx	lr
 8018e52:	425b      	negs	r3, r3
 8018e54:	151b      	asrs	r3, r3, #20
 8018e56:	2b13      	cmp	r3, #19
 8018e58:	f04f 0000 	mov.w	r0, #0
 8018e5c:	f04f 0100 	mov.w	r1, #0
 8018e60:	dc04      	bgt.n	8018e6c <__ulp+0x34>
 8018e62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e66:	fa42 f103 	asr.w	r1, r2, r3
 8018e6a:	e7ef      	b.n	8018e4c <__ulp+0x14>
 8018e6c:	3b14      	subs	r3, #20
 8018e6e:	2b1e      	cmp	r3, #30
 8018e70:	f04f 0201 	mov.w	r2, #1
 8018e74:	bfda      	itte	le
 8018e76:	f1c3 031f 	rsble	r3, r3, #31
 8018e7a:	fa02 f303 	lslle.w	r3, r2, r3
 8018e7e:	4613      	movgt	r3, r2
 8018e80:	4618      	mov	r0, r3
 8018e82:	e7e3      	b.n	8018e4c <__ulp+0x14>
 8018e84:	7ff00000 	.word	0x7ff00000

08018e88 <__b2d>:
 8018e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e8a:	6905      	ldr	r5, [r0, #16]
 8018e8c:	f100 0714 	add.w	r7, r0, #20
 8018e90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e94:	1f2e      	subs	r6, r5, #4
 8018e96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	f7ff fdc4 	bl	8018a28 <__hi0bits>
 8018ea0:	f1c0 0320 	rsb	r3, r0, #32
 8018ea4:	280a      	cmp	r0, #10
 8018ea6:	600b      	str	r3, [r1, #0]
 8018ea8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018f20 <__b2d+0x98>
 8018eac:	dc14      	bgt.n	8018ed8 <__b2d+0x50>
 8018eae:	f1c0 0e0b 	rsb	lr, r0, #11
 8018eb2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018eb6:	42b7      	cmp	r7, r6
 8018eb8:	ea41 030c 	orr.w	r3, r1, ip
 8018ebc:	bf34      	ite	cc
 8018ebe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ec2:	2100      	movcs	r1, #0
 8018ec4:	3015      	adds	r0, #21
 8018ec6:	fa04 f000 	lsl.w	r0, r4, r0
 8018eca:	fa21 f10e 	lsr.w	r1, r1, lr
 8018ece:	ea40 0201 	orr.w	r2, r0, r1
 8018ed2:	ec43 2b10 	vmov	d0, r2, r3
 8018ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ed8:	42b7      	cmp	r7, r6
 8018eda:	bf3a      	itte	cc
 8018edc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018ee0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ee4:	2100      	movcs	r1, #0
 8018ee6:	380b      	subs	r0, #11
 8018ee8:	d015      	beq.n	8018f16 <__b2d+0x8e>
 8018eea:	4084      	lsls	r4, r0
 8018eec:	f1c0 0520 	rsb	r5, r0, #32
 8018ef0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018ef4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ef8:	42be      	cmp	r6, r7
 8018efa:	fa21 fc05 	lsr.w	ip, r1, r5
 8018efe:	ea44 030c 	orr.w	r3, r4, ip
 8018f02:	bf8c      	ite	hi
 8018f04:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018f08:	2400      	movls	r4, #0
 8018f0a:	fa01 f000 	lsl.w	r0, r1, r0
 8018f0e:	40ec      	lsrs	r4, r5
 8018f10:	ea40 0204 	orr.w	r2, r0, r4
 8018f14:	e7dd      	b.n	8018ed2 <__b2d+0x4a>
 8018f16:	ea44 030c 	orr.w	r3, r4, ip
 8018f1a:	460a      	mov	r2, r1
 8018f1c:	e7d9      	b.n	8018ed2 <__b2d+0x4a>
 8018f1e:	bf00      	nop
 8018f20:	3ff00000 	.word	0x3ff00000

08018f24 <__d2b>:
 8018f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f28:	460e      	mov	r6, r1
 8018f2a:	2101      	movs	r1, #1
 8018f2c:	ec59 8b10 	vmov	r8, r9, d0
 8018f30:	4615      	mov	r5, r2
 8018f32:	f7ff fcb5 	bl	80188a0 <_Balloc>
 8018f36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f3a:	4607      	mov	r7, r0
 8018f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f40:	bb34      	cbnz	r4, 8018f90 <__d2b+0x6c>
 8018f42:	9301      	str	r3, [sp, #4]
 8018f44:	f1b8 0300 	subs.w	r3, r8, #0
 8018f48:	d027      	beq.n	8018f9a <__d2b+0x76>
 8018f4a:	a802      	add	r0, sp, #8
 8018f4c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f50:	f7ff fd89 	bl	8018a66 <__lo0bits>
 8018f54:	9900      	ldr	r1, [sp, #0]
 8018f56:	b1f0      	cbz	r0, 8018f96 <__d2b+0x72>
 8018f58:	9a01      	ldr	r2, [sp, #4]
 8018f5a:	f1c0 0320 	rsb	r3, r0, #32
 8018f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f62:	430b      	orrs	r3, r1
 8018f64:	40c2      	lsrs	r2, r0
 8018f66:	617b      	str	r3, [r7, #20]
 8018f68:	9201      	str	r2, [sp, #4]
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	61bb      	str	r3, [r7, #24]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	bf14      	ite	ne
 8018f72:	2102      	movne	r1, #2
 8018f74:	2101      	moveq	r1, #1
 8018f76:	6139      	str	r1, [r7, #16]
 8018f78:	b1c4      	cbz	r4, 8018fac <__d2b+0x88>
 8018f7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f7e:	4404      	add	r4, r0
 8018f80:	6034      	str	r4, [r6, #0]
 8018f82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f86:	6028      	str	r0, [r5, #0]
 8018f88:	4638      	mov	r0, r7
 8018f8a:	b003      	add	sp, #12
 8018f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f94:	e7d5      	b.n	8018f42 <__d2b+0x1e>
 8018f96:	6179      	str	r1, [r7, #20]
 8018f98:	e7e7      	b.n	8018f6a <__d2b+0x46>
 8018f9a:	a801      	add	r0, sp, #4
 8018f9c:	f7ff fd63 	bl	8018a66 <__lo0bits>
 8018fa0:	9b01      	ldr	r3, [sp, #4]
 8018fa2:	617b      	str	r3, [r7, #20]
 8018fa4:	2101      	movs	r1, #1
 8018fa6:	6139      	str	r1, [r7, #16]
 8018fa8:	3020      	adds	r0, #32
 8018faa:	e7e5      	b.n	8018f78 <__d2b+0x54>
 8018fac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fb4:	6030      	str	r0, [r6, #0]
 8018fb6:	6918      	ldr	r0, [r3, #16]
 8018fb8:	f7ff fd36 	bl	8018a28 <__hi0bits>
 8018fbc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018fc0:	e7e1      	b.n	8018f86 <__d2b+0x62>

08018fc2 <__ratio>:
 8018fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc6:	4688      	mov	r8, r1
 8018fc8:	4669      	mov	r1, sp
 8018fca:	4681      	mov	r9, r0
 8018fcc:	f7ff ff5c 	bl	8018e88 <__b2d>
 8018fd0:	a901      	add	r1, sp, #4
 8018fd2:	4640      	mov	r0, r8
 8018fd4:	ec57 6b10 	vmov	r6, r7, d0
 8018fd8:	f7ff ff56 	bl	8018e88 <__b2d>
 8018fdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018fe0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018fe4:	eba3 0c02 	sub.w	ip, r3, r2
 8018fe8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018fec:	1a9b      	subs	r3, r3, r2
 8018fee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018ff2:	ec5b ab10 	vmov	sl, fp, d0
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	bfce      	itee	gt
 8018ffa:	463a      	movgt	r2, r7
 8018ffc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019000:	465a      	movle	r2, fp
 8019002:	4659      	mov	r1, fp
 8019004:	463d      	mov	r5, r7
 8019006:	bfd4      	ite	le
 8019008:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801900c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019010:	4630      	mov	r0, r6
 8019012:	ee10 2a10 	vmov	r2, s0
 8019016:	460b      	mov	r3, r1
 8019018:	4629      	mov	r1, r5
 801901a:	f7e7 fc27 	bl	800086c <__aeabi_ddiv>
 801901e:	ec41 0b10 	vmov	d0, r0, r1
 8019022:	b003      	add	sp, #12
 8019024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019028 <__copybits>:
 8019028:	3901      	subs	r1, #1
 801902a:	b510      	push	{r4, lr}
 801902c:	1149      	asrs	r1, r1, #5
 801902e:	6914      	ldr	r4, [r2, #16]
 8019030:	3101      	adds	r1, #1
 8019032:	f102 0314 	add.w	r3, r2, #20
 8019036:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801903a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801903e:	42a3      	cmp	r3, r4
 8019040:	4602      	mov	r2, r0
 8019042:	d303      	bcc.n	801904c <__copybits+0x24>
 8019044:	2300      	movs	r3, #0
 8019046:	428a      	cmp	r2, r1
 8019048:	d305      	bcc.n	8019056 <__copybits+0x2e>
 801904a:	bd10      	pop	{r4, pc}
 801904c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019050:	f840 2b04 	str.w	r2, [r0], #4
 8019054:	e7f3      	b.n	801903e <__copybits+0x16>
 8019056:	f842 3b04 	str.w	r3, [r2], #4
 801905a:	e7f4      	b.n	8019046 <__copybits+0x1e>

0801905c <__any_on>:
 801905c:	f100 0214 	add.w	r2, r0, #20
 8019060:	6900      	ldr	r0, [r0, #16]
 8019062:	114b      	asrs	r3, r1, #5
 8019064:	4298      	cmp	r0, r3
 8019066:	b510      	push	{r4, lr}
 8019068:	db11      	blt.n	801908e <__any_on+0x32>
 801906a:	dd0a      	ble.n	8019082 <__any_on+0x26>
 801906c:	f011 011f 	ands.w	r1, r1, #31
 8019070:	d007      	beq.n	8019082 <__any_on+0x26>
 8019072:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019076:	fa24 f001 	lsr.w	r0, r4, r1
 801907a:	fa00 f101 	lsl.w	r1, r0, r1
 801907e:	428c      	cmp	r4, r1
 8019080:	d10b      	bne.n	801909a <__any_on+0x3e>
 8019082:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019086:	4293      	cmp	r3, r2
 8019088:	d803      	bhi.n	8019092 <__any_on+0x36>
 801908a:	2000      	movs	r0, #0
 801908c:	bd10      	pop	{r4, pc}
 801908e:	4603      	mov	r3, r0
 8019090:	e7f7      	b.n	8019082 <__any_on+0x26>
 8019092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019096:	2900      	cmp	r1, #0
 8019098:	d0f5      	beq.n	8019086 <__any_on+0x2a>
 801909a:	2001      	movs	r0, #1
 801909c:	e7f6      	b.n	801908c <__any_on+0x30>

0801909e <_calloc_r>:
 801909e:	b538      	push	{r3, r4, r5, lr}
 80190a0:	fb02 f401 	mul.w	r4, r2, r1
 80190a4:	4621      	mov	r1, r4
 80190a6:	f7fc fc6d 	bl	8015984 <_malloc_r>
 80190aa:	4605      	mov	r5, r0
 80190ac:	b118      	cbz	r0, 80190b6 <_calloc_r+0x18>
 80190ae:	4622      	mov	r2, r4
 80190b0:	2100      	movs	r1, #0
 80190b2:	f7fc fc11 	bl	80158d8 <memset>
 80190b6:	4628      	mov	r0, r5
 80190b8:	bd38      	pop	{r3, r4, r5, pc}

080190ba <__ssputs_r>:
 80190ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190be:	688e      	ldr	r6, [r1, #8]
 80190c0:	429e      	cmp	r6, r3
 80190c2:	4682      	mov	sl, r0
 80190c4:	460c      	mov	r4, r1
 80190c6:	4690      	mov	r8, r2
 80190c8:	4699      	mov	r9, r3
 80190ca:	d837      	bhi.n	801913c <__ssputs_r+0x82>
 80190cc:	898a      	ldrh	r2, [r1, #12]
 80190ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80190d2:	d031      	beq.n	8019138 <__ssputs_r+0x7e>
 80190d4:	6825      	ldr	r5, [r4, #0]
 80190d6:	6909      	ldr	r1, [r1, #16]
 80190d8:	1a6f      	subs	r7, r5, r1
 80190da:	6965      	ldr	r5, [r4, #20]
 80190dc:	2302      	movs	r3, #2
 80190de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190e2:	fb95 f5f3 	sdiv	r5, r5, r3
 80190e6:	f109 0301 	add.w	r3, r9, #1
 80190ea:	443b      	add	r3, r7
 80190ec:	429d      	cmp	r5, r3
 80190ee:	bf38      	it	cc
 80190f0:	461d      	movcc	r5, r3
 80190f2:	0553      	lsls	r3, r2, #21
 80190f4:	d530      	bpl.n	8019158 <__ssputs_r+0x9e>
 80190f6:	4629      	mov	r1, r5
 80190f8:	f7fc fc44 	bl	8015984 <_malloc_r>
 80190fc:	4606      	mov	r6, r0
 80190fe:	b950      	cbnz	r0, 8019116 <__ssputs_r+0x5c>
 8019100:	230c      	movs	r3, #12
 8019102:	f8ca 3000 	str.w	r3, [sl]
 8019106:	89a3      	ldrh	r3, [r4, #12]
 8019108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801910c:	81a3      	strh	r3, [r4, #12]
 801910e:	f04f 30ff 	mov.w	r0, #4294967295
 8019112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019116:	463a      	mov	r2, r7
 8019118:	6921      	ldr	r1, [r4, #16]
 801911a:	f7fc fbb9 	bl	8015890 <memcpy>
 801911e:	89a3      	ldrh	r3, [r4, #12]
 8019120:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019128:	81a3      	strh	r3, [r4, #12]
 801912a:	6126      	str	r6, [r4, #16]
 801912c:	6165      	str	r5, [r4, #20]
 801912e:	443e      	add	r6, r7
 8019130:	1bed      	subs	r5, r5, r7
 8019132:	6026      	str	r6, [r4, #0]
 8019134:	60a5      	str	r5, [r4, #8]
 8019136:	464e      	mov	r6, r9
 8019138:	454e      	cmp	r6, r9
 801913a:	d900      	bls.n	801913e <__ssputs_r+0x84>
 801913c:	464e      	mov	r6, r9
 801913e:	4632      	mov	r2, r6
 8019140:	4641      	mov	r1, r8
 8019142:	6820      	ldr	r0, [r4, #0]
 8019144:	f7fc fbaf 	bl	80158a6 <memmove>
 8019148:	68a3      	ldr	r3, [r4, #8]
 801914a:	1b9b      	subs	r3, r3, r6
 801914c:	60a3      	str	r3, [r4, #8]
 801914e:	6823      	ldr	r3, [r4, #0]
 8019150:	441e      	add	r6, r3
 8019152:	6026      	str	r6, [r4, #0]
 8019154:	2000      	movs	r0, #0
 8019156:	e7dc      	b.n	8019112 <__ssputs_r+0x58>
 8019158:	462a      	mov	r2, r5
 801915a:	f000 fd1a 	bl	8019b92 <_realloc_r>
 801915e:	4606      	mov	r6, r0
 8019160:	2800      	cmp	r0, #0
 8019162:	d1e2      	bne.n	801912a <__ssputs_r+0x70>
 8019164:	6921      	ldr	r1, [r4, #16]
 8019166:	4650      	mov	r0, sl
 8019168:	f7fc fbbe 	bl	80158e8 <_free_r>
 801916c:	e7c8      	b.n	8019100 <__ssputs_r+0x46>
	...

08019170 <_svfiprintf_r>:
 8019170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019174:	461d      	mov	r5, r3
 8019176:	898b      	ldrh	r3, [r1, #12]
 8019178:	061f      	lsls	r7, r3, #24
 801917a:	b09d      	sub	sp, #116	; 0x74
 801917c:	4680      	mov	r8, r0
 801917e:	460c      	mov	r4, r1
 8019180:	4616      	mov	r6, r2
 8019182:	d50f      	bpl.n	80191a4 <_svfiprintf_r+0x34>
 8019184:	690b      	ldr	r3, [r1, #16]
 8019186:	b96b      	cbnz	r3, 80191a4 <_svfiprintf_r+0x34>
 8019188:	2140      	movs	r1, #64	; 0x40
 801918a:	f7fc fbfb 	bl	8015984 <_malloc_r>
 801918e:	6020      	str	r0, [r4, #0]
 8019190:	6120      	str	r0, [r4, #16]
 8019192:	b928      	cbnz	r0, 80191a0 <_svfiprintf_r+0x30>
 8019194:	230c      	movs	r3, #12
 8019196:	f8c8 3000 	str.w	r3, [r8]
 801919a:	f04f 30ff 	mov.w	r0, #4294967295
 801919e:	e0c8      	b.n	8019332 <_svfiprintf_r+0x1c2>
 80191a0:	2340      	movs	r3, #64	; 0x40
 80191a2:	6163      	str	r3, [r4, #20]
 80191a4:	2300      	movs	r3, #0
 80191a6:	9309      	str	r3, [sp, #36]	; 0x24
 80191a8:	2320      	movs	r3, #32
 80191aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191ae:	2330      	movs	r3, #48	; 0x30
 80191b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191b4:	9503      	str	r5, [sp, #12]
 80191b6:	f04f 0b01 	mov.w	fp, #1
 80191ba:	4637      	mov	r7, r6
 80191bc:	463d      	mov	r5, r7
 80191be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191c2:	b10b      	cbz	r3, 80191c8 <_svfiprintf_r+0x58>
 80191c4:	2b25      	cmp	r3, #37	; 0x25
 80191c6:	d13e      	bne.n	8019246 <_svfiprintf_r+0xd6>
 80191c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80191cc:	d00b      	beq.n	80191e6 <_svfiprintf_r+0x76>
 80191ce:	4653      	mov	r3, sl
 80191d0:	4632      	mov	r2, r6
 80191d2:	4621      	mov	r1, r4
 80191d4:	4640      	mov	r0, r8
 80191d6:	f7ff ff70 	bl	80190ba <__ssputs_r>
 80191da:	3001      	adds	r0, #1
 80191dc:	f000 80a4 	beq.w	8019328 <_svfiprintf_r+0x1b8>
 80191e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191e2:	4453      	add	r3, sl
 80191e4:	9309      	str	r3, [sp, #36]	; 0x24
 80191e6:	783b      	ldrb	r3, [r7, #0]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	f000 809d 	beq.w	8019328 <_svfiprintf_r+0x1b8>
 80191ee:	2300      	movs	r3, #0
 80191f0:	f04f 32ff 	mov.w	r2, #4294967295
 80191f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191f8:	9304      	str	r3, [sp, #16]
 80191fa:	9307      	str	r3, [sp, #28]
 80191fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019200:	931a      	str	r3, [sp, #104]	; 0x68
 8019202:	462f      	mov	r7, r5
 8019204:	2205      	movs	r2, #5
 8019206:	f817 1b01 	ldrb.w	r1, [r7], #1
 801920a:	4850      	ldr	r0, [pc, #320]	; (801934c <_svfiprintf_r+0x1dc>)
 801920c:	f7e6 fff8 	bl	8000200 <memchr>
 8019210:	9b04      	ldr	r3, [sp, #16]
 8019212:	b9d0      	cbnz	r0, 801924a <_svfiprintf_r+0xda>
 8019214:	06d9      	lsls	r1, r3, #27
 8019216:	bf44      	itt	mi
 8019218:	2220      	movmi	r2, #32
 801921a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801921e:	071a      	lsls	r2, r3, #28
 8019220:	bf44      	itt	mi
 8019222:	222b      	movmi	r2, #43	; 0x2b
 8019224:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019228:	782a      	ldrb	r2, [r5, #0]
 801922a:	2a2a      	cmp	r2, #42	; 0x2a
 801922c:	d015      	beq.n	801925a <_svfiprintf_r+0xea>
 801922e:	9a07      	ldr	r2, [sp, #28]
 8019230:	462f      	mov	r7, r5
 8019232:	2000      	movs	r0, #0
 8019234:	250a      	movs	r5, #10
 8019236:	4639      	mov	r1, r7
 8019238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801923c:	3b30      	subs	r3, #48	; 0x30
 801923e:	2b09      	cmp	r3, #9
 8019240:	d94d      	bls.n	80192de <_svfiprintf_r+0x16e>
 8019242:	b1b8      	cbz	r0, 8019274 <_svfiprintf_r+0x104>
 8019244:	e00f      	b.n	8019266 <_svfiprintf_r+0xf6>
 8019246:	462f      	mov	r7, r5
 8019248:	e7b8      	b.n	80191bc <_svfiprintf_r+0x4c>
 801924a:	4a40      	ldr	r2, [pc, #256]	; (801934c <_svfiprintf_r+0x1dc>)
 801924c:	1a80      	subs	r0, r0, r2
 801924e:	fa0b f000 	lsl.w	r0, fp, r0
 8019252:	4318      	orrs	r0, r3
 8019254:	9004      	str	r0, [sp, #16]
 8019256:	463d      	mov	r5, r7
 8019258:	e7d3      	b.n	8019202 <_svfiprintf_r+0x92>
 801925a:	9a03      	ldr	r2, [sp, #12]
 801925c:	1d11      	adds	r1, r2, #4
 801925e:	6812      	ldr	r2, [r2, #0]
 8019260:	9103      	str	r1, [sp, #12]
 8019262:	2a00      	cmp	r2, #0
 8019264:	db01      	blt.n	801926a <_svfiprintf_r+0xfa>
 8019266:	9207      	str	r2, [sp, #28]
 8019268:	e004      	b.n	8019274 <_svfiprintf_r+0x104>
 801926a:	4252      	negs	r2, r2
 801926c:	f043 0302 	orr.w	r3, r3, #2
 8019270:	9207      	str	r2, [sp, #28]
 8019272:	9304      	str	r3, [sp, #16]
 8019274:	783b      	ldrb	r3, [r7, #0]
 8019276:	2b2e      	cmp	r3, #46	; 0x2e
 8019278:	d10c      	bne.n	8019294 <_svfiprintf_r+0x124>
 801927a:	787b      	ldrb	r3, [r7, #1]
 801927c:	2b2a      	cmp	r3, #42	; 0x2a
 801927e:	d133      	bne.n	80192e8 <_svfiprintf_r+0x178>
 8019280:	9b03      	ldr	r3, [sp, #12]
 8019282:	1d1a      	adds	r2, r3, #4
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	9203      	str	r2, [sp, #12]
 8019288:	2b00      	cmp	r3, #0
 801928a:	bfb8      	it	lt
 801928c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019290:	3702      	adds	r7, #2
 8019292:	9305      	str	r3, [sp, #20]
 8019294:	4d2e      	ldr	r5, [pc, #184]	; (8019350 <_svfiprintf_r+0x1e0>)
 8019296:	7839      	ldrb	r1, [r7, #0]
 8019298:	2203      	movs	r2, #3
 801929a:	4628      	mov	r0, r5
 801929c:	f7e6 ffb0 	bl	8000200 <memchr>
 80192a0:	b138      	cbz	r0, 80192b2 <_svfiprintf_r+0x142>
 80192a2:	2340      	movs	r3, #64	; 0x40
 80192a4:	1b40      	subs	r0, r0, r5
 80192a6:	fa03 f000 	lsl.w	r0, r3, r0
 80192aa:	9b04      	ldr	r3, [sp, #16]
 80192ac:	4303      	orrs	r3, r0
 80192ae:	3701      	adds	r7, #1
 80192b0:	9304      	str	r3, [sp, #16]
 80192b2:	7839      	ldrb	r1, [r7, #0]
 80192b4:	4827      	ldr	r0, [pc, #156]	; (8019354 <_svfiprintf_r+0x1e4>)
 80192b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192ba:	2206      	movs	r2, #6
 80192bc:	1c7e      	adds	r6, r7, #1
 80192be:	f7e6 ff9f 	bl	8000200 <memchr>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d038      	beq.n	8019338 <_svfiprintf_r+0x1c8>
 80192c6:	4b24      	ldr	r3, [pc, #144]	; (8019358 <_svfiprintf_r+0x1e8>)
 80192c8:	bb13      	cbnz	r3, 8019310 <_svfiprintf_r+0x1a0>
 80192ca:	9b03      	ldr	r3, [sp, #12]
 80192cc:	3307      	adds	r3, #7
 80192ce:	f023 0307 	bic.w	r3, r3, #7
 80192d2:	3308      	adds	r3, #8
 80192d4:	9303      	str	r3, [sp, #12]
 80192d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192d8:	444b      	add	r3, r9
 80192da:	9309      	str	r3, [sp, #36]	; 0x24
 80192dc:	e76d      	b.n	80191ba <_svfiprintf_r+0x4a>
 80192de:	fb05 3202 	mla	r2, r5, r2, r3
 80192e2:	2001      	movs	r0, #1
 80192e4:	460f      	mov	r7, r1
 80192e6:	e7a6      	b.n	8019236 <_svfiprintf_r+0xc6>
 80192e8:	2300      	movs	r3, #0
 80192ea:	3701      	adds	r7, #1
 80192ec:	9305      	str	r3, [sp, #20]
 80192ee:	4619      	mov	r1, r3
 80192f0:	250a      	movs	r5, #10
 80192f2:	4638      	mov	r0, r7
 80192f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192f8:	3a30      	subs	r2, #48	; 0x30
 80192fa:	2a09      	cmp	r2, #9
 80192fc:	d903      	bls.n	8019306 <_svfiprintf_r+0x196>
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d0c8      	beq.n	8019294 <_svfiprintf_r+0x124>
 8019302:	9105      	str	r1, [sp, #20]
 8019304:	e7c6      	b.n	8019294 <_svfiprintf_r+0x124>
 8019306:	fb05 2101 	mla	r1, r5, r1, r2
 801930a:	2301      	movs	r3, #1
 801930c:	4607      	mov	r7, r0
 801930e:	e7f0      	b.n	80192f2 <_svfiprintf_r+0x182>
 8019310:	ab03      	add	r3, sp, #12
 8019312:	9300      	str	r3, [sp, #0]
 8019314:	4622      	mov	r2, r4
 8019316:	4b11      	ldr	r3, [pc, #68]	; (801935c <_svfiprintf_r+0x1ec>)
 8019318:	a904      	add	r1, sp, #16
 801931a:	4640      	mov	r0, r8
 801931c:	f7fc fc20 	bl	8015b60 <_printf_float>
 8019320:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019324:	4681      	mov	r9, r0
 8019326:	d1d6      	bne.n	80192d6 <_svfiprintf_r+0x166>
 8019328:	89a3      	ldrh	r3, [r4, #12]
 801932a:	065b      	lsls	r3, r3, #25
 801932c:	f53f af35 	bmi.w	801919a <_svfiprintf_r+0x2a>
 8019330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019332:	b01d      	add	sp, #116	; 0x74
 8019334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019338:	ab03      	add	r3, sp, #12
 801933a:	9300      	str	r3, [sp, #0]
 801933c:	4622      	mov	r2, r4
 801933e:	4b07      	ldr	r3, [pc, #28]	; (801935c <_svfiprintf_r+0x1ec>)
 8019340:	a904      	add	r1, sp, #16
 8019342:	4640      	mov	r0, r8
 8019344:	f7fc fec2 	bl	80160cc <_printf_i>
 8019348:	e7ea      	b.n	8019320 <_svfiprintf_r+0x1b0>
 801934a:	bf00      	nop
 801934c:	0801bd8c 	.word	0x0801bd8c
 8019350:	0801bd92 	.word	0x0801bd92
 8019354:	0801bd96 	.word	0x0801bd96
 8019358:	08015b61 	.word	0x08015b61
 801935c:	080190bb 	.word	0x080190bb

08019360 <_sungetc_r>:
 8019360:	b538      	push	{r3, r4, r5, lr}
 8019362:	1c4b      	adds	r3, r1, #1
 8019364:	4614      	mov	r4, r2
 8019366:	d103      	bne.n	8019370 <_sungetc_r+0x10>
 8019368:	f04f 35ff 	mov.w	r5, #4294967295
 801936c:	4628      	mov	r0, r5
 801936e:	bd38      	pop	{r3, r4, r5, pc}
 8019370:	8993      	ldrh	r3, [r2, #12]
 8019372:	f023 0320 	bic.w	r3, r3, #32
 8019376:	8193      	strh	r3, [r2, #12]
 8019378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801937a:	6852      	ldr	r2, [r2, #4]
 801937c:	b2cd      	uxtb	r5, r1
 801937e:	b18b      	cbz	r3, 80193a4 <_sungetc_r+0x44>
 8019380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019382:	4293      	cmp	r3, r2
 8019384:	dd08      	ble.n	8019398 <_sungetc_r+0x38>
 8019386:	6823      	ldr	r3, [r4, #0]
 8019388:	1e5a      	subs	r2, r3, #1
 801938a:	6022      	str	r2, [r4, #0]
 801938c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019390:	6863      	ldr	r3, [r4, #4]
 8019392:	3301      	adds	r3, #1
 8019394:	6063      	str	r3, [r4, #4]
 8019396:	e7e9      	b.n	801936c <_sungetc_r+0xc>
 8019398:	4621      	mov	r1, r4
 801939a:	f000 fbb3 	bl	8019b04 <__submore>
 801939e:	2800      	cmp	r0, #0
 80193a0:	d0f1      	beq.n	8019386 <_sungetc_r+0x26>
 80193a2:	e7e1      	b.n	8019368 <_sungetc_r+0x8>
 80193a4:	6921      	ldr	r1, [r4, #16]
 80193a6:	6823      	ldr	r3, [r4, #0]
 80193a8:	b151      	cbz	r1, 80193c0 <_sungetc_r+0x60>
 80193aa:	4299      	cmp	r1, r3
 80193ac:	d208      	bcs.n	80193c0 <_sungetc_r+0x60>
 80193ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80193b2:	42a9      	cmp	r1, r5
 80193b4:	d104      	bne.n	80193c0 <_sungetc_r+0x60>
 80193b6:	3b01      	subs	r3, #1
 80193b8:	3201      	adds	r2, #1
 80193ba:	6023      	str	r3, [r4, #0]
 80193bc:	6062      	str	r2, [r4, #4]
 80193be:	e7d5      	b.n	801936c <_sungetc_r+0xc>
 80193c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80193c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193c8:	6363      	str	r3, [r4, #52]	; 0x34
 80193ca:	2303      	movs	r3, #3
 80193cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80193ce:	4623      	mov	r3, r4
 80193d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80193d4:	6023      	str	r3, [r4, #0]
 80193d6:	2301      	movs	r3, #1
 80193d8:	e7dc      	b.n	8019394 <_sungetc_r+0x34>

080193da <__ssrefill_r>:
 80193da:	b510      	push	{r4, lr}
 80193dc:	460c      	mov	r4, r1
 80193de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193e0:	b169      	cbz	r1, 80193fe <__ssrefill_r+0x24>
 80193e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193e6:	4299      	cmp	r1, r3
 80193e8:	d001      	beq.n	80193ee <__ssrefill_r+0x14>
 80193ea:	f7fc fa7d 	bl	80158e8 <_free_r>
 80193ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193f0:	6063      	str	r3, [r4, #4]
 80193f2:	2000      	movs	r0, #0
 80193f4:	6360      	str	r0, [r4, #52]	; 0x34
 80193f6:	b113      	cbz	r3, 80193fe <__ssrefill_r+0x24>
 80193f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80193fa:	6023      	str	r3, [r4, #0]
 80193fc:	bd10      	pop	{r4, pc}
 80193fe:	6923      	ldr	r3, [r4, #16]
 8019400:	6023      	str	r3, [r4, #0]
 8019402:	2300      	movs	r3, #0
 8019404:	6063      	str	r3, [r4, #4]
 8019406:	89a3      	ldrh	r3, [r4, #12]
 8019408:	f043 0320 	orr.w	r3, r3, #32
 801940c:	81a3      	strh	r3, [r4, #12]
 801940e:	f04f 30ff 	mov.w	r0, #4294967295
 8019412:	e7f3      	b.n	80193fc <__ssrefill_r+0x22>

08019414 <__ssvfiscanf_r>:
 8019414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019418:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801941c:	460c      	mov	r4, r1
 801941e:	2100      	movs	r1, #0
 8019420:	9144      	str	r1, [sp, #272]	; 0x110
 8019422:	9145      	str	r1, [sp, #276]	; 0x114
 8019424:	499f      	ldr	r1, [pc, #636]	; (80196a4 <__ssvfiscanf_r+0x290>)
 8019426:	91a0      	str	r1, [sp, #640]	; 0x280
 8019428:	f10d 0804 	add.w	r8, sp, #4
 801942c:	499e      	ldr	r1, [pc, #632]	; (80196a8 <__ssvfiscanf_r+0x294>)
 801942e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80196ac <__ssvfiscanf_r+0x298>
 8019432:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019436:	4606      	mov	r6, r0
 8019438:	4692      	mov	sl, r2
 801943a:	91a1      	str	r1, [sp, #644]	; 0x284
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	270a      	movs	r7, #10
 8019440:	f89a 3000 	ldrb.w	r3, [sl]
 8019444:	2b00      	cmp	r3, #0
 8019446:	f000 812a 	beq.w	801969e <__ssvfiscanf_r+0x28a>
 801944a:	4655      	mov	r5, sl
 801944c:	f7ff f9f6 	bl	801883c <__locale_ctype_ptr>
 8019450:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019454:	4458      	add	r0, fp
 8019456:	7843      	ldrb	r3, [r0, #1]
 8019458:	f013 0308 	ands.w	r3, r3, #8
 801945c:	d01c      	beq.n	8019498 <__ssvfiscanf_r+0x84>
 801945e:	6863      	ldr	r3, [r4, #4]
 8019460:	2b00      	cmp	r3, #0
 8019462:	dd12      	ble.n	801948a <__ssvfiscanf_r+0x76>
 8019464:	f7ff f9ea 	bl	801883c <__locale_ctype_ptr>
 8019468:	6823      	ldr	r3, [r4, #0]
 801946a:	781a      	ldrb	r2, [r3, #0]
 801946c:	4410      	add	r0, r2
 801946e:	7842      	ldrb	r2, [r0, #1]
 8019470:	0712      	lsls	r2, r2, #28
 8019472:	d401      	bmi.n	8019478 <__ssvfiscanf_r+0x64>
 8019474:	46aa      	mov	sl, r5
 8019476:	e7e3      	b.n	8019440 <__ssvfiscanf_r+0x2c>
 8019478:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801947a:	3201      	adds	r2, #1
 801947c:	9245      	str	r2, [sp, #276]	; 0x114
 801947e:	6862      	ldr	r2, [r4, #4]
 8019480:	3301      	adds	r3, #1
 8019482:	3a01      	subs	r2, #1
 8019484:	6062      	str	r2, [r4, #4]
 8019486:	6023      	str	r3, [r4, #0]
 8019488:	e7e9      	b.n	801945e <__ssvfiscanf_r+0x4a>
 801948a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801948c:	4621      	mov	r1, r4
 801948e:	4630      	mov	r0, r6
 8019490:	4798      	blx	r3
 8019492:	2800      	cmp	r0, #0
 8019494:	d0e6      	beq.n	8019464 <__ssvfiscanf_r+0x50>
 8019496:	e7ed      	b.n	8019474 <__ssvfiscanf_r+0x60>
 8019498:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801949c:	f040 8082 	bne.w	80195a4 <__ssvfiscanf_r+0x190>
 80194a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80194a2:	9341      	str	r3, [sp, #260]	; 0x104
 80194a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80194a8:	2b2a      	cmp	r3, #42	; 0x2a
 80194aa:	d103      	bne.n	80194b4 <__ssvfiscanf_r+0xa0>
 80194ac:	2310      	movs	r3, #16
 80194ae:	9341      	str	r3, [sp, #260]	; 0x104
 80194b0:	f10a 0502 	add.w	r5, sl, #2
 80194b4:	46aa      	mov	sl, r5
 80194b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80194ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80194be:	2a09      	cmp	r2, #9
 80194c0:	d922      	bls.n	8019508 <__ssvfiscanf_r+0xf4>
 80194c2:	2203      	movs	r2, #3
 80194c4:	4879      	ldr	r0, [pc, #484]	; (80196ac <__ssvfiscanf_r+0x298>)
 80194c6:	f7e6 fe9b 	bl	8000200 <memchr>
 80194ca:	b138      	cbz	r0, 80194dc <__ssvfiscanf_r+0xc8>
 80194cc:	eba0 0309 	sub.w	r3, r0, r9
 80194d0:	2001      	movs	r0, #1
 80194d2:	4098      	lsls	r0, r3
 80194d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80194d6:	4318      	orrs	r0, r3
 80194d8:	9041      	str	r0, [sp, #260]	; 0x104
 80194da:	46aa      	mov	sl, r5
 80194dc:	f89a 3000 	ldrb.w	r3, [sl]
 80194e0:	2b67      	cmp	r3, #103	; 0x67
 80194e2:	f10a 0501 	add.w	r5, sl, #1
 80194e6:	d82b      	bhi.n	8019540 <__ssvfiscanf_r+0x12c>
 80194e8:	2b65      	cmp	r3, #101	; 0x65
 80194ea:	f080 809f 	bcs.w	801962c <__ssvfiscanf_r+0x218>
 80194ee:	2b47      	cmp	r3, #71	; 0x47
 80194f0:	d810      	bhi.n	8019514 <__ssvfiscanf_r+0x100>
 80194f2:	2b45      	cmp	r3, #69	; 0x45
 80194f4:	f080 809a 	bcs.w	801962c <__ssvfiscanf_r+0x218>
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d06c      	beq.n	80195d6 <__ssvfiscanf_r+0x1c2>
 80194fc:	2b25      	cmp	r3, #37	; 0x25
 80194fe:	d051      	beq.n	80195a4 <__ssvfiscanf_r+0x190>
 8019500:	2303      	movs	r3, #3
 8019502:	9347      	str	r3, [sp, #284]	; 0x11c
 8019504:	9742      	str	r7, [sp, #264]	; 0x108
 8019506:	e027      	b.n	8019558 <__ssvfiscanf_r+0x144>
 8019508:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801950a:	fb07 1303 	mla	r3, r7, r3, r1
 801950e:	3b30      	subs	r3, #48	; 0x30
 8019510:	9343      	str	r3, [sp, #268]	; 0x10c
 8019512:	e7cf      	b.n	80194b4 <__ssvfiscanf_r+0xa0>
 8019514:	2b5b      	cmp	r3, #91	; 0x5b
 8019516:	d06a      	beq.n	80195ee <__ssvfiscanf_r+0x1da>
 8019518:	d80c      	bhi.n	8019534 <__ssvfiscanf_r+0x120>
 801951a:	2b58      	cmp	r3, #88	; 0x58
 801951c:	d1f0      	bne.n	8019500 <__ssvfiscanf_r+0xec>
 801951e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019524:	9241      	str	r2, [sp, #260]	; 0x104
 8019526:	2210      	movs	r2, #16
 8019528:	9242      	str	r2, [sp, #264]	; 0x108
 801952a:	2b6e      	cmp	r3, #110	; 0x6e
 801952c:	bf8c      	ite	hi
 801952e:	2304      	movhi	r3, #4
 8019530:	2303      	movls	r3, #3
 8019532:	e010      	b.n	8019556 <__ssvfiscanf_r+0x142>
 8019534:	2b63      	cmp	r3, #99	; 0x63
 8019536:	d065      	beq.n	8019604 <__ssvfiscanf_r+0x1f0>
 8019538:	2b64      	cmp	r3, #100	; 0x64
 801953a:	d1e1      	bne.n	8019500 <__ssvfiscanf_r+0xec>
 801953c:	9742      	str	r7, [sp, #264]	; 0x108
 801953e:	e7f4      	b.n	801952a <__ssvfiscanf_r+0x116>
 8019540:	2b70      	cmp	r3, #112	; 0x70
 8019542:	d04b      	beq.n	80195dc <__ssvfiscanf_r+0x1c8>
 8019544:	d826      	bhi.n	8019594 <__ssvfiscanf_r+0x180>
 8019546:	2b6e      	cmp	r3, #110	; 0x6e
 8019548:	d062      	beq.n	8019610 <__ssvfiscanf_r+0x1fc>
 801954a:	d84c      	bhi.n	80195e6 <__ssvfiscanf_r+0x1d2>
 801954c:	2b69      	cmp	r3, #105	; 0x69
 801954e:	d1d7      	bne.n	8019500 <__ssvfiscanf_r+0xec>
 8019550:	2300      	movs	r3, #0
 8019552:	9342      	str	r3, [sp, #264]	; 0x108
 8019554:	2303      	movs	r3, #3
 8019556:	9347      	str	r3, [sp, #284]	; 0x11c
 8019558:	6863      	ldr	r3, [r4, #4]
 801955a:	2b00      	cmp	r3, #0
 801955c:	dd68      	ble.n	8019630 <__ssvfiscanf_r+0x21c>
 801955e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019560:	0659      	lsls	r1, r3, #25
 8019562:	d407      	bmi.n	8019574 <__ssvfiscanf_r+0x160>
 8019564:	f7ff f96a 	bl	801883c <__locale_ctype_ptr>
 8019568:	6823      	ldr	r3, [r4, #0]
 801956a:	781a      	ldrb	r2, [r3, #0]
 801956c:	4410      	add	r0, r2
 801956e:	7842      	ldrb	r2, [r0, #1]
 8019570:	0712      	lsls	r2, r2, #28
 8019572:	d464      	bmi.n	801963e <__ssvfiscanf_r+0x22a>
 8019574:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019576:	2b02      	cmp	r3, #2
 8019578:	dc73      	bgt.n	8019662 <__ssvfiscanf_r+0x24e>
 801957a:	466b      	mov	r3, sp
 801957c:	4622      	mov	r2, r4
 801957e:	a941      	add	r1, sp, #260	; 0x104
 8019580:	4630      	mov	r0, r6
 8019582:	f000 f897 	bl	80196b4 <_scanf_chars>
 8019586:	2801      	cmp	r0, #1
 8019588:	f000 8089 	beq.w	801969e <__ssvfiscanf_r+0x28a>
 801958c:	2802      	cmp	r0, #2
 801958e:	f47f af71 	bne.w	8019474 <__ssvfiscanf_r+0x60>
 8019592:	e01d      	b.n	80195d0 <__ssvfiscanf_r+0x1bc>
 8019594:	2b75      	cmp	r3, #117	; 0x75
 8019596:	d0d1      	beq.n	801953c <__ssvfiscanf_r+0x128>
 8019598:	2b78      	cmp	r3, #120	; 0x78
 801959a:	d0c0      	beq.n	801951e <__ssvfiscanf_r+0x10a>
 801959c:	2b73      	cmp	r3, #115	; 0x73
 801959e:	d1af      	bne.n	8019500 <__ssvfiscanf_r+0xec>
 80195a0:	2302      	movs	r3, #2
 80195a2:	e7d8      	b.n	8019556 <__ssvfiscanf_r+0x142>
 80195a4:	6863      	ldr	r3, [r4, #4]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	dd0c      	ble.n	80195c4 <__ssvfiscanf_r+0x1b0>
 80195aa:	6823      	ldr	r3, [r4, #0]
 80195ac:	781a      	ldrb	r2, [r3, #0]
 80195ae:	455a      	cmp	r2, fp
 80195b0:	d175      	bne.n	801969e <__ssvfiscanf_r+0x28a>
 80195b2:	3301      	adds	r3, #1
 80195b4:	6862      	ldr	r2, [r4, #4]
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80195ba:	3a01      	subs	r2, #1
 80195bc:	3301      	adds	r3, #1
 80195be:	6062      	str	r2, [r4, #4]
 80195c0:	9345      	str	r3, [sp, #276]	; 0x114
 80195c2:	e757      	b.n	8019474 <__ssvfiscanf_r+0x60>
 80195c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195c6:	4621      	mov	r1, r4
 80195c8:	4630      	mov	r0, r6
 80195ca:	4798      	blx	r3
 80195cc:	2800      	cmp	r0, #0
 80195ce:	d0ec      	beq.n	80195aa <__ssvfiscanf_r+0x196>
 80195d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80195d2:	2800      	cmp	r0, #0
 80195d4:	d159      	bne.n	801968a <__ssvfiscanf_r+0x276>
 80195d6:	f04f 30ff 	mov.w	r0, #4294967295
 80195da:	e05c      	b.n	8019696 <__ssvfiscanf_r+0x282>
 80195dc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80195de:	f042 0220 	orr.w	r2, r2, #32
 80195e2:	9241      	str	r2, [sp, #260]	; 0x104
 80195e4:	e79b      	b.n	801951e <__ssvfiscanf_r+0x10a>
 80195e6:	2308      	movs	r3, #8
 80195e8:	9342      	str	r3, [sp, #264]	; 0x108
 80195ea:	2304      	movs	r3, #4
 80195ec:	e7b3      	b.n	8019556 <__ssvfiscanf_r+0x142>
 80195ee:	4629      	mov	r1, r5
 80195f0:	4640      	mov	r0, r8
 80195f2:	f000 f9b7 	bl	8019964 <__sccl>
 80195f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195fc:	9341      	str	r3, [sp, #260]	; 0x104
 80195fe:	4605      	mov	r5, r0
 8019600:	2301      	movs	r3, #1
 8019602:	e7a8      	b.n	8019556 <__ssvfiscanf_r+0x142>
 8019604:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801960a:	9341      	str	r3, [sp, #260]	; 0x104
 801960c:	2300      	movs	r3, #0
 801960e:	e7a2      	b.n	8019556 <__ssvfiscanf_r+0x142>
 8019610:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019612:	06c3      	lsls	r3, r0, #27
 8019614:	f53f af2e 	bmi.w	8019474 <__ssvfiscanf_r+0x60>
 8019618:	9b00      	ldr	r3, [sp, #0]
 801961a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801961c:	1d19      	adds	r1, r3, #4
 801961e:	9100      	str	r1, [sp, #0]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	07c0      	lsls	r0, r0, #31
 8019624:	bf4c      	ite	mi
 8019626:	801a      	strhmi	r2, [r3, #0]
 8019628:	601a      	strpl	r2, [r3, #0]
 801962a:	e723      	b.n	8019474 <__ssvfiscanf_r+0x60>
 801962c:	2305      	movs	r3, #5
 801962e:	e792      	b.n	8019556 <__ssvfiscanf_r+0x142>
 8019630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019632:	4621      	mov	r1, r4
 8019634:	4630      	mov	r0, r6
 8019636:	4798      	blx	r3
 8019638:	2800      	cmp	r0, #0
 801963a:	d090      	beq.n	801955e <__ssvfiscanf_r+0x14a>
 801963c:	e7c8      	b.n	80195d0 <__ssvfiscanf_r+0x1bc>
 801963e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019640:	3201      	adds	r2, #1
 8019642:	9245      	str	r2, [sp, #276]	; 0x114
 8019644:	6862      	ldr	r2, [r4, #4]
 8019646:	3a01      	subs	r2, #1
 8019648:	2a00      	cmp	r2, #0
 801964a:	6062      	str	r2, [r4, #4]
 801964c:	dd02      	ble.n	8019654 <__ssvfiscanf_r+0x240>
 801964e:	3301      	adds	r3, #1
 8019650:	6023      	str	r3, [r4, #0]
 8019652:	e787      	b.n	8019564 <__ssvfiscanf_r+0x150>
 8019654:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019656:	4621      	mov	r1, r4
 8019658:	4630      	mov	r0, r6
 801965a:	4798      	blx	r3
 801965c:	2800      	cmp	r0, #0
 801965e:	d081      	beq.n	8019564 <__ssvfiscanf_r+0x150>
 8019660:	e7b6      	b.n	80195d0 <__ssvfiscanf_r+0x1bc>
 8019662:	2b04      	cmp	r3, #4
 8019664:	dc06      	bgt.n	8019674 <__ssvfiscanf_r+0x260>
 8019666:	466b      	mov	r3, sp
 8019668:	4622      	mov	r2, r4
 801966a:	a941      	add	r1, sp, #260	; 0x104
 801966c:	4630      	mov	r0, r6
 801966e:	f000 f885 	bl	801977c <_scanf_i>
 8019672:	e788      	b.n	8019586 <__ssvfiscanf_r+0x172>
 8019674:	4b0e      	ldr	r3, [pc, #56]	; (80196b0 <__ssvfiscanf_r+0x29c>)
 8019676:	2b00      	cmp	r3, #0
 8019678:	f43f aefc 	beq.w	8019474 <__ssvfiscanf_r+0x60>
 801967c:	466b      	mov	r3, sp
 801967e:	4622      	mov	r2, r4
 8019680:	a941      	add	r1, sp, #260	; 0x104
 8019682:	4630      	mov	r0, r6
 8019684:	f7fc fe34 	bl	80162f0 <_scanf_float>
 8019688:	e77d      	b.n	8019586 <__ssvfiscanf_r+0x172>
 801968a:	89a3      	ldrh	r3, [r4, #12]
 801968c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019690:	bf18      	it	ne
 8019692:	f04f 30ff 	movne.w	r0, #4294967295
 8019696:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80196a0:	e7f9      	b.n	8019696 <__ssvfiscanf_r+0x282>
 80196a2:	bf00      	nop
 80196a4:	08019361 	.word	0x08019361
 80196a8:	080193db 	.word	0x080193db
 80196ac:	0801bd92 	.word	0x0801bd92
 80196b0:	080162f1 	.word	0x080162f1

080196b4 <_scanf_chars>:
 80196b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196b8:	4615      	mov	r5, r2
 80196ba:	688a      	ldr	r2, [r1, #8]
 80196bc:	4680      	mov	r8, r0
 80196be:	460c      	mov	r4, r1
 80196c0:	b932      	cbnz	r2, 80196d0 <_scanf_chars+0x1c>
 80196c2:	698a      	ldr	r2, [r1, #24]
 80196c4:	2a00      	cmp	r2, #0
 80196c6:	bf14      	ite	ne
 80196c8:	f04f 32ff 	movne.w	r2, #4294967295
 80196cc:	2201      	moveq	r2, #1
 80196ce:	608a      	str	r2, [r1, #8]
 80196d0:	6822      	ldr	r2, [r4, #0]
 80196d2:	06d1      	lsls	r1, r2, #27
 80196d4:	bf5f      	itttt	pl
 80196d6:	681a      	ldrpl	r2, [r3, #0]
 80196d8:	1d11      	addpl	r1, r2, #4
 80196da:	6019      	strpl	r1, [r3, #0]
 80196dc:	6817      	ldrpl	r7, [r2, #0]
 80196de:	2600      	movs	r6, #0
 80196e0:	69a3      	ldr	r3, [r4, #24]
 80196e2:	b1db      	cbz	r3, 801971c <_scanf_chars+0x68>
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d107      	bne.n	80196f8 <_scanf_chars+0x44>
 80196e8:	682b      	ldr	r3, [r5, #0]
 80196ea:	6962      	ldr	r2, [r4, #20]
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	5cd3      	ldrb	r3, [r2, r3]
 80196f0:	b9a3      	cbnz	r3, 801971c <_scanf_chars+0x68>
 80196f2:	2e00      	cmp	r6, #0
 80196f4:	d132      	bne.n	801975c <_scanf_chars+0xa8>
 80196f6:	e006      	b.n	8019706 <_scanf_chars+0x52>
 80196f8:	2b02      	cmp	r3, #2
 80196fa:	d007      	beq.n	801970c <_scanf_chars+0x58>
 80196fc:	2e00      	cmp	r6, #0
 80196fe:	d12d      	bne.n	801975c <_scanf_chars+0xa8>
 8019700:	69a3      	ldr	r3, [r4, #24]
 8019702:	2b01      	cmp	r3, #1
 8019704:	d12a      	bne.n	801975c <_scanf_chars+0xa8>
 8019706:	2001      	movs	r0, #1
 8019708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801970c:	f7ff f896 	bl	801883c <__locale_ctype_ptr>
 8019710:	682b      	ldr	r3, [r5, #0]
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	4418      	add	r0, r3
 8019716:	7843      	ldrb	r3, [r0, #1]
 8019718:	071b      	lsls	r3, r3, #28
 801971a:	d4ef      	bmi.n	80196fc <_scanf_chars+0x48>
 801971c:	6823      	ldr	r3, [r4, #0]
 801971e:	06da      	lsls	r2, r3, #27
 8019720:	bf5e      	ittt	pl
 8019722:	682b      	ldrpl	r3, [r5, #0]
 8019724:	781b      	ldrbpl	r3, [r3, #0]
 8019726:	703b      	strbpl	r3, [r7, #0]
 8019728:	682a      	ldr	r2, [r5, #0]
 801972a:	686b      	ldr	r3, [r5, #4]
 801972c:	f102 0201 	add.w	r2, r2, #1
 8019730:	602a      	str	r2, [r5, #0]
 8019732:	68a2      	ldr	r2, [r4, #8]
 8019734:	f103 33ff 	add.w	r3, r3, #4294967295
 8019738:	f102 32ff 	add.w	r2, r2, #4294967295
 801973c:	606b      	str	r3, [r5, #4]
 801973e:	f106 0601 	add.w	r6, r6, #1
 8019742:	bf58      	it	pl
 8019744:	3701      	addpl	r7, #1
 8019746:	60a2      	str	r2, [r4, #8]
 8019748:	b142      	cbz	r2, 801975c <_scanf_chars+0xa8>
 801974a:	2b00      	cmp	r3, #0
 801974c:	dcc8      	bgt.n	80196e0 <_scanf_chars+0x2c>
 801974e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019752:	4629      	mov	r1, r5
 8019754:	4640      	mov	r0, r8
 8019756:	4798      	blx	r3
 8019758:	2800      	cmp	r0, #0
 801975a:	d0c1      	beq.n	80196e0 <_scanf_chars+0x2c>
 801975c:	6823      	ldr	r3, [r4, #0]
 801975e:	f013 0310 	ands.w	r3, r3, #16
 8019762:	d105      	bne.n	8019770 <_scanf_chars+0xbc>
 8019764:	68e2      	ldr	r2, [r4, #12]
 8019766:	3201      	adds	r2, #1
 8019768:	60e2      	str	r2, [r4, #12]
 801976a:	69a2      	ldr	r2, [r4, #24]
 801976c:	b102      	cbz	r2, 8019770 <_scanf_chars+0xbc>
 801976e:	703b      	strb	r3, [r7, #0]
 8019770:	6923      	ldr	r3, [r4, #16]
 8019772:	441e      	add	r6, r3
 8019774:	6126      	str	r6, [r4, #16]
 8019776:	2000      	movs	r0, #0
 8019778:	e7c6      	b.n	8019708 <_scanf_chars+0x54>
	...

0801977c <_scanf_i>:
 801977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019780:	469a      	mov	sl, r3
 8019782:	4b74      	ldr	r3, [pc, #464]	; (8019954 <_scanf_i+0x1d8>)
 8019784:	460c      	mov	r4, r1
 8019786:	4683      	mov	fp, r0
 8019788:	4616      	mov	r6, r2
 801978a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801978e:	b087      	sub	sp, #28
 8019790:	ab03      	add	r3, sp, #12
 8019792:	68a7      	ldr	r7, [r4, #8]
 8019794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019798:	4b6f      	ldr	r3, [pc, #444]	; (8019958 <_scanf_i+0x1dc>)
 801979a:	69a1      	ldr	r1, [r4, #24]
 801979c:	4a6f      	ldr	r2, [pc, #444]	; (801995c <_scanf_i+0x1e0>)
 801979e:	2903      	cmp	r1, #3
 80197a0:	bf08      	it	eq
 80197a2:	461a      	moveq	r2, r3
 80197a4:	1e7b      	subs	r3, r7, #1
 80197a6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80197aa:	bf84      	itt	hi
 80197ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80197b0:	60a3      	strhi	r3, [r4, #8]
 80197b2:	6823      	ldr	r3, [r4, #0]
 80197b4:	9200      	str	r2, [sp, #0]
 80197b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80197ba:	bf88      	it	hi
 80197bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80197c0:	f104 091c 	add.w	r9, r4, #28
 80197c4:	6023      	str	r3, [r4, #0]
 80197c6:	bf8c      	ite	hi
 80197c8:	197f      	addhi	r7, r7, r5
 80197ca:	2700      	movls	r7, #0
 80197cc:	464b      	mov	r3, r9
 80197ce:	f04f 0800 	mov.w	r8, #0
 80197d2:	9301      	str	r3, [sp, #4]
 80197d4:	6831      	ldr	r1, [r6, #0]
 80197d6:	ab03      	add	r3, sp, #12
 80197d8:	2202      	movs	r2, #2
 80197da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80197de:	7809      	ldrb	r1, [r1, #0]
 80197e0:	f7e6 fd0e 	bl	8000200 <memchr>
 80197e4:	9b01      	ldr	r3, [sp, #4]
 80197e6:	b330      	cbz	r0, 8019836 <_scanf_i+0xba>
 80197e8:	f1b8 0f01 	cmp.w	r8, #1
 80197ec:	d15a      	bne.n	80198a4 <_scanf_i+0x128>
 80197ee:	6862      	ldr	r2, [r4, #4]
 80197f0:	b92a      	cbnz	r2, 80197fe <_scanf_i+0x82>
 80197f2:	6822      	ldr	r2, [r4, #0]
 80197f4:	2108      	movs	r1, #8
 80197f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197fa:	6061      	str	r1, [r4, #4]
 80197fc:	6022      	str	r2, [r4, #0]
 80197fe:	6822      	ldr	r2, [r4, #0]
 8019800:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019804:	6022      	str	r2, [r4, #0]
 8019806:	68a2      	ldr	r2, [r4, #8]
 8019808:	1e51      	subs	r1, r2, #1
 801980a:	60a1      	str	r1, [r4, #8]
 801980c:	b19a      	cbz	r2, 8019836 <_scanf_i+0xba>
 801980e:	6832      	ldr	r2, [r6, #0]
 8019810:	1c51      	adds	r1, r2, #1
 8019812:	6031      	str	r1, [r6, #0]
 8019814:	7812      	ldrb	r2, [r2, #0]
 8019816:	701a      	strb	r2, [r3, #0]
 8019818:	1c5d      	adds	r5, r3, #1
 801981a:	6873      	ldr	r3, [r6, #4]
 801981c:	3b01      	subs	r3, #1
 801981e:	2b00      	cmp	r3, #0
 8019820:	6073      	str	r3, [r6, #4]
 8019822:	dc07      	bgt.n	8019834 <_scanf_i+0xb8>
 8019824:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019828:	4631      	mov	r1, r6
 801982a:	4658      	mov	r0, fp
 801982c:	4798      	blx	r3
 801982e:	2800      	cmp	r0, #0
 8019830:	f040 8086 	bne.w	8019940 <_scanf_i+0x1c4>
 8019834:	462b      	mov	r3, r5
 8019836:	f108 0801 	add.w	r8, r8, #1
 801983a:	f1b8 0f03 	cmp.w	r8, #3
 801983e:	d1c8      	bne.n	80197d2 <_scanf_i+0x56>
 8019840:	6862      	ldr	r2, [r4, #4]
 8019842:	b90a      	cbnz	r2, 8019848 <_scanf_i+0xcc>
 8019844:	220a      	movs	r2, #10
 8019846:	6062      	str	r2, [r4, #4]
 8019848:	6862      	ldr	r2, [r4, #4]
 801984a:	4945      	ldr	r1, [pc, #276]	; (8019960 <_scanf_i+0x1e4>)
 801984c:	6960      	ldr	r0, [r4, #20]
 801984e:	9301      	str	r3, [sp, #4]
 8019850:	1a89      	subs	r1, r1, r2
 8019852:	f000 f887 	bl	8019964 <__sccl>
 8019856:	9b01      	ldr	r3, [sp, #4]
 8019858:	f04f 0800 	mov.w	r8, #0
 801985c:	461d      	mov	r5, r3
 801985e:	68a3      	ldr	r3, [r4, #8]
 8019860:	6822      	ldr	r2, [r4, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d03a      	beq.n	80198dc <_scanf_i+0x160>
 8019866:	6831      	ldr	r1, [r6, #0]
 8019868:	6960      	ldr	r0, [r4, #20]
 801986a:	f891 c000 	ldrb.w	ip, [r1]
 801986e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019872:	2800      	cmp	r0, #0
 8019874:	d032      	beq.n	80198dc <_scanf_i+0x160>
 8019876:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801987a:	d121      	bne.n	80198c0 <_scanf_i+0x144>
 801987c:	0510      	lsls	r0, r2, #20
 801987e:	d51f      	bpl.n	80198c0 <_scanf_i+0x144>
 8019880:	f108 0801 	add.w	r8, r8, #1
 8019884:	b117      	cbz	r7, 801988c <_scanf_i+0x110>
 8019886:	3301      	adds	r3, #1
 8019888:	3f01      	subs	r7, #1
 801988a:	60a3      	str	r3, [r4, #8]
 801988c:	6873      	ldr	r3, [r6, #4]
 801988e:	3b01      	subs	r3, #1
 8019890:	2b00      	cmp	r3, #0
 8019892:	6073      	str	r3, [r6, #4]
 8019894:	dd1b      	ble.n	80198ce <_scanf_i+0x152>
 8019896:	6833      	ldr	r3, [r6, #0]
 8019898:	3301      	adds	r3, #1
 801989a:	6033      	str	r3, [r6, #0]
 801989c:	68a3      	ldr	r3, [r4, #8]
 801989e:	3b01      	subs	r3, #1
 80198a0:	60a3      	str	r3, [r4, #8]
 80198a2:	e7dc      	b.n	801985e <_scanf_i+0xe2>
 80198a4:	f1b8 0f02 	cmp.w	r8, #2
 80198a8:	d1ad      	bne.n	8019806 <_scanf_i+0x8a>
 80198aa:	6822      	ldr	r2, [r4, #0]
 80198ac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80198b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80198b4:	d1bf      	bne.n	8019836 <_scanf_i+0xba>
 80198b6:	2110      	movs	r1, #16
 80198b8:	6061      	str	r1, [r4, #4]
 80198ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80198be:	e7a1      	b.n	8019804 <_scanf_i+0x88>
 80198c0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80198c4:	6022      	str	r2, [r4, #0]
 80198c6:	780b      	ldrb	r3, [r1, #0]
 80198c8:	702b      	strb	r3, [r5, #0]
 80198ca:	3501      	adds	r5, #1
 80198cc:	e7de      	b.n	801988c <_scanf_i+0x110>
 80198ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80198d2:	4631      	mov	r1, r6
 80198d4:	4658      	mov	r0, fp
 80198d6:	4798      	blx	r3
 80198d8:	2800      	cmp	r0, #0
 80198da:	d0df      	beq.n	801989c <_scanf_i+0x120>
 80198dc:	6823      	ldr	r3, [r4, #0]
 80198de:	05d9      	lsls	r1, r3, #23
 80198e0:	d50c      	bpl.n	80198fc <_scanf_i+0x180>
 80198e2:	454d      	cmp	r5, r9
 80198e4:	d908      	bls.n	80198f8 <_scanf_i+0x17c>
 80198e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80198ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198ee:	4632      	mov	r2, r6
 80198f0:	4658      	mov	r0, fp
 80198f2:	4798      	blx	r3
 80198f4:	1e6f      	subs	r7, r5, #1
 80198f6:	463d      	mov	r5, r7
 80198f8:	454d      	cmp	r5, r9
 80198fa:	d029      	beq.n	8019950 <_scanf_i+0x1d4>
 80198fc:	6822      	ldr	r2, [r4, #0]
 80198fe:	f012 0210 	ands.w	r2, r2, #16
 8019902:	d113      	bne.n	801992c <_scanf_i+0x1b0>
 8019904:	702a      	strb	r2, [r5, #0]
 8019906:	6863      	ldr	r3, [r4, #4]
 8019908:	9e00      	ldr	r6, [sp, #0]
 801990a:	4649      	mov	r1, r9
 801990c:	4658      	mov	r0, fp
 801990e:	47b0      	blx	r6
 8019910:	f8da 3000 	ldr.w	r3, [sl]
 8019914:	6821      	ldr	r1, [r4, #0]
 8019916:	1d1a      	adds	r2, r3, #4
 8019918:	f8ca 2000 	str.w	r2, [sl]
 801991c:	f011 0f20 	tst.w	r1, #32
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	d010      	beq.n	8019946 <_scanf_i+0x1ca>
 8019924:	6018      	str	r0, [r3, #0]
 8019926:	68e3      	ldr	r3, [r4, #12]
 8019928:	3301      	adds	r3, #1
 801992a:	60e3      	str	r3, [r4, #12]
 801992c:	eba5 0509 	sub.w	r5, r5, r9
 8019930:	44a8      	add	r8, r5
 8019932:	6925      	ldr	r5, [r4, #16]
 8019934:	4445      	add	r5, r8
 8019936:	6125      	str	r5, [r4, #16]
 8019938:	2000      	movs	r0, #0
 801993a:	b007      	add	sp, #28
 801993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019940:	f04f 0800 	mov.w	r8, #0
 8019944:	e7ca      	b.n	80198dc <_scanf_i+0x160>
 8019946:	07ca      	lsls	r2, r1, #31
 8019948:	bf4c      	ite	mi
 801994a:	8018      	strhmi	r0, [r3, #0]
 801994c:	6018      	strpl	r0, [r3, #0]
 801994e:	e7ea      	b.n	8019926 <_scanf_i+0x1aa>
 8019950:	2001      	movs	r0, #1
 8019952:	e7f2      	b.n	801993a <_scanf_i+0x1be>
 8019954:	0801bbbc 	.word	0x0801bbbc
 8019958:	08017539 	.word	0x08017539
 801995c:	08019ae1 	.word	0x08019ae1
 8019960:	0801bdad 	.word	0x0801bdad

08019964 <__sccl>:
 8019964:	b570      	push	{r4, r5, r6, lr}
 8019966:	780b      	ldrb	r3, [r1, #0]
 8019968:	2b5e      	cmp	r3, #94	; 0x5e
 801996a:	bf13      	iteet	ne
 801996c:	1c4a      	addne	r2, r1, #1
 801996e:	1c8a      	addeq	r2, r1, #2
 8019970:	784b      	ldrbeq	r3, [r1, #1]
 8019972:	2100      	movne	r1, #0
 8019974:	bf08      	it	eq
 8019976:	2101      	moveq	r1, #1
 8019978:	1e44      	subs	r4, r0, #1
 801997a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801997e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019982:	42ac      	cmp	r4, r5
 8019984:	d1fb      	bne.n	801997e <__sccl+0x1a>
 8019986:	b913      	cbnz	r3, 801998e <__sccl+0x2a>
 8019988:	3a01      	subs	r2, #1
 801998a:	4610      	mov	r0, r2
 801998c:	bd70      	pop	{r4, r5, r6, pc}
 801998e:	f081 0401 	eor.w	r4, r1, #1
 8019992:	54c4      	strb	r4, [r0, r3]
 8019994:	1c51      	adds	r1, r2, #1
 8019996:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801999a:	2d2d      	cmp	r5, #45	; 0x2d
 801999c:	f101 36ff 	add.w	r6, r1, #4294967295
 80199a0:	460a      	mov	r2, r1
 80199a2:	d006      	beq.n	80199b2 <__sccl+0x4e>
 80199a4:	2d5d      	cmp	r5, #93	; 0x5d
 80199a6:	d0f0      	beq.n	801998a <__sccl+0x26>
 80199a8:	b90d      	cbnz	r5, 80199ae <__sccl+0x4a>
 80199aa:	4632      	mov	r2, r6
 80199ac:	e7ed      	b.n	801998a <__sccl+0x26>
 80199ae:	462b      	mov	r3, r5
 80199b0:	e7ef      	b.n	8019992 <__sccl+0x2e>
 80199b2:	780e      	ldrb	r6, [r1, #0]
 80199b4:	2e5d      	cmp	r6, #93	; 0x5d
 80199b6:	d0fa      	beq.n	80199ae <__sccl+0x4a>
 80199b8:	42b3      	cmp	r3, r6
 80199ba:	dcf8      	bgt.n	80199ae <__sccl+0x4a>
 80199bc:	3301      	adds	r3, #1
 80199be:	429e      	cmp	r6, r3
 80199c0:	54c4      	strb	r4, [r0, r3]
 80199c2:	dcfb      	bgt.n	80199bc <__sccl+0x58>
 80199c4:	3102      	adds	r1, #2
 80199c6:	e7e6      	b.n	8019996 <__sccl+0x32>

080199c8 <strncmp>:
 80199c8:	b510      	push	{r4, lr}
 80199ca:	b16a      	cbz	r2, 80199e8 <strncmp+0x20>
 80199cc:	3901      	subs	r1, #1
 80199ce:	1884      	adds	r4, r0, r2
 80199d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199d8:	4293      	cmp	r3, r2
 80199da:	d103      	bne.n	80199e4 <strncmp+0x1c>
 80199dc:	42a0      	cmp	r0, r4
 80199de:	d001      	beq.n	80199e4 <strncmp+0x1c>
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d1f5      	bne.n	80199d0 <strncmp+0x8>
 80199e4:	1a98      	subs	r0, r3, r2
 80199e6:	bd10      	pop	{r4, pc}
 80199e8:	4610      	mov	r0, r2
 80199ea:	e7fc      	b.n	80199e6 <strncmp+0x1e>

080199ec <_strtoul_l.isra.0>:
 80199ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199f0:	4680      	mov	r8, r0
 80199f2:	4689      	mov	r9, r1
 80199f4:	4692      	mov	sl, r2
 80199f6:	461e      	mov	r6, r3
 80199f8:	460f      	mov	r7, r1
 80199fa:	463d      	mov	r5, r7
 80199fc:	9808      	ldr	r0, [sp, #32]
 80199fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a02:	f7fe ff17 	bl	8018834 <__locale_ctype_ptr_l>
 8019a06:	4420      	add	r0, r4
 8019a08:	7843      	ldrb	r3, [r0, #1]
 8019a0a:	f013 0308 	ands.w	r3, r3, #8
 8019a0e:	d130      	bne.n	8019a72 <_strtoul_l.isra.0+0x86>
 8019a10:	2c2d      	cmp	r4, #45	; 0x2d
 8019a12:	d130      	bne.n	8019a76 <_strtoul_l.isra.0+0x8a>
 8019a14:	787c      	ldrb	r4, [r7, #1]
 8019a16:	1cbd      	adds	r5, r7, #2
 8019a18:	2101      	movs	r1, #1
 8019a1a:	2e00      	cmp	r6, #0
 8019a1c:	d05c      	beq.n	8019ad8 <_strtoul_l.isra.0+0xec>
 8019a1e:	2e10      	cmp	r6, #16
 8019a20:	d109      	bne.n	8019a36 <_strtoul_l.isra.0+0x4a>
 8019a22:	2c30      	cmp	r4, #48	; 0x30
 8019a24:	d107      	bne.n	8019a36 <_strtoul_l.isra.0+0x4a>
 8019a26:	782b      	ldrb	r3, [r5, #0]
 8019a28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a2c:	2b58      	cmp	r3, #88	; 0x58
 8019a2e:	d14e      	bne.n	8019ace <_strtoul_l.isra.0+0xe2>
 8019a30:	786c      	ldrb	r4, [r5, #1]
 8019a32:	2610      	movs	r6, #16
 8019a34:	3502      	adds	r5, #2
 8019a36:	f04f 32ff 	mov.w	r2, #4294967295
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019a40:	fb06 fc02 	mul.w	ip, r6, r2
 8019a44:	ea6f 0c0c 	mvn.w	ip, ip
 8019a48:	4618      	mov	r0, r3
 8019a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019a4e:	2f09      	cmp	r7, #9
 8019a50:	d817      	bhi.n	8019a82 <_strtoul_l.isra.0+0x96>
 8019a52:	463c      	mov	r4, r7
 8019a54:	42a6      	cmp	r6, r4
 8019a56:	dd23      	ble.n	8019aa0 <_strtoul_l.isra.0+0xb4>
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	db1e      	blt.n	8019a9a <_strtoul_l.isra.0+0xae>
 8019a5c:	4282      	cmp	r2, r0
 8019a5e:	d31c      	bcc.n	8019a9a <_strtoul_l.isra.0+0xae>
 8019a60:	d101      	bne.n	8019a66 <_strtoul_l.isra.0+0x7a>
 8019a62:	45a4      	cmp	ip, r4
 8019a64:	db19      	blt.n	8019a9a <_strtoul_l.isra.0+0xae>
 8019a66:	fb00 4006 	mla	r0, r0, r6, r4
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a70:	e7eb      	b.n	8019a4a <_strtoul_l.isra.0+0x5e>
 8019a72:	462f      	mov	r7, r5
 8019a74:	e7c1      	b.n	80199fa <_strtoul_l.isra.0+0xe>
 8019a76:	2c2b      	cmp	r4, #43	; 0x2b
 8019a78:	bf04      	itt	eq
 8019a7a:	1cbd      	addeq	r5, r7, #2
 8019a7c:	787c      	ldrbeq	r4, [r7, #1]
 8019a7e:	4619      	mov	r1, r3
 8019a80:	e7cb      	b.n	8019a1a <_strtoul_l.isra.0+0x2e>
 8019a82:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a86:	2f19      	cmp	r7, #25
 8019a88:	d801      	bhi.n	8019a8e <_strtoul_l.isra.0+0xa2>
 8019a8a:	3c37      	subs	r4, #55	; 0x37
 8019a8c:	e7e2      	b.n	8019a54 <_strtoul_l.isra.0+0x68>
 8019a8e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a92:	2f19      	cmp	r7, #25
 8019a94:	d804      	bhi.n	8019aa0 <_strtoul_l.isra.0+0xb4>
 8019a96:	3c57      	subs	r4, #87	; 0x57
 8019a98:	e7dc      	b.n	8019a54 <_strtoul_l.isra.0+0x68>
 8019a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a9e:	e7e5      	b.n	8019a6c <_strtoul_l.isra.0+0x80>
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	da09      	bge.n	8019ab8 <_strtoul_l.isra.0+0xcc>
 8019aa4:	2322      	movs	r3, #34	; 0x22
 8019aa6:	f8c8 3000 	str.w	r3, [r8]
 8019aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8019aae:	f1ba 0f00 	cmp.w	sl, #0
 8019ab2:	d107      	bne.n	8019ac4 <_strtoul_l.isra.0+0xd8>
 8019ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ab8:	b101      	cbz	r1, 8019abc <_strtoul_l.isra.0+0xd0>
 8019aba:	4240      	negs	r0, r0
 8019abc:	f1ba 0f00 	cmp.w	sl, #0
 8019ac0:	d0f8      	beq.n	8019ab4 <_strtoul_l.isra.0+0xc8>
 8019ac2:	b10b      	cbz	r3, 8019ac8 <_strtoul_l.isra.0+0xdc>
 8019ac4:	f105 39ff 	add.w	r9, r5, #4294967295
 8019ac8:	f8ca 9000 	str.w	r9, [sl]
 8019acc:	e7f2      	b.n	8019ab4 <_strtoul_l.isra.0+0xc8>
 8019ace:	2430      	movs	r4, #48	; 0x30
 8019ad0:	2e00      	cmp	r6, #0
 8019ad2:	d1b0      	bne.n	8019a36 <_strtoul_l.isra.0+0x4a>
 8019ad4:	2608      	movs	r6, #8
 8019ad6:	e7ae      	b.n	8019a36 <_strtoul_l.isra.0+0x4a>
 8019ad8:	2c30      	cmp	r4, #48	; 0x30
 8019ada:	d0a4      	beq.n	8019a26 <_strtoul_l.isra.0+0x3a>
 8019adc:	260a      	movs	r6, #10
 8019ade:	e7aa      	b.n	8019a36 <_strtoul_l.isra.0+0x4a>

08019ae0 <_strtoul_r>:
 8019ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ae2:	4c06      	ldr	r4, [pc, #24]	; (8019afc <_strtoul_r+0x1c>)
 8019ae4:	4d06      	ldr	r5, [pc, #24]	; (8019b00 <_strtoul_r+0x20>)
 8019ae6:	6824      	ldr	r4, [r4, #0]
 8019ae8:	6a24      	ldr	r4, [r4, #32]
 8019aea:	2c00      	cmp	r4, #0
 8019aec:	bf08      	it	eq
 8019aee:	462c      	moveq	r4, r5
 8019af0:	9400      	str	r4, [sp, #0]
 8019af2:	f7ff ff7b 	bl	80199ec <_strtoul_l.isra.0>
 8019af6:	b003      	add	sp, #12
 8019af8:	bd30      	pop	{r4, r5, pc}
 8019afa:	bf00      	nop
 8019afc:	20000e60 	.word	0x20000e60
 8019b00:	20000ec4 	.word	0x20000ec4

08019b04 <__submore>:
 8019b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b08:	460c      	mov	r4, r1
 8019b0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b10:	4299      	cmp	r1, r3
 8019b12:	d11d      	bne.n	8019b50 <__submore+0x4c>
 8019b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019b18:	f7fb ff34 	bl	8015984 <_malloc_r>
 8019b1c:	b918      	cbnz	r0, 8019b26 <__submore+0x22>
 8019b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019b30:	6360      	str	r0, [r4, #52]	; 0x34
 8019b32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019b36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019b3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019b3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019b46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019b4a:	6020      	str	r0, [r4, #0]
 8019b4c:	2000      	movs	r0, #0
 8019b4e:	e7e8      	b.n	8019b22 <__submore+0x1e>
 8019b50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b52:	0077      	lsls	r7, r6, #1
 8019b54:	463a      	mov	r2, r7
 8019b56:	f000 f81c 	bl	8019b92 <_realloc_r>
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d0de      	beq.n	8019b1e <__submore+0x1a>
 8019b60:	eb00 0806 	add.w	r8, r0, r6
 8019b64:	4601      	mov	r1, r0
 8019b66:	4632      	mov	r2, r6
 8019b68:	4640      	mov	r0, r8
 8019b6a:	f7fb fe91 	bl	8015890 <memcpy>
 8019b6e:	f8c4 8000 	str.w	r8, [r4]
 8019b72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b76:	e7e9      	b.n	8019b4c <__submore+0x48>

08019b78 <__ascii_wctomb>:
 8019b78:	b149      	cbz	r1, 8019b8e <__ascii_wctomb+0x16>
 8019b7a:	2aff      	cmp	r2, #255	; 0xff
 8019b7c:	bf85      	ittet	hi
 8019b7e:	238a      	movhi	r3, #138	; 0x8a
 8019b80:	6003      	strhi	r3, [r0, #0]
 8019b82:	700a      	strbls	r2, [r1, #0]
 8019b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b88:	bf98      	it	ls
 8019b8a:	2001      	movls	r0, #1
 8019b8c:	4770      	bx	lr
 8019b8e:	4608      	mov	r0, r1
 8019b90:	4770      	bx	lr

08019b92 <_realloc_r>:
 8019b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b94:	4607      	mov	r7, r0
 8019b96:	4614      	mov	r4, r2
 8019b98:	460e      	mov	r6, r1
 8019b9a:	b921      	cbnz	r1, 8019ba6 <_realloc_r+0x14>
 8019b9c:	4611      	mov	r1, r2
 8019b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019ba2:	f7fb beef 	b.w	8015984 <_malloc_r>
 8019ba6:	b922      	cbnz	r2, 8019bb2 <_realloc_r+0x20>
 8019ba8:	f7fb fe9e 	bl	80158e8 <_free_r>
 8019bac:	4625      	mov	r5, r4
 8019bae:	4628      	mov	r0, r5
 8019bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bb2:	f000 f814 	bl	8019bde <_malloc_usable_size_r>
 8019bb6:	42a0      	cmp	r0, r4
 8019bb8:	d20f      	bcs.n	8019bda <_realloc_r+0x48>
 8019bba:	4621      	mov	r1, r4
 8019bbc:	4638      	mov	r0, r7
 8019bbe:	f7fb fee1 	bl	8015984 <_malloc_r>
 8019bc2:	4605      	mov	r5, r0
 8019bc4:	2800      	cmp	r0, #0
 8019bc6:	d0f2      	beq.n	8019bae <_realloc_r+0x1c>
 8019bc8:	4631      	mov	r1, r6
 8019bca:	4622      	mov	r2, r4
 8019bcc:	f7fb fe60 	bl	8015890 <memcpy>
 8019bd0:	4631      	mov	r1, r6
 8019bd2:	4638      	mov	r0, r7
 8019bd4:	f7fb fe88 	bl	80158e8 <_free_r>
 8019bd8:	e7e9      	b.n	8019bae <_realloc_r+0x1c>
 8019bda:	4635      	mov	r5, r6
 8019bdc:	e7e7      	b.n	8019bae <_realloc_r+0x1c>

08019bde <_malloc_usable_size_r>:
 8019bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019be2:	1f18      	subs	r0, r3, #4
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	bfbc      	itt	lt
 8019be8:	580b      	ldrlt	r3, [r1, r0]
 8019bea:	18c0      	addlt	r0, r0, r3
 8019bec:	4770      	bx	lr
	...

08019bf0 <ceil>:
 8019bf0:	ec51 0b10 	vmov	r0, r1, d0
 8019bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019bfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019c00:	2e13      	cmp	r6, #19
 8019c02:	460c      	mov	r4, r1
 8019c04:	ee10 5a10 	vmov	r5, s0
 8019c08:	4680      	mov	r8, r0
 8019c0a:	dc30      	bgt.n	8019c6e <ceil+0x7e>
 8019c0c:	2e00      	cmp	r6, #0
 8019c0e:	da12      	bge.n	8019c36 <ceil+0x46>
 8019c10:	a333      	add	r3, pc, #204	; (adr r3, 8019ce0 <ceil+0xf0>)
 8019c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c16:	f7e6 fb49 	bl	80002ac <__adddf3>
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	f7e6 ff8b 	bl	8000b38 <__aeabi_dcmpgt>
 8019c22:	b128      	cbz	r0, 8019c30 <ceil+0x40>
 8019c24:	2c00      	cmp	r4, #0
 8019c26:	db55      	blt.n	8019cd4 <ceil+0xe4>
 8019c28:	432c      	orrs	r4, r5
 8019c2a:	d057      	beq.n	8019cdc <ceil+0xec>
 8019c2c:	4c2e      	ldr	r4, [pc, #184]	; (8019ce8 <ceil+0xf8>)
 8019c2e:	2500      	movs	r5, #0
 8019c30:	4621      	mov	r1, r4
 8019c32:	4628      	mov	r0, r5
 8019c34:	e025      	b.n	8019c82 <ceil+0x92>
 8019c36:	4f2d      	ldr	r7, [pc, #180]	; (8019cec <ceil+0xfc>)
 8019c38:	4137      	asrs	r7, r6
 8019c3a:	ea01 0307 	and.w	r3, r1, r7
 8019c3e:	4303      	orrs	r3, r0
 8019c40:	d01f      	beq.n	8019c82 <ceil+0x92>
 8019c42:	a327      	add	r3, pc, #156	; (adr r3, 8019ce0 <ceil+0xf0>)
 8019c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c48:	f7e6 fb30 	bl	80002ac <__adddf3>
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2300      	movs	r3, #0
 8019c50:	f7e6 ff72 	bl	8000b38 <__aeabi_dcmpgt>
 8019c54:	2800      	cmp	r0, #0
 8019c56:	d0eb      	beq.n	8019c30 <ceil+0x40>
 8019c58:	2c00      	cmp	r4, #0
 8019c5a:	bfc2      	ittt	gt
 8019c5c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019c60:	fa43 f606 	asrgt.w	r6, r3, r6
 8019c64:	19a4      	addgt	r4, r4, r6
 8019c66:	ea24 0407 	bic.w	r4, r4, r7
 8019c6a:	2500      	movs	r5, #0
 8019c6c:	e7e0      	b.n	8019c30 <ceil+0x40>
 8019c6e:	2e33      	cmp	r6, #51	; 0x33
 8019c70:	dd0b      	ble.n	8019c8a <ceil+0x9a>
 8019c72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019c76:	d104      	bne.n	8019c82 <ceil+0x92>
 8019c78:	ee10 2a10 	vmov	r2, s0
 8019c7c:	460b      	mov	r3, r1
 8019c7e:	f7e6 fb15 	bl	80002ac <__adddf3>
 8019c82:	ec41 0b10 	vmov	d0, r0, r1
 8019c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c92:	fa23 f707 	lsr.w	r7, r3, r7
 8019c96:	4207      	tst	r7, r0
 8019c98:	d0f3      	beq.n	8019c82 <ceil+0x92>
 8019c9a:	a311      	add	r3, pc, #68	; (adr r3, 8019ce0 <ceil+0xf0>)
 8019c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca0:	f7e6 fb04 	bl	80002ac <__adddf3>
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	f7e6 ff46 	bl	8000b38 <__aeabi_dcmpgt>
 8019cac:	2800      	cmp	r0, #0
 8019cae:	d0bf      	beq.n	8019c30 <ceil+0x40>
 8019cb0:	2c00      	cmp	r4, #0
 8019cb2:	dd02      	ble.n	8019cba <ceil+0xca>
 8019cb4:	2e14      	cmp	r6, #20
 8019cb6:	d103      	bne.n	8019cc0 <ceil+0xd0>
 8019cb8:	3401      	adds	r4, #1
 8019cba:	ea25 0507 	bic.w	r5, r5, r7
 8019cbe:	e7b7      	b.n	8019c30 <ceil+0x40>
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019cc6:	fa03 f606 	lsl.w	r6, r3, r6
 8019cca:	4435      	add	r5, r6
 8019ccc:	4545      	cmp	r5, r8
 8019cce:	bf38      	it	cc
 8019cd0:	18e4      	addcc	r4, r4, r3
 8019cd2:	e7f2      	b.n	8019cba <ceil+0xca>
 8019cd4:	2500      	movs	r5, #0
 8019cd6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019cda:	e7a9      	b.n	8019c30 <ceil+0x40>
 8019cdc:	4625      	mov	r5, r4
 8019cde:	e7a7      	b.n	8019c30 <ceil+0x40>
 8019ce0:	8800759c 	.word	0x8800759c
 8019ce4:	7e37e43c 	.word	0x7e37e43c
 8019ce8:	3ff00000 	.word	0x3ff00000
 8019cec:	000fffff 	.word	0x000fffff

08019cf0 <cos>:
 8019cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019cf2:	ec51 0b10 	vmov	r0, r1, d0
 8019cf6:	4a1e      	ldr	r2, [pc, #120]	; (8019d70 <cos+0x80>)
 8019cf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019cfc:	4293      	cmp	r3, r2
 8019cfe:	dc06      	bgt.n	8019d0e <cos+0x1e>
 8019d00:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019d68 <cos+0x78>
 8019d04:	f000 fcec 	bl	801a6e0 <__kernel_cos>
 8019d08:	ec51 0b10 	vmov	r0, r1, d0
 8019d0c:	e007      	b.n	8019d1e <cos+0x2e>
 8019d0e:	4a19      	ldr	r2, [pc, #100]	; (8019d74 <cos+0x84>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	dd09      	ble.n	8019d28 <cos+0x38>
 8019d14:	ee10 2a10 	vmov	r2, s0
 8019d18:	460b      	mov	r3, r1
 8019d1a:	f7e6 fac5 	bl	80002a8 <__aeabi_dsub>
 8019d1e:	ec41 0b10 	vmov	d0, r0, r1
 8019d22:	b005      	add	sp, #20
 8019d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d28:	4668      	mov	r0, sp
 8019d2a:	f000 fa35 	bl	801a198 <__ieee754_rem_pio2>
 8019d2e:	f000 0003 	and.w	r0, r0, #3
 8019d32:	2801      	cmp	r0, #1
 8019d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d38:	ed9d 0b00 	vldr	d0, [sp]
 8019d3c:	d007      	beq.n	8019d4e <cos+0x5e>
 8019d3e:	2802      	cmp	r0, #2
 8019d40:	d00e      	beq.n	8019d60 <cos+0x70>
 8019d42:	2800      	cmp	r0, #0
 8019d44:	d0de      	beq.n	8019d04 <cos+0x14>
 8019d46:	2001      	movs	r0, #1
 8019d48:	f001 f8d2 	bl	801aef0 <__kernel_sin>
 8019d4c:	e7dc      	b.n	8019d08 <cos+0x18>
 8019d4e:	f001 f8cf 	bl	801aef0 <__kernel_sin>
 8019d52:	ec53 2b10 	vmov	r2, r3, d0
 8019d56:	ee10 0a10 	vmov	r0, s0
 8019d5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019d5e:	e7de      	b.n	8019d1e <cos+0x2e>
 8019d60:	f000 fcbe 	bl	801a6e0 <__kernel_cos>
 8019d64:	e7f5      	b.n	8019d52 <cos+0x62>
 8019d66:	bf00      	nop
	...
 8019d70:	3fe921fb 	.word	0x3fe921fb
 8019d74:	7fefffff 	.word	0x7fefffff

08019d78 <round>:
 8019d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d7a:	ec57 6b10 	vmov	r6, r7, d0
 8019d7e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8019d82:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8019d86:	2c13      	cmp	r4, #19
 8019d88:	463b      	mov	r3, r7
 8019d8a:	463d      	mov	r5, r7
 8019d8c:	dc17      	bgt.n	8019dbe <round+0x46>
 8019d8e:	2c00      	cmp	r4, #0
 8019d90:	da09      	bge.n	8019da6 <round+0x2e>
 8019d92:	3401      	adds	r4, #1
 8019d94:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019d98:	d103      	bne.n	8019da2 <round+0x2a>
 8019d9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019d9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019da2:	2100      	movs	r1, #0
 8019da4:	e02c      	b.n	8019e00 <round+0x88>
 8019da6:	4a18      	ldr	r2, [pc, #96]	; (8019e08 <round+0x90>)
 8019da8:	4122      	asrs	r2, r4
 8019daa:	4217      	tst	r7, r2
 8019dac:	d100      	bne.n	8019db0 <round+0x38>
 8019dae:	b19e      	cbz	r6, 8019dd8 <round+0x60>
 8019db0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019db4:	4123      	asrs	r3, r4
 8019db6:	442b      	add	r3, r5
 8019db8:	ea23 0302 	bic.w	r3, r3, r2
 8019dbc:	e7f1      	b.n	8019da2 <round+0x2a>
 8019dbe:	2c33      	cmp	r4, #51	; 0x33
 8019dc0:	dd0d      	ble.n	8019dde <round+0x66>
 8019dc2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019dc6:	d107      	bne.n	8019dd8 <round+0x60>
 8019dc8:	4630      	mov	r0, r6
 8019dca:	4639      	mov	r1, r7
 8019dcc:	ee10 2a10 	vmov	r2, s0
 8019dd0:	f7e6 fa6c 	bl	80002ac <__adddf3>
 8019dd4:	4606      	mov	r6, r0
 8019dd6:	460f      	mov	r7, r1
 8019dd8:	ec47 6b10 	vmov	d0, r6, r7
 8019ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dde:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019de2:	f04f 30ff 	mov.w	r0, #4294967295
 8019de6:	40d0      	lsrs	r0, r2
 8019de8:	4206      	tst	r6, r0
 8019dea:	d0f5      	beq.n	8019dd8 <round+0x60>
 8019dec:	2201      	movs	r2, #1
 8019dee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019df2:	fa02 f404 	lsl.w	r4, r2, r4
 8019df6:	1931      	adds	r1, r6, r4
 8019df8:	bf28      	it	cs
 8019dfa:	189b      	addcs	r3, r3, r2
 8019dfc:	ea21 0100 	bic.w	r1, r1, r0
 8019e00:	461f      	mov	r7, r3
 8019e02:	460e      	mov	r6, r1
 8019e04:	e7e8      	b.n	8019dd8 <round+0x60>
 8019e06:	bf00      	nop
 8019e08:	000fffff 	.word	0x000fffff
 8019e0c:	00000000 	.word	0x00000000

08019e10 <sin>:
 8019e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e12:	ec51 0b10 	vmov	r0, r1, d0
 8019e16:	4a20      	ldr	r2, [pc, #128]	; (8019e98 <sin+0x88>)
 8019e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e1c:	4293      	cmp	r3, r2
 8019e1e:	dc07      	bgt.n	8019e30 <sin+0x20>
 8019e20:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019e90 <sin+0x80>
 8019e24:	2000      	movs	r0, #0
 8019e26:	f001 f863 	bl	801aef0 <__kernel_sin>
 8019e2a:	ec51 0b10 	vmov	r0, r1, d0
 8019e2e:	e007      	b.n	8019e40 <sin+0x30>
 8019e30:	4a1a      	ldr	r2, [pc, #104]	; (8019e9c <sin+0x8c>)
 8019e32:	4293      	cmp	r3, r2
 8019e34:	dd09      	ble.n	8019e4a <sin+0x3a>
 8019e36:	ee10 2a10 	vmov	r2, s0
 8019e3a:	460b      	mov	r3, r1
 8019e3c:	f7e6 fa34 	bl	80002a8 <__aeabi_dsub>
 8019e40:	ec41 0b10 	vmov	d0, r0, r1
 8019e44:	b005      	add	sp, #20
 8019e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8019e4a:	4668      	mov	r0, sp
 8019e4c:	f000 f9a4 	bl	801a198 <__ieee754_rem_pio2>
 8019e50:	f000 0003 	and.w	r0, r0, #3
 8019e54:	2801      	cmp	r0, #1
 8019e56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019e5a:	ed9d 0b00 	vldr	d0, [sp]
 8019e5e:	d004      	beq.n	8019e6a <sin+0x5a>
 8019e60:	2802      	cmp	r0, #2
 8019e62:	d005      	beq.n	8019e70 <sin+0x60>
 8019e64:	b970      	cbnz	r0, 8019e84 <sin+0x74>
 8019e66:	2001      	movs	r0, #1
 8019e68:	e7dd      	b.n	8019e26 <sin+0x16>
 8019e6a:	f000 fc39 	bl	801a6e0 <__kernel_cos>
 8019e6e:	e7dc      	b.n	8019e2a <sin+0x1a>
 8019e70:	2001      	movs	r0, #1
 8019e72:	f001 f83d 	bl	801aef0 <__kernel_sin>
 8019e76:	ec53 2b10 	vmov	r2, r3, d0
 8019e7a:	ee10 0a10 	vmov	r0, s0
 8019e7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019e82:	e7dd      	b.n	8019e40 <sin+0x30>
 8019e84:	f000 fc2c 	bl	801a6e0 <__kernel_cos>
 8019e88:	e7f5      	b.n	8019e76 <sin+0x66>
 8019e8a:	bf00      	nop
 8019e8c:	f3af 8000 	nop.w
	...
 8019e98:	3fe921fb 	.word	0x3fe921fb
 8019e9c:	7fefffff 	.word	0x7fefffff

08019ea0 <ceilf>:
 8019ea0:	ee10 3a10 	vmov	r3, s0
 8019ea4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019ea8:	0dca      	lsrs	r2, r1, #23
 8019eaa:	3a7f      	subs	r2, #127	; 0x7f
 8019eac:	2a16      	cmp	r2, #22
 8019eae:	dc2a      	bgt.n	8019f06 <ceilf+0x66>
 8019eb0:	2a00      	cmp	r2, #0
 8019eb2:	da11      	bge.n	8019ed8 <ceilf+0x38>
 8019eb4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019f18 <ceilf+0x78>
 8019eb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ebc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec4:	dd05      	ble.n	8019ed2 <ceilf+0x32>
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	db23      	blt.n	8019f12 <ceilf+0x72>
 8019eca:	2900      	cmp	r1, #0
 8019ecc:	bf18      	it	ne
 8019ece:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019ed2:	ee00 3a10 	vmov	s0, r3
 8019ed6:	4770      	bx	lr
 8019ed8:	4910      	ldr	r1, [pc, #64]	; (8019f1c <ceilf+0x7c>)
 8019eda:	4111      	asrs	r1, r2
 8019edc:	420b      	tst	r3, r1
 8019ede:	d0fa      	beq.n	8019ed6 <ceilf+0x36>
 8019ee0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019f18 <ceilf+0x78>
 8019ee4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ee8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ef0:	ddef      	ble.n	8019ed2 <ceilf+0x32>
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	bfc2      	ittt	gt
 8019ef6:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019efa:	fa40 f202 	asrgt.w	r2, r0, r2
 8019efe:	189b      	addgt	r3, r3, r2
 8019f00:	ea23 0301 	bic.w	r3, r3, r1
 8019f04:	e7e5      	b.n	8019ed2 <ceilf+0x32>
 8019f06:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019f0a:	d3e4      	bcc.n	8019ed6 <ceilf+0x36>
 8019f0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f10:	4770      	bx	lr
 8019f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019f16:	e7dc      	b.n	8019ed2 <ceilf+0x32>
 8019f18:	7149f2ca 	.word	0x7149f2ca
 8019f1c:	007fffff 	.word	0x007fffff

08019f20 <atan2>:
 8019f20:	f000 b85a 	b.w	8019fd8 <__ieee754_atan2>

08019f24 <sqrt>:
 8019f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f28:	ed2d 8b02 	vpush	{d8}
 8019f2c:	b08b      	sub	sp, #44	; 0x2c
 8019f2e:	ec55 4b10 	vmov	r4, r5, d0
 8019f32:	f000 fb23 	bl	801a57c <__ieee754_sqrt>
 8019f36:	4b26      	ldr	r3, [pc, #152]	; (8019fd0 <sqrt+0xac>)
 8019f38:	eeb0 8a40 	vmov.f32	s16, s0
 8019f3c:	eef0 8a60 	vmov.f32	s17, s1
 8019f40:	f993 6000 	ldrsb.w	r6, [r3]
 8019f44:	1c73      	adds	r3, r6, #1
 8019f46:	d02a      	beq.n	8019f9e <sqrt+0x7a>
 8019f48:	4622      	mov	r2, r4
 8019f4a:	462b      	mov	r3, r5
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	4629      	mov	r1, r5
 8019f50:	f7e6 fdfc 	bl	8000b4c <__aeabi_dcmpun>
 8019f54:	4607      	mov	r7, r0
 8019f56:	bb10      	cbnz	r0, 8019f9e <sqrt+0x7a>
 8019f58:	f04f 0800 	mov.w	r8, #0
 8019f5c:	f04f 0900 	mov.w	r9, #0
 8019f60:	4642      	mov	r2, r8
 8019f62:	464b      	mov	r3, r9
 8019f64:	4620      	mov	r0, r4
 8019f66:	4629      	mov	r1, r5
 8019f68:	f7e6 fdc8 	bl	8000afc <__aeabi_dcmplt>
 8019f6c:	b1b8      	cbz	r0, 8019f9e <sqrt+0x7a>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	9300      	str	r3, [sp, #0]
 8019f72:	4b18      	ldr	r3, [pc, #96]	; (8019fd4 <sqrt+0xb0>)
 8019f74:	9301      	str	r3, [sp, #4]
 8019f76:	9708      	str	r7, [sp, #32]
 8019f78:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019f7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019f80:	b9b6      	cbnz	r6, 8019fb0 <sqrt+0x8c>
 8019f82:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019f86:	4668      	mov	r0, sp
 8019f88:	f001 fa9e 	bl	801b4c8 <matherr>
 8019f8c:	b1d0      	cbz	r0, 8019fc4 <sqrt+0xa0>
 8019f8e:	9b08      	ldr	r3, [sp, #32]
 8019f90:	b11b      	cbz	r3, 8019f9a <sqrt+0x76>
 8019f92:	f7fb fc43 	bl	801581c <__errno>
 8019f96:	9b08      	ldr	r3, [sp, #32]
 8019f98:	6003      	str	r3, [r0, #0]
 8019f9a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019f9e:	eeb0 0a48 	vmov.f32	s0, s16
 8019fa2:	eef0 0a68 	vmov.f32	s1, s17
 8019fa6:	b00b      	add	sp, #44	; 0x2c
 8019fa8:	ecbd 8b02 	vpop	{d8}
 8019fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fb0:	4642      	mov	r2, r8
 8019fb2:	464b      	mov	r3, r9
 8019fb4:	4640      	mov	r0, r8
 8019fb6:	4649      	mov	r1, r9
 8019fb8:	f7e6 fc58 	bl	800086c <__aeabi_ddiv>
 8019fbc:	2e02      	cmp	r6, #2
 8019fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019fc2:	d1e0      	bne.n	8019f86 <sqrt+0x62>
 8019fc4:	f7fb fc2a 	bl	801581c <__errno>
 8019fc8:	2321      	movs	r3, #33	; 0x21
 8019fca:	6003      	str	r3, [r0, #0]
 8019fcc:	e7df      	b.n	8019f8e <sqrt+0x6a>
 8019fce:	bf00      	nop
 8019fd0:	20001030 	.word	0x20001030
 8019fd4:	0801bf1c 	.word	0x0801bf1c

08019fd8 <__ieee754_atan2>:
 8019fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fdc:	ec57 6b11 	vmov	r6, r7, d1
 8019fe0:	4273      	negs	r3, r6
 8019fe2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019fe6:	4333      	orrs	r3, r6
 8019fe8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801a190 <__ieee754_atan2+0x1b8>
 8019fec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019ff0:	4573      	cmp	r3, lr
 8019ff2:	ec51 0b10 	vmov	r0, r1, d0
 8019ff6:	ee11 8a10 	vmov	r8, s2
 8019ffa:	d80a      	bhi.n	801a012 <__ieee754_atan2+0x3a>
 8019ffc:	4244      	negs	r4, r0
 8019ffe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a002:	4304      	orrs	r4, r0
 801a004:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a008:	4574      	cmp	r4, lr
 801a00a:	468c      	mov	ip, r1
 801a00c:	ee10 9a10 	vmov	r9, s0
 801a010:	d907      	bls.n	801a022 <__ieee754_atan2+0x4a>
 801a012:	4632      	mov	r2, r6
 801a014:	463b      	mov	r3, r7
 801a016:	f7e6 f949 	bl	80002ac <__adddf3>
 801a01a:	ec41 0b10 	vmov	d0, r0, r1
 801a01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a022:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a026:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a02a:	4334      	orrs	r4, r6
 801a02c:	d103      	bne.n	801a036 <__ieee754_atan2+0x5e>
 801a02e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a032:	f001 b819 	b.w	801b068 <atan>
 801a036:	17bc      	asrs	r4, r7, #30
 801a038:	f004 0402 	and.w	r4, r4, #2
 801a03c:	ea53 0909 	orrs.w	r9, r3, r9
 801a040:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a044:	d107      	bne.n	801a056 <__ieee754_atan2+0x7e>
 801a046:	2c02      	cmp	r4, #2
 801a048:	d073      	beq.n	801a132 <__ieee754_atan2+0x15a>
 801a04a:	2c03      	cmp	r4, #3
 801a04c:	d1e5      	bne.n	801a01a <__ieee754_atan2+0x42>
 801a04e:	a13e      	add	r1, pc, #248	; (adr r1, 801a148 <__ieee754_atan2+0x170>)
 801a050:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a054:	e7e1      	b.n	801a01a <__ieee754_atan2+0x42>
 801a056:	ea52 0808 	orrs.w	r8, r2, r8
 801a05a:	d106      	bne.n	801a06a <__ieee754_atan2+0x92>
 801a05c:	f1bc 0f00 	cmp.w	ip, #0
 801a060:	da6b      	bge.n	801a13a <__ieee754_atan2+0x162>
 801a062:	a13b      	add	r1, pc, #236	; (adr r1, 801a150 <__ieee754_atan2+0x178>)
 801a064:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a068:	e7d7      	b.n	801a01a <__ieee754_atan2+0x42>
 801a06a:	4572      	cmp	r2, lr
 801a06c:	d120      	bne.n	801a0b0 <__ieee754_atan2+0xd8>
 801a06e:	4293      	cmp	r3, r2
 801a070:	d111      	bne.n	801a096 <__ieee754_atan2+0xbe>
 801a072:	2c02      	cmp	r4, #2
 801a074:	d007      	beq.n	801a086 <__ieee754_atan2+0xae>
 801a076:	2c03      	cmp	r4, #3
 801a078:	d009      	beq.n	801a08e <__ieee754_atan2+0xb6>
 801a07a:	2c01      	cmp	r4, #1
 801a07c:	d155      	bne.n	801a12a <__ieee754_atan2+0x152>
 801a07e:	a136      	add	r1, pc, #216	; (adr r1, 801a158 <__ieee754_atan2+0x180>)
 801a080:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a084:	e7c9      	b.n	801a01a <__ieee754_atan2+0x42>
 801a086:	a136      	add	r1, pc, #216	; (adr r1, 801a160 <__ieee754_atan2+0x188>)
 801a088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a08c:	e7c5      	b.n	801a01a <__ieee754_atan2+0x42>
 801a08e:	a136      	add	r1, pc, #216	; (adr r1, 801a168 <__ieee754_atan2+0x190>)
 801a090:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a094:	e7c1      	b.n	801a01a <__ieee754_atan2+0x42>
 801a096:	2c02      	cmp	r4, #2
 801a098:	d04b      	beq.n	801a132 <__ieee754_atan2+0x15a>
 801a09a:	2c03      	cmp	r4, #3
 801a09c:	d0d7      	beq.n	801a04e <__ieee754_atan2+0x76>
 801a09e:	2c01      	cmp	r4, #1
 801a0a0:	f04f 0000 	mov.w	r0, #0
 801a0a4:	d102      	bne.n	801a0ac <__ieee754_atan2+0xd4>
 801a0a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a0aa:	e7b6      	b.n	801a01a <__ieee754_atan2+0x42>
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	e7b4      	b.n	801a01a <__ieee754_atan2+0x42>
 801a0b0:	4573      	cmp	r3, lr
 801a0b2:	d0d3      	beq.n	801a05c <__ieee754_atan2+0x84>
 801a0b4:	1a9b      	subs	r3, r3, r2
 801a0b6:	151b      	asrs	r3, r3, #20
 801a0b8:	2b3c      	cmp	r3, #60	; 0x3c
 801a0ba:	dc1e      	bgt.n	801a0fa <__ieee754_atan2+0x122>
 801a0bc:	2f00      	cmp	r7, #0
 801a0be:	da01      	bge.n	801a0c4 <__ieee754_atan2+0xec>
 801a0c0:	333c      	adds	r3, #60	; 0x3c
 801a0c2:	db1e      	blt.n	801a102 <__ieee754_atan2+0x12a>
 801a0c4:	4632      	mov	r2, r6
 801a0c6:	463b      	mov	r3, r7
 801a0c8:	f7e6 fbd0 	bl	800086c <__aeabi_ddiv>
 801a0cc:	ec41 0b10 	vmov	d0, r0, r1
 801a0d0:	f001 f96a 	bl	801b3a8 <fabs>
 801a0d4:	f000 ffc8 	bl	801b068 <atan>
 801a0d8:	ec51 0b10 	vmov	r0, r1, d0
 801a0dc:	2c01      	cmp	r4, #1
 801a0de:	d013      	beq.n	801a108 <__ieee754_atan2+0x130>
 801a0e0:	2c02      	cmp	r4, #2
 801a0e2:	d015      	beq.n	801a110 <__ieee754_atan2+0x138>
 801a0e4:	2c00      	cmp	r4, #0
 801a0e6:	d098      	beq.n	801a01a <__ieee754_atan2+0x42>
 801a0e8:	a321      	add	r3, pc, #132	; (adr r3, 801a170 <__ieee754_atan2+0x198>)
 801a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ee:	f7e6 f8db 	bl	80002a8 <__aeabi_dsub>
 801a0f2:	a321      	add	r3, pc, #132	; (adr r3, 801a178 <__ieee754_atan2+0x1a0>)
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	e014      	b.n	801a124 <__ieee754_atan2+0x14c>
 801a0fa:	a121      	add	r1, pc, #132	; (adr r1, 801a180 <__ieee754_atan2+0x1a8>)
 801a0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a100:	e7ec      	b.n	801a0dc <__ieee754_atan2+0x104>
 801a102:	2000      	movs	r0, #0
 801a104:	2100      	movs	r1, #0
 801a106:	e7e9      	b.n	801a0dc <__ieee754_atan2+0x104>
 801a108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a10c:	4619      	mov	r1, r3
 801a10e:	e784      	b.n	801a01a <__ieee754_atan2+0x42>
 801a110:	a317      	add	r3, pc, #92	; (adr r3, 801a170 <__ieee754_atan2+0x198>)
 801a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a116:	f7e6 f8c7 	bl	80002a8 <__aeabi_dsub>
 801a11a:	4602      	mov	r2, r0
 801a11c:	460b      	mov	r3, r1
 801a11e:	a116      	add	r1, pc, #88	; (adr r1, 801a178 <__ieee754_atan2+0x1a0>)
 801a120:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a124:	f7e6 f8c0 	bl	80002a8 <__aeabi_dsub>
 801a128:	e777      	b.n	801a01a <__ieee754_atan2+0x42>
 801a12a:	a117      	add	r1, pc, #92	; (adr r1, 801a188 <__ieee754_atan2+0x1b0>)
 801a12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a130:	e773      	b.n	801a01a <__ieee754_atan2+0x42>
 801a132:	a111      	add	r1, pc, #68	; (adr r1, 801a178 <__ieee754_atan2+0x1a0>)
 801a134:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a138:	e76f      	b.n	801a01a <__ieee754_atan2+0x42>
 801a13a:	a111      	add	r1, pc, #68	; (adr r1, 801a180 <__ieee754_atan2+0x1a8>)
 801a13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a140:	e76b      	b.n	801a01a <__ieee754_atan2+0x42>
 801a142:	bf00      	nop
 801a144:	f3af 8000 	nop.w
 801a148:	54442d18 	.word	0x54442d18
 801a14c:	c00921fb 	.word	0xc00921fb
 801a150:	54442d18 	.word	0x54442d18
 801a154:	bff921fb 	.word	0xbff921fb
 801a158:	54442d18 	.word	0x54442d18
 801a15c:	bfe921fb 	.word	0xbfe921fb
 801a160:	7f3321d2 	.word	0x7f3321d2
 801a164:	4002d97c 	.word	0x4002d97c
 801a168:	7f3321d2 	.word	0x7f3321d2
 801a16c:	c002d97c 	.word	0xc002d97c
 801a170:	33145c07 	.word	0x33145c07
 801a174:	3ca1a626 	.word	0x3ca1a626
 801a178:	54442d18 	.word	0x54442d18
 801a17c:	400921fb 	.word	0x400921fb
 801a180:	54442d18 	.word	0x54442d18
 801a184:	3ff921fb 	.word	0x3ff921fb
 801a188:	54442d18 	.word	0x54442d18
 801a18c:	3fe921fb 	.word	0x3fe921fb
 801a190:	7ff00000 	.word	0x7ff00000
 801a194:	00000000 	.word	0x00000000

0801a198 <__ieee754_rem_pio2>:
 801a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a19c:	ec57 6b10 	vmov	r6, r7, d0
 801a1a0:	4bc3      	ldr	r3, [pc, #780]	; (801a4b0 <__ieee754_rem_pio2+0x318>)
 801a1a2:	b08d      	sub	sp, #52	; 0x34
 801a1a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a1a8:	4598      	cmp	r8, r3
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	9704      	str	r7, [sp, #16]
 801a1ae:	dc07      	bgt.n	801a1c0 <__ieee754_rem_pio2+0x28>
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	ed84 0b00 	vstr	d0, [r4]
 801a1b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a1bc:	2500      	movs	r5, #0
 801a1be:	e027      	b.n	801a210 <__ieee754_rem_pio2+0x78>
 801a1c0:	4bbc      	ldr	r3, [pc, #752]	; (801a4b4 <__ieee754_rem_pio2+0x31c>)
 801a1c2:	4598      	cmp	r8, r3
 801a1c4:	dc75      	bgt.n	801a2b2 <__ieee754_rem_pio2+0x11a>
 801a1c6:	9b04      	ldr	r3, [sp, #16]
 801a1c8:	4dbb      	ldr	r5, [pc, #748]	; (801a4b8 <__ieee754_rem_pio2+0x320>)
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	ee10 0a10 	vmov	r0, s0
 801a1d0:	a3a9      	add	r3, pc, #676	; (adr r3, 801a478 <__ieee754_rem_pio2+0x2e0>)
 801a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d6:	4639      	mov	r1, r7
 801a1d8:	dd36      	ble.n	801a248 <__ieee754_rem_pio2+0xb0>
 801a1da:	f7e6 f865 	bl	80002a8 <__aeabi_dsub>
 801a1de:	45a8      	cmp	r8, r5
 801a1e0:	4606      	mov	r6, r0
 801a1e2:	460f      	mov	r7, r1
 801a1e4:	d018      	beq.n	801a218 <__ieee754_rem_pio2+0x80>
 801a1e6:	a3a6      	add	r3, pc, #664	; (adr r3, 801a480 <__ieee754_rem_pio2+0x2e8>)
 801a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ec:	f7e6 f85c 	bl	80002a8 <__aeabi_dsub>
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	e9c4 2300 	strd	r2, r3, [r4]
 801a1f8:	4630      	mov	r0, r6
 801a1fa:	4639      	mov	r1, r7
 801a1fc:	f7e6 f854 	bl	80002a8 <__aeabi_dsub>
 801a200:	a39f      	add	r3, pc, #636	; (adr r3, 801a480 <__ieee754_rem_pio2+0x2e8>)
 801a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a206:	f7e6 f84f 	bl	80002a8 <__aeabi_dsub>
 801a20a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a20e:	2501      	movs	r5, #1
 801a210:	4628      	mov	r0, r5
 801a212:	b00d      	add	sp, #52	; 0x34
 801a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a218:	a39b      	add	r3, pc, #620	; (adr r3, 801a488 <__ieee754_rem_pio2+0x2f0>)
 801a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21e:	f7e6 f843 	bl	80002a8 <__aeabi_dsub>
 801a222:	a39b      	add	r3, pc, #620	; (adr r3, 801a490 <__ieee754_rem_pio2+0x2f8>)
 801a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a228:	4606      	mov	r6, r0
 801a22a:	460f      	mov	r7, r1
 801a22c:	f7e6 f83c 	bl	80002a8 <__aeabi_dsub>
 801a230:	4602      	mov	r2, r0
 801a232:	460b      	mov	r3, r1
 801a234:	e9c4 2300 	strd	r2, r3, [r4]
 801a238:	4630      	mov	r0, r6
 801a23a:	4639      	mov	r1, r7
 801a23c:	f7e6 f834 	bl	80002a8 <__aeabi_dsub>
 801a240:	a393      	add	r3, pc, #588	; (adr r3, 801a490 <__ieee754_rem_pio2+0x2f8>)
 801a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a246:	e7de      	b.n	801a206 <__ieee754_rem_pio2+0x6e>
 801a248:	f7e6 f830 	bl	80002ac <__adddf3>
 801a24c:	45a8      	cmp	r8, r5
 801a24e:	4606      	mov	r6, r0
 801a250:	460f      	mov	r7, r1
 801a252:	d016      	beq.n	801a282 <__ieee754_rem_pio2+0xea>
 801a254:	a38a      	add	r3, pc, #552	; (adr r3, 801a480 <__ieee754_rem_pio2+0x2e8>)
 801a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25a:	f7e6 f827 	bl	80002ac <__adddf3>
 801a25e:	4602      	mov	r2, r0
 801a260:	460b      	mov	r3, r1
 801a262:	e9c4 2300 	strd	r2, r3, [r4]
 801a266:	4630      	mov	r0, r6
 801a268:	4639      	mov	r1, r7
 801a26a:	f7e6 f81d 	bl	80002a8 <__aeabi_dsub>
 801a26e:	a384      	add	r3, pc, #528	; (adr r3, 801a480 <__ieee754_rem_pio2+0x2e8>)
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	f7e6 f81a 	bl	80002ac <__adddf3>
 801a278:	f04f 35ff 	mov.w	r5, #4294967295
 801a27c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a280:	e7c6      	b.n	801a210 <__ieee754_rem_pio2+0x78>
 801a282:	a381      	add	r3, pc, #516	; (adr r3, 801a488 <__ieee754_rem_pio2+0x2f0>)
 801a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a288:	f7e6 f810 	bl	80002ac <__adddf3>
 801a28c:	a380      	add	r3, pc, #512	; (adr r3, 801a490 <__ieee754_rem_pio2+0x2f8>)
 801a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a292:	4606      	mov	r6, r0
 801a294:	460f      	mov	r7, r1
 801a296:	f7e6 f809 	bl	80002ac <__adddf3>
 801a29a:	4602      	mov	r2, r0
 801a29c:	460b      	mov	r3, r1
 801a29e:	e9c4 2300 	strd	r2, r3, [r4]
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	4639      	mov	r1, r7
 801a2a6:	f7e5 ffff 	bl	80002a8 <__aeabi_dsub>
 801a2aa:	a379      	add	r3, pc, #484	; (adr r3, 801a490 <__ieee754_rem_pio2+0x2f8>)
 801a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2b0:	e7e0      	b.n	801a274 <__ieee754_rem_pio2+0xdc>
 801a2b2:	4b82      	ldr	r3, [pc, #520]	; (801a4bc <__ieee754_rem_pio2+0x324>)
 801a2b4:	4598      	cmp	r8, r3
 801a2b6:	f300 80d0 	bgt.w	801a45a <__ieee754_rem_pio2+0x2c2>
 801a2ba:	f001 f875 	bl	801b3a8 <fabs>
 801a2be:	ec57 6b10 	vmov	r6, r7, d0
 801a2c2:	ee10 0a10 	vmov	r0, s0
 801a2c6:	a374      	add	r3, pc, #464	; (adr r3, 801a498 <__ieee754_rem_pio2+0x300>)
 801a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2cc:	4639      	mov	r1, r7
 801a2ce:	f7e6 f9a3 	bl	8000618 <__aeabi_dmul>
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	4b7a      	ldr	r3, [pc, #488]	; (801a4c0 <__ieee754_rem_pio2+0x328>)
 801a2d6:	f7e5 ffe9 	bl	80002ac <__adddf3>
 801a2da:	f7e6 fc4d 	bl	8000b78 <__aeabi_d2iz>
 801a2de:	4605      	mov	r5, r0
 801a2e0:	f7e6 f930 	bl	8000544 <__aeabi_i2d>
 801a2e4:	a364      	add	r3, pc, #400	; (adr r3, 801a478 <__ieee754_rem_pio2+0x2e0>)
 801a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a2ee:	f7e6 f993 	bl	8000618 <__aeabi_dmul>
 801a2f2:	4602      	mov	r2, r0
 801a2f4:	460b      	mov	r3, r1
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	4639      	mov	r1, r7
 801a2fa:	f7e5 ffd5 	bl	80002a8 <__aeabi_dsub>
 801a2fe:	a360      	add	r3, pc, #384	; (adr r3, 801a480 <__ieee754_rem_pio2+0x2e8>)
 801a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a304:	4682      	mov	sl, r0
 801a306:	468b      	mov	fp, r1
 801a308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a30c:	f7e6 f984 	bl	8000618 <__aeabi_dmul>
 801a310:	2d1f      	cmp	r5, #31
 801a312:	4606      	mov	r6, r0
 801a314:	460f      	mov	r7, r1
 801a316:	dc0c      	bgt.n	801a332 <__ieee754_rem_pio2+0x19a>
 801a318:	1e6a      	subs	r2, r5, #1
 801a31a:	4b6a      	ldr	r3, [pc, #424]	; (801a4c4 <__ieee754_rem_pio2+0x32c>)
 801a31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a320:	4543      	cmp	r3, r8
 801a322:	d006      	beq.n	801a332 <__ieee754_rem_pio2+0x19a>
 801a324:	4632      	mov	r2, r6
 801a326:	463b      	mov	r3, r7
 801a328:	4650      	mov	r0, sl
 801a32a:	4659      	mov	r1, fp
 801a32c:	f7e5 ffbc 	bl	80002a8 <__aeabi_dsub>
 801a330:	e00e      	b.n	801a350 <__ieee754_rem_pio2+0x1b8>
 801a332:	4632      	mov	r2, r6
 801a334:	463b      	mov	r3, r7
 801a336:	4650      	mov	r0, sl
 801a338:	4659      	mov	r1, fp
 801a33a:	f7e5 ffb5 	bl	80002a8 <__aeabi_dsub>
 801a33e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a342:	9305      	str	r3, [sp, #20]
 801a344:	9a05      	ldr	r2, [sp, #20]
 801a346:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a34a:	1ad3      	subs	r3, r2, r3
 801a34c:	2b10      	cmp	r3, #16
 801a34e:	dc02      	bgt.n	801a356 <__ieee754_rem_pio2+0x1be>
 801a350:	e9c4 0100 	strd	r0, r1, [r4]
 801a354:	e039      	b.n	801a3ca <__ieee754_rem_pio2+0x232>
 801a356:	a34c      	add	r3, pc, #304	; (adr r3, 801a488 <__ieee754_rem_pio2+0x2f0>)
 801a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a360:	f7e6 f95a 	bl	8000618 <__aeabi_dmul>
 801a364:	4606      	mov	r6, r0
 801a366:	460f      	mov	r7, r1
 801a368:	4602      	mov	r2, r0
 801a36a:	460b      	mov	r3, r1
 801a36c:	4650      	mov	r0, sl
 801a36e:	4659      	mov	r1, fp
 801a370:	f7e5 ff9a 	bl	80002a8 <__aeabi_dsub>
 801a374:	4602      	mov	r2, r0
 801a376:	460b      	mov	r3, r1
 801a378:	4680      	mov	r8, r0
 801a37a:	4689      	mov	r9, r1
 801a37c:	4650      	mov	r0, sl
 801a37e:	4659      	mov	r1, fp
 801a380:	f7e5 ff92 	bl	80002a8 <__aeabi_dsub>
 801a384:	4632      	mov	r2, r6
 801a386:	463b      	mov	r3, r7
 801a388:	f7e5 ff8e 	bl	80002a8 <__aeabi_dsub>
 801a38c:	a340      	add	r3, pc, #256	; (adr r3, 801a490 <__ieee754_rem_pio2+0x2f8>)
 801a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a392:	4606      	mov	r6, r0
 801a394:	460f      	mov	r7, r1
 801a396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a39a:	f7e6 f93d 	bl	8000618 <__aeabi_dmul>
 801a39e:	4632      	mov	r2, r6
 801a3a0:	463b      	mov	r3, r7
 801a3a2:	f7e5 ff81 	bl	80002a8 <__aeabi_dsub>
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	460f      	mov	r7, r1
 801a3ae:	4640      	mov	r0, r8
 801a3b0:	4649      	mov	r1, r9
 801a3b2:	f7e5 ff79 	bl	80002a8 <__aeabi_dsub>
 801a3b6:	9a05      	ldr	r2, [sp, #20]
 801a3b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a3bc:	1ad3      	subs	r3, r2, r3
 801a3be:	2b31      	cmp	r3, #49	; 0x31
 801a3c0:	dc20      	bgt.n	801a404 <__ieee754_rem_pio2+0x26c>
 801a3c2:	e9c4 0100 	strd	r0, r1, [r4]
 801a3c6:	46c2      	mov	sl, r8
 801a3c8:	46cb      	mov	fp, r9
 801a3ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a3ce:	4650      	mov	r0, sl
 801a3d0:	4642      	mov	r2, r8
 801a3d2:	464b      	mov	r3, r9
 801a3d4:	4659      	mov	r1, fp
 801a3d6:	f7e5 ff67 	bl	80002a8 <__aeabi_dsub>
 801a3da:	463b      	mov	r3, r7
 801a3dc:	4632      	mov	r2, r6
 801a3de:	f7e5 ff63 	bl	80002a8 <__aeabi_dsub>
 801a3e2:	9b04      	ldr	r3, [sp, #16]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a3ea:	f6bf af11 	bge.w	801a210 <__ieee754_rem_pio2+0x78>
 801a3ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a3f2:	6063      	str	r3, [r4, #4]
 801a3f4:	f8c4 8000 	str.w	r8, [r4]
 801a3f8:	60a0      	str	r0, [r4, #8]
 801a3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3fe:	60e3      	str	r3, [r4, #12]
 801a400:	426d      	negs	r5, r5
 801a402:	e705      	b.n	801a210 <__ieee754_rem_pio2+0x78>
 801a404:	a326      	add	r3, pc, #152	; (adr r3, 801a4a0 <__ieee754_rem_pio2+0x308>)
 801a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a40e:	f7e6 f903 	bl	8000618 <__aeabi_dmul>
 801a412:	4606      	mov	r6, r0
 801a414:	460f      	mov	r7, r1
 801a416:	4602      	mov	r2, r0
 801a418:	460b      	mov	r3, r1
 801a41a:	4640      	mov	r0, r8
 801a41c:	4649      	mov	r1, r9
 801a41e:	f7e5 ff43 	bl	80002a8 <__aeabi_dsub>
 801a422:	4602      	mov	r2, r0
 801a424:	460b      	mov	r3, r1
 801a426:	4682      	mov	sl, r0
 801a428:	468b      	mov	fp, r1
 801a42a:	4640      	mov	r0, r8
 801a42c:	4649      	mov	r1, r9
 801a42e:	f7e5 ff3b 	bl	80002a8 <__aeabi_dsub>
 801a432:	4632      	mov	r2, r6
 801a434:	463b      	mov	r3, r7
 801a436:	f7e5 ff37 	bl	80002a8 <__aeabi_dsub>
 801a43a:	a31b      	add	r3, pc, #108	; (adr r3, 801a4a8 <__ieee754_rem_pio2+0x310>)
 801a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a440:	4606      	mov	r6, r0
 801a442:	460f      	mov	r7, r1
 801a444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a448:	f7e6 f8e6 	bl	8000618 <__aeabi_dmul>
 801a44c:	4632      	mov	r2, r6
 801a44e:	463b      	mov	r3, r7
 801a450:	f7e5 ff2a 	bl	80002a8 <__aeabi_dsub>
 801a454:	4606      	mov	r6, r0
 801a456:	460f      	mov	r7, r1
 801a458:	e764      	b.n	801a324 <__ieee754_rem_pio2+0x18c>
 801a45a:	4b1b      	ldr	r3, [pc, #108]	; (801a4c8 <__ieee754_rem_pio2+0x330>)
 801a45c:	4598      	cmp	r8, r3
 801a45e:	dd35      	ble.n	801a4cc <__ieee754_rem_pio2+0x334>
 801a460:	ee10 2a10 	vmov	r2, s0
 801a464:	463b      	mov	r3, r7
 801a466:	4630      	mov	r0, r6
 801a468:	4639      	mov	r1, r7
 801a46a:	f7e5 ff1d 	bl	80002a8 <__aeabi_dsub>
 801a46e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a472:	e9c4 0100 	strd	r0, r1, [r4]
 801a476:	e6a1      	b.n	801a1bc <__ieee754_rem_pio2+0x24>
 801a478:	54400000 	.word	0x54400000
 801a47c:	3ff921fb 	.word	0x3ff921fb
 801a480:	1a626331 	.word	0x1a626331
 801a484:	3dd0b461 	.word	0x3dd0b461
 801a488:	1a600000 	.word	0x1a600000
 801a48c:	3dd0b461 	.word	0x3dd0b461
 801a490:	2e037073 	.word	0x2e037073
 801a494:	3ba3198a 	.word	0x3ba3198a
 801a498:	6dc9c883 	.word	0x6dc9c883
 801a49c:	3fe45f30 	.word	0x3fe45f30
 801a4a0:	2e000000 	.word	0x2e000000
 801a4a4:	3ba3198a 	.word	0x3ba3198a
 801a4a8:	252049c1 	.word	0x252049c1
 801a4ac:	397b839a 	.word	0x397b839a
 801a4b0:	3fe921fb 	.word	0x3fe921fb
 801a4b4:	4002d97b 	.word	0x4002d97b
 801a4b8:	3ff921fb 	.word	0x3ff921fb
 801a4bc:	413921fb 	.word	0x413921fb
 801a4c0:	3fe00000 	.word	0x3fe00000
 801a4c4:	0801bf24 	.word	0x0801bf24
 801a4c8:	7fefffff 	.word	0x7fefffff
 801a4cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a4d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a4d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a4d8:	4630      	mov	r0, r6
 801a4da:	460f      	mov	r7, r1
 801a4dc:	f7e6 fb4c 	bl	8000b78 <__aeabi_d2iz>
 801a4e0:	f7e6 f830 	bl	8000544 <__aeabi_i2d>
 801a4e4:	4602      	mov	r2, r0
 801a4e6:	460b      	mov	r3, r1
 801a4e8:	4630      	mov	r0, r6
 801a4ea:	4639      	mov	r1, r7
 801a4ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a4f0:	f7e5 feda 	bl	80002a8 <__aeabi_dsub>
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	4b1f      	ldr	r3, [pc, #124]	; (801a574 <__ieee754_rem_pio2+0x3dc>)
 801a4f8:	f7e6 f88e 	bl	8000618 <__aeabi_dmul>
 801a4fc:	460f      	mov	r7, r1
 801a4fe:	4606      	mov	r6, r0
 801a500:	f7e6 fb3a 	bl	8000b78 <__aeabi_d2iz>
 801a504:	f7e6 f81e 	bl	8000544 <__aeabi_i2d>
 801a508:	4602      	mov	r2, r0
 801a50a:	460b      	mov	r3, r1
 801a50c:	4630      	mov	r0, r6
 801a50e:	4639      	mov	r1, r7
 801a510:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a514:	f7e5 fec8 	bl	80002a8 <__aeabi_dsub>
 801a518:	2200      	movs	r2, #0
 801a51a:	4b16      	ldr	r3, [pc, #88]	; (801a574 <__ieee754_rem_pio2+0x3dc>)
 801a51c:	f7e6 f87c 	bl	8000618 <__aeabi_dmul>
 801a520:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a524:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a528:	f04f 0803 	mov.w	r8, #3
 801a52c:	2600      	movs	r6, #0
 801a52e:	2700      	movs	r7, #0
 801a530:	4632      	mov	r2, r6
 801a532:	463b      	mov	r3, r7
 801a534:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a538:	f108 3aff 	add.w	sl, r8, #4294967295
 801a53c:	f7e6 fad4 	bl	8000ae8 <__aeabi_dcmpeq>
 801a540:	b9b0      	cbnz	r0, 801a570 <__ieee754_rem_pio2+0x3d8>
 801a542:	4b0d      	ldr	r3, [pc, #52]	; (801a578 <__ieee754_rem_pio2+0x3e0>)
 801a544:	9301      	str	r3, [sp, #4]
 801a546:	2302      	movs	r3, #2
 801a548:	9300      	str	r3, [sp, #0]
 801a54a:	462a      	mov	r2, r5
 801a54c:	4643      	mov	r3, r8
 801a54e:	4621      	mov	r1, r4
 801a550:	a806      	add	r0, sp, #24
 801a552:	f000 f98d 	bl	801a870 <__kernel_rem_pio2>
 801a556:	9b04      	ldr	r3, [sp, #16]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	4605      	mov	r5, r0
 801a55c:	f6bf ae58 	bge.w	801a210 <__ieee754_rem_pio2+0x78>
 801a560:	6863      	ldr	r3, [r4, #4]
 801a562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a566:	6063      	str	r3, [r4, #4]
 801a568:	68e3      	ldr	r3, [r4, #12]
 801a56a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a56e:	e746      	b.n	801a3fe <__ieee754_rem_pio2+0x266>
 801a570:	46d0      	mov	r8, sl
 801a572:	e7dd      	b.n	801a530 <__ieee754_rem_pio2+0x398>
 801a574:	41700000 	.word	0x41700000
 801a578:	0801bfa4 	.word	0x0801bfa4

0801a57c <__ieee754_sqrt>:
 801a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a580:	4955      	ldr	r1, [pc, #340]	; (801a6d8 <__ieee754_sqrt+0x15c>)
 801a582:	ec55 4b10 	vmov	r4, r5, d0
 801a586:	43a9      	bics	r1, r5
 801a588:	462b      	mov	r3, r5
 801a58a:	462a      	mov	r2, r5
 801a58c:	d112      	bne.n	801a5b4 <__ieee754_sqrt+0x38>
 801a58e:	ee10 2a10 	vmov	r2, s0
 801a592:	ee10 0a10 	vmov	r0, s0
 801a596:	4629      	mov	r1, r5
 801a598:	f7e6 f83e 	bl	8000618 <__aeabi_dmul>
 801a59c:	4602      	mov	r2, r0
 801a59e:	460b      	mov	r3, r1
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	4629      	mov	r1, r5
 801a5a4:	f7e5 fe82 	bl	80002ac <__adddf3>
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	460d      	mov	r5, r1
 801a5ac:	ec45 4b10 	vmov	d0, r4, r5
 801a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5b4:	2d00      	cmp	r5, #0
 801a5b6:	ee10 0a10 	vmov	r0, s0
 801a5ba:	4621      	mov	r1, r4
 801a5bc:	dc0f      	bgt.n	801a5de <__ieee754_sqrt+0x62>
 801a5be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a5c2:	4330      	orrs	r0, r6
 801a5c4:	d0f2      	beq.n	801a5ac <__ieee754_sqrt+0x30>
 801a5c6:	b155      	cbz	r5, 801a5de <__ieee754_sqrt+0x62>
 801a5c8:	ee10 2a10 	vmov	r2, s0
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	4629      	mov	r1, r5
 801a5d0:	f7e5 fe6a 	bl	80002a8 <__aeabi_dsub>
 801a5d4:	4602      	mov	r2, r0
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	f7e6 f948 	bl	800086c <__aeabi_ddiv>
 801a5dc:	e7e4      	b.n	801a5a8 <__ieee754_sqrt+0x2c>
 801a5de:	151b      	asrs	r3, r3, #20
 801a5e0:	d073      	beq.n	801a6ca <__ieee754_sqrt+0x14e>
 801a5e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a5e6:	07dd      	lsls	r5, r3, #31
 801a5e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a5ec:	bf48      	it	mi
 801a5ee:	0fc8      	lsrmi	r0, r1, #31
 801a5f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a5f4:	bf44      	itt	mi
 801a5f6:	0049      	lslmi	r1, r1, #1
 801a5f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a5fc:	2500      	movs	r5, #0
 801a5fe:	1058      	asrs	r0, r3, #1
 801a600:	0fcb      	lsrs	r3, r1, #31
 801a602:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a606:	0049      	lsls	r1, r1, #1
 801a608:	2316      	movs	r3, #22
 801a60a:	462c      	mov	r4, r5
 801a60c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a610:	19a7      	adds	r7, r4, r6
 801a612:	4297      	cmp	r7, r2
 801a614:	bfde      	ittt	le
 801a616:	19bc      	addle	r4, r7, r6
 801a618:	1bd2      	suble	r2, r2, r7
 801a61a:	19ad      	addle	r5, r5, r6
 801a61c:	0fcf      	lsrs	r7, r1, #31
 801a61e:	3b01      	subs	r3, #1
 801a620:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a624:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a628:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a62c:	d1f0      	bne.n	801a610 <__ieee754_sqrt+0x94>
 801a62e:	f04f 0c20 	mov.w	ip, #32
 801a632:	469e      	mov	lr, r3
 801a634:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a638:	42a2      	cmp	r2, r4
 801a63a:	eb06 070e 	add.w	r7, r6, lr
 801a63e:	dc02      	bgt.n	801a646 <__ieee754_sqrt+0xca>
 801a640:	d112      	bne.n	801a668 <__ieee754_sqrt+0xec>
 801a642:	428f      	cmp	r7, r1
 801a644:	d810      	bhi.n	801a668 <__ieee754_sqrt+0xec>
 801a646:	2f00      	cmp	r7, #0
 801a648:	eb07 0e06 	add.w	lr, r7, r6
 801a64c:	da42      	bge.n	801a6d4 <__ieee754_sqrt+0x158>
 801a64e:	f1be 0f00 	cmp.w	lr, #0
 801a652:	db3f      	blt.n	801a6d4 <__ieee754_sqrt+0x158>
 801a654:	f104 0801 	add.w	r8, r4, #1
 801a658:	1b12      	subs	r2, r2, r4
 801a65a:	428f      	cmp	r7, r1
 801a65c:	bf88      	it	hi
 801a65e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a662:	1bc9      	subs	r1, r1, r7
 801a664:	4433      	add	r3, r6
 801a666:	4644      	mov	r4, r8
 801a668:	0052      	lsls	r2, r2, #1
 801a66a:	f1bc 0c01 	subs.w	ip, ip, #1
 801a66e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a672:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a676:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a67a:	d1dd      	bne.n	801a638 <__ieee754_sqrt+0xbc>
 801a67c:	430a      	orrs	r2, r1
 801a67e:	d006      	beq.n	801a68e <__ieee754_sqrt+0x112>
 801a680:	1c5c      	adds	r4, r3, #1
 801a682:	bf13      	iteet	ne
 801a684:	3301      	addne	r3, #1
 801a686:	3501      	addeq	r5, #1
 801a688:	4663      	moveq	r3, ip
 801a68a:	f023 0301 	bicne.w	r3, r3, #1
 801a68e:	106a      	asrs	r2, r5, #1
 801a690:	085b      	lsrs	r3, r3, #1
 801a692:	07e9      	lsls	r1, r5, #31
 801a694:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a698:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a69c:	bf48      	it	mi
 801a69e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a6a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a6a6:	461c      	mov	r4, r3
 801a6a8:	e780      	b.n	801a5ac <__ieee754_sqrt+0x30>
 801a6aa:	0aca      	lsrs	r2, r1, #11
 801a6ac:	3815      	subs	r0, #21
 801a6ae:	0549      	lsls	r1, r1, #21
 801a6b0:	2a00      	cmp	r2, #0
 801a6b2:	d0fa      	beq.n	801a6aa <__ieee754_sqrt+0x12e>
 801a6b4:	02d6      	lsls	r6, r2, #11
 801a6b6:	d50a      	bpl.n	801a6ce <__ieee754_sqrt+0x152>
 801a6b8:	f1c3 0420 	rsb	r4, r3, #32
 801a6bc:	fa21 f404 	lsr.w	r4, r1, r4
 801a6c0:	1e5d      	subs	r5, r3, #1
 801a6c2:	4099      	lsls	r1, r3
 801a6c4:	4322      	orrs	r2, r4
 801a6c6:	1b43      	subs	r3, r0, r5
 801a6c8:	e78b      	b.n	801a5e2 <__ieee754_sqrt+0x66>
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	e7f0      	b.n	801a6b0 <__ieee754_sqrt+0x134>
 801a6ce:	0052      	lsls	r2, r2, #1
 801a6d0:	3301      	adds	r3, #1
 801a6d2:	e7ef      	b.n	801a6b4 <__ieee754_sqrt+0x138>
 801a6d4:	46a0      	mov	r8, r4
 801a6d6:	e7bf      	b.n	801a658 <__ieee754_sqrt+0xdc>
 801a6d8:	7ff00000 	.word	0x7ff00000
 801a6dc:	00000000 	.word	0x00000000

0801a6e0 <__kernel_cos>:
 801a6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e4:	ec59 8b10 	vmov	r8, r9, d0
 801a6e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a6ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a6f0:	ed2d 8b02 	vpush	{d8}
 801a6f4:	eeb0 8a41 	vmov.f32	s16, s2
 801a6f8:	eef0 8a61 	vmov.f32	s17, s3
 801a6fc:	da07      	bge.n	801a70e <__kernel_cos+0x2e>
 801a6fe:	ee10 0a10 	vmov	r0, s0
 801a702:	4649      	mov	r1, r9
 801a704:	f7e6 fa38 	bl	8000b78 <__aeabi_d2iz>
 801a708:	2800      	cmp	r0, #0
 801a70a:	f000 8089 	beq.w	801a820 <__kernel_cos+0x140>
 801a70e:	4642      	mov	r2, r8
 801a710:	464b      	mov	r3, r9
 801a712:	4640      	mov	r0, r8
 801a714:	4649      	mov	r1, r9
 801a716:	f7e5 ff7f 	bl	8000618 <__aeabi_dmul>
 801a71a:	2200      	movs	r2, #0
 801a71c:	4b4e      	ldr	r3, [pc, #312]	; (801a858 <__kernel_cos+0x178>)
 801a71e:	4604      	mov	r4, r0
 801a720:	460d      	mov	r5, r1
 801a722:	f7e5 ff79 	bl	8000618 <__aeabi_dmul>
 801a726:	a340      	add	r3, pc, #256	; (adr r3, 801a828 <__kernel_cos+0x148>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	4682      	mov	sl, r0
 801a72e:	468b      	mov	fp, r1
 801a730:	4620      	mov	r0, r4
 801a732:	4629      	mov	r1, r5
 801a734:	f7e5 ff70 	bl	8000618 <__aeabi_dmul>
 801a738:	a33d      	add	r3, pc, #244	; (adr r3, 801a830 <__kernel_cos+0x150>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 fdb5 	bl	80002ac <__adddf3>
 801a742:	4622      	mov	r2, r4
 801a744:	462b      	mov	r3, r5
 801a746:	f7e5 ff67 	bl	8000618 <__aeabi_dmul>
 801a74a:	a33b      	add	r3, pc, #236	; (adr r3, 801a838 <__kernel_cos+0x158>)
 801a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a750:	f7e5 fdaa 	bl	80002a8 <__aeabi_dsub>
 801a754:	4622      	mov	r2, r4
 801a756:	462b      	mov	r3, r5
 801a758:	f7e5 ff5e 	bl	8000618 <__aeabi_dmul>
 801a75c:	a338      	add	r3, pc, #224	; (adr r3, 801a840 <__kernel_cos+0x160>)
 801a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a762:	f7e5 fda3 	bl	80002ac <__adddf3>
 801a766:	4622      	mov	r2, r4
 801a768:	462b      	mov	r3, r5
 801a76a:	f7e5 ff55 	bl	8000618 <__aeabi_dmul>
 801a76e:	a336      	add	r3, pc, #216	; (adr r3, 801a848 <__kernel_cos+0x168>)
 801a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a774:	f7e5 fd98 	bl	80002a8 <__aeabi_dsub>
 801a778:	4622      	mov	r2, r4
 801a77a:	462b      	mov	r3, r5
 801a77c:	f7e5 ff4c 	bl	8000618 <__aeabi_dmul>
 801a780:	a333      	add	r3, pc, #204	; (adr r3, 801a850 <__kernel_cos+0x170>)
 801a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a786:	f7e5 fd91 	bl	80002ac <__adddf3>
 801a78a:	4622      	mov	r2, r4
 801a78c:	462b      	mov	r3, r5
 801a78e:	f7e5 ff43 	bl	8000618 <__aeabi_dmul>
 801a792:	4622      	mov	r2, r4
 801a794:	462b      	mov	r3, r5
 801a796:	f7e5 ff3f 	bl	8000618 <__aeabi_dmul>
 801a79a:	ec53 2b18 	vmov	r2, r3, d8
 801a79e:	4604      	mov	r4, r0
 801a7a0:	460d      	mov	r5, r1
 801a7a2:	4640      	mov	r0, r8
 801a7a4:	4649      	mov	r1, r9
 801a7a6:	f7e5 ff37 	bl	8000618 <__aeabi_dmul>
 801a7aa:	460b      	mov	r3, r1
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	4629      	mov	r1, r5
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	f7e5 fd79 	bl	80002a8 <__aeabi_dsub>
 801a7b6:	4b29      	ldr	r3, [pc, #164]	; (801a85c <__kernel_cos+0x17c>)
 801a7b8:	429e      	cmp	r6, r3
 801a7ba:	4680      	mov	r8, r0
 801a7bc:	4689      	mov	r9, r1
 801a7be:	dc11      	bgt.n	801a7e4 <__kernel_cos+0x104>
 801a7c0:	4602      	mov	r2, r0
 801a7c2:	460b      	mov	r3, r1
 801a7c4:	4650      	mov	r0, sl
 801a7c6:	4659      	mov	r1, fp
 801a7c8:	f7e5 fd6e 	bl	80002a8 <__aeabi_dsub>
 801a7cc:	460b      	mov	r3, r1
 801a7ce:	4924      	ldr	r1, [pc, #144]	; (801a860 <__kernel_cos+0x180>)
 801a7d0:	4602      	mov	r2, r0
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	f7e5 fd68 	bl	80002a8 <__aeabi_dsub>
 801a7d8:	ecbd 8b02 	vpop	{d8}
 801a7dc:	ec41 0b10 	vmov	d0, r0, r1
 801a7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7e4:	4b1f      	ldr	r3, [pc, #124]	; (801a864 <__kernel_cos+0x184>)
 801a7e6:	491e      	ldr	r1, [pc, #120]	; (801a860 <__kernel_cos+0x180>)
 801a7e8:	429e      	cmp	r6, r3
 801a7ea:	bfcc      	ite	gt
 801a7ec:	4d1e      	ldrgt	r5, [pc, #120]	; (801a868 <__kernel_cos+0x188>)
 801a7ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a7f2:	2400      	movs	r4, #0
 801a7f4:	4622      	mov	r2, r4
 801a7f6:	462b      	mov	r3, r5
 801a7f8:	2000      	movs	r0, #0
 801a7fa:	f7e5 fd55 	bl	80002a8 <__aeabi_dsub>
 801a7fe:	4622      	mov	r2, r4
 801a800:	4606      	mov	r6, r0
 801a802:	460f      	mov	r7, r1
 801a804:	462b      	mov	r3, r5
 801a806:	4650      	mov	r0, sl
 801a808:	4659      	mov	r1, fp
 801a80a:	f7e5 fd4d 	bl	80002a8 <__aeabi_dsub>
 801a80e:	4642      	mov	r2, r8
 801a810:	464b      	mov	r3, r9
 801a812:	f7e5 fd49 	bl	80002a8 <__aeabi_dsub>
 801a816:	4602      	mov	r2, r0
 801a818:	460b      	mov	r3, r1
 801a81a:	4630      	mov	r0, r6
 801a81c:	4639      	mov	r1, r7
 801a81e:	e7d9      	b.n	801a7d4 <__kernel_cos+0xf4>
 801a820:	2000      	movs	r0, #0
 801a822:	490f      	ldr	r1, [pc, #60]	; (801a860 <__kernel_cos+0x180>)
 801a824:	e7d8      	b.n	801a7d8 <__kernel_cos+0xf8>
 801a826:	bf00      	nop
 801a828:	be8838d4 	.word	0xbe8838d4
 801a82c:	bda8fae9 	.word	0xbda8fae9
 801a830:	bdb4b1c4 	.word	0xbdb4b1c4
 801a834:	3e21ee9e 	.word	0x3e21ee9e
 801a838:	809c52ad 	.word	0x809c52ad
 801a83c:	3e927e4f 	.word	0x3e927e4f
 801a840:	19cb1590 	.word	0x19cb1590
 801a844:	3efa01a0 	.word	0x3efa01a0
 801a848:	16c15177 	.word	0x16c15177
 801a84c:	3f56c16c 	.word	0x3f56c16c
 801a850:	5555554c 	.word	0x5555554c
 801a854:	3fa55555 	.word	0x3fa55555
 801a858:	3fe00000 	.word	0x3fe00000
 801a85c:	3fd33332 	.word	0x3fd33332
 801a860:	3ff00000 	.word	0x3ff00000
 801a864:	3fe90000 	.word	0x3fe90000
 801a868:	3fd20000 	.word	0x3fd20000
 801a86c:	00000000 	.word	0x00000000

0801a870 <__kernel_rem_pio2>:
 801a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a874:	ed2d 8b02 	vpush	{d8}
 801a878:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a87c:	1ed4      	subs	r4, r2, #3
 801a87e:	9308      	str	r3, [sp, #32]
 801a880:	9101      	str	r1, [sp, #4]
 801a882:	4bc5      	ldr	r3, [pc, #788]	; (801ab98 <__kernel_rem_pio2+0x328>)
 801a884:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a886:	9009      	str	r0, [sp, #36]	; 0x24
 801a888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a88c:	9304      	str	r3, [sp, #16]
 801a88e:	9b08      	ldr	r3, [sp, #32]
 801a890:	3b01      	subs	r3, #1
 801a892:	9307      	str	r3, [sp, #28]
 801a894:	2318      	movs	r3, #24
 801a896:	fb94 f4f3 	sdiv	r4, r4, r3
 801a89a:	f06f 0317 	mvn.w	r3, #23
 801a89e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a8a2:	fb04 3303 	mla	r3, r4, r3, r3
 801a8a6:	eb03 0a02 	add.w	sl, r3, r2
 801a8aa:	9b04      	ldr	r3, [sp, #16]
 801a8ac:	9a07      	ldr	r2, [sp, #28]
 801a8ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801ab88 <__kernel_rem_pio2+0x318>
 801a8b2:	eb03 0802 	add.w	r8, r3, r2
 801a8b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a8b8:	1aa7      	subs	r7, r4, r2
 801a8ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a8be:	ae22      	add	r6, sp, #136	; 0x88
 801a8c0:	2500      	movs	r5, #0
 801a8c2:	4545      	cmp	r5, r8
 801a8c4:	dd13      	ble.n	801a8ee <__kernel_rem_pio2+0x7e>
 801a8c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801ab88 <__kernel_rem_pio2+0x318>
 801a8ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a8ce:	2600      	movs	r6, #0
 801a8d0:	9b04      	ldr	r3, [sp, #16]
 801a8d2:	429e      	cmp	r6, r3
 801a8d4:	dc32      	bgt.n	801a93c <__kernel_rem_pio2+0xcc>
 801a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8d8:	9302      	str	r3, [sp, #8]
 801a8da:	9b08      	ldr	r3, [sp, #32]
 801a8dc:	199d      	adds	r5, r3, r6
 801a8de:	ab22      	add	r3, sp, #136	; 0x88
 801a8e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a8e4:	9306      	str	r3, [sp, #24]
 801a8e6:	ec59 8b18 	vmov	r8, r9, d8
 801a8ea:	2700      	movs	r7, #0
 801a8ec:	e01f      	b.n	801a92e <__kernel_rem_pio2+0xbe>
 801a8ee:	42ef      	cmn	r7, r5
 801a8f0:	d407      	bmi.n	801a902 <__kernel_rem_pio2+0x92>
 801a8f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a8f6:	f7e5 fe25 	bl	8000544 <__aeabi_i2d>
 801a8fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a8fe:	3501      	adds	r5, #1
 801a900:	e7df      	b.n	801a8c2 <__kernel_rem_pio2+0x52>
 801a902:	ec51 0b18 	vmov	r0, r1, d8
 801a906:	e7f8      	b.n	801a8fa <__kernel_rem_pio2+0x8a>
 801a908:	9906      	ldr	r1, [sp, #24]
 801a90a:	9d02      	ldr	r5, [sp, #8]
 801a90c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a910:	9106      	str	r1, [sp, #24]
 801a912:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a916:	9502      	str	r5, [sp, #8]
 801a918:	f7e5 fe7e 	bl	8000618 <__aeabi_dmul>
 801a91c:	4602      	mov	r2, r0
 801a91e:	460b      	mov	r3, r1
 801a920:	4640      	mov	r0, r8
 801a922:	4649      	mov	r1, r9
 801a924:	f7e5 fcc2 	bl	80002ac <__adddf3>
 801a928:	3701      	adds	r7, #1
 801a92a:	4680      	mov	r8, r0
 801a92c:	4689      	mov	r9, r1
 801a92e:	9b07      	ldr	r3, [sp, #28]
 801a930:	429f      	cmp	r7, r3
 801a932:	dde9      	ble.n	801a908 <__kernel_rem_pio2+0x98>
 801a934:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a938:	3601      	adds	r6, #1
 801a93a:	e7c9      	b.n	801a8d0 <__kernel_rem_pio2+0x60>
 801a93c:	9b04      	ldr	r3, [sp, #16]
 801a93e:	aa0e      	add	r2, sp, #56	; 0x38
 801a940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a944:	930c      	str	r3, [sp, #48]	; 0x30
 801a946:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a948:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a94c:	9c04      	ldr	r4, [sp, #16]
 801a94e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a950:	ab9a      	add	r3, sp, #616	; 0x268
 801a952:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a956:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a95e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a962:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a966:	ab9a      	add	r3, sp, #616	; 0x268
 801a968:	445b      	add	r3, fp
 801a96a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a96e:	2500      	movs	r5, #0
 801a970:	1b63      	subs	r3, r4, r5
 801a972:	2b00      	cmp	r3, #0
 801a974:	dc78      	bgt.n	801aa68 <__kernel_rem_pio2+0x1f8>
 801a976:	4650      	mov	r0, sl
 801a978:	ec49 8b10 	vmov	d0, r8, r9
 801a97c:	f000 fda8 	bl	801b4d0 <scalbn>
 801a980:	ec57 6b10 	vmov	r6, r7, d0
 801a984:	2200      	movs	r2, #0
 801a986:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a98a:	ee10 0a10 	vmov	r0, s0
 801a98e:	4639      	mov	r1, r7
 801a990:	f7e5 fe42 	bl	8000618 <__aeabi_dmul>
 801a994:	ec41 0b10 	vmov	d0, r0, r1
 801a998:	f000 fd12 	bl	801b3c0 <floor>
 801a99c:	2200      	movs	r2, #0
 801a99e:	ec51 0b10 	vmov	r0, r1, d0
 801a9a2:	4b7e      	ldr	r3, [pc, #504]	; (801ab9c <__kernel_rem_pio2+0x32c>)
 801a9a4:	f7e5 fe38 	bl	8000618 <__aeabi_dmul>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	460b      	mov	r3, r1
 801a9ac:	4630      	mov	r0, r6
 801a9ae:	4639      	mov	r1, r7
 801a9b0:	f7e5 fc7a 	bl	80002a8 <__aeabi_dsub>
 801a9b4:	460f      	mov	r7, r1
 801a9b6:	4606      	mov	r6, r0
 801a9b8:	f7e6 f8de 	bl	8000b78 <__aeabi_d2iz>
 801a9bc:	9006      	str	r0, [sp, #24]
 801a9be:	f7e5 fdc1 	bl	8000544 <__aeabi_i2d>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	4630      	mov	r0, r6
 801a9c8:	4639      	mov	r1, r7
 801a9ca:	f7e5 fc6d 	bl	80002a8 <__aeabi_dsub>
 801a9ce:	f1ba 0f00 	cmp.w	sl, #0
 801a9d2:	4606      	mov	r6, r0
 801a9d4:	460f      	mov	r7, r1
 801a9d6:	dd6c      	ble.n	801aab2 <__kernel_rem_pio2+0x242>
 801a9d8:	1e62      	subs	r2, r4, #1
 801a9da:	ab0e      	add	r3, sp, #56	; 0x38
 801a9dc:	f1ca 0118 	rsb	r1, sl, #24
 801a9e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a9e4:	9d06      	ldr	r5, [sp, #24]
 801a9e6:	fa40 f301 	asr.w	r3, r0, r1
 801a9ea:	441d      	add	r5, r3
 801a9ec:	408b      	lsls	r3, r1
 801a9ee:	1ac0      	subs	r0, r0, r3
 801a9f0:	ab0e      	add	r3, sp, #56	; 0x38
 801a9f2:	9506      	str	r5, [sp, #24]
 801a9f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a9f8:	f1ca 0317 	rsb	r3, sl, #23
 801a9fc:	fa40 f303 	asr.w	r3, r0, r3
 801aa00:	9302      	str	r3, [sp, #8]
 801aa02:	9b02      	ldr	r3, [sp, #8]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	dd62      	ble.n	801aace <__kernel_rem_pio2+0x25e>
 801aa08:	9b06      	ldr	r3, [sp, #24]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	9306      	str	r3, [sp, #24]
 801aa10:	4615      	mov	r5, r2
 801aa12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801aa16:	4294      	cmp	r4, r2
 801aa18:	f300 8095 	bgt.w	801ab46 <__kernel_rem_pio2+0x2d6>
 801aa1c:	f1ba 0f00 	cmp.w	sl, #0
 801aa20:	dd07      	ble.n	801aa32 <__kernel_rem_pio2+0x1c2>
 801aa22:	f1ba 0f01 	cmp.w	sl, #1
 801aa26:	f000 80a2 	beq.w	801ab6e <__kernel_rem_pio2+0x2fe>
 801aa2a:	f1ba 0f02 	cmp.w	sl, #2
 801aa2e:	f000 80c1 	beq.w	801abb4 <__kernel_rem_pio2+0x344>
 801aa32:	9b02      	ldr	r3, [sp, #8]
 801aa34:	2b02      	cmp	r3, #2
 801aa36:	d14a      	bne.n	801aace <__kernel_rem_pio2+0x25e>
 801aa38:	4632      	mov	r2, r6
 801aa3a:	463b      	mov	r3, r7
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	4958      	ldr	r1, [pc, #352]	; (801aba0 <__kernel_rem_pio2+0x330>)
 801aa40:	f7e5 fc32 	bl	80002a8 <__aeabi_dsub>
 801aa44:	4606      	mov	r6, r0
 801aa46:	460f      	mov	r7, r1
 801aa48:	2d00      	cmp	r5, #0
 801aa4a:	d040      	beq.n	801aace <__kernel_rem_pio2+0x25e>
 801aa4c:	4650      	mov	r0, sl
 801aa4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801ab90 <__kernel_rem_pio2+0x320>
 801aa52:	f000 fd3d 	bl	801b4d0 <scalbn>
 801aa56:	4630      	mov	r0, r6
 801aa58:	4639      	mov	r1, r7
 801aa5a:	ec53 2b10 	vmov	r2, r3, d0
 801aa5e:	f7e5 fc23 	bl	80002a8 <__aeabi_dsub>
 801aa62:	4606      	mov	r6, r0
 801aa64:	460f      	mov	r7, r1
 801aa66:	e032      	b.n	801aace <__kernel_rem_pio2+0x25e>
 801aa68:	2200      	movs	r2, #0
 801aa6a:	4b4e      	ldr	r3, [pc, #312]	; (801aba4 <__kernel_rem_pio2+0x334>)
 801aa6c:	4640      	mov	r0, r8
 801aa6e:	4649      	mov	r1, r9
 801aa70:	f7e5 fdd2 	bl	8000618 <__aeabi_dmul>
 801aa74:	f7e6 f880 	bl	8000b78 <__aeabi_d2iz>
 801aa78:	f7e5 fd64 	bl	8000544 <__aeabi_i2d>
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	4b4a      	ldr	r3, [pc, #296]	; (801aba8 <__kernel_rem_pio2+0x338>)
 801aa80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa84:	f7e5 fdc8 	bl	8000618 <__aeabi_dmul>
 801aa88:	4602      	mov	r2, r0
 801aa8a:	460b      	mov	r3, r1
 801aa8c:	4640      	mov	r0, r8
 801aa8e:	4649      	mov	r1, r9
 801aa90:	f7e5 fc0a 	bl	80002a8 <__aeabi_dsub>
 801aa94:	f7e6 f870 	bl	8000b78 <__aeabi_d2iz>
 801aa98:	ab0e      	add	r3, sp, #56	; 0x38
 801aa9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801aa9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801aaa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aaa6:	f7e5 fc01 	bl	80002ac <__adddf3>
 801aaaa:	3501      	adds	r5, #1
 801aaac:	4680      	mov	r8, r0
 801aaae:	4689      	mov	r9, r1
 801aab0:	e75e      	b.n	801a970 <__kernel_rem_pio2+0x100>
 801aab2:	d105      	bne.n	801aac0 <__kernel_rem_pio2+0x250>
 801aab4:	1e63      	subs	r3, r4, #1
 801aab6:	aa0e      	add	r2, sp, #56	; 0x38
 801aab8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801aabc:	15c3      	asrs	r3, r0, #23
 801aabe:	e79f      	b.n	801aa00 <__kernel_rem_pio2+0x190>
 801aac0:	2200      	movs	r2, #0
 801aac2:	4b3a      	ldr	r3, [pc, #232]	; (801abac <__kernel_rem_pio2+0x33c>)
 801aac4:	f7e6 f82e 	bl	8000b24 <__aeabi_dcmpge>
 801aac8:	2800      	cmp	r0, #0
 801aaca:	d139      	bne.n	801ab40 <__kernel_rem_pio2+0x2d0>
 801aacc:	9002      	str	r0, [sp, #8]
 801aace:	2200      	movs	r2, #0
 801aad0:	2300      	movs	r3, #0
 801aad2:	4630      	mov	r0, r6
 801aad4:	4639      	mov	r1, r7
 801aad6:	f7e6 f807 	bl	8000ae8 <__aeabi_dcmpeq>
 801aada:	2800      	cmp	r0, #0
 801aadc:	f000 80c7 	beq.w	801ac6e <__kernel_rem_pio2+0x3fe>
 801aae0:	1e65      	subs	r5, r4, #1
 801aae2:	462b      	mov	r3, r5
 801aae4:	2200      	movs	r2, #0
 801aae6:	9904      	ldr	r1, [sp, #16]
 801aae8:	428b      	cmp	r3, r1
 801aaea:	da6a      	bge.n	801abc2 <__kernel_rem_pio2+0x352>
 801aaec:	2a00      	cmp	r2, #0
 801aaee:	f000 8088 	beq.w	801ac02 <__kernel_rem_pio2+0x392>
 801aaf2:	ab0e      	add	r3, sp, #56	; 0x38
 801aaf4:	f1aa 0a18 	sub.w	sl, sl, #24
 801aaf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	f000 80b4 	beq.w	801ac6a <__kernel_rem_pio2+0x3fa>
 801ab02:	4650      	mov	r0, sl
 801ab04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801ab90 <__kernel_rem_pio2+0x320>
 801ab08:	f000 fce2 	bl	801b4d0 <scalbn>
 801ab0c:	00ec      	lsls	r4, r5, #3
 801ab0e:	ab72      	add	r3, sp, #456	; 0x1c8
 801ab10:	191e      	adds	r6, r3, r4
 801ab12:	ec59 8b10 	vmov	r8, r9, d0
 801ab16:	f106 0a08 	add.w	sl, r6, #8
 801ab1a:	462f      	mov	r7, r5
 801ab1c:	2f00      	cmp	r7, #0
 801ab1e:	f280 80df 	bge.w	801ace0 <__kernel_rem_pio2+0x470>
 801ab22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801ab88 <__kernel_rem_pio2+0x318>
 801ab26:	f04f 0a00 	mov.w	sl, #0
 801ab2a:	eba5 030a 	sub.w	r3, r5, sl
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	f2c0 810a 	blt.w	801ad48 <__kernel_rem_pio2+0x4d8>
 801ab34:	f8df b078 	ldr.w	fp, [pc, #120]	; 801abb0 <__kernel_rem_pio2+0x340>
 801ab38:	ec59 8b18 	vmov	r8, r9, d8
 801ab3c:	2700      	movs	r7, #0
 801ab3e:	e0f5      	b.n	801ad2c <__kernel_rem_pio2+0x4bc>
 801ab40:	2302      	movs	r3, #2
 801ab42:	9302      	str	r3, [sp, #8]
 801ab44:	e760      	b.n	801aa08 <__kernel_rem_pio2+0x198>
 801ab46:	ab0e      	add	r3, sp, #56	; 0x38
 801ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab4c:	b94d      	cbnz	r5, 801ab62 <__kernel_rem_pio2+0x2f2>
 801ab4e:	b12b      	cbz	r3, 801ab5c <__kernel_rem_pio2+0x2ec>
 801ab50:	a80e      	add	r0, sp, #56	; 0x38
 801ab52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ab56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	3201      	adds	r2, #1
 801ab5e:	461d      	mov	r5, r3
 801ab60:	e759      	b.n	801aa16 <__kernel_rem_pio2+0x1a6>
 801ab62:	a80e      	add	r0, sp, #56	; 0x38
 801ab64:	1acb      	subs	r3, r1, r3
 801ab66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ab6a:	462b      	mov	r3, r5
 801ab6c:	e7f6      	b.n	801ab5c <__kernel_rem_pio2+0x2ec>
 801ab6e:	1e62      	subs	r2, r4, #1
 801ab70:	ab0e      	add	r3, sp, #56	; 0x38
 801ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ab7a:	a90e      	add	r1, sp, #56	; 0x38
 801ab7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ab80:	e757      	b.n	801aa32 <__kernel_rem_pio2+0x1c2>
 801ab82:	bf00      	nop
 801ab84:	f3af 8000 	nop.w
	...
 801ab94:	3ff00000 	.word	0x3ff00000
 801ab98:	0801c0f0 	.word	0x0801c0f0
 801ab9c:	40200000 	.word	0x40200000
 801aba0:	3ff00000 	.word	0x3ff00000
 801aba4:	3e700000 	.word	0x3e700000
 801aba8:	41700000 	.word	0x41700000
 801abac:	3fe00000 	.word	0x3fe00000
 801abb0:	0801c0b0 	.word	0x0801c0b0
 801abb4:	1e62      	subs	r2, r4, #1
 801abb6:	ab0e      	add	r3, sp, #56	; 0x38
 801abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801abc0:	e7db      	b.n	801ab7a <__kernel_rem_pio2+0x30a>
 801abc2:	a90e      	add	r1, sp, #56	; 0x38
 801abc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801abc8:	3b01      	subs	r3, #1
 801abca:	430a      	orrs	r2, r1
 801abcc:	e78b      	b.n	801aae6 <__kernel_rem_pio2+0x276>
 801abce:	3301      	adds	r3, #1
 801abd0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801abd4:	2900      	cmp	r1, #0
 801abd6:	d0fa      	beq.n	801abce <__kernel_rem_pio2+0x35e>
 801abd8:	9a08      	ldr	r2, [sp, #32]
 801abda:	4422      	add	r2, r4
 801abdc:	00d2      	lsls	r2, r2, #3
 801abde:	a922      	add	r1, sp, #136	; 0x88
 801abe0:	18e3      	adds	r3, r4, r3
 801abe2:	9206      	str	r2, [sp, #24]
 801abe4:	440a      	add	r2, r1
 801abe6:	9302      	str	r3, [sp, #8]
 801abe8:	f10b 0108 	add.w	r1, fp, #8
 801abec:	f102 0308 	add.w	r3, r2, #8
 801abf0:	1c66      	adds	r6, r4, #1
 801abf2:	910a      	str	r1, [sp, #40]	; 0x28
 801abf4:	2500      	movs	r5, #0
 801abf6:	930d      	str	r3, [sp, #52]	; 0x34
 801abf8:	9b02      	ldr	r3, [sp, #8]
 801abfa:	42b3      	cmp	r3, r6
 801abfc:	da04      	bge.n	801ac08 <__kernel_rem_pio2+0x398>
 801abfe:	461c      	mov	r4, r3
 801ac00:	e6a6      	b.n	801a950 <__kernel_rem_pio2+0xe0>
 801ac02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac04:	2301      	movs	r3, #1
 801ac06:	e7e3      	b.n	801abd0 <__kernel_rem_pio2+0x360>
 801ac08:	9b06      	ldr	r3, [sp, #24]
 801ac0a:	18ef      	adds	r7, r5, r3
 801ac0c:	ab22      	add	r3, sp, #136	; 0x88
 801ac0e:	441f      	add	r7, r3
 801ac10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ac16:	f7e5 fc95 	bl	8000544 <__aeabi_i2d>
 801ac1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac1c:	461c      	mov	r4, r3
 801ac1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac20:	e9c7 0100 	strd	r0, r1, [r7]
 801ac24:	eb03 0b05 	add.w	fp, r3, r5
 801ac28:	2700      	movs	r7, #0
 801ac2a:	f04f 0800 	mov.w	r8, #0
 801ac2e:	f04f 0900 	mov.w	r9, #0
 801ac32:	9b07      	ldr	r3, [sp, #28]
 801ac34:	429f      	cmp	r7, r3
 801ac36:	dd08      	ble.n	801ac4a <__kernel_rem_pio2+0x3da>
 801ac38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac3a:	aa72      	add	r2, sp, #456	; 0x1c8
 801ac3c:	18eb      	adds	r3, r5, r3
 801ac3e:	4413      	add	r3, r2
 801ac40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801ac44:	3601      	adds	r6, #1
 801ac46:	3508      	adds	r5, #8
 801ac48:	e7d6      	b.n	801abf8 <__kernel_rem_pio2+0x388>
 801ac4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ac4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ac52:	f7e5 fce1 	bl	8000618 <__aeabi_dmul>
 801ac56:	4602      	mov	r2, r0
 801ac58:	460b      	mov	r3, r1
 801ac5a:	4640      	mov	r0, r8
 801ac5c:	4649      	mov	r1, r9
 801ac5e:	f7e5 fb25 	bl	80002ac <__adddf3>
 801ac62:	3701      	adds	r7, #1
 801ac64:	4680      	mov	r8, r0
 801ac66:	4689      	mov	r9, r1
 801ac68:	e7e3      	b.n	801ac32 <__kernel_rem_pio2+0x3c2>
 801ac6a:	3d01      	subs	r5, #1
 801ac6c:	e741      	b.n	801aaf2 <__kernel_rem_pio2+0x282>
 801ac6e:	f1ca 0000 	rsb	r0, sl, #0
 801ac72:	ec47 6b10 	vmov	d0, r6, r7
 801ac76:	f000 fc2b 	bl	801b4d0 <scalbn>
 801ac7a:	ec57 6b10 	vmov	r6, r7, d0
 801ac7e:	2200      	movs	r2, #0
 801ac80:	4b99      	ldr	r3, [pc, #612]	; (801aee8 <__kernel_rem_pio2+0x678>)
 801ac82:	ee10 0a10 	vmov	r0, s0
 801ac86:	4639      	mov	r1, r7
 801ac88:	f7e5 ff4c 	bl	8000b24 <__aeabi_dcmpge>
 801ac8c:	b1f8      	cbz	r0, 801acce <__kernel_rem_pio2+0x45e>
 801ac8e:	2200      	movs	r2, #0
 801ac90:	4b96      	ldr	r3, [pc, #600]	; (801aeec <__kernel_rem_pio2+0x67c>)
 801ac92:	4630      	mov	r0, r6
 801ac94:	4639      	mov	r1, r7
 801ac96:	f7e5 fcbf 	bl	8000618 <__aeabi_dmul>
 801ac9a:	f7e5 ff6d 	bl	8000b78 <__aeabi_d2iz>
 801ac9e:	4680      	mov	r8, r0
 801aca0:	f7e5 fc50 	bl	8000544 <__aeabi_i2d>
 801aca4:	2200      	movs	r2, #0
 801aca6:	4b90      	ldr	r3, [pc, #576]	; (801aee8 <__kernel_rem_pio2+0x678>)
 801aca8:	f7e5 fcb6 	bl	8000618 <__aeabi_dmul>
 801acac:	460b      	mov	r3, r1
 801acae:	4602      	mov	r2, r0
 801acb0:	4639      	mov	r1, r7
 801acb2:	4630      	mov	r0, r6
 801acb4:	f7e5 faf8 	bl	80002a8 <__aeabi_dsub>
 801acb8:	f7e5 ff5e 	bl	8000b78 <__aeabi_d2iz>
 801acbc:	1c65      	adds	r5, r4, #1
 801acbe:	ab0e      	add	r3, sp, #56	; 0x38
 801acc0:	f10a 0a18 	add.w	sl, sl, #24
 801acc4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801acc8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801accc:	e719      	b.n	801ab02 <__kernel_rem_pio2+0x292>
 801acce:	4630      	mov	r0, r6
 801acd0:	4639      	mov	r1, r7
 801acd2:	f7e5 ff51 	bl	8000b78 <__aeabi_d2iz>
 801acd6:	ab0e      	add	r3, sp, #56	; 0x38
 801acd8:	4625      	mov	r5, r4
 801acda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801acde:	e710      	b.n	801ab02 <__kernel_rem_pio2+0x292>
 801ace0:	ab0e      	add	r3, sp, #56	; 0x38
 801ace2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ace6:	f7e5 fc2d 	bl	8000544 <__aeabi_i2d>
 801acea:	4642      	mov	r2, r8
 801acec:	464b      	mov	r3, r9
 801acee:	f7e5 fc93 	bl	8000618 <__aeabi_dmul>
 801acf2:	2200      	movs	r2, #0
 801acf4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801acf8:	4b7c      	ldr	r3, [pc, #496]	; (801aeec <__kernel_rem_pio2+0x67c>)
 801acfa:	4640      	mov	r0, r8
 801acfc:	4649      	mov	r1, r9
 801acfe:	f7e5 fc8b 	bl	8000618 <__aeabi_dmul>
 801ad02:	3f01      	subs	r7, #1
 801ad04:	4680      	mov	r8, r0
 801ad06:	4689      	mov	r9, r1
 801ad08:	e708      	b.n	801ab1c <__kernel_rem_pio2+0x2ac>
 801ad0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ad16:	f7e5 fc7f 	bl	8000618 <__aeabi_dmul>
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	4640      	mov	r0, r8
 801ad20:	4649      	mov	r1, r9
 801ad22:	f7e5 fac3 	bl	80002ac <__adddf3>
 801ad26:	3701      	adds	r7, #1
 801ad28:	4680      	mov	r8, r0
 801ad2a:	4689      	mov	r9, r1
 801ad2c:	9b04      	ldr	r3, [sp, #16]
 801ad2e:	429f      	cmp	r7, r3
 801ad30:	dc01      	bgt.n	801ad36 <__kernel_rem_pio2+0x4c6>
 801ad32:	45ba      	cmp	sl, r7
 801ad34:	dae9      	bge.n	801ad0a <__kernel_rem_pio2+0x49a>
 801ad36:	ab4a      	add	r3, sp, #296	; 0x128
 801ad38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ad3c:	e9c3 8900 	strd	r8, r9, [r3]
 801ad40:	f10a 0a01 	add.w	sl, sl, #1
 801ad44:	3e08      	subs	r6, #8
 801ad46:	e6f0      	b.n	801ab2a <__kernel_rem_pio2+0x2ba>
 801ad48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ad4a:	2b03      	cmp	r3, #3
 801ad4c:	d85b      	bhi.n	801ae06 <__kernel_rem_pio2+0x596>
 801ad4e:	e8df f003 	tbb	[pc, r3]
 801ad52:	264a      	.short	0x264a
 801ad54:	0226      	.short	0x0226
 801ad56:	ab9a      	add	r3, sp, #616	; 0x268
 801ad58:	441c      	add	r4, r3
 801ad5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ad5e:	46a2      	mov	sl, r4
 801ad60:	46ab      	mov	fp, r5
 801ad62:	f1bb 0f00 	cmp.w	fp, #0
 801ad66:	dc6c      	bgt.n	801ae42 <__kernel_rem_pio2+0x5d2>
 801ad68:	46a2      	mov	sl, r4
 801ad6a:	46ab      	mov	fp, r5
 801ad6c:	f1bb 0f01 	cmp.w	fp, #1
 801ad70:	f300 8086 	bgt.w	801ae80 <__kernel_rem_pio2+0x610>
 801ad74:	2000      	movs	r0, #0
 801ad76:	2100      	movs	r1, #0
 801ad78:	2d01      	cmp	r5, #1
 801ad7a:	f300 80a0 	bgt.w	801aebe <__kernel_rem_pio2+0x64e>
 801ad7e:	9b02      	ldr	r3, [sp, #8]
 801ad80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801ad84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	f040 809e 	bne.w	801aeca <__kernel_rem_pio2+0x65a>
 801ad8e:	9b01      	ldr	r3, [sp, #4]
 801ad90:	e9c3 7800 	strd	r7, r8, [r3]
 801ad94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ad98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ad9c:	e033      	b.n	801ae06 <__kernel_rem_pio2+0x596>
 801ad9e:	3408      	adds	r4, #8
 801ada0:	ab4a      	add	r3, sp, #296	; 0x128
 801ada2:	441c      	add	r4, r3
 801ada4:	462e      	mov	r6, r5
 801ada6:	2000      	movs	r0, #0
 801ada8:	2100      	movs	r1, #0
 801adaa:	2e00      	cmp	r6, #0
 801adac:	da3a      	bge.n	801ae24 <__kernel_rem_pio2+0x5b4>
 801adae:	9b02      	ldr	r3, [sp, #8]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d03d      	beq.n	801ae30 <__kernel_rem_pio2+0x5c0>
 801adb4:	4602      	mov	r2, r0
 801adb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801adba:	9c01      	ldr	r4, [sp, #4]
 801adbc:	e9c4 2300 	strd	r2, r3, [r4]
 801adc0:	4602      	mov	r2, r0
 801adc2:	460b      	mov	r3, r1
 801adc4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801adc8:	f7e5 fa6e 	bl	80002a8 <__aeabi_dsub>
 801adcc:	ae4c      	add	r6, sp, #304	; 0x130
 801adce:	2401      	movs	r4, #1
 801add0:	42a5      	cmp	r5, r4
 801add2:	da30      	bge.n	801ae36 <__kernel_rem_pio2+0x5c6>
 801add4:	9b02      	ldr	r3, [sp, #8]
 801add6:	b113      	cbz	r3, 801adde <__kernel_rem_pio2+0x56e>
 801add8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801addc:	4619      	mov	r1, r3
 801adde:	9b01      	ldr	r3, [sp, #4]
 801ade0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ade4:	e00f      	b.n	801ae06 <__kernel_rem_pio2+0x596>
 801ade6:	ab9a      	add	r3, sp, #616	; 0x268
 801ade8:	441c      	add	r4, r3
 801adea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801adee:	2000      	movs	r0, #0
 801adf0:	2100      	movs	r1, #0
 801adf2:	2d00      	cmp	r5, #0
 801adf4:	da10      	bge.n	801ae18 <__kernel_rem_pio2+0x5a8>
 801adf6:	9b02      	ldr	r3, [sp, #8]
 801adf8:	b113      	cbz	r3, 801ae00 <__kernel_rem_pio2+0x590>
 801adfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801adfe:	4619      	mov	r1, r3
 801ae00:	9b01      	ldr	r3, [sp, #4]
 801ae02:	e9c3 0100 	strd	r0, r1, [r3]
 801ae06:	9b06      	ldr	r3, [sp, #24]
 801ae08:	f003 0007 	and.w	r0, r3, #7
 801ae0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ae10:	ecbd 8b02 	vpop	{d8}
 801ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae18:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ae1c:	f7e5 fa46 	bl	80002ac <__adddf3>
 801ae20:	3d01      	subs	r5, #1
 801ae22:	e7e6      	b.n	801adf2 <__kernel_rem_pio2+0x582>
 801ae24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ae28:	f7e5 fa40 	bl	80002ac <__adddf3>
 801ae2c:	3e01      	subs	r6, #1
 801ae2e:	e7bc      	b.n	801adaa <__kernel_rem_pio2+0x53a>
 801ae30:	4602      	mov	r2, r0
 801ae32:	460b      	mov	r3, r1
 801ae34:	e7c1      	b.n	801adba <__kernel_rem_pio2+0x54a>
 801ae36:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ae3a:	f7e5 fa37 	bl	80002ac <__adddf3>
 801ae3e:	3401      	adds	r4, #1
 801ae40:	e7c6      	b.n	801add0 <__kernel_rem_pio2+0x560>
 801ae42:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801ae46:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ae4a:	4640      	mov	r0, r8
 801ae4c:	ec53 2b17 	vmov	r2, r3, d7
 801ae50:	4649      	mov	r1, r9
 801ae52:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ae56:	f7e5 fa29 	bl	80002ac <__adddf3>
 801ae5a:	4602      	mov	r2, r0
 801ae5c:	460b      	mov	r3, r1
 801ae5e:	4606      	mov	r6, r0
 801ae60:	460f      	mov	r7, r1
 801ae62:	4640      	mov	r0, r8
 801ae64:	4649      	mov	r1, r9
 801ae66:	f7e5 fa1f 	bl	80002a8 <__aeabi_dsub>
 801ae6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ae6e:	f7e5 fa1d 	bl	80002ac <__adddf3>
 801ae72:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ae76:	e9ca 0100 	strd	r0, r1, [sl]
 801ae7a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ae7e:	e770      	b.n	801ad62 <__kernel_rem_pio2+0x4f2>
 801ae80:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801ae84:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ae88:	4630      	mov	r0, r6
 801ae8a:	ec53 2b17 	vmov	r2, r3, d7
 801ae8e:	4639      	mov	r1, r7
 801ae90:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ae94:	f7e5 fa0a 	bl	80002ac <__adddf3>
 801ae98:	4602      	mov	r2, r0
 801ae9a:	460b      	mov	r3, r1
 801ae9c:	4680      	mov	r8, r0
 801ae9e:	4689      	mov	r9, r1
 801aea0:	4630      	mov	r0, r6
 801aea2:	4639      	mov	r1, r7
 801aea4:	f7e5 fa00 	bl	80002a8 <__aeabi_dsub>
 801aea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aeac:	f7e5 f9fe 	bl	80002ac <__adddf3>
 801aeb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aeb4:	e9ca 0100 	strd	r0, r1, [sl]
 801aeb8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801aebc:	e756      	b.n	801ad6c <__kernel_rem_pio2+0x4fc>
 801aebe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aec2:	f7e5 f9f3 	bl	80002ac <__adddf3>
 801aec6:	3d01      	subs	r5, #1
 801aec8:	e756      	b.n	801ad78 <__kernel_rem_pio2+0x508>
 801aeca:	9b01      	ldr	r3, [sp, #4]
 801aecc:	9a01      	ldr	r2, [sp, #4]
 801aece:	601f      	str	r7, [r3, #0]
 801aed0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801aed4:	605c      	str	r4, [r3, #4]
 801aed6:	609d      	str	r5, [r3, #8]
 801aed8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801aedc:	60d3      	str	r3, [r2, #12]
 801aede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aee2:	6110      	str	r0, [r2, #16]
 801aee4:	6153      	str	r3, [r2, #20]
 801aee6:	e78e      	b.n	801ae06 <__kernel_rem_pio2+0x596>
 801aee8:	41700000 	.word	0x41700000
 801aeec:	3e700000 	.word	0x3e700000

0801aef0 <__kernel_sin>:
 801aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef4:	ec55 4b10 	vmov	r4, r5, d0
 801aef8:	b085      	sub	sp, #20
 801aefa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aefe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801af02:	ed8d 1b00 	vstr	d1, [sp]
 801af06:	9002      	str	r0, [sp, #8]
 801af08:	da06      	bge.n	801af18 <__kernel_sin+0x28>
 801af0a:	ee10 0a10 	vmov	r0, s0
 801af0e:	4629      	mov	r1, r5
 801af10:	f7e5 fe32 	bl	8000b78 <__aeabi_d2iz>
 801af14:	2800      	cmp	r0, #0
 801af16:	d051      	beq.n	801afbc <__kernel_sin+0xcc>
 801af18:	4622      	mov	r2, r4
 801af1a:	462b      	mov	r3, r5
 801af1c:	4620      	mov	r0, r4
 801af1e:	4629      	mov	r1, r5
 801af20:	f7e5 fb7a 	bl	8000618 <__aeabi_dmul>
 801af24:	4682      	mov	sl, r0
 801af26:	468b      	mov	fp, r1
 801af28:	4602      	mov	r2, r0
 801af2a:	460b      	mov	r3, r1
 801af2c:	4620      	mov	r0, r4
 801af2e:	4629      	mov	r1, r5
 801af30:	f7e5 fb72 	bl	8000618 <__aeabi_dmul>
 801af34:	a341      	add	r3, pc, #260	; (adr r3, 801b03c <__kernel_sin+0x14c>)
 801af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3a:	4680      	mov	r8, r0
 801af3c:	4689      	mov	r9, r1
 801af3e:	4650      	mov	r0, sl
 801af40:	4659      	mov	r1, fp
 801af42:	f7e5 fb69 	bl	8000618 <__aeabi_dmul>
 801af46:	a33f      	add	r3, pc, #252	; (adr r3, 801b044 <__kernel_sin+0x154>)
 801af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4c:	f7e5 f9ac 	bl	80002a8 <__aeabi_dsub>
 801af50:	4652      	mov	r2, sl
 801af52:	465b      	mov	r3, fp
 801af54:	f7e5 fb60 	bl	8000618 <__aeabi_dmul>
 801af58:	a33c      	add	r3, pc, #240	; (adr r3, 801b04c <__kernel_sin+0x15c>)
 801af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5e:	f7e5 f9a5 	bl	80002ac <__adddf3>
 801af62:	4652      	mov	r2, sl
 801af64:	465b      	mov	r3, fp
 801af66:	f7e5 fb57 	bl	8000618 <__aeabi_dmul>
 801af6a:	a33a      	add	r3, pc, #232	; (adr r3, 801b054 <__kernel_sin+0x164>)
 801af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af70:	f7e5 f99a 	bl	80002a8 <__aeabi_dsub>
 801af74:	4652      	mov	r2, sl
 801af76:	465b      	mov	r3, fp
 801af78:	f7e5 fb4e 	bl	8000618 <__aeabi_dmul>
 801af7c:	a337      	add	r3, pc, #220	; (adr r3, 801b05c <__kernel_sin+0x16c>)
 801af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af82:	f7e5 f993 	bl	80002ac <__adddf3>
 801af86:	9b02      	ldr	r3, [sp, #8]
 801af88:	4606      	mov	r6, r0
 801af8a:	460f      	mov	r7, r1
 801af8c:	b9db      	cbnz	r3, 801afc6 <__kernel_sin+0xd6>
 801af8e:	4602      	mov	r2, r0
 801af90:	460b      	mov	r3, r1
 801af92:	4650      	mov	r0, sl
 801af94:	4659      	mov	r1, fp
 801af96:	f7e5 fb3f 	bl	8000618 <__aeabi_dmul>
 801af9a:	a325      	add	r3, pc, #148	; (adr r3, 801b030 <__kernel_sin+0x140>)
 801af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa0:	f7e5 f982 	bl	80002a8 <__aeabi_dsub>
 801afa4:	4642      	mov	r2, r8
 801afa6:	464b      	mov	r3, r9
 801afa8:	f7e5 fb36 	bl	8000618 <__aeabi_dmul>
 801afac:	4602      	mov	r2, r0
 801afae:	460b      	mov	r3, r1
 801afb0:	4620      	mov	r0, r4
 801afb2:	4629      	mov	r1, r5
 801afb4:	f7e5 f97a 	bl	80002ac <__adddf3>
 801afb8:	4604      	mov	r4, r0
 801afba:	460d      	mov	r5, r1
 801afbc:	ec45 4b10 	vmov	d0, r4, r5
 801afc0:	b005      	add	sp, #20
 801afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc6:	2200      	movs	r2, #0
 801afc8:	4b1b      	ldr	r3, [pc, #108]	; (801b038 <__kernel_sin+0x148>)
 801afca:	e9dd 0100 	ldrd	r0, r1, [sp]
 801afce:	f7e5 fb23 	bl	8000618 <__aeabi_dmul>
 801afd2:	4632      	mov	r2, r6
 801afd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801afd8:	463b      	mov	r3, r7
 801afda:	4640      	mov	r0, r8
 801afdc:	4649      	mov	r1, r9
 801afde:	f7e5 fb1b 	bl	8000618 <__aeabi_dmul>
 801afe2:	4602      	mov	r2, r0
 801afe4:	460b      	mov	r3, r1
 801afe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801afea:	f7e5 f95d 	bl	80002a8 <__aeabi_dsub>
 801afee:	4652      	mov	r2, sl
 801aff0:	465b      	mov	r3, fp
 801aff2:	f7e5 fb11 	bl	8000618 <__aeabi_dmul>
 801aff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801affa:	f7e5 f955 	bl	80002a8 <__aeabi_dsub>
 801affe:	a30c      	add	r3, pc, #48	; (adr r3, 801b030 <__kernel_sin+0x140>)
 801b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b004:	4606      	mov	r6, r0
 801b006:	460f      	mov	r7, r1
 801b008:	4640      	mov	r0, r8
 801b00a:	4649      	mov	r1, r9
 801b00c:	f7e5 fb04 	bl	8000618 <__aeabi_dmul>
 801b010:	4602      	mov	r2, r0
 801b012:	460b      	mov	r3, r1
 801b014:	4630      	mov	r0, r6
 801b016:	4639      	mov	r1, r7
 801b018:	f7e5 f948 	bl	80002ac <__adddf3>
 801b01c:	4602      	mov	r2, r0
 801b01e:	460b      	mov	r3, r1
 801b020:	4620      	mov	r0, r4
 801b022:	4629      	mov	r1, r5
 801b024:	f7e5 f940 	bl	80002a8 <__aeabi_dsub>
 801b028:	e7c6      	b.n	801afb8 <__kernel_sin+0xc8>
 801b02a:	bf00      	nop
 801b02c:	f3af 8000 	nop.w
 801b030:	55555549 	.word	0x55555549
 801b034:	3fc55555 	.word	0x3fc55555
 801b038:	3fe00000 	.word	0x3fe00000
 801b03c:	5acfd57c 	.word	0x5acfd57c
 801b040:	3de5d93a 	.word	0x3de5d93a
 801b044:	8a2b9ceb 	.word	0x8a2b9ceb
 801b048:	3e5ae5e6 	.word	0x3e5ae5e6
 801b04c:	57b1fe7d 	.word	0x57b1fe7d
 801b050:	3ec71de3 	.word	0x3ec71de3
 801b054:	19c161d5 	.word	0x19c161d5
 801b058:	3f2a01a0 	.word	0x3f2a01a0
 801b05c:	1110f8a6 	.word	0x1110f8a6
 801b060:	3f811111 	.word	0x3f811111
 801b064:	00000000 	.word	0x00000000

0801b068 <atan>:
 801b068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b06c:	ec55 4b10 	vmov	r4, r5, d0
 801b070:	4bc3      	ldr	r3, [pc, #780]	; (801b380 <atan+0x318>)
 801b072:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b076:	429e      	cmp	r6, r3
 801b078:	46ab      	mov	fp, r5
 801b07a:	dd18      	ble.n	801b0ae <atan+0x46>
 801b07c:	4bc1      	ldr	r3, [pc, #772]	; (801b384 <atan+0x31c>)
 801b07e:	429e      	cmp	r6, r3
 801b080:	dc01      	bgt.n	801b086 <atan+0x1e>
 801b082:	d109      	bne.n	801b098 <atan+0x30>
 801b084:	b144      	cbz	r4, 801b098 <atan+0x30>
 801b086:	4622      	mov	r2, r4
 801b088:	462b      	mov	r3, r5
 801b08a:	4620      	mov	r0, r4
 801b08c:	4629      	mov	r1, r5
 801b08e:	f7e5 f90d 	bl	80002ac <__adddf3>
 801b092:	4604      	mov	r4, r0
 801b094:	460d      	mov	r5, r1
 801b096:	e006      	b.n	801b0a6 <atan+0x3e>
 801b098:	f1bb 0f00 	cmp.w	fp, #0
 801b09c:	f340 8131 	ble.w	801b302 <atan+0x29a>
 801b0a0:	a59b      	add	r5, pc, #620	; (adr r5, 801b310 <atan+0x2a8>)
 801b0a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b0a6:	ec45 4b10 	vmov	d0, r4, r5
 801b0aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ae:	4bb6      	ldr	r3, [pc, #728]	; (801b388 <atan+0x320>)
 801b0b0:	429e      	cmp	r6, r3
 801b0b2:	dc14      	bgt.n	801b0de <atan+0x76>
 801b0b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b0b8:	429e      	cmp	r6, r3
 801b0ba:	dc0d      	bgt.n	801b0d8 <atan+0x70>
 801b0bc:	a396      	add	r3, pc, #600	; (adr r3, 801b318 <atan+0x2b0>)
 801b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c2:	ee10 0a10 	vmov	r0, s0
 801b0c6:	4629      	mov	r1, r5
 801b0c8:	f7e5 f8f0 	bl	80002ac <__adddf3>
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	4baf      	ldr	r3, [pc, #700]	; (801b38c <atan+0x324>)
 801b0d0:	f7e5 fd32 	bl	8000b38 <__aeabi_dcmpgt>
 801b0d4:	2800      	cmp	r0, #0
 801b0d6:	d1e6      	bne.n	801b0a6 <atan+0x3e>
 801b0d8:	f04f 3aff 	mov.w	sl, #4294967295
 801b0dc:	e02b      	b.n	801b136 <atan+0xce>
 801b0de:	f000 f963 	bl	801b3a8 <fabs>
 801b0e2:	4bab      	ldr	r3, [pc, #684]	; (801b390 <atan+0x328>)
 801b0e4:	429e      	cmp	r6, r3
 801b0e6:	ec55 4b10 	vmov	r4, r5, d0
 801b0ea:	f300 80bf 	bgt.w	801b26c <atan+0x204>
 801b0ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b0f2:	429e      	cmp	r6, r3
 801b0f4:	f300 80a0 	bgt.w	801b238 <atan+0x1d0>
 801b0f8:	ee10 2a10 	vmov	r2, s0
 801b0fc:	ee10 0a10 	vmov	r0, s0
 801b100:	462b      	mov	r3, r5
 801b102:	4629      	mov	r1, r5
 801b104:	f7e5 f8d2 	bl	80002ac <__adddf3>
 801b108:	2200      	movs	r2, #0
 801b10a:	4ba0      	ldr	r3, [pc, #640]	; (801b38c <atan+0x324>)
 801b10c:	f7e5 f8cc 	bl	80002a8 <__aeabi_dsub>
 801b110:	2200      	movs	r2, #0
 801b112:	4606      	mov	r6, r0
 801b114:	460f      	mov	r7, r1
 801b116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b11a:	4620      	mov	r0, r4
 801b11c:	4629      	mov	r1, r5
 801b11e:	f7e5 f8c5 	bl	80002ac <__adddf3>
 801b122:	4602      	mov	r2, r0
 801b124:	460b      	mov	r3, r1
 801b126:	4630      	mov	r0, r6
 801b128:	4639      	mov	r1, r7
 801b12a:	f7e5 fb9f 	bl	800086c <__aeabi_ddiv>
 801b12e:	f04f 0a00 	mov.w	sl, #0
 801b132:	4604      	mov	r4, r0
 801b134:	460d      	mov	r5, r1
 801b136:	4622      	mov	r2, r4
 801b138:	462b      	mov	r3, r5
 801b13a:	4620      	mov	r0, r4
 801b13c:	4629      	mov	r1, r5
 801b13e:	f7e5 fa6b 	bl	8000618 <__aeabi_dmul>
 801b142:	4602      	mov	r2, r0
 801b144:	460b      	mov	r3, r1
 801b146:	4680      	mov	r8, r0
 801b148:	4689      	mov	r9, r1
 801b14a:	f7e5 fa65 	bl	8000618 <__aeabi_dmul>
 801b14e:	a374      	add	r3, pc, #464	; (adr r3, 801b320 <atan+0x2b8>)
 801b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b154:	4606      	mov	r6, r0
 801b156:	460f      	mov	r7, r1
 801b158:	f7e5 fa5e 	bl	8000618 <__aeabi_dmul>
 801b15c:	a372      	add	r3, pc, #456	; (adr r3, 801b328 <atan+0x2c0>)
 801b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b162:	f7e5 f8a3 	bl	80002ac <__adddf3>
 801b166:	4632      	mov	r2, r6
 801b168:	463b      	mov	r3, r7
 801b16a:	f7e5 fa55 	bl	8000618 <__aeabi_dmul>
 801b16e:	a370      	add	r3, pc, #448	; (adr r3, 801b330 <atan+0x2c8>)
 801b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b174:	f7e5 f89a 	bl	80002ac <__adddf3>
 801b178:	4632      	mov	r2, r6
 801b17a:	463b      	mov	r3, r7
 801b17c:	f7e5 fa4c 	bl	8000618 <__aeabi_dmul>
 801b180:	a36d      	add	r3, pc, #436	; (adr r3, 801b338 <atan+0x2d0>)
 801b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b186:	f7e5 f891 	bl	80002ac <__adddf3>
 801b18a:	4632      	mov	r2, r6
 801b18c:	463b      	mov	r3, r7
 801b18e:	f7e5 fa43 	bl	8000618 <__aeabi_dmul>
 801b192:	a36b      	add	r3, pc, #428	; (adr r3, 801b340 <atan+0x2d8>)
 801b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b198:	f7e5 f888 	bl	80002ac <__adddf3>
 801b19c:	4632      	mov	r2, r6
 801b19e:	463b      	mov	r3, r7
 801b1a0:	f7e5 fa3a 	bl	8000618 <__aeabi_dmul>
 801b1a4:	a368      	add	r3, pc, #416	; (adr r3, 801b348 <atan+0x2e0>)
 801b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1aa:	f7e5 f87f 	bl	80002ac <__adddf3>
 801b1ae:	4642      	mov	r2, r8
 801b1b0:	464b      	mov	r3, r9
 801b1b2:	f7e5 fa31 	bl	8000618 <__aeabi_dmul>
 801b1b6:	a366      	add	r3, pc, #408	; (adr r3, 801b350 <atan+0x2e8>)
 801b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1bc:	4680      	mov	r8, r0
 801b1be:	4689      	mov	r9, r1
 801b1c0:	4630      	mov	r0, r6
 801b1c2:	4639      	mov	r1, r7
 801b1c4:	f7e5 fa28 	bl	8000618 <__aeabi_dmul>
 801b1c8:	a363      	add	r3, pc, #396	; (adr r3, 801b358 <atan+0x2f0>)
 801b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ce:	f7e5 f86b 	bl	80002a8 <__aeabi_dsub>
 801b1d2:	4632      	mov	r2, r6
 801b1d4:	463b      	mov	r3, r7
 801b1d6:	f7e5 fa1f 	bl	8000618 <__aeabi_dmul>
 801b1da:	a361      	add	r3, pc, #388	; (adr r3, 801b360 <atan+0x2f8>)
 801b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e0:	f7e5 f862 	bl	80002a8 <__aeabi_dsub>
 801b1e4:	4632      	mov	r2, r6
 801b1e6:	463b      	mov	r3, r7
 801b1e8:	f7e5 fa16 	bl	8000618 <__aeabi_dmul>
 801b1ec:	a35e      	add	r3, pc, #376	; (adr r3, 801b368 <atan+0x300>)
 801b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f2:	f7e5 f859 	bl	80002a8 <__aeabi_dsub>
 801b1f6:	4632      	mov	r2, r6
 801b1f8:	463b      	mov	r3, r7
 801b1fa:	f7e5 fa0d 	bl	8000618 <__aeabi_dmul>
 801b1fe:	a35c      	add	r3, pc, #368	; (adr r3, 801b370 <atan+0x308>)
 801b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b204:	f7e5 f850 	bl	80002a8 <__aeabi_dsub>
 801b208:	4632      	mov	r2, r6
 801b20a:	463b      	mov	r3, r7
 801b20c:	f7e5 fa04 	bl	8000618 <__aeabi_dmul>
 801b210:	4602      	mov	r2, r0
 801b212:	460b      	mov	r3, r1
 801b214:	4640      	mov	r0, r8
 801b216:	4649      	mov	r1, r9
 801b218:	f7e5 f848 	bl	80002ac <__adddf3>
 801b21c:	4622      	mov	r2, r4
 801b21e:	462b      	mov	r3, r5
 801b220:	f7e5 f9fa 	bl	8000618 <__aeabi_dmul>
 801b224:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b228:	4602      	mov	r2, r0
 801b22a:	460b      	mov	r3, r1
 801b22c:	d14b      	bne.n	801b2c6 <atan+0x25e>
 801b22e:	4620      	mov	r0, r4
 801b230:	4629      	mov	r1, r5
 801b232:	f7e5 f839 	bl	80002a8 <__aeabi_dsub>
 801b236:	e72c      	b.n	801b092 <atan+0x2a>
 801b238:	ee10 0a10 	vmov	r0, s0
 801b23c:	2200      	movs	r2, #0
 801b23e:	4b53      	ldr	r3, [pc, #332]	; (801b38c <atan+0x324>)
 801b240:	4629      	mov	r1, r5
 801b242:	f7e5 f831 	bl	80002a8 <__aeabi_dsub>
 801b246:	2200      	movs	r2, #0
 801b248:	4606      	mov	r6, r0
 801b24a:	460f      	mov	r7, r1
 801b24c:	4b4f      	ldr	r3, [pc, #316]	; (801b38c <atan+0x324>)
 801b24e:	4620      	mov	r0, r4
 801b250:	4629      	mov	r1, r5
 801b252:	f7e5 f82b 	bl	80002ac <__adddf3>
 801b256:	4602      	mov	r2, r0
 801b258:	460b      	mov	r3, r1
 801b25a:	4630      	mov	r0, r6
 801b25c:	4639      	mov	r1, r7
 801b25e:	f7e5 fb05 	bl	800086c <__aeabi_ddiv>
 801b262:	f04f 0a01 	mov.w	sl, #1
 801b266:	4604      	mov	r4, r0
 801b268:	460d      	mov	r5, r1
 801b26a:	e764      	b.n	801b136 <atan+0xce>
 801b26c:	4b49      	ldr	r3, [pc, #292]	; (801b394 <atan+0x32c>)
 801b26e:	429e      	cmp	r6, r3
 801b270:	dc1d      	bgt.n	801b2ae <atan+0x246>
 801b272:	ee10 0a10 	vmov	r0, s0
 801b276:	2200      	movs	r2, #0
 801b278:	4b47      	ldr	r3, [pc, #284]	; (801b398 <atan+0x330>)
 801b27a:	4629      	mov	r1, r5
 801b27c:	f7e5 f814 	bl	80002a8 <__aeabi_dsub>
 801b280:	2200      	movs	r2, #0
 801b282:	4606      	mov	r6, r0
 801b284:	460f      	mov	r7, r1
 801b286:	4b44      	ldr	r3, [pc, #272]	; (801b398 <atan+0x330>)
 801b288:	4620      	mov	r0, r4
 801b28a:	4629      	mov	r1, r5
 801b28c:	f7e5 f9c4 	bl	8000618 <__aeabi_dmul>
 801b290:	2200      	movs	r2, #0
 801b292:	4b3e      	ldr	r3, [pc, #248]	; (801b38c <atan+0x324>)
 801b294:	f7e5 f80a 	bl	80002ac <__adddf3>
 801b298:	4602      	mov	r2, r0
 801b29a:	460b      	mov	r3, r1
 801b29c:	4630      	mov	r0, r6
 801b29e:	4639      	mov	r1, r7
 801b2a0:	f7e5 fae4 	bl	800086c <__aeabi_ddiv>
 801b2a4:	f04f 0a02 	mov.w	sl, #2
 801b2a8:	4604      	mov	r4, r0
 801b2aa:	460d      	mov	r5, r1
 801b2ac:	e743      	b.n	801b136 <atan+0xce>
 801b2ae:	462b      	mov	r3, r5
 801b2b0:	ee10 2a10 	vmov	r2, s0
 801b2b4:	2000      	movs	r0, #0
 801b2b6:	4939      	ldr	r1, [pc, #228]	; (801b39c <atan+0x334>)
 801b2b8:	f7e5 fad8 	bl	800086c <__aeabi_ddiv>
 801b2bc:	f04f 0a03 	mov.w	sl, #3
 801b2c0:	4604      	mov	r4, r0
 801b2c2:	460d      	mov	r5, r1
 801b2c4:	e737      	b.n	801b136 <atan+0xce>
 801b2c6:	4b36      	ldr	r3, [pc, #216]	; (801b3a0 <atan+0x338>)
 801b2c8:	4e36      	ldr	r6, [pc, #216]	; (801b3a4 <atan+0x33c>)
 801b2ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b2ce:	4456      	add	r6, sl
 801b2d0:	449a      	add	sl, r3
 801b2d2:	e9da 2300 	ldrd	r2, r3, [sl]
 801b2d6:	f7e4 ffe7 	bl	80002a8 <__aeabi_dsub>
 801b2da:	4622      	mov	r2, r4
 801b2dc:	462b      	mov	r3, r5
 801b2de:	f7e4 ffe3 	bl	80002a8 <__aeabi_dsub>
 801b2e2:	4602      	mov	r2, r0
 801b2e4:	460b      	mov	r3, r1
 801b2e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b2ea:	f7e4 ffdd 	bl	80002a8 <__aeabi_dsub>
 801b2ee:	f1bb 0f00 	cmp.w	fp, #0
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	460d      	mov	r5, r1
 801b2f6:	f6bf aed6 	bge.w	801b0a6 <atan+0x3e>
 801b2fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b2fe:	461d      	mov	r5, r3
 801b300:	e6d1      	b.n	801b0a6 <atan+0x3e>
 801b302:	a51d      	add	r5, pc, #116	; (adr r5, 801b378 <atan+0x310>)
 801b304:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b308:	e6cd      	b.n	801b0a6 <atan+0x3e>
 801b30a:	bf00      	nop
 801b30c:	f3af 8000 	nop.w
 801b310:	54442d18 	.word	0x54442d18
 801b314:	3ff921fb 	.word	0x3ff921fb
 801b318:	8800759c 	.word	0x8800759c
 801b31c:	7e37e43c 	.word	0x7e37e43c
 801b320:	e322da11 	.word	0xe322da11
 801b324:	3f90ad3a 	.word	0x3f90ad3a
 801b328:	24760deb 	.word	0x24760deb
 801b32c:	3fa97b4b 	.word	0x3fa97b4b
 801b330:	a0d03d51 	.word	0xa0d03d51
 801b334:	3fb10d66 	.word	0x3fb10d66
 801b338:	c54c206e 	.word	0xc54c206e
 801b33c:	3fb745cd 	.word	0x3fb745cd
 801b340:	920083ff 	.word	0x920083ff
 801b344:	3fc24924 	.word	0x3fc24924
 801b348:	5555550d 	.word	0x5555550d
 801b34c:	3fd55555 	.word	0x3fd55555
 801b350:	2c6a6c2f 	.word	0x2c6a6c2f
 801b354:	bfa2b444 	.word	0xbfa2b444
 801b358:	52defd9a 	.word	0x52defd9a
 801b35c:	3fadde2d 	.word	0x3fadde2d
 801b360:	af749a6d 	.word	0xaf749a6d
 801b364:	3fb3b0f2 	.word	0x3fb3b0f2
 801b368:	fe231671 	.word	0xfe231671
 801b36c:	3fbc71c6 	.word	0x3fbc71c6
 801b370:	9998ebc4 	.word	0x9998ebc4
 801b374:	3fc99999 	.word	0x3fc99999
 801b378:	54442d18 	.word	0x54442d18
 801b37c:	bff921fb 	.word	0xbff921fb
 801b380:	440fffff 	.word	0x440fffff
 801b384:	7ff00000 	.word	0x7ff00000
 801b388:	3fdbffff 	.word	0x3fdbffff
 801b38c:	3ff00000 	.word	0x3ff00000
 801b390:	3ff2ffff 	.word	0x3ff2ffff
 801b394:	40037fff 	.word	0x40037fff
 801b398:	3ff80000 	.word	0x3ff80000
 801b39c:	bff00000 	.word	0xbff00000
 801b3a0:	0801c120 	.word	0x0801c120
 801b3a4:	0801c100 	.word	0x0801c100

0801b3a8 <fabs>:
 801b3a8:	ec51 0b10 	vmov	r0, r1, d0
 801b3ac:	ee10 2a10 	vmov	r2, s0
 801b3b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b3b4:	ec43 2b10 	vmov	d0, r2, r3
 801b3b8:	4770      	bx	lr
 801b3ba:	0000      	movs	r0, r0
 801b3bc:	0000      	movs	r0, r0
	...

0801b3c0 <floor>:
 801b3c0:	ec51 0b10 	vmov	r0, r1, d0
 801b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b3cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b3d0:	2e13      	cmp	r6, #19
 801b3d2:	460c      	mov	r4, r1
 801b3d4:	ee10 5a10 	vmov	r5, s0
 801b3d8:	4680      	mov	r8, r0
 801b3da:	dc34      	bgt.n	801b446 <floor+0x86>
 801b3dc:	2e00      	cmp	r6, #0
 801b3de:	da16      	bge.n	801b40e <floor+0x4e>
 801b3e0:	a335      	add	r3, pc, #212	; (adr r3, 801b4b8 <floor+0xf8>)
 801b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e6:	f7e4 ff61 	bl	80002ac <__adddf3>
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	f7e5 fba3 	bl	8000b38 <__aeabi_dcmpgt>
 801b3f2:	b148      	cbz	r0, 801b408 <floor+0x48>
 801b3f4:	2c00      	cmp	r4, #0
 801b3f6:	da59      	bge.n	801b4ac <floor+0xec>
 801b3f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b3fc:	4a30      	ldr	r2, [pc, #192]	; (801b4c0 <floor+0x100>)
 801b3fe:	432b      	orrs	r3, r5
 801b400:	2500      	movs	r5, #0
 801b402:	42ab      	cmp	r3, r5
 801b404:	bf18      	it	ne
 801b406:	4614      	movne	r4, r2
 801b408:	4621      	mov	r1, r4
 801b40a:	4628      	mov	r0, r5
 801b40c:	e025      	b.n	801b45a <floor+0x9a>
 801b40e:	4f2d      	ldr	r7, [pc, #180]	; (801b4c4 <floor+0x104>)
 801b410:	4137      	asrs	r7, r6
 801b412:	ea01 0307 	and.w	r3, r1, r7
 801b416:	4303      	orrs	r3, r0
 801b418:	d01f      	beq.n	801b45a <floor+0x9a>
 801b41a:	a327      	add	r3, pc, #156	; (adr r3, 801b4b8 <floor+0xf8>)
 801b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b420:	f7e4 ff44 	bl	80002ac <__adddf3>
 801b424:	2200      	movs	r2, #0
 801b426:	2300      	movs	r3, #0
 801b428:	f7e5 fb86 	bl	8000b38 <__aeabi_dcmpgt>
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d0eb      	beq.n	801b408 <floor+0x48>
 801b430:	2c00      	cmp	r4, #0
 801b432:	bfbe      	ittt	lt
 801b434:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b438:	fa43 f606 	asrlt.w	r6, r3, r6
 801b43c:	19a4      	addlt	r4, r4, r6
 801b43e:	ea24 0407 	bic.w	r4, r4, r7
 801b442:	2500      	movs	r5, #0
 801b444:	e7e0      	b.n	801b408 <floor+0x48>
 801b446:	2e33      	cmp	r6, #51	; 0x33
 801b448:	dd0b      	ble.n	801b462 <floor+0xa2>
 801b44a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b44e:	d104      	bne.n	801b45a <floor+0x9a>
 801b450:	ee10 2a10 	vmov	r2, s0
 801b454:	460b      	mov	r3, r1
 801b456:	f7e4 ff29 	bl	80002ac <__adddf3>
 801b45a:	ec41 0b10 	vmov	d0, r0, r1
 801b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b462:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b466:	f04f 33ff 	mov.w	r3, #4294967295
 801b46a:	fa23 f707 	lsr.w	r7, r3, r7
 801b46e:	4207      	tst	r7, r0
 801b470:	d0f3      	beq.n	801b45a <floor+0x9a>
 801b472:	a311      	add	r3, pc, #68	; (adr r3, 801b4b8 <floor+0xf8>)
 801b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b478:	f7e4 ff18 	bl	80002ac <__adddf3>
 801b47c:	2200      	movs	r2, #0
 801b47e:	2300      	movs	r3, #0
 801b480:	f7e5 fb5a 	bl	8000b38 <__aeabi_dcmpgt>
 801b484:	2800      	cmp	r0, #0
 801b486:	d0bf      	beq.n	801b408 <floor+0x48>
 801b488:	2c00      	cmp	r4, #0
 801b48a:	da02      	bge.n	801b492 <floor+0xd2>
 801b48c:	2e14      	cmp	r6, #20
 801b48e:	d103      	bne.n	801b498 <floor+0xd8>
 801b490:	3401      	adds	r4, #1
 801b492:	ea25 0507 	bic.w	r5, r5, r7
 801b496:	e7b7      	b.n	801b408 <floor+0x48>
 801b498:	2301      	movs	r3, #1
 801b49a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b49e:	fa03 f606 	lsl.w	r6, r3, r6
 801b4a2:	4435      	add	r5, r6
 801b4a4:	4545      	cmp	r5, r8
 801b4a6:	bf38      	it	cc
 801b4a8:	18e4      	addcc	r4, r4, r3
 801b4aa:	e7f2      	b.n	801b492 <floor+0xd2>
 801b4ac:	2500      	movs	r5, #0
 801b4ae:	462c      	mov	r4, r5
 801b4b0:	e7aa      	b.n	801b408 <floor+0x48>
 801b4b2:	bf00      	nop
 801b4b4:	f3af 8000 	nop.w
 801b4b8:	8800759c 	.word	0x8800759c
 801b4bc:	7e37e43c 	.word	0x7e37e43c
 801b4c0:	bff00000 	.word	0xbff00000
 801b4c4:	000fffff 	.word	0x000fffff

0801b4c8 <matherr>:
 801b4c8:	2000      	movs	r0, #0
 801b4ca:	4770      	bx	lr
 801b4cc:	0000      	movs	r0, r0
	...

0801b4d0 <scalbn>:
 801b4d0:	b570      	push	{r4, r5, r6, lr}
 801b4d2:	ec55 4b10 	vmov	r4, r5, d0
 801b4d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b4da:	4606      	mov	r6, r0
 801b4dc:	462b      	mov	r3, r5
 801b4de:	b9aa      	cbnz	r2, 801b50c <scalbn+0x3c>
 801b4e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b4e4:	4323      	orrs	r3, r4
 801b4e6:	d03b      	beq.n	801b560 <scalbn+0x90>
 801b4e8:	4b31      	ldr	r3, [pc, #196]	; (801b5b0 <scalbn+0xe0>)
 801b4ea:	4629      	mov	r1, r5
 801b4ec:	2200      	movs	r2, #0
 801b4ee:	ee10 0a10 	vmov	r0, s0
 801b4f2:	f7e5 f891 	bl	8000618 <__aeabi_dmul>
 801b4f6:	4b2f      	ldr	r3, [pc, #188]	; (801b5b4 <scalbn+0xe4>)
 801b4f8:	429e      	cmp	r6, r3
 801b4fa:	4604      	mov	r4, r0
 801b4fc:	460d      	mov	r5, r1
 801b4fe:	da12      	bge.n	801b526 <scalbn+0x56>
 801b500:	a327      	add	r3, pc, #156	; (adr r3, 801b5a0 <scalbn+0xd0>)
 801b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b506:	f7e5 f887 	bl	8000618 <__aeabi_dmul>
 801b50a:	e009      	b.n	801b520 <scalbn+0x50>
 801b50c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b510:	428a      	cmp	r2, r1
 801b512:	d10c      	bne.n	801b52e <scalbn+0x5e>
 801b514:	ee10 2a10 	vmov	r2, s0
 801b518:	4620      	mov	r0, r4
 801b51a:	4629      	mov	r1, r5
 801b51c:	f7e4 fec6 	bl	80002ac <__adddf3>
 801b520:	4604      	mov	r4, r0
 801b522:	460d      	mov	r5, r1
 801b524:	e01c      	b.n	801b560 <scalbn+0x90>
 801b526:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b52a:	460b      	mov	r3, r1
 801b52c:	3a36      	subs	r2, #54	; 0x36
 801b52e:	4432      	add	r2, r6
 801b530:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b534:	428a      	cmp	r2, r1
 801b536:	dd0b      	ble.n	801b550 <scalbn+0x80>
 801b538:	ec45 4b11 	vmov	d1, r4, r5
 801b53c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b5a8 <scalbn+0xd8>
 801b540:	f000 f83c 	bl	801b5bc <copysign>
 801b544:	a318      	add	r3, pc, #96	; (adr r3, 801b5a8 <scalbn+0xd8>)
 801b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b54a:	ec51 0b10 	vmov	r0, r1, d0
 801b54e:	e7da      	b.n	801b506 <scalbn+0x36>
 801b550:	2a00      	cmp	r2, #0
 801b552:	dd08      	ble.n	801b566 <scalbn+0x96>
 801b554:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b558:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b55c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b560:	ec45 4b10 	vmov	d0, r4, r5
 801b564:	bd70      	pop	{r4, r5, r6, pc}
 801b566:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b56a:	da0d      	bge.n	801b588 <scalbn+0xb8>
 801b56c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b570:	429e      	cmp	r6, r3
 801b572:	ec45 4b11 	vmov	d1, r4, r5
 801b576:	dce1      	bgt.n	801b53c <scalbn+0x6c>
 801b578:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b5a0 <scalbn+0xd0>
 801b57c:	f000 f81e 	bl	801b5bc <copysign>
 801b580:	a307      	add	r3, pc, #28	; (adr r3, 801b5a0 <scalbn+0xd0>)
 801b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b586:	e7e0      	b.n	801b54a <scalbn+0x7a>
 801b588:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b58c:	3236      	adds	r2, #54	; 0x36
 801b58e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b592:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b596:	4620      	mov	r0, r4
 801b598:	4629      	mov	r1, r5
 801b59a:	2200      	movs	r2, #0
 801b59c:	4b06      	ldr	r3, [pc, #24]	; (801b5b8 <scalbn+0xe8>)
 801b59e:	e7b2      	b.n	801b506 <scalbn+0x36>
 801b5a0:	c2f8f359 	.word	0xc2f8f359
 801b5a4:	01a56e1f 	.word	0x01a56e1f
 801b5a8:	8800759c 	.word	0x8800759c
 801b5ac:	7e37e43c 	.word	0x7e37e43c
 801b5b0:	43500000 	.word	0x43500000
 801b5b4:	ffff3cb0 	.word	0xffff3cb0
 801b5b8:	3c900000 	.word	0x3c900000

0801b5bc <copysign>:
 801b5bc:	ec51 0b10 	vmov	r0, r1, d0
 801b5c0:	ee11 0a90 	vmov	r0, s3
 801b5c4:	ee10 2a10 	vmov	r2, s0
 801b5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b5cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b5d0:	ea41 0300 	orr.w	r3, r1, r0
 801b5d4:	ec43 2b10 	vmov	d0, r2, r3
 801b5d8:	4770      	bx	lr
	...

0801b5dc <_init>:
 801b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5de:	bf00      	nop
 801b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5e2:	bc08      	pop	{r3}
 801b5e4:	469e      	mov	lr, r3
 801b5e6:	4770      	bx	lr

0801b5e8 <_fini>:
 801b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5ea:	bf00      	nop
 801b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5ee:	bc08      	pop	{r3}
 801b5f0:	469e      	mov	lr, r3
 801b5f2:	4770      	bx	lr
