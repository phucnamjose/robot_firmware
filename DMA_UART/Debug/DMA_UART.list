
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001773c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  080178d0  080178d0  000278d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018328  08018328  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  08018328  08018328  00028328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018330  08018330  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018330  08018330  00028330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018334  08018334  00028334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  08018338  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005afc  20001008  08019340  00031008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006b04  08019340  00036b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294ea  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000058b4  00000000  00000000  0005a522  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  0005fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001860  00000000  00000000  00061868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281ab  00000000  00000000  000630c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b607  00000000  00000000  0008b273  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7f0c  00000000  00000000  000a687a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008250  00000000  00000000  0017e804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080178b4 	.word	0x080178b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	080178b4 	.word	0x080178b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f010 fe42 	bl	8011c48 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f011 fd8f 	bl	8012af8 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e23c      	b.n	8001480 <commandRead+0x4d8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e22c      	b.n	8001480 <commandRead+0x4d8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d120      	bne.n	800107e <commandRead+0xd6>
		if (3 == result) {
 800103c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001040:	2b03      	cmp	r3, #3
 8001042:	d112      	bne.n	800106a <commandRead+0xc2>
			result = sscanf( para, "%lf %lf",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001050:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001054:	4995      	ldr	r1, [pc, #596]	; (80012ac <commandRead+0x304>)
 8001056:	f011 fd4f 	bl	8012af8 <siscanf>
 800105a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <commandRead+0xc6>
				return CMD_ERROR;
 8001066:	230b      	movs	r3, #11
 8001068:	e20a      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 800106a:	230b      	movs	r3, #11
 800106c:	e208      	b.n	8001480 <commandRead+0x4d8>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 800107a:	2302      	movs	r3, #2
 800107c:	e200      	b.n	8001480 <commandRead+0x4d8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107e:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a1 	bl	80001d0 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d151      	bne.n	8001138 <commandRead+0x190>
		if (3 == result) {
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001098:	2b03      	cmp	r3, #3
 800109a:	d149      	bne.n	8001130 <commandRead+0x188>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 0658 	add.w	r6, r3, #88	; 0x58
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	3268      	adds	r2, #104	; 0x68
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	31f8      	adds	r1, #248	; 0xf8
 80010b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010bc:	9004      	str	r0, [sp, #16]
 80010be:	f107 0047 	add.w	r0, r7, #71	; 0x47
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f011 fd11 	bl	8012af8 <siscanf>
 80010d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d001      	beq.n	80010e6 <commandRead+0x13e>
				return CMD_ERROR;
 80010e2:	230b      	movs	r3, #11
 80010e4:	e1cc      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <commandRead+0x16a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001106:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001110:	e010      	b.n	8001134 <commandRead+0x18c>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001112:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <commandRead+0x184>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800112a:	e003      	b.n	8001134 <commandRead+0x18c>
			} else {
				return CMD_ERROR;
 800112c:	230b      	movs	r3, #11
 800112e:	e1a7      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001130:	230b      	movs	r3, #11
 8001132:	e1a5      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_LINE;
 8001134:	2303      	movs	r3, #3
 8001136:	e1a3      	b.n	8001480 <commandRead+0x4d8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <commandRead+0x300>)
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f844 	bl	80001d0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d15f      	bne.n	800120e <commandRead+0x266>
		if (3 == result) {
 800114e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001152:	2b03      	cmp	r3, #3
 8001154:	d157      	bne.n	8001206 <commandRead+0x25e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 0858 	add.w	r8, r3, #88	; 0x58
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3268      	adds	r2, #104	; 0x68
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	31b8      	adds	r1, #184	; 0xb8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	30c0      	adds	r0, #192	; 0xc0
 8001174:	687c      	ldr	r4, [r7, #4]
 8001176:	34c8      	adds	r4, #200	; 0xc8
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 8001178:	687d      	ldr	r5, [r7, #4]
 800117a:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 800117c:	687e      	ldr	r6, [r7, #4]
 800117e:	36f8      	adds	r6, #248	; 0xf8
 8001180:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8001184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800118e:	9307      	str	r3, [sp, #28]
 8001190:	9606      	str	r6, [sp, #24]
 8001192:	9505      	str	r5, [sp, #20]
 8001194:	9404      	str	r4, [sp, #16]
 8001196:	9003      	str	r0, [sp, #12]
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4643      	mov	r3, r8
 80011a2:	4672      	mov	r2, lr
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <commandRead+0x30c>)
 80011a6:	4660      	mov	r0, ip
 80011a8:	f011 fca6 	bl	8012af8 <siscanf>
 80011ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	d001      	beq.n	80011bc <commandRead+0x214>
				return CMD_ERROR;
 80011b8:	230b      	movs	r3, #11
 80011ba:	e161      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80011e6:	e010      	b.n	800120a <commandRead+0x262>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <commandRead+0x25a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011f6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001200:	e003      	b.n	800120a <commandRead+0x262>
			} else {
				return CMD_ERROR;
 8001202:	230b      	movs	r3, #11
 8001204:	e13c      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001206:	230b      	movs	r3, #11
 8001208:	e13a      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_CIRCLE;
 800120a:	2304      	movs	r3, #4
 800120c:	e138      	b.n	8001480 <commandRead+0x4d8>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <commandRead+0x300>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15c      	bne.n	80012de <commandRead+0x336>
		if (3 == result) {
 8001224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001228:	2b03      	cmp	r3, #3
 800122a:	d154      	bne.n	80012d6 <commandRead+0x32e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3360      	adds	r3, #96	; 0x60
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3268      	adds	r2, #104	; 0x68
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	31f8      	adds	r1, #248	; 0xf8
 8001244:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001248:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124c:	9004      	str	r0, [sp, #16]
 800124e:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8001252:	9003      	str	r0, [sp, #12]
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4633      	mov	r3, r6
 800125c:	462a      	mov	r2, r5
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <commandRead+0x308>)
 8001260:	4620      	mov	r0, r4
 8001262:	f011 fc49 	bl	8012af8 <siscanf>
 8001266:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800126a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800126e:	2b07      	cmp	r3, #7
 8001270:	d001      	beq.n	8001276 <commandRead+0x2ce>
				return CMD_ERROR;
 8001272:	230b      	movs	r3, #11
 8001274:	e104      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <commandRead+0x310>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001296:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80012a0:	e01b      	b.n	80012da <commandRead+0x332>
 80012a2:	bf00      	nop
 80012a4:	08017960 	.word	0x08017960
 80012a8:	20000000 	.word	0x20000000
 80012ac:	0801796c 	.word	0x0801796c
 80012b0:	08017974 	.word	0x08017974
 80012b4:	08017990 	.word	0x08017990
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80012b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <commandRead+0x32a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80012c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012d0:	e003      	b.n	80012da <commandRead+0x332>
			} else {
				return CMD_ERROR;
 80012d2:	230b      	movs	r3, #11
 80012d4:	e0d4      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 80012d6:	230b      	movs	r3, #11
 80012d8:	e0d2      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_JOINT;
 80012da:	2305      	movs	r3, #5
 80012dc:	e0d0      	b.n	8001480 <commandRead+0x4d8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <commandRead+0x4e4>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d14a      	bne.n	800138a <commandRead+0x3e2>
		if (3 == result) {
 80012f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d142      	bne.n	8001382 <commandRead+0x3da>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0418 	add.w	r4, r3, #24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	33f8      	adds	r3, #248	; 0xf8
 800130c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	f107 0217 	add.w	r2, r7, #23
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4623      	mov	r3, r4
 8001320:	460a      	mov	r2, r1
 8001322:	495b      	ldr	r1, [pc, #364]	; (8001490 <commandRead+0x4e8>)
 8001324:	f011 fbe8 	bl	8012af8 <siscanf>
 8001328:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001330:	2b05      	cmp	r3, #5
 8001332:	d001      	beq.n	8001338 <commandRead+0x390>
				return CMD_ERROR;
 8001334:	230b      	movs	r3, #11
 8001336:	e0a3      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <commandRead+0x3bc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001358:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001362:	e010      	b.n	8001386 <commandRead+0x3de>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <commandRead+0x3d6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001372:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800137c:	e003      	b.n	8001386 <commandRead+0x3de>
			} else {
				return CMD_ERROR;
 800137e:	230b      	movs	r3, #11
 8001380:	e07e      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001382:	230b      	movs	r3, #11
 8001384:	e07c      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_ROTATE_SINGLE;
 8001386:	2306      	movs	r3, #6
 8001388:	e07a      	b.n	8001480 <commandRead+0x4d8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <commandRead+0x4e4>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d112      	bne.n	80013c6 <commandRead+0x41e>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0210 	add.w	r2, r3, #16
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <commandRead+0x4ec>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f011 fba3 	bl	8012af8 <siscanf>
 80013b2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 80013b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <commandRead+0x41a>
			return CMD_ERROR;
 80013be:	230b      	movs	r3, #11
 80013c0:	e05e      	b.n	8001480 <commandRead+0x4d8>
		}

		return CMD_OUTPUT;
 80013c2:	2307      	movs	r3, #7
 80013c4:	e05c      	b.n	8001480 <commandRead+0x4d8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <commandRead+0x4e4>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <commandRead+0x438>
		return CMD_READ_STATUS;
 80013dc:	2308      	movs	r3, #8
 80013de:	e04f      	b.n	8001480 <commandRead+0x4d8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <commandRead+0x4e4>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef0 	bl	80001d0 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <commandRead+0x452>
			return CMD_READ_POSITION;
 80013f6:	2309      	movs	r3, #9
 80013f8:	e042      	b.n	8001480 <commandRead+0x4d8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <commandRead+0x4e4>)
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe fee3 	bl	80001d0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d136      	bne.n	800147e <commandRead+0x4d6>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 8001410:	f107 0316 	add.w	r3, r7, #22
 8001414:	f107 0215 	add.w	r2, r7, #21
 8001418:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <commandRead+0x4f0>)
 800141e:	f011 fb6b 	bl	8012af8 <siscanf>
 8001422:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800142a:	2b02      	cmp	r3, #2
 800142c:	d001      	beq.n	8001432 <commandRead+0x48a>
			return CMD_ERROR;
 800142e:	230b      	movs	r3, #11
 8001430:	e026      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001432:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <commandRead+0x49a>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	721a      	strb	r2, [r3, #8]
 8001440:	e009      	b.n	8001456 <commandRead+0x4ae>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <commandRead+0x4aa>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	721a      	strb	r2, [r3, #8]
 8001450:	e001      	b.n	8001456 <commandRead+0x4ae>
		} else {
			return CMD_ERROR;
 8001452:	230b      	movs	r3, #11
 8001454:	e014      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <commandRead+0x4be>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	731a      	strb	r2, [r3, #12]
 8001464:	e009      	b.n	800147a <commandRead+0x4d2>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001466:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <commandRead+0x4ce>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	731a      	strb	r2, [r3, #12]
 8001474:	e001      	b.n	800147a <commandRead+0x4d2>
		} else {
			return CMD_ERROR;
 8001476:	230b      	movs	r3, #11
 8001478:	e002      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_SETTING;
 800147a:	230a      	movs	r3, #10
 800147c:	e000      	b.n	8001480 <commandRead+0x4d8>

	// Error command
	} else {
		return CMD_ERROR;
 800147e:	230b      	movs	r3, #11
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	37a8      	adds	r7, #168	; 0xa8
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	080179bc 	.word	0x080179bc
 8001494:	080179d0 	.word	0x080179d0
 8001498:	080179d4 	.word	0x080179d4

0800149c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 800149c:	b082      	sub	sp, #8
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b0b6      	sub	sp, #216	; 0xd8
 80014a2:	af18      	add	r7, sp, #96	; 0x60
 80014a4:	4601      	mov	r1, r0
 80014a6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014aa:	e880 000c 	stmia.w	r0, {r2, r3}
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	f200 80f2 	bhi.w	800169e <commandReply+0x202>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <commandReply+0x24>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	080014f1 	.word	0x080014f1
 80014d0:	080014f1 	.word	0x080014f1
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001597 	.word	0x08001597
 80014e8:	080015c5 	.word	0x080015c5
 80014ec:	0800167f 	.word	0x0800167f
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014f0:	2309      	movs	r3, #9
 80014f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80014f6:	e0e1      	b.n	80016bc <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10d      	bne.n	800151c <commandReply+0x80>
				scaraSetOutput(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f005 ff03 	bl	800730c <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800150a:	4971      	ldr	r1, [pc, #452]	; (80016d0 <commandReply+0x234>)
 800150c:	461a      	mov	r2, r3
 800150e:	460b      	mov	r3, r1
 8001510:	cb03      	ldmia	r3!, {r0, r1}
 8001512:	6010      	str	r0, [r2, #0]
 8001514:	6051      	str	r1, [r2, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	8113      	strh	r3, [r2, #8]
 800151a:	e01e      	b.n	800155a <commandReply+0xbe>
			} else if (0 == duty_cmd.sub_para_int) {
 800151c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <commandReply+0xa8>
				scaraSetOutput(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f005 fef1 	bl	800730c <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800152a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800152e:	4969      	ldr	r1, [pc, #420]	; (80016d4 <commandReply+0x238>)
 8001530:	461a      	mov	r2, r3
 8001532:	460b      	mov	r3, r1
 8001534:	cb03      	ldmia	r3!, {r0, r1}
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	6051      	str	r1, [r2, #4]
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	8111      	strh	r1, [r2, #8]
 8001540:	7293      	strb	r3, [r2, #10]
 8001542:	e00a      	b.n	800155a <commandReply+0xbe>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001544:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <commandReply+0x23c>)
 800154a:	461c      	mov	r4, r3
 800154c:	4613      	mov	r3, r2
 800154e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	6061      	str	r1, [r4, #4]
 8001554:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001556:	2307      	movs	r3, #7
 8001558:	e0b2      	b.n	80016c0 <commandReply+0x224>
			}
			ret = RPD_OK;
 800155a:	2308      	movs	r3, #8
 800155c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 8001560:	e0ac      	b.n	80016bc <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001562:	f005 ff13 	bl	800738c <scaraGetMode>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			current_state	 = scaraGetDutyState();
 800156c:	f005 ff1a 	bl	80073a4 <scaraGetDutyState>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001576:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <commandReply+0xf2>
 800157e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <commandReply+0xf2>
				ret = RPD_IDLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800158c:	e096      	b.n	80016bc <commandReply+0x220>
				ret = RPD_BUSY;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 8001594:	e092      	b.n	80016bc <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fed6 	bl	800734c <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80015a0:	4668      	mov	r0, sp
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2260      	movs	r2, #96	; 0x60
 80015a8:	4619      	mov	r1, r3
 80015aa:	f010 fb29 	bl	8011c00 <memcpy>
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	cb0c      	ldmia	r3, {r2, r3}
 80015b4:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80015b8:	f005 ff3a 	bl	8007430 <scaraPosition2String>
			ret =  RPD_POSITION;
 80015bc:	2302      	movs	r3, #2
 80015be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 80015c2:	e07b      	b.n	80016bc <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80015c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 80015cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015d0:	4942      	ldr	r1, [pc, #264]	; (80016dc <commandReply+0x240>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	cb03      	ldmia	r3!, {r0, r1}
 80015d8:	6010      	str	r0, [r2, #0]
 80015da:	6051      	str	r1, [r2, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	8113      	strh	r3, [r2, #8]
 80015e0:	e017      	b.n	8001612 <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015e2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10a      	bne.n	8001600 <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <commandReply+0x244>)
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	cb03      	ldmia	r3!, {r0, r1}
 80015f6:	6010      	str	r0, [r2, #0]
 80015f8:	6051      	str	r1, [r2, #4]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	8113      	strh	r3, [r2, #8]
 80015fe:	e008      	b.n	8001612 <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <commandReply+0x248>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4619      	mov	r1, r3
 8001606:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800160a:	f011 faa1 	bl	8012b50 <strcat>
			return RPD_ERROR;
 800160e:	2307      	movs	r3, #7
 8001610:	e056      	b.n	80016c0 <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001612:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 800161a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800161e:	f7fe fde1 	bl	80001e4 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800162a:	4413      	add	r3, r2
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <commandReply+0x24c>)
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	8892      	ldrh	r2, [r2, #4]
 8001634:	809a      	strh	r2, [r3, #4]
 8001636:	e01e      	b.n	8001676 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001638:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800163c:	2b01      	cmp	r3, #1
 800163e:	d111      	bne.n	8001664 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 8001640:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001644:	f7fe fdce 	bl	80001e4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001650:	4413      	add	r3, r2
 8001652:	4926      	ldr	r1, [pc, #152]	; (80016ec <commandReply+0x250>)
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	7213      	strb	r3, [r2, #8]
 8001662:	e008      	b.n	8001676 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <commandReply+0x248>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800166e:	f011 fa6f 	bl	8012b50 <strcat>
			return RPD_ERROR;
 8001672:	2307      	movs	r3, #7
 8001674:	e024      	b.n	80016c0 <commandReply+0x224>
		}
		ret = RPD_OK;
 8001676:	2308      	movs	r3, #8
 8001678:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800167c:	e01e      	b.n	80016bc <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800167e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <commandReply+0x254>)
 8001684:	461d      	mov	r5, r3
 8001686:	4614      	mov	r4, r2
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	6028      	str	r0, [r5, #0]
 800168c:	6069      	str	r1, [r5, #4]
 800168e:	60aa      	str	r2, [r5, #8]
 8001690:	60eb      	str	r3, [r5, #12]
 8001692:	7823      	ldrb	r3, [r4, #0]
 8001694:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001696:	2307      	movs	r3, #7
 8001698:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800169c:	e00e      	b.n	80016bc <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800169e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <commandReply+0x254>)
 80016a4:	461d      	mov	r5, r3
 80016a6:	4614      	mov	r4, r2
 80016a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016aa:	6028      	str	r0, [r5, #0]
 80016ac:	6069      	str	r1, [r5, #4]
 80016ae:	60aa      	str	r2, [r5, #8]
 80016b0:	60eb      	str	r3, [r5, #12]
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return ret;
 80016bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3778      	adds	r7, #120	; 0x78
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ca:	b002      	add	sp, #8
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	080179dc 	.word	0x080179dc
 80016d4:	080179e8 	.word	0x080179e8
 80016d8:	080179f4 	.word	0x080179f4
 80016dc:	08017a00 	.word	0x08017a00
 80016e0:	08017a0c 	.word	0x08017a0c
 80016e4:	20000c80 	.word	0x20000c80
 80016e8:	08017a18 	.word	0x08017a18
 80016ec:	08017a20 	.word	0x08017a20
 80016f0:	08017a2c 	.word	0x08017a2c

080016f4 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d836      	bhi.n	8001778 <commandRespond+0x84>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <commandRespond+0x1c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001735 	.word	0x08001735
 8001714:	08001735 	.word	0x08001735
 8001718:	0800175b 	.word	0x0800175b
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800175b 	.word	0x0800175b
 8001724:	0800175b 	.word	0x0800175b
 8001728:	0800175b 	.word	0x0800175b
 800172c:	0800175b 	.word	0x0800175b
 8001730:	0800175b 	.word	0x0800175b
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001734:	f005 fe42 	bl	80073bc <scaraIsScanLimit>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <commandRespond+0x94>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	7cfa      	ldrb	r2, [r7, #19]
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <commandRespond+0x98>)
 800174e:	2114      	movs	r1, #20
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f011 f97d 	bl	8012a50 <sniprintf>
 8001756:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001758:	e010      	b.n	800177c <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <commandRespond+0x94>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <commandRespond+0x9c>)
 800176c:	2191      	movs	r1, #145	; 0x91
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f011 f96e 	bl	8012a50 <sniprintf>
 8001774:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001776:	e001      	b.n	800177c <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 800177c:	697b      	ldr	r3, [r7, #20]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000002c 	.word	0x2000002c
 800178c:	08017a40 	.word	0x08017a40
 8001790:	08017a4c 	.word	0x08017a4c

08001794 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	; 0x58
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s\n", line, message);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	f107 0008 	add.w	r0, r7, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <LOG_REPORT+0x78>)
 80017ae:	213f      	movs	r1, #63	; 0x3f
 80017b0:	f011 f94e 	bl	8012a50 <sniprintf>
 80017b4:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d101      	bne.n	80017c2 <LOG_REPORT+0x2e>
		return FALSE;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01f      	b.n	8001802 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <LOG_REPORT+0x7c>)
 80017cc:	f001 fd03 	bl	80031d6 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <LOG_REPORT+0x80>)
 80017d2:	f006 fd53 	bl	800827c <HAL_DMA_GetState>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <LOG_REPORT+0x4c>
		return TRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	e010      	b.n	8001802 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <LOG_REPORT+0x84>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <LOG_REPORT+0x7c>)
 80017e8:	f001 fd1d 	bl	8003226 <ringBuff_PopArray>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017f6:	461a      	mov	r2, r3
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <LOG_REPORT+0x84>)
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <LOG_REPORT+0x88>)
 80017fc:	f009 f86e 	bl	800a8dc <HAL_UART_Transmit_DMA>
	return TRUE;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08017a58 	.word	0x08017a58
 8001810:	2000086c 	.word	0x2000086c
 8001814:	20005df0 	.word	0x20005df0
 8001818:	200051d4 	.word	0x200051d4
 800181c:	20005db0 	.word	0x20005db0

08001820 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d901      	bls.n	800183a <double2string+0x1a>
		precision = 6;
 8001836:	2306      	movs	r3, #6
 8001838:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001846:	f7ff f959 	bl	8000afc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <double2string+0x38>
		sign = -1;
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001856:	e002      	b.n	800185e <double2string+0x3e>
	} else {
		sign = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe6e 	bl	8000544 <__aeabi_i2d>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001880:	a307      	add	r3, pc, #28	; (adr r3, 80018a0 <double2string+0x80>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188a:	f7ff f955 	bl	8000b38 <__aeabi_dcmpgt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <double2string+0x88>
		return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e265      	b.n	8001d66 <double2string+0x546>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80018a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ac:	f7ff f964 	bl	8000b78 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4acf      	ldr	r2, [pc, #828]	; (8001bf0 <double2string+0x3d0>)
 80018b4:	fb82 1203 	smull	r1, r2, r2, r3
 80018b8:	1192      	asrs	r2, r2, #6
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f7ff f957 	bl	8000b78 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4ac9      	ldr	r2, [pc, #804]	; (8001bf4 <double2string+0x3d4>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7f3b      	ldrb	r3, [r7, #28]
 80018dc:	4619      	mov	r1, r3
 80018de:	0149      	lsls	r1, r1, #5
 80018e0:	1ac9      	subs	r1, r1, r3
 80018e2:	0089      	lsls	r1, r1, #2
 80018e4:	1acb      	subs	r3, r1, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7ff f940 	bl	8000b78 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4abf      	ldr	r2, [pc, #764]	; (8001bf8 <double2string+0x3d8>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1092      	asrs	r2, r2, #2
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7f7b      	ldrb	r3, [r7, #29]
 800190a:	4619      	mov	r1, r3
 800190c:	0149      	lsls	r1, r1, #5
 800190e:	1ac9      	subs	r1, r1, r3
 8001910:	0089      	lsls	r1, r1, #2
 8001912:	1acb      	subs	r3, r1, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	7f3b      	ldrb	r3, [r7, #28]
 800191a:	4618      	mov	r0, r3
 800191c:	0080      	lsls	r0, r0, #2
 800191e:	4418      	add	r0, r3
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	1ac3      	subs	r3, r0, r3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	440b      	add	r3, r1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001936:	f7ff f91f 	bl	8000b78 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7f7b      	ldrb	r3, [r7, #29]
 8001940:	4619      	mov	r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	4419      	add	r1, r3
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	4618      	mov	r0, r3
 8001952:	0040      	lsls	r0, r0, #1
 8001954:	4403      	add	r3, r0
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	440b      	add	r3, r1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7fbb      	ldrb	r3, [r7, #30]
 8001964:	4619      	mov	r1, r3
 8001966:	0149      	lsls	r1, r1, #5
 8001968:	1ac9      	subs	r1, r1, r3
 800196a:	0089      	lsls	r1, r1, #2
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001978:	7f3b      	ldrb	r3, [r7, #28]
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	fb03 f302 	mul.w	r3, r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f7fe fc87 	bl	80002a8 <__aeabi_dsub>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4625      	mov	r5, r4
 80019a0:	461c      	mov	r4, r3
 80019a2:	7f7b      	ldrb	r3, [r7, #29]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	fb03 f302 	mul.w	r3, r3, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc75 	bl	80002a8 <__aeabi_dsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb6 	bl	8000544 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc62 	bl	80002a8 <__aeabi_dsub>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4625      	mov	r5, r4
 80019ea:	461c      	mov	r4, r3
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda8 	bl	8000544 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc54 	bl	80002a8 <__aeabi_dsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <double2string+0x3dc>)
 8001a0e:	f7fe fe03 	bl	8000618 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1e:	f7ff f8ab 	bl	8000b78 <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <double2string+0x3d4>)
 8001a26:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2a:	1152      	asrs	r2, r2, #5
 8001a2c:	17db      	asrs	r3, r3, #31
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a38:	f7ff f89e 	bl	8000b78 <__aeabi_d2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <double2string+0x3d8>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1092      	asrs	r2, r2, #2
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7d3b      	ldrb	r3, [r7, #20]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	0149      	lsls	r1, r1, #5
 8001a52:	1ac9      	subs	r1, r1, r3
 8001a54:	0089      	lsls	r1, r1, #2
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a66:	f7ff f887 	bl	8000b78 <__aeabi_d2iz>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	4619      	mov	r1, r3
 8001a72:	0149      	lsls	r1, r1, #5
 8001a74:	1ac9      	subs	r1, r1, r3
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2d9      	uxtb	r1, r3
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	0080      	lsls	r0, r0, #2
 8001a84:	4418      	add	r0, r3
 8001a86:	00c0      	lsls	r0, r0, #3
 8001a88:	1ac3      	subs	r3, r0, r3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	440b      	add	r3, r1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	fb03 f302 	mul.w	r3, r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd4e 	bl	8000544 <__aeabi_i2d>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	f7fe fbf8 	bl	80002a8 <__aeabi_dsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd39 	bl	8000544 <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbe5 	bl	80002a8 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4625      	mov	r5, r4
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4618      	mov	r0, r3
 8001b00:	4621      	mov	r1, r4
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <double2string+0x3dc>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b18:	f7ff f82e 	bl	8000b78 <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <double2string+0x3d4>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1152      	asrs	r2, r2, #5
 8001b26:	17db      	asrs	r3, r3, #31
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001b2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b32:	f7ff f821 	bl	8000b78 <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <double2string+0x3d8>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	1ac9      	subs	r1, r1, r3
 8001b4e:	0089      	lsls	r1, r1, #2
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	f7ff f80a 	bl	8000b78 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7e3b      	ldrb	r3, [r7, #24]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	0149      	lsls	r1, r1, #5
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	0089      	lsls	r1, r1, #2
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	0080      	lsls	r0, r0, #2
 8001b7e:	4418      	add	r0, r3
 8001b80:	00c0      	lsls	r0, r0, #3
 8001b82:	1ac3      	subs	r3, r0, r3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	440b      	add	r3, r1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fb03 f302 	mul.w	r3, r3, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd0 	bl	8000544 <__aeabi_i2d>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bb0:	f7fe fb7a 	bl	80002a8 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4625      	mov	r5, r4
 8001bba:	461c      	mov	r4, r3
 8001bbc:	7e3b      	ldrb	r3, [r7, #24]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2364      	movs	r3, #100	; 0x64
 8001bc2:	fb03 f302 	mul.w	r3, r3, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcbc 	bl	8000544 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb68 	bl	80002a8 <__aeabi_dsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4625      	mov	r5, r4
 8001bde:	461c      	mov	r4, r3
 8001be0:	7e7b      	ldrb	r3, [r7, #25]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcae 	bl	8000544 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e008      	b.n	8001c00 <double2string+0x3e0>
 8001bee:	bf00      	nop
 8001bf0:	10624dd3 	.word	0x10624dd3
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	408f4000 	.word	0x408f4000
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb50 	bl	80002a8 <__aeabi_dsub>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <double2string+0x550>)
 8001c16:	f7fe ff85 	bl	8000b24 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <double2string+0x408>
		le[5]++;
 8001c20:	7e7b      	ldrb	r3, [r7, #25]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d107      	bne.n	8001c46 <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	222d      	movs	r2, #45	; 0x2d
 8001c44:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <double2string+0x554>)
 8001c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c50:	f7fe ff54 	bl	8000afc <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <double2string+0x44c>
		*(result + index++) = 0x30;
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e04b      	b.n	8001d04 <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001c72:	e027      	b.n	8001cc4 <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001c74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3230      	adds	r2, #48	; 0x30
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
				i++;
 8001ca6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001cb4:	e00a      	b.n	8001ccc <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001cb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	ddd3      	ble.n	8001c74 <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001ccc:	e016      	b.n	8001cfc <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001cce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3230      	adds	r2, #48	; 0x30
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	dde4      	ble.n	8001cce <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	222e      	movs	r2, #46	; 0x2e
 8001d12:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d1a:	e016      	b.n	8001d4a <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001d1c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d24:	4413      	add	r3, r2
 8001d26:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	440b      	add	r3, r1
 8001d36:	3230      	adds	r2, #48	; 0x30
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d3c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d4a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe3      	blt.n	8001d1c <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	return index;
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	3fe00000 	.word	0x3fe00000
 8001d74:	3ff00000 	.word	0x3ff00000

08001d78 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	466b      	mov	r3, sp
 8001d86:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <packPayload+0x1c>
		return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e056      	b.n	8001e42 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <packPayload+0x28>
		return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e050      	b.n	8001e42 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	00d4      	lsls	r4, r2, #3
 8001dc2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	00d4      	lsls	r4, r2, #3
 8001dda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4603      	mov	r3, r0
 8001de2:	3307      	adds	r3, #7
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dec:	466b      	mov	r3, sp
 8001dee:	3300      	adds	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	61ba      	str	r2, [r7, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2128      	movs	r1, #40	; 0x28
 8001e00:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e00b      	b.n	8001e20 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	61b9      	str	r1, [r7, #24]
 8001e14:	7811      	ldrb	r1, [r2, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbef      	blt.n	8001e08 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61ba      	str	r2, [r7, #24]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2129      	movs	r1, #41	; 0x29
 8001e32:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	f00f feeb 	bl	8011c16 <memmove>

	return out_lenght;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	46ad      	mov	sp, r5
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}

08001e4c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	466b      	mov	r3, sp
 8001e58:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	dc02      	bgt.n	8001e66 <unPackPayload+0x1a>
		return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e063      	b.n	8001f2e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b28      	cmp	r3, #40	; 0x28
 8001e6c:	d106      	bne.n	8001e7c <unPackPayload+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b29      	cmp	r3, #41	; 0x29
 8001e7a:	d002      	beq.n	8001e82 <unPackPayload+0x36>
		return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e055      	b.n	8001f2e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3b02      	subs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001e88:	6938      	ldr	r0, [r7, #16]
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	00d4      	lsls	r4, r2, #3
 8001ea0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ea4:	00cb      	lsls	r3, r1, #3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	00d4      	lsls	r4, r2, #3
 8001eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ebc:	00cb      	lsls	r3, r1, #3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eca:	466b      	mov	r3, sp
 8001ecc:	3300      	adds	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e017      	b.n	8001f0a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b28      	cmp	r3, #40	; 0x28
 8001ee4:	d00e      	beq.n	8001f04 <unPackPayload+0xb8>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d008      	beq.n	8001f04 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	6139      	str	r1, [r7, #16]
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbe2      	blt.n	8001eda <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f00f fe94 	bl	8011c48 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f00f fe75 	bl	8011c16 <memmove>

	return out_lenght;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	46ad      	mov	sp, r5
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}

08001f38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f005 feb0 	bl	8007cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f005 fec9 	bl	8007cfc <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20001024 	.word	0x20001024
 8001fa8:	20001078 	.word	0x20001078

08001fac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00c f9e7 	bl	800e392 <osMutexCreate>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_FREERTOS_Init+0x90>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001fca:	2301      	movs	r3, #1
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fce:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00c fb73 	bl	800e6cc <osMailCreate>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_FREERTOS_Init+0x94>)
 8001fea:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_FREERTOS_Init+0x98>)
 8001fee:	f107 041c 	add.w	r4, r7, #28
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00c f963 	bl	800e2d2 <osThreadCreate>
 800200c:	4602      	mov	r2, r0
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_FREERTOS_Init+0x9c>)
 8002010:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_FREERTOS_Init+0xa0>)
 8002014:	463c      	mov	r4, r7
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002024:	463b      	mov	r3, r7
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f00c f952 	bl	800e2d2 <osThreadCreate>
 800202e:	4602      	mov	r2, r0
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_FREERTOS_Init+0xa4>)
 8002032:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	; 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200052d8 	.word	0x200052d8
 8002040:	200052dc 	.word	0x200052dc
 8002044:	08017a74 	.word	0x08017a74
 8002048:	200052d4 	.word	0x200052d4
 800204c:	08017aa0 	.word	0x08017aa0
 8002050:	200052e4 	.word	0x200052e4
 8002054:	00000000 	.word	0x00000000

08002058 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800205e:	af3e      	add	r7, sp, #248	; 0xf8
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002064:	f00f f852 	bl	801110c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
  // Robot variable
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 800206e:	21c4      	movs	r1, #196	; 0xc4
 8002070:	48b3      	ldr	r0, [pc, #716]	; (8002340 <StartDefaultTask+0x2e8>)
 8002072:	f7ff fb8f 	bl	8001794 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  no_scan = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  no_duty = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
  no_duty_success	= 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
  no_duty_fail		= 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  current_mode	 = scaraGetMode();
 8002094:	f005 f97a 	bl	800738c <scaraGetMode>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
  current_state	 = scaraGetDutyState();
 800209e:	f005 f981 	bl	80073a4 <scaraGetDutyState>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 80020a8:	4aa6      	ldr	r2, [pc, #664]	; (8002344 <StartDefaultTask+0x2ec>)
 80020aa:	a4a1      	add	r4, pc, #644	; (adr r4, 8002330 <StartDefaultTask+0x2d8>)
 80020ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020b0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	  positionNext.Theta2 = PI/3;
 80020b4:	4aa3      	ldr	r2, [pc, #652]	; (8002344 <StartDefaultTask+0x2ec>)
 80020b6:	a4a0      	add	r4, pc, #640	; (adr r4, 8002338 <StartDefaultTask+0x2e0>)
 80020b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020bc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	  positionNext.D3 = 10;
 80020c0:	4aa0      	ldr	r2, [pc, #640]	; (8002344 <StartDefaultTask+0x2ec>)
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	4ca0      	ldr	r4, [pc, #640]	; (8002348 <StartDefaultTask+0x2f0>)
 80020c8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	  positionNext.Theta4 = 0;
 80020cc:	4a9d      	ldr	r2, [pc, #628]	; (8002344 <StartDefaultTask+0x2ec>)
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	  positionNext.t = 0;
 80020da:	4a9a      	ldr	r2, [pc, #616]	; (8002344 <StartDefaultTask+0x2ec>)
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f04f 0400 	mov.w	r4, #0
 80020e4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  kinematicForward(&positionNext);
 80020e8:	4896      	ldr	r0, [pc, #600]	; (8002344 <StartDefaultTask+0x2ec>)
 80020ea:	f000 fc3d 	bl	8002968 <kinematicForward>
  /* Infinite loop */

  for(;;)
  {
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
	  respond_packed_lenght = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
	  infor_lenght			= 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
	  infor_packed_lenght	= 0;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
	  task_usb_lenght		= 0;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
	  usb_lenght			= 0;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002112:	4a8e      	ldr	r2, [pc, #568]	; (800234c <StartDefaultTask+0x2f4>)
 8002114:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <StartDefaultTask+0x2f8>)
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	2368      	movs	r3, #104	; 0x68
 800211c:	461a      	mov	r2, r3
 800211e:	f00f fd6f 	bl	8011c00 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002122:	4a8b      	ldr	r2, [pc, #556]	; (8002350 <StartDefaultTask+0x2f8>)
 8002124:	4b87      	ldr	r3, [pc, #540]	; (8002344 <StartDefaultTask+0x2ec>)
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	2368      	movs	r3, #104	; 0x68
 800212c:	461a      	mov	r2, r3
 800212e:	f00f fd67 	bl	8011c00 <memcpy>
#endif

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002132:	4b88      	ldr	r3, [pc, #544]	; (8002354 <StartDefaultTask+0x2fc>)
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800213a:	2200      	movs	r2, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f00c fb71 	bl	800e824 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002142:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002146:	2b20      	cmp	r3, #32
 8002148:	d11a      	bne.n	8002180 <StartDefaultTask+0x128>
		   dataMail = ret_mail.value.p;
 800214a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800214e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002152:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002156:	f44f 7284 	mov.w	r2, #264	; 0x108
 800215a:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800215e:	4618      	mov	r0, r3
 8002160:	f00f fd4e 	bl	8011c00 <memcpy>
		   isNewDuty = TRUE;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <StartDefaultTask+0x2fc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8002172:	4618      	mov	r0, r3
 8002174:	f00c fbca 	bl	800e90c <osMailFree>
		   LOG_REPORT("Receive mail", __LINE__);
 8002178:	21f0      	movs	r1, #240	; 0xf0
 800217a:	4877      	ldr	r0, [pc, #476]	; (8002358 <StartDefaultTask+0x300>)
 800217c:	f7ff fb0a 	bl	8001794 <LOG_REPORT>
	  }
	  if(isNewDuty) {
 8002180:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a9 	beq.w	80022dc <StartDefaultTask+0x284>
		  memset(respond, 0, 40);
 800218a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800218e:	2228      	movs	r2, #40	; 0x28
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f00f fd58 	bl	8011c48 <memset>
		  switch( duty_cmd.robot_mode) {
 8002198:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d01c      	beq.n	80021dc <StartDefaultTask+0x184>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d04c      	beq.n	8002240 <StartDefaultTask+0x1e8>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8090 	bne.w	80022cc <StartDefaultTask+0x274>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 80021ac:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
				  current_mode	 = SCARA_MODE_STOP;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
				  respond_lenght = commandRespond(RPD_OK,
 80021bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80021c6:	4a65      	ldr	r2, [pc, #404]	; (800235c <StartDefaultTask+0x304>)
 80021c8:	2008      	movs	r0, #8
 80021ca:	f7ff fa93 	bl	80016f4 <commandRespond>
 80021ce:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80021d2:	21fd      	movs	r1, #253	; 0xfd
 80021d4:	4862      	ldr	r0, [pc, #392]	; (8002360 <StartDefaultTask+0x308>)
 80021d6:	f7ff fadd 	bl	8001794 <LOG_REPORT>
			  }
			  break;
 80021da:	e07c      	b.n	80022d6 <StartDefaultTask+0x27e>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021dc:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d11c      	bne.n	800221e <StartDefaultTask+0x1c6>
 80021e4:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d118      	bne.n	800221e <StartDefaultTask+0x1c6>
					  no_scan++;
 80021ec:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80021f0:	3301      	adds	r3, #1
 80021f2:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
					  current_mode = SCARA_MODE_SCAN;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
					  respond_lenght = commandRespond(RPD_OK,
 80021fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002206:	4a57      	ldr	r2, [pc, #348]	; (8002364 <StartDefaultTask+0x30c>)
 8002208:	2008      	movs	r0, #8
 800220a:	f7ff fa73 	bl	80016f4 <commandRespond>
 800220e:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
							  	  	  	  	  	  	  duty_cmd.id_command,
													  "Start Scan",
													  (char *)respond);
					  LOG_REPORT("SCAN", __LINE__);
 8002212:	f240 1109 	movw	r1, #265	; 0x109
 8002216:	4854      	ldr	r0, [pc, #336]	; (8002368 <StartDefaultTask+0x310>)
 8002218:	f7ff fabc 	bl	8001794 <LOG_REPORT>
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
				  }
			  }
			  break;
 800221c:	e05b      	b.n	80022d6 <StartDefaultTask+0x27e>
					  respond_lenght = commandRespond(RPD_ERROR,
 800221e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <StartDefaultTask+0x314>)
 800222a:	2007      	movs	r0, #7
 800222c:	f7ff fa62 	bl	80016f4 <commandRespond>
 8002230:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
 8002234:	f240 110f 	movw	r1, #271	; 0x10f
 8002238:	484d      	ldr	r0, [pc, #308]	; (8002370 <StartDefaultTask+0x318>)
 800223a:	f7ff faab 	bl	8001794 <LOG_REPORT>
			  break;
 800223e:	e04a      	b.n	80022d6 <StartDefaultTask+0x27e>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 8002240:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800224a:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800224e:	2b02      	cmp	r3, #2
 8002250:	d125      	bne.n	800229e <StartDefaultTask+0x246>
 8002252:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 8002256:	2b00      	cmp	r3, #0
 8002258:	d121      	bne.n	800229e <StartDefaultTask+0x246>
					  if (scaraIsScanLimit()) {
 800225a:	f005 f8af 	bl	80073bc <scaraIsScanLimit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <StartDefaultTask+0x21a>
						  current_mode	 = SCARA_MODE_DUTY;
 8002264:	2302      	movs	r3, #2
 8002266:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
						  current_state	 = SCARA_DUTY_STATE_INIT;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
					  if (scaraIsScanLimit()) {
 8002270:	e02b      	b.n	80022ca <StartDefaultTask+0x272>
					  } else {
						  no_duty_fail++;
 8002272:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8002276:	3301      	adds	r3, #1
 8002278:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
						  respond_lenght = commandRespond(RPD_ERROR,
 800227c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002286:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <StartDefaultTask+0x31c>)
 8002288:	2007      	movs	r0, #7
 800228a:	f7ff fa33 	bl	80016f4 <commandRespond>
 800228e:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002292:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002296:	4838      	ldr	r0, [pc, #224]	; (8002378 <StartDefaultTask+0x320>)
 8002298:	f7ff fa7c 	bl	8001794 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 800229c:	e015      	b.n	80022ca <StartDefaultTask+0x272>
					  }
				  } else {
					  no_duty_fail++;
 800229e:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80022a2:	3301      	adds	r3, #1
 80022a4:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
					  respond_lenght	= commandRespond(RPD_ERROR,
 80022a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <StartDefaultTask+0x324>)
 80022b4:	2007      	movs	r0, #7
 80022b6:	f7ff fa1d 	bl	80016f4 <commandRespond>
 80022ba:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022be:	f44f 7194 	mov.w	r1, #296	; 0x128
 80022c2:	482f      	ldr	r0, [pc, #188]	; (8002380 <StartDefaultTask+0x328>)
 80022c4:	f7ff fa66 	bl	8001794 <LOG_REPORT>
				  }
			  }
			  break;
 80022c8:	e005      	b.n	80022d6 <StartDefaultTask+0x27e>
 80022ca:	e004      	b.n	80022d6 <StartDefaultTask+0x27e>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022cc:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80022d0:	482c      	ldr	r0, [pc, #176]	; (8002384 <StartDefaultTask+0x32c>)
 80022d2:	f7ff fa5f 	bl	8001794 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 80022dc:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00b      	beq.n	80022fc <StartDefaultTask+0x2a4>
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d010      	beq.n	800230a <StartDefaultTask+0x2b2>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 814e 	bne.w	800258a <StartDefaultTask+0x532>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
			  current_state = SCARA_DUTY_STATE_READY;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
		  }
		  break;
 80022fa:	e14c      	b.n	8002596 <StartDefaultTask+0x53e>
	  case SCARA_MODE_SCAN:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
			  current_state = SCARA_DUTY_STATE_READY;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
		  }
		  break;
 8002308:	e145      	b.n	8002596 <StartDefaultTask+0x53e>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 800230a:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 800230e:	2b03      	cmp	r3, #3
 8002310:	f200 8134 	bhi.w	800257c <StartDefaultTask+0x524>
 8002314:	a201      	add	r2, pc, #4	; (adr r2, 800231c <StartDefaultTask+0x2c4>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800232d 	.word	0x0800232d
 8002320:	08002389 	.word	0x08002389
 8002324:	08002467 	.word	0x08002467
 8002328:	08002519 	.word	0x08002519
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 800232c:	bf00      	nop
				  }
			  break;
 800232e:	e12b      	b.n	8002588 <StartDefaultTask+0x530>
 8002330:	40000000 	.word	0x40000000
 8002334:	bff0c152 	.word	0xbff0c152
 8002338:	40000000 	.word	0x40000000
 800233c:	3ff0c152 	.word	0x3ff0c152
 8002340:	08017abc 	.word	0x08017abc
 8002344:	20005d08 	.word	0x20005d08
 8002348:	40240000 	.word	0x40240000
 800234c:	20005c38 	.word	0x20005c38
 8002350:	20005ca0 	.word	0x20005ca0
 8002354:	200052dc 	.word	0x200052dc
 8002358:	08017adc 	.word	0x08017adc
 800235c:	08017aec 	.word	0x08017aec
 8002360:	08017af8 	.word	0x08017af8
 8002364:	08017b08 	.word	0x08017b08
 8002368:	08017b14 	.word	0x08017b14
 800236c:	08017b1c 	.word	0x08017b1c
 8002370:	08017b24 	.word	0x08017b24
 8002374:	08017b38 	.word	0x08017b38
 8002378:	08017b4c 	.word	0x08017b4c
 800237c:	08017b60 	.word	0x08017b60
 8002380:	08017b68 	.word	0x08017b68
 8002384:	08017b78 	.word	0x08017b78
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status;
					  status = scaraInitDuty(duty_cmd);
 8002388:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 800238c:	4668      	mov	r0, sp
 800238e:	f104 0310 	add.w	r3, r4, #16
 8002392:	22f8      	movs	r2, #248	; 0xf8
 8002394:	4619      	mov	r1, r3
 8002396:	f00f fc33 	bl	8011c00 <memcpy>
 800239a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239e:	f000 ffbf 	bl	8003320 <scaraInitDuty>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 352a 	strb.w	r3, [r7, #1322]	; 0x52a
					  if ( SCARA_STATUS_OK == status) {
 80023a8:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d13d      	bne.n	800242c <StartDefaultTask+0x3d4>
						  no_duty_success++;
 80023b0:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80023b4:	3301      	adds	r3, #1
 80023b6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80023ba:	2302      	movs	r3, #2
 80023bc:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
						  run_time			= 0;
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f04f 0400 	mov.w	r4, #0
 80023c8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80023cc:	e9c2 3400 	strd	r3, r4, [r2]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 80023d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status],
 80023da:	4ab1      	ldr	r2, [pc, #708]	; (80026a0 <StartDefaultTask+0x648>)
 80023dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 80023e0:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80023e4:	2008      	movs	r0, #8
 80023e6:	f7ff f985 	bl	80016f4 <commandRespond>
 80023ea:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 80023ee:	4cad      	ldr	r4, [pc, #692]	; (80026a4 <StartDefaultTask+0x64c>)
 80023f0:	f507 7558 	add.w	r5, r7, #864	; 0x360
 80023f4:	4668      	mov	r0, sp
 80023f6:	f104 0308 	add.w	r3, r4, #8
 80023fa:	2260      	movs	r2, #96	; 0x60
 80023fc:	4619      	mov	r1, r3
 80023fe:	f00f fbff 	bl	8011c00 <memcpy>
 8002402:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002406:	4628      	mov	r0, r5
 8002408:	f005 f812 	bl	8007430 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 800240c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002410:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8002414:	2100      	movs	r1, #0
 8002416:	2003      	movs	r0, #3
 8002418:	f7ff f96c 	bl	80016f4 <commandRespond>
 800241c:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
		  	  	  	  	  	  	  	  	  	  	  	  	  	  0,
															  (char *)position,
															  (char *)infor);
						  LOG_REPORT("INIT SUCCESS", __LINE__);
 8002420:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002424:	48a0      	ldr	r0, [pc, #640]	; (80026a8 <StartDefaultTask+0x650>)
 8002426:	f7ff f9b5 	bl	8001794 <LOG_REPORT>
															  (char *)DETAIL_STATUS[status],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 800242a:	e0ad      	b.n	8002588 <StartDefaultTask+0x530>
						  no_duty_fail++;
 800242c:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8002430:	3301      	adds	r3, #1
 8002432:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
						  current_state 	= SCARA_DUTY_STATE_READY;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
						  respond_lenght	= commandRespond(RPD_ERROR,
 800243c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
															  (char *)DETAIL_STATUS[status],
 8002446:	4a96      	ldr	r2, [pc, #600]	; (80026a0 <StartDefaultTask+0x648>)
 8002448:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 800244c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002450:	2007      	movs	r0, #7
 8002452:	f7ff f94f 	bl	80016f4 <commandRespond>
 8002456:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  LOG_REPORT("INIT FAIL", __LINE__);
 800245a:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800245e:	4893      	ldr	r0, [pc, #588]	; (80026ac <StartDefaultTask+0x654>)
 8002460:	f7ff f998 	bl	8001794 <LOG_REPORT>
			  break;
 8002464:	e090      	b.n	8002588 <StartDefaultTask+0x530>
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 8002466:	a38c      	add	r3, pc, #560	; (adr r3, 8002698 <StartDefaultTask+0x640>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8002470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002474:	f7fd ff1a 	bl	80002ac <__adddf3>
 8002478:	4603      	mov	r3, r0
 800247a:	460c      	mov	r4, r1
 800247c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8002480:	e9c2 3400 	strd	r3, r4, [r2]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 8002484:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8002488:	ed93 0b00 	vldr	d0, [r3]
 800248c:	f004 ffa4 	bl	80073d8 <scaraIsFinish>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <StartDefaultTask+0x446>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002496:	2303      	movs	r3, #3
 8002498:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 800249c:	e074      	b.n	8002588 <StartDefaultTask+0x530>
						  status = scaraFlowDuty(run_time);
 800249e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80024a2:	ed93 0b00 	vldr	d0, [r3]
 80024a6:	f003 f9ed 	bl	8005884 <scaraFlowDuty>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f887 352b 	strb.w	r3, [r7, #1323]	; 0x52b
						  if ( SCARA_STATUS_OK == status) {
 80024b0:	f897 352b 	ldrb.w	r3, [r7, #1323]	; 0x52b
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d119      	bne.n	80024ec <StartDefaultTask+0x494>
							  scaraPosition2String((char *)position, positionCurrent);
 80024b8:	4c7a      	ldr	r4, [pc, #488]	; (80026a4 <StartDefaultTask+0x64c>)
 80024ba:	f507 7558 	add.w	r5, r7, #864	; 0x360
 80024be:	4668      	mov	r0, sp
 80024c0:	f104 0308 	add.w	r3, r4, #8
 80024c4:	2260      	movs	r2, #96	; 0x60
 80024c6:	4619      	mov	r1, r3
 80024c8:	f00f fb9a 	bl	8011c00 <memcpy>
 80024cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024d0:	4628      	mov	r0, r5
 80024d2:	f004 ffad 	bl	8007430 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 80024d6:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80024da:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80024de:	2100      	movs	r1, #0
 80024e0:	2004      	movs	r0, #4
 80024e2:	f7ff f907 	bl	80016f4 <commandRespond>
 80024e6:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
			  break;
 80024ea:	e04d      	b.n	8002588 <StartDefaultTask+0x530>
							  current_state = SCARA_DUTY_STATE_FINISH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
							  infor_lenght = commandRespond(RPD_STOP,
 80024f2:	f897 352b 	ldrb.w	r3, [r7, #1323]	; 0x52b
															(char *)DETAIL_STATUS[status],
 80024f6:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <StartDefaultTask+0x648>)
 80024f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 80024fc:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002500:	2100      	movs	r1, #0
 8002502:	2006      	movs	r0, #6
 8002504:	f7ff f8f6 	bl	80016f4 <commandRespond>
 8002508:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
							  LOG_REPORT("STOP", __LINE__);
 800250c:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002510:	4867      	ldr	r0, [pc, #412]	; (80026b0 <StartDefaultTask+0x658>)
 8002512:	f7ff f93f 	bl	8001794 <LOG_REPORT>
			  break;
 8002516:	e037      	b.n	8002588 <StartDefaultTask+0x530>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  current_state = SCARA_DUTY_STATE_READY;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
					  positionNext.t = 0;
 800251e:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <StartDefaultTask+0x65c>)
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	e9c2 3406 	strd	r3, r4, [r2, #24]
					  positionNext.total_time = 0;
 800252c:	4a61      	ldr	r2, [pc, #388]	; (80026b4 <StartDefaultTask+0x65c>)
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	f04f 0400 	mov.w	r4, #0
 8002536:	e9c2 3408 	strd	r3, r4, [r2, #32]
					  positionNext.q = 0;
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <StartDefaultTask+0x65c>)
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	e9c2 3400 	strd	r3, r4, [r2]
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 8002548:	4c56      	ldr	r4, [pc, #344]	; (80026a4 <StartDefaultTask+0x64c>)
 800254a:	f507 7558 	add.w	r5, r7, #864	; 0x360
 800254e:	4668      	mov	r0, sp
 8002550:	f104 0308 	add.w	r3, r4, #8
 8002554:	2260      	movs	r2, #96	; 0x60
 8002556:	4619      	mov	r1, r3
 8002558:	f00f fb52 	bl	8011c00 <memcpy>
 800255c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002560:	4628      	mov	r0, r5
 8002562:	f004 ff65 	bl	8007430 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 8002566:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800256a:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800256e:	2100      	movs	r1, #0
 8002570:	2005      	movs	r0, #5
 8002572:	f7ff f8bf 	bl	80016f4 <commandRespond>
 8002576:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 800257a:	e005      	b.n	8002588 <StartDefaultTask+0x530>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800257c:	f240 1199 	movw	r1, #409	; 0x199
 8002580:	484d      	ldr	r0, [pc, #308]	; (80026b8 <StartDefaultTask+0x660>)
 8002582:	f7ff f907 	bl	8001794 <LOG_REPORT>
					  while(1);
 8002586:	e7fe      	b.n	8002586 <StartDefaultTask+0x52e>
				  }
			  }

		  }
		  break;
 8002588:	e005      	b.n	8002596 <StartDefaultTask+0x53e>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 800258a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800258e:	484b      	ldr	r0, [pc, #300]	; (80026bc <StartDefaultTask+0x664>)
 8002590:	f7ff f900 	bl	8001794 <LOG_REPORT>
			  while(1);
 8002594:	e7fe      	b.n	8002594 <StartDefaultTask+0x53c>
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <StartDefaultTask+0x668>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 31ff 	mov.w	r1, #4294967295
 800259e:	4618      	mov	r0, r3
 80025a0:	f00b ff10 	bl	800e3c4 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 80025a4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80025a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ac:	4619      	mov	r1, r3
 80025ae:	4845      	ldr	r0, [pc, #276]	; (80026c4 <StartDefaultTask+0x66c>)
 80025b0:	f000 fe39 	bl	8003226 <ringBuff_PopArray>
 80025b4:	f8c7 0534 	str.w	r0, [r7, #1332]	; 0x534
	  osMutexRelease(usbTxMutexHandle);
 80025b8:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <StartDefaultTask+0x668>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f00b ff4f 	bl	800e460 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 80025c2:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dd13      	ble.n	80025f2 <StartDefaultTask+0x59a>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 80025ca:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80025ce:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80025d2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fbce 	bl	8001d78 <packPayload>
 80025dc:	f8c7 054c 	str.w	r0, [r7, #1356]	; 0x54c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 80025e0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80025e4:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00f fb07 	bl	8011c00 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80025f2:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dd0b      	ble.n	8002612 <StartDefaultTask+0x5ba>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80025fa:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80025fe:	f107 0208 	add.w	r2, r7, #8
 8002602:	4413      	add	r3, r2
 8002604:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8002608:	f507 710d 	add.w	r1, r7, #564	; 0x234
 800260c:	4618      	mov	r0, r3
 800260e:	f00f faf7 	bl	8011c00 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002612:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8002616:	2b00      	cmp	r3, #0
 8002618:	dd19      	ble.n	800264e <StartDefaultTask+0x5f6>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 800261a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800261e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002622:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fba6 	bl	8001d78 <packPayload>
 800262c:	f8c7 0548 	str.w	r0, [r7, #1352]	; 0x548
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002630:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8002634:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002638:	4413      	add	r3, r2
 800263a:	f107 0208 	add.w	r2, r7, #8
 800263e:	4413      	add	r3, r2
 8002640:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 8002644:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8002648:	4618      	mov	r0, r3
 800264a:	f00f fad9 	bl	8011c00 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 800264e:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8002652:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002656:	4413      	add	r3, r2
 8002658:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 800265c:	4413      	add	r3, r2
 800265e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
	  // Send through USB
	  if (usb_lenght > 0) {
 8002662:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002666:	2b00      	cmp	r3, #0
 8002668:	dd08      	ble.n	800267c <StartDefaultTask+0x624>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 800266a:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800266e:	b29a      	uxth	r2, r3
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f00e fe54 	bl	8011324 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 800267c:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 8002680:	4618      	mov	r0, r3
 8002682:	f004 fe73 	bl	800736c <scaraSetMode>
	  scaraSetDutyState(current_state);
 8002686:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fe4e 	bl	800732c <scaraSetDutyState>

    osDelay(10);
 8002690:	200a      	movs	r0, #10
 8002692:	f00b fe6a 	bl	800e36a <osDelay>
	  respond_lenght		= 0;
 8002696:	e52a      	b.n	80020ee <StartDefaultTask+0x96>
 8002698:	40000000 	.word	0x40000000
 800269c:	3f847ae1 	.word	0x3f847ae1
 80026a0:	20000c80 	.word	0x20000c80
 80026a4:	20005ca0 	.word	0x20005ca0
 80026a8:	08017b8c 	.word	0x08017b8c
 80026ac:	08017b9c 	.word	0x08017b9c
 80026b0:	08017ba8 	.word	0x08017ba8
 80026b4:	20005d08 	.word	0x20005d08
 80026b8:	08017bb0 	.word	0x08017bb0
 80026bc:	08017bc0 	.word	0x08017bc0
 80026c0:	200052d8 	.word	0x200052d8
 80026c4:	20000460 	.word	0x20000460

080026c8 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80026ce:	af42      	add	r7, sp, #264	; 0x108
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	6018      	str	r0, [r3, #0]
	//uint8_t test_command1[60] = "(1 ROTA 3 0.785398 0.3 0 0.3)";
	//uint8_t test_command2[60] = "(456 OUTP 1)";

	//ringBuff_PushArray(&usb_rx_ringbuff, test_command1, strlen((char *)test_command1));
	//ringBuff_PushArray(&usb_rx_ringbuff, test_command2, strlen((char *)test_command2));
	no_duty	 = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	no_other = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80026e0:	2129      	movs	r1, #41	; 0x29
 80026e2:	4884      	ldr	r0, [pc, #528]	; (80028f4 <Start_USB_RX_Task+0x22c>)
 80026e4:	f000 fdc0 	bl	8003268 <ringBuff_DistanceOf>
 80026e8:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
		  if ( -1 != distance ) {
 80026ec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d0f4      	beq.n	80026e0 <Start_USB_RX_Task+0x18>
 80026f6:	466b      	mov	r3, sp
 80026f8:	461e      	mov	r6, r3
			  LOG_REPORT("NEW PACKET", __LINE__);
 80026fa:	f240 11ed 	movw	r1, #493	; 0x1ed
 80026fe:	487e      	ldr	r0, [pc, #504]	; (80028f8 <Start_USB_RX_Task+0x230>)
 8002700:	f7ff f848 	bl	8001794 <LOG_REPORT>
			  uint8_t temp[distance+1];
 8002704:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002708:	1c58      	adds	r0, r3, #1
 800270a:	1e43      	subs	r3, r0, #1
 800270c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	00d4      	lsls	r4, r2, #3
 8002722:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002726:	00cb      	lsls	r3, r1, #3
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f04f 0400 	mov.w	r4, #0
 8002738:	00d4      	lsls	r4, r2, #3
 800273a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800273e:	00cb      	lsls	r3, r1, #3
 8002740:	4603      	mov	r3, r0
 8002742:	3307      	adds	r3, #7
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	ebad 0d03 	sub.w	sp, sp, r3
 800274c:	ab42      	add	r3, sp, #264	; 0x108
 800274e:	3300      	adds	r3, #0
 8002750:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002754:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002758:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800275c:	3301      	adds	r3, #1
 800275e:	461a      	mov	r2, r3
 8002760:	4864      	ldr	r0, [pc, #400]	; (80028f4 <Start_USB_RX_Task+0x22c>)
 8002762:	f000 fd60 	bl	8003226 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002766:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800276a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800276e:	3301      	adds	r3, #1
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7ff fb6a 	bl	8001e4c <unPackPayload>
 8002778:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
			  if( -1 == ret) {
 800277c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d105      	bne.n	8002792 <Start_USB_RX_Task+0xca>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002786:	f240 11f3 	movw	r1, #499	; 0x1f3
 800278a:	485c      	ldr	r0, [pc, #368]	; (80028fc <Start_USB_RX_Task+0x234>)
 800278c:	f7ff f802 	bl	8001794 <LOG_REPORT>
 8002790:	e0ae      	b.n	80028f0 <Start_USB_RX_Task+0x228>
			  } else {
				  LOG_REPORT("UNPACK SUCCESS", __LINE__);
 8002792:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002796:	485a      	ldr	r0, [pc, #360]	; (8002900 <Start_USB_RX_Task+0x238>)
 8002798:	f7fe fffc 	bl	8001794 <LOG_REPORT>
				  LOG_REPORT((char*) temp, __LINE__);
 800279c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027a0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fff5 	bl	8001794 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 80027aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027ae:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80027b2:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fbf6 	bl	8000fa8 <commandRead>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				  memset(detail, 0, sizeof(detail));
 80027c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027c6:	2287      	movs	r2, #135	; 0x87
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00f fa3c 	bl	8011c48 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 80027d0:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 80027d4:	f897 52db 	ldrb.w	r5, [r7, #731]	; 0x2db
 80027d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027dc:	9340      	str	r3, [sp, #256]	; 0x100
 80027de:	4668      	mov	r0, sp
 80027e0:	f104 0308 	add.w	r3, r4, #8
 80027e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e8:	4619      	mov	r1, r3
 80027ea:	f00f fa09 	bl	8011c00 <memcpy>
 80027ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7fe fe52 	bl	800149c <commandReply>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da

				  if ( RPD_DUTY == rpd_type) {
 80027fe:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
 8002802:	2b09      	cmp	r3, #9
 8002804:	d131      	bne.n	800286a <Start_USB_RX_Task+0x1a2>
					  no_duty++;
 8002806:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800280a:	3301      	adds	r3, #1
 800280c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
					  // Wait allocate
					  while (dataMail == NULL) {
 8002816:	e008      	b.n	800282a <Start_USB_RX_Task+0x162>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <Start_USB_RX_Task+0x23c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	4618      	mov	r0, r3
 8002822:	f00b ffab 	bl	800e77c <osMailAlloc>
 8002826:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
					  while (dataMail == NULL) {
 800282a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f2      	beq.n	8002818 <Start_USB_RX_Task+0x150>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002832:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002836:	f44f 7284 	mov.w	r2, #264	; 0x108
 800283a:	4619      	mov	r1, r3
 800283c:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 8002840:	f00f f9de 	bl	8011c00 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <Start_USB_RX_Task+0x23c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 800284c:	4618      	mov	r0, r3
 800284e:	f00b ffab 	bl	800e7a8 <osMailPut>
 8002852:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
					  if (osOK == result) {
 8002856:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800285a:	2b00      	cmp	r3, #0
 800285c:	d148      	bne.n	80028f0 <Start_USB_RX_Task+0x228>
						  LOG_REPORT("DUTY SEND", __LINE__);
 800285e:	f240 2107 	movw	r1, #519	; 0x207
 8002862:	4829      	ldr	r0, [pc, #164]	; (8002908 <Start_USB_RX_Task+0x240>)
 8002864:	f7fe ff96 	bl	8001794 <LOG_REPORT>
 8002868:	e042      	b.n	80028f0 <Start_USB_RX_Task+0x228>
					  }

				  } else {
					  no_other++;
 800286a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800286e:	3301      	adds	r3, #1
 8002870:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
					  memset(respond, 0, sizeof(respond));
 8002874:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002878:	2291      	movs	r2, #145	; 0x91
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00f f9e3 	bl	8011c48 <memset>
					  memset(message, 0, sizeof(message));
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2296      	movs	r2, #150	; 0x96
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f00f f9dc 	bl	8011c48 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8002890:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8002894:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002898:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800289c:	f897 02da 	ldrb.w	r0, [r7, #730]	; 0x2da
 80028a0:	f7fe ff28 	bl	80016f4 <commandRespond>
 80028a4:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028b0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fa5f 	bl	8001d78 <packPayload>
 80028ba:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <Start_USB_RX_Task+0x244>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f04f 31ff 	mov.w	r1, #4294967295
 80028c6:	4618      	mov	r0, r3
 80028c8:	f00b fd7c 	bl	800e3c4 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80028d4:	4619      	mov	r1, r3
 80028d6:	480e      	ldr	r0, [pc, #56]	; (8002910 <Start_USB_RX_Task+0x248>)
 80028d8:	f000 fc7d 	bl	80031d6 <ringBuff_PushArray>
					  LOG_REPORT("ADD RINGBUFF", __LINE__);
 80028dc:	f240 2115 	movw	r1, #533	; 0x215
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <Start_USB_RX_Task+0x24c>)
 80028e2:	f7fe ff57 	bl	8001794 <LOG_REPORT>
					  osMutexRelease(usbTxMutexHandle);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <Start_USB_RX_Task+0x244>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00b fdb8 	bl	800e460 <osMutexRelease>
 80028f0:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80028f2:	e6f5      	b.n	80026e0 <Start_USB_RX_Task+0x18>
 80028f4:	20000054 	.word	0x20000054
 80028f8:	08017bd0 	.word	0x08017bd0
 80028fc:	08017bdc 	.word	0x08017bdc
 8002900:	08017be8 	.word	0x08017be8
 8002904:	200052dc 	.word	0x200052dc
 8002908:	08017bf8 	.word	0x08017bf8
 800290c:	200052d8 	.word	0x200052d8
 8002910:	20000460 	.word	0x20000460
 8002914:	08017c04 	.word	0x08017c04

08002918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MX_GPIO_Init+0x4c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <MX_GPIO_Init+0x4c>)
 8002928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <MX_GPIO_Init+0x4c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <MX_GPIO_Init+0x4c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <MX_GPIO_Init+0x4c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <MX_GPIO_Init+0x4c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]

}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <kinematicForward>:
 */

#include "kinematic.h"
#include "math.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002976:	eeb0 0a47 	vmov.f32	s0, s14
 800297a:	eef0 0a67 	vmov.f32	s1, s15
 800297e:	f013 fb6f 	bl	8016060 <cos>
 8002982:	ec51 0b10 	vmov	r0, r1, d0
 8002986:	a38c      	add	r3, pc, #560	; (adr r3, 8002bb8 <kinematicForward+0x250>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fd fe44 	bl	8000618 <__aeabi_dmul>
 8002990:	4603      	mov	r3, r0
 8002992:	460c      	mov	r4, r1
 8002994:	461d      	mov	r5, r3
 8002996:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80029a4:	461a      	mov	r2, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	f7fd fc80 	bl	80002ac <__adddf3>
 80029ac:	4603      	mov	r3, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	ec44 3b17 	vmov	d7, r3, r4
 80029b4:	eeb0 0a47 	vmov.f32	s0, s14
 80029b8:	eef0 0a67 	vmov.f32	s1, s15
 80029bc:	f013 fb50 	bl	8016060 <cos>
 80029c0:	ec51 0b10 	vmov	r0, r1, d0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b7f      	ldr	r3, [pc, #508]	; (8002bc8 <kinematicForward+0x260>)
 80029ca:	f7fd fe25 	bl	8000618 <__aeabi_dmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	461a      	mov	r2, r3
 80029d4:	4623      	mov	r3, r4
 80029d6:	4628      	mov	r0, r5
 80029d8:	4631      	mov	r1, r6
 80029da:	f7fd fc67 	bl	80002ac <__adddf3>
 80029de:	4603      	mov	r3, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	461d      	mov	r5, r3
 80029e4:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80029f2:	461a      	mov	r2, r3
 80029f4:	4623      	mov	r3, r4
 80029f6:	f7fd fc59 	bl	80002ac <__adddf3>
 80029fa:	4603      	mov	r3, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	4618      	mov	r0, r3
 8002a00:	4621      	mov	r1, r4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	f7fd fc4c 	bl	80002a8 <__aeabi_dsub>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	ec44 3b17 	vmov	d7, r3, r4
 8002a18:	eeb0 0a47 	vmov.f32	s0, s14
 8002a1c:	eef0 0a67 	vmov.f32	s1, s15
 8002a20:	f013 fb1e 	bl	8016060 <cos>
 8002a24:	ec51 0b10 	vmov	r0, r1, d0
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <kinematicForward+0x264>)
 8002a2e:	f7fd fdf3 	bl	8000618 <__aeabi_dmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002a36:	461a      	mov	r2, r3
 8002a38:	4623      	mov	r3, r4
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	f7fd fc35 	bl	80002ac <__adddf3>
 8002a42:	4603      	mov	r3, r0
 8002a44:	460c      	mov	r4, r1
 8002a46:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002a50:	eeb0 0a47 	vmov.f32	s0, s14
 8002a54:	eef0 0a67 	vmov.f32	s1, s15
 8002a58:	f013 fb46 	bl	80160e8 <sin>
 8002a5c:	ec51 0b10 	vmov	r0, r1, d0
 8002a60:	a355      	add	r3, pc, #340	; (adr r3, 8002bb8 <kinematicForward+0x250>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fd fdd7 	bl	8000618 <__aeabi_dmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	f7fd fc13 	bl	80002ac <__adddf3>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	ec44 3b17 	vmov	d7, r3, r4
 8002a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a92:	eef0 0a67 	vmov.f32	s1, s15
 8002a96:	f013 fb27 	bl	80160e8 <sin>
 8002a9a:	ec51 0b10 	vmov	r0, r1, d0
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <kinematicForward+0x260>)
 8002aa4:	f7fd fdb8 	bl	8000618 <__aeabi_dmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	4631      	mov	r1, r6
 8002ab4:	f7fd fbfa 	bl	80002ac <__adddf3>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	461d      	mov	r5, r3
 8002abe:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	f7fd fbec 	bl	80002ac <__adddf3>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4621      	mov	r1, r4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fbdf 	bl	80002a8 <__aeabi_dsub>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	ec44 3b17 	vmov	d7, r3, r4
 8002af2:	eeb0 0a47 	vmov.f32	s0, s14
 8002af6:	eef0 0a67 	vmov.f32	s1, s15
 8002afa:	f013 faf5 	bl	80160e8 <sin>
 8002afe:	ec51 0b10 	vmov	r0, r1, d0
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <kinematicForward+0x264>)
 8002b08:	f7fd fd86 	bl	8000618 <__aeabi_dmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	4628      	mov	r0, r5
 8002b16:	4631      	mov	r1, r6
 8002b18:	f7fd fbc8 	bl	80002ac <__adddf3>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	a124      	add	r1, pc, #144	; (adr r1, 8002bc0 <kinematicForward+0x258>)
 8002b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b34:	f7fd fbb8 	bl	80002a8 <__aeabi_dsub>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4621      	mov	r1, r4
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <kinematicForward+0x268>)
 8002b46:	f7fd fbaf 	bl	80002a8 <__aeabi_dsub>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	f7fd fba3 	bl	80002ac <__adddf3>
 8002b66:	4603      	mov	r3, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002b74:	461a      	mov	r2, r3
 8002b76:	4623      	mov	r3, r4
 8002b78:	f7fd fb96 	bl	80002a8 <__aeabi_dsub>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b8a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pnt->y = y;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002b94:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pnt->z = z;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b9e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pnt->roll = roll;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ba8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return TRUE;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	4068a000 	.word	0x4068a000
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	406a6000 	.word	0x406a6000
 8002bc8:	40640000 	.word	0x40640000
 8002bcc:	403e0000 	.word	0x403e0000
 8002bd0:	40534000 	.word	0x40534000
 8002bd4:	00000000 	.word	0x00000000

08002bd8 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8002bd8:	b082      	sub	sp, #8
 8002bda:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bde:	b0a0      	sub	sp, #128	; 0x80
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002be8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bf2:	a174      	add	r1, pc, #464	; (adr r1, 8002dc4 <kinematicInverse+0x1ec>)
 8002bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bf8:	f7fd fb56 	bl	80002a8 <__aeabi_dsub>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002c10:	eeb0 0a47 	vmov.f32	s0, s14
 8002c14:	eef0 0a67 	vmov.f32	s1, s15
 8002c18:	f013 fa22 	bl	8016060 <cos>
 8002c1c:	ec51 0b10 	vmov	r0, r1, d0
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <kinematicInverse+0x1e0>)
 8002c26:	f7fd fcf7 	bl	8000618 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4650      	mov	r0, sl
 8002c30:	4659      	mov	r1, fp
 8002c32:	f7fd fb39 	bl	80002a8 <__aeabi_dsub>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c4e:	eef0 0a67 	vmov.f32	s1, s15
 8002c52:	f013 fa49 	bl	80160e8 <sin>
 8002c56:	ec51 0b10 	vmov	r0, r1, d0
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <kinematicInverse+0x1e0>)
 8002c60:	f7fd fcda 	bl	8000618 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4650      	mov	r0, sl
 8002c6a:	4659      	mov	r1, fp
 8002c6c:	f7fd fb1c 	bl	80002a8 <__aeabi_dsub>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8002c78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c80:	f7fd fcca 	bl	8000618 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4692      	mov	sl, r2
 8002c8a:	469b      	mov	fp, r3
 8002c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c90:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c94:	f7fd fcc0 	bl	8000618 <__aeabi_dmul>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4650      	mov	r0, sl
 8002c9e:	4659      	mov	r1, fp
 8002ca0:	f7fd fb04 	bl	80002ac <__adddf3>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	a33e      	add	r3, pc, #248	; (adr r3, 8002da8 <kinematicInverse+0x1d0>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd faf9 	bl	80002a8 <__aeabi_dsub>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <kinematicInverse+0x1e4>)
 8002cc4:	f7fd faf0 	bl	80002a8 <__aeabi_dsub>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	a337      	add	r3, pc, #220	; (adr r3, 8002db0 <kinematicInverse+0x1d8>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fdc9 	bl	800086c <__aeabi_ddiv>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8002ce2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ce6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cea:	f7fd fc95 	bl	8000618 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	4932      	ldr	r1, [pc, #200]	; (8002dc0 <kinematicInverse+0x1e8>)
 8002cf8:	f7fd fad6 	bl	80002a8 <__aeabi_dsub>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d10:	f7fd fef4 	bl	8000afc <__aeabi_dcmplt>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <kinematicInverse+0x146>
		return FALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e149      	b.n	8002fb2 <kinematicInverse+0x3da>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8002d1e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002d22:	f013 fa6b 	bl	80161fc <sqrt>
 8002d26:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8002d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8002d36:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002d3a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002d3e:	f013 fa5b 	bl	80161f8 <atan2>
 8002d42:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8002d46:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002d4a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002d4e:	f013 fa53 	bl	80161f8 <atan2>
 8002d52:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8002d56:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002d5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d5e:	f7fd faa3 	bl	80002a8 <__aeabi_dsub>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4614      	mov	r4, r2
 8002d68:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d6c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002d70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d74:	f7fd fa98 	bl	80002a8 <__aeabi_dsub>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002d82:	4642      	mov	r2, r8
 8002d84:	464b      	mov	r3, r9
 8002d86:	4620      	mov	r0, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	f7fd fec1 	bl	8000b10 <__aeabi_dcmple>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <kinematicInverse+0x1f4>
		s2 		= s2_positive;
 8002d94:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d98:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8002d9c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002da0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002da4:	e01a      	b.n	8002ddc <kinematicInverse+0x204>
 8002da6:	bf00      	nop
 8002da8:	00000000 	.word	0x00000000
 8002dac:	40e2f320 	.word	0x40e2f320
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40eec800 	.word	0x40eec800
 8002db8:	403e0000 	.word	0x403e0000
 8002dbc:	40d90000 	.word	0x40d90000
 8002dc0:	3ff00000 	.word	0x3ff00000
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	4060c000 	.word	0x4060c000
	} else {
		s2 		= s2_negative;
 8002dcc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002dd0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8002dd4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002dd8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <kinematicInverse+0x3f0>)
 8002de2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002de6:	f7fd fc17 	bl	8000618 <__aeabi_dmul>
 8002dea:	4603      	mov	r3, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	4618      	mov	r0, r3
 8002df0:	4621      	mov	r1, r4
 8002df2:	a373      	add	r3, pc, #460	; (adr r3, 8002fc0 <kinematicInverse+0x3e8>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fa58 	bl	80002ac <__adddf3>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	4618      	mov	r0, r3
 8002e02:	4621      	mov	r1, r4
 8002e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e08:	f7fd fc06 	bl	8000618 <__aeabi_dmul>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460c      	mov	r4, r1
 8002e10:	4625      	mov	r5, r4
 8002e12:	461c      	mov	r4, r3
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <kinematicInverse+0x3f0>)
 8002e1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002e1e:	f7fd fbfb 	bl	8000618 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e2e:	f7fd fbf3 	bl	8000618 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4620      	mov	r0, r4
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f7fd fa35 	bl	80002a8 <__aeabi_dsub>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	4625      	mov	r5, r4
 8002e44:	461c      	mov	r4, r3
 8002e46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e4a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e4e:	f7fd fbe3 	bl	8000618 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e62:	f7fd fbd9 	bl	8000618 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	f7fd fa1d 	bl	80002ac <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f7fd fcf7 	bl	800086c <__aeabi_ddiv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <kinematicInverse+0x3f0>)
 8002e8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e90:	f7fd fbc2 	bl	8000618 <__aeabi_dmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	a348      	add	r3, pc, #288	; (adr r3, 8002fc0 <kinematicInverse+0x3e8>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fa03 	bl	80002ac <__adddf3>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4621      	mov	r1, r4
 8002eae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002eb2:	f7fd fbb1 	bl	8000618 <__aeabi_dmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	4625      	mov	r5, r4
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <kinematicInverse+0x3f0>)
 8002ec4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ec8:	f7fd fba6 	bl	8000618 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ed8:	f7fd fb9e 	bl	8000618 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7fd f9e2 	bl	80002ac <__adddf3>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	4625      	mov	r5, r4
 8002eee:	461c      	mov	r4, r3
 8002ef0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ef4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ef8:	f7fd fb8e 	bl	8000618 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4690      	mov	r8, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f0c:	f7fd fb84 	bl	8000618 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	f7fd f9c8 	bl	80002ac <__adddf3>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd fca2 	bl	800086c <__aeabi_ddiv>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8002f30:	ed97 1b06 	vldr	d1, [r7, #24]
 8002f34:	ed97 0b08 	vldr	d0, [r7, #32]
 8002f38:	f013 f95e 	bl	80161f8 <atan2>
 8002f3c:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8002f40:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002f44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f48:	f7fd f9b0 	bl	80002ac <__adddf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4618      	mov	r0, r3
 8002f52:	4621      	mov	r1, r4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	f7fd f9a3 	bl	80002a8 <__aeabi_dsub>
 8002f62:	4603      	mov	r3, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8002f6a:	ed97 3b02 	vldr	d3, [r7, #8]
 8002f6e:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8002f72:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8002f76:	ed97 0b04 	vldr	d0, [r7, #16]
 8002f7a:	f004 f8a9 	bl	80070d0 <scaraCheckWorkSpace4>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <kinematicInverse+0x3b0>
		return FALSE; // Over workspace !!!
 8002f84:	2300      	movs	r3, #0
 8002f86:	e014      	b.n	8002fb2 <kinematicInverse+0x3da>
	}
	pnt->Theta1 = theta1;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f8e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->Theta2 = theta2;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002f98:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->D3		= d3;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002fa2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->Theta4 = theta4;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fac:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE; // All is well
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3780      	adds	r7, #128	; 0x80
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	b002      	add	sp, #8
 8002fbe:	4770      	bx	lr
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	4068a000 	.word	0x4068a000
 8002fc8:	40640000 	.word	0x40640000

08002fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd0:	f004 fd5c 	bl	8007a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd4:	f000 f80c 	bl	8002ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd8:	f7ff fc9e 	bl	8002918 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fdc:	f7fe ffac 	bl	8001f38 <MX_DMA_Init>
  MX_UART4_Init();
 8002fe0:	f004 fc56 	bl	8007890 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002fe4:	f7fe ffe2 	bl	8001fac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fe8:	f00b f96c 	bl	800e2c4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <main+0x20>
	...

08002ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b094      	sub	sp, #80	; 0x50
 8002ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ff6:	f107 0320 	add.w	r3, r7, #32
 8002ffa:	2230      	movs	r2, #48	; 0x30
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f00e fe22 	bl	8011c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <SystemClock_Config+0xcc>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <SystemClock_Config+0xcc>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <SystemClock_Config+0xcc>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <SystemClock_Config+0xd0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <SystemClock_Config+0xd0>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <SystemClock_Config+0xd0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800304c:	2301      	movs	r3, #1
 800304e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003056:	2302      	movs	r3, #2
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800305a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003060:	2308      	movs	r3, #8
 8003062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003064:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800306a:	2302      	movs	r3, #2
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800306e:	2307      	movs	r3, #7
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003072:	f107 0320 	add.w	r3, r7, #32
 8003076:	4618      	mov	r0, r3
 8003078:	f006 fd10 	bl	8009a9c <HAL_RCC_OscConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003082:	f000 f831 	bl	80030e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003086:	230f      	movs	r3, #15
 8003088:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800308a:	2302      	movs	r3, #2
 800308c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	2105      	movs	r1, #5
 80030a4:	4618      	mov	r0, r3
 80030a6:	f006 ff69 	bl	8009f7c <HAL_RCC_ClockConfig>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80030b0:	f000 f81a 	bl	80030e8 <Error_Handler>
  }
}
 80030b4:	bf00      	nop
 80030b6:	3750      	adds	r7, #80	; 0x50
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030d6:	f004 fcfb 	bl	8007ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40001000 	.word	0x40001000

080030e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <ringBuff_PushChar+0x1a>
		return FALSE;
 800310c:	2300      	movs	r3, #0
 800310e:	e024      	b.n	800315a <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	78f9      	ldrb	r1, [r7, #3]
 800311a:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003122:	3301      	adds	r3, #1
 8003124:	425a      	negs	r2, r3
 8003126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800312e:	bf58      	it	pl
 8003130:	4253      	negpl	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003144:	429a      	cmp	r2, r3
 8003146:	d103      	bne.n	8003150 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003158:	2301      	movs	r3, #1
	}
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <ringBuff_PopChar+0x18>
		return FALSE;
 800317a:	2300      	movs	r3, #0
 800317c:	e025      	b.n	80031ca <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	5cd2      	ldrb	r2, [r2, r3]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003192:	3301      	adds	r3, #1
 8003194:	425a      	negs	r2, r3
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800319e:	bf58      	it	pl
 80031a0:	4253      	negpl	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d103      	bne.n	80031c0 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 80031c8:	2301      	movs	r3, #1
	}
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80031e2:	2300      	movs	r3, #0
 80031e4:	82fb      	strh	r3, [r7, #22]
 80031e6:	e011      	b.n	800320c <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80031e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ff7e 	bl	80030f6 <ringBuff_PushChar>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003200:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003204:	b29b      	uxth	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	82fb      	strh	r3, [r7, #22]
 800320c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	dce8      	bgt.n	80031e8 <ringBuff_PushArray+0x12>
 8003216:	e000      	b.n	800321a <ringBuff_PushArray+0x44>
			break;
 8003218:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800321a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e00c      	b.n	8003252 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4413      	add	r3, r2
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff ff90 	bl	8003166 <ringBuff_PopChar>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	429a      	cmp	r2, r3
 8003258:	dbee      	blt.n	8003238 <ringBuff_PopArray+0x12>
 800325a:	e000      	b.n	800325e <ringBuff_PopArray+0x38>
			break;
 800325c:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800327e:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e018      	b.n	80032c2 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4413      	add	r3, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	429a      	cmp	r2, r3
 800329c:	d101      	bne.n	80032a2 <ringBuff_DistanceOf+0x3a>
					return distance;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	e037      	b.n	8003312 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3301      	adds	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	425a      	negs	r2, r3
 80032b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80032bc:	bf58      	it	pl
 80032be:	4253      	negpl	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	dbe2      	blt.n	8003290 <ringBuff_DistanceOf+0x28>
 80032ca:	e020      	b.n	800330e <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4413      	add	r3, r2
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d101      	bne.n	80032de <ringBuff_DistanceOf+0x76>
					return distance;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	e019      	b.n	8003312 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	425a      	negs	r2, r3
 80032ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80032f2:	bf58      	it	pl
 80032f4:	4253      	negpl	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	d1e3      	bne.n	80032cc <ringBuff_DistanceOf+0x64>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0de      	beq.n	80032cc <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003312:	4618      	mov	r0, r3
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <scaraInitDuty>:
											 "Wrong Coordinate"
											};



SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8003320:	b084      	sub	sp, #16
 8003322:	b5b0      	push	{r4, r5, r7, lr}
 8003324:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8003328:	af4e      	add	r7, sp, #312	; 0x138
 800332a:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 800332e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8003332:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 82ba 	bne.w	80038b0 <scaraInitDuty+0x590>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800333c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003340:	a3ab      	add	r3, pc, #684	; (adr r3, 80035f0 <scaraInitDuty+0x2d0>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fd f967 	bl	8000618 <__aeabi_dmul>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	4ba8      	ldr	r3, [pc, #672]	; (80035f8 <scaraInitDuty+0x2d8>)
 8003358:	f7fd fa88 	bl	800086c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003364:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003368:	2b01      	cmp	r3, #1
 800336a:	d130      	bne.n	80033ce <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800336c:	4ba3      	ldr	r3, [pc, #652]	; (80035fc <scaraInitDuty+0x2dc>)
 800336e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003372:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003376:	f7fc ff99 	bl	80002ac <__adddf3>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4639      	mov	r1, r7
 8003380:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8003384:	4b9d      	ldr	r3, [pc, #628]	; (80035fc <scaraInitDuty+0x2dc>)
 8003386:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800338a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800338e:	f7fc ff8d 	bl	80002ac <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4639      	mov	r1, r7
 8003398:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800339c:	4b97      	ldr	r3, [pc, #604]	; (80035fc <scaraInitDuty+0x2dc>)
 800339e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80033a2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80033a6:	f7fc ff81 	bl	80002ac <__adddf3>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4639      	mov	r1, r7
 80033b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <scaraInitDuty+0x2dc>)
 80033b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033ba:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80033be:	f7fc ff75 	bl	80002ac <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4639      	mov	r1, r7
 80033c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80033cc:	e01b      	b.n	8003406 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80033ce:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 80033d6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80033da:	4639      	mov	r1, r7
 80033dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= command.target_point.y;
 80033e0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80033e4:	4639      	mov	r1, r7
 80033e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= command.target_point.z;
 80033ea:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80033ee:	4639      	mov	r1, r7
 80033f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= command.target_point.roll;
 80033f4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80033f8:	4639      	mov	r1, r7
 80033fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80033fe:	e002      	b.n	8003406 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8003400:	230c      	movs	r3, #12
 8003402:	f001 b91e 	b.w	8004642 <scaraInitDuty+0x1322>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8003406:	463b      	mov	r3, r7
 8003408:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <scaraInitDuty+0x2dc>)
 800340e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003412:	f7fc ff49 	bl	80002a8 <__aeabi_dsub>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		dir_angle = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		if ( angle_s < 0) {
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003430:	f7fd fb64 	bl	8000afc <__aeabi_dcmplt>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <scaraInitDuty+0x120>
			dir_angle = -1;
 800343a:	23ff      	movs	r3, #255	; 0xff
 800343c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if ( fabs(angle_s) > PI) {
 8003440:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8003444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003448:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800344c:	a368      	add	r3, pc, #416	; (adr r3, 80035f0 <scaraInitDuty+0x2d0>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	4620      	mov	r0, r4
 8003454:	4629      	mov	r1, r5
 8003456:	f7fd fb6f 	bl	8000b38 <__aeabi_dcmpgt>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8003460:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8003464:	425b      	negs	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800346c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003470:	f7fd fbca 	bl	8000c08 <__aeabi_d2f>
 8003474:	ee07 0a90 	vmov	s15, r0
 8003478:	eef0 7ae7 	vabs.f32	s15, s15
 800347c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003600 <scaraInitDuty+0x2e0>
 8003480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003484:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003494:	ee17 0a90 	vmov	r0, s15
 8003498:	f7fd f866 	bl	8000568 <__aeabi_f2d>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <scaraInitDuty+0x2e4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <scaraInitDuty+0x2dc>)
 80034ac:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80034b0:	4a54      	ldr	r2, [pc, #336]	; (8003604 <scaraInitDuty+0x2e4>)
 80034b2:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80034b6:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11f      	bne.n	80034fe <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <scaraInitDuty+0x2e4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80034c4:	4c4d      	ldr	r4, [pc, #308]	; (80035fc <scaraInitDuty+0x2dc>)
 80034c6:	463b      	mov	r3, r7
 80034c8:	a818      	add	r0, sp, #96	; 0x60
 80034ca:	4619      	mov	r1, r3
 80034cc:	2368      	movs	r3, #104	; 0x68
 80034ce:	461a      	mov	r2, r3
 80034d0:	f00e fb96 	bl	8011c00 <memcpy>
 80034d4:	4668      	mov	r0, sp
 80034d6:	f104 0308 	add.w	r3, r4, #8
 80034da:	2260      	movs	r2, #96	; 0x60
 80034dc:	4619      	mov	r1, r3
 80034de:	f00e fb8f 	bl	8011c00 <memcpy>
 80034e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80034e6:	4848      	ldr	r0, [pc, #288]	; (8003608 <scaraInitDuty+0x2e8>)
 80034e8:	f001 f8bc 	bl	8004664 <scaraInitLine>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			total_s = myDUTY.task.path.line.total_s;
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <scaraInitDuty+0x2e4>)
 80034f4:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80034f8:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 80034fc:	e070      	b.n	80035e0 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80034fe:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8003502:	2b01      	cmp	r3, #1
 8003504:	d169      	bne.n	80035da <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003506:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800350a:	2b01      	cmp	r3, #1
 800350c:	d127      	bne.n	800355e <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <scaraInitDuty+0x2dc>)
 8003510:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003514:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8003518:	461a      	mov	r2, r3
 800351a:	4623      	mov	r3, r4
 800351c:	f7fc fec6 	bl	80002ac <__adddf3>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <scaraInitDuty+0x2dc>)
 800352a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800352e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8003532:	461a      	mov	r2, r3
 8003534:	4623      	mov	r3, r4
 8003536:	f7fc feb9 	bl	80002ac <__adddf3>
 800353a:	4603      	mov	r3, r0
 800353c:	460c      	mov	r4, r1
 800353e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <scaraInitDuty+0x2dc>)
 8003544:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003548:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800354c:	461a      	mov	r2, r3
 800354e:	4623      	mov	r3, r4
 8003550:	f7fc feac 	bl	80002ac <__adddf3>
 8003554:	4603      	mov	r3, r0
 8003556:	460c      	mov	r4, r1
 8003558:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800355c:	e013      	b.n	8003586 <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800355e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8003566:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800356a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= command.target_point.y;
 800356e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003572:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= command.target_point.z;
 8003576:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800357a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800357e:	e002      	b.n	8003586 <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8003580:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8003582:	f001 b85e 	b.w	8004642 <scaraInitDuty+0x1322>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <scaraInitDuty+0x2e4>)
 8003588:	2201      	movs	r2, #1
 800358a:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 800358c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003590:	4c1a      	ldr	r4, [pc, #104]	; (80035fc <scaraInitDuty+0x2dc>)
 8003592:	934c      	str	r3, [sp, #304]	; 0x130
 8003594:	a832      	add	r0, sp, #200	; 0xc8
 8003596:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800359a:	2268      	movs	r2, #104	; 0x68
 800359c:	4619      	mov	r1, r3
 800359e:	f00e fb2f 	bl	8011c00 <memcpy>
 80035a2:	463b      	mov	r3, r7
 80035a4:	a818      	add	r0, sp, #96	; 0x60
 80035a6:	4619      	mov	r1, r3
 80035a8:	2368      	movs	r3, #104	; 0x68
 80035aa:	461a      	mov	r2, r3
 80035ac:	f00e fb28 	bl	8011c00 <memcpy>
 80035b0:	4668      	mov	r0, sp
 80035b2:	f104 0308 	add.w	r3, r4, #8
 80035b6:	2260      	movs	r2, #96	; 0x60
 80035b8:	4619      	mov	r1, r3
 80035ba:	f00e fb21 	bl	8011c00 <memcpy>
 80035be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80035c2:	4812      	ldr	r0, [pc, #72]	; (800360c <scaraInitDuty+0x2ec>)
 80035c4:	f001 f914 	bl	80047f0 <scaraInitCircle>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <scaraInitDuty+0x2e4>)
 80035d0:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80035d4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 80035d8:	e002      	b.n	80035e0 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80035da:	2303      	movs	r3, #3
 80035dc:	f001 b831 	b.w	8004642 <scaraInitDuty+0x1322>
		}

		if ( SCARA_STATUS_OK != status) {
 80035e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <scaraInitDuty+0x2f0>
			return status;
 80035e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80035ec:	f001 b829 	b.w	8004642 <scaraInitDuty+0x1322>
 80035f0:	60000000 	.word	0x60000000
 80035f4:	400921fb 	.word	0x400921fb
 80035f8:	40668000 	.word	0x40668000
 80035fc:	20005ca0 	.word	0x20005ca0
 8003600:	40c90fdb 	.word	0x40c90fdb
 8003604:	200052e8 	.word	0x200052e8
 8003608:	200052f8 	.word	0x200052f8
 800360c:	20005368 	.word	0x20005368
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8003610:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003614:	2b00      	cmp	r3, #0
 8003616:	f040 8094 	bne.w	8003742 <scaraInitDuty+0x422>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800361a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800361e:	2b01      	cmp	r3, #1
 8003620:	d12d      	bne.n	800367e <scaraInitDuty+0x35e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8003622:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003626:	4a9d      	ldr	r2, [pc, #628]	; (800389c <scaraInitDuty+0x57c>)
 8003628:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800362c:	4b9b      	ldr	r3, [pc, #620]	; (800389c <scaraInitDuty+0x57c>)
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003634:	2201      	movs	r2, #1
 8003636:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800363a:	2104      	movs	r1, #4
 800363c:	4898      	ldr	r0, [pc, #608]	; (80038a0 <scaraInitDuty+0x580>)
 800363e:	f001 fa4f 	bl	8004ae0 <scaraInitLSPB>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8003648:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800364c:	4a93      	ldr	r2, [pc, #588]	; (800389c <scaraInitDuty+0x57c>)
 800364e:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003652:	4b92      	ldr	r3, [pc, #584]	; (800389c <scaraInitDuty+0x57c>)
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800365a:	2201      	movs	r2, #1
 800365c:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003660:	2105      	movs	r1, #5
 8003662:	4890      	ldr	r0, [pc, #576]	; (80038a4 <scaraInitDuty+0x584>)
 8003664:	f001 fa3c 	bl	8004ae0 <scaraInitLSPB>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 800366e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003672:	4a8a      	ldr	r2, [pc, #552]	; (800389c <scaraInitDuty+0x57c>)
 8003674:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003678:	e9c2 3400 	strd	r3, r4, [r2]
 800367c:	e0fd      	b.n	800387a <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800367e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003682:	2b00      	cmp	r3, #0
 8003684:	d15a      	bne.n	800373c <scaraInitDuty+0x41c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003686:	4b85      	ldr	r3, [pc, #532]	; (800389c <scaraInitDuty+0x57c>)
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800368e:	2200      	movs	r2, #0
 8003690:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003694:	2104      	movs	r1, #4
 8003696:	4882      	ldr	r0, [pc, #520]	; (80038a0 <scaraInitDuty+0x580>)
 8003698:	f001 fa22 	bl	8004ae0 <scaraInitLSPB>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80036a2:	4b7e      	ldr	r3, [pc, #504]	; (800389c <scaraInitDuty+0x57c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80036aa:	2200      	movs	r2, #0
 80036ac:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80036b0:	2105      	movs	r1, #5
 80036b2:	487c      	ldr	r0, [pc, #496]	; (80038a4 <scaraInitDuty+0x584>)
 80036b4:	f001 fa14 	bl	8004ae0 <scaraInitLSPB>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80036be:	4b77      	ldr	r3, [pc, #476]	; (800389c <scaraInitDuty+0x57c>)
 80036c0:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <scaraInitDuty+0x57c>)
 80036c6:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 80036ca:	461a      	mov	r2, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	f7fd fa33 	bl	8000b38 <__aeabi_dcmpgt>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d018      	beq.n	800370a <scaraInitDuty+0x3ea>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 80036d8:	4b70      	ldr	r3, [pc, #448]	; (800389c <scaraInitDuty+0x57c>)
 80036da:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80036de:	4a6f      	ldr	r2, [pc, #444]	; (800389c <scaraInitDuty+0x57c>)
 80036e0:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80036e4:	2201      	movs	r2, #1
 80036e6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80036ea:	2105      	movs	r1, #5
 80036ec:	486d      	ldr	r0, [pc, #436]	; (80038a4 <scaraInitDuty+0x584>)
 80036ee:	f001 f9f7 	bl	8004ae0 <scaraInitLSPB>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <scaraInitDuty+0x57c>)
 80036fa:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80036fe:	4a67      	ldr	r2, [pc, #412]	; (800389c <scaraInitDuty+0x57c>)
 8003700:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003704:	e9c2 3400 	strd	r3, r4, [r2]
 8003708:	e0b7      	b.n	800387a <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 800370a:	4b64      	ldr	r3, [pc, #400]	; (800389c <scaraInitDuty+0x57c>)
 800370c:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8003710:	4a62      	ldr	r2, [pc, #392]	; (800389c <scaraInitDuty+0x57c>)
 8003712:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003716:	2201      	movs	r2, #1
 8003718:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800371c:	2104      	movs	r1, #4
 800371e:	4860      	ldr	r0, [pc, #384]	; (80038a0 <scaraInitDuty+0x580>)
 8003720:	f001 f9de 	bl	8004ae0 <scaraInitLSPB>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 800372a:	4b5c      	ldr	r3, [pc, #368]	; (800389c <scaraInitDuty+0x57c>)
 800372c:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8003730:	4a5a      	ldr	r2, [pc, #360]	; (800389c <scaraInitDuty+0x57c>)
 8003732:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003736:	e9c2 3400 	strd	r3, r4, [r2]
 800373a:	e09e      	b.n	800387a <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 800373c:	2308      	movs	r3, #8
 800373e:	f000 bf80 	b.w	8004642 <scaraInitDuty+0x1322>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8003742:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 8094 	bne.w	8003874 <scaraInitDuty+0x554>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800374c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003750:	2b01      	cmp	r3, #1
 8003752:	d12d      	bne.n	80037b0 <scaraInitDuty+0x490>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8003754:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003758:	4a50      	ldr	r2, [pc, #320]	; (800389c <scaraInitDuty+0x57c>)
 800375a:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800375e:	4b4f      	ldr	r3, [pc, #316]	; (800389c <scaraInitDuty+0x57c>)
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003766:	2201      	movs	r2, #1
 8003768:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800376c:	2104      	movs	r1, #4
 800376e:	484e      	ldr	r0, [pc, #312]	; (80038a8 <scaraInitDuty+0x588>)
 8003770:	f001 fd46 	bl	8005200 <scaraInitScurve>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 800377a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800377e:	4a47      	ldr	r2, [pc, #284]	; (800389c <scaraInitDuty+0x57c>)
 8003780:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003784:	4b45      	ldr	r3, [pc, #276]	; (800389c <scaraInitDuty+0x57c>)
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800378c:	2201      	movs	r2, #1
 800378e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003792:	2105      	movs	r1, #5
 8003794:	4845      	ldr	r0, [pc, #276]	; (80038ac <scaraInitDuty+0x58c>)
 8003796:	f001 fd33 	bl	8005200 <scaraInitScurve>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 80037a0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80037a4:	4a3d      	ldr	r2, [pc, #244]	; (800389c <scaraInitDuty+0x57c>)
 80037a6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80037aa:	e9c2 3400 	strd	r3, r4, [r2]
 80037ae:	e064      	b.n	800387a <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80037b0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d15a      	bne.n	800386e <scaraInitDuty+0x54e>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <scaraInitDuty+0x57c>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80037c0:	2200      	movs	r2, #0
 80037c2:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80037c6:	2104      	movs	r1, #4
 80037c8:	4837      	ldr	r0, [pc, #220]	; (80038a8 <scaraInitDuty+0x588>)
 80037ca:	f001 fd19 	bl	8005200 <scaraInitScurve>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <scaraInitDuty+0x57c>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80037dc:	2200      	movs	r2, #0
 80037de:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80037e2:	2105      	movs	r1, #5
 80037e4:	4831      	ldr	r0, [pc, #196]	; (80038ac <scaraInitDuty+0x58c>)
 80037e6:	f001 fd0b 	bl	8005200 <scaraInitScurve>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <scaraInitDuty+0x57c>)
 80037f2:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <scaraInitDuty+0x57c>)
 80037f8:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f7fd f99a 	bl	8000b38 <__aeabi_dcmpgt>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <scaraInitDuty+0x51c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <scaraInitDuty+0x57c>)
 800380c:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003810:	4a22      	ldr	r2, [pc, #136]	; (800389c <scaraInitDuty+0x57c>)
 8003812:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003816:	2201      	movs	r2, #1
 8003818:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800381c:	2105      	movs	r1, #5
 800381e:	4823      	ldr	r0, [pc, #140]	; (80038ac <scaraInitDuty+0x58c>)
 8003820:	f001 fcee 	bl	8005200 <scaraInitScurve>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <scaraInitDuty+0x57c>)
 800382c:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003830:	4a1a      	ldr	r2, [pc, #104]	; (800389c <scaraInitDuty+0x57c>)
 8003832:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003836:	e9c2 3400 	strd	r3, r4, [r2]
 800383a:	e01e      	b.n	800387a <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <scaraInitDuty+0x57c>)
 800383e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003842:	4a16      	ldr	r2, [pc, #88]	; (800389c <scaraInitDuty+0x57c>)
 8003844:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003848:	2201      	movs	r2, #1
 800384a:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800384e:	2104      	movs	r1, #4
 8003850:	4815      	ldr	r0, [pc, #84]	; (80038a8 <scaraInitDuty+0x588>)
 8003852:	f001 fcd5 	bl	8005200 <scaraInitScurve>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <scaraInitDuty+0x57c>)
 800385e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <scaraInitDuty+0x57c>)
 8003864:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003868:	e9c2 3400 	strd	r3, r4, [r2]
 800386c:	e005      	b.n	800387a <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800386e:	2308      	movs	r3, #8
 8003870:	f000 bee7 	b.w	8004642 <scaraInitDuty+0x1322>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8003874:	2305      	movs	r3, #5
 8003876:	f000 bee4 	b.w	8004642 <scaraInitDuty+0x1322>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800387a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <scaraInitDuty+0x56a>
			return status1;
 8003882:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003886:	f000 bedc 	b.w	8004642 <scaraInitDuty+0x1322>
		}
		if ( SCARA_STATUS_OK != status2) {
 800388a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 86b8 	beq.w	8004604 <scaraInitDuty+0x12e4>
			return status2;
 8003894:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003898:	f000 bed3 	b.w	8004642 <scaraInitDuty+0x1322>
 800389c:	200052e8 	.word	0x200052e8
 80038a0:	20005400 	.word	0x20005400
 80038a4:	20005558 	.word	0x20005558
 80038a8:	20005480 	.word	0x20005480
 80038ac:	200055d8 	.word	0x200055d8
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80038b0:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 86a3 	bne.w	8004600 <scaraInitDuty+0x12e0>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80038ba:	4ba7      	ldr	r3, [pc, #668]	; (8003b58 <scaraInitDuty+0x838>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80038c0:	4ba6      	ldr	r3, [pc, #664]	; (8003b5c <scaraInitDuty+0x83c>)
 80038c2:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80038c6:	4aa4      	ldr	r2, [pc, #656]	; (8003b58 <scaraInitDuty+0x838>)
 80038c8:	f602 1228 	addw	r2, r2, #2344	; 0x928
 80038cc:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80038d0:	4ba2      	ldr	r3, [pc, #648]	; (8003b5c <scaraInitDuty+0x83c>)
 80038d2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80038d6:	4aa0      	ldr	r2, [pc, #640]	; (8003b58 <scaraInitDuty+0x838>)
 80038d8:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 80038dc:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80038e0:	4b9e      	ldr	r3, [pc, #632]	; (8003b5c <scaraInitDuty+0x83c>)
 80038e2:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80038e6:	4a9c      	ldr	r2, [pc, #624]	; (8003b58 <scaraInitDuty+0x838>)
 80038e8:	f602 1238 	addw	r2, r2, #2360	; 0x938
 80038ec:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80038f0:	4b9a      	ldr	r3, [pc, #616]	; (8003b5c <scaraInitDuty+0x83c>)
 80038f2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80038f6:	4a98      	ldr	r2, [pc, #608]	; (8003b58 <scaraInitDuty+0x838>)
 80038f8:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 80038fc:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8003900:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 836d 	bne.w	8003fe4 <scaraInitDuty+0xcc4>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 800390a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800390e:	2b03      	cmp	r3, #3
 8003910:	f200 814e 	bhi.w	8003bb0 <scaraInitDuty+0x890>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <scaraInitDuty+0x5fc>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	0800392d 	.word	0x0800392d
 8003920:	080039d3 	.word	0x080039d3
 8003924:	08003a79 	.word	0x08003a79
 8003928:	08003af5 	.word	0x08003af5
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 800392c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003930:	a387      	add	r3, pc, #540	; (adr r3, 8003b50 <scaraInitDuty+0x830>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fe6f 	bl	8000618 <__aeabi_dmul>
 800393a:	4603      	mov	r3, r0
 800393c:	460c      	mov	r4, r1
 800393e:	4618      	mov	r0, r3
 8003940:	4621      	mov	r1, r4
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	4b86      	ldr	r3, [pc, #536]	; (8003b60 <scaraInitDuty+0x840>)
 8003948:	f7fc ff90 	bl	800086c <__aeabi_ddiv>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003954:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003958:	2b01      	cmp	r3, #1
 800395a:	d113      	bne.n	8003984 <scaraInitDuty+0x664>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 800395c:	4b7e      	ldr	r3, [pc, #504]	; (8003b58 <scaraInitDuty+0x838>)
 800395e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8003962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003966:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800396a:	461a      	mov	r2, r3
 800396c:	4623      	mov	r3, r4
 800396e:	f7fc fc9d 	bl	80002ac <__adddf3>
 8003972:	4603      	mov	r3, r0
 8003974:	460c      	mov	r4, r1
 8003976:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 800397a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800397e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003982:	e01a      	b.n	80039ba <scaraInitDuty+0x69a>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003984:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <scaraInitDuty+0x694>
					abs_position = command.sub_para_double;
 800398c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003990:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8003994:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <scaraInitDuty+0x838>)
 800399a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800399e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039a2:	461a      	mov	r2, r3
 80039a4:	4623      	mov	r3, r4
 80039a6:	f7fc fc7f 	bl	80002a8 <__aeabi_dsub>
 80039aa:	4603      	mov	r3, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 80039b2:	e002      	b.n	80039ba <scaraInitDuty+0x69a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80039b4:	230c      	movs	r3, #12
 80039b6:	f000 be44 	b.w	8004642 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 80039ba:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 80039be:	2000      	movs	r0, #0
 80039c0:	f003 fc0e 	bl	80071e0 <scaraCheckWorkSpace1>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80f5 	beq.w	8003bb6 <scaraInitDuty+0x896>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80039cc:	2307      	movs	r3, #7
 80039ce:	f000 be38 	b.w	8004642 <scaraInitDuty+0x1322>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80039d2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80039d6:	a35e      	add	r3, pc, #376	; (adr r3, 8003b50 <scaraInitDuty+0x830>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fe1c 	bl	8000618 <__aeabi_dmul>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4618      	mov	r0, r3
 80039e6:	4621      	mov	r1, r4
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	4b5c      	ldr	r3, [pc, #368]	; (8003b60 <scaraInitDuty+0x840>)
 80039ee:	f7fc ff3d 	bl	800086c <__aeabi_ddiv>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80039fa:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d113      	bne.n	8003a2a <scaraInitDuty+0x70a>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8003a02:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <scaraInitDuty+0x838>)
 8003a04:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a0c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003a10:	461a      	mov	r2, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	f7fc fc4a 	bl	80002ac <__adddf3>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003a20:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003a24:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003a28:	e01a      	b.n	8003a60 <scaraInitDuty+0x740>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003a2a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d113      	bne.n	8003a5a <scaraInitDuty+0x73a>
					abs_position = command.sub_para_double;
 8003a32:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003a36:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8003a3a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003a3e:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <scaraInitDuty+0x838>)
 8003a40:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003a44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7fc fc2c 	bl	80002a8 <__aeabi_dsub>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003a58:	e002      	b.n	8003a60 <scaraInitDuty+0x740>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	f000 bdf1 	b.w	8004642 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8003a60:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003a64:	2001      	movs	r0, #1
 8003a66:	f003 fbbb 	bl	80071e0 <scaraCheckWorkSpace1>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a4 	beq.w	8003bba <scaraInitDuty+0x89a>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003a72:	2307      	movs	r3, #7
 8003a74:	f000 bde5 	b.w	8004642 <scaraInitDuty+0x1322>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003a78:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d113      	bne.n	8003aa8 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <scaraInitDuty+0x838>)
 8003a82:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a8a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f7fc fc0b 	bl	80002ac <__adddf3>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003a9e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003aa2:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003aa6:	e01a      	b.n	8003ade <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003aa8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d113      	bne.n	8003ad8 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8003ab0:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003ab4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8003ab8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <scaraInitDuty+0x838>)
 8003abe:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4623      	mov	r3, r4
 8003aca:	f7fc fbed 	bl	80002a8 <__aeabi_dsub>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003ad6:	e002      	b.n	8003ade <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003ad8:	230c      	movs	r3, #12
 8003ada:	f000 bdb2 	b.w	8004642 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8003ade:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f003 fb7c 	bl	80071e0 <scaraCheckWorkSpace1>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d067      	beq.n	8003bbe <scaraInitDuty+0x89e>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003aee:	2307      	movs	r3, #7
 8003af0:	f000 bda7 	b.w	8004642 <scaraInitDuty+0x1322>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003af4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003af8:	a315      	add	r3, pc, #84	; (adr r3, 8003b50 <scaraInitDuty+0x830>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fd8b 	bl	8000618 <__aeabi_dmul>
 8003b02:	4603      	mov	r3, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	4618      	mov	r0, r3
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <scaraInitDuty+0x840>)
 8003b10:	f7fc feac 	bl	800086c <__aeabi_ddiv>
 8003b14:	4603      	mov	r3, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003b1c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d11f      	bne.n	8003b64 <scaraInitDuty+0x844>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <scaraInitDuty+0x838>)
 8003b26:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b2e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003b32:	461a      	mov	r2, r3
 8003b34:	4623      	mov	r3, r4
 8003b36:	f7fc fbb9 	bl	80002ac <__adddf3>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003b42:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003b46:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003b4a:	e026      	b.n	8003b9a <scaraInitDuty+0x87a>
 8003b4c:	f3af 8000 	nop.w
 8003b50:	60000000 	.word	0x60000000
 8003b54:	400921fb 	.word	0x400921fb
 8003b58:	200052e8 	.word	0x200052e8
 8003b5c:	20005ca0 	.word	0x20005ca0
 8003b60:	40668000 	.word	0x40668000
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003b64:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <scaraInitDuty+0x874>
					abs_position = command.sub_para_double;
 8003b6c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003b70:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8003b74:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003b78:	4bb5      	ldr	r3, [pc, #724]	; (8003e50 <scaraInitDuty+0xb30>)
 8003b7a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003b7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4623      	mov	r3, r4
 8003b86:	f7fc fb8f 	bl	80002a8 <__aeabi_dsub>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003b92:	e002      	b.n	8003b9a <scaraInitDuty+0x87a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003b94:	230c      	movs	r3, #12
 8003b96:	f000 bd54 	b.w	8004642 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8003b9a:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	f003 fb1e 	bl	80071e0 <scaraCheckWorkSpace1>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <scaraInitDuty+0x8a2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003baa:	2307      	movs	r3, #7
 8003bac:	f000 bd49 	b.w	8004642 <scaraInitDuty+0x1322>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8003bb0:	230b      	movs	r3, #11
 8003bb2:	f000 bd46 	b.w	8004642 <scaraInitDuty+0x1322>
				break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <scaraInitDuty+0x8a4>
				break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <scaraInitDuty+0x8a4>
				break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <scaraInitDuty+0x8a4>
				break;
 8003bc2:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8003bc4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 80f5 	bne.w	8003db8 <scaraInitDuty+0xa98>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003bce:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d17d      	bne.n	8003cd2 <scaraInitDuty+0x9b2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003bdc:	e074      	b.n	8003cc8 <scaraInitDuty+0x9a8>
						if ( i == command.sub_para_int) {
 8003bde:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d131      	bne.n	8003c4e <scaraInitDuty+0x92e>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003bea:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003bee:	4a98      	ldr	r2, [pc, #608]	; (8003e50 <scaraInitDuty+0xb30>)
 8003bf0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003c02:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003c06:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003c0a:	4991      	ldr	r1, [pc, #580]	; (8003e50 <scaraInitDuty+0xb30>)
 8003c0c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003c10:	fb00 f202 	mul.w	r2, r0, r2
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003c1a:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003c1e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c22:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003c2e:	4a88      	ldr	r2, [pc, #544]	; (8003e50 <scaraInitDuty+0xb30>)
 8003c30:	1898      	adds	r0, r3, r2
 8003c32:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c36:	4a87      	ldr	r2, [pc, #540]	; (8003e54 <scaraInitDuty+0xb34>)
 8003c38:	5cd3      	ldrb	r3, [r2, r3]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003c40:	4619      	mov	r1, r3
 8003c42:	f000 ff4d 	bl	8004ae0 <scaraInitLSPB>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8003c4c:	e030      	b.n	8003cb0 <scaraInitDuty+0x990>
											s, DUTY_MODE_INIT_QVT);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003c4e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c52:	4a7f      	ldr	r2, [pc, #508]	; (8003e50 <scaraInitDuty+0xb30>)
 8003c54:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003c66:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003c6a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003c6e:	4978      	ldr	r1, [pc, #480]	; (8003e50 <scaraInitDuty+0xb30>)
 8003c70:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003c74:	fb00 f202 	mul.w	r2, r0, r2
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003c7e:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003c82:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c86:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003c92:	4a6f      	ldr	r2, [pc, #444]	; (8003e50 <scaraInitDuty+0xb30>)
 8003c94:	1898      	adds	r0, r3, r2
 8003c96:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003c9a:	4a6e      	ldr	r2, [pc, #440]	; (8003e54 <scaraInitDuty+0xb34>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8003e48 <scaraInitDuty+0xb28>
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f000 ff1b 	bl	8004ae0 <scaraInitLSPB>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											0, DUTY_MODE_INIT_QVT);
						}
						myDUTY.time_total = command.time_total;
 8003cb0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003cb4:	4a66      	ldr	r2, [pc, #408]	; (8003e50 <scaraInitDuty+0xb30>)
 8003cb6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003cba:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8003cbe:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003cc8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d986      	bls.n	8003bde <scaraInitDuty+0x8be>
 8003cd0:	e179      	b.n	8003fc6 <scaraInitDuty+0xca6>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003cd2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d16b      	bne.n	8003db2 <scaraInitDuty+0xa92>
					for ( uint8_t i = 0; i < 4; i++) {
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8003ce0:	e062      	b.n	8003da8 <scaraInitDuty+0xa88>
						if ( i == command.sub_para_int) {
 8003ce2:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8003ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d134      	bne.n	8003d58 <scaraInitDuty+0xa38>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003cee:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <scaraInitDuty+0xb30>)
 8003cf4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003d06:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d0a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003d16:	4a4e      	ldr	r2, [pc, #312]	; (8003e50 <scaraInitDuty+0xb30>)
 8003d18:	1898      	adds	r0, r3, r2
 8003d1a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d1e:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <scaraInitDuty+0xb34>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	2200      	movs	r2, #0
 8003d24:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f000 fed9 	bl	8004ae0 <scaraInitLSPB>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											s, DUTY_MODE_INIT_QVA);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003d34:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d38:	4a45      	ldr	r2, [pc, #276]	; (8003e50 <scaraInitDuty+0xb30>)
 8003d3a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d4c:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <scaraInitDuty+0xb30>)
 8003d4e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003d52:	e9c2 3400 	strd	r3, r4, [r2]
 8003d56:	e022      	b.n	8003d9e <scaraInitDuty+0xa7e>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003d58:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d5c:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <scaraInitDuty+0xb30>)
 8003d5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003d70:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d74:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <scaraInitDuty+0xb30>)
 8003d82:	1898      	adds	r0, r3, r2
 8003d84:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003d88:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <scaraInitDuty+0xb34>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8003e48 <scaraInitDuty+0xb28>
 8003d92:	4619      	mov	r1, r3
 8003d94:	f000 fea4 	bl	8004ae0 <scaraInitLSPB>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					for ( uint8_t i = 0; i < 4; i++) {
 8003d9e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003da2:	3301      	adds	r3, #1
 8003da4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8003da8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d998      	bls.n	8003ce2 <scaraInitDuty+0x9c2>
 8003db0:	e109      	b.n	8003fc6 <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8003db2:	2308      	movs	r3, #8
 8003db4:	f000 bc45 	b.w	8004642 <scaraInitDuty+0x1322>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8003db8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	f040 8100 	bne.w	8003fc2 <scaraInitDuty+0xca2>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003dc2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f040 8089 	bne.w	8003ede <scaraInitDuty+0xbbe>
						for ( uint8_t i = 0; i < 4; i++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8003dd2:	e07e      	b.n	8003ed2 <scaraInitDuty+0xbb2>
							if ( i == command.sub_para_int) {
 8003dd4:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8003dd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d13b      	bne.n	8003e58 <scaraInitDuty+0xb38>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003de0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003de4:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <scaraInitDuty+0xb30>)
 8003de6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8003df8:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8003dfc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003e00:	4913      	ldr	r1, [pc, #76]	; (8003e50 <scaraInitDuty+0xb30>)
 8003e02:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003e06:	fb00 f202 	mul.w	r2, r0, r2
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8003e10:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8003e14:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003e18:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <scaraInitDuty+0xb30>)
 8003e26:	1898      	adds	r0, r3, r2
 8003e28:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <scaraInitDuty+0xb34>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	2201      	movs	r2, #1
 8003e32:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003e36:	4619      	mov	r1, r3
 8003e38:	f001 f9e2 	bl	8005200 <scaraInitScurve>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8003e42:	e03a      	b.n	8003eba <scaraInitDuty+0xb9a>
 8003e44:	f3af 8000 	nop.w
	...
 8003e50:	200052e8 	.word	0x200052e8
 8003e54:	20000c7c 	.word	0x20000c7c
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003e58:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003e5c:	4aa4      	ldr	r2, [pc, #656]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003e5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8003e70:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8003e74:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003e78:	499d      	ldr	r1, [pc, #628]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003e7a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003e7e:	fb00 f202 	mul.w	r2, r0, r2
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8003e88:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8003e8c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003e90:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003e9c:	4a94      	ldr	r2, [pc, #592]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003e9e:	1898      	adds	r0, r3, r2
 8003ea0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003ea4:	4a93      	ldr	r2, [pc, #588]	; (80040f4 <scaraInitDuty+0xdd4>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 80040e0 <scaraInitDuty+0xdc0>
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f001 f9a6 	bl	8005200 <scaraInitScurve>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT);
							}
							myDUTY.time_total = command.time_total;
 8003eba:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003ebe:	4a8c      	ldr	r2, [pc, #560]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003ec0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003ec4:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8003ec8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8003ed2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	f67f af7c 	bls.w	8003dd4 <scaraInitDuty+0xab4>
 8003edc:	e073      	b.n	8003fc6 <scaraInitDuty+0xca6>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003ede:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d16b      	bne.n	8003fbe <scaraInitDuty+0xc9e>
						for ( uint8_t i = 0; i < 4; i++) {
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8003eec:	e062      	b.n	8003fb4 <scaraInitDuty+0xc94>
							if ( i == command.sub_para_int) {
 8003eee:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 8003ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d134      	bne.n	8003f64 <scaraInitDuty+0xc44>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003efa:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003efe:	4a7c      	ldr	r2, [pc, #496]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f00:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8003f12:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f16:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f24:	1898      	adds	r0, r3, r2
 8003f26:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f2a:	4a72      	ldr	r2, [pc, #456]	; (80040f4 <scaraInitDuty+0xdd4>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003f34:	4619      	mov	r1, r3
 8003f36:	f001 f963 	bl	8005200 <scaraInitScurve>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8003f40:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f44:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f58:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f5a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003f5e:	e9c2 3400 	strd	r3, r4, [r2]
 8003f62:	e022      	b.n	8003faa <scaraInitDuty+0xc8a>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003f64:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f68:	4a61      	ldr	r2, [pc, #388]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8003f7c:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f80:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <scaraInitDuty+0xdd0>)
 8003f8e:	1898      	adds	r0, r3, r2
 8003f90:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003f94:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <scaraInitDuty+0xdd4>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	ed9f 0b51 	vldr	d0, [pc, #324]	; 80040e0 <scaraInitDuty+0xdc0>
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f001 f92e 	bl	8005200 <scaraInitScurve>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						for ( uint8_t i = 0; i < 4; i++) {
 8003faa:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8003fb4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d998      	bls.n	8003eee <scaraInitDuty+0xbce>
 8003fbc:	e003      	b.n	8003fc6 <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	e33f      	b.n	8004642 <scaraInitDuty+0x1322>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	e33d      	b.n	8004642 <scaraInitDuty+0x1322>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8003fc6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <scaraInitDuty+0xcb4>
				return status1;
 8003fce:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003fd2:	e336      	b.n	8004642 <scaraInitDuty+0x1322>
			}
			if ( SCARA_STATUS_OK != status2) {
 8003fd4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8313 	beq.w	8004604 <scaraInitDuty+0x12e4>
				return status2;
 8003fde:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003fe2:	e32e      	b.n	8004642 <scaraInitDuty+0x1322>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8003fe4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 8307 	bne.w	80045fc <scaraInitDuty+0x12dc>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8003fee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ff2:	a33d      	add	r3, pc, #244	; (adr r3, 80040e8 <scaraInitDuty+0xdc8>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc fb0e 	bl	8000618 <__aeabi_dmul>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	4618      	mov	r0, r3
 8004002:	4621      	mov	r1, r4
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <scaraInitDuty+0xdd8>)
 800400a:	f7fc fc2f 	bl	800086c <__aeabi_ddiv>
 800400e:	4603      	mov	r3, r0
 8004010:	460c      	mov	r4, r1
 8004012:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004016:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800401a:	2b01      	cmp	r3, #1
 800401c:	d134      	bne.n	8004088 <scaraInitDuty+0xd68>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <scaraInitDuty+0xddc>)
 8004020:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004024:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004028:	461a      	mov	r2, r3
 800402a:	4623      	mov	r3, r4
 800402c:	f7fc f93e 	bl	80002ac <__adddf3>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8004038:	4b30      	ldr	r3, [pc, #192]	; (80040fc <scaraInitDuty+0xddc>)
 800403a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800403e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004042:	461a      	mov	r2, r3
 8004044:	4623      	mov	r3, r4
 8004046:	f7fc f931 	bl	80002ac <__adddf3>
 800404a:	4603      	mov	r3, r0
 800404c:	460c      	mov	r4, r1
 800404e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <scaraInitDuty+0xddc>)
 8004054:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004058:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800405c:	461a      	mov	r2, r3
 800405e:	4623      	mov	r3, r4
 8004060:	f7fc f924 	bl	80002ac <__adddf3>
 8004064:	4603      	mov	r3, r0
 8004066:	460c      	mov	r4, r1
 8004068:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <scaraInitDuty+0xddc>)
 800406e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004072:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004076:	461a      	mov	r2, r3
 8004078:	4623      	mov	r3, r4
 800407a:	f7fc f917 	bl	80002ac <__adddf3>
 800407e:	4603      	mov	r3, r0
 8004080:	460c      	mov	r4, r1
 8004082:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8004086:	e016      	b.n	80040b6 <scaraInitDuty+0xd96>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004088:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <scaraInitDuty+0xd92>
				target_point.x 		= command.target_point.x;
 8004090:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004094:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= command.target_point.y;
 8004098:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800409c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= command.target_point.z;
 80040a0:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80040a4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= command.target_point.roll;
 80040a8:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80040ac:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80040b0:	e001      	b.n	80040b6 <scaraInitDuty+0xd96>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80040b2:	230c      	movs	r3, #12
 80040b4:	e2c5      	b.n	8004642 <scaraInitDuty+0x1322>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80040b6:	4c11      	ldr	r4, [pc, #68]	; (80040fc <scaraInitDuty+0xddc>)
 80040b8:	f107 0568 	add.w	r5, r7, #104	; 0x68
 80040bc:	4668      	mov	r0, sp
 80040be:	f104 0308 	add.w	r3, r4, #8
 80040c2:	2260      	movs	r2, #96	; 0x60
 80040c4:	4619      	mov	r1, r3
 80040c6:	f00d fd9b 	bl	8011c00 <memcpy>
 80040ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7fe fd82 	bl	8002bd8 <kinematicInverse>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d112      	bne.n	8004100 <scaraInitDuty+0xde0>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80040da:	2307      	movs	r3, #7
 80040dc:	e2b1      	b.n	8004642 <scaraInitDuty+0x1322>
 80040de:	bf00      	nop
	...
 80040e8:	60000000 	.word	0x60000000
 80040ec:	400921fb 	.word	0x400921fb
 80040f0:	200052e8 	.word	0x200052e8
 80040f4:	20000c7c 	.word	0x20000c7c
 80040f8:	40668000 	.word	0x40668000
 80040fc:	20005ca0 	.word	0x20005ca0
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8004100:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004104:	4bb0      	ldr	r3, [pc, #704]	; (80043c8 <scaraInitDuty+0x10a8>)
 8004106:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	f7fc f8cb 	bl	80002a8 <__aeabi_dsub>
 8004112:	4603      	mov	r3, r0
 8004114:	460c      	mov	r4, r1
 8004116:	463a      	mov	r2, r7
 8004118:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800411c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004120:	4ba9      	ldr	r3, [pc, #676]	; (80043c8 <scaraInitDuty+0x10a8>)
 8004122:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004126:	461a      	mov	r2, r3
 8004128:	4623      	mov	r3, r4
 800412a:	f7fc f8bd 	bl	80002a8 <__aeabi_dsub>
 800412e:	4603      	mov	r3, r0
 8004130:	460c      	mov	r4, r1
 8004132:	463a      	mov	r2, r7
 8004134:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8004138:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800413c:	4ba2      	ldr	r3, [pc, #648]	; (80043c8 <scaraInitDuty+0x10a8>)
 800413e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004142:	461a      	mov	r2, r3
 8004144:	4623      	mov	r3, r4
 8004146:	f7fc f8af 	bl	80002a8 <__aeabi_dsub>
 800414a:	4603      	mov	r3, r0
 800414c:	460c      	mov	r4, r1
 800414e:	463a      	mov	r2, r7
 8004150:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8004154:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004158:	4b9b      	ldr	r3, [pc, #620]	; (80043c8 <scaraInitDuty+0x10a8>)
 800415a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800415e:	461a      	mov	r2, r3
 8004160:	4623      	mov	r3, r4
 8004162:	f7fc f8a1 	bl	80002a8 <__aeabi_dsub>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	463a      	mov	r2, r7
 800416c:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8004170:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 811a 	bne.w	80043ae <scaraInitDuty+0x108e>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800417a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800417e:	2b01      	cmp	r3, #1
 8004180:	d14d      	bne.n	800421e <scaraInitDuty+0xefe>
					for ( uint8_t i = 0; i < 4; i++) {
 8004182:	2300      	movs	r3, #0
 8004184:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004188:	e03d      	b.n	8004206 <scaraInitDuty+0xee6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800418a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800418e:	4a8f      	ldr	r2, [pc, #572]	; (80043cc <scaraInitDuty+0x10ac>)
 8004190:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80041a2:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80041a6:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80041aa:	4988      	ldr	r1, [pc, #544]	; (80043cc <scaraInitDuty+0x10ac>)
 80041ac:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80041b0:	fb00 f202 	mul.w	r2, r0, r2
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80041ba:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80041be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041c2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80041ce:	4a7f      	ldr	r2, [pc, #508]	; (80043cc <scaraInitDuty+0x10ac>)
 80041d0:	1898      	adds	r0, r3, r2
 80041d2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041d6:	4a7e      	ldr	r2, [pc, #504]	; (80043d0 <scaraInitDuty+0x10b0>)
 80041d8:	5cd1      	ldrb	r1, [r2, r3]
 80041da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041de:	463a      	mov	r2, r7
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	ed93 7b00 	vldr	d7, [r3]
 80041e8:	2201      	movs	r2, #1
 80041ea:	eeb0 0a47 	vmov.f32	s0, s14
 80041ee:	eef0 0a67 	vmov.f32	s1, s15
 80041f2:	f000 fc75 	bl	8004ae0 <scaraInitLSPB>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80041fc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004200:	3301      	adds	r3, #1
 8004202:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004206:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800420a:	2b03      	cmp	r3, #3
 800420c:	d9bd      	bls.n	800418a <scaraInitDuty+0xe6a>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 800420e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004212:	4a6e      	ldr	r2, [pc, #440]	; (80043cc <scaraInitDuty+0x10ac>)
 8004214:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004218:	e9c2 3400 	strd	r3, r4, [r2]
 800421c:	e1f2      	b.n	8004604 <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800421e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 80c1 	bne.w	80043aa <scaraInitDuty+0x108a>
					for ( uint8_t i = 0; i < 4; i++) {
 8004228:	2300      	movs	r3, #0
 800422a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800422e:	e02f      	b.n	8004290 <scaraInitDuty+0xf70>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004230:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004234:	4a65      	ldr	r2, [pc, #404]	; (80043cc <scaraInitDuty+0x10ac>)
 8004236:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004248:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800424c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004258:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <scaraInitDuty+0x10ac>)
 800425a:	1898      	adds	r0, r3, r2
 800425c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004260:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <scaraInitDuty+0x10b0>)
 8004262:	5cd1      	ldrb	r1, [r2, r3]
 8004264:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004268:	463a      	mov	r2, r7
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	ed93 7b00 	vldr	d7, [r3]
 8004272:	2200      	movs	r2, #0
 8004274:	eeb0 0a47 	vmov.f32	s0, s14
 8004278:	eef0 0a67 	vmov.f32	s1, s15
 800427c:	f000 fc30 	bl	8004ae0 <scaraInitLSPB>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004286:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800428a:	3301      	adds	r3, #1
 800428c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004290:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004294:	2b03      	cmp	r3, #3
 8004296:	d9cb      	bls.n	8004230 <scaraInitDuty+0xf10>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 8004298:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <scaraInitDuty+0x10ac>)
 800429a:	f603 1248 	addw	r2, r3, #2376	; 0x948
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80042b0:	e02d      	b.n	800430e <scaraInitDuty+0xfee>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80042b2:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80042b6:	4a45      	ldr	r2, [pc, #276]	; (80043cc <scaraInitDuty+0x10ac>)
 80042b8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80042c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ca:	4b40      	ldr	r3, [pc, #256]	; (80043cc <scaraInitDuty+0x10ac>)
 80042cc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80042d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	f7fc fc2e 	bl	8000b38 <__aeabi_dcmpgt>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d010      	beq.n	8004304 <scaraInitDuty+0xfe4>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80042e2:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80042e6:	4a39      	ldr	r2, [pc, #228]	; (80043cc <scaraInitDuty+0x10ac>)
 80042e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80042f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042fa:	4a34      	ldr	r2, [pc, #208]	; (80043cc <scaraInitDuty+0x10ac>)
 80042fc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004300:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8004304:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004308:	3301      	adds	r3, #1
 800430a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800430e:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004312:	2b03      	cmp	r3, #3
 8004314:	d9cd      	bls.n	80042b2 <scaraInitDuty+0xf92>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8004316:	2300      	movs	r3, #0
 8004318:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 800431c:	e040      	b.n	80043a0 <scaraInitDuty+0x1080>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800431e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004322:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <scaraInitDuty+0x10ac>)
 8004324:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8004336:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <scaraInitDuty+0x10ac>)
 800433c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004340:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004344:	4921      	ldr	r1, [pc, #132]	; (80043cc <scaraInitDuty+0x10ac>)
 8004346:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800434a:	fb00 f202 	mul.w	r2, r0, r2
 800434e:	440a      	add	r2, r1
 8004350:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004354:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004358:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800435c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <scaraInitDuty+0x10ac>)
 800436a:	1898      	adds	r0, r3, r2
 800436c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <scaraInitDuty+0x10b0>)
 8004372:	5cd1      	ldrb	r1, [r2, r3]
 8004374:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004378:	463a      	mov	r2, r7
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	ed93 7b00 	vldr	d7, [r3]
 8004382:	2201      	movs	r2, #1
 8004384:	eeb0 0a47 	vmov.f32	s0, s14
 8004388:	eef0 0a67 	vmov.f32	s1, s15
 800438c:	f000 fba8 	bl	8004ae0 <scaraInitLSPB>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004396:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800439a:	3301      	adds	r3, #1
 800439c:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80043a0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d9ba      	bls.n	800431e <scaraInitDuty+0xffe>
 80043a8:	e12c      	b.n	8004604 <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80043aa:	2308      	movs	r3, #8
 80043ac:	e149      	b.n	8004642 <scaraInitDuty+0x1322>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80043ae:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 8120 	bne.w	80045f8 <scaraInitDuty+0x12d8>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80043b8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d153      	bne.n	8004468 <scaraInitDuty+0x1148>
					for ( uint8_t i = 0; i < 4; i++) {
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80043c6:	e043      	b.n	8004450 <scaraInitDuty+0x1130>
 80043c8:	20005ca0 	.word	0x20005ca0
 80043cc:	200052e8 	.word	0x200052e8
 80043d0:	20000c7c 	.word	0x20000c7c
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80043d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80043d8:	4a9e      	ldr	r2, [pc, #632]	; (8004654 <scaraInitDuty+0x1334>)
 80043da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80043ec:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 80043f0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80043f4:	4997      	ldr	r1, [pc, #604]	; (8004654 <scaraInitDuty+0x1334>)
 80043f6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80043fa:	fb00 f202 	mul.w	r2, r0, r2
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004404:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8004408:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800440c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004418:	4a8e      	ldr	r2, [pc, #568]	; (8004654 <scaraInitDuty+0x1334>)
 800441a:	1898      	adds	r0, r3, r2
 800441c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004420:	4a8d      	ldr	r2, [pc, #564]	; (8004658 <scaraInitDuty+0x1338>)
 8004422:	5cd1      	ldrb	r1, [r2, r3]
 8004424:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004428:	463a      	mov	r2, r7
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	ed93 7b00 	vldr	d7, [r3]
 8004432:	2201      	movs	r2, #1
 8004434:	eeb0 0a47 	vmov.f32	s0, s14
 8004438:	eef0 0a67 	vmov.f32	s1, s15
 800443c:	f000 fee0 	bl	8005200 <scaraInitScurve>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004446:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800444a:	3301      	adds	r3, #1
 800444c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004450:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004454:	2b03      	cmp	r3, #3
 8004456:	d9bd      	bls.n	80043d4 <scaraInitDuty+0x10b4>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8004458:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800445c:	4a7d      	ldr	r2, [pc, #500]	; (8004654 <scaraInitDuty+0x1334>)
 800445e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004462:	e9c2 3400 	strd	r3, r4, [r2]
 8004466:	e0cd      	b.n	8004604 <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004468:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 80c1 	bne.w	80045f4 <scaraInitDuty+0x12d4>
					for ( uint8_t i = 0; i < 4; i++) {
 8004472:	2300      	movs	r3, #0
 8004474:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8004478:	e02f      	b.n	80044da <scaraInitDuty+0x11ba>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800447a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800447e:	4a75      	ldr	r2, [pc, #468]	; (8004654 <scaraInitDuty+0x1334>)
 8004480:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8004492:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004496:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80044a2:	4a6c      	ldr	r2, [pc, #432]	; (8004654 <scaraInitDuty+0x1334>)
 80044a4:	1898      	adds	r0, r3, r2
 80044a6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80044aa:	4a6b      	ldr	r2, [pc, #428]	; (8004658 <scaraInitDuty+0x1338>)
 80044ac:	5cd1      	ldrb	r1, [r2, r3]
 80044ae:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80044b2:	463a      	mov	r2, r7
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	ed93 7b00 	vldr	d7, [r3]
 80044bc:	2200      	movs	r2, #0
 80044be:	eeb0 0a47 	vmov.f32	s0, s14
 80044c2:	eef0 0a67 	vmov.f32	s1, s15
 80044c6:	f000 fe9b 	bl	8005200 <scaraInitScurve>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80044d0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80044d4:	3301      	adds	r3, #1
 80044d6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80044da:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d9cb      	bls.n	800447a <scaraInitDuty+0x115a>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <scaraInitDuty+0x1334>)
 80044e4:	f603 1248 	addw	r2, r3, #2376	; 0x948
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80044fa:	e02d      	b.n	8004558 <scaraInitDuty+0x1238>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 80044fc:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004500:	4a54      	ldr	r2, [pc, #336]	; (8004654 <scaraInitDuty+0x1334>)
 8004502:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004514:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <scaraInitDuty+0x1334>)
 8004516:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800451a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800451e:	461a      	mov	r2, r3
 8004520:	4623      	mov	r3, r4
 8004522:	f7fc fb09 	bl	8000b38 <__aeabi_dcmpgt>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <scaraInitDuty+0x122e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800452c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004530:	4a48      	ldr	r2, [pc, #288]	; (8004654 <scaraInitDuty+0x1334>)
 8004532:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004540:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004544:	4a43      	ldr	r2, [pc, #268]	; (8004654 <scaraInitDuty+0x1334>)
 8004546:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800454a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800454e:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004552:	3301      	adds	r3, #1
 8004554:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8004558:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800455c:	2b03      	cmp	r3, #3
 800455e:	d9cd      	bls.n	80044fc <scaraInitDuty+0x11dc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8004560:	2300      	movs	r3, #0
 8004562:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8004566:	e040      	b.n	80045ea <scaraInitDuty+0x12ca>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004568:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800456c:	4a39      	ldr	r2, [pc, #228]	; (8004654 <scaraInitDuty+0x1334>)
 800456e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8004580:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <scaraInitDuty+0x1334>)
 8004586:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800458a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800458e:	4931      	ldr	r1, [pc, #196]	; (8004654 <scaraInitDuty+0x1334>)
 8004590:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004594:	fb00 f202 	mul.w	r2, r0, r2
 8004598:	440a      	add	r2, r1
 800459a:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800459e:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80045a2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80045a6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80045b2:	4a28      	ldr	r2, [pc, #160]	; (8004654 <scaraInitDuty+0x1334>)
 80045b4:	1898      	adds	r0, r3, r2
 80045b6:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80045ba:	4a27      	ldr	r2, [pc, #156]	; (8004658 <scaraInitDuty+0x1338>)
 80045bc:	5cd1      	ldrb	r1, [r2, r3]
 80045be:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80045c2:	463a      	mov	r2, r7
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	ed93 7b00 	vldr	d7, [r3]
 80045cc:	2201      	movs	r2, #1
 80045ce:	eeb0 0a47 	vmov.f32	s0, s14
 80045d2:	eef0 0a67 	vmov.f32	s1, s15
 80045d6:	f000 fe13 	bl	8005200 <scaraInitScurve>
 80045da:	4603      	mov	r3, r0
 80045dc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80045e0:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80045e4:	3301      	adds	r3, #1
 80045e6:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80045ea:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d9ba      	bls.n	8004568 <scaraInitDuty+0x1248>
 80045f2:	e007      	b.n	8004604 <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80045f4:	2308      	movs	r3, #8
 80045f6:	e024      	b.n	8004642 <scaraInitDuty+0x1322>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80045f8:	2305      	movs	r3, #5
 80045fa:	e022      	b.n	8004642 <scaraInitDuty+0x1322>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 80045fc:	2304      	movs	r3, #4
 80045fe:	e020      	b.n	8004642 <scaraInitDuty+0x1322>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8004600:	2302      	movs	r3, #2
 8004602:	e01e      	b.n	8004642 <scaraInitDuty+0x1322>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <scaraInitDuty+0x133c>)
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionCurrent.total_time = myDUTY.time_total;
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <scaraInitDuty+0x1334>)
 8004614:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800461c:	4a0f      	ldr	r2, [pc, #60]	; (800465c <scaraInitDuty+0x133c>)
 800461e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionNext.t = 0;
 8004622:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <scaraInitDuty+0x1340>)
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionNext.total_time = myDUTY.time_total;
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <scaraInitDuty+0x1334>)
 8004632:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <scaraInitDuty+0x1340>)
 800463c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	return SCARA_STATUS_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800464e:	b004      	add	sp, #16
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	200052e8 	.word	0x200052e8
 8004658:	20000c7c 	.word	0x20000c7c
 800465c:	20005ca0 	.word	0x20005ca0
 8004660:	20005d08 	.word	0x20005d08

08004664 <scaraInitLine>:

SCARA_StatusTypeDef			scaraInitLine		(Path_Line_TypeDef *line,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end) {
 8004664:	b082      	sub	sp, #8
 8004666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004668:	b09b      	sub	sp, #108	; 0x6c
 800466a:	af18      	add	r7, sp, #96	; 0x60
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	f107 0120 	add.w	r1, r7, #32
 8004672:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8004676:	f107 0488 	add.w	r4, r7, #136	; 0x88
 800467a:	4668      	mov	r0, sp
 800467c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004680:	2260      	movs	r2, #96	; 0x60
 8004682:	4619      	mov	r1, r3
 8004684:	f00d fabc 	bl	8011c00 <memcpy>
 8004688:	f107 0320 	add.w	r3, r7, #32
 800468c:	cb0c      	ldmia	r3, {r2, r3}
 800468e:	4620      	mov	r0, r4
 8004690:	f7fe faa2 	bl	8002bd8 <kinematicInverse>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800469a:	2307      	movs	r3, #7
 800469c:	e09e      	b.n	80047dc <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 800469e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 80046a8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 80046b2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 80046bc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 80046c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 80046d0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 80046da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046de:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80046e2:	461a      	mov	r2, r3
 80046e4:	4623      	mov	r3, r4
 80046e6:	f7fb fddf 	bl	80002a8 <__aeabi_dsub>
 80046ea:	4603      	mov	r3, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80046f4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80046f8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	f7fb fdd2 	bl	80002a8 <__aeabi_dsub>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800470e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004712:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004716:	461a      	mov	r2, r3
 8004718:	4623      	mov	r3, r4
 800471a:	f7fb fdc5 	bl	80002a8 <__aeabi_dsub>
 800471e:	4603      	mov	r3, r0
 8004720:	460c      	mov	r4, r1
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	f7fb ff6e 	bl	8000618 <__aeabi_dmul>
 800473c:	4603      	mov	r3, r0
 800473e:	460c      	mov	r4, r1
 8004740:	461d      	mov	r5, r3
 8004742:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004750:	461a      	mov	r2, r3
 8004752:	4623      	mov	r3, r4
 8004754:	f7fb ff60 	bl	8000618 <__aeabi_dmul>
 8004758:	4603      	mov	r3, r0
 800475a:	460c      	mov	r4, r1
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	4628      	mov	r0, r5
 8004762:	4631      	mov	r1, r6
 8004764:	f7fb fda2 	bl	80002ac <__adddf3>
 8004768:	4603      	mov	r3, r0
 800476a:	460c      	mov	r4, r1
 800476c:	461d      	mov	r5, r3
 800476e:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800477c:	461a      	mov	r2, r3
 800477e:	4623      	mov	r3, r4
 8004780:	f7fb ff4a 	bl	8000618 <__aeabi_dmul>
 8004784:	4603      	mov	r3, r0
 8004786:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8004788:	461a      	mov	r2, r3
 800478a:	4623      	mov	r3, r4
 800478c:	4628      	mov	r0, r5
 800478e:	4631      	mov	r1, r6
 8004790:	f7fb fd8c 	bl	80002ac <__adddf3>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	ec44 3b17 	vmov	d7, r3, r4
 800479c:	eeb0 0a47 	vmov.f32	s0, s14
 80047a0:	eef0 0a67 	vmov.f32	s1, s15
 80047a4:	f011 fd2a 	bl	80161fc <sqrt>
 80047a8:	eeb0 7a40 	vmov.f32	s14, s0
 80047ac:	eef0 7a60 	vmov.f32	s15, s1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80047e6:	b002      	add	sp, #8
 80047e8:	4770      	bx	lr
 80047ea:	0000      	movs	r0, r0
 80047ec:	0000      	movs	r0, r0
	...

080047f0 <scaraInitCircle>:

SCARA_StatusTypeDef			scaraInitCircle		(Path_Circle_TypeDef *circle,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end,
												SCARA_PositionTypeDef center,
												int32_t dir){
 80047f0:	b082      	sub	sp, #8
 80047f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047f6:	b0ad      	sub	sp, #180	; 0xb4
 80047f8:	af18      	add	r7, sp, #96	; 0x60
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004800:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8004804:	f107 06d8 	add.w	r6, r7, #216	; 0xd8
 8004808:	4668      	mov	r0, sp
 800480a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800480e:	2260      	movs	r2, #96	; 0x60
 8004810:	4619      	mov	r1, r3
 8004812:	f00d f9f5 	bl	8011c00 <memcpy>
 8004816:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800481a:	cb0c      	ldmia	r3, {r2, r3}
 800481c:	4630      	mov	r0, r6
 800481e:	f7fe f9db 	bl	8002bd8 <kinematicInverse>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004828:	2307      	movs	r3, #7
 800482a:	e146      	b.n	8004aba <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 800482c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004830:	2b01      	cmp	r3, #1
 8004832:	d006      	beq.n	8004842 <scaraInitCircle+0x52>
 8004834:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d001      	beq.n	8004842 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 800483e:	2306      	movs	r3, #6
 8004840:	e13b      	b.n	8004aba <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8004842:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004846:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800484a:	f7fb fd2d 	bl	80002a8 <__aeabi_dsub>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8004856:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800485a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800485e:	f7fb fd23 	bl	80002a8 <__aeabi_dsub>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 800486a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800486e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004872:	f7fb fd19 	bl	80002a8 <__aeabi_dsub>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 800487e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8004882:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004886:	f7fb fd0f 	bl	80002a8 <__aeabi_dsub>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8004892:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004896:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800489a:	f7fb febd 	bl	8000618 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4690      	mov	r8, r2
 80048a4:	4699      	mov	r9, r3
 80048a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048ae:	f7fb feb3 	bl	8000618 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4640      	mov	r0, r8
 80048b8:	4649      	mov	r1, r9
 80048ba:	f7fb fcf7 	bl	80002ac <__adddf3>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	ec43 2b17 	vmov	d7, r2, r3
 80048c6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ca:	eef0 0a67 	vmov.f32	s1, s15
 80048ce:	f011 fc95 	bl	80161fc <sqrt>
 80048d2:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 80048d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80048de:	f7fb fe9b 	bl	8000618 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4690      	mov	r8, r2
 80048e8:	4699      	mov	r9, r3
 80048ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048f2:	f7fb fe91 	bl	8000618 <__aeabi_dmul>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fb fcd5 	bl	80002ac <__adddf3>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	ec43 2b17 	vmov	d7, r2, r3
 800490a:	eeb0 0a47 	vmov.f32	s0, s14
 800490e:	eef0 0a67 	vmov.f32	s1, s15
 8004912:	f011 fc73 	bl	80161fc <sqrt>
 8004916:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 800491a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800491e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004922:	f7fb fcc1 	bl	80002a8 <__aeabi_dsub>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4614      	mov	r4, r2
 800492c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <scaraInitCircle+0x2e8>)
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f8fd 	bl	8000b38 <__aeabi_dcmpgt>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8004944:	2306      	movs	r3, #6
 8004946:	e0b8      	b.n	8004aba <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8004948:	a35f      	add	r3, pc, #380	; (adr r3, 8004ac8 <scaraInitCircle+0x2d8>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004952:	f7fc f8d3 	bl	8000afc <__aeabi_dcmplt>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <scaraInitCircle+0x180>
 800495c:	a35a      	add	r3, pc, #360	; (adr r3, 8004ac8 <scaraInitCircle+0x2d8>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004966:	f7fc f8c9 	bl	8000afc <__aeabi_dcmplt>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8004970:	2306      	movs	r3, #6
 8004972:	e0a2      	b.n	8004aba <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8004974:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8004978:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800497c:	f011 fc3c 	bl	80161f8 <atan2>
 8004980:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8004984:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004988:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800498c:	f011 fc34 	bl	80161f8 <atan2>
 8004990:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8004994:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800499c:	f7fb fc84 	bl	80002a8 <__aeabi_dsub>
 80049a0:	4603      	mov	r3, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049b4:	f7fc f8a2 	bl	8000afc <__aeabi_dcmplt>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 80049be:	a344      	add	r3, pc, #272	; (adr r3, 8004ad0 <scaraInitCircle+0x2e0>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049c8:	f7fb fc70 	bl	80002ac <__adddf3>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 80049d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0a      	bge.n	80049f2 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 80049dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049e0:	a13b      	add	r1, pc, #236	; (adr r1, 8004ad0 <scaraInitCircle+0x2e0>)
 80049e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e6:	f7fb fc5f 	bl	80002a8 <__aeabi_dsub>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 80049f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049f6:	b25a      	sxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004a02:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004a0c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004a16:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004a20:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8004a24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a28:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a2c:	f7fb fdf4 	bl	8000618 <__aeabi_dmul>
 8004a30:	4603      	mov	r3, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8004a3a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8004a44:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8004a4e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8004a58:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8004a62:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8004a6c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8004a76:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8004a80:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8004a8a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3754      	adds	r7, #84	; 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	b002      	add	sp, #8
 8004ac6:	4770      	bx	lr
 8004ac8:	9999999a 	.word	0x9999999a
 8004acc:	3fb99999 	.word	0x3fb99999
 8004ad0:	60000000 	.word	0x60000000
 8004ad4:	401921fb 	.word	0x401921fb
 8004ad8:	3ff00000 	.word	0x3ff00000
 8004adc:	00000000 	.word	0x00000000

08004ae0 <scaraInitLSPB>:

SCARA_StatusTypeDef	scaraInitLSPB	(Trajectory_LSPB_TypeDef *lspb,
									Trajectory_TargetTypeDef target,
									double total_s,
									ModeInitTypeDef modeinit) {
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	b0a9      	sub	sp, #164	; 0xa4
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	61f8      	str	r0, [r7, #28]
 8004aea:	460b      	mov	r3, r1
 8004aec:	ed87 0b04 	vstr	d0, [r7, #16]
 8004af0:	76fb      	strb	r3, [r7, #27]
 8004af2:	4613      	mov	r3, r2
 8004af4:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8004af6:	7efb      	ldrb	r3, [r7, #27]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d10a      	bne.n	8004b12 <scaraInitLSPB+0x32>
		 v_design = V_DESIGN_3D;
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	4c99      	ldr	r4, [pc, #612]	; (8004d68 <scaraInitLSPB+0x288>)
 8004b02:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_3D;
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	4c98      	ldr	r4, [pc, #608]	; (8004d6c <scaraInitLSPB+0x28c>)
 8004b0c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b10:	e047      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_ROLL == target) {
 8004b12:	7efb      	ldrb	r3, [r7, #27]
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d10a      	bne.n	8004b2e <scaraInitLSPB+0x4e>
		 v_design = V_DESIGN_ROLL;
 8004b18:	a48b      	add	r4, pc, #556	; (adr r4, 8004d48 <scaraInitLSPB+0x268>)
 8004b1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b1e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_ROLL;
 8004b22:	a48b      	add	r4, pc, #556	; (adr r4, 8004d50 <scaraInitLSPB+0x270>)
 8004b24:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b28:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b2c:	e039      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J0 == target) {
 8004b2e:	7efb      	ldrb	r3, [r7, #27]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <scaraInitLSPB+0x6a>
		 v_design = V_DESIGN_J0;
 8004b34:	a484      	add	r4, pc, #528	; (adr r4, 8004d48 <scaraInitLSPB+0x268>)
 8004b36:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b3a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J0;
 8004b3e:	a484      	add	r4, pc, #528	; (adr r4, 8004d50 <scaraInitLSPB+0x270>)
 8004b40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b44:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b48:	e02b      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J1 == target) {
 8004b4a:	7efb      	ldrb	r3, [r7, #27]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10a      	bne.n	8004b66 <scaraInitLSPB+0x86>
		 v_design = V_DESIGN_J1;
 8004b50:	a47d      	add	r4, pc, #500	; (adr r4, 8004d48 <scaraInitLSPB+0x268>)
 8004b52:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b56:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J1;
 8004b5a:	a47d      	add	r4, pc, #500	; (adr r4, 8004d50 <scaraInitLSPB+0x270>)
 8004b5c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b60:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b64:	e01d      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J2 == target) {
 8004b66:	7efb      	ldrb	r3, [r7, #27]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d10a      	bne.n	8004b82 <scaraInitLSPB+0xa2>
		 v_design = V_DESIGN_J2;
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	4c7d      	ldr	r4, [pc, #500]	; (8004d68 <scaraInitLSPB+0x288>)
 8004b72:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J2;
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	4c7c      	ldr	r4, [pc, #496]	; (8004d6c <scaraInitLSPB+0x28c>)
 8004b7c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b80:	e00f      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J3 == target) {
 8004b82:	7efb      	ldrb	r3, [r7, #27]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d10a      	bne.n	8004b9e <scaraInitLSPB+0xbe>
		 v_design = V_DESIGN_J3;
 8004b88:	a46f      	add	r4, pc, #444	; (adr r4, 8004d48 <scaraInitLSPB+0x268>)
 8004b8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b8e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J3;
 8004b92:	a46f      	add	r4, pc, #444	; (adr r4, 8004d50 <scaraInitLSPB+0x270>)
 8004b94:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b98:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004b9c:	e001      	b.n	8004ba2 <scaraInitLSPB+0xc2>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e31a      	b.n	80051d8 <scaraInitLSPB+0x6f8>
	 }

	 q0 = 0;
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 q1 = total_s;
 8004bae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004bb2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 v0 = 0;
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f04f 0400 	mov.w	r4, #0
 8004bbe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 v1 = 0;
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	 if ( q0 <= q1) {
 8004bce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004bd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004bd6:	f7fb ff9b 	bl	8000b10 <__aeabi_dcmple>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <scaraInitLSPB+0x108>
		 dir = 1;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004be6:	e00c      	b.n	8004c02 <scaraInitLSPB+0x122>
	 } else {
		 dir = -1;
 8004be8:	23ff      	movs	r3, #255	; 0xff
 8004bea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		 q1 = -q1;
 8004bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8004c02:	7ebb      	ldrb	r3, [r7, #26]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f040 80bf 	bne.w	8004d88 <scaraInitLSPB+0x2a8>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004c10:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 // Avoid division by 0
		 if (tf > 0.001) {
 8004c14:	a350      	add	r3, pc, #320	; (adr r3, 8004d58 <scaraInitLSPB+0x278>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c1e:	f7fb ff8b 	bl	8000b38 <__aeabi_dcmpgt>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80a3 	beq.w	8004d70 <scaraInitLSPB+0x290>
			 v_lower 	= (q1 - q0) / tf;
 8004c2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c32:	f7fb fb39 	bl	80002a8 <__aeabi_dsub>
 8004c36:	4603      	mov	r3, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c42:	f7fb fe13 	bl	800086c <__aeabi_ddiv>
 8004c46:	4603      	mov	r3, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			 v_upper 	= 2*(q1 - q0) / tf;
 8004c4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c56:	f7fb fb27 	bl	80002a8 <__aeabi_dsub>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	4621      	mov	r1, r4
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	f7fb fb21 	bl	80002ac <__adddf3>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4621      	mov	r1, r4
 8004c72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c76:	f7fb fdf9 	bl	800086c <__aeabi_ddiv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

			 if ( v_design < v_lower) {
 8004c82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c86:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c8a:	f7fb ff37 	bl	8000afc <__aeabi_dcmplt>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <scaraInitLSPB+0x1b8>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8004c94:	2309      	movs	r3, #9
 8004c96:	e29f      	b.n	80051d8 <scaraInitLSPB+0x6f8>
			 } else {
				 if ( v_upper <= v_design) {
 8004c98:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004c9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ca0:	f7fb ff36 	bl	8000b10 <__aeabi_dcmple>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <scaraInitLSPB+0x1d2>
					 v_design = v_upper;
 8004caa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004cae:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8004cb2:	a32b      	add	r3, pc, #172	; (adr r3, 8004d60 <scaraInitLSPB+0x280>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cbc:	f7fb ff3c 	bl	8000b38 <__aeabi_dcmpgt>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <scaraInitLSPB+0x21c>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8004cc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cce:	f7fb faeb 	bl	80002a8 <__aeabi_dsub>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4621      	mov	r1, r4
 8004cda:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004cde:	f7fb fdc5 	bl	800086c <__aeabi_ddiv>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4623      	mov	r3, r4
 8004cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cee:	f7fb fadb 	bl	80002a8 <__aeabi_dsub>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8004cfa:	e00b      	b.n	8004d14 <scaraInitLSPB+0x234>
				 } else {
					 tc_upper = tf / 2;
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d08:	f7fb fdb0 	bl	800086c <__aeabi_ddiv>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
				 }
				 a_upper	= v_design/tc_upper;
 8004d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb fda6 	bl	800086c <__aeabi_ddiv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
				 if ( a_upper > a_design) {
 8004d28:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004d2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d30:	f7fb ff02 	bl	8000b38 <__aeabi_dcmpgt>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <scaraInitLSPB+0x25e>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e24c      	b.n	80051d8 <scaraInitLSPB+0x6f8>
				 } else {
					 a_design = a_upper;
 8004d3e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004d42:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004d46:	e01f      	b.n	8004d88 <scaraInitLSPB+0x2a8>
 8004d48:	80000000 	.word	0x80000000
 8004d4c:	3fd41b2f 	.word	0x3fd41b2f
 8004d50:	a0000000 	.word	0xa0000000
 8004d54:	3fa015bf 	.word	0x3fa015bf
 8004d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d5c:	3f50624d 	.word	0x3f50624d
 8004d60:	9abcaf48 	.word	0x9abcaf48
 8004d64:	3e7ad7f2 	.word	0x3e7ad7f2
 8004d68:	40340000 	.word	0x40340000
 8004d6c:	40140000 	.word	0x40140000
				 }
			 }
		 } else {
			 v_design = 0;
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	f04f 0400 	mov.w	r4, #0
 8004d78:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 a_design = 0;
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	f04f 0400 	mov.w	r4, #0
 8004d84:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8004d88:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004d94:	f7fb fed0 	bl	8000b38 <__aeabi_dcmpgt>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 819c 	beq.w	80050d8 <scaraInitLSPB+0x5f8>
 8004da0:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dac:	f7fb fec4 	bl	8000b38 <__aeabi_dcmpgt>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8190 	beq.w	80050d8 <scaraInitLSPB+0x5f8>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8004db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dbc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dc0:	f7fb fa72 	bl	80002a8 <__aeabi_dsub>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8004dce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	f7fb fc1f 	bl	8000618 <__aeabi_dmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004de2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004de6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dea:	f7fb fc15 	bl	8000618 <__aeabi_dmul>
 8004dee:	4603      	mov	r3, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	e9c7 3400 	strd	r3, r4, [r7]
 8004df6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dfe:	f7fb fc0b 	bl	8000618 <__aeabi_dmul>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	461d      	mov	r5, r3
 8004e08:	4626      	mov	r6, r4
 8004e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004e12:	f7fb fc01 	bl	8000618 <__aeabi_dmul>
 8004e16:	4603      	mov	r3, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	4631      	mov	r1, r6
 8004e22:	f7fb fa43 	bl	80002ac <__adddf3>
 8004e26:	4603      	mov	r3, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e36:	f7fb fd19 	bl	800086c <__aeabi_ddiv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4623      	mov	r3, r4
 8004e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e46:	f7fb fa2f 	bl	80002a8 <__aeabi_dsub>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e56:	f7fb fe5b 	bl	8000b10 <__aeabi_dcmple>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d075      	beq.n	8004f4c <scaraInitLSPB+0x46c>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8004e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e64:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e68:	f7fb fa1e 	bl	80002a8 <__aeabi_dsub>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	469a      	mov	sl, r3
 8004e72:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8004e76:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f7fb fbcb 	bl	8000618 <__aeabi_dmul>
 8004e82:	4603      	mov	r3, r0
 8004e84:	460c      	mov	r4, r1
 8004e86:	4625      	mov	r5, r4
 8004e88:	461c      	mov	r4, r3
 8004e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e92:	f7fb fbc1 	bl	8000618 <__aeabi_dmul>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4690      	mov	r8, r2
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004ea6:	f7fb fbb7 	bl	8000618 <__aeabi_dmul>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb f9fb 	bl	80002ac <__adddf3>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec6:	f7fb fcd1 	bl	800086c <__aeabi_ddiv>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb f9eb 	bl	80002ac <__adddf3>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	460c      	mov	r4, r1
 8004eda:	ec44 3b17 	vmov	d7, r3, r4
 8004ede:	eeb0 0a47 	vmov.f32	s0, s14
 8004ee2:	eef0 0a67 	vmov.f32	s1, s15
 8004ee6:	f011 f989 	bl	80161fc <sqrt>
 8004eea:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 8004eee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ef2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004ef6:	f7fb f9d7 	bl	80002a8 <__aeabi_dsub>
 8004efa:	4603      	mov	r3, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	4618      	mov	r0, r3
 8004f00:	4621      	mov	r1, r4
 8004f02:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004f06:	f7fb fcb1 	bl	800086c <__aeabi_ddiv>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 8004f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f16:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004f1a:	f7fb f9c5 	bl	80002a8 <__aeabi_dsub>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	460c      	mov	r4, r1
 8004f22:	4618      	mov	r0, r3
 8004f24:	4621      	mov	r1, r4
 8004f26:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004f2a:	f7fb fc9f 	bl	800086c <__aeabi_ddiv>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= ta + td;
 8004f36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004f3a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004f3e:	f7fb f9b5 	bl	80002ac <__adddf3>
 8004f42:	4603      	mov	r3, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8004f4a:	e0e3      	b.n	8005114 <scaraInitLSPB+0x634>
		 } else {
			 v_lim	= v_design;
 8004f4c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004f50:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 8004f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f58:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004f5c:	f7fb f9a4 	bl	80002a8 <__aeabi_dsub>
 8004f60:	4603      	mov	r3, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	4618      	mov	r0, r3
 8004f66:	4621      	mov	r1, r4
 8004f68:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004f6c:	f7fb fc7e 	bl	800086c <__aeabi_ddiv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 8004f78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f7c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004f80:	f7fb f992 	bl	80002a8 <__aeabi_dsub>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	4618      	mov	r0, r3
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004f90:	f7fb fc6c 	bl	800086c <__aeabi_ddiv>
 8004f94:	4603      	mov	r3, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8004f9c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004fa0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004fa4:	f7fb f980 	bl	80002a8 <__aeabi_dsub>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	4698      	mov	r8, r3
 8004fae:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8004fb2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4649      	mov	r1, r9
 8004fba:	f7fb fc57 	bl	800086c <__aeabi_ddiv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	4625      	mov	r5, r4
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f7fb f96d 	bl	80002ac <__adddf3>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004fda:	f7fb fc47 	bl	800086c <__aeabi_ddiv>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	4699      	mov	r9, r3
 8004fe6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004fea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fee:	f7fb fc3d 	bl	800086c <__aeabi_ddiv>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	f04f 0000 	mov.w	r0, #0
 8004ffa:	497d      	ldr	r1, [pc, #500]	; (80051f0 <scaraInitLSPB+0x710>)
 8004ffc:	f7fb f954 	bl	80002a8 <__aeabi_dsub>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fb06 	bl	8000618 <__aeabi_dmul>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4690      	mov	r8, r2
 8005012:	4699      	mov	r9, r3
 8005014:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005018:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800501c:	f7fb fc26 	bl	800086c <__aeabi_ddiv>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	4971      	ldr	r1, [pc, #452]	; (80051f0 <scaraInitLSPB+0x710>)
 800502a:	f7fb f93d 	bl	80002a8 <__aeabi_dsub>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4640      	mov	r0, r8
 8005034:	4649      	mov	r1, r9
 8005036:	f7fb faef 	bl	8000618 <__aeabi_dmul>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb f933 	bl	80002ac <__adddf3>
 8005046:	4603      	mov	r3, r0
 8005048:	460c      	mov	r4, r1
 800504a:	4625      	mov	r5, r4
 800504c:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800504e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	f7fb f929 	bl	80002ac <__adddf3>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005062:	f7fb fc03 	bl	800086c <__aeabi_ddiv>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4690      	mov	r8, r2
 800506c:	4699      	mov	r9, r3
 800506e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005072:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005076:	f7fb fbf9 	bl	800086c <__aeabi_ddiv>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	f04f 0000 	mov.w	r0, #0
 8005082:	495b      	ldr	r1, [pc, #364]	; (80051f0 <scaraInitLSPB+0x710>)
 8005084:	f7fb f910 	bl	80002a8 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb fac2 	bl	8000618 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4690      	mov	r8, r2
 800509a:	4699      	mov	r9, r3
 800509c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80050a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80050a4:	f7fb fbe2 	bl	800086c <__aeabi_ddiv>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	494f      	ldr	r1, [pc, #316]	; (80051f0 <scaraInitLSPB+0x710>)
 80050b2:	f7fb f8f9 	bl	80002a8 <__aeabi_dsub>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb faab 	bl	8000618 <__aeabi_dmul>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb f8ef 	bl	80002ac <__adddf3>
 80050ce:	4603      	mov	r3, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80050d6:	e01d      	b.n	8005114 <scaraInitLSPB+0x634>
		 }
	 } else {
		 v_lim	= 0;
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f04f 0400 	mov.w	r4, #0
 80050e0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 ta = tf/2;
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050f0:	f7fb fbbc 	bl	800086c <__aeabi_ddiv>
 80050f4:	4603      	mov	r3, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 td = tf/2;
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005104:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005108:	f7fb fbb0 	bl	800086c <__aeabi_ddiv>
 800510c:	4603      	mov	r3, r0
 800510e:	460c      	mov	r4, r1
 8005110:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8005114:	a334      	add	r3, pc, #208	; (adr r3, 80051e8 <scaraInitLSPB+0x708>)
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800511e:	f7fb fba5 	bl	800086c <__aeabi_ddiv>
 8005122:	4603      	mov	r3, r0
 8005124:	460c      	mov	r4, r1
 8005126:	4618      	mov	r0, r3
 8005128:	4621      	mov	r1, r4
 800512a:	f7fb fd6d 	bl	8000c08 <__aeabi_d2f>
 800512e:	4603      	mov	r3, r0
 8005130:	ee00 3a10 	vmov	s0, r3
 8005134:	f011 f820 	bl	8016178 <ceilf>
 8005138:	eef0 7a40 	vmov.f32	s15, s0
 800513c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005140:	ee17 3a90 	vmov	r3, s15
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800514c:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005154:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800515e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005168:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005172:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800517c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8005186:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005190:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800519a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80051a4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80051ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80051c4:	461a      	mov	r2, r3
 80051c6:	4623      	mov	r3, r4
 80051c8:	f7fb f86e 	bl	80002a8 <__aeabi_dsub>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	37a4      	adds	r7, #164	; 0xa4
 80051dc:	46bd      	mov	sp, r7
 80051de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e2:	bf00      	nop
 80051e4:	f3af 8000 	nop.w
 80051e8:	40000000 	.word	0x40000000
 80051ec:	3f847ae1 	.word	0x3f847ae1
 80051f0:	3ff00000 	.word	0x3ff00000
 80051f4:	9abcaf48 	.word	0x9abcaf48
 80051f8:	3e7ad7f2 	.word	0x3e7ad7f2
 80051fc:	00000000 	.word	0x00000000

08005200 <scaraInitScurve>:

SCARA_StatusTypeDef	scaraInitScurve	(Trajectory_Scurve_TypeDef *scurve,
									Trajectory_TargetTypeDef target,
									double total_s,
									ModeInitTypeDef modeinit) {
 8005200:	b5b0      	push	{r4, r5, r7, lr}
 8005202:	b0b6      	sub	sp, #216	; 0xd8
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	460b      	mov	r3, r1
 800520a:	ed87 0b00 	vstr	d0, [r7]
 800520e:	72fb      	strb	r3, [r7, #11]
 8005210:	4613      	mov	r3, r2
 8005212:	72bb      	strb	r3, [r7, #10]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8005214:	7afb      	ldrb	r3, [r7, #11]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d10a      	bne.n	8005230 <scaraInitScurve+0x30>
		 v_design = V_DESIGN_3D;
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	4c8a      	ldr	r4, [pc, #552]	; (8005448 <scaraInitScurve+0x248>)
 8005220:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_3D;
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	4c88      	ldr	r4, [pc, #544]	; (800544c <scaraInitScurve+0x24c>)
 800522a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800522e:	e047      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_ROLL == target) {
 8005230:	7afb      	ldrb	r3, [r7, #11]
 8005232:	2b05      	cmp	r3, #5
 8005234:	d10a      	bne.n	800524c <scaraInitScurve+0x4c>
		 v_design = V_DESIGN_ROLL;
 8005236:	a47e      	add	r4, pc, #504	; (adr r4, 8005430 <scaraInitScurve+0x230>)
 8005238:	e9d4 3400 	ldrd	r3, r4, [r4]
 800523c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_ROLL;
 8005240:	a47d      	add	r4, pc, #500	; (adr r4, 8005438 <scaraInitScurve+0x238>)
 8005242:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005246:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800524a:	e039      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J0 == target) {
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <scaraInitScurve+0x68>
		 v_design = V_DESIGN_J0;
 8005252:	a477      	add	r4, pc, #476	; (adr r4, 8005430 <scaraInitScurve+0x230>)
 8005254:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005258:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J0;
 800525c:	a476      	add	r4, pc, #472	; (adr r4, 8005438 <scaraInitScurve+0x238>)
 800525e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005262:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 8005266:	e02b      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J1 == target) {
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10a      	bne.n	8005284 <scaraInitScurve+0x84>
		 v_design = V_DESIGN_J1;
 800526e:	a470      	add	r4, pc, #448	; (adr r4, 8005430 <scaraInitScurve+0x230>)
 8005270:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005274:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J1;
 8005278:	a46f      	add	r4, pc, #444	; (adr r4, 8005438 <scaraInitScurve+0x238>)
 800527a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800527e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 8005282:	e01d      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J2 == target) {
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d10a      	bne.n	80052a0 <scaraInitScurve+0xa0>
		 v_design = V_DESIGN_J2;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	4c6e      	ldr	r4, [pc, #440]	; (8005448 <scaraInitScurve+0x248>)
 8005290:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J2;
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	4c6c      	ldr	r4, [pc, #432]	; (800544c <scaraInitScurve+0x24c>)
 800529a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800529e:	e00f      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J3 == target) {
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d10a      	bne.n	80052bc <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J3;
 80052a6:	a462      	add	r4, pc, #392	; (adr r4, 8005430 <scaraInitScurve+0x230>)
 80052a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052ac:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J3;
 80052b0:	a461      	add	r4, pc, #388	; (adr r4, 8005438 <scaraInitScurve+0x238>)
 80052b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052b6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80052ba:	e001      	b.n	80052c0 <scaraInitScurve+0xc0>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80052bc:	2306      	movs	r3, #6
 80052be:	e2d2      	b.n	8005866 <scaraInitScurve+0x666>
	 }

	 v0 = 0;
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	f04f 0400 	mov.w	r4, #0
 80052c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 v1 = 0;
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 q0 = 0;
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	 q1 = total_s;
 80052e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052e8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	 if ( total_s < 0) {
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f8:	f7fb fc00 	bl	8000afc <__aeabi_dcmplt>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d015      	beq.n	800532e <scaraInitScurve+0x12e>
		 dir = -1;
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	4c52      	ldr	r4, [pc, #328]	; (8005450 <scaraInitScurve+0x250>)
 8005308:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 q1 = -q1;
 800530c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800531c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		 total_s = -total_s;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	e004      	b.n	8005338 <scaraInitScurve+0x138>
	 } else {
		 dir = 1;
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	4c48      	ldr	r4, [pc, #288]	; (8005454 <scaraInitScurve+0x254>)
 8005334:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8005338:	7abb      	ldrb	r3, [r7, #10]
 800533a:	2b01      	cmp	r3, #1
 800533c:	f040 809a 	bne.w	8005474 <scaraInitScurve+0x274>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005346:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 // Avoid division by 0
		 if (tf > 0.001) {
 800534a:	a33d      	add	r3, pc, #244	; (adr r3, 8005440 <scaraInitScurve+0x240>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005354:	f7fb fbf0 	bl	8000b38 <__aeabi_dcmpgt>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d07e      	beq.n	800545c <scaraInitScurve+0x25c>
			 // Assume 4 phase
			 t_upper = tf / 4;
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <scaraInitScurve+0x258>)
 8005364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005368:	f7fb fa80 	bl	800086c <__aeabi_ddiv>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 v_upper = total_s / (2*t_upper);
 8005374:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	f7fa ff96 	bl	80002ac <__adddf3>
 8005380:	4603      	mov	r3, r0
 8005382:	460c      	mov	r4, r1
 8005384:	461a      	mov	r2, r3
 8005386:	4623      	mov	r3, r4
 8005388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800538c:	f7fb fa6e 	bl	800086c <__aeabi_ddiv>
 8005390:	4603      	mov	r3, r0
 8005392:	460c      	mov	r4, r1
 8005394:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8005398:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800539c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053a0:	f7fb fbca 	bl	8000b38 <__aeabi_dcmpgt>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d022      	beq.n	80053f0 <scaraInitScurve+0x1f0>
				 t_upper = tf/2 - total_s/(2*v_design);
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053b2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053b6:	f7fb fa59 	bl	800086c <__aeabi_ddiv>
 80053ba:	4603      	mov	r3, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	4625      	mov	r5, r4
 80053c0:	461c      	mov	r4, r3
 80053c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	f7fa ff6f 	bl	80002ac <__adddf3>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053d6:	f7fb fa49 	bl	800086c <__aeabi_ddiv>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fa ff61 	bl	80002a8 <__aeabi_dsub>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80053ee:	e003      	b.n	80053f8 <scaraInitScurve+0x1f8>
			 } else {
				 v_design = v_upper;
 80053f0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80053f4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 }
			 a_upper  = v_design / t_upper;
 80053f8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80053fc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005400:	f7fb fa34 	bl	800086c <__aeabi_ddiv>
 8005404:	4603      	mov	r3, r0
 8005406:	460c      	mov	r4, r1
 8005408:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			 if ( a_upper > a_design) {
 800540c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005410:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005414:	f7fb fb90 	bl	8000b38 <__aeabi_dcmpgt>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <scaraInitScurve+0x222>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 800541e:	230a      	movs	r3, #10
 8005420:	e221      	b.n	8005866 <scaraInitScurve+0x666>
			 } else {
				 a_design = a_upper;
 8005422:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005426:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800542a:	e023      	b.n	8005474 <scaraInitScurve+0x274>
 800542c:	f3af 8000 	nop.w
 8005430:	80000000 	.word	0x80000000
 8005434:	3fd41b2f 	.word	0x3fd41b2f
 8005438:	a0000000 	.word	0xa0000000
 800543c:	3fa015bf 	.word	0x3fa015bf
 8005440:	d2f1a9fc 	.word	0xd2f1a9fc
 8005444:	3f50624d 	.word	0x3f50624d
 8005448:	40340000 	.word	0x40340000
 800544c:	40140000 	.word	0x40140000
 8005450:	bff00000 	.word	0xbff00000
 8005454:	3ff00000 	.word	0x3ff00000
 8005458:	40100000 	.word	0x40100000
			 }
		 } else {
			 v_design = 0;
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 a_design = 0;
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	f04f 0400 	mov.w	r4, #0
 8005470:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8005474:	a353      	add	r3, pc, #332	; (adr r3, 80055c4 <scaraInitScurve+0x3c4>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800547e:	f7fb fb5b 	bl	8000b38 <__aeabi_dcmpgt>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a5 	beq.w	80055d4 <scaraInitScurve+0x3d4>
 800548a:	a34e      	add	r3, pc, #312	; (adr r3, 80055c4 <scaraInitScurve+0x3c4>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005494:	f7fb fb50 	bl	8000b38 <__aeabi_dcmpgt>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 809a 	beq.w	80055d4 <scaraInitScurve+0x3d4>
		 no_phases = 5;
 80054a0:	2305      	movs	r3, #5
 80054a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = v_design/a_design;
 80054a6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80054aa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80054ae:	f7fb f9dd 	bl	800086c <__aeabi_ddiv>
 80054b2:	4603      	mov	r3, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 tc = total_s/v_design - 2*tm;
 80054ba:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80054be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c2:	f7fb f9d3 	bl	800086c <__aeabi_ddiv>
 80054c6:	4603      	mov	r3, r0
 80054c8:	460c      	mov	r4, r1
 80054ca:	4625      	mov	r5, r4
 80054cc:	461c      	mov	r4, r3
 80054ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	f7fa fee9 	bl	80002ac <__adddf3>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fa fee1 	bl	80002a8 <__aeabi_dsub>
 80054e6:	4603      	mov	r3, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80054fa:	f7fb faff 	bl	8000afc <__aeabi_dcmplt>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d022      	beq.n	800554a <scaraInitScurve+0x34a>
			 tc = 0;
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
			 no_phases = 4;
 8005510:	2304      	movs	r3, #4
 8005512:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			 tm = sqrt(total_s/(2*a_design));
 8005516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	f7fa fec5 	bl	80002ac <__adddf3>
 8005522:	4603      	mov	r3, r0
 8005524:	460c      	mov	r4, r1
 8005526:	461a      	mov	r2, r3
 8005528:	4623      	mov	r3, r4
 800552a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800552e:	f7fb f99d 	bl	800086c <__aeabi_ddiv>
 8005532:	4603      	mov	r3, r0
 8005534:	460c      	mov	r4, r1
 8005536:	ec44 3b17 	vmov	d7, r3, r4
 800553a:	eeb0 0a47 	vmov.f32	s0, s14
 800553e:	eef0 0a67 	vmov.f32	s1, s15
 8005542:	f010 fe5b 	bl	80161fc <sqrt>
 8005546:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
		 }
		 if (tm < 0.001) {
 800554a:	a320      	add	r3, pc, #128	; (adr r3, 80055cc <scaraInitScurve+0x3cc>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005554:	f7fb fad2 	bl	8000afc <__aeabi_dcmplt>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d006      	beq.n	800556c <scaraInitScurve+0x36c>
			 j_max = 0;
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 0400 	mov.w	r4, #0
 8005566:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 800556a:	e009      	b.n	8005580 <scaraInitScurve+0x380>
		 } else {
			 j_max = a_design/tm;
 800556c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005570:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005574:	f7fb f97a 	bl	800086c <__aeabi_ddiv>
 8005578:	4603      	mov	r3, r0
 800557a:	460c      	mov	r4, r1
 800557c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 }
		 v_lim = a_design*tm;
 8005580:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005584:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005588:	f7fb f846 	bl	8000618 <__aeabi_dmul>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tf    = 4*tm + tc;
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <scaraInitScurve+0x3c0>)
 800559a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800559e:	f7fb f83b 	bl	8000618 <__aeabi_dmul>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	461a      	mov	r2, r3
 80055a8:	4623      	mov	r3, r4
 80055aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80055ae:	f7fa fe7d 	bl	80002ac <__adddf3>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 80055ba:	e02b      	b.n	8005614 <scaraInitScurve+0x414>
 80055bc:	f3af 8000 	nop.w
 80055c0:	40100000 	.word	0x40100000
 80055c4:	9abcaf48 	.word	0x9abcaf48
 80055c8:	3e7ad7f2 	.word	0x3e7ad7f2
 80055cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80055d0:	3f50624d 	.word	0x3f50624d
	 } else {
		 j_max = 0;
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 tc = 0;
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	f04f 0400 	mov.w	r4, #0
 80055e8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 no_phases = 4;
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = tf / 4;
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	4ba0      	ldr	r3, [pc, #640]	; (8005878 <scaraInitScurve+0x678>)
 80055f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055fc:	f7fb f936 	bl	800086c <__aeabi_ddiv>
 8005600:	4603      	mov	r3, r0
 8005602:	460c      	mov	r4, r1
 8005604:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 v_lim = 0;
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8005614:	a396      	add	r3, pc, #600	; (adr r3, 8005870 <scaraInitScurve+0x670>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800561e:	f7fb f925 	bl	800086c <__aeabi_ddiv>
 8005622:	4603      	mov	r3, r0
 8005624:	460c      	mov	r4, r1
 8005626:	ec44 3b17 	vmov	d7, r3, r4
 800562a:	eeb0 0a47 	vmov.f32	s0, s14
 800562e:	eef0 0a67 	vmov.f32	s1, s15
 8005632:	f010 fc95 	bl	8015f60 <ceil>
 8005636:	ec54 3b10 	vmov	r3, r4, d0
 800563a:	4618      	mov	r0, r3
 800563c:	4621      	mov	r1, r4
 800563e:	f7fb fac3 	bl	8000bc8 <__aeabi_d2uiz>
 8005642:	4603      	mov	r3, r0
 8005644:	657b      	str	r3, [r7, #84]	; 0x54
	 v_1 = 0.5*j_max*tm*tm;
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	4b8c      	ldr	r3, [pc, #560]	; (800587c <scaraInitScurve+0x67c>)
 800564c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005650:	f7fa ffe2 	bl	8000618 <__aeabi_dmul>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	4618      	mov	r0, r3
 800565a:	4621      	mov	r1, r4
 800565c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005660:	f7fa ffda 	bl	8000618 <__aeabi_dmul>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005670:	f7fa ffd2 	bl	8000618 <__aeabi_dmul>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_1 = j_max*tm*tm*tm/6;
 800567c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005680:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005684:	f7fa ffc8 	bl	8000618 <__aeabi_dmul>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4618      	mov	r0, r3
 800568e:	4621      	mov	r1, r4
 8005690:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005694:	f7fa ffc0 	bl	8000618 <__aeabi_dmul>
 8005698:	4603      	mov	r3, r0
 800569a:	460c      	mov	r4, r1
 800569c:	4618      	mov	r0, r3
 800569e:	4621      	mov	r1, r4
 80056a0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80056a4:	f7fa ffb8 	bl	8000618 <__aeabi_dmul>
 80056a8:	4603      	mov	r3, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4618      	mov	r0, r3
 80056ae:	4621      	mov	r1, r4
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	4b72      	ldr	r3, [pc, #456]	; (8005880 <scaraInitScurve+0x680>)
 80056b6:	f7fb f8d9 	bl	800086c <__aeabi_ddiv>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_2 = j_max*tm*tm;
 80056c2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80056c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056ca:	f7fa ffa5 	bl	8000618 <__aeabi_dmul>
 80056ce:	4603      	mov	r3, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	461a      	mov	r2, r3
 80056d4:	4623      	mov	r3, r4
 80056d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80056da:	f7fa ff9d 	bl	8000618 <__aeabi_dmul>
 80056de:	4603      	mov	r3, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_2 = v_2*tm;
 80056e6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80056ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80056ee:	f7fa ff93 	bl	8000618 <__aeabi_dmul>
 80056f2:	4603      	mov	r3, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_3 = v_2;
 80056fa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80056fe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_3 = s_2 + v_2*tc;
 8005702:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005706:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800570a:	f7fa ff85 	bl	8000618 <__aeabi_dmul>
 800570e:	4603      	mov	r3, r0
 8005710:	460c      	mov	r4, r1
 8005712:	461a      	mov	r2, r3
 8005714:	4623      	mov	r3, r4
 8005716:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800571a:	f7fa fdc7 	bl	80002ac <__adddf3>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	e9c7 3408 	strd	r3, r4, [r7, #32]
	 v_4 = v_1;
 8005726:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800572a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	 s_4 = s_3 + s_2 - s_1;
 800572e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005732:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005736:	f7fa fdb9 	bl	80002ac <__adddf3>
 800573a:	4603      	mov	r3, r0
 800573c:	460c      	mov	r4, r1
 800573e:	4618      	mov	r0, r3
 8005740:	4621      	mov	r1, r4
 8005742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005746:	f7fa fdaf 	bl	80002a8 <__aeabi_dsub>
 800574a:	4603      	mov	r3, r0
 800574c:	460c      	mov	r4, r1
 800574e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	 scurve->Tc = tc;
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005758:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005762:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800576c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005776:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8005780:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800578a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005794:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800579e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80057a8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80057b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80057bc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057ce:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80057d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80057da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80057de:	f7fb f9cb 	bl	8000b78 <__aeabi_d2iz>
 80057e2:	4603      	mov	r3, r0
 80057e4:	b25a      	sxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800581a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005824:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800582e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005838:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005842:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800584c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005856:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005860:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	37d8      	adds	r7, #216	; 0xd8
 800586a:	46bd      	mov	sp, r7
 800586c:	bdb0      	pop	{r4, r5, r7, pc}
 800586e:	bf00      	nop
 8005870:	40000000 	.word	0x40000000
 8005874:	3f847ae1 	.word	0x3f847ae1
 8005878:	40100000 	.word	0x40100000
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	40180000 	.word	0x40180000

08005884 <scaraFlowDuty>:

SCARA_StatusTypeDef	scaraFlowDuty		(double time) {
 8005884:	b5b0      	push	{r4, r5, r7, lr}
 8005886:	b0cc      	sub	sp, #304	; 0x130
 8005888:	af18      	add	r7, sp, #96	; 0x60
 800588a:	ed87 0b00 	vstr	d0, [r7]
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800588e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005892:	e9c7 3408 	strd	r3, r4, [r7, #32]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8005896:	4ba1      	ldr	r3, [pc, #644]	; (8005b1c <scaraFlowDuty+0x298>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 80e2 	bne.w	8005a64 <scaraFlowDuty+0x1e0>
		double s, angle, x, y, z;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80058a0:	4b9e      	ldr	r3, [pc, #632]	; (8005b1c <scaraFlowDuty+0x298>)
 80058a2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11f      	bne.n	80058ea <scaraFlowDuty+0x66>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80058aa:	ed97 0b00 	vldr	d0, [r7]
 80058ae:	489c      	ldr	r0, [pc, #624]	; (8005b20 <scaraFlowDuty+0x29c>)
 80058b0:	f000 fb7e 	bl	8005fb0 <scaraFlowLSPB>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80058ba:	ed97 0b00 	vldr	d0, [r7]
 80058be:	4899      	ldr	r0, [pc, #612]	; (8005b24 <scaraFlowDuty+0x2a0>)
 80058c0:	f000 fb76 	bl	8005fb0 <scaraFlowLSPB>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80058ca:	4b94      	ldr	r3, [pc, #592]	; (8005b1c <scaraFlowDuty+0x298>)
 80058cc:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80058d0:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80058d4:	4b91      	ldr	r3, [pc, #580]	; (8005b1c <scaraFlowDuty+0x298>)
 80058d6:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80058da:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 80058de:	4b8f      	ldr	r3, [pc, #572]	; (8005b1c <scaraFlowDuty+0x298>)
 80058e0:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80058e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80058e8:	e026      	b.n	8005938 <scaraFlowDuty+0xb4>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80058ea:	4b8c      	ldr	r3, [pc, #560]	; (8005b1c <scaraFlowDuty+0x298>)
 80058ec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d11f      	bne.n	8005934 <scaraFlowDuty+0xb0>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80058f4:	ed97 0b00 	vldr	d0, [r7]
 80058f8:	488b      	ldr	r0, [pc, #556]	; (8005b28 <scaraFlowDuty+0x2a4>)
 80058fa:	f000 fd05 	bl	8006308 <scaraFLowScurve>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8005904:	ed97 0b00 	vldr	d0, [r7]
 8005908:	4888      	ldr	r0, [pc, #544]	; (8005b2c <scaraFlowDuty+0x2a8>)
 800590a:	f000 fcfd 	bl	8006308 <scaraFLowScurve>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8005914:	4b81      	ldr	r3, [pc, #516]	; (8005b1c <scaraFlowDuty+0x298>)
 8005916:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 800591a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 800591e:	4b7f      	ldr	r3, [pc, #508]	; (8005b1c <scaraFlowDuty+0x298>)
 8005920:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8005924:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8005928:	4b7c      	ldr	r3, [pc, #496]	; (8005b1c <scaraFlowDuty+0x298>)
 800592a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800592e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005932:	e001      	b.n	8005938 <scaraFlowDuty+0xb4>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005934:	2305      	movs	r3, #5
 8005936:	e218      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}

		if ( SCARA_STATUS_OK != status1) {
 8005938:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <scaraFlowDuty+0xc2>
			return status1;
 8005940:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005944:	e211      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005946:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <scaraFlowDuty+0xd0>
			return status2;
 800594e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005952:	e20a      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8005954:	4b71      	ldr	r3, [pc, #452]	; (8005b1c <scaraFlowDuty+0x298>)
 8005956:	7a1b      	ldrb	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d117      	bne.n	800598c <scaraFlowDuty+0x108>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 800595c:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005960:	4873      	ldr	r0, [pc, #460]	; (8005b30 <scaraFlowDuty+0x2ac>)
 8005962:	f000 fa15 	bl	8005d90 <scaraFlowLine>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.line.x_current;
 800596c:	4b6b      	ldr	r3, [pc, #428]	; (8005b1c <scaraFlowDuty+0x298>)
 800596e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005972:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.line.y_current;
 8005976:	4b69      	ldr	r3, [pc, #420]	; (8005b1c <scaraFlowDuty+0x298>)
 8005978:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800597c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.line.z_current;
 8005980:	4b66      	ldr	r3, [pc, #408]	; (8005b1c <scaraFlowDuty+0x298>)
 8005982:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005986:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800598a:	e01d      	b.n	80059c8 <scaraFlowDuty+0x144>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800598c:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <scaraFlowDuty+0x298>)
 800598e:	7a1b      	ldrb	r3, [r3, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d117      	bne.n	80059c4 <scaraFlowDuty+0x140>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8005994:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005998:	4866      	ldr	r0, [pc, #408]	; (8005b34 <scaraFlowDuty+0x2b0>)
 800599a:	f000 fa81 	bl	8005ea0 <scaraFlowCircle>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.circle.x_current;
 80059a4:	4b5d      	ldr	r3, [pc, #372]	; (8005b1c <scaraFlowDuty+0x298>)
 80059a6:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80059aa:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.circle.y_current;
 80059ae:	4b5b      	ldr	r3, [pc, #364]	; (8005b1c <scaraFlowDuty+0x298>)
 80059b0:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80059b4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.circle.z_current;
 80059b8:	4b58      	ldr	r3, [pc, #352]	; (8005b1c <scaraFlowDuty+0x298>)
 80059ba:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80059be:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80059c2:	e001      	b.n	80059c8 <scaraFlowDuty+0x144>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e1d0      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}

		positionCompute.x 		= x;
 80059c8:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80059cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.y		= y;
 80059d0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80059d4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		positionCompute.z 		= z;
 80059d8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80059dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <scaraFlowDuty+0x298>)
 80059e2:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 80059e6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fa fdaa 	bl	8000544 <__aeabi_i2d>
 80059f0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80059f4:	f7fa fe10 	bl	8000618 <__aeabi_dmul>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	f7fa fc54 	bl	80002ac <__adddf3>
 8005a04:	4603      	mov	r3, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		positionCompute.q		= s;
 8005a0c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005a10:	e9c7 3402 	strd	r3, r4, [r7, #8]
		positionCompute.total_time = myDUTY.time_total;
 8005a14:	4b41      	ldr	r3, [pc, #260]	; (8005b1c <scaraFlowDuty+0x298>)
 8005a16:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a1e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005a22:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a26:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if ( FALSE == kinematicInverse(&positionCompute, positionCurrent)) {
 8005a2a:	4c43      	ldr	r4, [pc, #268]	; (8005b38 <scaraFlowDuty+0x2b4>)
 8005a2c:	f107 0508 	add.w	r5, r7, #8
 8005a30:	4668      	mov	r0, sp
 8005a32:	f104 0308 	add.w	r3, r4, #8
 8005a36:	2260      	movs	r2, #96	; 0x60
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f00c f8e1 	bl	8011c00 <memcpy>
 8005a3e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fd f8c8 	bl	8002bd8 <kinematicInverse>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <scaraFlowDuty+0x1ce>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005a4e:	2307      	movs	r3, #7
 8005a50:	e18b      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8005a52:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <scaraFlowDuty+0x2b8>)
 8005a54:	4618      	mov	r0, r3
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	2268      	movs	r2, #104	; 0x68
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f00c f8cf 	bl	8011c00 <memcpy>
 8005a62:	e181      	b.n	8005d68 <scaraFlowDuty+0x4e4>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8005a64:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <scaraFlowDuty+0x298>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f040 817b 	bne.w	8005d64 <scaraFlowDuty+0x4e0>
		double s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <scaraFlowDuty+0x298>)
 8005a70:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d16b      	bne.n	8005b50 <scaraFlowDuty+0x2cc>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8005a78:	ed97 0b00 	vldr	d0, [r7]
 8005a7c:	4830      	ldr	r0, [pc, #192]	; (8005b40 <scaraFlowDuty+0x2bc>)
 8005a7e:	f000 fa97 	bl	8005fb0 <scaraFlowLSPB>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8005a88:	ed97 0b00 	vldr	d0, [r7]
 8005a8c:	482d      	ldr	r0, [pc, #180]	; (8005b44 <scaraFlowDuty+0x2c0>)
 8005a8e:	f000 fa8f 	bl	8005fb0 <scaraFlowLSPB>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8005a98:	ed97 0b00 	vldr	d0, [r7]
 8005a9c:	482a      	ldr	r0, [pc, #168]	; (8005b48 <scaraFlowDuty+0x2c4>)
 8005a9e:	f000 fa87 	bl	8005fb0 <scaraFlowLSPB>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8005aa8:	ed97 0b00 	vldr	d0, [r7]
 8005aac:	4827      	ldr	r0, [pc, #156]	; (8005b4c <scaraFlowDuty+0x2c8>)
 8005aae:	f000 fa7f 	bl	8005fb0 <scaraFlowLSPB>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8005ab8:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <scaraFlowDuty+0x298>)
 8005aba:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8005abe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8005ac2:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <scaraFlowDuty+0x298>)
 8005ac4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8005ac8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <scaraFlowDuty+0x298>)
 8005ace:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8005ad2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <scaraFlowDuty+0x298>)
 8005ad8:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8005adc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <scaraFlowDuty+0x298>)
 8005ae2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8005ae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005aea:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <scaraFlowDuty+0x298>)
 8005af0:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8005af4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005af8:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <scaraFlowDuty+0x298>)
 8005afe:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8005b02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b06:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <scaraFlowDuty+0x298>)
 8005b0c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8005b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b14:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005b18:	e072      	b.n	8005c00 <scaraFlowDuty+0x37c>
 8005b1a:	bf00      	nop
 8005b1c:	200052e8 	.word	0x200052e8
 8005b20:	20005400 	.word	0x20005400
 8005b24:	20005558 	.word	0x20005558
 8005b28:	20005480 	.word	0x20005480
 8005b2c:	200055d8 	.word	0x200055d8
 8005b30:	200052f8 	.word	0x200052f8
 8005b34:	20005368 	.word	0x20005368
 8005b38:	20005ca0 	.word	0x20005ca0
 8005b3c:	20005d08 	.word	0x20005d08
 8005b40:	200056b8 	.word	0x200056b8
 8005b44:	20005810 	.word	0x20005810
 8005b48:	20005968 	.word	0x20005968
 8005b4c:	20005ac0 	.word	0x20005ac0

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8005b50:	4b88      	ldr	r3, [pc, #544]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005b52:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d150      	bne.n	8005bfc <scaraFlowDuty+0x378>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8005b5a:	ed97 0b00 	vldr	d0, [r7]
 8005b5e:	4886      	ldr	r0, [pc, #536]	; (8005d78 <scaraFlowDuty+0x4f4>)
 8005b60:	f000 fbd2 	bl	8006308 <scaraFLowScurve>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8005b6a:	ed97 0b00 	vldr	d0, [r7]
 8005b6e:	4883      	ldr	r0, [pc, #524]	; (8005d7c <scaraFlowDuty+0x4f8>)
 8005b70:	f000 fbca 	bl	8006308 <scaraFLowScurve>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8005b7a:	ed97 0b00 	vldr	d0, [r7]
 8005b7e:	4880      	ldr	r0, [pc, #512]	; (8005d80 <scaraFlowDuty+0x4fc>)
 8005b80:	f000 fbc2 	bl	8006308 <scaraFLowScurve>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8005b8a:	ed97 0b00 	vldr	d0, [r7]
 8005b8e:	487d      	ldr	r0, [pc, #500]	; (8005d84 <scaraFlowDuty+0x500>)
 8005b90:	f000 fbba 	bl	8006308 <scaraFLowScurve>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8005b9a:	4b76      	ldr	r3, [pc, #472]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005b9c:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8005ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8005ba4:	4b73      	ldr	r3, [pc, #460]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005ba6:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8005baa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8005bae:	4b71      	ldr	r3, [pc, #452]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005bb0:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8005bb4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8005bb8:	4b6e      	ldr	r3, [pc, #440]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005bba:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8005bbe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8005bc2:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005bc4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005bc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bcc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8005bd0:	4b68      	ldr	r3, [pc, #416]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005bd2:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8005bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bda:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8005bde:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005be0:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8005be4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005be8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8005bec:	4b61      	ldr	r3, [pc, #388]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005bee:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8005bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bf6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005bfa:	e001      	b.n	8005c00 <scaraFlowDuty+0x37c>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005bfc:	2305      	movs	r3, #5
 8005bfe:	e0b4      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8005c00:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <scaraFlowDuty+0x38a>
			return status1;
 8005c08:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c0c:	e0ad      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005c0e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <scaraFlowDuty+0x398>
			return status2;
 8005c16:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005c1a:	e0a6      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status3) {
 8005c1c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <scaraFlowDuty+0x3a6>
			return status3;
 8005c24:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005c28:	e09f      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8005c2a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <scaraFlowDuty+0x3b4>
			return status4;
 8005c32:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005c36:	e098      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8005c38:	4b4e      	ldr	r3, [pc, #312]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005c3a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8005c3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c42:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fc7c 	bl	8000544 <__aeabi_i2d>
 8005c4c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005c50:	f7fa fce2 	bl	8000618 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa fb26 	bl	80002ac <__adddf3>
 8005c60:	4603      	mov	r3, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005c6a:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005c6e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c72:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fc64 	bl	8000544 <__aeabi_i2d>
 8005c7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005c80:	f7fa fcca 	bl	8000618 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f7fa fb0e 	bl	80002ac <__adddf3>
 8005c90:	4603      	mov	r3, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005c9a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005c9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ca2:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fc4c 	bl	8000544 <__aeabi_i2d>
 8005cac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005cb0:	f7fa fcb2 	bl	8000618 <__aeabi_dmul>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa faf6 	bl	80002ac <__adddf3>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005cca:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005cce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005cd2:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc34 	bl	8000544 <__aeabi_i2d>
 8005cdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005ce0:	f7fa fc9a 	bl	8000618 <__aeabi_dmul>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4629      	mov	r1, r5
 8005cec:	f7fa fade 	bl	80002ac <__adddf3>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		positionCompute.total_time = myDUTY.time_total;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <scaraFlowDuty+0x4f0>)
 8005cfa:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d02:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005d06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d0a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8005d0e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005d12:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8005d16:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8005d1a:	ed97 4b1a 	vldr	d4, [r7, #104]	; 0x68
 8005d1e:	eeb0 3a44 	vmov.f32	s6, s8
 8005d22:	eef0 3a64 	vmov.f32	s7, s9
 8005d26:	eeb0 2a45 	vmov.f32	s4, s10
 8005d2a:	eef0 2a65 	vmov.f32	s5, s11
 8005d2e:	eeb0 1a46 	vmov.f32	s2, s12
 8005d32:	eef0 1a66 	vmov.f32	s3, s13
 8005d36:	eeb0 0a47 	vmov.f32	s0, s14
 8005d3a:	eef0 0a67 	vmov.f32	s1, s15
 8005d3e:	f001 f9c7 	bl	80070d0 <scaraCheckWorkSpace4>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <scaraFlowDuty+0x4c8>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d48:	2307      	movs	r3, #7
 8005d4a:	e00e      	b.n	8005d6a <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <scaraFlowDuty+0x504>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	2268      	movs	r2, #104	; 0x68
 8005d56:	4619      	mov	r1, r3
 8005d58:	f00b ff52 	bl	8011c00 <memcpy>
		}
		kinematicForward(&positionNext);
 8005d5c:	480a      	ldr	r0, [pc, #40]	; (8005d88 <scaraFlowDuty+0x504>)
 8005d5e:	f7fc fe03 	bl	8002968 <kinematicForward>
 8005d62:	e001      	b.n	8005d68 <scaraFlowDuty+0x4e4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e000      	b.n	8005d6a <scaraFlowDuty+0x4e6>
	}

	return SCARA_STATUS_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	37d0      	adds	r7, #208	; 0xd0
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bdb0      	pop	{r4, r5, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200052e8 	.word	0x200052e8
 8005d78:	20005738 	.word	0x20005738
 8005d7c:	20005890 	.word	0x20005890
 8005d80:	200059e8 	.word	0x200059e8
 8005d84:	20005b40 	.word	0x20005b40
 8005d88:	20005d08 	.word	0x20005d08
 8005d8c:	00000000 	.word	0x00000000

08005d90 <scaraFlowLine>:

SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8005d90:	b5b0      	push	{r4, r5, r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005da2:	a33d      	add	r3, pc, #244	; (adr r3, 8005e98 <scaraFlowLine+0x108>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	f7fa fec6 	bl	8000b38 <__aeabi_dcmpgt>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d05a      	beq.n	8005e68 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc2:	f7fa fc29 	bl	8000618 <__aeabi_dmul>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005dd4:	f7fa fd4a 	bl	800086c <__aeabi_ddiv>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fa64 	bl	80002ac <__adddf3>
 8005de4:	4603      	mov	r3, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfe:	f7fa fc0b 	bl	8000618 <__aeabi_dmul>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005e10:	f7fa fd2c 	bl	800086c <__aeabi_ddiv>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f7fa fa46 	bl	80002ac <__adddf3>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e3a:	f7fa fbed 	bl	8000618 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005e4c:	f7fa fd0e 	bl	800086c <__aeabi_ddiv>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fa28 	bl	80002ac <__adddf3>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8005e66:	e011      	b.n	8005e8c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bdb0      	pop	{r4, r5, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	47ae147b 	.word	0x47ae147b
 8005e9c:	3f847ae1 	.word	0x3f847ae1

08005ea0 <scaraFlowCircle>:

SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ebc:	f7fa fcd6 	bl	800086c <__aeabi_ddiv>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f993 3000 	ldrsb.w	r3, [r3]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fa fb2f 	bl	8000544 <__aeabi_i2d>
 8005ee6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eea:	f7fa fb95 	bl	8000618 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	f7fa f9d9 	bl	80002ac <__adddf3>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	ec43 2b17 	vmov	d7, r2, r3
 8005f02:	eeb0 0a47 	vmov.f32	s0, s14
 8005f06:	eef0 0a67 	vmov.f32	s1, s15
 8005f0a:	f010 f8a9 	bl	8016060 <cos>
 8005f0e:	ec53 2b10 	vmov	r2, r3, d0
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fb7f 	bl	8000618 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa f9c3 	bl	80002ac <__adddf3>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f993 3000 	ldrsb.w	r3, [r3]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fafb 	bl	8000544 <__aeabi_i2d>
 8005f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f52:	f7fa fb61 	bl	8000618 <__aeabi_dmul>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	f7fa f9a5 	bl	80002ac <__adddf3>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	ec43 2b17 	vmov	d7, r2, r3
 8005f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8005f6e:	eef0 0a67 	vmov.f32	s1, s15
 8005f72:	f010 f8b9 	bl	80160e8 <sin>
 8005f76:	ec53 2b10 	vmov	r2, r3, d0
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fb4b 	bl	8000618 <__aeabi_dmul>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa f98f 	bl	80002ac <__adddf3>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fb0 <scaraFlowLSPB>:

SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8005fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	b08b      	sub	sp, #44	; 0x2c
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005fc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005fce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe8:	f7fa fd9c 	bl	8000b24 <__aeabi_dcmpge>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d05b      	beq.n	80060aa <scaraFlowLSPB+0xfa>
 8005ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ffa:	f7fa fd89 	bl	8000b10 <__aeabi_dcmple>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d052      	beq.n	80060aa <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800601c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006020:	f7fa fafa 	bl	8000618 <__aeabi_dmul>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f93e 	bl	80002ac <__adddf3>
 8006030:	4603      	mov	r3, r0
 8006032:	460c      	mov	r4, r1
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604a:	f7fa fae5 	bl	8000618 <__aeabi_dmul>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	f7fa f929 	bl	80002ac <__adddf3>
 800605a:	4603      	mov	r3, r0
 800605c:	460c      	mov	r4, r1
 800605e:	4625      	mov	r5, r4
 8006060:	461c      	mov	r4, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	4ba5      	ldr	r3, [pc, #660]	; (8006304 <scaraFlowLSPB+0x354>)
 800606e:	f7fa fad3 	bl	8000618 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4610      	mov	r0, r2
 8006078:	4619      	mov	r1, r3
 800607a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607e:	f7fa facb 	bl	8000618 <__aeabi_dmul>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608e:	f7fa fac3 	bl	8000618 <__aeabi_dmul>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa f907 	bl	80002ac <__adddf3>
 800609e:	4603      	mov	r3, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80060a8:	e125      	b.n	80062f6 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 80060aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060b2:	f7fa fd2d 	bl	8000b10 <__aeabi_dcmple>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05e      	beq.n	800617a <scaraFlowLSPB+0x1ca>
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060c4:	f7fa f8f0 	bl	80002a8 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060d0:	f7fa fd1e 	bl	8000b10 <__aeabi_dcmple>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04f      	beq.n	800617a <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	f04f 0400 	mov.w	r4, #0
 80060e4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006100:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006104:	f7fa fa88 	bl	8000618 <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4610      	mov	r0, r2
 800610e:	4619      	mov	r1, r3
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006118:	f7fa fba8 	bl	800086c <__aeabi_ddiv>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f8c2 	bl	80002ac <__adddf3>
 8006128:	4603      	mov	r3, r0
 800612a:	460c      	mov	r4, r1
 800612c:	4698      	mov	r8, r3
 800612e:	46a1      	mov	r9, r4
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800613e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006142:	f7fa fb93 	bl	800086c <__aeabi_ddiv>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614e:	f7fa f8ab 	bl	80002a8 <__aeabi_dsub>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4620      	mov	r0, r4
 8006158:	4629      	mov	r1, r5
 800615a:	f7fa fa5d 	bl	8000618 <__aeabi_dmul>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	461a      	mov	r2, r3
 8006164:	4623      	mov	r3, r4
 8006166:	4640      	mov	r0, r8
 8006168:	4649      	mov	r1, r9
 800616a:	f7fa f89f 	bl	80002ac <__adddf3>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8006178:	e0bd      	b.n	80062f6 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800617a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800617e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006182:	f7fa f891 	bl	80002a8 <__aeabi_dsub>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800618e:	f7fa fcc9 	bl	8000b24 <__aeabi_dcmpge>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 809a 	beq.w	80062ce <scaraFlowLSPB+0x31e>
 800619a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a2:	f7fa fcb5 	bl	8000b10 <__aeabi_dcmple>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8090 	beq.w	80062ce <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80061b4:	4614      	mov	r4, r2
 80061b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80061cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80061d4:	f7fa f868 	bl	80002a8 <__aeabi_dsub>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4640      	mov	r0, r8
 80061de:	4649      	mov	r1, r9
 80061e0:	f7fa fa1a 	bl	8000618 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4620      	mov	r0, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	f7fa f85e 	bl	80002ac <__adddf3>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8006206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800620e:	f7fa f84b 	bl	80002a8 <__aeabi_dsub>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa f9fd 	bl	8000618 <__aeabi_dmul>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	f7fa f83f 	bl	80002a8 <__aeabi_dsub>
 800622a:	4603      	mov	r3, r0
 800622c:	460c      	mov	r4, r1
 800622e:	461d      	mov	r5, r3
 8006230:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800623e:	461a      	mov	r2, r3
 8006240:	4623      	mov	r3, r4
 8006242:	f7fa f831 	bl	80002a8 <__aeabi_dsub>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	4698      	mov	r8, r3
 800624c:	46a1      	mov	r9, r4
 800624e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006252:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006256:	f7fa f827 	bl	80002a8 <__aeabi_dsub>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	461a      	mov	r2, r3
 8006260:	4623      	mov	r3, r4
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa f9d7 	bl	8000618 <__aeabi_dmul>
 800626a:	4603      	mov	r3, r0
 800626c:	460c      	mov	r4, r1
 800626e:	4698      	mov	r8, r3
 8006270:	46a1      	mov	r9, r4
 8006272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006276:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800627a:	f7fa f815 	bl	80002a8 <__aeabi_dsub>
 800627e:	4603      	mov	r3, r0
 8006280:	460c      	mov	r4, r1
 8006282:	461a      	mov	r2, r3
 8006284:	4623      	mov	r3, r4
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7fa f9c5 	bl	8000618 <__aeabi_dmul>
 800628e:	4603      	mov	r3, r0
 8006290:	460c      	mov	r4, r1
 8006292:	4698      	mov	r8, r3
 8006294:	46a1      	mov	r9, r4
 8006296:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	f7fa f805 	bl	80002ac <__adddf3>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	461a      	mov	r2, r3
 80062a8:	4623      	mov	r3, r4
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	f7fa fadd 	bl	800086c <__aeabi_ddiv>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	461a      	mov	r2, r3
 80062b8:	4623      	mov	r3, r4
 80062ba:	4628      	mov	r0, r5
 80062bc:	4631      	mov	r1, r6
 80062be:	f7f9 fff3 	bl	80002a8 <__aeabi_dsub>
 80062c2:	4603      	mov	r3, r0
 80062c4:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80062cc:	e013      	b.n	80062f6 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	f04f 0400 	mov.w	r4, #0
 80062e6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	372c      	adds	r7, #44	; 0x2c
 80062fc:	46bd      	mov	sp, r7
 80062fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006302:	bf00      	nop
 8006304:	3fe00000 	.word	0x3fe00000

08006308 <scaraFLowScurve>:

SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b092      	sub	sp, #72	; 0x48
 800630c:	af00      	add	r7, sp, #0
 800630e:	6278      	str	r0, [r7, #36]	; 0x24
 8006310:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800631a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006324:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800632e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006338:	2b04      	cmp	r3, #4
 800633a:	f040 8321 	bne.w	8006980 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800634a:	f7fa fbeb 	bl	8000b24 <__aeabi_dcmpge>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d059      	beq.n	8006408 <scaraFLowScurve+0x100>
 8006354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006358:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800635c:	f7fa fbce 	bl	8000afc <__aeabi_dcmplt>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d050      	beq.n	8006408 <scaraFLowScurve+0x100>
			 t = time;
 8006366:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800636a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800636e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006372:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006376:	f7fa f94f 	bl	8000618 <__aeabi_dmul>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	4b93      	ldr	r3, [pc, #588]	; (80065d8 <scaraFLowScurve+0x2d0>)
 800638a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800638e:	f7fa f943 	bl	8000618 <__aeabi_dmul>
 8006392:	4603      	mov	r3, r0
 8006394:	460c      	mov	r4, r1
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800639e:	f7fa f93b 	bl	8000618 <__aeabi_dmul>
 80063a2:	4603      	mov	r3, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	4618      	mov	r0, r3
 80063a8:	4621      	mov	r1, r4
 80063aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ae:	f7fa f933 	bl	8000618 <__aeabi_dmul>
 80063b2:	4603      	mov	r3, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80063bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80063c4:	f7fa f928 	bl	8000618 <__aeabi_dmul>
 80063c8:	4603      	mov	r3, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4618      	mov	r0, r3
 80063ce:	4621      	mov	r1, r4
 80063d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063d4:	f7fa f920 	bl	8000618 <__aeabi_dmul>
 80063d8:	4603      	mov	r3, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	4618      	mov	r0, r3
 80063de:	4621      	mov	r1, r4
 80063e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063e4:	f7fa f918 	bl	8000618 <__aeabi_dmul>
 80063e8:	4603      	mov	r3, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	4618      	mov	r0, r3
 80063ee:	4621      	mov	r1, r4
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	4b79      	ldr	r3, [pc, #484]	; (80065dc <scaraFLowScurve+0x2d4>)
 80063f6:	f7fa fa39 	bl	800086c <__aeabi_ddiv>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006400:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006404:	f000 be56 	b.w	80070b4 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800640c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006410:	f7fa fb7e 	bl	8000b10 <__aeabi_dcmple>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 80e2 	beq.w	80065e0 <scaraFLowScurve+0x2d8>
 800641c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	f7f9 ff42 	bl	80002ac <__adddf3>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	461a      	mov	r2, r3
 800642e:	4623      	mov	r3, r4
 8006430:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006434:	f7fa fb62 	bl	8000afc <__aeabi_dcmplt>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80d0 	beq.w	80065e0 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8006440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006448:	f7f9 ff2e 	bl	80002a8 <__aeabi_dsub>
 800644c:	4603      	mov	r3, r0
 800644e:	460c      	mov	r4, r1
 8006450:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006458:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800645c:	f7fa f8dc 	bl	8000618 <__aeabi_dmul>
 8006460:	4603      	mov	r3, r0
 8006462:	460c      	mov	r4, r1
 8006464:	4625      	mov	r5, r4
 8006466:	461c      	mov	r4, r3
 8006468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800646c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006470:	f7fa f8d2 	bl	8000618 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7f9 ff14 	bl	80002a8 <__aeabi_dsub>
 8006480:	4603      	mov	r3, r0
 8006482:	460c      	mov	r4, r1
 8006484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006486:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8006490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006494:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006498:	f7fa f8be 	bl	8000618 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a8:	f7fa f8b6 	bl	8000618 <__aeabi_dmul>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4620      	mov	r0, r4
 80064b2:	4629      	mov	r1, r5
 80064b4:	f7f9 fefa 	bl	80002ac <__adddf3>
 80064b8:	4603      	mov	r3, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	4625      	mov	r5, r4
 80064be:	461c      	mov	r4, r3
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <scaraFLowScurve+0x2d0>)
 80064c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80064ca:	f7fa f8a5 	bl	8000618 <__aeabi_dmul>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064da:	f7fa f89d 	bl	8000618 <__aeabi_dmul>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ea:	f7fa f895 	bl	8000618 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fed7 	bl	80002a8 <__aeabi_dsub>
 80064fa:	4603      	mov	r3, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006514:	f7fa f880 	bl	8000618 <__aeabi_dmul>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fec4 	bl	80002ac <__adddf3>
 8006524:	4603      	mov	r3, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4625      	mov	r5, r4
 800652a:	461c      	mov	r4, r3
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	4b29      	ldr	r3, [pc, #164]	; (80065d8 <scaraFLowScurve+0x2d0>)
 8006532:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006536:	f7fa f86f 	bl	8000618 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006546:	f7fa f867 	bl	8000618 <__aeabi_dmul>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4610      	mov	r0, r2
 8006550:	4619      	mov	r1, r3
 8006552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006556:	f7fa f85f 	bl	8000618 <__aeabi_dmul>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006566:	f7fa f857 	bl	8000618 <__aeabi_dmul>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7f9 fe9b 	bl	80002ac <__adddf3>
 8006576:	4603      	mov	r3, r0
 8006578:	460c      	mov	r4, r1
 800657a:	4625      	mov	r5, r4
 800657c:	461c      	mov	r4, r3
 800657e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006582:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006586:	f7fa f847 	bl	8000618 <__aeabi_dmul>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006596:	f7fa f83f 	bl	8000618 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065a6:	f7fa f837 	bl	8000618 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <scaraFLowScurve+0x2d4>)
 80065b8:	f7fa f958 	bl	800086c <__aeabi_ddiv>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4620      	mov	r0, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7f9 fe70 	bl	80002a8 <__aeabi_dsub>
 80065c8:	4603      	mov	r3, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ce:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80065d2:	f000 bd6f 	b.w	80070b4 <scaraFLowScurve+0xdac>
 80065d6:	bf00      	nop
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80065e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	f7f9 fe60 	bl	80002ac <__adddf3>
 80065ec:	4603      	mov	r3, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	461a      	mov	r2, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065f8:	f7fa fa94 	bl	8000b24 <__aeabi_dcmpge>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80a2 	beq.w	8006748 <scaraFLowScurve+0x440>
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	4b4c      	ldr	r3, [pc, #304]	; (800673c <scaraFLowScurve+0x434>)
 800660a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800660e:	f7fa f803 	bl	8000618 <__aeabi_dmul>
 8006612:	4603      	mov	r3, r0
 8006614:	460c      	mov	r4, r1
 8006616:	461a      	mov	r2, r3
 8006618:	4623      	mov	r3, r4
 800661a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800661e:	f7fa fa6d 	bl	8000afc <__aeabi_dcmplt>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 808f 	beq.w	8006748 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800662a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	f7f9 fe3b 	bl	80002ac <__adddf3>
 8006636:	4603      	mov	r3, r0
 8006638:	460c      	mov	r4, r1
 800663a:	461a      	mov	r2, r3
 800663c:	4623      	mov	r3, r4
 800663e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006642:	f7f9 fe31 	bl	80002a8 <__aeabi_dsub>
 8006646:	4603      	mov	r3, r0
 8006648:	460c      	mov	r4, r1
 800664a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800664e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800665e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006662:	f7f9 ffd9 	bl	8000618 <__aeabi_dmul>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <scaraFLowScurve+0x438>)
 800667c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006680:	f7f9 ffca 	bl	8000618 <__aeabi_dmul>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006690:	f7f9 ffc2 	bl	8000618 <__aeabi_dmul>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a0:	f7f9 ffba 	bl	8000618 <__aeabi_dmul>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	f7f9 fdfc 	bl	80002a8 <__aeabi_dsub>
 80066b0:	4603      	mov	r3, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80066c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ca:	f7f9 ffa5 	bl	8000618 <__aeabi_dmul>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 fde9 	bl	80002ac <__adddf3>
 80066da:	4603      	mov	r3, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	4625      	mov	r5, r4
 80066e0:	461c      	mov	r4, r3
 80066e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80066ea:	f7f9 ff95 	bl	8000618 <__aeabi_dmul>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066fa:	f7f9 ff8d 	bl	8000618 <__aeabi_dmul>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800670a:	f7f9 ff85 	bl	8000618 <__aeabi_dmul>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4610      	mov	r0, r2
 8006714:	4619      	mov	r1, r3
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <scaraFLowScurve+0x43c>)
 800671c:	f7fa f8a6 	bl	800086c <__aeabi_ddiv>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	f7f9 fdbe 	bl	80002a8 <__aeabi_dsub>
 800672c:	4603      	mov	r3, r0
 800672e:	460c      	mov	r4, r1
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006736:	f000 bcbd 	b.w	80070b4 <scaraFLowScurve+0xdac>
 800673a:	bf00      	nop
 800673c:	40080000 	.word	0x40080000
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	4b88      	ldr	r3, [pc, #544]	; (8006970 <scaraFLowScurve+0x668>)
 800674e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006752:	f7f9 ff61 	bl	8000618 <__aeabi_dmul>
 8006756:	4603      	mov	r3, r0
 8006758:	460c      	mov	r4, r1
 800675a:	461a      	mov	r2, r3
 800675c:	4623      	mov	r3, r4
 800675e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006762:	f7fa f9df 	bl	8000b24 <__aeabi_dcmpge>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80ec 	beq.w	8006946 <scaraFLowScurve+0x63e>
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	4b80      	ldr	r3, [pc, #512]	; (8006974 <scaraFLowScurve+0x66c>)
 8006774:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006778:	f7f9 ff4e 	bl	8000618 <__aeabi_dmul>
 800677c:	4603      	mov	r3, r0
 800677e:	460c      	mov	r4, r1
 8006780:	461a      	mov	r2, r3
 8006782:	4623      	mov	r3, r4
 8006784:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006788:	f7fa f9b8 	bl	8000afc <__aeabi_dcmplt>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80d9 	beq.w	8006946 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	4b75      	ldr	r3, [pc, #468]	; (8006970 <scaraFLowScurve+0x668>)
 800679a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800679e:	f7f9 ff3b 	bl	8000618 <__aeabi_dmul>
 80067a2:	4603      	mov	r3, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	461a      	mov	r2, r3
 80067a8:	4623      	mov	r3, r4
 80067aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067ae:	f7f9 fd7b 	bl	80002a8 <__aeabi_dsub>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80067ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067ce:	f7f9 ff23 	bl	8000618 <__aeabi_dmul>
 80067d2:	4603      	mov	r3, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	4625      	mov	r5, r4
 80067d8:	461c      	mov	r4, r3
 80067da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067e2:	f7f9 ff19 	bl	8000618 <__aeabi_dmul>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 fd5d 	bl	80002ac <__adddf3>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8006802:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006806:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800680a:	f7f9 ff05 	bl	8000618 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4610      	mov	r0, r2
 8006814:	4619      	mov	r1, r3
 8006816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800681a:	f7f9 fefd 	bl	8000618 <__aeabi_dmul>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 fd3f 	bl	80002a8 <__aeabi_dsub>
 800682a:	4603      	mov	r3, r0
 800682c:	460c      	mov	r4, r1
 800682e:	4625      	mov	r5, r4
 8006830:	461c      	mov	r4, r3
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	4b50      	ldr	r3, [pc, #320]	; (8006978 <scaraFLowScurve+0x670>)
 8006838:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800683c:	f7f9 feec 	bl	8000618 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800684c:	f7f9 fee4 	bl	8000618 <__aeabi_dmul>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800685c:	f7f9 fedc 	bl	8000618 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	f7f9 fd20 	bl	80002ac <__adddf3>
 800686c:	4603      	mov	r3, r0
 800686e:	460c      	mov	r4, r1
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006886:	f7f9 fec7 	bl	8000618 <__aeabi_dmul>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 fd0b 	bl	80002ac <__adddf3>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	4625      	mov	r5, r4
 800689c:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	4b35      	ldr	r3, [pc, #212]	; (8006978 <scaraFLowScurve+0x670>)
 80068a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80068a8:	f7f9 feb6 	bl	8000618 <__aeabi_dmul>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068b8:	f7f9 feae 	bl	8000618 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068c8:	f7f9 fea6 	bl	8000618 <__aeabi_dmul>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068d8:	f7f9 fe9e 	bl	8000618 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4620      	mov	r0, r4
 80068e2:	4629      	mov	r1, r5
 80068e4:	f7f9 fce0 	bl	80002a8 <__aeabi_dsub>
 80068e8:	4603      	mov	r3, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	4625      	mov	r5, r4
 80068ee:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80068f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80068f8:	f7f9 fe8e 	bl	8000618 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4610      	mov	r0, r2
 8006902:	4619      	mov	r1, r3
 8006904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006908:	f7f9 fe86 	bl	8000618 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006918:	f7f9 fe7e 	bl	8000618 <__aeabi_dmul>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	4b14      	ldr	r3, [pc, #80]	; (800697c <scaraFLowScurve+0x674>)
 800692a:	f7f9 ff9f 	bl	800086c <__aeabi_ddiv>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fcb9 	bl	80002ac <__adddf3>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800693e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006940:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006944:	e3b6      	b.n	80070b4 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	f04f 0400 	mov.w	r4, #0
 8006950:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	f04f 0400 	mov.w	r4, #0
 800695e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800696e:	e3a1      	b.n	80070b4 <scaraFLowScurve+0xdac>
 8006970:	40080000 	.word	0x40080000
 8006974:	40100000 	.word	0x40100000
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006986:	2b05      	cmp	r3, #5
 8006988:	f040 8392 	bne.w	80070b0 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006998:	f7fa f8c4 	bl	8000b24 <__aeabi_dcmpge>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d058      	beq.n	8006a54 <scaraFLowScurve+0x74c>
 80069a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069aa:	f7fa f8a7 	bl	8000afc <__aeabi_dcmplt>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d04f      	beq.n	8006a54 <scaraFLowScurve+0x74c>
			 t = time;
 80069b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80069b8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80069bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80069c4:	f7f9 fe28 	bl	8000618 <__aeabi_dmul>
 80069c8:	4603      	mov	r3, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	4b91      	ldr	r3, [pc, #580]	; (8006c1c <scaraFLowScurve+0x914>)
 80069d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80069dc:	f7f9 fe1c 	bl	8000618 <__aeabi_dmul>
 80069e0:	4603      	mov	r3, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	4618      	mov	r0, r3
 80069e6:	4621      	mov	r1, r4
 80069e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ec:	f7f9 fe14 	bl	8000618 <__aeabi_dmul>
 80069f0:	4603      	mov	r3, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4618      	mov	r0, r3
 80069f6:	4621      	mov	r1, r4
 80069f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069fc:	f7f9 fe0c 	bl	8000618 <__aeabi_dmul>
 8006a00:	4603      	mov	r3, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8006a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a12:	f7f9 fe01 	bl	8000618 <__aeabi_dmul>
 8006a16:	4603      	mov	r3, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a22:	f7f9 fdf9 	bl	8000618 <__aeabi_dmul>
 8006a26:	4603      	mov	r3, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a32:	f7f9 fdf1 	bl	8000618 <__aeabi_dmul>
 8006a36:	4603      	mov	r3, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	4b77      	ldr	r3, [pc, #476]	; (8006c20 <scaraFLowScurve+0x918>)
 8006a44:	f7f9 ff12 	bl	800086c <__aeabi_ddiv>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006a52:	e32f      	b.n	80070b4 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a5c:	f7fa f858 	bl	8000b10 <__aeabi_dcmple>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80de 	beq.w	8006c24 <scaraFLowScurve+0x91c>
 8006a68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	f7f9 fc1c 	bl	80002ac <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a7c:	f7fa f83e 	bl	8000afc <__aeabi_dcmplt>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80ce 	beq.w	8006c24 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8006a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a90:	f7f9 fc0a 	bl	80002a8 <__aeabi_dsub>
 8006a94:	4603      	mov	r3, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8006a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aa0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006aa4:	f7f9 fdb8 	bl	8000618 <__aeabi_dmul>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4625      	mov	r5, r4
 8006aae:	461c      	mov	r4, r3
 8006ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ab4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ab8:	f7f9 fdae 	bl	8000618 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fbf0 	bl	80002a8 <__aeabi_dsub>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8006ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006adc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ae0:	f7f9 fd9a 	bl	8000618 <__aeabi_dmul>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006af0:	f7f9 fd92 	bl	8000618 <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fbd6 	bl	80002ac <__adddf3>
 8006b00:	4603      	mov	r3, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4625      	mov	r5, r4
 8006b06:	461c      	mov	r4, r3
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	4b43      	ldr	r3, [pc, #268]	; (8006c1c <scaraFLowScurve+0x914>)
 8006b0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b12:	f7f9 fd81 	bl	8000618 <__aeabi_dmul>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b22:	f7f9 fd79 	bl	8000618 <__aeabi_dmul>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b32:	f7f9 fd71 	bl	8000618 <__aeabi_dmul>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fbb3 	bl	80002a8 <__aeabi_dsub>
 8006b42:	4603      	mov	r3, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b48:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b5c:	f7f9 fd5c 	bl	8000618 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 fba0 	bl	80002ac <__adddf3>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	4625      	mov	r5, r4
 8006b72:	461c      	mov	r4, r3
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	4b28      	ldr	r3, [pc, #160]	; (8006c1c <scaraFLowScurve+0x914>)
 8006b7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b7e:	f7f9 fd4b 	bl	8000618 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4610      	mov	r0, r2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b8e:	f7f9 fd43 	bl	8000618 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4610      	mov	r0, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b9e:	f7f9 fd3b 	bl	8000618 <__aeabi_dmul>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bae:	f7f9 fd33 	bl	8000618 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 fb77 	bl	80002ac <__adddf3>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	4625      	mov	r5, r4
 8006bc4:	461c      	mov	r4, r3
 8006bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006bce:	f7f9 fd23 	bl	8000618 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bde:	f7f9 fd1b 	bl	8000618 <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4610      	mov	r0, r2
 8006be8:	4619      	mov	r1, r3
 8006bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bee:	f7f9 fd13 	bl	8000618 <__aeabi_dmul>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <scaraFLowScurve+0x918>)
 8006c00:	f7f9 fe34 	bl	800086c <__aeabi_ddiv>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 fb4c 	bl	80002a8 <__aeabi_dsub>
 8006c10:	4603      	mov	r3, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006c1a:	e24b      	b.n	80070b4 <scaraFLowScurve+0xdac>
 8006c1c:	3fe00000 	.word	0x3fe00000
 8006c20:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8006c24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	f7f9 fb3e 	bl	80002ac <__adddf3>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c38:	f7f9 ff74 	bl	8000b24 <__aeabi_dcmpge>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04b      	beq.n	8006cda <scaraFLowScurve+0x9d2>
 8006c42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	f7f9 fb2f 	bl	80002ac <__adddf3>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c5a:	f7f9 fb27 	bl	80002ac <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c66:	f7f9 ff49 	bl	8000afc <__aeabi_dcmplt>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d034      	beq.n	8006cda <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8006c70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	f7f9 fb18 	bl	80002ac <__adddf3>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	461a      	mov	r2, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c88:	f7f9 fb0e 	bl	80002a8 <__aeabi_dsub>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8006c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	f04f 0400 	mov.w	r4, #0
 8006c9e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8006cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cbe:	f7f9 fcab 	bl	8000618 <__aeabi_dmul>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 faef 	bl	80002ac <__adddf3>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006cd8:	e1ec      	b.n	80070b4 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8006cda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	f7f9 fae3 	bl	80002ac <__adddf3>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cf2:	f7f9 fadb 	bl	80002ac <__adddf3>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cfe:	f7f9 ff11 	bl	8000b24 <__aeabi_dcmpge>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80af 	beq.w	8006e68 <scaraFLowScurve+0xb60>
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	4b53      	ldr	r3, [pc, #332]	; (8006e5c <scaraFLowScurve+0xb54>)
 8006d10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006d14:	f7f9 fc80 	bl	8000618 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d24:	f7f9 fac2 	bl	80002ac <__adddf3>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d30:	f7f9 fee4 	bl	8000afc <__aeabi_dcmplt>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8096 	beq.w	8006e68 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8006d3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	f7f9 fab2 	bl	80002ac <__adddf3>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	4621      	mov	r1, r4
 8006d50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d54:	f7f9 faaa 	bl	80002ac <__adddf3>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4623      	mov	r3, r4
 8006d60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d64:	f7f9 faa0 	bl	80002a8 <__aeabi_dsub>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d84:	f7f9 fc48 	bl	8000618 <__aeabi_dmul>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <scaraFLowScurve+0xb58>)
 8006d9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006da2:	f7f9 fc39 	bl	8000618 <__aeabi_dmul>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006db2:	f7f9 fc31 	bl	8000618 <__aeabi_dmul>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dc2:	f7f9 fc29 	bl	8000618 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4620      	mov	r0, r4
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7f9 fa6b 	bl	80002a8 <__aeabi_dsub>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8006de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dec:	f7f9 fc14 	bl	8000618 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	f7f9 fa58 	bl	80002ac <__adddf3>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	4625      	mov	r5, r4
 8006e02:	461c      	mov	r4, r3
 8006e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006e0c:	f7f9 fc04 	bl	8000618 <__aeabi_dmul>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1c:	f7f9 fbfc 	bl	8000618 <__aeabi_dmul>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e2c:	f7f9 fbf4 	bl	8000618 <__aeabi_dmul>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <scaraFLowScurve+0xb5c>)
 8006e3e:	f7f9 fd15 	bl	800086c <__aeabi_ddiv>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7f9 fa2d 	bl	80002a8 <__aeabi_dsub>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e54:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006e58:	e12c      	b.n	80070b4 <scaraFLowScurve+0xdac>
 8006e5a:	bf00      	nop
 8006e5c:	40080000 	.word	0x40080000
 8006e60:	3fe00000 	.word	0x3fe00000
 8006e64:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	4b94      	ldr	r3, [pc, #592]	; (80070c0 <scaraFLowScurve+0xdb8>)
 8006e6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006e72:	f7f9 fbd1 	bl	8000618 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e82:	f7f9 fa13 	bl	80002ac <__adddf3>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e8e:	f7f9 fe49 	bl	8000b24 <__aeabi_dcmpge>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80f6 	beq.w	8007086 <scaraFLowScurve+0xd7e>
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	4b89      	ldr	r3, [pc, #548]	; (80070c4 <scaraFLowScurve+0xdbc>)
 8006ea0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ea4:	f7f9 fbb8 	bl	8000618 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4610      	mov	r0, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eb4:	f7f9 f9fa 	bl	80002ac <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ec0:	f7f9 fe1c 	bl	8000afc <__aeabi_dcmplt>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80dd 	beq.w	8007086 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	4b7b      	ldr	r3, [pc, #492]	; (80070c0 <scaraFLowScurve+0xdb8>)
 8006ed2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ed6:	f7f9 fb9f 	bl	8000618 <__aeabi_dmul>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ee6:	f7f9 f9e1 	bl	80002ac <__adddf3>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ef2:	f7f9 f9d9 	bl	80002a8 <__aeabi_dsub>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8006efe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8006f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006f06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	f7f9 fb83 	bl	8000618 <__aeabi_dmul>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	4625      	mov	r5, r4
 8006f18:	461c      	mov	r4, r3
 8006f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f22:	f7f9 fb79 	bl	8000618 <__aeabi_dmul>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 f9bd 	bl	80002ac <__adddf3>
 8006f32:	4603      	mov	r3, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8006f42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f4a:	f7f9 fb65 	bl	8000618 <__aeabi_dmul>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4610      	mov	r0, r2
 8006f54:	4619      	mov	r1, r3
 8006f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f5a:	f7f9 fb5d 	bl	8000618 <__aeabi_dmul>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	4625      	mov	r5, r4
 8006f70:	461c      	mov	r4, r3
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	4b54      	ldr	r3, [pc, #336]	; (80070c8 <scaraFLowScurve+0xdc0>)
 8006f78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f7c:	f7f9 fb4c 	bl	8000618 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4610      	mov	r0, r2
 8006f86:	4619      	mov	r1, r3
 8006f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f8c:	f7f9 fb44 	bl	8000618 <__aeabi_dmul>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f9c:	f7f9 fb3c 	bl	8000618 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 f980 	bl	80002ac <__adddf3>
 8006fac:	4603      	mov	r3, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fc6:	f7f9 fb27 	bl	8000618 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f96b 	bl	80002ac <__adddf3>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	4625      	mov	r5, r4
 8006fdc:	461c      	mov	r4, r3
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <scaraFLowScurve+0xdc0>)
 8006fe4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006fe8:	f7f9 fb16 	bl	8000618 <__aeabi_dmul>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ff8:	f7f9 fb0e 	bl	8000618 <__aeabi_dmul>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007008:	f7f9 fb06 	bl	8000618 <__aeabi_dmul>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007018:	f7f9 fafe 	bl	8000618 <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4620      	mov	r0, r4
 8007022:	4629      	mov	r1, r5
 8007024:	f7f9 f940 	bl	80002a8 <__aeabi_dsub>
 8007028:	4603      	mov	r3, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4625      	mov	r5, r4
 800702e:	461c      	mov	r4, r3
 8007030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007034:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007038:	f7f9 faee 	bl	8000618 <__aeabi_dmul>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007048:	f7f9 fae6 	bl	8000618 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007058:	f7f9 fade 	bl	8000618 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4610      	mov	r0, r2
 8007062:	4619      	mov	r1, r3
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	4b18      	ldr	r3, [pc, #96]	; (80070cc <scaraFLowScurve+0xdc4>)
 800706a:	f7f9 fbff 	bl	800086c <__aeabi_ddiv>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4620      	mov	r0, r4
 8007074:	4629      	mov	r1, r5
 8007076:	f7f9 f919 	bl	80002ac <__adddf3>
 800707a:	4603      	mov	r3, r0
 800707c:	460c      	mov	r4, r1
 800707e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007080:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007084:	e016      	b.n	80070b4 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	f04f 0400 	mov.w	r4, #0
 8007090:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8007094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	f04f 0400 	mov.w	r4, #0
 800709e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80070ae:	e001      	b.n	80070b4 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3748      	adds	r7, #72	; 0x48
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bdb0      	pop	{r4, r5, r7, pc}
 80070be:	bf00      	nop
 80070c0:	40080000 	.word	0x40080000
 80070c4:	40100000 	.word	0x40100000
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	40180000 	.word	0x40180000

080070d0 <scaraCheckWorkSpace4>:

SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	ed87 0b06 	vstr	d0, [r7, #24]
 80070da:	ed87 1b04 	vstr	d1, [r7, #16]
 80070de:	ed87 2b02 	vstr	d2, [r7, #8]
 80070e2:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 80070e6:	a335      	add	r3, pc, #212	; (adr r3, 80071bc <scaraCheckWorkSpace4+0xec>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070f0:	f7f9 fd04 	bl	8000afc <__aeabi_dcmplt>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <scaraCheckWorkSpace4+0x3e>
 80070fa:	a332      	add	r3, pc, #200	; (adr r3, 80071c4 <scaraCheckWorkSpace4+0xf4>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007104:	f7f9 fd18 	bl	8000b38 <__aeabi_dcmpgt>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800710e:	2307      	movs	r3, #7
 8007110:	e043      	b.n	800719a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8007112:	a32e      	add	r3, pc, #184	; (adr r3, 80071cc <scaraCheckWorkSpace4+0xfc>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800711c:	f7f9 fcee 	bl	8000afc <__aeabi_dcmplt>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <scaraCheckWorkSpace4+0x6a>
 8007126:	a32b      	add	r3, pc, #172	; (adr r3, 80071d4 <scaraCheckWorkSpace4+0x104>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007130:	f7f9 fd02 	bl	8000b38 <__aeabi_dcmpgt>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800713a:	2307      	movs	r3, #7
 800713c:	e02d      	b.n	800719a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800714a:	f7f9 fcd7 	bl	8000afc <__aeabi_dcmplt>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <scaraCheckWorkSpace4+0x98>
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <scaraCheckWorkSpace4+0xe8>)
 800715a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800715e:	f7f9 fceb 	bl	8000b38 <__aeabi_dcmpgt>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007168:	2307      	movs	r3, #7
 800716a:	e016      	b.n	800719a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 800716c:	a30e      	add	r3, pc, #56	; (adr r3, 80071a8 <scaraCheckWorkSpace4+0xd8>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007176:	f7f9 fcc1 	bl	8000afc <__aeabi_dcmplt>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d109      	bne.n	8007194 <scaraCheckWorkSpace4+0xc4>
 8007180:	a30b      	add	r3, pc, #44	; (adr r3, 80071b0 <scaraCheckWorkSpace4+0xe0>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800718a:	f7f9 fcd5 	bl	8000b38 <__aeabi_dcmpgt>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007194:	2307      	movs	r3, #7
 8007196:	e000      	b.n	800719a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	60000000 	.word	0x60000000
 80071ac:	c00921fb 	.word	0xc00921fb
 80071b0:	60000000 	.word	0x60000000
 80071b4:	400921fb 	.word	0x400921fb
 80071b8:	40590000 	.word	0x40590000
 80071bc:	60000000 	.word	0x60000000
 80071c0:	bff921fb 	.word	0xbff921fb
 80071c4:	60000000 	.word	0x60000000
 80071c8:	3ff921fb 	.word	0x3ff921fb
 80071cc:	80000000 	.word	0x80000000
 80071d0:	c002d97c 	.word	0xc002d97c
 80071d4:	80000000 	.word	0x80000000
 80071d8:	4002d97c 	.word	0x4002d97c
 80071dc:	00000000 	.word	0x00000000

080071e0 <scaraCheckWorkSpace1>:

SCARA_StatusTypeDef			scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	ed87 0b00 	vstr	d0, [r7]
 80071ec:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d117      	bne.n	8007224 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 80071f4:	a33d      	add	r3, pc, #244	; (adr r3, 80072ec <scaraCheckWorkSpace1+0x10c>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071fe:	f7f9 fc91 	bl	8000b24 <__aeabi_dcmpge>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <scaraCheckWorkSpace1+0x40>
 8007208:	a33a      	add	r3, pc, #232	; (adr r3, 80072f4 <scaraCheckWorkSpace1+0x114>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007212:	f7f9 fc7d 	bl	8000b10 <__aeabi_dcmple>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e054      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007220:	2307      	movs	r3, #7
 8007222:	e052      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d117      	bne.n	800725a <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800722a:	a334      	add	r3, pc, #208	; (adr r3, 80072fc <scaraCheckWorkSpace1+0x11c>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007234:	f7f9 fc76 	bl	8000b24 <__aeabi_dcmpge>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <scaraCheckWorkSpace1+0x76>
 800723e:	a331      	add	r3, pc, #196	; (adr r3, 8007304 <scaraCheckWorkSpace1+0x124>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007248:	f7f9 fc62 	bl	8000b10 <__aeabi_dcmple>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e039      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007256:	2307      	movs	r3, #7
 8007258:	e037      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d118      	bne.n	8007292 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800726c:	f7f9 fc5a 	bl	8000b24 <__aeabi_dcmpge>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <scaraCheckWorkSpace1+0xae>
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <scaraCheckWorkSpace1+0x108>)
 800727c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007280:	f7f9 fc46 	bl	8000b10 <__aeabi_dcmple>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	e01d      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800728e:	2307      	movs	r3, #7
 8007290:	e01b      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d117      	bne.n	80072c8 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8007298:	a30f      	add	r3, pc, #60	; (adr r3, 80072d8 <scaraCheckWorkSpace1+0xf8>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072a2:	f7f9 fc3f 	bl	8000b24 <__aeabi_dcmpge>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <scaraCheckWorkSpace1+0xe4>
 80072ac:	a30c      	add	r3, pc, #48	; (adr r3, 80072e0 <scaraCheckWorkSpace1+0x100>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b6:	f7f9 fc2b 	bl	8000b10 <__aeabi_dcmple>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e002      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80072c4:	2307      	movs	r3, #7
 80072c6:	e000      	b.n	80072ca <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 80072c8:	2301      	movs	r3, #1
	}
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	60000000 	.word	0x60000000
 80072dc:	c00921fb 	.word	0xc00921fb
 80072e0:	60000000 	.word	0x60000000
 80072e4:	400921fb 	.word	0x400921fb
 80072e8:	40590000 	.word	0x40590000
 80072ec:	60000000 	.word	0x60000000
 80072f0:	bff921fb 	.word	0xbff921fb
 80072f4:	60000000 	.word	0x60000000
 80072f8:	3ff921fb 	.word	0x3ff921fb
 80072fc:	80000000 	.word	0x80000000
 8007300:	c002d97c 	.word	0xc002d97c
 8007304:	80000000 	.word	0x80000000
 8007308:	4002d97c 	.word	0x4002d97c

0800730c <scaraSetOutput>:
void				scaraSetScanFlag(void) {
	mySCARA.isScanLitmit = TRUE;
}


void				scaraSetOutput		(int8_t level) {
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8007316:	79fa      	ldrb	r2, [r7, #7]
 8007318:	4b03      	ldr	r3, [pc, #12]	; (8007328 <scaraSetOutput+0x1c>)
 800731a:	70da      	strb	r2, [r3, #3]
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	20000c78 	.word	0x20000c78

0800732c <scaraSetDutyState>:


void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8007336:	4a04      	ldr	r2, [pc, #16]	; (8007348 <scaraSetDutyState+0x1c>)
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	7053      	strb	r3, [r2, #1]
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000c78 	.word	0x20000c78

0800734c <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8007354:	2268      	movs	r2, #104	; 0x68
 8007356:	4904      	ldr	r1, [pc, #16]	; (8007368 <scaraGetPosition+0x1c>)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f00a fc51 	bl	8011c00 <memcpy>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20005ca0 	.word	0x20005ca0

0800736c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <scaraSetMode+0x1c>)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	7013      	strb	r3, [r2, #0]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	20000c78 	.word	0x20000c78

0800738c <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <scaraGetMode+0x14>)
 8007392:	781b      	ldrb	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000c78 	.word	0x20000c78

080073a4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 80073a8:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <scaraGetDutyState+0x14>)
 80073aa:	785b      	ldrb	r3, [r3, #1]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000c78 	.word	0x20000c78

080073bc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <scaraIsScanLimit+0x14>)
 80073c2:	789b      	ldrb	r3, [r3, #2]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000c78 	.word	0x20000c78
 80073d4:	00000000 	.word	0x00000000

080073d8 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 80073e2:	4b11      	ldr	r3, [pc, #68]	; (8007428 <scaraIsFinish+0x50>)
 80073e4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80073e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073ec:	a30c      	add	r3, pc, #48	; (adr r3, 8007420 <scaraIsFinish+0x48>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f8 ff5b 	bl	80002ac <__adddf3>
 80073f6:	4603      	mov	r3, r0
 80073f8:	460c      	mov	r4, r1
 80073fa:	461a      	mov	r2, r3
 80073fc:	4623      	mov	r3, r4
 80073fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007402:	f7f9 fb99 	bl	8000b38 <__aeabi_dcmpgt>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <scaraIsFinish+0x38>
		return TRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8007410:	2300      	movs	r3, #0
	}
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	eb851eb8 	.word	0xeb851eb8
 8007424:	3f9eb851 	.word	0x3f9eb851
 8007428:	200052e8 	.word	0x200052e8
 800742c:	00000000 	.word	0x00000000

08007430 <scaraPosition2String>:

int32_t					scaraPosition2String(char * result, SCARA_PositionTypeDef position) {
 8007430:	b082      	sub	sp, #8
 8007432:	b590      	push	{r4, r7, lr}
 8007434:	b0af      	sub	sp, #188	; 0xbc
 8007436:	af0a      	add	r7, sp, #40	; 0x28
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800743e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8007442:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	4b7f      	ldr	r3, [pc, #508]	; (8007648 <scaraPosition2String+0x218>)
 800744c:	f7f9 f8e4 	bl	8000618 <__aeabi_dmul>
 8007450:	4603      	mov	r3, r0
 8007452:	460c      	mov	r4, r1
 8007454:	4618      	mov	r0, r3
 8007456:	4621      	mov	r1, r4
 8007458:	a379      	add	r3, pc, #484	; (adr r3, 8007640 <scaraPosition2String+0x210>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f9 fa05 	bl	800086c <__aeabi_ddiv>
 8007462:	4603      	mov	r3, r0
 8007464:	460c      	mov	r4, r1
 8007466:	ec44 3b17 	vmov	d7, r3, r4
 800746a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800746e:	2106      	movs	r1, #6
 8007470:	eeb0 0a47 	vmov.f32	s0, s14
 8007474:	eef0 0a67 	vmov.f32	s1, s15
 8007478:	4618      	mov	r0, r3
 800747a:	f7fa f9d1 	bl	8001820 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 800747e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	4b70      	ldr	r3, [pc, #448]	; (8007648 <scaraPosition2String+0x218>)
 8007488:	f7f9 f8c6 	bl	8000618 <__aeabi_dmul>
 800748c:	4603      	mov	r3, r0
 800748e:	460c      	mov	r4, r1
 8007490:	4618      	mov	r0, r3
 8007492:	4621      	mov	r1, r4
 8007494:	a36a      	add	r3, pc, #424	; (adr r3, 8007640 <scaraPosition2String+0x210>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f9 f9e7 	bl	800086c <__aeabi_ddiv>
 800749e:	4603      	mov	r3, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	ec44 3b17 	vmov	d7, r3, r4
 80074a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80074aa:	2106      	movs	r1, #6
 80074ac:	eeb0 0a47 	vmov.f32	s0, s14
 80074b0:	eef0 0a67 	vmov.f32	s1, s15
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fa f9b3 	bl	8001820 <double2string>
	double2string(d3, position.D3, 6);
 80074ba:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80074be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074c2:	2106      	movs	r1, #6
 80074c4:	eeb0 0a47 	vmov.f32	s0, s14
 80074c8:	eef0 0a67 	vmov.f32	s1, s15
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fa f9a7 	bl	8001820 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80074d2:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <scaraPosition2String+0x218>)
 80074dc:	f7f9 f89c 	bl	8000618 <__aeabi_dmul>
 80074e0:	4603      	mov	r3, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4618      	mov	r0, r3
 80074e6:	4621      	mov	r1, r4
 80074e8:	a355      	add	r3, pc, #340	; (adr r3, 8007640 <scaraPosition2String+0x210>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f9bd 	bl	800086c <__aeabi_ddiv>
 80074f2:	4603      	mov	r3, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	ec44 3b17 	vmov	d7, r3, r4
 80074fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80074fe:	2106      	movs	r1, #6
 8007500:	eeb0 0a47 	vmov.f32	s0, s14
 8007504:	eef0 0a67 	vmov.f32	s1, s15
 8007508:	4618      	mov	r0, r3
 800750a:	f7fa f989 	bl	8001820 <double2string>
	double2string(x, position.x, 6);
 800750e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8007512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007516:	2106      	movs	r1, #6
 8007518:	eeb0 0a47 	vmov.f32	s0, s14
 800751c:	eef0 0a67 	vmov.f32	s1, s15
 8007520:	4618      	mov	r0, r3
 8007522:	f7fa f97d 	bl	8001820 <double2string>
	double2string(y, position.y, 6);
 8007526:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800752a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800752e:	2106      	movs	r1, #6
 8007530:	eeb0 0a47 	vmov.f32	s0, s14
 8007534:	eef0 0a67 	vmov.f32	s1, s15
 8007538:	4618      	mov	r0, r3
 800753a:	f7fa f971 	bl	8001820 <double2string>
	double2string(z, position.z, 6);
 800753e:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8007542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007546:	2106      	movs	r1, #6
 8007548:	eeb0 0a47 	vmov.f32	s0, s14
 800754c:	eef0 0a67 	vmov.f32	s1, s15
 8007550:	4618      	mov	r0, r3
 8007552:	f7fa f965 	bl	8001820 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 8007556:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	4b3a      	ldr	r3, [pc, #232]	; (8007648 <scaraPosition2String+0x218>)
 8007560:	f7f9 f85a 	bl	8000618 <__aeabi_dmul>
 8007564:	4603      	mov	r3, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4618      	mov	r0, r3
 800756a:	4621      	mov	r1, r4
 800756c:	a334      	add	r3, pc, #208	; (adr r3, 8007640 <scaraPosition2String+0x210>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f9 f97b 	bl	800086c <__aeabi_ddiv>
 8007576:	4603      	mov	r3, r0
 8007578:	460c      	mov	r4, r1
 800757a:	ec44 3b17 	vmov	d7, r3, r4
 800757e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007582:	2106      	movs	r1, #6
 8007584:	eeb0 0a47 	vmov.f32	s0, s14
 8007588:	eef0 0a67 	vmov.f32	s1, s15
 800758c:	4618      	mov	r0, r3
 800758e:	f7fa f947 	bl	8001820 <double2string>
	double2string(lenght, position.q, 6);
 8007592:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8007596:	f107 0320 	add.w	r3, r7, #32
 800759a:	2106      	movs	r1, #6
 800759c:	eeb0 0a47 	vmov.f32	s0, s14
 80075a0:	eef0 0a67 	vmov.f32	s1, s15
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fa f93b 	bl	8001820 <double2string>
	double2string(total_time, position.total_time, 4);
 80075aa:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	2104      	movs	r1, #4
 80075b4:	eeb0 0a47 	vmov.f32	s0, s14
 80075b8:	eef0 0a67 	vmov.f32	s1, s15
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fa f92f 	bl	8001820 <double2string>
	double2string(time, position.t, 4);
 80075c2:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80075c6:	f107 0314 	add.w	r3, r7, #20
 80075ca:	2104      	movs	r1, #4
 80075cc:	eeb0 0a47 	vmov.f32	s0, s14
 80075d0:	eef0 0a67 	vmov.f32	s1, s15
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fa f923 	bl	8001820 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80075da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80075de:	f107 0314 	add.w	r3, r7, #20
 80075e2:	9309      	str	r3, [sp, #36]	; 0x24
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	f107 0320 	add.w	r3, r7, #32
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075f4:	9306      	str	r3, [sp, #24]
 80075f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4613      	mov	r3, r2
 800761c:	4a0b      	ldr	r2, [pc, #44]	; (800764c <scaraPosition2String+0x21c>)
 800761e:	2190      	movs	r1, #144	; 0x90
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f00b fa15 	bl	8012a50 <sniprintf>
 8007626:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 800762a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800762e:	4618      	mov	r0, r3
 8007630:	3794      	adds	r7, #148	; 0x94
 8007632:	46bd      	mov	sp, r7
 8007634:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007638:	b002      	add	sp, #8
 800763a:	4770      	bx	lr
 800763c:	f3af 8000 	nop.w
 8007640:	60000000 	.word	0x60000000
 8007644:	400921fb 	.word	0x400921fb
 8007648:	40668000 	.word	0x40668000
 800764c:	08017cf8 	.word	0x08017cf8

08007650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_MspInit+0x54>)
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <HAL_MspInit+0x54>)
 8007660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007664:	6453      	str	r3, [r2, #68]	; 0x44
 8007666:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_MspInit+0x54>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007672:	2300      	movs	r3, #0
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_MspInit+0x54>)
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <HAL_MspInit+0x54>)
 800767c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007680:	6413      	str	r3, [r2, #64]	; 0x40
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <HAL_MspInit+0x54>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800768e:	2200      	movs	r2, #0
 8007690:	210f      	movs	r1, #15
 8007692:	f06f 0001 	mvn.w	r0, #1
 8007696:	f000 fb15 	bl	8007cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800

080076a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	; 0x30
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80076b8:	2200      	movs	r2, #0
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	2036      	movs	r0, #54	; 0x36
 80076be:	f000 fb01 	bl	8007cc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80076c2:	2036      	movs	r0, #54	; 0x36
 80076c4:	f000 fb1a 	bl	8007cfc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	4b1f      	ldr	r3, [pc, #124]	; (800774c <HAL_InitTick+0xa4>)
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_InitTick+0xa4>)
 80076d2:	f043 0310 	orr.w	r3, r3, #16
 80076d6:	6413      	str	r3, [r2, #64]	; 0x40
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <HAL_InitTick+0xa4>)
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80076e4:	f107 0210 	add.w	r2, r7, #16
 80076e8:	f107 0314 	add.w	r3, r7, #20
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f002 fe36 	bl	800a360 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80076f4:	f002 fe0c 	bl	800a310 <HAL_RCC_GetPCLK1Freq>
 80076f8:	4603      	mov	r3, r0
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	4a13      	ldr	r2, [pc, #76]	; (8007750 <HAL_InitTick+0xa8>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	0c9b      	lsrs	r3, r3, #18
 8007708:	3b01      	subs	r3, #1
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <HAL_InitTick+0xac>)
 800770e:	4a12      	ldr	r2, [pc, #72]	; (8007758 <HAL_InitTick+0xb0>)
 8007710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <HAL_InitTick+0xac>)
 8007714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007718:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800771a:	4a0e      	ldr	r2, [pc, #56]	; (8007754 <HAL_InitTick+0xac>)
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <HAL_InitTick+0xac>)
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <HAL_InitTick+0xac>)
 8007728:	2200      	movs	r2, #0
 800772a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800772c:	4809      	ldr	r0, [pc, #36]	; (8007754 <HAL_InitTick+0xac>)
 800772e:	f002 fe49 	bl	800a3c4 <HAL_TIM_Base_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <HAL_InitTick+0xac>)
 800773a:	f002 fe78 	bl	800a42e <HAL_TIM_Base_Start_IT>
 800773e:	4603      	mov	r3, r0
 8007740:	e000      	b.n	8007744 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
}
 8007744:	4618      	mov	r0, r3
 8007746:	3730      	adds	r7, #48	; 0x30
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	431bde83 	.word	0x431bde83
 8007754:	20005d70 	.word	0x20005d70
 8007758:	40001000 	.word	0x40001000

0800775c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
	...

0800776c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 8007770:	2162      	movs	r1, #98	; 0x62
 8007772:	4802      	ldr	r0, [pc, #8]	; (800777c <HardFault_Handler+0x10>)
 8007774:	f7fa f80e 	bl	8001794 <LOG_REPORT>
 8007778:	e7fa      	b.n	8007770 <HardFault_Handler+0x4>
 800777a:	bf00      	nop
 800777c:	08017d1c 	.word	0x08017d1c

08007780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 8007784:	2172      	movs	r1, #114	; 0x72
 8007786:	4802      	ldr	r0, [pc, #8]	; (8007790 <MemManage_Handler+0x10>)
 8007788:	f7fa f804 	bl	8001794 <LOG_REPORT>
 800778c:	e7fa      	b.n	8007784 <MemManage_Handler+0x4>
 800778e:	bf00      	nop
 8007790:	08017d34 	.word	0x08017d34

08007794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 8007798:	2182      	movs	r1, #130	; 0x82
 800779a:	4802      	ldr	r0, [pc, #8]	; (80077a4 <BusFault_Handler+0x10>)
 800779c:	f7f9 fffa 	bl	8001794 <LOG_REPORT>
 80077a0:	e7fa      	b.n	8007798 <BusFault_Handler+0x4>
 80077a2:	bf00      	nop
 80077a4:	08017d48 	.word	0x08017d48

080077a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077ac:	e7fe      	b.n	80077ac <UsageFault_Handler+0x4>

080077ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077ae:	b480      	push	{r7}
 80077b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077b2:	bf00      	nop
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80077c0:	4802      	ldr	r0, [pc, #8]	; (80077cc <DMA1_Stream4_IRQHandler+0x10>)
 80077c2:	f000 fbd1 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80077c6:	bf00      	nop
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20005df0 	.word	0x20005df0

080077d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80077d4:	4802      	ldr	r0, [pc, #8]	; (80077e0 <UART4_IRQHandler+0x10>)
 80077d6:	f003 f8ed 	bl	800a9b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80077da:	bf00      	nop
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20005db0 	.word	0x20005db0

080077e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80077e8:	4802      	ldr	r0, [pc, #8]	; (80077f4 <TIM6_DAC_IRQHandler+0x10>)
 80077ea:	f002 fe44 	bl	800a476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20005d70 	.word	0x20005d70

080077f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80077fc:	4802      	ldr	r0, [pc, #8]	; (8007808 <OTG_FS_IRQHandler+0x10>)
 80077fe:	f001 f913 	bl	8008a28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007802:	bf00      	nop
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200066f8 	.word	0x200066f8

0800780c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <_sbrk+0x50>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <_sbrk+0x16>
		heap_end = &end;
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <_sbrk+0x50>)
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <_sbrk+0x54>)
 8007820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007822:	4b0e      	ldr	r3, [pc, #56]	; (800785c <_sbrk+0x50>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <_sbrk+0x50>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	466a      	mov	r2, sp
 8007832:	4293      	cmp	r3, r2
 8007834:	d907      	bls.n	8007846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007836:	f00a f9a9 	bl	8011b8c <__errno>
 800783a:	4602      	mov	r2, r0
 800783c:	230c      	movs	r3, #12
 800783e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	e006      	b.n	8007854 <_sbrk+0x48>
	}

	heap_end += incr;
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <_sbrk+0x50>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	4a03      	ldr	r2, [pc, #12]	; (800785c <_sbrk+0x50>)
 8007850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20001478 	.word	0x20001478
 8007860:	20006b08 	.word	0x20006b08

08007864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007868:	4b08      	ldr	r3, [pc, #32]	; (800788c <SystemInit+0x28>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <SystemInit+0x28>)
 8007870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <SystemInit+0x28>)
 800787a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800787e:	609a      	str	r2, [r3, #8]
#endif
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8007894:	4b11      	ldr	r3, [pc, #68]	; (80078dc <MX_UART4_Init+0x4c>)
 8007896:	4a12      	ldr	r2, [pc, #72]	; (80078e0 <MX_UART4_Init+0x50>)
 8007898:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800789a:	4b10      	ldr	r3, [pc, #64]	; (80078dc <MX_UART4_Init+0x4c>)
 800789c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <MX_UART4_Init+0x4c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80078a8:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <MX_UART4_Init+0x4c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <MX_UART4_Init+0x4c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <MX_UART4_Init+0x4c>)
 80078b6:	220c      	movs	r2, #12
 80078b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <MX_UART4_Init+0x4c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <MX_UART4_Init+0x4c>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80078c6:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_UART4_Init+0x4c>)
 80078c8:	f002 ffba 	bl	800a840 <HAL_UART_Init>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80078d2:	f7fb fc09 	bl	80030e8 <Error_Handler>
  }

}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20005db0 	.word	0x20005db0
 80078e0:	40004c00 	.word	0x40004c00

080078e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ec:	f107 0314 	add.w	r3, r7, #20
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	609a      	str	r2, [r3, #8]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a34      	ldr	r2, [pc, #208]	; (80079d4 <HAL_UART_MspInit+0xf0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d161      	bne.n	80079ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	4b33      	ldr	r3, [pc, #204]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	4a32      	ldr	r2, [pc, #200]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 8007910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007914:	6413      	str	r3, [r2, #64]	; 0x40
 8007916:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	4a2b      	ldr	r2, [pc, #172]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6313      	str	r3, [r2, #48]	; 0x30
 8007932:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <HAL_UART_MspInit+0xf4>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800793e:	2303      	movs	r3, #3
 8007940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007942:	2302      	movs	r3, #2
 8007944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007946:	2301      	movs	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794a:	2303      	movs	r3, #3
 800794c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800794e:	2308      	movs	r3, #8
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	4619      	mov	r1, r3
 8007958:	4820      	ldr	r0, [pc, #128]	; (80079dc <HAL_UART_MspInit+0xf8>)
 800795a:	f000 fd7b 	bl	8008454 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_UART_MspInit+0x100>)
 8007962:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007964:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800796a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800796c:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007972:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007974:	2200      	movs	r2, #0
 8007976:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007978:	4b19      	ldr	r3, [pc, #100]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 800797a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800797e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007980:	4b17      	ldr	r3, [pc, #92]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007982:	2200      	movs	r2, #0
 8007984:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007986:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007988:	2200      	movs	r2, #0
 800798a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800798c:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 800798e:	2200      	movs	r2, #0
 8007990:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 8007994:	2200      	movs	r2, #0
 8007996:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007998:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 800799a:	2200      	movs	r2, #0
 800799c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 80079a0:	f000 f9ba 	bl	8007d18 <HAL_DMA_Init>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80079aa:	f7fb fb9d 	bl	80030e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a0b      	ldr	r2, [pc, #44]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
 80079b4:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <HAL_UART_MspInit+0xfc>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80079ba:	2200      	movs	r2, #0
 80079bc:	2105      	movs	r1, #5
 80079be:	2034      	movs	r0, #52	; 0x34
 80079c0:	f000 f980 	bl	8007cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80079c4:	2034      	movs	r0, #52	; 0x34
 80079c6:	f000 f999 	bl	8007cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80079ca:	bf00      	nop
 80079cc:	3728      	adds	r7, #40	; 0x28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40020000 	.word	0x40020000
 80079e0:	20005df0 	.word	0x20005df0
 80079e4:	40026070 	.word	0x40026070

080079e8 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a0c      	ldr	r2, [pc, #48]	; (8007a28 <HAL_UART_TxCpltCallback+0x40>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d112      	bne.n	8007a20 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80079fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079fe:	490b      	ldr	r1, [pc, #44]	; (8007a2c <HAL_UART_TxCpltCallback+0x44>)
 8007a00:	480b      	ldr	r0, [pc, #44]	; (8007a30 <HAL_UART_TxCpltCallback+0x48>)
 8007a02:	f7fb fc10 	bl	8003226 <ringBuff_PopArray>
 8007a06:	4603      	mov	r3, r0
 8007a08:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d006      	beq.n	8007a1e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	461a      	mov	r2, r3
 8007a14:	4905      	ldr	r1, [pc, #20]	; (8007a2c <HAL_UART_TxCpltCallback+0x44>)
 8007a16:	4807      	ldr	r0, [pc, #28]	; (8007a34 <HAL_UART_TxCpltCallback+0x4c>)
 8007a18:	f002 ff60 	bl	800a8dc <HAL_UART_Transmit_DMA>
 8007a1c:	e000      	b.n	8007a20 <HAL_UART_TxCpltCallback+0x38>
			return;
 8007a1e:	bf00      	nop
	}
}
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40004c00 	.word	0x40004c00
 8007a2c:	200051d4 	.word	0x200051d4
 8007a30:	2000086c 	.word	0x2000086c
 8007a34:	20005db0 	.word	0x20005db0

08007a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a3e:	e003      	b.n	8007a48 <LoopCopyDataInit>

08007a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a46:	3104      	adds	r1, #4

08007a48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007a48:	480b      	ldr	r0, [pc, #44]	; (8007a78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007a50:	d3f6      	bcc.n	8007a40 <CopyDataInit>
  ldr  r2, =_sbss
 8007a52:	4a0b      	ldr	r2, [pc, #44]	; (8007a80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007a54:	e002      	b.n	8007a5c <LoopFillZerobss>

08007a56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007a56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007a58:	f842 3b04 	str.w	r3, [r2], #4

08007a5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007a60:	d3f9      	bcc.n	8007a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007a62:	f7ff feff 	bl	8007864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a66:	f00a f897 	bl	8011b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a6a:	f7fb faaf 	bl	8002fcc <main>
  bx  lr    
 8007a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007a70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007a74:	08018338 	.word	0x08018338
  ldr  r0, =_sdata
 8007a78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a7c:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 8007a80:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 8007a84:	20006b04 	.word	0x20006b04

08007a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a88:	e7fe      	b.n	8007a88 <ADC_IRQHandler>
	...

08007a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a90:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <HAL_Init+0x40>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <HAL_Init+0x40>)
 8007a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <HAL_Init+0x40>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <HAL_Init+0x40>)
 8007aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <HAL_Init+0x40>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a07      	ldr	r2, [pc, #28]	; (8007acc <HAL_Init+0x40>)
 8007aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ab4:	2003      	movs	r0, #3
 8007ab6:	f000 f8fa 	bl	8007cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007aba:	2000      	movs	r0, #0
 8007abc:	f7ff fdf4 	bl	80076a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ac0:	f7ff fdc6 	bl	8007650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40023c00 	.word	0x40023c00

08007ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <HAL_IncTick+0x20>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <HAL_IncTick+0x24>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4413      	add	r3, r2
 8007ae0:	4a04      	ldr	r2, [pc, #16]	; (8007af4 <HAL_IncTick+0x24>)
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000cbc 	.word	0x20000cbc
 8007af4:	20005e50 	.word	0x20005e50

08007af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  return uwTick;
 8007afc:	4b03      	ldr	r3, [pc, #12]	; (8007b0c <HAL_GetTick+0x14>)
 8007afe:	681b      	ldr	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20005e50 	.word	0x20005e50

08007b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b18:	f7ff ffee 	bl	8007af8 <HAL_GetTick>
 8007b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d005      	beq.n	8007b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <HAL_Delay+0x40>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b36:	bf00      	nop
 8007b38:	f7ff ffde 	bl	8007af8 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d8f7      	bhi.n	8007b38 <HAL_Delay+0x28>
  {
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000cbc 	.word	0x20000cbc

08007b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <__NVIC_SetPriorityGrouping+0x44>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b70:	4013      	ands	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b86:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <__NVIC_SetPriorityGrouping+0x44>)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	60d3      	str	r3, [r2, #12]
}
 8007b8c:	bf00      	nop
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ba0:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	f003 0307 	and.w	r3, r3, #7
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	e000ed00 	.word	0xe000ed00

08007bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	db0b      	blt.n	8007be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	f003 021f 	and.w	r2, r3, #31
 8007bd0:	4907      	ldr	r1, [pc, #28]	; (8007bf0 <__NVIC_EnableIRQ+0x38>)
 8007bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	2001      	movs	r0, #1
 8007bda:	fa00 f202 	lsl.w	r2, r0, r2
 8007bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000e100 	.word	0xe000e100

08007bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	db0a      	blt.n	8007c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	490c      	ldr	r1, [pc, #48]	; (8007c40 <__NVIC_SetPriority+0x4c>)
 8007c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c12:	0112      	lsls	r2, r2, #4
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	440b      	add	r3, r1
 8007c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c1c:	e00a      	b.n	8007c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	4908      	ldr	r1, [pc, #32]	; (8007c44 <__NVIC_SetPriority+0x50>)
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	0112      	lsls	r2, r2, #4
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	440b      	add	r3, r1
 8007c32:	761a      	strb	r2, [r3, #24]
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	e000e100 	.word	0xe000e100
 8007c44:	e000ed00 	.word	0xe000ed00

08007c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f1c3 0307 	rsb	r3, r3, #7
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	bf28      	it	cs
 8007c66:	2304      	movcs	r3, #4
 8007c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	2b06      	cmp	r3, #6
 8007c70:	d902      	bls.n	8007c78 <NVIC_EncodePriority+0x30>
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	3b03      	subs	r3, #3
 8007c76:	e000      	b.n	8007c7a <NVIC_EncodePriority+0x32>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	43da      	mvns	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	401a      	ands	r2, r3
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c90:	f04f 31ff 	mov.w	r1, #4294967295
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9a:	43d9      	mvns	r1, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ca0:	4313      	orrs	r3, r2
         );
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3724      	adds	r7, #36	; 0x24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ff4c 	bl	8007b54 <__NVIC_SetPriorityGrouping>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cd6:	f7ff ff61 	bl	8007b9c <__NVIC_GetPriorityGrouping>
 8007cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f7ff ffb1 	bl	8007c48 <NVIC_EncodePriority>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ff80 	bl	8007bf4 <__NVIC_SetPriority>
}
 8007cf4:	bf00      	nop
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff ff54 	bl	8007bb8 <__NVIC_EnableIRQ>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d24:	f7ff fee8 	bl	8007af8 <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e099      	b.n	8007e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d54:	e00f      	b.n	8007d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d56:	f7ff fecf 	bl	8007af8 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d908      	bls.n	8007d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e078      	b.n	8007e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e8      	bne.n	8007d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4b38      	ldr	r3, [pc, #224]	; (8007e70 <HAL_DMA_Init+0x158>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d107      	bne.n	8007de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d117      	bne.n	8007e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa9f 	bl	8008360 <DMA_CheckFifoParam>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2240      	movs	r2, #64	; 0x40
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e36:	2301      	movs	r3, #1
 8007e38:	e016      	b.n	8007e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa56 	bl	80082f4 <DMA_CalcBaseAndBitshift>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e50:	223f      	movs	r2, #63	; 0x3f
 8007e52:	409a      	lsls	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	f010803f 	.word	0xf010803f

08007e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_DMA_Start_IT+0x26>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e040      	b.n	8007f1c <HAL_DMA_Start_IT+0xa8>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d12f      	bne.n	8007f0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f9e8 	bl	8008298 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ecc:	223f      	movs	r2, #63	; 0x3f
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0216 	orr.w	r2, r2, #22
 8007ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e005      	b.n	8007f1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
 8007f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d004      	beq.n	8007f42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e00c      	b.n	8007f5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2205      	movs	r2, #5
 8007f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f74:	4b92      	ldr	r3, [pc, #584]	; (80081c0 <HAL_DMA_IRQHandler+0x258>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a92      	ldr	r2, [pc, #584]	; (80081c4 <HAL_DMA_IRQHandler+0x25c>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	0a9b      	lsrs	r3, r3, #10
 8007f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	2208      	movs	r2, #8
 8007f94:	409a      	lsls	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01a      	beq.n	8007fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d013      	beq.n	8007fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0204 	bic.w	r2, r2, #4
 8007fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fcc:	f043 0201 	orr.w	r2, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd8:	2201      	movs	r2, #1
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d012      	beq.n	800800a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	f043 0202 	orr.w	r2, r3, #2
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	2204      	movs	r2, #4
 8008010:	409a      	lsls	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d012      	beq.n	8008040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2204      	movs	r2, #4
 800802e:	409a      	lsls	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f043 0204 	orr.w	r2, r3, #4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008044:	2210      	movs	r2, #16
 8008046:	409a      	lsls	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4013      	ands	r3, r2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d043      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03c      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	2210      	movs	r2, #16
 8008064:	409a      	lsls	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d018      	beq.n	80080aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d108      	bne.n	8008098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d024      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
 8008096:	e01f      	b.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	e016      	b.n	80080d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0208 	bic.w	r2, r2, #8
 80080c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080dc:	2220      	movs	r2, #32
 80080de:	409a      	lsls	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 808e 	beq.w	8008206 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8086 	beq.w	8008206 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	2220      	movs	r2, #32
 8008100:	409a      	lsls	r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b05      	cmp	r3, #5
 8008110:	d136      	bne.n	8008180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0216 	bic.w	r2, r2, #22
 8008120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695a      	ldr	r2, [r3, #20]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <HAL_DMA_IRQHandler+0x1da>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0208 	bic.w	r2, r2, #8
 8008150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008156:	223f      	movs	r2, #63	; 0x3f
 8008158:	409a      	lsls	r2, r3
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d07d      	beq.n	8008272 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
        }
        return;
 800817e:	e078      	b.n	8008272 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01c      	beq.n	80081c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d108      	bne.n	80081ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d030      	beq.n	8008206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
 80081ac:	e02b      	b.n	8008206 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d027      	beq.n	8008206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	e022      	b.n	8008206 <HAL_DMA_IRQHandler+0x29e>
 80081c0:	20000cb4 	.word	0x20000cb4
 80081c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10f      	bne.n	80081f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0210 	bic.w	r2, r2, #16
 80081e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820a:	2b00      	cmp	r3, #0
 800820c:	d032      	beq.n	8008274 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d022      	beq.n	8008260 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2205      	movs	r2, #5
 800821e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3301      	adds	r3, #1
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	429a      	cmp	r2, r3
 800823c:	d307      	bcc.n	800824e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f2      	bne.n	8008232 <HAL_DMA_IRQHandler+0x2ca>
 800824c:	e000      	b.n	8008250 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800824e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
 8008270:	e000      	b.n	8008274 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008272:	bf00      	nop
    }
  }
}
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop

0800827c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800828a:	b2db      	uxtb	r3, r3
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d108      	bne.n	80082d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80082d6:	e007      	b.n	80082e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]
}
 80082e8:	bf00      	nop
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	3b10      	subs	r3, #16
 8008304:	4a14      	ldr	r2, [pc, #80]	; (8008358 <DMA_CalcBaseAndBitshift+0x64>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800830e:	4a13      	ldr	r2, [pc, #76]	; (800835c <DMA_CalcBaseAndBitshift+0x68>)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b03      	cmp	r3, #3
 8008320:	d909      	bls.n	8008336 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800832a:	f023 0303 	bic.w	r3, r3, #3
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	659a      	str	r2, [r3, #88]	; 0x58
 8008334:	e007      	b.n	8008346 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	aaaaaaab 	.word	0xaaaaaaab
 800835c:	08017dcc 	.word	0x08017dcc

08008360 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d11f      	bne.n	80083ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d855      	bhi.n	800842c <DMA_CheckFifoParam+0xcc>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <DMA_CheckFifoParam+0x28>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008399 	.word	0x08008399
 800838c:	080083ab 	.word	0x080083ab
 8008390:	08008399 	.word	0x08008399
 8008394:	0800842d 	.word	0x0800842d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d045      	beq.n	8008430 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083a8:	e042      	b.n	8008430 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083b2:	d13f      	bne.n	8008434 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083b8:	e03c      	b.n	8008434 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c2:	d121      	bne.n	8008408 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d836      	bhi.n	8008438 <DMA_CheckFifoParam+0xd8>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <DMA_CheckFifoParam+0x70>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e7 	.word	0x080083e7
 80083d8:	080083e1 	.word	0x080083e1
 80083dc:	080083f9 	.word	0x080083f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	e02f      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d024      	beq.n	800843c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f6:	e021      	b.n	800843c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008400:	d11e      	bne.n	8008440 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008406:	e01b      	b.n	8008440 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d902      	bls.n	8008414 <DMA_CheckFifoParam+0xb4>
 800840e:	2b03      	cmp	r3, #3
 8008410:	d003      	beq.n	800841a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008412:	e018      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
      break;
 8008418:	e015      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
      break;
 800842a:	e00b      	b.n	8008444 <DMA_CheckFifoParam+0xe4>
      break;
 800842c:	bf00      	nop
 800842e:	e00a      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;
 8008430:	bf00      	nop
 8008432:	e008      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;
 8008434:	bf00      	nop
 8008436:	e006      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;
 8008438:	bf00      	nop
 800843a:	e004      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;
 800843c:	bf00      	nop
 800843e:	e002      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;   
 8008440:	bf00      	nop
 8008442:	e000      	b.n	8008446 <DMA_CheckFifoParam+0xe6>
      break;
 8008444:	bf00      	nop
    }
  } 
  
  return status; 
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	; 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008466:	2300      	movs	r3, #0
 8008468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e16b      	b.n	8008748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008470:	2201      	movs	r2, #1
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	4013      	ands	r3, r2
 8008482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	429a      	cmp	r2, r3
 800848a:	f040 815a 	bne.w	8008742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d00b      	beq.n	80084ae <HAL_GPIO_Init+0x5a>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d007      	beq.n	80084ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084a2:	2b11      	cmp	r3, #17
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2b12      	cmp	r3, #18
 80084ac:	d130      	bne.n	8008510 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	2203      	movs	r2, #3
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084e4:	2201      	movs	r2, #1
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	43db      	mvns	r3, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4013      	ands	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	091b      	lsrs	r3, r3, #4
 80084fa:	f003 0201 	and.w	r2, r3, #1
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4313      	orrs	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	2203      	movs	r2, #3
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	43db      	mvns	r3, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4013      	ands	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	fa02 f303 	lsl.w	r3, r2, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4313      	orrs	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d003      	beq.n	8008550 <HAL_GPIO_Init+0xfc>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b12      	cmp	r3, #18
 800854e:	d123      	bne.n	8008598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	08da      	lsrs	r2, r3, #3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3208      	adds	r2, #8
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	220f      	movs	r2, #15
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	4013      	ands	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4313      	orrs	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	08da      	lsrs	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3208      	adds	r2, #8
 8008592:	69b9      	ldr	r1, [r7, #24]
 8008594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	2203      	movs	r2, #3
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	4013      	ands	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 0203 	and.w	r2, r3, #3
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	fa02 f303 	lsl.w	r3, r2, r3
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80b4 	beq.w	8008742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	4b5f      	ldr	r3, [pc, #380]	; (800875c <HAL_GPIO_Init+0x308>)
 80085e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e2:	4a5e      	ldr	r2, [pc, #376]	; (800875c <HAL_GPIO_Init+0x308>)
 80085e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085e8:	6453      	str	r3, [r2, #68]	; 0x44
 80085ea:	4b5c      	ldr	r3, [pc, #368]	; (800875c <HAL_GPIO_Init+0x308>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085f6:	4a5a      	ldr	r2, [pc, #360]	; (8008760 <HAL_GPIO_Init+0x30c>)
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	089b      	lsrs	r3, r3, #2
 80085fc:	3302      	adds	r3, #2
 80085fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	220f      	movs	r2, #15
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4013      	ands	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a51      	ldr	r2, [pc, #324]	; (8008764 <HAL_GPIO_Init+0x310>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d02b      	beq.n	800867a <HAL_GPIO_Init+0x226>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a50      	ldr	r2, [pc, #320]	; (8008768 <HAL_GPIO_Init+0x314>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d025      	beq.n	8008676 <HAL_GPIO_Init+0x222>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a4f      	ldr	r2, [pc, #316]	; (800876c <HAL_GPIO_Init+0x318>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01f      	beq.n	8008672 <HAL_GPIO_Init+0x21e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a4e      	ldr	r2, [pc, #312]	; (8008770 <HAL_GPIO_Init+0x31c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d019      	beq.n	800866e <HAL_GPIO_Init+0x21a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a4d      	ldr	r2, [pc, #308]	; (8008774 <HAL_GPIO_Init+0x320>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <HAL_GPIO_Init+0x216>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a4c      	ldr	r2, [pc, #304]	; (8008778 <HAL_GPIO_Init+0x324>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00d      	beq.n	8008666 <HAL_GPIO_Init+0x212>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a4b      	ldr	r2, [pc, #300]	; (800877c <HAL_GPIO_Init+0x328>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d007      	beq.n	8008662 <HAL_GPIO_Init+0x20e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a4a      	ldr	r2, [pc, #296]	; (8008780 <HAL_GPIO_Init+0x32c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d101      	bne.n	800865e <HAL_GPIO_Init+0x20a>
 800865a:	2307      	movs	r3, #7
 800865c:	e00e      	b.n	800867c <HAL_GPIO_Init+0x228>
 800865e:	2308      	movs	r3, #8
 8008660:	e00c      	b.n	800867c <HAL_GPIO_Init+0x228>
 8008662:	2306      	movs	r3, #6
 8008664:	e00a      	b.n	800867c <HAL_GPIO_Init+0x228>
 8008666:	2305      	movs	r3, #5
 8008668:	e008      	b.n	800867c <HAL_GPIO_Init+0x228>
 800866a:	2304      	movs	r3, #4
 800866c:	e006      	b.n	800867c <HAL_GPIO_Init+0x228>
 800866e:	2303      	movs	r3, #3
 8008670:	e004      	b.n	800867c <HAL_GPIO_Init+0x228>
 8008672:	2302      	movs	r3, #2
 8008674:	e002      	b.n	800867c <HAL_GPIO_Init+0x228>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <HAL_GPIO_Init+0x228>
 800867a:	2300      	movs	r3, #0
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	f002 0203 	and.w	r2, r2, #3
 8008682:	0092      	lsls	r2, r2, #2
 8008684:	4093      	lsls	r3, r2
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	4313      	orrs	r3, r2
 800868a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800868c:	4934      	ldr	r1, [pc, #208]	; (8008760 <HAL_GPIO_Init+0x30c>)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	089b      	lsrs	r3, r3, #2
 8008692:	3302      	adds	r3, #2
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800869a:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <HAL_GPIO_Init+0x330>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	43db      	mvns	r3, r3
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	4013      	ands	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086be:	4a31      	ldr	r2, [pc, #196]	; (8008784 <HAL_GPIO_Init+0x330>)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80086c4:	4b2f      	ldr	r3, [pc, #188]	; (8008784 <HAL_GPIO_Init+0x330>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	43db      	mvns	r3, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4013      	ands	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086e8:	4a26      	ldr	r2, [pc, #152]	; (8008784 <HAL_GPIO_Init+0x330>)
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086ee:	4b25      	ldr	r3, [pc, #148]	; (8008784 <HAL_GPIO_Init+0x330>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	43db      	mvns	r3, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	4313      	orrs	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008712:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <HAL_GPIO_Init+0x330>)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008718:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <HAL_GPIO_Init+0x330>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	43db      	mvns	r3, r3
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	4013      	ands	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800873c:	4a11      	ldr	r2, [pc, #68]	; (8008784 <HAL_GPIO_Init+0x330>)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	3301      	adds	r3, #1
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b0f      	cmp	r3, #15
 800874c:	f67f ae90 	bls.w	8008470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008750:	bf00      	nop
 8008752:	3724      	adds	r7, #36	; 0x24
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	40023800 	.word	0x40023800
 8008760:	40013800 	.word	0x40013800
 8008764:	40020000 	.word	0x40020000
 8008768:	40020400 	.word	0x40020400
 800876c:	40020800 	.word	0x40020800
 8008770:	40020c00 	.word	0x40020c00
 8008774:	40021000 	.word	0x40021000
 8008778:	40021400 	.word	0x40021400
 800877c:	40021800 	.word	0x40021800
 8008780:	40021c00 	.word	0x40021c00
 8008784:	40013c00 	.word	0x40013c00

08008788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800878a:	b08f      	sub	sp, #60	; 0x3c
 800878c:	af0a      	add	r7, sp, #40	; 0x28
 800878e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e10f      	b.n	80089ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f008 fee9 	bl	801158c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f003 f852 	bl	800b882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	687e      	ldr	r6, [r7, #4]
 80087e6:	466d      	mov	r5, sp
 80087e8:	f106 0410 	add.w	r4, r6, #16
 80087ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80087fc:	1d33      	adds	r3, r6, #4
 80087fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008800:	6838      	ldr	r0, [r7, #0]
 8008802:	f002 ff29 	bl	800b658 <USB_CoreInit>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0d0      	b.n	80089ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f003 f840 	bl	800b8a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	e04a      	b.n	80088c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800882a:	7bfa      	ldrb	r2, [r7, #15]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	333d      	adds	r3, #61	; 0x3d
 800883a:	2201      	movs	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800883e:	7bfa      	ldrb	r2, [r7, #15]
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	333c      	adds	r3, #60	; 0x3c
 800884e:	7bfa      	ldrb	r2, [r7, #15]
 8008850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008852:	7bfa      	ldrb	r2, [r7, #15]
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	b298      	uxth	r0, r3
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	3342      	adds	r3, #66	; 0x42
 8008866:	4602      	mov	r2, r0
 8008868:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800886a:	7bfa      	ldrb	r2, [r7, #15]
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	333f      	adds	r3, #63	; 0x3f
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800887e:	7bfa      	ldrb	r2, [r7, #15]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	3344      	adds	r3, #68	; 0x44
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008892:	7bfa      	ldrb	r2, [r7, #15]
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	3348      	adds	r3, #72	; 0x48
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088a6:	7bfa      	ldrb	r2, [r7, #15]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3350      	adds	r3, #80	; 0x50
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	3301      	adds	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d3af      	bcc.n	800882a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
 80088ce:	e044      	b.n	800895a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088d0:	7bfa      	ldrb	r2, [r7, #15]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80088e2:	2200      	movs	r2, #0
 80088e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088e6:	7bfa      	ldrb	r2, [r7, #15]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80088f8:	7bfa      	ldrb	r2, [r7, #15]
 80088fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088fc:	7bfa      	ldrb	r2, [r7, #15]
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008912:	7bfa      	ldrb	r2, [r7, #15]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008928:	7bfa      	ldrb	r2, [r7, #15]
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	1a9b      	subs	r3, r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800893e:	7bfa      	ldrb	r2, [r7, #15]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	3301      	adds	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
 800895a:	7bfa      	ldrb	r2, [r7, #15]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3b5      	bcc.n	80088d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	603b      	str	r3, [r7, #0]
 800896a:	687e      	ldr	r6, [r7, #4]
 800896c:	466d      	mov	r5, sp
 800896e:	f106 0410 	add.w	r4, r6, #16
 8008972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800897a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800897e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008982:	1d33      	adds	r3, r6, #4
 8008984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008986:	6838      	ldr	r0, [r7, #0]
 8008988:	f002 ffb6 	bl	800b8f8 <USB_DevInit>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e00d      	b.n	80089ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f003 ffab 	bl	800c90e <USB_DevDisconnect>

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_PCD_Start+0x1c>
 80089da:	2302      	movs	r3, #2
 80089dc:	e020      	b.n	8008a20 <HAL_PCD_Start+0x5e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d109      	bne.n	8008a02 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d005      	beq.n	8008a02 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f003 ff69 	bl	800c8de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 ff25 	bl	800b860 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b08d      	sub	sp, #52	; 0x34
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f004 f810 	bl	800ca64 <USB_GetMode>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 838e 	bne.w	8009168 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f003 ff74 	bl	800c93e <USB_ReadInterrupts>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8384 	beq.w	8009166 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f003 ff6b 	bl	800c93e <USB_ReadInterrupts>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d107      	bne.n	8008a82 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f002 0202 	and.w	r2, r2, #2
 8008a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f003 ff59 	bl	800c93e <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a96:	d17b      	bne.n	8008b90 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f003 ff5f 	bl	800c964 <USB_ReadDevAllOutEpInterrupt>
 8008aa6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008aa8:	e06f      	b.n	8008b8a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d064      	beq.n	8008b7e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f003 ff84 	bl	800c9cc <USB_ReadDevOutEPInterrupt>
 8008ac4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00c      	beq.n	8008aea <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	461a      	mov	r2, r3
 8008ade:	2301      	movs	r3, #1
 8008ae0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fe0d 	bl	8009704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00c      	beq.n	8008b0e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 ff0c 	bl	8009914 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	461a      	mov	r2, r3
 8008b26:	2310      	movs	r3, #16
 8008b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d015      	beq.n	8008b60 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d108      	bne.n	8008b4e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b46:	461a      	mov	r2, r3
 8008b48:	2101      	movs	r1, #1
 8008b4a:	f003 ffcf 	bl	800caec <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	461a      	mov	r2, r3
 8008b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	3301      	adds	r3, #1
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d18c      	bne.n	8008aaa <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f003 fed2 	bl	800c93e <USB_ReadInterrupts>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba4:	f040 80c4 	bne.w	8008d30 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f003 fef3 	bl	800c998 <USB_ReadDevAllInEpInterrupt>
 8008bb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008bb8:	e0b6      	b.n	8008d28 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 80ab 	beq.w	8008d1c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f003 ff19 	bl	800ca08 <USB_ReadDevInEPInterrupt>
 8008bd6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d05b      	beq.n	8008c9a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	2201      	movs	r2, #1
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	43db      	mvns	r3, r3
 8008bfc:	69f9      	ldr	r1, [r7, #28]
 8008bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c02:	4013      	ands	r3, r2
 8008c04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	461a      	mov	r2, r3
 8008c14:	2301      	movs	r3, #1
 8008c16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d11b      	bne.n	8008c58 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c24:	4613      	mov	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	3348      	adds	r3, #72	; 0x48
 8008c30:	6819      	ldr	r1, [r3, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c36:	4613      	mov	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4403      	add	r3, r0
 8008c40:	3344      	adds	r3, #68	; 0x44
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4419      	add	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4403      	add	r3, r0
 8008c54:	3348      	adds	r3, #72	; 0x48
 8008c56:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f008 fd15 	bl	801168e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d116      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d113      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x272>
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3350      	adds	r3, #80	; 0x50
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d108      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c92:	461a      	mov	r2, r3
 8008c94:	2101      	movs	r1, #1
 8008c96:	f003 ff29 	bl	800caec <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2310      	movs	r3, #16
 8008cd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	461a      	mov	r2, r3
 8008d06:	2302      	movs	r3, #2
 8008d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fc67 	bl	80095ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	3301      	adds	r3, #1
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f47f af45 	bne.w	8008bba <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f003 fe02 	bl	800c93e <USB_ReadInterrupts>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d44:	d122      	bne.n	8008d8c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d108      	bne.n	8008d76 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fe88 	bl	8009a84 <HAL_PCDEx_LPM_Callback>
 8008d74:	e002      	b.n	8008d7c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f008 fd00 	bl	801177c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f003 fdd4 	bl	800c93e <USB_ReadInterrupts>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da0:	d112      	bne.n	8008dc8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d102      	bne.n	8008db8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f008 fcbc 	bl	8011730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695a      	ldr	r2, [r3, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008dc6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f003 fdb6 	bl	800c93e <USB_ReadInterrupts>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ddc:	f040 80a7 	bne.w	8008f2e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2110      	movs	r1, #16
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 feee 	bl	800bbdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e04:	e036      	b.n	8008e74 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	461a      	mov	r2, r3
 8008e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	461a      	mov	r2, r3
 8008e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	3301      	adds	r3, #1
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d3c3      	bcc.n	8008e06 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008e90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eaa:	f043 030b 	orr.w	r3, r3, #11
 8008eae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec0:	f043 030b 	orr.w	r3, r3, #11
 8008ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec6:	e015      	b.n	8008ef4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008eda:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008ede:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eee:	f043 030b 	orr.w	r3, r3, #11
 8008ef2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f003 fde7 	bl	800caec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f003 fd03 	bl	800c93e <USB_ReadInterrupts>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f42:	d124      	bne.n	8008f8e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f003 fd99 	bl	800ca80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f002 fea3 	bl	800bc9e <USB_GetDevSpeed>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	f001 f9c8 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 8008f68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	f002 fbd2 	bl	800b71c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f008 fbb0 	bl	80116de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f003 fcd3 	bl	800c93e <USB_ReadInterrupts>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d161      	bne.n	8009066 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0210 	bic.w	r2, r2, #16
 8008fb0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f003 020f 	and.w	r2, r3, #15
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	4413      	add	r3, r2
 8008fce:	3304      	adds	r3, #4
 8008fd0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	0c5b      	lsrs	r3, r3, #17
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d124      	bne.n	8009028 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d035      	beq.n	8009056 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6a38      	ldr	r0, [r7, #32]
 8008ffe:	f003 fb4b 	bl	800c698 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	699a      	ldr	r2, [r3, #24]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	619a      	str	r2, [r3, #24]
 8009026:	e016      	b.n	8009056 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	0c5b      	lsrs	r3, r3, #17
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	2b06      	cmp	r3, #6
 8009032:	d110      	bne.n	8009056 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800903a:	2208      	movs	r2, #8
 800903c:	4619      	mov	r1, r3
 800903e:	6a38      	ldr	r0, [r7, #32]
 8009040:	f003 fb2a 	bl	800c698 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	699a      	ldr	r2, [r3, #24]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009050:	441a      	add	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0210 	orr.w	r2, r2, #16
 8009064:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f003 fc67 	bl	800c93e <USB_ReadInterrupts>
 8009070:	4603      	mov	r3, r0
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b08      	cmp	r3, #8
 8009078:	d10a      	bne.n	8009090 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f008 fb21 	bl	80116c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f002 0208 	and.w	r2, r2, #8
 800908e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f003 fc52 	bl	800c93e <USB_ReadInterrupts>
 800909a:	4603      	mov	r3, r0
 800909c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090a4:	d10f      	bne.n	80090c6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f008 fb83 	bl	80117bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80090c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f003 fc37 	bl	800c93e <USB_ReadInterrupts>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090da:	d10f      	bne.n	80090fc <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f008 fb56 	bl	8011798 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80090fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f003 fc1c 	bl	800c93e <USB_ReadInterrupts>
 8009106:	4603      	mov	r3, r0
 8009108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009110:	d10a      	bne.n	8009128 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f008 fb64 	bl	80117e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f003 fc06 	bl	800c93e <USB_ReadInterrupts>
 8009132:	4603      	mov	r3, r0
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d115      	bne.n	8009168 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f008 fb54 	bl	80117fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6859      	ldr	r1, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	430a      	orrs	r2, r1
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e000      	b.n	8009168 <HAL_PCD_IRQHandler+0x740>
      return;
 8009166:	bf00      	nop
    }
  }
}
 8009168:	3734      	adds	r7, #52	; 0x34
 800916a:	46bd      	mov	sp, r7
 800916c:	bd90      	pop	{r4, r7, pc}

0800916e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_PCD_SetAddress+0x1a>
 8009184:	2302      	movs	r3, #2
 8009186:	e013      	b.n	80091b0 <HAL_PCD_SetAddress+0x42>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f003 fb76 	bl	800c892 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	70fb      	strb	r3, [r7, #3]
 80091ca:	460b      	mov	r3, r1
 80091cc:	803b      	strh	r3, [r7, #0]
 80091ce:	4613      	mov	r3, r2
 80091d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0f      	bge.n	80091fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	4613      	mov	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	3338      	adds	r3, #56	; 0x38
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	3304      	adds	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	705a      	strb	r2, [r3, #1]
 80091fc:	e00f      	b.n	800921e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 020f 	and.w	r2, r3, #15
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	3304      	adds	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800922a:	883a      	ldrh	r2, [r7, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	78ba      	ldrb	r2, [r7, #2]
 8009234:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009248:	78bb      	ldrb	r3, [r7, #2]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d102      	bne.n	8009254 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800925a:	2b01      	cmp	r3, #1
 800925c:	d101      	bne.n	8009262 <HAL_PCD_EP_Open+0xaa>
 800925e:	2302      	movs	r3, #2
 8009260:	e00e      	b.n	8009280 <HAL_PCD_EP_Open+0xc8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4618      	mov	r0, r3
 8009272:	f002 fd39 	bl	800bce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800927e:	7afb      	ldrb	r3, [r7, #11]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009298:	2b00      	cmp	r3, #0
 800929a:	da0f      	bge.n	80092bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 020f 	and.w	r2, r3, #15
 80092a2:	4613      	mov	r3, r2
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	3338      	adds	r3, #56	; 0x38
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4413      	add	r3, r2
 80092b0:	3304      	adds	r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	705a      	strb	r2, [r3, #1]
 80092ba:	e00f      	b.n	80092dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	f003 020f 	and.w	r2, r3, #15
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	1a9b      	subs	r3, r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	3304      	adds	r3, #4
 80092d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_PCD_EP_Close+0x6e>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e00e      	b.n	8009314 <HAL_PCD_EP_Close+0x8c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	4618      	mov	r0, r3
 8009306:	f002 fd77 	bl	800bdf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	460b      	mov	r3, r1
 800932a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	f003 020f 	and.w	r2, r3, #15
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2200      	movs	r2, #0
 8009356:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2200      	movs	r2, #0
 800935c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	b2da      	uxtb	r2, r3
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d102      	bne.n	8009378 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	6979      	ldr	r1, [r7, #20]
 8009390:	f002 fffa 	bl	800c388 <USB_EP0StartXfer>
 8009394:	e008      	b.n	80093a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	f002 fdac 	bl	800bf00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093d4:	681b      	ldr	r3, [r3, #0]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	3338      	adds	r3, #56	; 0x38
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2201      	movs	r2, #1
 8009420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	b2da      	uxtb	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d102      	bne.n	800943c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	461a      	mov	r2, r3
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	f002 ff98 	bl	800c388 <USB_EP0StartXfer>
 8009458:	e008      	b.n	800946c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	f002 fd4a 	bl	800bf00 <USB_EPStartXfer>
  }

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	d901      	bls.n	8009494 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e050      	b.n	8009536 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da0f      	bge.n	80094bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3338      	adds	r3, #56	; 0x38
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	705a      	strb	r2, [r3, #1]
 80094ba:	e00d      	b.n	80094d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	3304      	adds	r3, #4
 80094d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_PCD_EP_SetStall+0x82>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e01e      	b.n	8009536 <HAL_PCD_EP_SetStall+0xc0>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	f003 f8ef 	bl	800c6ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	f003 030f 	and.w	r3, r3, #15
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	b2d9      	uxtb	r1, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009526:	461a      	mov	r2, r3
 8009528:	f003 fae0 	bl	800caec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	f003 020f 	and.w	r2, r3, #15
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d901      	bls.n	800955c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e042      	b.n	80095e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800955c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	da0f      	bge.n	8009584 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f003 020f 	and.w	r2, r3, #15
 800956a:	4613      	mov	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	3338      	adds	r3, #56	; 0x38
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	705a      	strb	r2, [r3, #1]
 8009582:	e00f      	b.n	80095a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	f003 020f 	and.w	r2, r3, #15
 800958a:	4613      	mov	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	1a9b      	subs	r3, r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	3304      	adds	r3, #4
 800959c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_PCD_EP_ClrStall+0x86>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e00e      	b.n	80095e2 <HAL_PCD_EP_ClrStall+0xa4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68f9      	ldr	r1, [r7, #12]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 f8f7 	bl	800c7c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08a      	sub	sp, #40	; 0x28
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4613      	mov	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	3338      	adds	r3, #56	; 0x38
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	3304      	adds	r3, #4
 8009610:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	429a      	cmp	r2, r3
 800961c:	d901      	bls.n	8009622 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e06c      	b.n	80096fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	429a      	cmp	r2, r3
 8009636:	d902      	bls.n	800963e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	3303      	adds	r3, #3
 8009642:	089b      	lsrs	r3, r3, #2
 8009644:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009646:	e02b      	b.n	80096a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	695a      	ldr	r2, [r3, #20]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	429a      	cmp	r2, r3
 800965c:	d902      	bls.n	8009664 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	3303      	adds	r3, #3
 8009668:	089b      	lsrs	r3, r3, #2
 800966a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68d9      	ldr	r1, [r3, #12]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800967c:	b2db      	uxtb	r3, r3
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	6978      	ldr	r0, [r7, #20]
 8009684:	f002 ffd3 	bl	800c62e <USB_WritePacket>

    ep->xfer_buff  += len;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	441a      	add	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	441a      	add	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d809      	bhi.n	80096ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096be:	429a      	cmp	r2, r3
 80096c0:	d203      	bcs.n	80096ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1be      	bne.n	8009648 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	695a      	ldr	r2, [r3, #20]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d811      	bhi.n	80096fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	2201      	movs	r2, #1
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	43db      	mvns	r3, r3
 80096f0:	6939      	ldr	r1, [r7, #16]
 80096f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f6:	4013      	ands	r3, r2
 80096f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3720      	adds	r7, #32
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	333c      	adds	r3, #60	; 0x3c
 800971c:	3304      	adds	r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b01      	cmp	r3, #1
 8009738:	f040 80b3 	bne.w	80098a2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d028      	beq.n	8009798 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a70      	ldr	r2, [pc, #448]	; (800990c <PCD_EP_OutXfrComplete_int+0x208>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d90e      	bls.n	800976c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	461a      	mov	r2, r3
 8009766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f007 ff61 	bl	8011634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800977c:	461a      	mov	r2, r3
 800977e:	2101      	movs	r1, #1
 8009780:	f003 f9b4 	bl	800caec <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009790:	461a      	mov	r2, r3
 8009792:	2308      	movs	r3, #8
 8009794:	6093      	str	r3, [r2, #8]
 8009796:	e0b3      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	461a      	mov	r2, r3
 80097b0:	2320      	movs	r3, #32
 80097b2:	6093      	str	r3, [r2, #8]
 80097b4:	e0a4      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 809f 	bne.w	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a51      	ldr	r2, [pc, #324]	; (800990c <PCD_EP_OutXfrComplete_int+0x208>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d90f      	bls.n	80097ea <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00a      	beq.n	80097ea <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e0:	461a      	mov	r2, r3
 80097e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e6:	6093      	str	r3, [r2, #8]
 80097e8:	e08a      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80097fc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	0159      	lsls	r1, r3, #5
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	440b      	add	r3, r1
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009810:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	4613      	mov	r3, r2
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4403      	add	r3, r0
 8009820:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009824:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	4613      	mov	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	4613      	mov	r3, r2
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4403      	add	r3, r0
 8009848:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4419      	add	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4403      	add	r3, r0
 800985e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009862:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f007 fef4 	bl	8011658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d144      	bne.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	4613      	mov	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d138      	bne.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009898:	461a      	mov	r2, r3
 800989a:	2101      	movs	r1, #1
 800989c:	f003 f926 	bl	800caec <USB_EP0_OutStart>
 80098a0:	e02e      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4a1a      	ldr	r2, [pc, #104]	; (8009910 <PCD_EP_OutXfrComplete_int+0x20c>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d124      	bne.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c0:	461a      	mov	r2, r3
 80098c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c6:	6093      	str	r3, [r2, #8]
 80098c8:	e01a      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	461a      	mov	r2, r3
 80098e2:	2320      	movs	r3, #32
 80098e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f007 feb3 	bl	8011658 <HAL_PCD_DataOutStageCallback>
 80098f2:	e005      	b.n	8009900 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f007 feac 	bl	8011658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	4f54300a 	.word	0x4f54300a
 8009910:	4f54310a 	.word	0x4f54310a

08009914 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	333c      	adds	r3, #60	; 0x3c
 800992c:	3304      	adds	r3, #4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d113      	bne.n	8009972 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a1f      	ldr	r2, [pc, #124]	; (80099cc <PCD_EP_OutSetupPacket_int+0xb8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d922      	bls.n	8009998 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01d      	beq.n	8009998 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	461a      	mov	r2, r3
 800996a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996e:	6093      	str	r3, [r2, #8]
 8009970:	e012      	b.n	8009998 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d10e      	bne.n	8009998 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009980:	2b00      	cmp	r3, #0
 8009982:	d009      	beq.n	8009998 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009990:	461a      	mov	r2, r3
 8009992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009996:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f007 fe4b 	bl	8011634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <PCD_EP_OutSetupPacket_int+0xb8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d90c      	bls.n	80099c0 <PCD_EP_OutSetupPacket_int+0xac>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d108      	bne.n	80099c0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099b8:	461a      	mov	r2, r3
 80099ba:	2101      	movs	r1, #1
 80099bc:	f003 f896 	bl	800caec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	4f54300a 	.word	0x4f54300a
 80099d0:	4f54310a 	.word	0x4f54310a

080099d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
 80099e0:	4613      	mov	r3, r2
 80099e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099f2:	883b      	ldrh	r3, [r7, #0]
 80099f4:	0419      	lsls	r1, r3, #16
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009a00:	e028      	b.n	8009a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	e00d      	b.n	8009a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	3340      	adds	r3, #64	; 0x40
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	0c1b      	lsrs	r3, r3, #16
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	7bfa      	ldrb	r2, [r7, #15]
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d3ec      	bcc.n	8009a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a3c:	883b      	ldrh	r3, [r7, #0]
 8009a3e:	0418      	lsls	r0, r3, #16
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	4302      	orrs	r2, r0
 8009a4c:	3340      	adds	r3, #64	; 0x40
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	887a      	ldrh	r2, [r7, #2]
 8009a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e25b      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d075      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009aba:	4ba3      	ldr	r3, [pc, #652]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 030c 	and.w	r3, r3, #12
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d00c      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ac6:	4ba0      	ldr	r3, [pc, #640]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d112      	bne.n	8009af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ad2:	4b9d      	ldr	r3, [pc, #628]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae0:	4b99      	ldr	r3, [pc, #612]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d05b      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x108>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d157      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e236      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b00:	d106      	bne.n	8009b10 <HAL_RCC_OscConfig+0x74>
 8009b02:	4b91      	ldr	r3, [pc, #580]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a90      	ldr	r2, [pc, #576]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e01d      	b.n	8009b4c <HAL_RCC_OscConfig+0xb0>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCC_OscConfig+0x98>
 8009b1a:	4b8b      	ldr	r3, [pc, #556]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a8a      	ldr	r2, [pc, #552]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	4b88      	ldr	r3, [pc, #544]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a87      	ldr	r2, [pc, #540]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e00b      	b.n	8009b4c <HAL_RCC_OscConfig+0xb0>
 8009b34:	4b84      	ldr	r3, [pc, #528]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a83      	ldr	r2, [pc, #524]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4b81      	ldr	r3, [pc, #516]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a80      	ldr	r2, [pc, #512]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d013      	beq.n	8009b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b54:	f7fd ffd0 	bl	8007af8 <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b5a:	e008      	b.n	8009b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b5c:	f7fd ffcc 	bl	8007af8 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b64      	cmp	r3, #100	; 0x64
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e1fb      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b6e:	4b76      	ldr	r3, [pc, #472]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f0      	beq.n	8009b5c <HAL_RCC_OscConfig+0xc0>
 8009b7a:	e014      	b.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b7c:	f7fd ffbc 	bl	8007af8 <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b82:	e008      	b.n	8009b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b84:	f7fd ffb8 	bl	8007af8 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d901      	bls.n	8009b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e1e7      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b96:	4b6c      	ldr	r3, [pc, #432]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f0      	bne.n	8009b84 <HAL_RCC_OscConfig+0xe8>
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d063      	beq.n	8009c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bb2:	4b65      	ldr	r3, [pc, #404]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00b      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bbe:	4b62      	ldr	r3, [pc, #392]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d11c      	bne.n	8009c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bca:	4b5f      	ldr	r3, [pc, #380]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d116      	bne.n	8009c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bd6:	4b5c      	ldr	r3, [pc, #368]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <HAL_RCC_OscConfig+0x152>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d001      	beq.n	8009bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e1bb      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bee:	4b56      	ldr	r3, [pc, #344]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	4952      	ldr	r1, [pc, #328]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c02:	e03a      	b.n	8009c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d020      	beq.n	8009c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c0c:	4b4f      	ldr	r3, [pc, #316]	; (8009d4c <HAL_RCC_OscConfig+0x2b0>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c12:	f7fd ff71 	bl	8007af8 <HAL_GetTick>
 8009c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c18:	e008      	b.n	8009c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c1a:	f7fd ff6d 	bl	8007af8 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e19c      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c2c:	4b46      	ldr	r3, [pc, #280]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0f0      	beq.n	8009c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c38:	4b43      	ldr	r3, [pc, #268]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4940      	ldr	r1, [pc, #256]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	e015      	b.n	8009c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c4e:	4b3f      	ldr	r3, [pc, #252]	; (8009d4c <HAL_RCC_OscConfig+0x2b0>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c54:	f7fd ff50 	bl	8007af8 <HAL_GetTick>
 8009c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c5a:	e008      	b.n	8009c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c5c:	f7fd ff4c 	bl	8007af8 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e17b      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c6e:	4b36      	ldr	r3, [pc, #216]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f0      	bne.n	8009c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d030      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d016      	beq.n	8009cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c8e:	4b30      	ldr	r3, [pc, #192]	; (8009d50 <HAL_RCC_OscConfig+0x2b4>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c94:	f7fd ff30 	bl	8007af8 <HAL_GetTick>
 8009c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c9c:	f7fd ff2c 	bl	8007af8 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e15b      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cae:	4b26      	ldr	r3, [pc, #152]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0x200>
 8009cba:	e015      	b.n	8009ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cbc:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <HAL_RCC_OscConfig+0x2b4>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cc2:	f7fd ff19 	bl	8007af8 <HAL_GetTick>
 8009cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cca:	f7fd ff15 	bl	8007af8 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e144      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cdc:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1f0      	bne.n	8009cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 80a0 	beq.w	8009e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10f      	bne.n	8009d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d14:	6413      	str	r3, [r2, #64]	; 0x40
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d121      	bne.n	8009d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a07      	ldr	r2, [pc, #28]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d3e:	f7fd fedb 	bl	8007af8 <HAL_GetTick>
 8009d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d44:	e011      	b.n	8009d6a <HAL_RCC_OscConfig+0x2ce>
 8009d46:	bf00      	nop
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	42470000 	.word	0x42470000
 8009d50:	42470e80 	.word	0x42470e80
 8009d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d58:	f7fd fece 	bl	8007af8 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e0fd      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d6a:	4b81      	ldr	r3, [pc, #516]	; (8009f70 <HAL_RCC_OscConfig+0x4d4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f0      	beq.n	8009d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d106      	bne.n	8009d8c <HAL_RCC_OscConfig+0x2f0>
 8009d7e:	4b7d      	ldr	r3, [pc, #500]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	4a7c      	ldr	r2, [pc, #496]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	6713      	str	r3, [r2, #112]	; 0x70
 8009d8a:	e01c      	b.n	8009dc6 <HAL_RCC_OscConfig+0x32a>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d10c      	bne.n	8009dae <HAL_RCC_OscConfig+0x312>
 8009d94:	4b77      	ldr	r3, [pc, #476]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a76      	ldr	r2, [pc, #472]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009d9a:	f043 0304 	orr.w	r3, r3, #4
 8009d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009da0:	4b74      	ldr	r3, [pc, #464]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da4:	4a73      	ldr	r2, [pc, #460]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	6713      	str	r3, [r2, #112]	; 0x70
 8009dac:	e00b      	b.n	8009dc6 <HAL_RCC_OscConfig+0x32a>
 8009dae:	4b71      	ldr	r3, [pc, #452]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	4a70      	ldr	r2, [pc, #448]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dba:	4b6e      	ldr	r3, [pc, #440]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbe:	4a6d      	ldr	r2, [pc, #436]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009dc0:	f023 0304 	bic.w	r3, r3, #4
 8009dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d015      	beq.n	8009dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dce:	f7fd fe93 	bl	8007af8 <HAL_GetTick>
 8009dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dd6:	f7fd fe8f 	bl	8007af8 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0bc      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dec:	4b61      	ldr	r3, [pc, #388]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0ee      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x33a>
 8009df8:	e014      	b.n	8009e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dfa:	f7fd fe7d 	bl	8007af8 <HAL_GetTick>
 8009dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e00:	e00a      	b.n	8009e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e02:	f7fd fe79 	bl	8007af8 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e0a6      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e18:	4b56      	ldr	r3, [pc, #344]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1ee      	bne.n	8009e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d105      	bne.n	8009e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e2a:	4b52      	ldr	r3, [pc, #328]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	4a51      	ldr	r2, [pc, #324]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 8092 	beq.w	8009f64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e40:	4b4c      	ldr	r3, [pc, #304]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f003 030c 	and.w	r3, r3, #12
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d05c      	beq.n	8009f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d141      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e54:	4b48      	ldr	r3, [pc, #288]	; (8009f78 <HAL_RCC_OscConfig+0x4dc>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e5a:	f7fd fe4d 	bl	8007af8 <HAL_GetTick>
 8009e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e60:	e008      	b.n	8009e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e62:	f7fd fe49 	bl	8007af8 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e078      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e74:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1f0      	bne.n	8009e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	019b      	lsls	r3, r3, #6
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	061b      	lsls	r3, r3, #24
 8009ea4:	4933      	ldr	r1, [pc, #204]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009eaa:	4b33      	ldr	r3, [pc, #204]	; (8009f78 <HAL_RCC_OscConfig+0x4dc>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb0:	f7fd fe22 	bl	8007af8 <HAL_GetTick>
 8009eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eb6:	e008      	b.n	8009eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eb8:	f7fd fe1e 	bl	8007af8 <HAL_GetTick>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d901      	bls.n	8009eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e04d      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eca:	4b2a      	ldr	r3, [pc, #168]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f0      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x41c>
 8009ed6:	e045      	b.n	8009f64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ed8:	4b27      	ldr	r3, [pc, #156]	; (8009f78 <HAL_RCC_OscConfig+0x4dc>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ede:	f7fd fe0b 	bl	8007af8 <HAL_GetTick>
 8009ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ee6:	f7fd fe07 	bl	8007af8 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e036      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ef8:	4b1e      	ldr	r3, [pc, #120]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1f0      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x44a>
 8009f04:	e02e      	b.n	8009f64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e029      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f12:	4b18      	ldr	r3, [pc, #96]	; (8009f74 <HAL_RCC_OscConfig+0x4d8>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d11c      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d115      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d10d      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d106      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d001      	beq.n	8009f64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40007000 	.word	0x40007000
 8009f74:	40023800 	.word	0x40023800
 8009f78:	42470060 	.word	0x42470060

08009f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e0cc      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f90:	4b68      	ldr	r3, [pc, #416]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d90c      	bls.n	8009fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f9e:	4b65      	ldr	r3, [pc, #404]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fa6:	4b63      	ldr	r3, [pc, #396]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d001      	beq.n	8009fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e0b8      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d020      	beq.n	800a006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fd0:	4b59      	ldr	r3, [pc, #356]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	4a58      	ldr	r2, [pc, #352]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0308 	and.w	r3, r3, #8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fe8:	4b53      	ldr	r3, [pc, #332]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	4a52      	ldr	r2, [pc, #328]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 8009fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ff4:	4b50      	ldr	r3, [pc, #320]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	494d      	ldr	r1, [pc, #308]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a002:	4313      	orrs	r3, r2
 800a004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d044      	beq.n	800a09c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d107      	bne.n	800a02a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a01a:	4b47      	ldr	r3, [pc, #284]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d119      	bne.n	800a05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e07f      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d003      	beq.n	800a03a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a036:	2b03      	cmp	r3, #3
 800a038:	d107      	bne.n	800a04a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a03a:	4b3f      	ldr	r3, [pc, #252]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e06f      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04a:	4b3b      	ldr	r3, [pc, #236]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e067      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a05a:	4b37      	ldr	r3, [pc, #220]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f023 0203 	bic.w	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	4934      	ldr	r1, [pc, #208]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a06c:	f7fd fd44 	bl	8007af8 <HAL_GetTick>
 800a070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a072:	e00a      	b.n	800a08a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a074:	f7fd fd40 	bl	8007af8 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a082:	4293      	cmp	r3, r2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e04f      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a08a:	4b2b      	ldr	r3, [pc, #172]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 020c 	and.w	r2, r3, #12
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	429a      	cmp	r2, r3
 800a09a:	d1eb      	bne.n	800a074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a09c:	4b25      	ldr	r3, [pc, #148]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 030f 	and.w	r3, r3, #15
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d20c      	bcs.n	800a0c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0aa:	4b22      	ldr	r3, [pc, #136]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0b2:	4b20      	ldr	r3, [pc, #128]	; (800a134 <HAL_RCC_ClockConfig+0x1b8>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 030f 	and.w	r3, r3, #15
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d001      	beq.n	800a0c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e032      	b.n	800a12a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d008      	beq.n	800a0e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0d0:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4916      	ldr	r1, [pc, #88]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d009      	beq.n	800a102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0ee:	4b12      	ldr	r3, [pc, #72]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	490e      	ldr	r1, [pc, #56]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a102:	f000 f821 	bl	800a148 <HAL_RCC_GetSysClockFreq>
 800a106:	4601      	mov	r1, r0
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCC_ClockConfig+0x1bc>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	091b      	lsrs	r3, r3, #4
 800a10e:	f003 030f 	and.w	r3, r3, #15
 800a112:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <HAL_RCC_ClockConfig+0x1c0>)
 800a114:	5cd3      	ldrb	r3, [r2, r3]
 800a116:	fa21 f303 	lsr.w	r3, r1, r3
 800a11a:	4a09      	ldr	r2, [pc, #36]	; (800a140 <HAL_RCC_ClockConfig+0x1c4>)
 800a11c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a11e:	4b09      	ldr	r3, [pc, #36]	; (800a144 <HAL_RCC_ClockConfig+0x1c8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f7fd fac0 	bl	80076a8 <HAL_InitTick>

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40023c00 	.word	0x40023c00
 800a138:	40023800 	.word	0x40023800
 800a13c:	08017db4 	.word	0x08017db4
 800a140:	20000cb4 	.word	0x20000cb4
 800a144:	20000cb8 	.word	0x20000cb8

0800a148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	2300      	movs	r3, #0
 800a158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a15e:	4b63      	ldr	r3, [pc, #396]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 030c 	and.w	r3, r3, #12
 800a166:	2b04      	cmp	r3, #4
 800a168:	d007      	beq.n	800a17a <HAL_RCC_GetSysClockFreq+0x32>
 800a16a:	2b08      	cmp	r3, #8
 800a16c:	d008      	beq.n	800a180 <HAL_RCC_GetSysClockFreq+0x38>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f040 80b4 	bne.w	800a2dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a174:	4b5e      	ldr	r3, [pc, #376]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a176:	60bb      	str	r3, [r7, #8]
       break;
 800a178:	e0b3      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a17a:	4b5e      	ldr	r3, [pc, #376]	; (800a2f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a17c:	60bb      	str	r3, [r7, #8]
      break;
 800a17e:	e0b0      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a180:	4b5a      	ldr	r3, [pc, #360]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a18a:	4b58      	ldr	r3, [pc, #352]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d04a      	beq.n	800a22c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a196:	4b55      	ldr	r3, [pc, #340]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	099b      	lsrs	r3, r3, #6
 800a19c:	f04f 0400 	mov.w	r4, #0
 800a1a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1a4:	f04f 0200 	mov.w	r2, #0
 800a1a8:	ea03 0501 	and.w	r5, r3, r1
 800a1ac:	ea04 0602 	and.w	r6, r4, r2
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	f04f 0300 	mov.w	r3, #0
 800a1b8:	f04f 0400 	mov.w	r4, #0
 800a1bc:	0154      	lsls	r4, r2, #5
 800a1be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a1c2:	014b      	lsls	r3, r1, #5
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	1b49      	subs	r1, r1, r5
 800a1ca:	eb62 0206 	sbc.w	r2, r2, r6
 800a1ce:	f04f 0300 	mov.w	r3, #0
 800a1d2:	f04f 0400 	mov.w	r4, #0
 800a1d6:	0194      	lsls	r4, r2, #6
 800a1d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1dc:	018b      	lsls	r3, r1, #6
 800a1de:	1a5b      	subs	r3, r3, r1
 800a1e0:	eb64 0402 	sbc.w	r4, r4, r2
 800a1e4:	f04f 0100 	mov.w	r1, #0
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	00e2      	lsls	r2, r4, #3
 800a1ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a1f2:	00d9      	lsls	r1, r3, #3
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	195b      	adds	r3, r3, r5
 800a1fa:	eb44 0406 	adc.w	r4, r4, r6
 800a1fe:	f04f 0100 	mov.w	r1, #0
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	0262      	lsls	r2, r4, #9
 800a208:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a20c:	0259      	lsls	r1, r3, #9
 800a20e:	460b      	mov	r3, r1
 800a210:	4614      	mov	r4, r2
 800a212:	4618      	mov	r0, r3
 800a214:	4621      	mov	r1, r4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f04f 0400 	mov.w	r4, #0
 800a21c:	461a      	mov	r2, r3
 800a21e:	4623      	mov	r3, r4
 800a220:	f7f6 fd42 	bl	8000ca8 <__aeabi_uldivmod>
 800a224:	4603      	mov	r3, r0
 800a226:	460c      	mov	r4, r1
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e049      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a22c:	4b2f      	ldr	r3, [pc, #188]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	f04f 0400 	mov.w	r4, #0
 800a236:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	ea03 0501 	and.w	r5, r3, r1
 800a242:	ea04 0602 	and.w	r6, r4, r2
 800a246:	4629      	mov	r1, r5
 800a248:	4632      	mov	r2, r6
 800a24a:	f04f 0300 	mov.w	r3, #0
 800a24e:	f04f 0400 	mov.w	r4, #0
 800a252:	0154      	lsls	r4, r2, #5
 800a254:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a258:	014b      	lsls	r3, r1, #5
 800a25a:	4619      	mov	r1, r3
 800a25c:	4622      	mov	r2, r4
 800a25e:	1b49      	subs	r1, r1, r5
 800a260:	eb62 0206 	sbc.w	r2, r2, r6
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	f04f 0400 	mov.w	r4, #0
 800a26c:	0194      	lsls	r4, r2, #6
 800a26e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a272:	018b      	lsls	r3, r1, #6
 800a274:	1a5b      	subs	r3, r3, r1
 800a276:	eb64 0402 	sbc.w	r4, r4, r2
 800a27a:	f04f 0100 	mov.w	r1, #0
 800a27e:	f04f 0200 	mov.w	r2, #0
 800a282:	00e2      	lsls	r2, r4, #3
 800a284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a288:	00d9      	lsls	r1, r3, #3
 800a28a:	460b      	mov	r3, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	195b      	adds	r3, r3, r5
 800a290:	eb44 0406 	adc.w	r4, r4, r6
 800a294:	f04f 0100 	mov.w	r1, #0
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	02a2      	lsls	r2, r4, #10
 800a29e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a2a2:	0299      	lsls	r1, r3, #10
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4614      	mov	r4, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f04f 0400 	mov.w	r4, #0
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	f7f6 fcf7 	bl	8000ca8 <__aeabi_uldivmod>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	0c1b      	lsrs	r3, r3, #16
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d8:	60bb      	str	r3, [r7, #8]
      break;
 800a2da:	e002      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a2de:	60bb      	str	r3, [r7, #8]
      break;
 800a2e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ec:	40023800 	.word	0x40023800
 800a2f0:	00f42400 	.word	0x00f42400
 800a2f4:	007a1200 	.word	0x007a1200

0800a2f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2fc:	4b03      	ldr	r3, [pc, #12]	; (800a30c <HAL_RCC_GetHCLKFreq+0x14>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
}
 800a300:	4618      	mov	r0, r3
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20000cb4 	.word	0x20000cb4

0800a310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a314:	f7ff fff0 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 800a318:	4601      	mov	r1, r0
 800a31a:	4b05      	ldr	r3, [pc, #20]	; (800a330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	0a9b      	lsrs	r3, r3, #10
 800a320:	f003 0307 	and.w	r3, r3, #7
 800a324:	4a03      	ldr	r2, [pc, #12]	; (800a334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a326:	5cd3      	ldrb	r3, [r2, r3]
 800a328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	40023800 	.word	0x40023800
 800a334:	08017dc4 	.word	0x08017dc4

0800a338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a33c:	f7ff ffdc 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 800a340:	4601      	mov	r1, r0
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	0b5b      	lsrs	r3, r3, #13
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	4a03      	ldr	r2, [pc, #12]	; (800a35c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a34e:	5cd3      	ldrb	r3, [r2, r3]
 800a350:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a354:	4618      	mov	r0, r3
 800a356:	bd80      	pop	{r7, pc}
 800a358:	40023800 	.word	0x40023800
 800a35c:	08017dc4 	.word	0x08017dc4

0800a360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	220f      	movs	r2, #15
 800a36e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a370:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <HAL_RCC_GetClockConfig+0x5c>)
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f003 0203 	and.w	r2, r3, #3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a37c:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <HAL_RCC_GetClockConfig+0x5c>)
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a388:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <HAL_RCC_GetClockConfig+0x5c>)
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a394:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_RCC_GetClockConfig+0x5c>)
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	08db      	lsrs	r3, r3, #3
 800a39a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <HAL_RCC_GetClockConfig+0x60>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 020f 	and.w	r2, r3, #15
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	601a      	str	r2, [r3, #0]
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40023c00 	.word	0x40023c00

0800a3c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e01d      	b.n	800a412 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f815 	bl	800a41a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f000 f968 	bl	800a6d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f042 0201 	orr.w	r2, r2, #1
 800a444:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b06      	cmp	r3, #6
 800a456:	d007      	beq.n	800a468 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f042 0201 	orr.w	r2, r2, #1
 800a466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d122      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b02      	cmp	r3, #2
 800a498:	d11b      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f06f 0202 	mvn.w	r2, #2
 800a4a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f8ee 	bl	800a69a <HAL_TIM_IC_CaptureCallback>
 800a4be:	e005      	b.n	800a4cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f8e0 	bl	800a686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f8f1 	bl	800a6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d122      	bne.n	800a526 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f003 0304 	and.w	r3, r3, #4
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d11b      	bne.n	800a526 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f06f 0204 	mvn.w	r2, #4
 800a4f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f8c4 	bl	800a69a <HAL_TIM_IC_CaptureCallback>
 800a512:	e005      	b.n	800a520 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f8b6 	bl	800a686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f8c7 	bl	800a6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b08      	cmp	r3, #8
 800a532:	d122      	bne.n	800a57a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d11b      	bne.n	800a57a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f06f 0208 	mvn.w	r2, #8
 800a54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2204      	movs	r2, #4
 800a550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f89a 	bl	800a69a <HAL_TIM_IC_CaptureCallback>
 800a566:	e005      	b.n	800a574 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f88c 	bl	800a686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f89d 	bl	800a6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b10      	cmp	r3, #16
 800a586:	d122      	bne.n	800a5ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	2b10      	cmp	r3, #16
 800a594:	d11b      	bne.n	800a5ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f06f 0210 	mvn.w	r2, #16
 800a59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f870 	bl	800a69a <HAL_TIM_IC_CaptureCallback>
 800a5ba:	e005      	b.n	800a5c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f862 	bl	800a686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f873 	bl	800a6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d10e      	bne.n	800a5fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d107      	bne.n	800a5fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f06f 0201 	mvn.w	r2, #1
 800a5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7f8 fd65 	bl	80030c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a604:	2b80      	cmp	r3, #128	; 0x80
 800a606:	d10e      	bne.n	800a626 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d107      	bne.n	800a626 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f903 	bl	800a82c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a630:	2b40      	cmp	r3, #64	; 0x40
 800a632:	d10e      	bne.n	800a652 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63e:	2b40      	cmp	r3, #64	; 0x40
 800a640:	d107      	bne.n	800a652 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f838 	bl	800a6c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d10e      	bne.n	800a67e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d107      	bne.n	800a67e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f06f 0220 	mvn.w	r2, #32
 800a676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8cd 	bl	800a818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a67e:	bf00      	nop
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a40      	ldr	r2, [pc, #256]	; (800a7ec <TIM_Base_SetConfig+0x114>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d013      	beq.n	800a718 <TIM_Base_SetConfig+0x40>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f6:	d00f      	beq.n	800a718 <TIM_Base_SetConfig+0x40>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a3d      	ldr	r2, [pc, #244]	; (800a7f0 <TIM_Base_SetConfig+0x118>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00b      	beq.n	800a718 <TIM_Base_SetConfig+0x40>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a3c      	ldr	r2, [pc, #240]	; (800a7f4 <TIM_Base_SetConfig+0x11c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d007      	beq.n	800a718 <TIM_Base_SetConfig+0x40>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a3b      	ldr	r2, [pc, #236]	; (800a7f8 <TIM_Base_SetConfig+0x120>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d003      	beq.n	800a718 <TIM_Base_SetConfig+0x40>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a3a      	ldr	r2, [pc, #232]	; (800a7fc <TIM_Base_SetConfig+0x124>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d108      	bne.n	800a72a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a2f      	ldr	r2, [pc, #188]	; (800a7ec <TIM_Base_SetConfig+0x114>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d02b      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a738:	d027      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a2c      	ldr	r2, [pc, #176]	; (800a7f0 <TIM_Base_SetConfig+0x118>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d023      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a2b      	ldr	r2, [pc, #172]	; (800a7f4 <TIM_Base_SetConfig+0x11c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d01f      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a2a      	ldr	r2, [pc, #168]	; (800a7f8 <TIM_Base_SetConfig+0x120>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d01b      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a29      	ldr	r2, [pc, #164]	; (800a7fc <TIM_Base_SetConfig+0x124>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d017      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a28      	ldr	r2, [pc, #160]	; (800a800 <TIM_Base_SetConfig+0x128>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d013      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a27      	ldr	r2, [pc, #156]	; (800a804 <TIM_Base_SetConfig+0x12c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d00f      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a26      	ldr	r2, [pc, #152]	; (800a808 <TIM_Base_SetConfig+0x130>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00b      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a25      	ldr	r2, [pc, #148]	; (800a80c <TIM_Base_SetConfig+0x134>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d007      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a24      	ldr	r2, [pc, #144]	; (800a810 <TIM_Base_SetConfig+0x138>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d003      	beq.n	800a78a <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a23      	ldr	r2, [pc, #140]	; (800a814 <TIM_Base_SetConfig+0x13c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d108      	bne.n	800a79c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <TIM_Base_SetConfig+0x114>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d003      	beq.n	800a7d0 <TIM_Base_SetConfig+0xf8>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <TIM_Base_SetConfig+0x124>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d103      	bne.n	800a7d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	615a      	str	r2, [r3, #20]
}
 800a7de:	bf00      	nop
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40010000 	.word	0x40010000
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40010400 	.word	0x40010400
 800a800:	40014000 	.word	0x40014000
 800a804:	40014400 	.word	0x40014400
 800a808:	40014800 	.word	0x40014800
 800a80c:	40001800 	.word	0x40001800
 800a810:	40001c00 	.word	0x40001c00
 800a814:	40002000 	.word	0x40002000

0800a818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e03f      	b.n	800a8d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7fd f83c 	bl	80078e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fb6b 	bl	800af60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691a      	ldr	r2, [r3, #16]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695a      	ldr	r2, [r3, #20]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	d153      	bne.n	800a99e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <HAL_UART_Transmit_DMA+0x26>
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e04c      	b.n	800a9a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_UART_Transmit_DMA+0x38>
 800a910:	2302      	movs	r3, #2
 800a912:	e045      	b.n	800a9a0 <HAL_UART_Transmit_DMA+0xc4>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	88fa      	ldrh	r2, [r7, #6]
 800a926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	88fa      	ldrh	r2, [r7, #6]
 800a92c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2221      	movs	r2, #33	; 0x21
 800a938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <HAL_UART_Transmit_DMA+0xcc>)
 800a942:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a948:	4a18      	ldr	r2, [pc, #96]	; (800a9ac <HAL_UART_Transmit_DMA+0xd0>)
 800a94a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	4a17      	ldr	r2, [pc, #92]	; (800a9b0 <HAL_UART_Transmit_DMA+0xd4>)
 800a952:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	2200      	movs	r2, #0
 800a95a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a95c:	f107 0308 	add.w	r3, r7, #8
 800a960:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	6819      	ldr	r1, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3304      	adds	r3, #4
 800a970:	461a      	mov	r2, r3
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	f7fd fa7e 	bl	8007e74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a980:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	695a      	ldr	r2, [r3, #20]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a998:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e000      	b.n	800a9a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
  }
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	0800abf1 	.word	0x0800abf1
 800a9ac:	0800ac43 	.word	0x0800ac43
 800a9b0:	0800ac5f 	.word	0x0800ac5f

0800a9b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	f003 030f 	and.w	r3, r3, #15
 800a9e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10d      	bne.n	800aa06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_UART_IRQHandler+0x52>
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa2d 	bl	800ae5e <UART_Receive_IT>
      return;
 800aa04:	e0d1      	b.n	800abaa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80b0 	beq.w	800ab6e <HAL_UART_IRQHandler+0x1ba>
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d105      	bne.n	800aa24 <HAL_UART_IRQHandler+0x70>
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 80a5 	beq.w	800ab6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <HAL_UART_IRQHandler+0x90>
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	f043 0201 	orr.w	r2, r3, #1
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f003 0304 	and.w	r3, r3, #4
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <HAL_UART_IRQHandler+0xb0>
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5c:	f043 0202 	orr.w	r2, r3, #2
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f003 0302 	and.w	r3, r3, #2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <HAL_UART_IRQHandler+0xd0>
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d005      	beq.n	800aa84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7c:	f043 0204 	orr.w	r2, r3, #4
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f003 0308 	and.w	r3, r3, #8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00f      	beq.n	800aaae <HAL_UART_IRQHandler+0xfa>
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <HAL_UART_IRQHandler+0xee>
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa6:	f043 0208 	orr.w	r2, r3, #8
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d078      	beq.n	800aba8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	f003 0320 	and.w	r3, r3, #32
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <HAL_UART_IRQHandler+0x11c>
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	f003 0320 	and.w	r3, r3, #32
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d002      	beq.n	800aad0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f9c7 	bl	800ae5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aada:	2b40      	cmp	r3, #64	; 0x40
 800aadc:	bf0c      	ite	eq
 800aade:	2301      	moveq	r3, #1
 800aae0:	2300      	movne	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <HAL_UART_IRQHandler+0x144>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d031      	beq.n	800ab5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f910 	bl	800ad1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab08:	2b40      	cmp	r3, #64	; 0x40
 800ab0a:	d123      	bne.n	800ab54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d013      	beq.n	800ab4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab28:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <HAL_UART_IRQHandler+0x1fc>)
 800ab2a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fd f9f7 	bl	8007f24 <HAL_DMA_Abort_IT>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d016      	beq.n	800ab6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab46:	4610      	mov	r0, r2
 800ab48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4a:	e00e      	b.n	800ab6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f845 	bl	800abdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab52:	e00a      	b.n	800ab6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f841 	bl	800abdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5a:	e006      	b.n	800ab6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f83d 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ab68:	e01e      	b.n	800aba8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab6a:	bf00      	nop
    return;
 800ab6c:	e01c      	b.n	800aba8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <HAL_UART_IRQHandler+0x1d6>
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f8fd 	bl	800ad82 <UART_Transmit_IT>
    return;
 800ab88:	e00f      	b.n	800abaa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <HAL_UART_IRQHandler+0x1f6>
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f945 	bl	800ae2e <UART_EndTransmit_IT>
    return;
 800aba4:	bf00      	nop
 800aba6:	e000      	b.n	800abaa <HAL_UART_IRQHandler+0x1f6>
    return;
 800aba8:	bf00      	nop
  }
}
 800abaa:	3720      	adds	r7, #32
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	0800ad5b 	.word	0x0800ad5b

0800abb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d113      	bne.n	800ac34 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	695a      	ldr	r2, [r3, #20]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68da      	ldr	r2, [r3, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac30:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac32:	e002      	b.n	800ac3a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7fc fed7 	bl	80079e8 <HAL_UART_TxCpltCallback>
}
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff ffaf 	bl	800abb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7a:	2b80      	cmp	r3, #128	; 0x80
 800ac7c:	bf0c      	ite	eq
 800ac7e:	2301      	moveq	r3, #1
 800ac80:	2300      	movne	r3, #0
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b21      	cmp	r3, #33	; 0x21
 800ac90:	d108      	bne.n	800aca4 <UART_DMAError+0x46>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d005      	beq.n	800aca4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac9e:	68b8      	ldr	r0, [r7, #8]
 800aca0:	f000 f827 	bl	800acf2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	bf0c      	ite	eq
 800acb2:	2301      	moveq	r3, #1
 800acb4:	2300      	movne	r3, #0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b22      	cmp	r3, #34	; 0x22
 800acc4:	d108      	bne.n	800acd8 <UART_DMAError+0x7a>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800acd2:	68b8      	ldr	r0, [r7, #8]
 800acd4:	f000 f823 	bl	800ad1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acdc:	f043 0210 	orr.w	r2, r3, #16
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ace4:	68b8      	ldr	r0, [r7, #8]
 800ace6:	f7ff ff79 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ad08:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68da      	ldr	r2, [r3, #12]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad34:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	695a      	ldr	r2, [r3, #20]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0201 	bic.w	r2, r2, #1
 800ad44:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff ff31 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b21      	cmp	r3, #33	; 0x21
 800ad94:	d144      	bne.n	800ae20 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad9e:	d11a      	bne.n	800add6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adb4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d105      	bne.n	800adca <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	1c9a      	adds	r2, r3, #2
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	621a      	str	r2, [r3, #32]
 800adc8:	e00e      	b.n	800ade8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	621a      	str	r2, [r3, #32]
 800add4:	e008      	b.n	800ade8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	1c59      	adds	r1, r3, #1
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	6211      	str	r1, [r2, #32]
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adec:	b29b      	uxth	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	4619      	mov	r1, r3
 800adf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10f      	bne.n	800ae1c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68da      	ldr	r2, [r3, #12]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e000      	b.n	800ae22 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae20:	2302      	movs	r3, #2
  }
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fc fdca 	bl	80079e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b22      	cmp	r3, #34	; 0x22
 800ae70:	d171      	bne.n	800af56 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae7a:	d123      	bne.n	800aec4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae80:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10e      	bne.n	800aea8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	1c9a      	adds	r2, r3, #2
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	629a      	str	r2, [r3, #40]	; 0x28
 800aea6:	e029      	b.n	800aefc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
 800aec2:	e01b      	b.n	800aefc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10a      	bne.n	800aee2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6858      	ldr	r0, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed6:	1c59      	adds	r1, r3, #1
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6291      	str	r1, [r2, #40]	; 0x28
 800aedc:	b2c2      	uxtb	r2, r0
 800aede:	701a      	strb	r2, [r3, #0]
 800aee0:	e00c      	b.n	800aefc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	1c58      	adds	r0, r3, #1
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	6288      	str	r0, [r1, #40]	; 0x28
 800aef4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af00:	b29b      	uxth	r3, r3
 800af02:	3b01      	subs	r3, #1
 800af04:	b29b      	uxth	r3, r3
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4619      	mov	r1, r3
 800af0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d120      	bne.n	800af52 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68da      	ldr	r2, [r3, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 0220 	bic.w	r2, r2, #32
 800af1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	695a      	ldr	r2, [r3, #20]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0201 	bic.w	r2, r2, #1
 800af3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fe3d 	bl	800abc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e002      	b.n	800af58 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	e000      	b.n	800af58 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800af56:	2302      	movs	r3, #2
  }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	430a      	orrs	r2, r1
 800af7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	431a      	orrs	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800afa2:	f023 030c 	bic.w	r3, r3, #12
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6812      	ldr	r2, [r2, #0]
 800afaa:	68f9      	ldr	r1, [r7, #12]
 800afac:	430b      	orrs	r3, r1
 800afae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	430a      	orrs	r2, r1
 800afc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afce:	f040 818b 	bne.w	800b2e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4ac1      	ldr	r2, [pc, #772]	; (800b2dc <UART_SetConfig+0x37c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d005      	beq.n	800afe8 <UART_SetConfig+0x88>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4abf      	ldr	r2, [pc, #764]	; (800b2e0 <UART_SetConfig+0x380>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	f040 80bd 	bne.w	800b162 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afe8:	f7ff f9a6 	bl	800a338 <HAL_RCC_GetPCLK2Freq>
 800afec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	461d      	mov	r5, r3
 800aff2:	f04f 0600 	mov.w	r6, #0
 800aff6:	46a8      	mov	r8, r5
 800aff8:	46b1      	mov	r9, r6
 800affa:	eb18 0308 	adds.w	r3, r8, r8
 800affe:	eb49 0409 	adc.w	r4, r9, r9
 800b002:	4698      	mov	r8, r3
 800b004:	46a1      	mov	r9, r4
 800b006:	eb18 0805 	adds.w	r8, r8, r5
 800b00a:	eb49 0906 	adc.w	r9, r9, r6
 800b00e:	f04f 0100 	mov.w	r1, #0
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b01a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b01e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b022:	4688      	mov	r8, r1
 800b024:	4691      	mov	r9, r2
 800b026:	eb18 0005 	adds.w	r0, r8, r5
 800b02a:	eb49 0106 	adc.w	r1, r9, r6
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	461d      	mov	r5, r3
 800b034:	f04f 0600 	mov.w	r6, #0
 800b038:	196b      	adds	r3, r5, r5
 800b03a:	eb46 0406 	adc.w	r4, r6, r6
 800b03e:	461a      	mov	r2, r3
 800b040:	4623      	mov	r3, r4
 800b042:	f7f5 fe31 	bl	8000ca8 <__aeabi_uldivmod>
 800b046:	4603      	mov	r3, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	461a      	mov	r2, r3
 800b04c:	4ba5      	ldr	r3, [pc, #660]	; (800b2e4 <UART_SetConfig+0x384>)
 800b04e:	fba3 2302 	umull	r2, r3, r3, r2
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	461d      	mov	r5, r3
 800b05c:	f04f 0600 	mov.w	r6, #0
 800b060:	46a9      	mov	r9, r5
 800b062:	46b2      	mov	sl, r6
 800b064:	eb19 0309 	adds.w	r3, r9, r9
 800b068:	eb4a 040a 	adc.w	r4, sl, sl
 800b06c:	4699      	mov	r9, r3
 800b06e:	46a2      	mov	sl, r4
 800b070:	eb19 0905 	adds.w	r9, r9, r5
 800b074:	eb4a 0a06 	adc.w	sl, sl, r6
 800b078:	f04f 0100 	mov.w	r1, #0
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b08c:	4689      	mov	r9, r1
 800b08e:	4692      	mov	sl, r2
 800b090:	eb19 0005 	adds.w	r0, r9, r5
 800b094:	eb4a 0106 	adc.w	r1, sl, r6
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	461d      	mov	r5, r3
 800b09e:	f04f 0600 	mov.w	r6, #0
 800b0a2:	196b      	adds	r3, r5, r5
 800b0a4:	eb46 0406 	adc.w	r4, r6, r6
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4623      	mov	r3, r4
 800b0ac:	f7f5 fdfc 	bl	8000ca8 <__aeabi_uldivmod>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4b8b      	ldr	r3, [pc, #556]	; (800b2e4 <UART_SetConfig+0x384>)
 800b0b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	2164      	movs	r1, #100	; 0x64
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	3332      	adds	r3, #50	; 0x32
 800b0ca:	4a86      	ldr	r2, [pc, #536]	; (800b2e4 <UART_SetConfig+0x384>)
 800b0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0d8:	4498      	add	r8, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	461d      	mov	r5, r3
 800b0de:	f04f 0600 	mov.w	r6, #0
 800b0e2:	46a9      	mov	r9, r5
 800b0e4:	46b2      	mov	sl, r6
 800b0e6:	eb19 0309 	adds.w	r3, r9, r9
 800b0ea:	eb4a 040a 	adc.w	r4, sl, sl
 800b0ee:	4699      	mov	r9, r3
 800b0f0:	46a2      	mov	sl, r4
 800b0f2:	eb19 0905 	adds.w	r9, r9, r5
 800b0f6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b0fa:	f04f 0100 	mov.w	r1, #0
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b10a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b10e:	4689      	mov	r9, r1
 800b110:	4692      	mov	sl, r2
 800b112:	eb19 0005 	adds.w	r0, r9, r5
 800b116:	eb4a 0106 	adc.w	r1, sl, r6
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	461d      	mov	r5, r3
 800b120:	f04f 0600 	mov.w	r6, #0
 800b124:	196b      	adds	r3, r5, r5
 800b126:	eb46 0406 	adc.w	r4, r6, r6
 800b12a:	461a      	mov	r2, r3
 800b12c:	4623      	mov	r3, r4
 800b12e:	f7f5 fdbb 	bl	8000ca8 <__aeabi_uldivmod>
 800b132:	4603      	mov	r3, r0
 800b134:	460c      	mov	r4, r1
 800b136:	461a      	mov	r2, r3
 800b138:	4b6a      	ldr	r3, [pc, #424]	; (800b2e4 <UART_SetConfig+0x384>)
 800b13a:	fba3 1302 	umull	r1, r3, r3, r2
 800b13e:	095b      	lsrs	r3, r3, #5
 800b140:	2164      	movs	r1, #100	; 0x64
 800b142:	fb01 f303 	mul.w	r3, r1, r3
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	3332      	adds	r3, #50	; 0x32
 800b14c:	4a65      	ldr	r2, [pc, #404]	; (800b2e4 <UART_SetConfig+0x384>)
 800b14e:	fba2 2303 	umull	r2, r3, r2, r3
 800b152:	095b      	lsrs	r3, r3, #5
 800b154:	f003 0207 	and.w	r2, r3, #7
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4442      	add	r2, r8
 800b15e:	609a      	str	r2, [r3, #8]
 800b160:	e26f      	b.n	800b642 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b162:	f7ff f8d5 	bl	800a310 <HAL_RCC_GetPCLK1Freq>
 800b166:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	461d      	mov	r5, r3
 800b16c:	f04f 0600 	mov.w	r6, #0
 800b170:	46a8      	mov	r8, r5
 800b172:	46b1      	mov	r9, r6
 800b174:	eb18 0308 	adds.w	r3, r8, r8
 800b178:	eb49 0409 	adc.w	r4, r9, r9
 800b17c:	4698      	mov	r8, r3
 800b17e:	46a1      	mov	r9, r4
 800b180:	eb18 0805 	adds.w	r8, r8, r5
 800b184:	eb49 0906 	adc.w	r9, r9, r6
 800b188:	f04f 0100 	mov.w	r1, #0
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b194:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b198:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b19c:	4688      	mov	r8, r1
 800b19e:	4691      	mov	r9, r2
 800b1a0:	eb18 0005 	adds.w	r0, r8, r5
 800b1a4:	eb49 0106 	adc.w	r1, r9, r6
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	461d      	mov	r5, r3
 800b1ae:	f04f 0600 	mov.w	r6, #0
 800b1b2:	196b      	adds	r3, r5, r5
 800b1b4:	eb46 0406 	adc.w	r4, r6, r6
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4623      	mov	r3, r4
 800b1bc:	f7f5 fd74 	bl	8000ca8 <__aeabi_uldivmod>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4b47      	ldr	r3, [pc, #284]	; (800b2e4 <UART_SetConfig+0x384>)
 800b1c8:	fba3 2302 	umull	r2, r3, r3, r2
 800b1cc:	095b      	lsrs	r3, r3, #5
 800b1ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	461d      	mov	r5, r3
 800b1d6:	f04f 0600 	mov.w	r6, #0
 800b1da:	46a9      	mov	r9, r5
 800b1dc:	46b2      	mov	sl, r6
 800b1de:	eb19 0309 	adds.w	r3, r9, r9
 800b1e2:	eb4a 040a 	adc.w	r4, sl, sl
 800b1e6:	4699      	mov	r9, r3
 800b1e8:	46a2      	mov	sl, r4
 800b1ea:	eb19 0905 	adds.w	r9, r9, r5
 800b1ee:	eb4a 0a06 	adc.w	sl, sl, r6
 800b1f2:	f04f 0100 	mov.w	r1, #0
 800b1f6:	f04f 0200 	mov.w	r2, #0
 800b1fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b206:	4689      	mov	r9, r1
 800b208:	4692      	mov	sl, r2
 800b20a:	eb19 0005 	adds.w	r0, r9, r5
 800b20e:	eb4a 0106 	adc.w	r1, sl, r6
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	461d      	mov	r5, r3
 800b218:	f04f 0600 	mov.w	r6, #0
 800b21c:	196b      	adds	r3, r5, r5
 800b21e:	eb46 0406 	adc.w	r4, r6, r6
 800b222:	461a      	mov	r2, r3
 800b224:	4623      	mov	r3, r4
 800b226:	f7f5 fd3f 	bl	8000ca8 <__aeabi_uldivmod>
 800b22a:	4603      	mov	r3, r0
 800b22c:	460c      	mov	r4, r1
 800b22e:	461a      	mov	r2, r3
 800b230:	4b2c      	ldr	r3, [pc, #176]	; (800b2e4 <UART_SetConfig+0x384>)
 800b232:	fba3 1302 	umull	r1, r3, r3, r2
 800b236:	095b      	lsrs	r3, r3, #5
 800b238:	2164      	movs	r1, #100	; 0x64
 800b23a:	fb01 f303 	mul.w	r3, r1, r3
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	3332      	adds	r3, #50	; 0x32
 800b244:	4a27      	ldr	r2, [pc, #156]	; (800b2e4 <UART_SetConfig+0x384>)
 800b246:	fba2 2303 	umull	r2, r3, r2, r3
 800b24a:	095b      	lsrs	r3, r3, #5
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b252:	4498      	add	r8, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	461d      	mov	r5, r3
 800b258:	f04f 0600 	mov.w	r6, #0
 800b25c:	46a9      	mov	r9, r5
 800b25e:	46b2      	mov	sl, r6
 800b260:	eb19 0309 	adds.w	r3, r9, r9
 800b264:	eb4a 040a 	adc.w	r4, sl, sl
 800b268:	4699      	mov	r9, r3
 800b26a:	46a2      	mov	sl, r4
 800b26c:	eb19 0905 	adds.w	r9, r9, r5
 800b270:	eb4a 0a06 	adc.w	sl, sl, r6
 800b274:	f04f 0100 	mov.w	r1, #0
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b288:	4689      	mov	r9, r1
 800b28a:	4692      	mov	sl, r2
 800b28c:	eb19 0005 	adds.w	r0, r9, r5
 800b290:	eb4a 0106 	adc.w	r1, sl, r6
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	461d      	mov	r5, r3
 800b29a:	f04f 0600 	mov.w	r6, #0
 800b29e:	196b      	adds	r3, r5, r5
 800b2a0:	eb46 0406 	adc.w	r4, r6, r6
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	f7f5 fcfe 	bl	8000ca8 <__aeabi_uldivmod>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	4b0c      	ldr	r3, [pc, #48]	; (800b2e4 <UART_SetConfig+0x384>)
 800b2b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b2b8:	095b      	lsrs	r3, r3, #5
 800b2ba:	2164      	movs	r1, #100	; 0x64
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	3332      	adds	r3, #50	; 0x32
 800b2c6:	4a07      	ldr	r2, [pc, #28]	; (800b2e4 <UART_SetConfig+0x384>)
 800b2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	f003 0207 	and.w	r2, r3, #7
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4442      	add	r2, r8
 800b2d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b2da:	e1b2      	b.n	800b642 <UART_SetConfig+0x6e2>
 800b2dc:	40011000 	.word	0x40011000
 800b2e0:	40011400 	.word	0x40011400
 800b2e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4ad7      	ldr	r2, [pc, #860]	; (800b64c <UART_SetConfig+0x6ec>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d005      	beq.n	800b2fe <UART_SetConfig+0x39e>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4ad6      	ldr	r2, [pc, #856]	; (800b650 <UART_SetConfig+0x6f0>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	f040 80d1 	bne.w	800b4a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2fe:	f7ff f81b 	bl	800a338 <HAL_RCC_GetPCLK2Freq>
 800b302:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	469a      	mov	sl, r3
 800b308:	f04f 0b00 	mov.w	fp, #0
 800b30c:	46d0      	mov	r8, sl
 800b30e:	46d9      	mov	r9, fp
 800b310:	eb18 0308 	adds.w	r3, r8, r8
 800b314:	eb49 0409 	adc.w	r4, r9, r9
 800b318:	4698      	mov	r8, r3
 800b31a:	46a1      	mov	r9, r4
 800b31c:	eb18 080a 	adds.w	r8, r8, sl
 800b320:	eb49 090b 	adc.w	r9, r9, fp
 800b324:	f04f 0100 	mov.w	r1, #0
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b330:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b334:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b338:	4688      	mov	r8, r1
 800b33a:	4691      	mov	r9, r2
 800b33c:	eb1a 0508 	adds.w	r5, sl, r8
 800b340:	eb4b 0609 	adc.w	r6, fp, r9
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4619      	mov	r1, r3
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	f04f 0400 	mov.w	r4, #0
 800b356:	0094      	lsls	r4, r2, #2
 800b358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b35c:	008b      	lsls	r3, r1, #2
 800b35e:	461a      	mov	r2, r3
 800b360:	4623      	mov	r3, r4
 800b362:	4628      	mov	r0, r5
 800b364:	4631      	mov	r1, r6
 800b366:	f7f5 fc9f 	bl	8000ca8 <__aeabi_uldivmod>
 800b36a:	4603      	mov	r3, r0
 800b36c:	460c      	mov	r4, r1
 800b36e:	461a      	mov	r2, r3
 800b370:	4bb8      	ldr	r3, [pc, #736]	; (800b654 <UART_SetConfig+0x6f4>)
 800b372:	fba3 2302 	umull	r2, r3, r3, r2
 800b376:	095b      	lsrs	r3, r3, #5
 800b378:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	469b      	mov	fp, r3
 800b380:	f04f 0c00 	mov.w	ip, #0
 800b384:	46d9      	mov	r9, fp
 800b386:	46e2      	mov	sl, ip
 800b388:	eb19 0309 	adds.w	r3, r9, r9
 800b38c:	eb4a 040a 	adc.w	r4, sl, sl
 800b390:	4699      	mov	r9, r3
 800b392:	46a2      	mov	sl, r4
 800b394:	eb19 090b 	adds.w	r9, r9, fp
 800b398:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b39c:	f04f 0100 	mov.w	r1, #0
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	4692      	mov	sl, r2
 800b3b4:	eb1b 0509 	adds.w	r5, fp, r9
 800b3b8:	eb4c 060a 	adc.w	r6, ip, sl
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	f04f 0400 	mov.w	r4, #0
 800b3ce:	0094      	lsls	r4, r2, #2
 800b3d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b3d4:	008b      	lsls	r3, r1, #2
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4623      	mov	r3, r4
 800b3da:	4628      	mov	r0, r5
 800b3dc:	4631      	mov	r1, r6
 800b3de:	f7f5 fc63 	bl	8000ca8 <__aeabi_uldivmod>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	4b9a      	ldr	r3, [pc, #616]	; (800b654 <UART_SetConfig+0x6f4>)
 800b3ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	2164      	movs	r1, #100	; 0x64
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	3332      	adds	r3, #50	; 0x32
 800b3fc:	4a95      	ldr	r2, [pc, #596]	; (800b654 <UART_SetConfig+0x6f4>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b408:	4498      	add	r8, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	469b      	mov	fp, r3
 800b40e:	f04f 0c00 	mov.w	ip, #0
 800b412:	46d9      	mov	r9, fp
 800b414:	46e2      	mov	sl, ip
 800b416:	eb19 0309 	adds.w	r3, r9, r9
 800b41a:	eb4a 040a 	adc.w	r4, sl, sl
 800b41e:	4699      	mov	r9, r3
 800b420:	46a2      	mov	sl, r4
 800b422:	eb19 090b 	adds.w	r9, r9, fp
 800b426:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b42a:	f04f 0100 	mov.w	r1, #0
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b436:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b43a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b43e:	4689      	mov	r9, r1
 800b440:	4692      	mov	sl, r2
 800b442:	eb1b 0509 	adds.w	r5, fp, r9
 800b446:	eb4c 060a 	adc.w	r6, ip, sl
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4619      	mov	r1, r3
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	f04f 0400 	mov.w	r4, #0
 800b45c:	0094      	lsls	r4, r2, #2
 800b45e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b462:	008b      	lsls	r3, r1, #2
 800b464:	461a      	mov	r2, r3
 800b466:	4623      	mov	r3, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	4631      	mov	r1, r6
 800b46c:	f7f5 fc1c 	bl	8000ca8 <__aeabi_uldivmod>
 800b470:	4603      	mov	r3, r0
 800b472:	460c      	mov	r4, r1
 800b474:	461a      	mov	r2, r3
 800b476:	4b77      	ldr	r3, [pc, #476]	; (800b654 <UART_SetConfig+0x6f4>)
 800b478:	fba3 1302 	umull	r1, r3, r3, r2
 800b47c:	095b      	lsrs	r3, r3, #5
 800b47e:	2164      	movs	r1, #100	; 0x64
 800b480:	fb01 f303 	mul.w	r3, r1, r3
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	3332      	adds	r3, #50	; 0x32
 800b48a:	4a72      	ldr	r2, [pc, #456]	; (800b654 <UART_SetConfig+0x6f4>)
 800b48c:	fba2 2303 	umull	r2, r3, r2, r3
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	f003 020f 	and.w	r2, r3, #15
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4442      	add	r2, r8
 800b49c:	609a      	str	r2, [r3, #8]
 800b49e:	e0d0      	b.n	800b642 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4a0:	f7fe ff36 	bl	800a310 <HAL_RCC_GetPCLK1Freq>
 800b4a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	469a      	mov	sl, r3
 800b4aa:	f04f 0b00 	mov.w	fp, #0
 800b4ae:	46d0      	mov	r8, sl
 800b4b0:	46d9      	mov	r9, fp
 800b4b2:	eb18 0308 	adds.w	r3, r8, r8
 800b4b6:	eb49 0409 	adc.w	r4, r9, r9
 800b4ba:	4698      	mov	r8, r3
 800b4bc:	46a1      	mov	r9, r4
 800b4be:	eb18 080a 	adds.w	r8, r8, sl
 800b4c2:	eb49 090b 	adc.w	r9, r9, fp
 800b4c6:	f04f 0100 	mov.w	r1, #0
 800b4ca:	f04f 0200 	mov.w	r2, #0
 800b4ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b4d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b4d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b4da:	4688      	mov	r8, r1
 800b4dc:	4691      	mov	r9, r2
 800b4de:	eb1a 0508 	adds.w	r5, sl, r8
 800b4e2:	eb4b 0609 	adc.w	r6, fp, r9
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	f04f 0400 	mov.w	r4, #0
 800b4f8:	0094      	lsls	r4, r2, #2
 800b4fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4fe:	008b      	lsls	r3, r1, #2
 800b500:	461a      	mov	r2, r3
 800b502:	4623      	mov	r3, r4
 800b504:	4628      	mov	r0, r5
 800b506:	4631      	mov	r1, r6
 800b508:	f7f5 fbce 	bl	8000ca8 <__aeabi_uldivmod>
 800b50c:	4603      	mov	r3, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	461a      	mov	r2, r3
 800b512:	4b50      	ldr	r3, [pc, #320]	; (800b654 <UART_SetConfig+0x6f4>)
 800b514:	fba3 2302 	umull	r2, r3, r3, r2
 800b518:	095b      	lsrs	r3, r3, #5
 800b51a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	469b      	mov	fp, r3
 800b522:	f04f 0c00 	mov.w	ip, #0
 800b526:	46d9      	mov	r9, fp
 800b528:	46e2      	mov	sl, ip
 800b52a:	eb19 0309 	adds.w	r3, r9, r9
 800b52e:	eb4a 040a 	adc.w	r4, sl, sl
 800b532:	4699      	mov	r9, r3
 800b534:	46a2      	mov	sl, r4
 800b536:	eb19 090b 	adds.w	r9, r9, fp
 800b53a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b53e:	f04f 0100 	mov.w	r1, #0
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b54a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b54e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b552:	4689      	mov	r9, r1
 800b554:	4692      	mov	sl, r2
 800b556:	eb1b 0509 	adds.w	r5, fp, r9
 800b55a:	eb4c 060a 	adc.w	r6, ip, sl
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4619      	mov	r1, r3
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	f04f 0400 	mov.w	r4, #0
 800b570:	0094      	lsls	r4, r2, #2
 800b572:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b576:	008b      	lsls	r3, r1, #2
 800b578:	461a      	mov	r2, r3
 800b57a:	4623      	mov	r3, r4
 800b57c:	4628      	mov	r0, r5
 800b57e:	4631      	mov	r1, r6
 800b580:	f7f5 fb92 	bl	8000ca8 <__aeabi_uldivmod>
 800b584:	4603      	mov	r3, r0
 800b586:	460c      	mov	r4, r1
 800b588:	461a      	mov	r2, r3
 800b58a:	4b32      	ldr	r3, [pc, #200]	; (800b654 <UART_SetConfig+0x6f4>)
 800b58c:	fba3 1302 	umull	r1, r3, r3, r2
 800b590:	095b      	lsrs	r3, r3, #5
 800b592:	2164      	movs	r1, #100	; 0x64
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	3332      	adds	r3, #50	; 0x32
 800b59e:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <UART_SetConfig+0x6f4>)
 800b5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a4:	095b      	lsrs	r3, r3, #5
 800b5a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5aa:	4498      	add	r8, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	469b      	mov	fp, r3
 800b5b0:	f04f 0c00 	mov.w	ip, #0
 800b5b4:	46d9      	mov	r9, fp
 800b5b6:	46e2      	mov	sl, ip
 800b5b8:	eb19 0309 	adds.w	r3, r9, r9
 800b5bc:	eb4a 040a 	adc.w	r4, sl, sl
 800b5c0:	4699      	mov	r9, r3
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	eb19 090b 	adds.w	r9, r9, fp
 800b5c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b5cc:	f04f 0100 	mov.w	r1, #0
 800b5d0:	f04f 0200 	mov.w	r2, #0
 800b5d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	4692      	mov	sl, r2
 800b5e4:	eb1b 0509 	adds.w	r5, fp, r9
 800b5e8:	eb4c 060a 	adc.w	r6, ip, sl
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f04f 0200 	mov.w	r2, #0
 800b5f6:	f04f 0300 	mov.w	r3, #0
 800b5fa:	f04f 0400 	mov.w	r4, #0
 800b5fe:	0094      	lsls	r4, r2, #2
 800b600:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b604:	008b      	lsls	r3, r1, #2
 800b606:	461a      	mov	r2, r3
 800b608:	4623      	mov	r3, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	4631      	mov	r1, r6
 800b60e:	f7f5 fb4b 	bl	8000ca8 <__aeabi_uldivmod>
 800b612:	4603      	mov	r3, r0
 800b614:	460c      	mov	r4, r1
 800b616:	461a      	mov	r2, r3
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <UART_SetConfig+0x6f4>)
 800b61a:	fba3 1302 	umull	r1, r3, r3, r2
 800b61e:	095b      	lsrs	r3, r3, #5
 800b620:	2164      	movs	r1, #100	; 0x64
 800b622:	fb01 f303 	mul.w	r3, r1, r3
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	3332      	adds	r3, #50	; 0x32
 800b62c:	4a09      	ldr	r2, [pc, #36]	; (800b654 <UART_SetConfig+0x6f4>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	095b      	lsrs	r3, r3, #5
 800b634:	f003 020f 	and.w	r2, r3, #15
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4442      	add	r2, r8
 800b63e:	609a      	str	r2, [r3, #8]
}
 800b640:	e7ff      	b.n	800b642 <UART_SetConfig+0x6e2>
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64c:	40011000 	.word	0x40011000
 800b650:	40011400 	.word	0x40011400
 800b654:	51eb851f 	.word	0x51eb851f

0800b658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b658:	b084      	sub	sp, #16
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	f107 001c 	add.w	r0, r7, #28
 800b666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d122      	bne.n	800b6b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d105      	bne.n	800b6aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 fa7c 	bl	800cba8 <USB_CoreReset>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]
 800b6b4:	e01a      	b.n	800b6ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 fa70 	bl	800cba8 <USB_CoreReset>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d106      	bne.n	800b6e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b6de:	e005      	b.n	800b6ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d10b      	bne.n	800b70a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f043 0206 	orr.w	r2, r3, #6
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b716:	b004      	add	sp, #16
 800b718:	4770      	bx	lr
	...

0800b71c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	4613      	mov	r3, r2
 800b728:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d165      	bne.n	800b7fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	4a41      	ldr	r2, [pc, #260]	; (800b838 <USB_SetTurnaroundTime+0x11c>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d906      	bls.n	800b746 <USB_SetTurnaroundTime+0x2a>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4a40      	ldr	r2, [pc, #256]	; (800b83c <USB_SetTurnaroundTime+0x120>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d802      	bhi.n	800b746 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b740:	230f      	movs	r3, #15
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	e062      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	4a3c      	ldr	r2, [pc, #240]	; (800b83c <USB_SetTurnaroundTime+0x120>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d906      	bls.n	800b75c <USB_SetTurnaroundTime+0x40>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4a3b      	ldr	r2, [pc, #236]	; (800b840 <USB_SetTurnaroundTime+0x124>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d802      	bhi.n	800b75c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b756:	230e      	movs	r3, #14
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	e057      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4a38      	ldr	r2, [pc, #224]	; (800b840 <USB_SetTurnaroundTime+0x124>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d906      	bls.n	800b772 <USB_SetTurnaroundTime+0x56>
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4a37      	ldr	r2, [pc, #220]	; (800b844 <USB_SetTurnaroundTime+0x128>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d802      	bhi.n	800b772 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b76c:	230d      	movs	r3, #13
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	e04c      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	4a33      	ldr	r2, [pc, #204]	; (800b844 <USB_SetTurnaroundTime+0x128>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d906      	bls.n	800b788 <USB_SetTurnaroundTime+0x6c>
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	4a32      	ldr	r2, [pc, #200]	; (800b848 <USB_SetTurnaroundTime+0x12c>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d802      	bhi.n	800b788 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b782:	230c      	movs	r3, #12
 800b784:	617b      	str	r3, [r7, #20]
 800b786:	e041      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	4a2f      	ldr	r2, [pc, #188]	; (800b848 <USB_SetTurnaroundTime+0x12c>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d906      	bls.n	800b79e <USB_SetTurnaroundTime+0x82>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4a2e      	ldr	r2, [pc, #184]	; (800b84c <USB_SetTurnaroundTime+0x130>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d802      	bhi.n	800b79e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b798:	230b      	movs	r3, #11
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e036      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	4a2a      	ldr	r2, [pc, #168]	; (800b84c <USB_SetTurnaroundTime+0x130>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d906      	bls.n	800b7b4 <USB_SetTurnaroundTime+0x98>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4a29      	ldr	r2, [pc, #164]	; (800b850 <USB_SetTurnaroundTime+0x134>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d802      	bhi.n	800b7b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7ae:	230a      	movs	r3, #10
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e02b      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4a26      	ldr	r2, [pc, #152]	; (800b850 <USB_SetTurnaroundTime+0x134>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d906      	bls.n	800b7ca <USB_SetTurnaroundTime+0xae>
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4a25      	ldr	r2, [pc, #148]	; (800b854 <USB_SetTurnaroundTime+0x138>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d802      	bhi.n	800b7ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7c4:	2309      	movs	r3, #9
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e020      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	4a21      	ldr	r2, [pc, #132]	; (800b854 <USB_SetTurnaroundTime+0x138>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d906      	bls.n	800b7e0 <USB_SetTurnaroundTime+0xc4>
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	4a20      	ldr	r2, [pc, #128]	; (800b858 <USB_SetTurnaroundTime+0x13c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d802      	bhi.n	800b7e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7da:	2308      	movs	r3, #8
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e015      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4a1d      	ldr	r2, [pc, #116]	; (800b858 <USB_SetTurnaroundTime+0x13c>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d906      	bls.n	800b7f6 <USB_SetTurnaroundTime+0xda>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4a1c      	ldr	r2, [pc, #112]	; (800b85c <USB_SetTurnaroundTime+0x140>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d802      	bhi.n	800b7f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7f0:	2307      	movs	r3, #7
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	e00a      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7f6:	2306      	movs	r3, #6
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	e007      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b802:	2309      	movs	r3, #9
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e001      	b.n	800b80c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b808:	2309      	movs	r3, #9
 800b80a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	029b      	lsls	r3, r3, #10
 800b820:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b824:	431a      	orrs	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	00d8acbf 	.word	0x00d8acbf
 800b83c:	00e4e1bf 	.word	0x00e4e1bf
 800b840:	00f423ff 	.word	0x00f423ff
 800b844:	0106737f 	.word	0x0106737f
 800b848:	011a499f 	.word	0x011a499f
 800b84c:	01312cff 	.word	0x01312cff
 800b850:	014ca43f 	.word	0x014ca43f
 800b854:	016e35ff 	.word	0x016e35ff
 800b858:	01a6ab1f 	.word	0x01a6ab1f
 800b85c:	01e847ff 	.word	0x01e847ff

0800b860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	f043 0201 	orr.w	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f023 0201 	bic.w	r2, r3, #1
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d106      	bne.n	800b8d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	60da      	str	r2, [r3, #12]
 800b8ce:	e00b      	b.n	800b8e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60da      	str	r2, [r3, #12]
 800b8e2:	e001      	b.n	800b8e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e003      	b.n	800b8f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b8e8:	2032      	movs	r0, #50	; 0x32
 800b8ea:	f7fc f911 	bl	8007b10 <HAL_Delay>

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b086      	sub	sp, #24
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b912:	2300      	movs	r3, #0
 800b914:	613b      	str	r3, [r7, #16]
 800b916:	e009      	b.n	800b92c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3340      	adds	r3, #64	; 0x40
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	2200      	movs	r2, #0
 800b924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3301      	adds	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2b0e      	cmp	r3, #14
 800b930:	d9f2      	bls.n	800b918 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d112      	bne.n	800b95e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b948:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
 800b95c:	e00b      	b.n	800b976 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b97c:	461a      	mov	r2, r3
 800b97e:	2300      	movs	r3, #0
 800b980:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b988:	4619      	mov	r1, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b990:	461a      	mov	r2, r3
 800b992:	680b      	ldr	r3, [r1, #0]
 800b994:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d10c      	bne.n	800b9b6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d104      	bne.n	800b9ac <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f961 	bl	800bc6c <USB_SetDevSpeed>
 800b9aa:	e008      	b.n	800b9be <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f95c 	bl	800bc6c <USB_SetDevSpeed>
 800b9b4:	e003      	b.n	800b9be <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9b6:	2103      	movs	r1, #3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f957 	bl	800bc6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9be:	2110      	movs	r1, #16
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f90b 	bl	800bbdc <USB_FlushTxFifo>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f929 	bl	800bc28 <USB_FlushRxFifo>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	461a      	mov	r2, r3
 800ba00:	2300      	movs	r3, #0
 800ba02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba04:	2300      	movs	r3, #0
 800ba06:	613b      	str	r3, [r7, #16]
 800ba08:	e043      	b.n	800ba92 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	015a      	lsls	r2, r3, #5
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4413      	add	r3, r2
 800ba12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba20:	d118      	bne.n	800ba54 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba34:	461a      	mov	r2, r3
 800ba36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	e013      	b.n	800ba66 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	e008      	b.n	800ba66 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba60:	461a      	mov	r2, r3
 800ba62:	2300      	movs	r3, #0
 800ba64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba72:	461a      	mov	r2, r3
 800ba74:	2300      	movs	r3, #0
 800ba76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba84:	461a      	mov	r2, r3
 800ba86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d3b7      	bcc.n	800ba0a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	613b      	str	r3, [r7, #16]
 800ba9e:	e043      	b.n	800bb28 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bab6:	d118      	bne.n	800baea <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baca:	461a      	mov	r2, r3
 800bacc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	e013      	b.n	800bafc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae0:	461a      	mov	r2, r3
 800bae2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	e008      	b.n	800bafc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	461a      	mov	r2, r3
 800baf8:	2300      	movs	r3, #0
 800bafa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	015a      	lsls	r2, r3, #5
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb08:	461a      	mov	r2, r3
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	3301      	adds	r3, #1
 800bb26:	613b      	str	r3, [r7, #16]
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d3b7      	bcc.n	800baa0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb42:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d111      	bne.n	800bb6e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb50:	461a      	mov	r2, r3
 800bb52:	4b20      	ldr	r3, [pc, #128]	; (800bbd4 <USB_DevInit+0x2dc>)
 800bb54:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb68:	f043 0303 	orr.w	r3, r3, #3
 800bb6c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	f043 0210 	orr.w	r2, r3, #16
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	699a      	ldr	r2, [r3, #24]
 800bb92:	4b11      	ldr	r3, [pc, #68]	; (800bbd8 <USB_DevInit+0x2e0>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f043 0208 	orr.w	r2, r3, #8
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d107      	bne.n	800bbc2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbba:	f043 0304 	orr.w	r3, r3, #4
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbce:	b004      	add	sp, #16
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	00800100 	.word	0x00800100
 800bbd8:	803c3800 	.word	0x803c3800

0800bbdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	019b      	lsls	r3, r3, #6
 800bbee:	f043 0220 	orr.w	r2, r3, #32
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4a09      	ldr	r2, [pc, #36]	; (800bc24 <USB_FlushTxFifo+0x48>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d901      	bls.n	800bc08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e006      	b.n	800bc16 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	f003 0320 	and.w	r3, r3, #32
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d0f0      	beq.n	800bbf6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	00030d40 	.word	0x00030d40

0800bc28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2210      	movs	r2, #16
 800bc38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4a09      	ldr	r2, [pc, #36]	; (800bc68 <USB_FlushRxFifo+0x40>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d901      	bls.n	800bc4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	e006      	b.n	800bc5a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	f003 0310 	and.w	r3, r3, #16
 800bc54:	2b10      	cmp	r3, #16
 800bc56:	d0f0      	beq.n	800bc3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	00030d40 	.word	0x00030d40

0800bc6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b087      	sub	sp, #28
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f003 0306 	and.w	r3, r3, #6
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d102      	bne.n	800bcc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e00a      	b.n	800bcda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d002      	beq.n	800bcd0 <USB_GetDevSpeed+0x32>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b06      	cmp	r3, #6
 800bcce:	d102      	bne.n	800bcd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	75fb      	strb	r3, [r7, #23]
 800bcd4:	e001      	b.n	800bcda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcd6:	230f      	movs	r3, #15
 800bcd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d13a      	bne.n	800bd7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0a:	69da      	ldr	r2, [r3, #28]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	2101      	movs	r1, #1
 800bd16:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd22:	4313      	orrs	r3, r2
 800bd24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d155      	bne.n	800bde8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	78db      	ldrb	r3, [r3, #3]
 800bd56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	059b      	lsls	r3, r3, #22
 800bd5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd60:	4313      	orrs	r3, r2
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	0151      	lsls	r1, r2, #5
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	440a      	add	r2, r1
 800bd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	e036      	b.n	800bde8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd80:	69da      	ldr	r2, [r3, #28]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 030f 	and.w	r3, r3, #15
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd90:	041b      	lsls	r3, r3, #16
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d11a      	bne.n	800bde8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	78db      	ldrb	r3, [r3, #3]
 800bdcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdce:	430b      	orrs	r3, r1
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	0151      	lsls	r1, r2, #5
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	440a      	add	r2, r1
 800bdda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	785b      	ldrb	r3, [r3, #1]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d135      	bne.n	800be80 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	2101      	movs	r1, #1
 800be26:	fa01 f303 	lsl.w	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	43db      	mvns	r3, r3
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be34:	4013      	ands	r3, r2
 800be36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3e:	69da      	ldr	r2, [r3, #28]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f003 030f 	and.w	r3, r3, #15
 800be48:	2101      	movs	r1, #1
 800be4a:	fa01 f303 	lsl.w	r3, r1, r3
 800be4e:	b29b      	uxth	r3, r3
 800be50:	43db      	mvns	r3, r3
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be58:	4013      	ands	r3, r2
 800be5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	0159      	lsls	r1, r3, #5
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	440b      	add	r3, r1
 800be72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be76:	4619      	mov	r1, r3
 800be78:	4b1f      	ldr	r3, [pc, #124]	; (800bef8 <USB_DeactivateEndpoint+0x100>)
 800be7a:	4013      	ands	r3, r2
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	e034      	b.n	800beea <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	2101      	movs	r1, #1
 800be92:	fa01 f303 	lsl.w	r3, r1, r3
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	43db      	mvns	r3, r3
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bea0:	4013      	ands	r3, r2
 800bea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beaa:	69da      	ldr	r2, [r3, #28]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	2101      	movs	r1, #1
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	43db      	mvns	r3, r3
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bec4:	4013      	ands	r3, r2
 800bec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	0159      	lsls	r1, r3, #5
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	440b      	add	r3, r1
 800bede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee2:	4619      	mov	r1, r3
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <USB_DeactivateEndpoint+0x104>)
 800bee6:	4013      	ands	r3, r2
 800bee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	ec337800 	.word	0xec337800
 800befc:	eff37800 	.word	0xeff37800

0800bf00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	f040 815c 	bne.w	800c1da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d132      	bne.n	800bf90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	015a      	lsls	r2, r3, #5
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	0151      	lsls	r1, r2, #5
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	440a      	add	r2, r1
 800bf40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	015a      	lsls	r2, r3, #5
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	4413      	add	r3, r2
 800bf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	0151      	lsls	r1, r2, #5
 800bf60:	69fa      	ldr	r2, [r7, #28]
 800bf62:	440a      	add	r2, r1
 800bf64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	015a      	lsls	r2, r3, #5
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	4413      	add	r3, r2
 800bf76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	69fa      	ldr	r2, [r7, #28]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf88:	0cdb      	lsrs	r3, r3, #19
 800bf8a:	04db      	lsls	r3, r3, #19
 800bf8c:	6113      	str	r3, [r2, #16]
 800bf8e:	e074      	b.n	800c07a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfaa:	0cdb      	lsrs	r3, r3, #19
 800bfac:	04db      	lsls	r3, r3, #19
 800bfae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	0151      	lsls	r1, r2, #5
 800bfc2:	69fa      	ldr	r2, [r7, #28]
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe0:	691a      	ldr	r2, [r3, #16]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	440b      	add	r3, r1
 800bfec:	1e59      	subs	r1, r3, #1
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	fbb1 f3f3 	udiv	r3, r1, r3
 800bff6:	04d9      	lsls	r1, r3, #19
 800bff8:	4b9d      	ldr	r3, [pc, #628]	; (800c270 <USB_EPStartXfer+0x370>)
 800bffa:	400b      	ands	r3, r1
 800bffc:	69b9      	ldr	r1, [r7, #24]
 800bffe:	0148      	lsls	r0, r1, #5
 800c000:	69f9      	ldr	r1, [r7, #28]
 800c002:	4401      	add	r1, r0
 800c004:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c008:	4313      	orrs	r3, r2
 800c00a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	4413      	add	r3, r2
 800c014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c018:	691a      	ldr	r2, [r3, #16]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c022:	69b9      	ldr	r1, [r7, #24]
 800c024:	0148      	lsls	r0, r1, #5
 800c026:	69f9      	ldr	r1, [r7, #28]
 800c028:	4401      	add	r1, r0
 800c02a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c02e:	4313      	orrs	r3, r2
 800c030:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	78db      	ldrb	r3, [r3, #3]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d11f      	bne.n	800c07a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	0151      	lsls	r1, r2, #5
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	440a      	add	r2, r1
 800c050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c054:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c058:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	4413      	add	r3, r2
 800c062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	0151      	lsls	r1, r2, #5
 800c06c:	69fa      	ldr	r2, [r7, #28]
 800c06e:	440a      	add	r2, r1
 800c070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c078:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d14b      	bne.n	800c118 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c094:	461a      	mov	r2, r3
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	78db      	ldrb	r3, [r3, #3]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d128      	bne.n	800c0f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d110      	bne.n	800c0d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	0151      	lsls	r1, r2, #5
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	440a      	add	r2, r1
 800c0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	e00f      	b.n	800c0f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	0151      	lsls	r1, r2, #5
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	440a      	add	r2, r1
 800c0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	015a      	lsls	r2, r3, #5
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	0151      	lsls	r1, r2, #5
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	440a      	add	r2, r1
 800c10c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	e12f      	b.n	800c378 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	0151      	lsls	r1, r2, #5
 800c12a:	69fa      	ldr	r2, [r7, #28]
 800c12c:	440a      	add	r2, r1
 800c12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c136:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	78db      	ldrb	r3, [r3, #3]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d015      	beq.n	800c16c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	f000 8117 	beq.w	800c378 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	2101      	movs	r1, #1
 800c15c:	fa01 f303 	lsl.w	r3, r1, r3
 800c160:	69f9      	ldr	r1, [r7, #28]
 800c162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c166:	4313      	orrs	r3, r2
 800c168:	634b      	str	r3, [r1, #52]	; 0x34
 800c16a:	e105      	b.n	800c378 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d110      	bne.n	800c19e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	0151      	lsls	r1, r2, #5
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	440a      	add	r2, r1
 800c192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	e00f      	b.n	800c1be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	69fa      	ldr	r2, [r7, #28]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	68d9      	ldr	r1, [r3, #12]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	b298      	uxth	r0, r3
 800c1cc:	79fb      	ldrb	r3, [r7, #7]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 fa2b 	bl	800c62e <USB_WritePacket>
 800c1d8:	e0ce      	b.n	800c378 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	0151      	lsls	r1, r2, #5
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f4:	0cdb      	lsrs	r3, r3, #19
 800c1f6:	04db      	lsls	r3, r3, #19
 800c1f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	0151      	lsls	r1, r2, #5
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	440a      	add	r2, r1
 800c210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c214:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c218:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c21c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d126      	bne.n	800c274 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c23c:	69b9      	ldr	r1, [r7, #24]
 800c23e:	0148      	lsls	r0, r1, #5
 800c240:	69f9      	ldr	r1, [r7, #28]
 800c242:	4401      	add	r1, r0
 800c244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c248:	4313      	orrs	r3, r2
 800c24a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	0151      	lsls	r1, r2, #5
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	440a      	add	r2, r1
 800c262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c26a:	6113      	str	r3, [r2, #16]
 800c26c:	e036      	b.n	800c2dc <USB_EPStartXfer+0x3dc>
 800c26e:	bf00      	nop
 800c270:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	695a      	ldr	r2, [r3, #20]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	4413      	add	r3, r2
 800c27e:	1e5a      	subs	r2, r3, #1
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	fbb2 f3f3 	udiv	r3, r2, r3
 800c288:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c296:	691a      	ldr	r2, [r3, #16]
 800c298:	8afb      	ldrh	r3, [r7, #22]
 800c29a:	04d9      	lsls	r1, r3, #19
 800c29c:	4b39      	ldr	r3, [pc, #228]	; (800c384 <USB_EPStartXfer+0x484>)
 800c29e:	400b      	ands	r3, r1
 800c2a0:	69b9      	ldr	r1, [r7, #24]
 800c2a2:	0148      	lsls	r0, r1, #5
 800c2a4:	69f9      	ldr	r1, [r7, #28]
 800c2a6:	4401      	add	r1, r0
 800c2a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2bc:	691a      	ldr	r2, [r3, #16]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	8af9      	ldrh	r1, [r7, #22]
 800c2c4:	fb01 f303 	mul.w	r3, r1, r3
 800c2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2cc:	69b9      	ldr	r1, [r7, #24]
 800c2ce:	0148      	lsls	r0, r1, #5
 800c2d0:	69f9      	ldr	r1, [r7, #28]
 800c2d2:	4401      	add	r1, r0
 800c2d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d10d      	bne.n	800c2fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d009      	beq.n	800c2fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	68d9      	ldr	r1, [r3, #12]
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	015a      	lsls	r2, r3, #5
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fa:	460a      	mov	r2, r1
 800c2fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	78db      	ldrb	r3, [r3, #3]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d128      	bne.n	800c358 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c312:	2b00      	cmp	r3, #0
 800c314:	d110      	bne.n	800c338 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	69ba      	ldr	r2, [r7, #24]
 800c326:	0151      	lsls	r1, r2, #5
 800c328:	69fa      	ldr	r2, [r7, #28]
 800c32a:	440a      	add	r2, r1
 800c32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	e00f      	b.n	800c358 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	0151      	lsls	r1, r2, #5
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	440a      	add	r2, r1
 800c34e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c356:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69ba      	ldr	r2, [r7, #24]
 800c368:	0151      	lsls	r1, r2, #5
 800c36a:	69fa      	ldr	r2, [r7, #28]
 800c36c:	440a      	add	r2, r1
 800c36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	1ff80000 	.word	0x1ff80000

0800c388 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	785b      	ldrb	r3, [r3, #1]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	f040 80cd 	bne.w	800c544 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d132      	bne.n	800c418 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	0151      	lsls	r1, r2, #5
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	440a      	add	r2, r1
 800c3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	0151      	lsls	r1, r2, #5
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	440a      	add	r2, r1
 800c3ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	015a      	lsls	r2, r3, #5
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	0151      	lsls	r1, r2, #5
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	440a      	add	r2, r1
 800c40c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c410:	0cdb      	lsrs	r3, r3, #19
 800c412:	04db      	lsls	r3, r3, #19
 800c414:	6113      	str	r3, [r2, #16]
 800c416:	e04e      	b.n	800c4b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	015a      	lsls	r2, r3, #5
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	4413      	add	r3, r2
 800c420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	0151      	lsls	r1, r2, #5
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	440a      	add	r2, r1
 800c42e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c432:	0cdb      	lsrs	r3, r3, #19
 800c434:	04db      	lsls	r3, r3, #19
 800c436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	0151      	lsls	r1, r2, #5
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	440a      	add	r2, r1
 800c44e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c45a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	695a      	ldr	r2, [r3, #20]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	429a      	cmp	r2, r3
 800c466:	d903      	bls.n	800c470 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	689a      	ldr	r2, [r3, #8]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49c:	691a      	ldr	r2, [r3, #16]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4a6:	6939      	ldr	r1, [r7, #16]
 800c4a8:	0148      	lsls	r0, r1, #5
 800c4aa:	6979      	ldr	r1, [r7, #20]
 800c4ac:	4401      	add	r1, r0
 800c4ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d11e      	bne.n	800c4fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e092      	b.n	800c620 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	0151      	lsls	r1, r2, #5
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	440a      	add	r2, r1
 800c510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c518:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d07e      	beq.n	800c620 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	2101      	movs	r1, #1
 800c534:	fa01 f303 	lsl.w	r3, r1, r3
 800c538:	6979      	ldr	r1, [r7, #20]
 800c53a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c53e:	4313      	orrs	r3, r2
 800c540:	634b      	str	r3, [r1, #52]	; 0x34
 800c542:	e06d      	b.n	800c620 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	0151      	lsls	r1, r2, #5
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	440a      	add	r2, r1
 800c55a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c55e:	0cdb      	lsrs	r3, r3, #19
 800c560:	04db      	lsls	r3, r3, #19
 800c562:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	693a      	ldr	r2, [r7, #16]
 800c574:	0151      	lsls	r1, r2, #5
 800c576:	697a      	ldr	r2, [r7, #20]
 800c578:	440a      	add	r2, r1
 800c57a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c57e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c586:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	695b      	ldr	r3, [r3, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ce:	6939      	ldr	r1, [r7, #16]
 800c5d0:	0148      	lsls	r0, r1, #5
 800c5d2:	6979      	ldr	r1, [r7, #20]
 800c5d4:	4401      	add	r1, r0
 800c5d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d10d      	bne.n	800c600 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d009      	beq.n	800c600 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	68d9      	ldr	r1, [r3, #12]
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	0151      	lsls	r1, r2, #5
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	440a      	add	r2, r1
 800c616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c61e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	371c      	adds	r7, #28
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c62e:	b480      	push	{r7}
 800c630:	b089      	sub	sp, #36	; 0x24
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	4611      	mov	r1, r2
 800c63a:	461a      	mov	r2, r3
 800c63c:	460b      	mov	r3, r1
 800c63e:	71fb      	strb	r3, [r7, #7]
 800c640:	4613      	mov	r3, r2
 800c642:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c64c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c650:	2b00      	cmp	r3, #0
 800c652:	d11a      	bne.n	800c68a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c654:	88bb      	ldrh	r3, [r7, #4]
 800c656:	3303      	adds	r3, #3
 800c658:	089b      	lsrs	r3, r3, #2
 800c65a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c65c:	2300      	movs	r3, #0
 800c65e:	61bb      	str	r3, [r7, #24]
 800c660:	e00f      	b.n	800c682 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	031a      	lsls	r2, r3, #12
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66e:	461a      	mov	r2, r3
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	3304      	adds	r3, #4
 800c67a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	3301      	adds	r3, #1
 800c680:	61bb      	str	r3, [r7, #24]
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	429a      	cmp	r2, r3
 800c688:	d3eb      	bcc.n	800c662 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3724      	adds	r7, #36	; 0x24
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c698:	b480      	push	{r7}
 800c69a:	b089      	sub	sp, #36	; 0x24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c6ae:	88fb      	ldrh	r3, [r7, #6]
 800c6b0:	3303      	adds	r3, #3
 800c6b2:	089b      	lsrs	r3, r3, #2
 800c6b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61bb      	str	r3, [r7, #24]
 800c6ba:	e00b      	b.n	800c6d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d3ef      	bcc.n	800c6bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c6dc:	69fb      	ldr	r3, [r7, #28]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3724      	adds	r7, #36	; 0x24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d12c      	bne.n	800c760 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	db12      	blt.n	800c73e <USB_EPSetStall+0x54>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00f      	beq.n	800c73e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	0151      	lsls	r1, r2, #5
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	440a      	add	r2, r1
 800c734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c73c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	015a      	lsls	r2, r3, #5
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	0151      	lsls	r1, r2, #5
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	440a      	add	r2, r1
 800c754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	e02b      	b.n	800c7b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	db12      	blt.n	800c798 <USB_EPSetStall+0xae>
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00f      	beq.n	800c798 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	0151      	lsls	r1, r2, #5
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	440a      	add	r2, r1
 800c78e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c796:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	0151      	lsls	r1, r2, #5
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	440a      	add	r2, r1
 800c7ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b085      	sub	sp, #20
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	785b      	ldrb	r3, [r3, #1]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d128      	bne.n	800c834 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	0151      	lsls	r1, r2, #5
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	440a      	add	r2, r1
 800c7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c800:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	78db      	ldrb	r3, [r3, #3]
 800c806:	2b03      	cmp	r3, #3
 800c808:	d003      	beq.n	800c812 <USB_EPClearStall+0x4c>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	78db      	ldrb	r3, [r3, #3]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d138      	bne.n	800c884 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	0151      	lsls	r1, r2, #5
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	440a      	add	r2, r1
 800c828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	e027      	b.n	800c884 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	0151      	lsls	r1, r2, #5
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	440a      	add	r2, r1
 800c84a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c84e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	78db      	ldrb	r3, [r3, #3]
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d003      	beq.n	800c864 <USB_EPClearStall+0x9e>
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	78db      	ldrb	r3, [r3, #3]
 800c860:	2b02      	cmp	r3, #2
 800c862:	d10f      	bne.n	800c884 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	0151      	lsls	r1, r2, #5
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	440a      	add	r2, r1
 800c87a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c87e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c882:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c8b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	78fb      	ldrb	r3, [r7, #3]
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c8c6:	68f9      	ldr	r1, [r7, #12]
 800c8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8f8:	f023 0302 	bic.w	r3, r3, #2
 800c8fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c8fe:	2003      	movs	r0, #3
 800c900:	f7fb f906 	bl	8007b10 <HAL_Delay>

  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c928:	f043 0302 	orr.w	r3, r3, #2
 800c92c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c92e:	2003      	movs	r0, #3
 800c930:	f7fb f8ee 	bl	8007b10 <HAL_Delay>

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c93e:	b480      	push	{r7}
 800c940:	b085      	sub	sp, #20
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4013      	ands	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c956:	68fb      	ldr	r3, [r7, #12]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	4013      	ands	r3, r2
 800c986:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	0c1b      	lsrs	r3, r3, #16
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	b29b      	uxth	r3, r3
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c9dc:	78fb      	ldrb	r3, [r7, #3]
 800c9de:	015a      	lsls	r2, r3, #5
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b087      	sub	sp, #28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca2a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	f003 030f 	and.w	r3, r3, #15
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	fa22 f303 	lsr.w	r3, r2, r3
 800ca38:	01db      	lsls	r3, r3, #7
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	4013      	ands	r3, r2
 800ca54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca56:	68bb      	ldr	r3, [r7, #8]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	371c      	adds	r7, #28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	f003 0301 	and.w	r3, r3, #1
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ca9e:	f023 0307 	bic.w	r3, r3, #7
 800caa2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 0306 	and.w	r3, r3, #6
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d109      	bne.n	800cac8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac2:	f043 0303 	orr.w	r3, r3, #3
 800cac6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
	...

0800caec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800caec:	b480      	push	{r7}
 800caee:	b087      	sub	sp, #28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	460b      	mov	r3, r1
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	333c      	adds	r3, #60	; 0x3c
 800cb02:	3304      	adds	r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	4a26      	ldr	r2, [pc, #152]	; (800cba4 <USB_EP0_OutStart+0xb8>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d90a      	bls.n	800cb26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb20:	d101      	bne.n	800cb26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e037      	b.n	800cb96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb54:	f043 0318 	orr.w	r3, r3, #24
 800cb58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cb6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cb6e:	7afb      	ldrb	r3, [r7, #11]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d10f      	bne.n	800cb94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cb92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	4f54300a 	.word	0x4f54300a

0800cba8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4a13      	ldr	r2, [pc, #76]	; (800cc0c <USB_CoreReset+0x64>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d901      	bls.n	800cbc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e01b      	b.n	800cbfe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	daf2      	bge.n	800cbb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	f043 0201 	orr.w	r2, r3, #1
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <USB_CoreReset+0x64>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d901      	bls.n	800cbf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cbec:	2303      	movs	r3, #3
 800cbee:	e006      	b.n	800cbfe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d0f0      	beq.n	800cbde <USB_CoreReset+0x36>

  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	00030d40 	.word	0x00030d40

0800cc10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7c1b      	ldrb	r3, [r3, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d115      	bne.n	800cc54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	2181      	movs	r1, #129	; 0x81
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f004 fe58 	bl	80118e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc40:	2202      	movs	r2, #2
 800cc42:	2101      	movs	r1, #1
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f004 fe4e 	bl	80118e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800cc52:	e012      	b.n	800cc7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc54:	2340      	movs	r3, #64	; 0x40
 800cc56:	2202      	movs	r2, #2
 800cc58:	2181      	movs	r1, #129	; 0x81
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f004 fe43 	bl	80118e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc66:	2340      	movs	r3, #64	; 0x40
 800cc68:	2202      	movs	r2, #2
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f004 fe3a 	bl	80118e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc7a:	2308      	movs	r3, #8
 800cc7c:	2203      	movs	r2, #3
 800cc7e:	2182      	movs	r1, #130	; 0x82
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f004 fe30 	bl	80118e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800cc8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc90:	f004 ffa6 	bl	8011be0 <malloc>
 800cc94:	4603      	mov	r3, r0
 800cc96:	461a      	mov	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	e026      	b.n	800ccfc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	7c1b      	ldrb	r3, [r3, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d109      	bne.n	800ccec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cce2:	2101      	movs	r1, #1
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f004 feef 	bl	8011ac8 <USBD_LL_PrepareReceive>
 800ccea:	e007      	b.n	800ccfc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f004 fee6 	bl	8011ac8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cd16:	2181      	movs	r1, #129	; 0x81
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f004 fe0a 	bl	8011932 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cd24:	2101      	movs	r1, #1
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f004 fe03 	bl	8011932 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cd34:	2182      	movs	r1, #130	; 0x82
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f004 fdfb 	bl	8011932 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00e      	beq.n	800cd6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f004 ff47 	bl	8011bf0 <free>
    pdev->pClassData = NULL;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cd86:	2300      	movs	r3, #0
 800cd88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d039      	beq.n	800ce12 <USBD_CDC_Setup+0x9e>
 800cd9e:	2b20      	cmp	r3, #32
 800cda0:	d17c      	bne.n	800ce9c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	88db      	ldrh	r3, [r3, #6]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d029      	beq.n	800cdfe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	b25b      	sxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	da11      	bge.n	800cdd8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800cdc0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	88d2      	ldrh	r2, [r2, #6]
 800cdc6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cdc8:	6939      	ldr	r1, [r7, #16]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	88db      	ldrh	r3, [r3, #6]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f001 f9c9 	bl	800e168 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800cdd6:	e068      	b.n	800ceaa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	785a      	ldrb	r2, [r3, #1]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	88db      	ldrh	r3, [r3, #6]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cdee:	6939      	ldr	r1, [r7, #16]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	88db      	ldrh	r3, [r3, #6]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 f9e4 	bl	800e1c4 <USBD_CtlPrepareRx>
    break;
 800cdfc:	e055      	b.n	800ceaa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	7850      	ldrb	r0, [r2, #1]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	4798      	blx	r3
    break;
 800ce10:	e04b      	b.n	800ceaa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	2b0a      	cmp	r3, #10
 800ce18:	d017      	beq.n	800ce4a <USBD_CDC_Setup+0xd6>
 800ce1a:	2b0b      	cmp	r3, #11
 800ce1c:	d029      	beq.n	800ce72 <USBD_CDC_Setup+0xfe>
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d133      	bne.n	800ce8a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d107      	bne.n	800ce3c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	2202      	movs	r2, #2
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 f997 	bl	800e168 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ce3a:	e02e      	b.n	800ce9a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 f927 	bl	800e092 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce44:	2302      	movs	r3, #2
 800ce46:	75fb      	strb	r3, [r7, #23]
      break;
 800ce48:	e027      	b.n	800ce9a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d107      	bne.n	800ce64 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ce54:	f107 030f 	add.w	r3, r7, #15
 800ce58:	2201      	movs	r2, #1
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f001 f983 	bl	800e168 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ce62:	e01a      	b.n	800ce9a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f001 f913 	bl	800e092 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce70:	e013      	b.n	800ce9a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d00d      	beq.n	800ce98 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 f907 	bl	800e092 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce84:	2302      	movs	r3, #2
 800ce86:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ce88:	e006      	b.n	800ce98 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 f900 	bl	800e092 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce92:	2302      	movs	r3, #2
 800ce94:	75fb      	strb	r3, [r7, #23]
      break;
 800ce96:	e000      	b.n	800ce9a <USBD_CDC_Setup+0x126>
      break;
 800ce98:	bf00      	nop
    }
    break;
 800ce9a:	e006      	b.n	800ceaa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f001 f8f7 	bl	800e092 <USBD_CtlError>
    ret = USBD_FAIL;
 800cea4:	2302      	movs	r3, #2
 800cea6:	75fb      	strb	r3, [r7, #23]
    break;
 800cea8:	bf00      	nop
  }

  return ret;
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	460b      	mov	r3, r1
 800cebe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cec6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cece:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d03a      	beq.n	800cf50 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	331c      	adds	r3, #28
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d029      	beq.n	800cf44 <USBD_CDC_DataIn+0x90>
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	4613      	mov	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	331c      	adds	r3, #28
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	78f9      	ldrb	r1, [r7, #3]
 800cf04:	68b8      	ldr	r0, [r7, #8]
 800cf06:	460b      	mov	r3, r1
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	1a5b      	subs	r3, r3, r1
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4403      	add	r3, r0
 800cf10:	3344      	adds	r3, #68	; 0x44
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf18:	fb03 f301 	mul.w	r3, r3, r1
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d110      	bne.n	800cf44 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	4613      	mov	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4413      	add	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	440b      	add	r3, r1
 800cf30:	331c      	adds	r3, #28
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800cf36:	78f9      	ldrb	r1, [r7, #3]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f004 fda0 	bl	8011a82 <USBD_LL_Transmit>
 800cf42:	e003      	b.n	800cf4c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e000      	b.n	800cf52 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cf50:	2302      	movs	r3, #2
  }
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f004 fdcb 	bl	8011b0e <USBD_LL_GetRxDataSize>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00d      	beq.n	800cfa6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4798      	blx	r3

    return USBD_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e000      	b.n	800cfa8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cfa6:	2302      	movs	r3, #2
  }
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cfbe:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d015      	beq.n	800cff6 <USBD_CDC_EP0_RxReady+0x46>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfd0:	2bff      	cmp	r3, #255	; 0xff
 800cfd2:	d010      	beq.n	800cff6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cfe2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cfea:	b292      	uxth	r2, r2
 800cfec:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	22ff      	movs	r2, #255	; 0xff
 800cff2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2243      	movs	r2, #67	; 0x43
 800d00c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d00e:	4b03      	ldr	r3, [pc, #12]	; (800d01c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20000d48 	.word	0x20000d48

0800d020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2243      	movs	r2, #67	; 0x43
 800d02c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d02e:	4b03      	ldr	r3, [pc, #12]	; (800d03c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	20000d04 	.word	0x20000d04

0800d040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2243      	movs	r2, #67	; 0x43
 800d04c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d04e:	4b03      	ldr	r3, [pc, #12]	; (800d05c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	20000d8c 	.word	0x20000d8c

0800d060 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	220a      	movs	r2, #10
 800d06c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d06e:	4b03      	ldr	r3, [pc, #12]	; (800d07c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	20000cc0 	.word	0x20000cc0

0800d080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d08a:	2302      	movs	r3, #2
 800d08c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d005      	beq.n	800d0a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b087      	sub	sp, #28
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	60f8      	str	r0, [r7, #12]
 800d0b6:	60b9      	str	r1, [r7, #8]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0c2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d0cc:	88fa      	ldrh	r2, [r7, #6]
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d118:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01c      	beq.n	800d15e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d115      	bne.n	800d15a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	2181      	movs	r1, #129	; 0x81
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f004 fc96 	bl	8011a82 <USBD_LL_Transmit>

      return USBD_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	e002      	b.n	800d160 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e000      	b.n	800d160 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d15e:	2302      	movs	r3, #2
  }
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d176:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d017      	beq.n	800d1b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7c1b      	ldrb	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d109      	bne.n	800d19e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d190:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d194:	2101      	movs	r1, #1
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f004 fc96 	bl	8011ac8 <USBD_LL_PrepareReceive>
 800d19c:	e007      	b.n	800d1ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1a4:	2340      	movs	r3, #64	; 0x40
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f004 fc8d 	bl	8011ac8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e000      	b.n	800d1b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d1b2:	2302      	movs	r3, #2
  }
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	e01a      	b.n	800d20a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	79fa      	ldrb	r2, [r7, #7]
 800d200:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f004 fb08 	bl	8011818 <USBD_LL_Init>

  return USBD_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d212:	b480      	push	{r7}
 800d214:	b085      	sub	sp, #20
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d006      	beq.n	800d234 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]
 800d232:	e001      	b.n	800d238 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d234:	2302      	movs	r3, #2
 800d236:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr

0800d246 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b082      	sub	sp, #8
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f004 fb2e 	bl	80118b0 <USBD_LL_Start>

  return USBD_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d280:	2302      	movs	r3, #2
 800d282:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	78fa      	ldrb	r2, [r7, #3]
 800d298:	4611      	mov	r1, r2
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	4798      	blx	r3
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	4798      	blx	r3
  return USBD_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fe94 	bl	800e018 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d2fe:	461a      	mov	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d30c:	f003 031f 	and.w	r3, r3, #31
 800d310:	2b01      	cmp	r3, #1
 800d312:	d00c      	beq.n	800d32e <USBD_LL_SetupStage+0x56>
 800d314:	2b01      	cmp	r3, #1
 800d316:	d302      	bcc.n	800d31e <USBD_LL_SetupStage+0x46>
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d010      	beq.n	800d33e <USBD_LL_SetupStage+0x66>
 800d31c:	e017      	b.n	800d34e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fa04 	bl	800d734 <USBD_StdDevReq>
    break;
 800d32c:	e01a      	b.n	800d364 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fa66 	bl	800d808 <USBD_StdItfReq>
    break;
 800d33c:	e012      	b.n	800d364 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 faa4 	bl	800d894 <USBD_StdEPReq>
    break;
 800d34c:	e00a      	b.n	800d364 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f004 fb07 	bl	8011970 <USBD_LL_StallEP>
    break;
 800d362:	bf00      	nop
  }

  return USBD_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b086      	sub	sp, #24
 800d372:	af00      	add	r7, sp, #0
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	460b      	mov	r3, r1
 800d378:	607a      	str	r2, [r7, #4]
 800d37a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d37c:	7afb      	ldrb	r3, [r7, #11]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d14b      	bne.n	800d41a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d388:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d390:	2b03      	cmp	r3, #3
 800d392:	d134      	bne.n	800d3fe <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	691b      	ldr	r3, [r3, #16]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d919      	bls.n	800d3d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	1ad2      	subs	r2, r2, r3
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d203      	bcs.n	800d3c2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	e002      	b.n	800d3c8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 ff17 	bl	800e200 <USBD_CtlContinueRx>
 800d3d2:	e038      	b.n	800d446 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00a      	beq.n	800d3f6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d105      	bne.n	800d3f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	f000 ff14 	bl	800e224 <USBD_CtlSendStatus>
 800d3fc:	e023      	b.n	800d446 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d404:	2b05      	cmp	r3, #5
 800d406:	d11e      	bne.n	800d446 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d410:	2100      	movs	r1, #0
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f004 faac 	bl	8011970 <USBD_LL_StallEP>
 800d418:	e015      	b.n	800d446 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00d      	beq.n	800d442 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d108      	bne.n	800d442 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	7afa      	ldrb	r2, [r7, #11]
 800d43a:	4611      	mov	r1, r2
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	4798      	blx	r3
 800d440:	e001      	b.n	800d446 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d442:	2302      	movs	r3, #2
 800d444:	e000      	b.n	800d448 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3718      	adds	r7, #24
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	460b      	mov	r3, r1
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d45e:	7afb      	ldrb	r3, [r7, #11]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d17f      	bne.n	800d564 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3314      	adds	r3, #20
 800d468:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d470:	2b02      	cmp	r3, #2
 800d472:	d15c      	bne.n	800d52e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	68da      	ldr	r2, [r3, #12]
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d915      	bls.n	800d4ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	68da      	ldr	r2, [r3, #12]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	1ad2      	subs	r2, r2, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	b29b      	uxth	r3, r3
 800d494:	461a      	mov	r2, r3
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f000 fe81 	bl	800e1a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f004 fb0f 	bl	8011ac8 <USBD_LL_PrepareReceive>
 800d4aa:	e04e      	b.n	800d54a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	6912      	ldr	r2, [r2, #16]
 800d4b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4b8:	fb02 f201 	mul.w	r2, r2, r1
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d11c      	bne.n	800d4fc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	689a      	ldr	r2, [r3, #8]
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d316      	bcc.n	800d4fc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	689a      	ldr	r2, [r3, #8]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d20f      	bcs.n	800d4fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d4dc:	2200      	movs	r2, #0
 800d4de:	2100      	movs	r1, #0
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fe5d 	bl	800e1a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f004 fae7 	bl	8011ac8 <USBD_LL_PrepareReceive>
 800d4fa:	e026      	b.n	800d54a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00a      	beq.n	800d51e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d105      	bne.n	800d51e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d51e:	2180      	movs	r1, #128	; 0x80
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f004 fa25 	bl	8011970 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fe8f 	bl	800e24a <USBD_CtlReceiveStatus>
 800d52c:	e00d      	b.n	800d54a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d534:	2b04      	cmp	r3, #4
 800d536:	d004      	beq.n	800d542 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d103      	bne.n	800d54a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d542:	2180      	movs	r1, #128	; 0x80
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f004 fa13 	bl	8011970 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d550:	2b01      	cmp	r3, #1
 800d552:	d11d      	bne.n	800d590 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff fe82 	bl	800d25e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d562:	e015      	b.n	800d590 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00d      	beq.n	800d58c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d576:	2b03      	cmp	r3, #3
 800d578:	d108      	bne.n	800d58c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	7afa      	ldrb	r2, [r7, #11]
 800d584:	4611      	mov	r1, r2
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	4798      	blx	r3
 800d58a:	e001      	b.n	800d590 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d58c:	2302      	movs	r3, #2
 800d58e:	e000      	b.n	800d592 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5a2:	2340      	movs	r3, #64	; 0x40
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f004 f99c 	bl	80118e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2240      	movs	r2, #64	; 0x40
 800d5ba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5be:	2340      	movs	r3, #64	; 0x40
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2180      	movs	r1, #128	; 0x80
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f004 f98e 	bl	80118e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2240      	movs	r2, #64	; 0x40
 800d5d4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	6852      	ldr	r2, [r2, #4]
 800d60a:	b2d2      	uxtb	r2, r2
 800d60c:	4611      	mov	r1, r2
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	4798      	blx	r3
  }

  return USBD_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2204      	movs	r2, #4
 800d654:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d696:	2b03      	cmp	r3, #3
 800d698:	d10b      	bne.n	800d6b2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b083      	sub	sp, #12
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	6852      	ldr	r2, [r2, #4]
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	4611      	mov	r1, r2
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	4798      	blx	r3

  return USBD_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	d004      	beq.n	800d758 <USBD_StdDevReq+0x24>
 800d74e:	2b40      	cmp	r3, #64	; 0x40
 800d750:	d002      	beq.n	800d758 <USBD_StdDevReq+0x24>
 800d752:	2b00      	cmp	r3, #0
 800d754:	d008      	beq.n	800d768 <USBD_StdDevReq+0x34>
 800d756:	e04c      	b.n	800d7f2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	4798      	blx	r3
    break;
 800d766:	e049      	b.n	800d7fc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	2b09      	cmp	r3, #9
 800d76e:	d83a      	bhi.n	800d7e6 <USBD_StdDevReq+0xb2>
 800d770:	a201      	add	r2, pc, #4	; (adr r2, 800d778 <USBD_StdDevReq+0x44>)
 800d772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d776:	bf00      	nop
 800d778:	0800d7c9 	.word	0x0800d7c9
 800d77c:	0800d7dd 	.word	0x0800d7dd
 800d780:	0800d7e7 	.word	0x0800d7e7
 800d784:	0800d7d3 	.word	0x0800d7d3
 800d788:	0800d7e7 	.word	0x0800d7e7
 800d78c:	0800d7ab 	.word	0x0800d7ab
 800d790:	0800d7a1 	.word	0x0800d7a1
 800d794:	0800d7e7 	.word	0x0800d7e7
 800d798:	0800d7bf 	.word	0x0800d7bf
 800d79c:	0800d7b5 	.word	0x0800d7b5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f9d2 	bl	800db4c <USBD_GetDescriptor>
      break;
 800d7a8:	e022      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fac7 	bl	800dd40 <USBD_SetAddress>
      break;
 800d7b2:	e01d      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fb04 	bl	800ddc4 <USBD_SetConfig>
      break;
 800d7bc:	e018      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fb8d 	bl	800dee0 <USBD_GetConfig>
      break;
 800d7c6:	e013      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fbbc 	bl	800df48 <USBD_GetStatus>
      break;
 800d7d0:	e00e      	b.n	800d7f0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fbea 	bl	800dfae <USBD_SetFeature>
      break;
 800d7da:	e009      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fbf9 	bl	800dfd6 <USBD_ClrFeature>
      break;
 800d7e4:	e004      	b.n	800d7f0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fc52 	bl	800e092 <USBD_CtlError>
      break;
 800d7ee:	bf00      	nop
    }
    break;
 800d7f0:	e004      	b.n	800d7fc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fc4c 	bl	800e092 <USBD_CtlError>
    break;
 800d7fa:	bf00      	nop
  }

  return ret;
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop

0800d808 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d81e:	2b20      	cmp	r3, #32
 800d820:	d003      	beq.n	800d82a <USBD_StdItfReq+0x22>
 800d822:	2b40      	cmp	r3, #64	; 0x40
 800d824:	d001      	beq.n	800d82a <USBD_StdItfReq+0x22>
 800d826:	2b00      	cmp	r3, #0
 800d828:	d12a      	bne.n	800d880 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d830:	3b01      	subs	r3, #1
 800d832:	2b02      	cmp	r3, #2
 800d834:	d81d      	bhi.n	800d872 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	889b      	ldrh	r3, [r3, #4]
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d813      	bhi.n	800d868 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	4798      	blx	r3
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	88db      	ldrh	r3, [r3, #6]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d110      	bne.n	800d87c <USBD_StdItfReq+0x74>
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10d      	bne.n	800d87c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fcdf 	bl	800e224 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d866:	e009      	b.n	800d87c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fc11 	bl	800e092 <USBD_CtlError>
      break;
 800d870:	e004      	b.n	800d87c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fc0c 	bl	800e092 <USBD_CtlError>
      break;
 800d87a:	e000      	b.n	800d87e <USBD_StdItfReq+0x76>
      break;
 800d87c:	bf00      	nop
    }
    break;
 800d87e:	e004      	b.n	800d88a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fc05 	bl	800e092 <USBD_CtlError>
    break;
 800d888:	bf00      	nop
  }

  return USBD_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	889b      	ldrh	r3, [r3, #4]
 800d8a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8b0:	2b20      	cmp	r3, #32
 800d8b2:	d004      	beq.n	800d8be <USBD_StdEPReq+0x2a>
 800d8b4:	2b40      	cmp	r3, #64	; 0x40
 800d8b6:	d002      	beq.n	800d8be <USBD_StdEPReq+0x2a>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d008      	beq.n	800d8ce <USBD_StdEPReq+0x3a>
 800d8bc:	e13b      	b.n	800db36 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	4798      	blx	r3
    break;
 800d8cc:	e138      	b.n	800db40 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d10a      	bne.n	800d8f0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	4798      	blx	r3
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	e128      	b.n	800db42 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	785b      	ldrb	r3, [r3, #1]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d03e      	beq.n	800d976 <USBD_StdEPReq+0xe2>
 800d8f8:	2b03      	cmp	r3, #3
 800d8fa:	d002      	beq.n	800d902 <USBD_StdEPReq+0x6e>
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d070      	beq.n	800d9e2 <USBD_StdEPReq+0x14e>
 800d900:	e113      	b.n	800db2a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d002      	beq.n	800d912 <USBD_StdEPReq+0x7e>
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d015      	beq.n	800d93c <USBD_StdEPReq+0xa8>
 800d910:	e02b      	b.n	800d96a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d912:	7bbb      	ldrb	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00c      	beq.n	800d932 <USBD_StdEPReq+0x9e>
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b80      	cmp	r3, #128	; 0x80
 800d91c:	d009      	beq.n	800d932 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f004 f824 	bl	8011970 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d928:	2180      	movs	r1, #128	; 0x80
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f004 f820 	bl	8011970 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d930:	e020      	b.n	800d974 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fbac 	bl	800e092 <USBD_CtlError>
        break;
 800d93a:	e01b      	b.n	800d974 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	885b      	ldrh	r3, [r3, #2]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10e      	bne.n	800d962 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d944:	7bbb      	ldrb	r3, [r7, #14]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00b      	beq.n	800d962 <USBD_StdEPReq+0xce>
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	2b80      	cmp	r3, #128	; 0x80
 800d94e:	d008      	beq.n	800d962 <USBD_StdEPReq+0xce>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	88db      	ldrh	r3, [r3, #6]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d104      	bne.n	800d962 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d958:	7bbb      	ldrb	r3, [r7, #14]
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f004 f807 	bl	8011970 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fc5e 	bl	800e224 <USBD_CtlSendStatus>

        break;
 800d968:	e004      	b.n	800d974 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fb90 	bl	800e092 <USBD_CtlError>
        break;
 800d972:	bf00      	nop
      }
      break;
 800d974:	e0de      	b.n	800db34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d002      	beq.n	800d986 <USBD_StdEPReq+0xf2>
 800d980:	2b03      	cmp	r3, #3
 800d982:	d015      	beq.n	800d9b0 <USBD_StdEPReq+0x11c>
 800d984:	e026      	b.n	800d9d4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d986:	7bbb      	ldrb	r3, [r7, #14]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00c      	beq.n	800d9a6 <USBD_StdEPReq+0x112>
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
 800d98e:	2b80      	cmp	r3, #128	; 0x80
 800d990:	d009      	beq.n	800d9a6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d992:	7bbb      	ldrb	r3, [r7, #14]
 800d994:	4619      	mov	r1, r3
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f003 ffea 	bl	8011970 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d99c:	2180      	movs	r1, #128	; 0x80
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f003 ffe6 	bl	8011970 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d9a4:	e01c      	b.n	800d9e0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fb72 	bl	800e092 <USBD_CtlError>
        break;
 800d9ae:	e017      	b.n	800d9e0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	885b      	ldrh	r3, [r3, #2]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d112      	bne.n	800d9de <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d004      	beq.n	800d9cc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f003 fff1 	bl	80119ae <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fc29 	bl	800e224 <USBD_CtlSendStatus>
        }
        break;
 800d9d2:	e004      	b.n	800d9de <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fb5b 	bl	800e092 <USBD_CtlError>
        break;
 800d9dc:	e000      	b.n	800d9e0 <USBD_StdEPReq+0x14c>
        break;
 800d9de:	bf00      	nop
      }
      break;
 800d9e0:	e0a8      	b.n	800db34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d002      	beq.n	800d9f2 <USBD_StdEPReq+0x15e>
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d031      	beq.n	800da54 <USBD_StdEPReq+0x1c0>
 800d9f0:	e095      	b.n	800db1e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <USBD_StdEPReq+0x174>
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	2b80      	cmp	r3, #128	; 0x80
 800d9fc:	d004      	beq.n	800da08 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fb46 	bl	800e092 <USBD_CtlError>
          break;
 800da06:	e08f      	b.n	800db28 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800da08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	da0b      	bge.n	800da28 <USBD_StdEPReq+0x194>
 800da10:	7bbb      	ldrb	r3, [r7, #14]
 800da12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da16:	4613      	mov	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	3310      	adds	r3, #16
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	4413      	add	r3, r2
 800da24:	3304      	adds	r3, #4
 800da26:	e00a      	b.n	800da3e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	4413      	add	r3, r2
 800da3e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2202      	movs	r2, #2
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fb8b 	bl	800e168 <USBD_CtlSendData>
          break;
 800da52:	e069      	b.n	800db28 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800da54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	da11      	bge.n	800da80 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da5c:	7bbb      	ldrb	r3, [r7, #14]
 800da5e:	f003 020f 	and.w	r2, r3, #15
 800da62:	6879      	ldr	r1, [r7, #4]
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	440b      	add	r3, r1
 800da6e:	3318      	adds	r3, #24
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d117      	bne.n	800daa6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 fb0a 	bl	800e092 <USBD_CtlError>
            break;
 800da7e:	e053      	b.n	800db28 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800da80:	7bbb      	ldrb	r3, [r7, #14]
 800da82:	f003 020f 	and.w	r2, r3, #15
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	4613      	mov	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4413      	add	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	440b      	add	r3, r1
 800da92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d104      	bne.n	800daa6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 faf7 	bl	800e092 <USBD_CtlError>
            break;
 800daa4:	e040      	b.n	800db28 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800daa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	da0b      	bge.n	800dac6 <USBD_StdEPReq+0x232>
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dab4:	4613      	mov	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4413      	add	r3, r2
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	3310      	adds	r3, #16
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	4413      	add	r3, r2
 800dac2:	3304      	adds	r3, #4
 800dac4:	e00a      	b.n	800dadc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dac6:	7bbb      	ldrb	r3, [r7, #14]
 800dac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	4413      	add	r3, r2
 800dadc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dade:	7bbb      	ldrb	r3, [r7, #14]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <USBD_StdEPReq+0x256>
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
 800dae6:	2b80      	cmp	r3, #128	; 0x80
 800dae8:	d103      	bne.n	800daf2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e00e      	b.n	800db10 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f003 ff78 	bl	80119ec <USBD_LL_IsStallEP>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2201      	movs	r2, #1
 800db06:	601a      	str	r2, [r3, #0]
 800db08:	e002      	b.n	800db10 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	2200      	movs	r2, #0
 800db0e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2202      	movs	r2, #2
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 fb26 	bl	800e168 <USBD_CtlSendData>
          break;
 800db1c:	e004      	b.n	800db28 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fab6 	bl	800e092 <USBD_CtlError>
        break;
 800db26:	bf00      	nop
      }
      break;
 800db28:	e004      	b.n	800db34 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800db2a:	6839      	ldr	r1, [r7, #0]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 fab0 	bl	800e092 <USBD_CtlError>
      break;
 800db32:	bf00      	nop
    }
    break;
 800db34:	e004      	b.n	800db40 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 faaa 	bl	800e092 <USBD_CtlError>
    break;
 800db3e:	bf00      	nop
  }

  return ret;
 800db40:	7bfb      	ldrb	r3, [r7, #15]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	885b      	ldrh	r3, [r3, #2]
 800db5a:	0a1b      	lsrs	r3, r3, #8
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	3b01      	subs	r3, #1
 800db60:	2b06      	cmp	r3, #6
 800db62:	f200 80c9 	bhi.w	800dcf8 <USBD_GetDescriptor+0x1ac>
 800db66:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <USBD_GetDescriptor+0x20>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800db89 	.word	0x0800db89
 800db70:	0800dba1 	.word	0x0800dba1
 800db74:	0800dbe1 	.word	0x0800dbe1
 800db78:	0800dcf9 	.word	0x0800dcf9
 800db7c:	0800dcf9 	.word	0x0800dcf9
 800db80:	0800dca5 	.word	0x0800dca5
 800db84:	0800dccb 	.word	0x0800dccb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	7c12      	ldrb	r2, [r2, #16]
 800db94:	f107 010a 	add.w	r1, r7, #10
 800db98:	4610      	mov	r0, r2
 800db9a:	4798      	blx	r3
 800db9c:	60f8      	str	r0, [r7, #12]
    break;
 800db9e:	e0b0      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	7c1b      	ldrb	r3, [r3, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10d      	bne.n	800dbc4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb0:	f107 020a 	add.w	r2, r7, #10
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
 800dbb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800dbc2:	e09e      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbcc:	f107 020a 	add.w	r2, r7, #10
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	4798      	blx	r3
 800dbd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	2202      	movs	r2, #2
 800dbdc:	701a      	strb	r2, [r3, #0]
    break;
 800dbde:	e090      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	885b      	ldrh	r3, [r3, #2]
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b05      	cmp	r3, #5
 800dbe8:	d856      	bhi.n	800dc98 <USBD_GetDescriptor+0x14c>
 800dbea:	a201      	add	r2, pc, #4	; (adr r2, 800dbf0 <USBD_GetDescriptor+0xa4>)
 800dbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf0:	0800dc09 	.word	0x0800dc09
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	0800dc39 	.word	0x0800dc39
 800dbfc:	0800dc51 	.word	0x0800dc51
 800dc00:	0800dc69 	.word	0x0800dc69
 800dc04:	0800dc81 	.word	0x0800dc81
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	7c12      	ldrb	r2, [r2, #16]
 800dc14:	f107 010a 	add.w	r1, r7, #10
 800dc18:	4610      	mov	r0, r2
 800dc1a:	4798      	blx	r3
 800dc1c:	60f8      	str	r0, [r7, #12]
      break;
 800dc1e:	e040      	b.n	800dca2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	7c12      	ldrb	r2, [r2, #16]
 800dc2c:	f107 010a 	add.w	r1, r7, #10
 800dc30:	4610      	mov	r0, r2
 800dc32:	4798      	blx	r3
 800dc34:	60f8      	str	r0, [r7, #12]
      break;
 800dc36:	e034      	b.n	800dca2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	7c12      	ldrb	r2, [r2, #16]
 800dc44:	f107 010a 	add.w	r1, r7, #10
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	60f8      	str	r0, [r7, #12]
      break;
 800dc4e:	e028      	b.n	800dca2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	7c12      	ldrb	r2, [r2, #16]
 800dc5c:	f107 010a 	add.w	r1, r7, #10
 800dc60:	4610      	mov	r0, r2
 800dc62:	4798      	blx	r3
 800dc64:	60f8      	str	r0, [r7, #12]
      break;
 800dc66:	e01c      	b.n	800dca2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	7c12      	ldrb	r2, [r2, #16]
 800dc74:	f107 010a 	add.w	r1, r7, #10
 800dc78:	4610      	mov	r0, r2
 800dc7a:	4798      	blx	r3
 800dc7c:	60f8      	str	r0, [r7, #12]
      break;
 800dc7e:	e010      	b.n	800dca2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	7c12      	ldrb	r2, [r2, #16]
 800dc8c:	f107 010a 	add.w	r1, r7, #10
 800dc90:	4610      	mov	r0, r2
 800dc92:	4798      	blx	r3
 800dc94:	60f8      	str	r0, [r7, #12]
      break;
 800dc96:	e004      	b.n	800dca2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f9f9 	bl	800e092 <USBD_CtlError>
      return;
 800dca0:	e04b      	b.n	800dd3a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800dca2:	e02e      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	7c1b      	ldrb	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d109      	bne.n	800dcc0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb4:	f107 020a 	add.w	r2, r7, #10
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	60f8      	str	r0, [r7, #12]
      break;
 800dcbe:	e020      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f9e5 	bl	800e092 <USBD_CtlError>
      return;
 800dcc8:	e037      	b.n	800dd3a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7c1b      	ldrb	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10d      	bne.n	800dcee <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcda:	f107 020a 	add.w	r2, r7, #10
 800dcde:	4610      	mov	r0, r2
 800dce0:	4798      	blx	r3
 800dce2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	3301      	adds	r3, #1
 800dce8:	2207      	movs	r2, #7
 800dcea:	701a      	strb	r2, [r3, #0]
      break;
 800dcec:	e009      	b.n	800dd02 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f9ce 	bl	800e092 <USBD_CtlError>
      return;
 800dcf6:	e020      	b.n	800dd3a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f9c9 	bl	800e092 <USBD_CtlError>
    return;
 800dd00:	e01b      	b.n	800dd3a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800dd02:	897b      	ldrh	r3, [r7, #10]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d011      	beq.n	800dd2c <USBD_GetDescriptor+0x1e0>
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	88db      	ldrh	r3, [r3, #6]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00d      	beq.n	800dd2c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	88da      	ldrh	r2, [r3, #6]
 800dd14:	897b      	ldrh	r3, [r7, #10]
 800dd16:	4293      	cmp	r3, r2
 800dd18:	bf28      	it	cs
 800dd1a:	4613      	movcs	r3, r2
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800dd20:	897b      	ldrh	r3, [r7, #10]
 800dd22:	461a      	mov	r2, r3
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fa1e 	bl	800e168 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	88db      	ldrh	r3, [r3, #6]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fa75 	bl	800e224 <USBD_CtlSendStatus>
  }
}
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	889b      	ldrh	r3, [r3, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d130      	bne.n	800ddb4 <USBD_SetAddress+0x74>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	88db      	ldrh	r3, [r3, #6]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d12c      	bne.n	800ddb4 <USBD_SetAddress+0x74>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	885b      	ldrh	r3, [r3, #2]
 800dd5e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd60:	d828      	bhi.n	800ddb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	d104      	bne.n	800dd82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f989 	bl	800e092 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd80:	e01c      	b.n	800ddbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	7bfa      	ldrb	r2, [r7, #15]
 800dd86:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f003 fe58 	bl	8011a44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fa45 	bl	800e224 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d004      	beq.n	800ddaa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2202      	movs	r2, #2
 800dda4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda8:	e008      	b.n	800ddbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	e003      	b.n	800ddbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f96b 	bl	800e092 <USBD_CtlError>
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	885b      	ldrh	r3, [r3, #2]
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	4b41      	ldr	r3, [pc, #260]	; (800dedc <USBD_SetConfig+0x118>)
 800ddd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ddd8:	4b40      	ldr	r3, [pc, #256]	; (800dedc <USBD_SetConfig+0x118>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d904      	bls.n	800ddea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 f955 	bl	800e092 <USBD_CtlError>
 800dde8:	e075      	b.n	800ded6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d002      	beq.n	800ddfa <USBD_SetConfig+0x36>
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d023      	beq.n	800de40 <USBD_SetConfig+0x7c>
 800ddf8:	e062      	b.n	800dec0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ddfa:	4b38      	ldr	r3, [pc, #224]	; (800dedc <USBD_SetConfig+0x118>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d01a      	beq.n	800de38 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800de02:	4b36      	ldr	r3, [pc, #216]	; (800dedc <USBD_SetConfig+0x118>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2203      	movs	r2, #3
 800de10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800de14:	4b31      	ldr	r3, [pc, #196]	; (800dedc <USBD_SetConfig+0x118>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff fa2a 	bl	800d274 <USBD_SetClassConfig>
 800de20:	4603      	mov	r3, r0
 800de22:	2b02      	cmp	r3, #2
 800de24:	d104      	bne.n	800de30 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800de26:	6839      	ldr	r1, [r7, #0]
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 f932 	bl	800e092 <USBD_CtlError>
          return;
 800de2e:	e052      	b.n	800ded6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 f9f7 	bl	800e224 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800de36:	e04e      	b.n	800ded6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f9f3 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800de3e:	e04a      	b.n	800ded6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de40:	4b26      	ldr	r3, [pc, #152]	; (800dedc <USBD_SetConfig+0x118>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d112      	bne.n	800de6e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2202      	movs	r2, #2
 800de4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800de50:	4b22      	ldr	r3, [pc, #136]	; (800dedc <USBD_SetConfig+0x118>)
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	461a      	mov	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800de5a:	4b20      	ldr	r3, [pc, #128]	; (800dedc <USBD_SetConfig+0x118>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f7ff fa26 	bl	800d2b2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f9dc 	bl	800e224 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800de6c:	e033      	b.n	800ded6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800de6e:	4b1b      	ldr	r3, [pc, #108]	; (800dedc <USBD_SetConfig+0x118>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d01d      	beq.n	800deb8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff fa14 	bl	800d2b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de8a:	4b14      	ldr	r3, [pc, #80]	; (800dedc <USBD_SetConfig+0x118>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800de94:	4b11      	ldr	r3, [pc, #68]	; (800dedc <USBD_SetConfig+0x118>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	4619      	mov	r1, r3
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff f9ea 	bl	800d274 <USBD_SetClassConfig>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d104      	bne.n	800deb0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f8f2 	bl	800e092 <USBD_CtlError>
          return;
 800deae:	e012      	b.n	800ded6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f9b7 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800deb6:	e00e      	b.n	800ded6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 f9b3 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800debe:	e00a      	b.n	800ded6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f8e5 	bl	800e092 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800dec8:	4b04      	ldr	r3, [pc, #16]	; (800dedc <USBD_SetConfig+0x118>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff f9ef 	bl	800d2b2 <USBD_ClrClassConfig>
      break;
 800ded4:	bf00      	nop
    }
  }
}
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	2000147c 	.word	0x2000147c

0800dee0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	88db      	ldrh	r3, [r3, #6]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d004      	beq.n	800defc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f8cc 	bl	800e092 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800defa:	e021      	b.n	800df40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df02:	2b01      	cmp	r3, #1
 800df04:	db17      	blt.n	800df36 <USBD_GetConfig+0x56>
 800df06:	2b02      	cmp	r3, #2
 800df08:	dd02      	ble.n	800df10 <USBD_GetConfig+0x30>
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d00b      	beq.n	800df26 <USBD_GetConfig+0x46>
 800df0e:	e012      	b.n	800df36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3308      	adds	r3, #8
 800df1a:	2201      	movs	r2, #1
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f922 	bl	800e168 <USBD_CtlSendData>
      break;
 800df24:	e00c      	b.n	800df40 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3304      	adds	r3, #4
 800df2a:	2201      	movs	r2, #1
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f91a 	bl	800e168 <USBD_CtlSendData>
      break;
 800df34:	e004      	b.n	800df40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f8aa 	bl	800e092 <USBD_CtlError>
      break;
 800df3e:	bf00      	nop
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df58:	3b01      	subs	r3, #1
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d81e      	bhi.n	800df9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	88db      	ldrh	r3, [r3, #6]
 800df62:	2b02      	cmp	r3, #2
 800df64:	d004      	beq.n	800df70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800df66:	6839      	ldr	r1, [r7, #0]
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f892 	bl	800e092 <USBD_CtlError>
      break;
 800df6e:	e01a      	b.n	800dfa6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2201      	movs	r2, #1
 800df74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	f043 0202 	orr.w	r2, r3, #2
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	330c      	adds	r3, #12
 800df90:	2202      	movs	r2, #2
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f8e7 	bl	800e168 <USBD_CtlSendData>
    break;
 800df9a:	e004      	b.n	800dfa6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 f877 	bl	800e092 <USBD_CtlError>
    break;
 800dfa4:	bf00      	nop
  }
}
 800dfa6:	bf00      	nop
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	885b      	ldrh	r3, [r3, #2]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d106      	bne.n	800dfce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f92b 	bl	800e224 <USBD_CtlSendStatus>
  }

}
 800dfce:	bf00      	nop
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d80b      	bhi.n	800e004 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	885b      	ldrh	r3, [r3, #2]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d10c      	bne.n	800e00e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f911 	bl	800e224 <USBD_CtlSendStatus>
    }
    break;
 800e002:	e004      	b.n	800e00e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 f843 	bl	800e092 <USBD_CtlError>
    break;
 800e00c:	e000      	b.n	800e010 <USBD_ClrFeature+0x3a>
    break;
 800e00e:	bf00      	nop
  }
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	785a      	ldrb	r2, [r3, #1]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	3302      	adds	r3, #2
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	b29a      	uxth	r2, r3
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	3303      	adds	r3, #3
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	021b      	lsls	r3, r3, #8
 800e044:	b29b      	uxth	r3, r3
 800e046:	4413      	add	r3, r2
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3304      	adds	r3, #4
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	b29a      	uxth	r2, r3
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	3305      	adds	r3, #5
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	021b      	lsls	r3, r3, #8
 800e060:	b29b      	uxth	r3, r3
 800e062:	4413      	add	r3, r2
 800e064:	b29a      	uxth	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	3306      	adds	r3, #6
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	b29a      	uxth	r2, r3
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	3307      	adds	r3, #7
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	021b      	lsls	r3, r3, #8
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	4413      	add	r3, r2
 800e080:	b29a      	uxth	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	80da      	strh	r2, [r3, #6]

}
 800e086:	bf00      	nop
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e09c:	2180      	movs	r1, #128	; 0x80
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f003 fc66 	bl	8011970 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f003 fc62 	bl	8011970 <USBD_LL_StallEP>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d032      	beq.n	800e130 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f834 	bl	800e138 <USBD_GetLen>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	1c5a      	adds	r2, r3, #1
 800e0e2:	75fa      	strb	r2, [r7, #23]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	7812      	ldrb	r2, [r2, #0]
 800e0ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	75fa      	strb	r2, [r7, #23]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	2203      	movs	r2, #3
 800e0fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e100:	e012      	b.n	800e128 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	1c5a      	adds	r2, r3, #1
 800e106:	60fa      	str	r2, [r7, #12]
 800e108:	7dfa      	ldrb	r2, [r7, #23]
 800e10a:	1c51      	adds	r1, r2, #1
 800e10c:	75f9      	strb	r1, [r7, #23]
 800e10e:	4611      	mov	r1, r2
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	440a      	add	r2, r1
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e118:	7dfb      	ldrb	r3, [r7, #23]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	75fa      	strb	r2, [r7, #23]
 800e11e:	461a      	mov	r2, r3
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	4413      	add	r3, r2
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1e8      	bne.n	800e102 <USBD_GetString+0x4e>
    }
  }
}
 800e130:	bf00      	nop
 800e132:	3718      	adds	r7, #24
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e140:	2300      	movs	r3, #0
 800e142:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e144:	e005      	b.n	800e152 <USBD_GetLen+0x1a>
    {
        len++;
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	3301      	adds	r3, #1
 800e14a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3301      	adds	r3, #1
 800e150:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1f5      	bne.n	800e146 <USBD_GetLen+0xe>
    }

    return len;
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4613      	mov	r3, r2
 800e174:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2202      	movs	r2, #2
 800e17a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e184:	88fa      	ldrh	r2, [r7, #6]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	2100      	movs	r1, #0
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f003 fc76 	bl	8011a82 <USBD_LL_Transmit>

  return USBD_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e1ae:	88fb      	ldrh	r3, [r7, #6]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f003 fc64 	bl	8011a82 <USBD_LL_Transmit>

  return USBD_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2203      	movs	r2, #3
 800e1d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e1da:	88fa      	ldrh	r2, [r7, #6]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e1e2:	88fa      	ldrh	r2, [r7, #6]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f003 fc69 	bl	8011ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	4613      	mov	r3, r2
 800e20c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e20e:	88fb      	ldrh	r3, [r7, #6]
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	2100      	movs	r1, #0
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f003 fc57 	bl	8011ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2204      	movs	r2, #4
 800e230:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e234:	2300      	movs	r3, #0
 800e236:	2200      	movs	r2, #0
 800e238:	2100      	movs	r1, #0
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f003 fc21 	bl	8011a82 <USBD_LL_Transmit>

  return USBD_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2205      	movs	r2, #5
 800e256:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e25a:	2300      	movs	r3, #0
 800e25c:	2200      	movs	r2, #0
 800e25e:	2100      	movs	r1, #0
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f003 fc31 	bl	8011ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e27a:	2300      	movs	r3, #0
 800e27c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e27e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e282:	2b84      	cmp	r3, #132	; 0x84
 800e284:	d005      	beq.n	800e292 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e286:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4413      	add	r3, r2
 800e28e:	3303      	adds	r3, #3
 800e290:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e292:	68fb      	ldr	r3, [r7, #12]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a6:	f3ef 8305 	mrs	r3, IPSR
 800e2aa:	607b      	str	r3, [r7, #4]
  return(result);
 800e2ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	bf14      	ite	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	2300      	moveq	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e2c8:	f001 fcca 	bl	800fc60 <vTaskStartScheduler>
  
  return osOK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2d4:	b089      	sub	sp, #36	; 0x24
 800e2d6:	af04      	add	r7, sp, #16
 800e2d8:	6078      	str	r0, [r7, #4]
 800e2da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d020      	beq.n	800e326 <osThreadCreate+0x54>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d01c      	beq.n	800e326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685c      	ldr	r4, [r3, #4]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681d      	ldr	r5, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	691e      	ldr	r6, [r3, #16]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffb6 	bl	800e270 <makeFreeRtosPriority>
 800e304:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	695b      	ldr	r3, [r3, #20]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e30e:	9202      	str	r2, [sp, #8]
 800e310:	9301      	str	r3, [sp, #4]
 800e312:	9100      	str	r1, [sp, #0]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	4632      	mov	r2, r6
 800e318:	4629      	mov	r1, r5
 800e31a:	4620      	mov	r0, r4
 800e31c:	f001 fae5 	bl	800f8ea <xTaskCreateStatic>
 800e320:	4603      	mov	r3, r0
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	e01c      	b.n	800e360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685c      	ldr	r4, [r3, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e332:	b29e      	uxth	r6, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff ff98 	bl	800e270 <makeFreeRtosPriority>
 800e340:	4602      	mov	r2, r0
 800e342:	f107 030c 	add.w	r3, r7, #12
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	9200      	str	r2, [sp, #0]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	4632      	mov	r2, r6
 800e34e:	4629      	mov	r1, r5
 800e350:	4620      	mov	r0, r4
 800e352:	f001 fb23 	bl	800f99c <xTaskCreate>
 800e356:	4603      	mov	r3, r0
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d001      	beq.n	800e360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e35c:	2300      	movs	r3, #0
 800e35e:	e000      	b.n	800e362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e360:	68fb      	ldr	r3, [r7, #12]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e36a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <osDelay+0x16>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	e000      	b.n	800e382 <osDelay+0x18>
 800e380:	2301      	movs	r3, #1
 800e382:	4618      	mov	r0, r3
 800e384:	f001 fc38 	bl	800fbf8 <vTaskDelay>
  
  return osOK;
 800e388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d007      	beq.n	800e3b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	f000 fce1 	bl	800ed70 <xQueueCreateMutexStatic>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	e003      	b.n	800e3ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	f000 fcc4 	bl	800ed40 <xQueueCreateMutex>
 800e3b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d101      	bne.n	800e3dc <osMutexWait+0x18>
    return osErrorParameter;
 800e3d8:	2380      	movs	r3, #128	; 0x80
 800e3da:	e03a      	b.n	800e452 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e6:	d103      	bne.n	800e3f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800e3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ec:	60fb      	str	r3, [r7, #12]
 800e3ee:	e009      	b.n	800e404 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d006      	beq.n	800e404 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <osMutexWait+0x40>
      ticks = 1;
 800e400:	2301      	movs	r3, #1
 800e402:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e404:	f7ff ff4c 	bl	800e2a0 <inHandlerMode>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d017      	beq.n	800e43e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e40e:	f107 0308 	add.w	r3, r7, #8
 800e412:	461a      	mov	r2, r3
 800e414:	2100      	movs	r1, #0
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f001 f8c2 	bl	800f5a0 <xQueueReceiveFromISR>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d001      	beq.n	800e426 <osMutexWait+0x62>
      return osErrorOS;
 800e422:	23ff      	movs	r3, #255	; 0xff
 800e424:	e015      	b.n	800e452 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d011      	beq.n	800e450 <osMutexWait+0x8c>
 800e42c:	4b0b      	ldr	r3, [pc, #44]	; (800e45c <osMutexWait+0x98>)
 800e42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	e008      	b.n	800e450 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800e43e:	68f9      	ldr	r1, [r7, #12]
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 ffa5 	bl	800f390 <xQueueSemaphoreTake>
 800e446:	4603      	mov	r3, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d001      	beq.n	800e450 <osMutexWait+0x8c>
    return osErrorOS;
 800e44c:	23ff      	movs	r3, #255	; 0xff
 800e44e:	e000      	b.n	800e452 <osMutexWait+0x8e>
  }
  
  return osOK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	e000ed04 	.word	0xe000ed04

0800e460 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e46c:	2300      	movs	r3, #0
 800e46e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800e470:	f7ff ff16 	bl	800e2a0 <inHandlerMode>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d016      	beq.n	800e4a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e47a:	f107 0308 	add.w	r3, r7, #8
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fe1f 	bl	800f0c4 <xQueueGiveFromISR>
 800e486:	4603      	mov	r3, r0
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d001      	beq.n	800e490 <osMutexRelease+0x30>
      return osErrorOS;
 800e48c:	23ff      	movs	r3, #255	; 0xff
 800e48e:	e017      	b.n	800e4c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d013      	beq.n	800e4be <osMutexRelease+0x5e>
 800e496:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <osMutexRelease+0x68>)
 800e498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	e00a      	b.n	800e4be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fc7a 	bl	800eda8 <xQueueGenericSend>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d001      	beq.n	800e4be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800e4ba:	23ff      	movs	r3, #255	; 0xff
 800e4bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800e4be:	68fb      	ldr	r3, [r7, #12]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	e000ed04 	.word	0xe000ed04

0800e4cc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	3303      	adds	r3, #3
 800e4da:	f023 0303 	bic.w	r3, r3, #3
 800e4de:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800e4e0:	2014      	movs	r0, #20
 800e4e2:	f002 fc3d 	bl	8010d60 <pvPortMalloc>
 800e4e6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d046      	beq.n	800e57c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2200      	movs	r2, #0
 800e500:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4618      	mov	r0, r3
 800e508:	f002 fc2a 	bl	8010d60 <pvPortMalloc>
 800e50c:	4602      	mov	r2, r0
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d02b      	beq.n	800e572 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	fb02 f303 	mul.w	r3, r2, r3
 800e524:	4618      	mov	r0, r3
 800e526:	f002 fc1b 	bl	8010d60 <pvPortMalloc>
 800e52a:	4602      	mov	r2, r0
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d011      	beq.n	800e55c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800e538:	2300      	movs	r3, #0
 800e53a:	613b      	str	r3, [r7, #16]
 800e53c:	e008      	b.n	800e550 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	4413      	add	r3, r2
 800e546:	2200      	movs	r2, #0
 800e548:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	3301      	adds	r3, #1
 800e54e:	613b      	str	r3, [r7, #16]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	429a      	cmp	r2, r3
 800e558:	d3f1      	bcc.n	800e53e <osPoolCreate+0x72>
 800e55a:	e00f      	b.n	800e57c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	4618      	mov	r0, r3
 800e562:	f002 fcbf 	bl	8010ee4 <vPortFree>
        vPortFree(thePool);
 800e566:	6978      	ldr	r0, [r7, #20]
 800e568:	f002 fcbc 	bl	8010ee4 <vPortFree>
        thePool = NULL;
 800e56c:	2300      	movs	r3, #0
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	e004      	b.n	800e57c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800e572:	6978      	ldr	r0, [r7, #20]
 800e574:	f002 fcb6 	bl	8010ee4 <vPortFree>
      thePool = NULL;
 800e578:	2300      	movs	r3, #0
 800e57a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800e57c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b08a      	sub	sp, #40	; 0x28
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800e596:	f7ff fe83 	bl	800e2a0 <inHandlerMode>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00e      	beq.n	800e5be <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e5a0:	f3ef 8211 	mrs	r2, BASEPRI
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	617a      	str	r2, [r7, #20]
 800e5b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e5b8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e5bc:	e001      	b.n	800e5c2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800e5be:	f002 fab5 	bl	8010b2c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	61fb      	str	r3, [r7, #28]
 800e5c6:	e029      	b.n	800e61c <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	69fa      	ldr	r2, [r7, #28]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d301      	bcc.n	800e5e0 <osPoolAlloc+0x5a>
      index = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d113      	bne.n	800e616 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4619      	mov	r1, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	69ba      	ldr	r2, [r7, #24]
 800e606:	fb02 f303 	mul.w	r3, r2, r3
 800e60a:	440b      	add	r3, r1
 800e60c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	69ba      	ldr	r2, [r7, #24]
 800e612:	611a      	str	r2, [r3, #16]
      break;
 800e614:	e007      	b.n	800e626 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	3301      	adds	r3, #1
 800e61a:	61fb      	str	r3, [r7, #28]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	69fa      	ldr	r2, [r7, #28]
 800e622:	429a      	cmp	r2, r3
 800e624:	d3d0      	bcc.n	800e5c8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800e626:	f7ff fe3b 	bl	800e2a0 <inHandlerMode>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	e001      	b.n	800e640 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800e63c:	f002 faa4 	bl	8010b88 <vPortExitCritical>
  }
  
  return p;
 800e640:	6a3b      	ldr	r3, [r7, #32]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3728      	adds	r7, #40	; 0x28
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800e64a:	b480      	push	{r7}
 800e64c:	b085      	sub	sp, #20
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <osPoolFree+0x14>
    return osErrorParameter;
 800e65a:	2380      	movs	r3, #128	; 0x80
 800e65c:	e030      	b.n	800e6c0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <osPoolFree+0x1e>
    return osErrorParameter;
 800e664:	2380      	movs	r3, #128	; 0x80
 800e666:	e02b      	b.n	800e6c0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	683a      	ldr	r2, [r7, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d201      	bcs.n	800e676 <osPoolFree+0x2c>
    return osErrorParameter;
 800e672:	2380      	movs	r3, #128	; 0x80
 800e674:	e024      	b.n	800e6c0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	6812      	ldr	r2, [r2, #0]
 800e67c:	1a9b      	subs	r3, r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	fbb3 f1f2 	udiv	r1, r3, r2
 800e68a:	fb02 f201 	mul.w	r2, r2, r1
 800e68e:	1a9b      	subs	r3, r3, r2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <osPoolFree+0x4e>
    return osErrorParameter;
 800e694:	2380      	movs	r3, #128	; 0x80
 800e696:	e013      	b.n	800e6c0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6a2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d301      	bcc.n	800e6b2 <osPoolFree+0x68>
    return osErrorParameter;
 800e6ae:	2380      	movs	r3, #128	; 0x80
 800e6b0:	e006      	b.n	800e6c0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	613b      	str	r3, [r7, #16]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689c      	ldr	r4, [r3, #8]
 800e6ea:	200c      	movs	r0, #12
 800e6ec:	f002 fb38 	bl	8010d60 <pvPortMalloc>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <osMailCreate+0x36>
    return NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	e038      	b.n	800e774 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6818      	ldr	r0, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	681c      	ldr	r4, [r3, #0]
 800e716:	2200      	movs	r2, #0
 800e718:	2104      	movs	r1, #4
 800e71a:	f000 fa9b 	bl	800ec54 <xQueueGenericCreate>
 800e71e:	4603      	mov	r3, r0
 800e720:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d107      	bne.n	800e73e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4618      	mov	r0, r3
 800e736:	f002 fbd5 	bl	8010ee4 <vPortFree>
    return NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	e01a      	b.n	800e774 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	681c      	ldr	r4, [r3, #0]
 800e744:	f107 030c 	add.w	r3, r7, #12
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff febf 	bl	800e4cc <osPoolCreate>
 800e74e:	4603      	mov	r3, r0
 800e750:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d107      	bne.n	800e76e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4618      	mov	r0, r3
 800e766:	f002 fbbd 	bl	8010ee4 <vPortFree>
    return NULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	e002      	b.n	800e774 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800e774:	4618      	mov	r0, r3
 800e776:	371c      	adds	r7, #28
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd90      	pop	{r4, r7, pc}

0800e77c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <osMailAlloc+0x14>
    return NULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	e006      	b.n	800e79e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff fef6 	bl	800e586 <osPoolAlloc>
 800e79a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800e79c:	68fb      	ldr	r3, [r7, #12]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
	...

0800e7a8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <osMailPut+0x14>
    return osErrorParameter;
 800e7b8:	2380      	movs	r3, #128	; 0x80
 800e7ba:	e02c      	b.n	800e816 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800e7c0:	f7ff fd6e 	bl	800e2a0 <inHandlerMode>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d018      	beq.n	800e7fc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6858      	ldr	r0, [r3, #4]
 800e7ce:	f107 020c 	add.w	r2, r7, #12
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f000 fbe1 	bl	800ef9c <xQueueGenericSendFromISR>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d001      	beq.n	800e7e4 <osMailPut+0x3c>
      return osErrorOS;
 800e7e0:	23ff      	movs	r3, #255	; 0xff
 800e7e2:	e018      	b.n	800e816 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d014      	beq.n	800e814 <osMailPut+0x6c>
 800e7ea:	4b0d      	ldr	r3, [pc, #52]	; (800e820 <osMailPut+0x78>)
 800e7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	e00b      	b.n	800e814 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6858      	ldr	r0, [r3, #4]
 800e800:	4639      	mov	r1, r7
 800e802:	2300      	movs	r3, #0
 800e804:	2200      	movs	r2, #0
 800e806:	f000 facf 	bl	800eda8 <xQueueGenericSend>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d001      	beq.n	800e814 <osMailPut+0x6c>
      return osErrorOS;
 800e810:	23ff      	movs	r3, #255	; 0xff
 800e812:	e000      	b.n	800e816 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800e814:	2300      	movs	r3, #0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	e000ed04 	.word	0xe000ed04

0800e824 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b08b      	sub	sp, #44	; 0x2c
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10a      	bne.n	800e850 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800e83a:	2380      	movs	r3, #128	; 0x80
 800e83c:	617b      	str	r3, [r7, #20]
    return event;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	461c      	mov	r4, r3
 800e842:	f107 0314 	add.w	r3, r7, #20
 800e846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e84a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e84e:	e056      	b.n	800e8fe <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e850:	2300      	movs	r3, #0
 800e852:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e85e:	d103      	bne.n	800e868 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800e860:	f04f 33ff 	mov.w	r3, #4294967295
 800e864:	627b      	str	r3, [r7, #36]	; 0x24
 800e866:	e009      	b.n	800e87c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d006      	beq.n	800e87c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	2b00      	cmp	r3, #0
 800e876:	d101      	bne.n	800e87c <osMailGet+0x58>
      ticks = 1;
 800e878:	2301      	movs	r3, #1
 800e87a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e87c:	f7ff fd10 	bl	800e2a0 <inHandlerMode>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d01d      	beq.n	800e8c2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	6858      	ldr	r0, [r3, #4]
 800e88a:	f107 0220 	add.w	r2, r7, #32
 800e88e:	f107 0314 	add.w	r3, r7, #20
 800e892:	3304      	adds	r3, #4
 800e894:	4619      	mov	r1, r3
 800e896:	f000 fe83 	bl	800f5a0 <xQueueReceiveFromISR>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d102      	bne.n	800e8a6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800e8a0:	2320      	movs	r3, #32
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	e001      	b.n	800e8aa <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d01e      	beq.n	800e8ee <osMailGet+0xca>
 800e8b0:	4b15      	ldr	r3, [pc, #84]	; (800e908 <osMailGet+0xe4>)
 800e8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	e015      	b.n	800e8ee <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	6858      	ldr	r0, [r3, #4]
 800e8c6:	f107 0314 	add.w	r3, r7, #20
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	f000 fc82 	bl	800f1d8 <xQueueReceive>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d102      	bne.n	800e8e0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800e8da:	2320      	movs	r3, #32
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	e006      	b.n	800e8ee <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <osMailGet+0xc6>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	e000      	b.n	800e8ec <osMailGet+0xc8>
 800e8ea:	2340      	movs	r3, #64	; 0x40
 800e8ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	461c      	mov	r4, r3
 800e8f2:	f107 0314 	add.w	r3, r7, #20
 800e8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e8fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	372c      	adds	r7, #44	; 0x2c
 800e902:	46bd      	mov	sp, r7
 800e904:	bd90      	pop	{r4, r7, pc}
 800e906:	bf00      	nop
 800e908:	e000ed04 	.word	0xe000ed04

0800e90c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d101      	bne.n	800e920 <osMailFree+0x14>
    return osErrorParameter;
 800e91c:	2380      	movs	r3, #128	; 0x80
 800e91e:	e006      	b.n	800e92e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fe8f 	bl	800e64a <osPoolFree>
 800e92c:	4603      	mov	r3, r0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e936:	b480      	push	{r7}
 800e938:	b083      	sub	sp, #12
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f103 0208 	add.w	r2, r3, #8
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f04f 32ff 	mov.w	r2, #4294967295
 800e94e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f103 0208 	add.w	r2, r3, #8
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f103 0208 	add.w	r2, r3, #8
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e96a:	bf00      	nop
 800e96c:	370c      	adds	r7, #12
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e976:	b480      	push	{r7}
 800e978:	b083      	sub	sp, #12
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	689a      	ldr	r2, [r3, #8]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	601a      	str	r2, [r3, #0]
}
 800e9cc:	bf00      	nop
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ee:	d103      	bne.n	800e9f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	60fb      	str	r3, [r7, #12]
 800e9f6:	e00c      	b.n	800ea12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	60fb      	str	r3, [r7, #12]
 800e9fe:	e002      	b.n	800ea06 <vListInsert+0x2e>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	60fb      	str	r3, [r7, #12]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d2f6      	bcs.n	800ea00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b085      	sub	sp, #20
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	6892      	ldr	r2, [r2, #8]
 800ea60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	6852      	ldr	r2, [r2, #4]
 800ea6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d103      	bne.n	800ea7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689a      	ldr	r2, [r3, #8]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	1e5a      	subs	r2, r3, #1
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d109      	bne.n	800eac8 <xQueueGenericReset+0x28>
	__asm volatile
 800eab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	60bb      	str	r3, [r7, #8]
 800eac6:	e7fe      	b.n	800eac6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800eac8:	f002 f830 	bl	8010b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead4:	68f9      	ldr	r1, [r7, #12]
 800ead6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ead8:	fb01 f303 	mul.w	r3, r1, r3
 800eadc:	441a      	add	r2, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	68f9      	ldr	r1, [r7, #12]
 800eafc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eafe:	fb01 f303 	mul.w	r3, r1, r3
 800eb02:	441a      	add	r2, r3
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	22ff      	movs	r2, #255	; 0xff
 800eb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	22ff      	movs	r2, #255	; 0xff
 800eb14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d114      	bne.n	800eb48 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d01a      	beq.n	800eb5c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3310      	adds	r3, #16
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f001 fada 	bl	80100e4 <xTaskRemoveFromEventList>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d012      	beq.n	800eb5c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <xQueueGenericReset+0xcc>)
 800eb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3c:	601a      	str	r2, [r3, #0]
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	e009      	b.n	800eb5c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3310      	adds	r3, #16
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fef2 	bl	800e936 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3324      	adds	r3, #36	; 0x24
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff feed 	bl	800e936 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb5c:	f002 f814 	bl	8010b88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb60:	2301      	movs	r3, #1
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	e000ed04 	.word	0xe000ed04

0800eb70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b08e      	sub	sp, #56	; 0x38
 800eb74:	af02      	add	r7, sp, #8
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d109      	bne.n	800eb98 <xQueueGenericCreateStatic+0x28>
 800eb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb96:	e7fe      	b.n	800eb96 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d109      	bne.n	800ebb2 <xQueueGenericCreateStatic+0x42>
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	627b      	str	r3, [r7, #36]	; 0x24
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <xQueueGenericCreateStatic+0x4e>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <xQueueGenericCreateStatic+0x52>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e000      	b.n	800ebc4 <xQueueGenericCreateStatic+0x54>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d109      	bne.n	800ebdc <xQueueGenericCreateStatic+0x6c>
 800ebc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	623b      	str	r3, [r7, #32]
 800ebda:	e7fe      	b.n	800ebda <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d102      	bne.n	800ebe8 <xQueueGenericCreateStatic+0x78>
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <xQueueGenericCreateStatic+0x7c>
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e000      	b.n	800ebee <xQueueGenericCreateStatic+0x7e>
 800ebec:	2300      	movs	r3, #0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d109      	bne.n	800ec06 <xQueueGenericCreateStatic+0x96>
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	61fb      	str	r3, [r7, #28]
 800ec04:	e7fe      	b.n	800ec04 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ec06:	2348      	movs	r3, #72	; 0x48
 800ec08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b48      	cmp	r3, #72	; 0x48
 800ec0e:	d009      	beq.n	800ec24 <xQueueGenericCreateStatic+0xb4>
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	61bb      	str	r3, [r7, #24]
 800ec22:	e7fe      	b.n	800ec22 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00d      	beq.n	800ec4a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	2201      	movs	r2, #1
 800ec32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	68b9      	ldr	r1, [r7, #8]
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 f842 	bl	800ecce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3730      	adds	r7, #48	; 0x30
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08a      	sub	sp, #40	; 0x28
 800ec58:	af02      	add	r7, sp, #8
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d109      	bne.n	800ec7c <xQueueGenericCreate+0x28>
 800ec68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	613b      	str	r3, [r7, #16]
 800ec7a:	e7fe      	b.n	800ec7a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e004      	b.n	800ec92 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	fb02 f303 	mul.w	r3, r2, r3
 800ec90:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	3348      	adds	r3, #72	; 0x48
 800ec96:	4618      	mov	r0, r3
 800ec98:	f002 f862 	bl	8010d60 <pvPortMalloc>
 800ec9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00f      	beq.n	800ecc4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	3348      	adds	r3, #72	; 0x48
 800eca8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecb2:	79fa      	ldrb	r2, [r7, #7]
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	4613      	mov	r3, r2
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 f805 	bl	800ecce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ecc4:	69bb      	ldr	r3, [r7, #24]
	}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	607a      	str	r2, [r7, #4]
 800ecda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d103      	bne.n	800ecea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	69ba      	ldr	r2, [r7, #24]
 800ece6:	601a      	str	r2, [r3, #0]
 800ece8:	e002      	b.n	800ecf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	69b8      	ldr	r0, [r7, #24]
 800ed00:	f7ff fece 	bl	800eaa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ed04:	bf00      	nop
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00e      	beq.n	800ed38 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2100      	movs	r1, #0
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f838 	bl	800eda8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	617b      	str	r3, [r7, #20]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	461a      	mov	r2, r3
 800ed56:	6939      	ldr	r1, [r7, #16]
 800ed58:	6978      	ldr	r0, [r7, #20]
 800ed5a:	f7ff ff7b 	bl	800ec54 <xQueueGenericCreate>
 800ed5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7ff ffd3 	bl	800ed0c <prvInitialiseMutex>

		return pxNewQueue;
 800ed66:	68fb      	ldr	r3, [r7, #12]
	}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b088      	sub	sp, #32
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	4603      	mov	r3, r0
 800ed78:	6039      	str	r1, [r7, #0]
 800ed7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	617b      	str	r3, [r7, #20]
 800ed80:	2300      	movs	r3, #0
 800ed82:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ed84:	79fb      	ldrb	r3, [r7, #7]
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	6939      	ldr	r1, [r7, #16]
 800ed8e:	6978      	ldr	r0, [r7, #20]
 800ed90:	f7ff feee 	bl	800eb70 <xQueueGenericCreateStatic>
 800ed94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff ffb8 	bl	800ed0c <prvInitialiseMutex>

		return pxNewQueue;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
	...

0800eda8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08e      	sub	sp, #56	; 0x38
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800edb6:	2300      	movs	r3, #0
 800edb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d109      	bne.n	800edd8 <xQueueGenericSend+0x30>
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800edd6:	e7fe      	b.n	800edd6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d103      	bne.n	800ede6 <xQueueGenericSend+0x3e>
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d101      	bne.n	800edea <xQueueGenericSend+0x42>
 800ede6:	2301      	movs	r3, #1
 800ede8:	e000      	b.n	800edec <xQueueGenericSend+0x44>
 800edea:	2300      	movs	r3, #0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d109      	bne.n	800ee04 <xQueueGenericSend+0x5c>
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	627b      	str	r3, [r7, #36]	; 0x24
 800ee02:	e7fe      	b.n	800ee02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d103      	bne.n	800ee12 <xQueueGenericSend+0x6a>
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <xQueueGenericSend+0x6e>
 800ee12:	2301      	movs	r3, #1
 800ee14:	e000      	b.n	800ee18 <xQueueGenericSend+0x70>
 800ee16:	2300      	movs	r3, #0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d109      	bne.n	800ee30 <xQueueGenericSend+0x88>
 800ee1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	623b      	str	r3, [r7, #32]
 800ee2e:	e7fe      	b.n	800ee2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee30:	f001 fb14 	bl	801045c <xTaskGetSchedulerState>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <xQueueGenericSend+0x98>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <xQueueGenericSend+0x9c>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <xQueueGenericSend+0x9e>
 800ee44:	2300      	movs	r3, #0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d109      	bne.n	800ee5e <xQueueGenericSend+0xb6>
 800ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	61fb      	str	r3, [r7, #28]
 800ee5c:	e7fe      	b.n	800ee5c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee5e:	f001 fe65 	bl	8010b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d302      	bcc.n	800ee74 <xQueueGenericSend+0xcc>
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d129      	bne.n	800eec8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee7a:	f000 fc26 	bl	800f6ca <prvCopyDataToQueue>
 800ee7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d010      	beq.n	800eeaa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8a:	3324      	adds	r3, #36	; 0x24
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f001 f929 	bl	80100e4 <xTaskRemoveFromEventList>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d013      	beq.n	800eec0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee98:	4b3f      	ldr	r3, [pc, #252]	; (800ef98 <xQueueGenericSend+0x1f0>)
 800ee9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee9e:	601a      	str	r2, [r3, #0]
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	e00a      	b.n	800eec0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eeb0:	4b39      	ldr	r3, [pc, #228]	; (800ef98 <xQueueGenericSend+0x1f0>)
 800eeb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eec0:	f001 fe62 	bl	8010b88 <vPortExitCritical>
				return pdPASS;
 800eec4:	2301      	movs	r3, #1
 800eec6:	e063      	b.n	800ef90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d103      	bne.n	800eed6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eece:	f001 fe5b 	bl	8010b88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e05c      	b.n	800ef90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	4618      	mov	r0, r3
 800eee2:	f001 f961 	bl	80101a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eeea:	f001 fe4d 	bl	8010b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeee:	f000 ff15 	bl	800fd1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eef2:	f001 fe1b 	bl	8010b2c <vPortEnterCritical>
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d103      	bne.n	800ef0c <xQueueGenericSend+0x164>
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef12:	b25b      	sxtb	r3, r3
 800ef14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef18:	d103      	bne.n	800ef22 <xQueueGenericSend+0x17a>
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef22:	f001 fe31 	bl	8010b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef26:	1d3a      	adds	r2, r7, #4
 800ef28:	f107 0314 	add.w	r3, r7, #20
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f001 f950 	bl	80101d4 <xTaskCheckForTimeOut>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d124      	bne.n	800ef84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef3c:	f000 fcbd 	bl	800f8ba <prvIsQueueFull>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d018      	beq.n	800ef78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	3310      	adds	r3, #16
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f001 f8a4 	bl	801009c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef56:	f000 fc48 	bl	800f7ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef5a:	f000 feed 	bl	800fd38 <xTaskResumeAll>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f47f af7c 	bne.w	800ee5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ef66:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <xQueueGenericSend+0x1f0>)
 800ef68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	e772      	b.n	800ee5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef7a:	f000 fc36 	bl	800f7ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef7e:	f000 fedb 	bl	800fd38 <xTaskResumeAll>
 800ef82:	e76c      	b.n	800ee5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef86:	f000 fc30 	bl	800f7ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef8a:	f000 fed5 	bl	800fd38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef8e:	2300      	movs	r3, #0
		}
	}
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3738      	adds	r7, #56	; 0x38
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	e000ed04 	.word	0xe000ed04

0800ef9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b08e      	sub	sp, #56	; 0x38
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d109      	bne.n	800efc8 <xQueueGenericSendFromISR+0x2c>
 800efb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	627b      	str	r3, [r7, #36]	; 0x24
 800efc6:	e7fe      	b.n	800efc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d103      	bne.n	800efd6 <xQueueGenericSendFromISR+0x3a>
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <xQueueGenericSendFromISR+0x3e>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e000      	b.n	800efdc <xQueueGenericSendFromISR+0x40>
 800efda:	2300      	movs	r3, #0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d109      	bne.n	800eff4 <xQueueGenericSendFromISR+0x58>
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	623b      	str	r3, [r7, #32]
 800eff2:	e7fe      	b.n	800eff2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d103      	bne.n	800f002 <xQueueGenericSendFromISR+0x66>
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800effe:	2b01      	cmp	r3, #1
 800f000:	d101      	bne.n	800f006 <xQueueGenericSendFromISR+0x6a>
 800f002:	2301      	movs	r3, #1
 800f004:	e000      	b.n	800f008 <xQueueGenericSendFromISR+0x6c>
 800f006:	2300      	movs	r3, #0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d109      	bne.n	800f020 <xQueueGenericSendFromISR+0x84>
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	61fb      	str	r3, [r7, #28]
 800f01e:	e7fe      	b.n	800f01e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f020:	f001 fe60 	bl	8010ce4 <vPortValidateInterruptPriority>
	__asm volatile
 800f024:	f3ef 8211 	mrs	r2, BASEPRI
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	61ba      	str	r2, [r7, #24]
 800f03a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f03c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f03e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f048:	429a      	cmp	r2, r3
 800f04a:	d302      	bcc.n	800f052 <xQueueGenericSendFromISR+0xb6>
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d12c      	bne.n	800f0ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f062:	f000 fb32 	bl	800f6ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f066:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06e:	d112      	bne.n	800f096 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	d016      	beq.n	800f0a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07a:	3324      	adds	r3, #36	; 0x24
 800f07c:	4618      	mov	r0, r3
 800f07e:	f001 f831 	bl	80100e4 <xTaskRemoveFromEventList>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00e      	beq.n	800f0a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00b      	beq.n	800f0a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	e007      	b.n	800f0a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f09a:	3301      	adds	r3, #1
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	b25a      	sxtb	r2, r3
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f0aa:	e001      	b.n	800f0b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3738      	adds	r7, #56	; 0x38
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08e      	sub	sp, #56	; 0x38
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <xQueueGiveFromISR+0x28>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	623b      	str	r3, [r7, #32]
 800f0ea:	e7fe      	b.n	800f0ea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d009      	beq.n	800f108 <xQueueGiveFromISR+0x44>
 800f0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f8:	f383 8811 	msr	BASEPRI, r3
 800f0fc:	f3bf 8f6f 	isb	sy
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	61fb      	str	r3, [r7, #28]
 800f106:	e7fe      	b.n	800f106 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <xQueueGiveFromISR+0x54>
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d101      	bne.n	800f11c <xQueueGiveFromISR+0x58>
 800f118:	2301      	movs	r3, #1
 800f11a:	e000      	b.n	800f11e <xQueueGiveFromISR+0x5a>
 800f11c:	2300      	movs	r3, #0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d109      	bne.n	800f136 <xQueueGiveFromISR+0x72>
 800f122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	61bb      	str	r3, [r7, #24]
 800f134:	e7fe      	b.n	800f134 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f136:	f001 fdd5 	bl	8010ce4 <vPortValidateInterruptPriority>
	__asm volatile
 800f13a:	f3ef 8211 	mrs	r2, BASEPRI
 800f13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	617a      	str	r2, [r7, #20]
 800f150:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f152:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f15a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f162:	429a      	cmp	r2, r3
 800f164:	d22b      	bcs.n	800f1be <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f176:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f180:	d112      	bne.n	800f1a8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f186:	2b00      	cmp	r3, #0
 800f188:	d016      	beq.n	800f1b8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	3324      	adds	r3, #36	; 0x24
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 ffa8 	bl	80100e4 <xTaskRemoveFromEventList>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00e      	beq.n	800f1b8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00b      	beq.n	800f1b8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	e007      	b.n	800f1b8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	b25a      	sxtb	r2, r3
 800f1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	637b      	str	r3, [r7, #52]	; 0x34
 800f1bc:	e001      	b.n	800f1c2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3738      	adds	r7, #56	; 0x38
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08c      	sub	sp, #48	; 0x30
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <xQueueReceive+0x2e>
	__asm volatile
 800f1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	623b      	str	r3, [r7, #32]
 800f204:	e7fe      	b.n	800f204 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d103      	bne.n	800f214 <xQueueReceive+0x3c>
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <xQueueReceive+0x40>
 800f214:	2301      	movs	r3, #1
 800f216:	e000      	b.n	800f21a <xQueueReceive+0x42>
 800f218:	2300      	movs	r3, #0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d109      	bne.n	800f232 <xQueueReceive+0x5a>
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	61fb      	str	r3, [r7, #28]
 800f230:	e7fe      	b.n	800f230 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f232:	f001 f913 	bl	801045c <xTaskGetSchedulerState>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <xQueueReceive+0x6a>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <xQueueReceive+0x6e>
 800f242:	2301      	movs	r3, #1
 800f244:	e000      	b.n	800f248 <xQueueReceive+0x70>
 800f246:	2300      	movs	r3, #0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d109      	bne.n	800f260 <xQueueReceive+0x88>
 800f24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	61bb      	str	r3, [r7, #24]
 800f25e:	e7fe      	b.n	800f25e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f260:	f001 fc64 	bl	8010b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f268:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d01f      	beq.n	800f2b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f270:	68b9      	ldr	r1, [r7, #8]
 800f272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f274:	f000 fa93 	bl	800f79e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27a:	1e5a      	subs	r2, r3, #1
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00f      	beq.n	800f2a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	3310      	adds	r3, #16
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 ff29 	bl	80100e4 <xTaskRemoveFromEventList>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d007      	beq.n	800f2a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f298:	4b3c      	ldr	r3, [pc, #240]	; (800f38c <xQueueReceive+0x1b4>)
 800f29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2a8:	f001 fc6e 	bl	8010b88 <vPortExitCritical>
				return pdPASS;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e069      	b.n	800f384 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f2b6:	f001 fc67 	bl	8010b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e062      	b.n	800f384 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d106      	bne.n	800f2d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2c4:	f107 0310 	add.w	r3, r7, #16
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 ff6d 	bl	80101a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2d2:	f001 fc59 	bl	8010b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2d6:	f000 fd21 	bl	800fd1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2da:	f001 fc27 	bl	8010b2c <vPortEnterCritical>
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2e4:	b25b      	sxtb	r3, r3
 800f2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ea:	d103      	bne.n	800f2f4 <xQueueReceive+0x11c>
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2fa:	b25b      	sxtb	r3, r3
 800f2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f300:	d103      	bne.n	800f30a <xQueueReceive+0x132>
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	2200      	movs	r2, #0
 800f306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f30a:	f001 fc3d 	bl	8010b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f30e:	1d3a      	adds	r2, r7, #4
 800f310:	f107 0310 	add.w	r3, r7, #16
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f000 ff5c 	bl	80101d4 <xTaskCheckForTimeOut>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d123      	bne.n	800f36a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f324:	f000 fab3 	bl	800f88e <prvIsQueueEmpty>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d017      	beq.n	800f35e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f330:	3324      	adds	r3, #36	; 0x24
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	4611      	mov	r1, r2
 800f336:	4618      	mov	r0, r3
 800f338:	f000 feb0 	bl	801009c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f33e:	f000 fa54 	bl	800f7ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f342:	f000 fcf9 	bl	800fd38 <xTaskResumeAll>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d189      	bne.n	800f260 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f34c:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <xQueueReceive+0x1b4>)
 800f34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	e780      	b.n	800f260 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f360:	f000 fa43 	bl	800f7ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f364:	f000 fce8 	bl	800fd38 <xTaskResumeAll>
 800f368:	e77a      	b.n	800f260 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f36c:	f000 fa3d 	bl	800f7ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f370:	f000 fce2 	bl	800fd38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f376:	f000 fa8a 	bl	800f88e <prvIsQueueEmpty>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f43f af6f 	beq.w	800f260 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f384:	4618      	mov	r0, r3
 800f386:	3730      	adds	r7, #48	; 0x30
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	e000ed04 	.word	0xe000ed04

0800f390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b08e      	sub	sp, #56	; 0x38
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f39a:	2300      	movs	r3, #0
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d109      	bne.n	800f3c0 <xQueueSemaphoreTake+0x30>
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	623b      	str	r3, [r7, #32]
 800f3be:	e7fe      	b.n	800f3be <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d009      	beq.n	800f3dc <xQueueSemaphoreTake+0x4c>
 800f3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	61fb      	str	r3, [r7, #28]
 800f3da:	e7fe      	b.n	800f3da <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3dc:	f001 f83e 	bl	801045c <xTaskGetSchedulerState>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d102      	bne.n	800f3ec <xQueueSemaphoreTake+0x5c>
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <xQueueSemaphoreTake+0x60>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	e000      	b.n	800f3f2 <xQueueSemaphoreTake+0x62>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d109      	bne.n	800f40a <xQueueSemaphoreTake+0x7a>
 800f3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e7fe      	b.n	800f408 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f40a:	f001 fb8f 	bl	8010b2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	d024      	beq.n	800f464 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	1e5a      	subs	r2, r3, #1
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d104      	bne.n	800f434 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f42a:	f001 f9dd 	bl	80107e8 <pvTaskIncrementMutexHeldCount>
 800f42e:	4602      	mov	r2, r0
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00f      	beq.n	800f45c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	3310      	adds	r3, #16
 800f440:	4618      	mov	r0, r3
 800f442:	f000 fe4f 	bl	80100e4 <xTaskRemoveFromEventList>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d007      	beq.n	800f45c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f44c:	4b53      	ldr	r3, [pc, #332]	; (800f59c <xQueueSemaphoreTake+0x20c>)
 800f44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f45c:	f001 fb94 	bl	8010b88 <vPortExitCritical>
				return pdPASS;
 800f460:	2301      	movs	r3, #1
 800f462:	e096      	b.n	800f592 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d110      	bne.n	800f48c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d009      	beq.n	800f484 <xQueueSemaphoreTake+0xf4>
 800f470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	617b      	str	r3, [r7, #20]
 800f482:	e7fe      	b.n	800f482 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f484:	f001 fb80 	bl	8010b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f488:	2300      	movs	r3, #0
 800f48a:	e082      	b.n	800f592 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f492:	f107 030c 	add.w	r3, r7, #12
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fe86 	bl	80101a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f49c:	2301      	movs	r3, #1
 800f49e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4a0:	f001 fb72 	bl	8010b88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4a4:	f000 fc3a 	bl	800fd1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4a8:	f001 fb40 	bl	8010b2c <vPortEnterCritical>
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4b2:	b25b      	sxtb	r3, r3
 800f4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b8:	d103      	bne.n	800f4c2 <xQueueSemaphoreTake+0x132>
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4c8:	b25b      	sxtb	r3, r3
 800f4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ce:	d103      	bne.n	800f4d8 <xQueueSemaphoreTake+0x148>
 800f4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4d8:	f001 fb56 	bl	8010b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4dc:	463a      	mov	r2, r7
 800f4de:	f107 030c 	add.w	r3, r7, #12
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f000 fe75 	bl	80101d4 <xTaskCheckForTimeOut>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d132      	bne.n	800f556 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4f2:	f000 f9cc 	bl	800f88e <prvIsQueueEmpty>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d026      	beq.n	800f54a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d109      	bne.n	800f518 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f504:	f001 fb12 	bl	8010b2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f000 ffc3 	bl	8010498 <xTaskPriorityInherit>
 800f512:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f514:	f001 fb38 	bl	8010b88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51a:	3324      	adds	r3, #36	; 0x24
 800f51c:	683a      	ldr	r2, [r7, #0]
 800f51e:	4611      	mov	r1, r2
 800f520:	4618      	mov	r0, r3
 800f522:	f000 fdbb 	bl	801009c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f528:	f000 f95f 	bl	800f7ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f52c:	f000 fc04 	bl	800fd38 <xTaskResumeAll>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	f47f af69 	bne.w	800f40a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f538:	4b18      	ldr	r3, [pc, #96]	; (800f59c <xQueueSemaphoreTake+0x20c>)
 800f53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	e75f      	b.n	800f40a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f54c:	f000 f94d 	bl	800f7ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f550:	f000 fbf2 	bl	800fd38 <xTaskResumeAll>
 800f554:	e759      	b.n	800f40a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f558:	f000 f947 	bl	800f7ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f55c:	f000 fbec 	bl	800fd38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f562:	f000 f994 	bl	800f88e <prvIsQueueEmpty>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f43f af4e 	beq.w	800f40a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	2b00      	cmp	r3, #0
 800f572:	d00d      	beq.n	800f590 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f574:	f001 fada 	bl	8010b2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f57a:	f000 f88e 	bl	800f69a <prvGetDisinheritPriorityAfterTimeout>
 800f57e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800f580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f586:	4618      	mov	r0, r3
 800f588:	f001 f890 	bl	80106ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f58c:	f001 fafc 	bl	8010b88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f590:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f592:	4618      	mov	r0, r3
 800f594:	3738      	adds	r7, #56	; 0x38
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	e000ed04 	.word	0xe000ed04

0800f5a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b08e      	sub	sp, #56	; 0x38
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d109      	bne.n	800f5ca <xQueueReceiveFromISR+0x2a>
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	623b      	str	r3, [r7, #32]
 800f5c8:	e7fe      	b.n	800f5c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d103      	bne.n	800f5d8 <xQueueReceiveFromISR+0x38>
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <xQueueReceiveFromISR+0x3c>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e000      	b.n	800f5de <xQueueReceiveFromISR+0x3e>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d109      	bne.n	800f5f6 <xQueueReceiveFromISR+0x56>
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	e7fe      	b.n	800f5f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5f6:	f001 fb75 	bl	8010ce4 <vPortValidateInterruptPriority>
	__asm volatile
 800f5fa:	f3ef 8211 	mrs	r2, BASEPRI
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	61ba      	str	r2, [r7, #24]
 800f610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f61a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d02f      	beq.n	800f682 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f62c:	68b9      	ldr	r1, [r7, #8]
 800f62e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f630:	f000 f8b5 	bl	800f79e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	1e5a      	subs	r2, r3, #1
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f63c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f644:	d112      	bne.n	800f66c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d016      	beq.n	800f67c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	3310      	adds	r3, #16
 800f652:	4618      	mov	r0, r3
 800f654:	f000 fd46 	bl	80100e4 <xTaskRemoveFromEventList>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00e      	beq.n	800f67c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00b      	beq.n	800f67c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	e007      	b.n	800f67c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f670:	3301      	adds	r3, #1
 800f672:	b2db      	uxtb	r3, r3
 800f674:	b25a      	sxtb	r2, r3
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f67c:	2301      	movs	r3, #1
 800f67e:	637b      	str	r3, [r7, #52]	; 0x34
 800f680:	e001      	b.n	800f686 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f682:	2300      	movs	r3, #0
 800f684:	637b      	str	r3, [r7, #52]	; 0x34
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f692:	4618      	mov	r0, r3
 800f694:	3738      	adds	r7, #56	; 0x38
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f69a:	b480      	push	{r7}
 800f69c:	b085      	sub	sp, #20
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d006      	beq.n	800f6b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f1c3 0307 	rsb	r3, r3, #7
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	e001      	b.n	800f6bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
	}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b086      	sub	sp, #24
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d10d      	bne.n	800f704 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d14d      	bne.n	800f78c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 ff55 	bl	80105a4 <xTaskPriorityDisinherit>
 800f6fa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2200      	movs	r2, #0
 800f700:	605a      	str	r2, [r3, #4]
 800f702:	e043      	b.n	800f78c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d119      	bne.n	800f73e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	6898      	ldr	r0, [r3, #8]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f712:	461a      	mov	r2, r3
 800f714:	68b9      	ldr	r1, [r7, #8]
 800f716:	f002 fa73 	bl	8011c00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	689a      	ldr	r2, [r3, #8]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f722:	441a      	add	r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	689a      	ldr	r2, [r3, #8]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	429a      	cmp	r2, r3
 800f732:	d32b      	bcc.n	800f78c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	609a      	str	r2, [r3, #8]
 800f73c:	e026      	b.n	800f78c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	68d8      	ldr	r0, [r3, #12]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f746:	461a      	mov	r2, r3
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	f002 fa59 	bl	8011c00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f756:	425b      	negs	r3, r3
 800f758:	441a      	add	r2, r3
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	68da      	ldr	r2, [r3, #12]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	429a      	cmp	r2, r3
 800f768:	d207      	bcs.n	800f77a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f772:	425b      	negs	r3, r3
 800f774:	441a      	add	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d105      	bne.n	800f78c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	3b01      	subs	r3, #1
 800f78a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f794:	697b      	ldr	r3, [r7, #20]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d018      	beq.n	800f7e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68da      	ldr	r2, [r3, #12]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b8:	441a      	add	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68da      	ldr	r2, [r3, #12]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d303      	bcc.n	800f7d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	68d9      	ldr	r1, [r3, #12]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6838      	ldr	r0, [r7, #0]
 800f7de:	f002 fa0f 	bl	8011c00 <memcpy>
	}
}
 800f7e2:	bf00      	nop
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7f2:	f001 f99b 	bl	8010b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7fe:	e011      	b.n	800f824 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f804:	2b00      	cmp	r3, #0
 800f806:	d012      	beq.n	800f82e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3324      	adds	r3, #36	; 0x24
 800f80c:	4618      	mov	r0, r3
 800f80e:	f000 fc69 	bl	80100e4 <xTaskRemoveFromEventList>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f818:	f000 fd3c 	bl	8010294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
 800f81e:	3b01      	subs	r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	dce9      	bgt.n	800f800 <prvUnlockQueue+0x16>
 800f82c:	e000      	b.n	800f830 <prvUnlockQueue+0x46>
					break;
 800f82e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	22ff      	movs	r2, #255	; 0xff
 800f834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f838:	f001 f9a6 	bl	8010b88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f83c:	f001 f976 	bl	8010b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f846:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f848:	e011      	b.n	800f86e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d012      	beq.n	800f878 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3310      	adds	r3, #16
 800f856:	4618      	mov	r0, r3
 800f858:	f000 fc44 	bl	80100e4 <xTaskRemoveFromEventList>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f862:	f000 fd17 	bl	8010294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	3b01      	subs	r3, #1
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f872:	2b00      	cmp	r3, #0
 800f874:	dce9      	bgt.n	800f84a <prvUnlockQueue+0x60>
 800f876:	e000      	b.n	800f87a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f878:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	22ff      	movs	r2, #255	; 0xff
 800f87e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f882:	f001 f981 	bl	8010b88 <vPortExitCritical>
}
 800f886:	bf00      	nop
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b084      	sub	sp, #16
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f896:	f001 f949 	bl	8010b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d102      	bne.n	800f8a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	e001      	b.n	800f8ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8ac:	f001 f96c 	bl	8010b88 <vPortExitCritical>

	return xReturn;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8c2:	f001 f933 	bl	8010b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d102      	bne.n	800f8d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	60fb      	str	r3, [r7, #12]
 800f8d6:	e001      	b.n	800f8dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8dc:	f001 f954 	bl	8010b88 <vPortExitCritical>

	return xReturn;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b08e      	sub	sp, #56	; 0x38
 800f8ee:	af04      	add	r7, sp, #16
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	60b9      	str	r1, [r7, #8]
 800f8f4:	607a      	str	r2, [r7, #4]
 800f8f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d109      	bne.n	800f912 <xTaskCreateStatic+0x28>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	623b      	str	r3, [r7, #32]
 800f910:	e7fe      	b.n	800f910 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f914:	2b00      	cmp	r3, #0
 800f916:	d109      	bne.n	800f92c <xTaskCreateStatic+0x42>
 800f918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	61fb      	str	r3, [r7, #28]
 800f92a:	e7fe      	b.n	800f92a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f92c:	2354      	movs	r3, #84	; 0x54
 800f92e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	2b54      	cmp	r3, #84	; 0x54
 800f934:	d009      	beq.n	800f94a <xTaskCreateStatic+0x60>
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	61bb      	str	r3, [r7, #24]
 800f948:	e7fe      	b.n	800f948 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d01e      	beq.n	800f98e <xTaskCreateStatic+0xa4>
 800f950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f952:	2b00      	cmp	r3, #0
 800f954:	d01b      	beq.n	800f98e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f95e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	2202      	movs	r2, #2
 800f964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f968:	2300      	movs	r3, #0
 800f96a:	9303      	str	r3, [sp, #12]
 800f96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96e:	9302      	str	r3, [sp, #8]
 800f970:	f107 0314 	add.w	r3, r7, #20
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f000 f850 	bl	800fa26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f988:	f000 f8cc 	bl	800fb24 <prvAddNewTaskToReadyList>
 800f98c:	e001      	b.n	800f992 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f992:	697b      	ldr	r3, [r7, #20]
	}
 800f994:	4618      	mov	r0, r3
 800f996:	3728      	adds	r7, #40	; 0x28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b08c      	sub	sp, #48	; 0x30
 800f9a0:	af04      	add	r7, sp, #16
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	60b9      	str	r1, [r7, #8]
 800f9a6:	603b      	str	r3, [r7, #0]
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9ac:	88fb      	ldrh	r3, [r7, #6]
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f001 f9d5 	bl	8010d60 <pvPortMalloc>
 800f9b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00e      	beq.n	800f9dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f9be:	2054      	movs	r0, #84	; 0x54
 800f9c0:	f001 f9ce 	bl	8010d60 <pvPortMalloc>
 800f9c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d003      	beq.n	800f9d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	631a      	str	r2, [r3, #48]	; 0x30
 800f9d2:	e005      	b.n	800f9e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f9d4:	6978      	ldr	r0, [r7, #20]
 800f9d6:	f001 fa85 	bl	8010ee4 <vPortFree>
 800f9da:	e001      	b.n	800f9e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d017      	beq.n	800fa16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9ee:	88fa      	ldrh	r2, [r7, #6]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	9302      	str	r3, [sp, #8]
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	9301      	str	r3, [sp, #4]
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	68b9      	ldr	r1, [r7, #8]
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f000 f80e 	bl	800fa26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa0a:	69f8      	ldr	r0, [r7, #28]
 800fa0c:	f000 f88a 	bl	800fb24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fa10:	2301      	movs	r3, #1
 800fa12:	61bb      	str	r3, [r7, #24]
 800fa14:	e002      	b.n	800fa1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fa16:	f04f 33ff 	mov.w	r3, #4294967295
 800fa1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fa1c:	69bb      	ldr	r3, [r7, #24]
	}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b088      	sub	sp, #32
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	60f8      	str	r0, [r7, #12]
 800fa2e:	60b9      	str	r1, [r7, #8]
 800fa30:	607a      	str	r2, [r7, #4]
 800fa32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800fa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	f023 0307 	bic.w	r3, r3, #7
 800fa4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	f003 0307 	and.w	r3, r3, #7
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d009      	beq.n	800fa6c <prvInitialiseNewTask+0x46>
 800fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	617b      	str	r3, [r7, #20]
 800fa6a:	e7fe      	b.n	800fa6a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	61fb      	str	r3, [r7, #28]
 800fa70:	e012      	b.n	800fa98 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	4413      	add	r3, r2
 800fa78:	7819      	ldrb	r1, [r3, #0]
 800fa7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	4413      	add	r3, r2
 800fa80:	3334      	adds	r3, #52	; 0x34
 800fa82:	460a      	mov	r2, r1
 800fa84:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800fa86:	68ba      	ldr	r2, [r7, #8]
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d006      	beq.n	800faa0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	3301      	adds	r3, #1
 800fa96:	61fb      	str	r3, [r7, #28]
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	2b0f      	cmp	r3, #15
 800fa9c:	d9e9      	bls.n	800fa72 <prvInitialiseNewTask+0x4c>
 800fa9e:	e000      	b.n	800faa2 <prvInitialiseNewTask+0x7c>
		{
			break;
 800faa0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	2b06      	cmp	r3, #6
 800faae:	d901      	bls.n	800fab4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fab0:	2306      	movs	r3, #6
 800fab2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fab8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fabe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac2:	2200      	movs	r2, #0
 800fac4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	3304      	adds	r3, #4
 800faca:	4618      	mov	r0, r3
 800facc:	f7fe ff53 	bl	800e976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad2:	3318      	adds	r3, #24
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fe ff4e 	bl	800e976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fade:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	f1c3 0207 	rsb	r2, r3, #7
 800fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800faf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf2:	2200      	movs	r2, #0
 800faf4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	68f9      	ldr	r1, [r7, #12]
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f000 feea 	bl	80108dc <pxPortInitialiseStack>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d002      	beq.n	800fb1a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb1a:	bf00      	nop
 800fb1c:	3720      	adds	r7, #32
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb2c:	f000 fffe 	bl	8010b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb30:	4b2a      	ldr	r3, [pc, #168]	; (800fbdc <prvAddNewTaskToReadyList+0xb8>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3301      	adds	r3, #1
 800fb36:	4a29      	ldr	r2, [pc, #164]	; (800fbdc <prvAddNewTaskToReadyList+0xb8>)
 800fb38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb3a:	4b29      	ldr	r3, [pc, #164]	; (800fbe0 <prvAddNewTaskToReadyList+0xbc>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d109      	bne.n	800fb56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb42:	4a27      	ldr	r2, [pc, #156]	; (800fbe0 <prvAddNewTaskToReadyList+0xbc>)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb48:	4b24      	ldr	r3, [pc, #144]	; (800fbdc <prvAddNewTaskToReadyList+0xb8>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d110      	bne.n	800fb72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fb50:	f000 fbc4 	bl	80102dc <prvInitialiseTaskLists>
 800fb54:	e00d      	b.n	800fb72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fb56:	4b23      	ldr	r3, [pc, #140]	; (800fbe4 <prvAddNewTaskToReadyList+0xc0>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d109      	bne.n	800fb72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb5e:	4b20      	ldr	r3, [pc, #128]	; (800fbe0 <prvAddNewTaskToReadyList+0xbc>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d802      	bhi.n	800fb72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb6c:	4a1c      	ldr	r2, [pc, #112]	; (800fbe0 <prvAddNewTaskToReadyList+0xbc>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb72:	4b1d      	ldr	r3, [pc, #116]	; (800fbe8 <prvAddNewTaskToReadyList+0xc4>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3301      	adds	r3, #1
 800fb78:	4a1b      	ldr	r2, [pc, #108]	; (800fbe8 <prvAddNewTaskToReadyList+0xc4>)
 800fb7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	2201      	movs	r2, #1
 800fb82:	409a      	lsls	r2, r3
 800fb84:	4b19      	ldr	r3, [pc, #100]	; (800fbec <prvAddNewTaskToReadyList+0xc8>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	4a18      	ldr	r2, [pc, #96]	; (800fbec <prvAddNewTaskToReadyList+0xc8>)
 800fb8c:	6013      	str	r3, [r2, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb92:	4613      	mov	r3, r2
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	4413      	add	r3, r2
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4a15      	ldr	r2, [pc, #84]	; (800fbf0 <prvAddNewTaskToReadyList+0xcc>)
 800fb9c:	441a      	add	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3304      	adds	r3, #4
 800fba2:	4619      	mov	r1, r3
 800fba4:	4610      	mov	r0, r2
 800fba6:	f7fe fef3 	bl	800e990 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fbaa:	f000 ffed 	bl	8010b88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fbae:	4b0d      	ldr	r3, [pc, #52]	; (800fbe4 <prvAddNewTaskToReadyList+0xc0>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d00e      	beq.n	800fbd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fbb6:	4b0a      	ldr	r3, [pc, #40]	; (800fbe0 <prvAddNewTaskToReadyList+0xbc>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d207      	bcs.n	800fbd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fbc4:	4b0b      	ldr	r3, [pc, #44]	; (800fbf4 <prvAddNewTaskToReadyList+0xd0>)
 800fbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	20001580 	.word	0x20001580
 800fbe0:	20001480 	.word	0x20001480
 800fbe4:	2000158c 	.word	0x2000158c
 800fbe8:	2000159c 	.word	0x2000159c
 800fbec:	20001588 	.word	0x20001588
 800fbf0:	20001484 	.word	0x20001484
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fc00:	2300      	movs	r3, #0
 800fc02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d016      	beq.n	800fc38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fc0a:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <vTaskDelay+0x60>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d009      	beq.n	800fc26 <vTaskDelay+0x2e>
 800fc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	60bb      	str	r3, [r7, #8]
 800fc24:	e7fe      	b.n	800fc24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fc26:	f000 f879 	bl	800fd1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fdef 	bl	8010810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fc32:	f000 f881 	bl	800fd38 <xTaskResumeAll>
 800fc36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d107      	bne.n	800fc4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fc3e:	4b07      	ldr	r3, [pc, #28]	; (800fc5c <vTaskDelay+0x64>)
 800fc40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc4e:	bf00      	nop
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	200015a8 	.word	0x200015a8
 800fc5c:	e000ed04 	.word	0xe000ed04

0800fc60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b08a      	sub	sp, #40	; 0x28
 800fc64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc6e:	463a      	mov	r2, r7
 800fc70:	1d39      	adds	r1, r7, #4
 800fc72:	f107 0308 	add.w	r3, r7, #8
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7f2 f97e 	bl	8001f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc7c:	6839      	ldr	r1, [r7, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68ba      	ldr	r2, [r7, #8]
 800fc82:	9202      	str	r2, [sp, #8]
 800fc84:	9301      	str	r3, [sp, #4]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	460a      	mov	r2, r1
 800fc8e:	491d      	ldr	r1, [pc, #116]	; (800fd04 <vTaskStartScheduler+0xa4>)
 800fc90:	481d      	ldr	r0, [pc, #116]	; (800fd08 <vTaskStartScheduler+0xa8>)
 800fc92:	f7ff fe2a 	bl	800f8ea <xTaskCreateStatic>
 800fc96:	4602      	mov	r2, r0
 800fc98:	4b1c      	ldr	r3, [pc, #112]	; (800fd0c <vTaskStartScheduler+0xac>)
 800fc9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc9c:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <vTaskStartScheduler+0xac>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fca4:	2301      	movs	r3, #1
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	e001      	b.n	800fcae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d115      	bne.n	800fce0 <vTaskStartScheduler+0x80>
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fcc6:	4b12      	ldr	r3, [pc, #72]	; (800fd10 <vTaskStartScheduler+0xb0>)
 800fcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fccc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcce:	4b11      	ldr	r3, [pc, #68]	; (800fd14 <vTaskStartScheduler+0xb4>)
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fcd4:	4b10      	ldr	r3, [pc, #64]	; (800fd18 <vTaskStartScheduler+0xb8>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fcda:	f000 fe89 	bl	80109f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fcde:	e00d      	b.n	800fcfc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce6:	d109      	bne.n	800fcfc <vTaskStartScheduler+0x9c>
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	e7fe      	b.n	800fcfa <vTaskStartScheduler+0x9a>
}
 800fcfc:	bf00      	nop
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08017d58 	.word	0x08017d58
 800fd08:	080102ad 	.word	0x080102ad
 800fd0c:	200015a4 	.word	0x200015a4
 800fd10:	200015a0 	.word	0x200015a0
 800fd14:	2000158c 	.word	0x2000158c
 800fd18:	20001584 	.word	0x20001584

0800fd1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fd20:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <vTaskSuspendAll+0x18>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	4a03      	ldr	r2, [pc, #12]	; (800fd34 <vTaskSuspendAll+0x18>)
 800fd28:	6013      	str	r3, [r2, #0]
}
 800fd2a:	bf00      	nop
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr
 800fd34:	200015a8 	.word	0x200015a8

0800fd38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd42:	2300      	movs	r3, #0
 800fd44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd46:	4b41      	ldr	r3, [pc, #260]	; (800fe4c <xTaskResumeAll+0x114>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d109      	bne.n	800fd62 <xTaskResumeAll+0x2a>
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	e7fe      	b.n	800fd60 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd62:	f000 fee3 	bl	8010b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd66:	4b39      	ldr	r3, [pc, #228]	; (800fe4c <xTaskResumeAll+0x114>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	4a37      	ldr	r2, [pc, #220]	; (800fe4c <xTaskResumeAll+0x114>)
 800fd6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd70:	4b36      	ldr	r3, [pc, #216]	; (800fe4c <xTaskResumeAll+0x114>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d161      	bne.n	800fe3c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd78:	4b35      	ldr	r3, [pc, #212]	; (800fe50 <xTaskResumeAll+0x118>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d05d      	beq.n	800fe3c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd80:	e02e      	b.n	800fde0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fd82:	4b34      	ldr	r3, [pc, #208]	; (800fe54 <xTaskResumeAll+0x11c>)
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3318      	adds	r3, #24
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe fe5b 	bl	800ea4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	3304      	adds	r3, #4
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe fe56 	bl	800ea4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda2:	2201      	movs	r2, #1
 800fda4:	409a      	lsls	r2, r3
 800fda6:	4b2c      	ldr	r3, [pc, #176]	; (800fe58 <xTaskResumeAll+0x120>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	4a2a      	ldr	r2, [pc, #168]	; (800fe58 <xTaskResumeAll+0x120>)
 800fdae:	6013      	str	r3, [r2, #0]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	4413      	add	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4a27      	ldr	r2, [pc, #156]	; (800fe5c <xTaskResumeAll+0x124>)
 800fdbe:	441a      	add	r2, r3
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7fe fde2 	bl	800e990 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <xTaskResumeAll+0x128>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d302      	bcc.n	800fde0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800fdda:	4b22      	ldr	r3, [pc, #136]	; (800fe64 <xTaskResumeAll+0x12c>)
 800fddc:	2201      	movs	r2, #1
 800fdde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fde0:	4b1c      	ldr	r3, [pc, #112]	; (800fe54 <xTaskResumeAll+0x11c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1cc      	bne.n	800fd82 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fdee:	f000 fb0f 	bl	8010410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fdf2:	4b1d      	ldr	r3, [pc, #116]	; (800fe68 <xTaskResumeAll+0x130>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d010      	beq.n	800fe20 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fdfe:	f000 f837 	bl	800fe70 <xTaskIncrementTick>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800fe08:	4b16      	ldr	r3, [pc, #88]	; (800fe64 <xTaskResumeAll+0x12c>)
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1f1      	bne.n	800fdfe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800fe1a:	4b13      	ldr	r3, [pc, #76]	; (800fe68 <xTaskResumeAll+0x130>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe20:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <xTaskResumeAll+0x12c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d009      	beq.n	800fe3c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe2c:	4b0f      	ldr	r3, [pc, #60]	; (800fe6c <xTaskResumeAll+0x134>)
 800fe2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe32:	601a      	str	r2, [r3, #0]
 800fe34:	f3bf 8f4f 	dsb	sy
 800fe38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe3c:	f000 fea4 	bl	8010b88 <vPortExitCritical>

	return xAlreadyYielded;
 800fe40:	68bb      	ldr	r3, [r7, #8]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	200015a8 	.word	0x200015a8
 800fe50:	20001580 	.word	0x20001580
 800fe54:	20001540 	.word	0x20001540
 800fe58:	20001588 	.word	0x20001588
 800fe5c:	20001484 	.word	0x20001484
 800fe60:	20001480 	.word	0x20001480
 800fe64:	20001594 	.word	0x20001594
 800fe68:	20001590 	.word	0x20001590
 800fe6c:	e000ed04 	.word	0xe000ed04

0800fe70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fe76:	2300      	movs	r3, #0
 800fe78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe7a:	4b50      	ldr	r3, [pc, #320]	; (800ffbc <xTaskIncrementTick+0x14c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f040 808c 	bne.w	800ff9c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fe84:	4b4e      	ldr	r3, [pc, #312]	; (800ffc0 <xTaskIncrementTick+0x150>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fe8c:	4a4c      	ldr	r2, [pc, #304]	; (800ffc0 <xTaskIncrementTick+0x150>)
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d11f      	bne.n	800fed8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fe98:	4b4a      	ldr	r3, [pc, #296]	; (800ffc4 <xTaskIncrementTick+0x154>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d009      	beq.n	800feb6 <xTaskIncrementTick+0x46>
 800fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	603b      	str	r3, [r7, #0]
 800feb4:	e7fe      	b.n	800feb4 <xTaskIncrementTick+0x44>
 800feb6:	4b43      	ldr	r3, [pc, #268]	; (800ffc4 <xTaskIncrementTick+0x154>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	60fb      	str	r3, [r7, #12]
 800febc:	4b42      	ldr	r3, [pc, #264]	; (800ffc8 <xTaskIncrementTick+0x158>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a40      	ldr	r2, [pc, #256]	; (800ffc4 <xTaskIncrementTick+0x154>)
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	4a40      	ldr	r2, [pc, #256]	; (800ffc8 <xTaskIncrementTick+0x158>)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6013      	str	r3, [r2, #0]
 800feca:	4b40      	ldr	r3, [pc, #256]	; (800ffcc <xTaskIncrementTick+0x15c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3301      	adds	r3, #1
 800fed0:	4a3e      	ldr	r2, [pc, #248]	; (800ffcc <xTaskIncrementTick+0x15c>)
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	f000 fa9c 	bl	8010410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fed8:	4b3d      	ldr	r3, [pc, #244]	; (800ffd0 <xTaskIncrementTick+0x160>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d34d      	bcc.n	800ff7e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fee2:	4b38      	ldr	r3, [pc, #224]	; (800ffc4 <xTaskIncrementTick+0x154>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d101      	bne.n	800fef0 <xTaskIncrementTick+0x80>
 800feec:	2301      	movs	r3, #1
 800feee:	e000      	b.n	800fef2 <xTaskIncrementTick+0x82>
 800fef0:	2300      	movs	r3, #0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d004      	beq.n	800ff00 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fef6:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <xTaskIncrementTick+0x160>)
 800fef8:	f04f 32ff 	mov.w	r2, #4294967295
 800fefc:	601a      	str	r2, [r3, #0]
					break;
 800fefe:	e03e      	b.n	800ff7e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ff00:	4b30      	ldr	r3, [pc, #192]	; (800ffc4 <xTaskIncrementTick+0x154>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff10:	693a      	ldr	r2, [r7, #16]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d203      	bcs.n	800ff20 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff18:	4a2d      	ldr	r2, [pc, #180]	; (800ffd0 <xTaskIncrementTick+0x160>)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6013      	str	r3, [r2, #0]
						break;
 800ff1e:	e02e      	b.n	800ff7e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	3304      	adds	r3, #4
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe fd90 	bl	800ea4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d004      	beq.n	800ff3c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	3318      	adds	r3, #24
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fe fd87 	bl	800ea4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff40:	2201      	movs	r2, #1
 800ff42:	409a      	lsls	r2, r3
 800ff44:	4b23      	ldr	r3, [pc, #140]	; (800ffd4 <xTaskIncrementTick+0x164>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	4a22      	ldr	r2, [pc, #136]	; (800ffd4 <xTaskIncrementTick+0x164>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff52:	4613      	mov	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4413      	add	r3, r2
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4a1f      	ldr	r2, [pc, #124]	; (800ffd8 <xTaskIncrementTick+0x168>)
 800ff5c:	441a      	add	r2, r3
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3304      	adds	r3, #4
 800ff62:	4619      	mov	r1, r3
 800ff64:	4610      	mov	r0, r2
 800ff66:	f7fe fd13 	bl	800e990 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff6e:	4b1b      	ldr	r3, [pc, #108]	; (800ffdc <xTaskIncrementTick+0x16c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d3b4      	bcc.n	800fee2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff7c:	e7b1      	b.n	800fee2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ff7e:	4b17      	ldr	r3, [pc, #92]	; (800ffdc <xTaskIncrementTick+0x16c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff84:	4914      	ldr	r1, [pc, #80]	; (800ffd8 <xTaskIncrementTick+0x168>)
 800ff86:	4613      	mov	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	440b      	add	r3, r1
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d907      	bls.n	800ffa6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ff96:	2301      	movs	r3, #1
 800ff98:	617b      	str	r3, [r7, #20]
 800ff9a:	e004      	b.n	800ffa6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ff9c:	4b10      	ldr	r3, [pc, #64]	; (800ffe0 <xTaskIncrementTick+0x170>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	4a0f      	ldr	r2, [pc, #60]	; (800ffe0 <xTaskIncrementTick+0x170>)
 800ffa4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ffa6:	4b0f      	ldr	r3, [pc, #60]	; (800ffe4 <xTaskIncrementTick+0x174>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ffb2:	697b      	ldr	r3, [r7, #20]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3718      	adds	r7, #24
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	200015a8 	.word	0x200015a8
 800ffc0:	20001584 	.word	0x20001584
 800ffc4:	20001538 	.word	0x20001538
 800ffc8:	2000153c 	.word	0x2000153c
 800ffcc:	20001598 	.word	0x20001598
 800ffd0:	200015a0 	.word	0x200015a0
 800ffd4:	20001588 	.word	0x20001588
 800ffd8:	20001484 	.word	0x20001484
 800ffdc:	20001480 	.word	0x20001480
 800ffe0:	20001590 	.word	0x20001590
 800ffe4:	20001594 	.word	0x20001594

0800ffe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b087      	sub	sp, #28
 800ffec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ffee:	4b26      	ldr	r3, [pc, #152]	; (8010088 <vTaskSwitchContext+0xa0>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fff6:	4b25      	ldr	r3, [pc, #148]	; (801008c <vTaskSwitchContext+0xa4>)
 800fff8:	2201      	movs	r2, #1
 800fffa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fffc:	e03e      	b.n	801007c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800fffe:	4b23      	ldr	r3, [pc, #140]	; (801008c <vTaskSwitchContext+0xa4>)
 8010000:	2200      	movs	r2, #0
 8010002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010004:	4b22      	ldr	r3, [pc, #136]	; (8010090 <vTaskSwitchContext+0xa8>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	fab3 f383 	clz	r3, r3
 8010010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010012:	7afb      	ldrb	r3, [r7, #11]
 8010014:	f1c3 031f 	rsb	r3, r3, #31
 8010018:	617b      	str	r3, [r7, #20]
 801001a:	491e      	ldr	r1, [pc, #120]	; (8010094 <vTaskSwitchContext+0xac>)
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	4613      	mov	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4413      	add	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	440b      	add	r3, r1
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d109      	bne.n	8010042 <vTaskSwitchContext+0x5a>
	__asm volatile
 801002e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	607b      	str	r3, [r7, #4]
 8010040:	e7fe      	b.n	8010040 <vTaskSwitchContext+0x58>
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4a11      	ldr	r2, [pc, #68]	; (8010094 <vTaskSwitchContext+0xac>)
 801004e:	4413      	add	r3, r2
 8010050:	613b      	str	r3, [r7, #16]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	685a      	ldr	r2, [r3, #4]
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	605a      	str	r2, [r3, #4]
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	3308      	adds	r3, #8
 8010064:	429a      	cmp	r2, r3
 8010066:	d104      	bne.n	8010072 <vTaskSwitchContext+0x8a>
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	605a      	str	r2, [r3, #4]
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	4a07      	ldr	r2, [pc, #28]	; (8010098 <vTaskSwitchContext+0xb0>)
 801007a:	6013      	str	r3, [r2, #0]
}
 801007c:	bf00      	nop
 801007e:	371c      	adds	r7, #28
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	200015a8 	.word	0x200015a8
 801008c:	20001594 	.word	0x20001594
 8010090:	20001588 	.word	0x20001588
 8010094:	20001484 	.word	0x20001484
 8010098:	20001480 	.word	0x20001480

0801009c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d109      	bne.n	80100c0 <vTaskPlaceOnEventList+0x24>
 80100ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	60fb      	str	r3, [r7, #12]
 80100be:	e7fe      	b.n	80100be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100c0:	4b07      	ldr	r3, [pc, #28]	; (80100e0 <vTaskPlaceOnEventList+0x44>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3318      	adds	r3, #24
 80100c6:	4619      	mov	r1, r3
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7fe fc85 	bl	800e9d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80100ce:	2101      	movs	r1, #1
 80100d0:	6838      	ldr	r0, [r7, #0]
 80100d2:	f000 fb9d 	bl	8010810 <prvAddCurrentTaskToDelayedList>
}
 80100d6:	bf00      	nop
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	20001480 	.word	0x20001480

080100e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d109      	bne.n	801010e <xTaskRemoveFromEventList+0x2a>
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	60fb      	str	r3, [r7, #12]
 801010c:	e7fe      	b.n	801010c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	3318      	adds	r3, #24
 8010112:	4618      	mov	r0, r3
 8010114:	f7fe fc99 	bl	800ea4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010118:	4b1d      	ldr	r3, [pc, #116]	; (8010190 <xTaskRemoveFromEventList+0xac>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d11c      	bne.n	801015a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	3304      	adds	r3, #4
 8010124:	4618      	mov	r0, r3
 8010126:	f7fe fc90 	bl	800ea4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801012e:	2201      	movs	r2, #1
 8010130:	409a      	lsls	r2, r3
 8010132:	4b18      	ldr	r3, [pc, #96]	; (8010194 <xTaskRemoveFromEventList+0xb0>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4313      	orrs	r3, r2
 8010138:	4a16      	ldr	r2, [pc, #88]	; (8010194 <xTaskRemoveFromEventList+0xb0>)
 801013a:	6013      	str	r3, [r2, #0]
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010140:	4613      	mov	r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	4413      	add	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	4a13      	ldr	r2, [pc, #76]	; (8010198 <xTaskRemoveFromEventList+0xb4>)
 801014a:	441a      	add	r2, r3
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	3304      	adds	r3, #4
 8010150:	4619      	mov	r1, r3
 8010152:	4610      	mov	r0, r2
 8010154:	f7fe fc1c 	bl	800e990 <vListInsertEnd>
 8010158:	e005      	b.n	8010166 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	3318      	adds	r3, #24
 801015e:	4619      	mov	r1, r3
 8010160:	480e      	ldr	r0, [pc, #56]	; (801019c <xTaskRemoveFromEventList+0xb8>)
 8010162:	f7fe fc15 	bl	800e990 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801016a:	4b0d      	ldr	r3, [pc, #52]	; (80101a0 <xTaskRemoveFromEventList+0xbc>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010170:	429a      	cmp	r2, r3
 8010172:	d905      	bls.n	8010180 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010174:	2301      	movs	r3, #1
 8010176:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010178:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <xTaskRemoveFromEventList+0xc0>)
 801017a:	2201      	movs	r2, #1
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	e001      	b.n	8010184 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010180:	2300      	movs	r3, #0
 8010182:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010184:	697b      	ldr	r3, [r7, #20]
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	200015a8 	.word	0x200015a8
 8010194:	20001588 	.word	0x20001588
 8010198:	20001484 	.word	0x20001484
 801019c:	20001540 	.word	0x20001540
 80101a0:	20001480 	.word	0x20001480
 80101a4:	20001594 	.word	0x20001594

080101a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80101b0:	4b06      	ldr	r3, [pc, #24]	; (80101cc <vTaskInternalSetTimeOutState+0x24>)
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <vTaskInternalSetTimeOutState+0x28>)
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	605a      	str	r2, [r3, #4]
}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr
 80101cc:	20001598 	.word	0x20001598
 80101d0:	20001584 	.word	0x20001584

080101d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d109      	bne.n	80101f8 <xTaskCheckForTimeOut+0x24>
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	613b      	str	r3, [r7, #16]
 80101f6:	e7fe      	b.n	80101f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d109      	bne.n	8010212 <xTaskCheckForTimeOut+0x3e>
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	e7fe      	b.n	8010210 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010212:	f000 fc8b 	bl	8010b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010216:	4b1d      	ldr	r3, [pc, #116]	; (801028c <xTaskCheckForTimeOut+0xb8>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	69ba      	ldr	r2, [r7, #24]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801022e:	d102      	bne.n	8010236 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010230:	2300      	movs	r3, #0
 8010232:	61fb      	str	r3, [r7, #28]
 8010234:	e023      	b.n	801027e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	4b15      	ldr	r3, [pc, #84]	; (8010290 <xTaskCheckForTimeOut+0xbc>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	429a      	cmp	r2, r3
 8010240:	d007      	beq.n	8010252 <xTaskCheckForTimeOut+0x7e>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	69ba      	ldr	r2, [r7, #24]
 8010248:	429a      	cmp	r2, r3
 801024a:	d302      	bcc.n	8010252 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801024c:	2301      	movs	r3, #1
 801024e:	61fb      	str	r3, [r7, #28]
 8010250:	e015      	b.n	801027e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	697a      	ldr	r2, [r7, #20]
 8010258:	429a      	cmp	r2, r3
 801025a:	d20b      	bcs.n	8010274 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	1ad2      	subs	r2, r2, r3
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff ff9d 	bl	80101a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801026e:	2300      	movs	r3, #0
 8010270:	61fb      	str	r3, [r7, #28]
 8010272:	e004      	b.n	801027e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	2200      	movs	r2, #0
 8010278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801027a:	2301      	movs	r3, #1
 801027c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801027e:	f000 fc83 	bl	8010b88 <vPortExitCritical>

	return xReturn;
 8010282:	69fb      	ldr	r3, [r7, #28]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3720      	adds	r7, #32
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20001584 	.word	0x20001584
 8010290:	20001598 	.word	0x20001598

08010294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010294:	b480      	push	{r7}
 8010296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010298:	4b03      	ldr	r3, [pc, #12]	; (80102a8 <vTaskMissedYield+0x14>)
 801029a:	2201      	movs	r2, #1
 801029c:	601a      	str	r2, [r3, #0]
}
 801029e:	bf00      	nop
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	20001594 	.word	0x20001594

080102ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80102b4:	f000 f852 	bl	801035c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80102b8:	4b06      	ldr	r3, [pc, #24]	; (80102d4 <prvIdleTask+0x28>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d9f9      	bls.n	80102b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80102c0:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <prvIdleTask+0x2c>)
 80102c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c6:	601a      	str	r2, [r3, #0]
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80102d0:	e7f0      	b.n	80102b4 <prvIdleTask+0x8>
 80102d2:	bf00      	nop
 80102d4:	20001484 	.word	0x20001484
 80102d8:	e000ed04 	.word	0xe000ed04

080102dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102e2:	2300      	movs	r3, #0
 80102e4:	607b      	str	r3, [r7, #4]
 80102e6:	e00c      	b.n	8010302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	4613      	mov	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4a12      	ldr	r2, [pc, #72]	; (801033c <prvInitialiseTaskLists+0x60>)
 80102f4:	4413      	add	r3, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fe fb1d 	bl	800e936 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	3301      	adds	r3, #1
 8010300:	607b      	str	r3, [r7, #4]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b06      	cmp	r3, #6
 8010306:	d9ef      	bls.n	80102e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010308:	480d      	ldr	r0, [pc, #52]	; (8010340 <prvInitialiseTaskLists+0x64>)
 801030a:	f7fe fb14 	bl	800e936 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801030e:	480d      	ldr	r0, [pc, #52]	; (8010344 <prvInitialiseTaskLists+0x68>)
 8010310:	f7fe fb11 	bl	800e936 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010314:	480c      	ldr	r0, [pc, #48]	; (8010348 <prvInitialiseTaskLists+0x6c>)
 8010316:	f7fe fb0e 	bl	800e936 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801031a:	480c      	ldr	r0, [pc, #48]	; (801034c <prvInitialiseTaskLists+0x70>)
 801031c:	f7fe fb0b 	bl	800e936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010320:	480b      	ldr	r0, [pc, #44]	; (8010350 <prvInitialiseTaskLists+0x74>)
 8010322:	f7fe fb08 	bl	800e936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010326:	4b0b      	ldr	r3, [pc, #44]	; (8010354 <prvInitialiseTaskLists+0x78>)
 8010328:	4a05      	ldr	r2, [pc, #20]	; (8010340 <prvInitialiseTaskLists+0x64>)
 801032a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801032c:	4b0a      	ldr	r3, [pc, #40]	; (8010358 <prvInitialiseTaskLists+0x7c>)
 801032e:	4a05      	ldr	r2, [pc, #20]	; (8010344 <prvInitialiseTaskLists+0x68>)
 8010330:	601a      	str	r2, [r3, #0]
}
 8010332:	bf00      	nop
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	20001484 	.word	0x20001484
 8010340:	20001510 	.word	0x20001510
 8010344:	20001524 	.word	0x20001524
 8010348:	20001540 	.word	0x20001540
 801034c:	20001554 	.word	0x20001554
 8010350:	2000156c 	.word	0x2000156c
 8010354:	20001538 	.word	0x20001538
 8010358:	2000153c 	.word	0x2000153c

0801035c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010362:	e019      	b.n	8010398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010364:	f000 fbe2 	bl	8010b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010368:	4b0f      	ldr	r3, [pc, #60]	; (80103a8 <prvCheckTasksWaitingTermination+0x4c>)
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	3304      	adds	r3, #4
 8010374:	4618      	mov	r0, r3
 8010376:	f7fe fb68 	bl	800ea4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801037a:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <prvCheckTasksWaitingTermination+0x50>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3b01      	subs	r3, #1
 8010380:	4a0a      	ldr	r2, [pc, #40]	; (80103ac <prvCheckTasksWaitingTermination+0x50>)
 8010382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010384:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <prvCheckTasksWaitingTermination+0x54>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	3b01      	subs	r3, #1
 801038a:	4a09      	ldr	r2, [pc, #36]	; (80103b0 <prvCheckTasksWaitingTermination+0x54>)
 801038c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801038e:	f000 fbfb 	bl	8010b88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 f80e 	bl	80103b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010398:	4b05      	ldr	r3, [pc, #20]	; (80103b0 <prvCheckTasksWaitingTermination+0x54>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1e1      	bne.n	8010364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	20001554 	.word	0x20001554
 80103ac:	20001580 	.word	0x20001580
 80103b0:	20001568 	.word	0x20001568

080103b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d108      	bne.n	80103d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fd8a 	bl	8010ee4 <vPortFree>
				vPortFree( pxTCB );
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 fd87 	bl	8010ee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80103d6:	e017      	b.n	8010408 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d103      	bne.n	80103ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fd7e 	bl	8010ee4 <vPortFree>
	}
 80103e8:	e00e      	b.n	8010408 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d009      	beq.n	8010408 <prvDeleteTCB+0x54>
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	60fb      	str	r3, [r7, #12]
 8010406:	e7fe      	b.n	8010406 <prvDeleteTCB+0x52>
	}
 8010408:	bf00      	nop
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010416:	4b0f      	ldr	r3, [pc, #60]	; (8010454 <prvResetNextTaskUnblockTime+0x44>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <prvResetNextTaskUnblockTime+0x14>
 8010420:	2301      	movs	r3, #1
 8010422:	e000      	b.n	8010426 <prvResetNextTaskUnblockTime+0x16>
 8010424:	2300      	movs	r3, #0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d004      	beq.n	8010434 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801042a:	4b0b      	ldr	r3, [pc, #44]	; (8010458 <prvResetNextTaskUnblockTime+0x48>)
 801042c:	f04f 32ff 	mov.w	r2, #4294967295
 8010430:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010432:	e008      	b.n	8010446 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010434:	4b07      	ldr	r3, [pc, #28]	; (8010454 <prvResetNextTaskUnblockTime+0x44>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	4a05      	ldr	r2, [pc, #20]	; (8010458 <prvResetNextTaskUnblockTime+0x48>)
 8010444:	6013      	str	r3, [r2, #0]
}
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	20001538 	.word	0x20001538
 8010458:	200015a0 	.word	0x200015a0

0801045c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010462:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <xTaskGetSchedulerState+0x34>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d102      	bne.n	8010470 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801046a:	2301      	movs	r3, #1
 801046c:	607b      	str	r3, [r7, #4]
 801046e:	e008      	b.n	8010482 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010470:	4b08      	ldr	r3, [pc, #32]	; (8010494 <xTaskGetSchedulerState+0x38>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d102      	bne.n	801047e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010478:	2302      	movs	r3, #2
 801047a:	607b      	str	r3, [r7, #4]
 801047c:	e001      	b.n	8010482 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801047e:	2300      	movs	r3, #0
 8010480:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010482:	687b      	ldr	r3, [r7, #4]
	}
 8010484:	4618      	mov	r0, r3
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr
 8010490:	2000158c 	.word	0x2000158c
 8010494:	200015a8 	.word	0x200015a8

08010498 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80104a4:	2300      	movs	r3, #0
 80104a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d06e      	beq.n	801058c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b2:	4b39      	ldr	r3, [pc, #228]	; (8010598 <xTaskPriorityInherit+0x100>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d25e      	bcs.n	801057a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	db06      	blt.n	80104d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104c4:	4b34      	ldr	r3, [pc, #208]	; (8010598 <xTaskPriorityInherit+0x100>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ca:	f1c3 0207 	rsb	r2, r3, #7
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	6959      	ldr	r1, [r3, #20]
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104da:	4613      	mov	r3, r2
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	4413      	add	r3, r2
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	4a2e      	ldr	r2, [pc, #184]	; (801059c <xTaskPriorityInherit+0x104>)
 80104e4:	4413      	add	r3, r2
 80104e6:	4299      	cmp	r1, r3
 80104e8:	d101      	bne.n	80104ee <xTaskPriorityInherit+0x56>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <xTaskPriorityInherit+0x58>
 80104ee:	2300      	movs	r3, #0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d03a      	beq.n	801056a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	3304      	adds	r3, #4
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe faa6 	bl	800ea4a <uxListRemove>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d115      	bne.n	8010530 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010508:	4924      	ldr	r1, [pc, #144]	; (801059c <xTaskPriorityInherit+0x104>)
 801050a:	4613      	mov	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	440b      	add	r3, r1
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d10a      	bne.n	8010530 <xTaskPriorityInherit+0x98>
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051e:	2201      	movs	r2, #1
 8010520:	fa02 f303 	lsl.w	r3, r2, r3
 8010524:	43da      	mvns	r2, r3
 8010526:	4b1e      	ldr	r3, [pc, #120]	; (80105a0 <xTaskPriorityInherit+0x108>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4013      	ands	r3, r2
 801052c:	4a1c      	ldr	r2, [pc, #112]	; (80105a0 <xTaskPriorityInherit+0x108>)
 801052e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010530:	4b19      	ldr	r3, [pc, #100]	; (8010598 <xTaskPriorityInherit+0x100>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053e:	2201      	movs	r2, #1
 8010540:	409a      	lsls	r2, r3
 8010542:	4b17      	ldr	r3, [pc, #92]	; (80105a0 <xTaskPriorityInherit+0x108>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4313      	orrs	r3, r2
 8010548:	4a15      	ldr	r2, [pc, #84]	; (80105a0 <xTaskPriorityInherit+0x108>)
 801054a:	6013      	str	r3, [r2, #0]
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010550:	4613      	mov	r3, r2
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4a10      	ldr	r2, [pc, #64]	; (801059c <xTaskPriorityInherit+0x104>)
 801055a:	441a      	add	r2, r3
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	3304      	adds	r3, #4
 8010560:	4619      	mov	r1, r3
 8010562:	4610      	mov	r0, r2
 8010564:	f7fe fa14 	bl	800e990 <vListInsertEnd>
 8010568:	e004      	b.n	8010574 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801056a:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <xTaskPriorityInherit+0x100>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010574:	2301      	movs	r3, #1
 8010576:	60fb      	str	r3, [r7, #12]
 8010578:	e008      	b.n	801058c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801057e:	4b06      	ldr	r3, [pc, #24]	; (8010598 <xTaskPriorityInherit+0x100>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010584:	429a      	cmp	r2, r3
 8010586:	d201      	bcs.n	801058c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010588:	2301      	movs	r3, #1
 801058a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801058c:	68fb      	ldr	r3, [r7, #12]
	}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	20001480 	.word	0x20001480
 801059c:	20001484 	.word	0x20001484
 80105a0:	20001588 	.word	0x20001588

080105a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80105b0:	2300      	movs	r3, #0
 80105b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d06c      	beq.n	8010694 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80105ba:	4b39      	ldr	r3, [pc, #228]	; (80106a0 <xTaskPriorityDisinherit+0xfc>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d009      	beq.n	80105d8 <xTaskPriorityDisinherit+0x34>
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	e7fe      	b.n	80105d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <xTaskPriorityDisinherit+0x50>
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	60bb      	str	r3, [r7, #8]
 80105f2:	e7fe      	b.n	80105f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105f8:	1e5a      	subs	r2, r3, #1
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010606:	429a      	cmp	r2, r3
 8010608:	d044      	beq.n	8010694 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801060e:	2b00      	cmp	r3, #0
 8010610:	d140      	bne.n	8010694 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	3304      	adds	r3, #4
 8010616:	4618      	mov	r0, r3
 8010618:	f7fe fa17 	bl	800ea4a <uxListRemove>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d115      	bne.n	801064e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010626:	491f      	ldr	r1, [pc, #124]	; (80106a4 <xTaskPriorityDisinherit+0x100>)
 8010628:	4613      	mov	r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	440b      	add	r3, r1
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <xTaskPriorityDisinherit+0xaa>
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063c:	2201      	movs	r2, #1
 801063e:	fa02 f303 	lsl.w	r3, r2, r3
 8010642:	43da      	mvns	r2, r3
 8010644:	4b18      	ldr	r3, [pc, #96]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4013      	ands	r3, r2
 801064a:	4a17      	ldr	r2, [pc, #92]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 801064c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065a:	f1c3 0207 	rsb	r2, r3, #7
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010666:	2201      	movs	r2, #1
 8010668:	409a      	lsls	r2, r3
 801066a:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4313      	orrs	r3, r2
 8010670:	4a0d      	ldr	r2, [pc, #52]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 8010672:	6013      	str	r3, [r2, #0]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010678:	4613      	mov	r3, r2
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	4413      	add	r3, r2
 801067e:	009b      	lsls	r3, r3, #2
 8010680:	4a08      	ldr	r2, [pc, #32]	; (80106a4 <xTaskPriorityDisinherit+0x100>)
 8010682:	441a      	add	r2, r3
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	3304      	adds	r3, #4
 8010688:	4619      	mov	r1, r3
 801068a:	4610      	mov	r0, r2
 801068c:	f7fe f980 	bl	800e990 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010694:	697b      	ldr	r3, [r7, #20]
	}
 8010696:	4618      	mov	r0, r3
 8010698:	3718      	adds	r7, #24
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	20001480 	.word	0x20001480
 80106a4:	20001484 	.word	0x20001484
 80106a8:	20001588 	.word	0x20001588

080106ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b088      	sub	sp, #32
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80106ba:	2301      	movs	r3, #1
 80106bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f000 8086 	beq.w	80107d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d109      	bne.n	80106e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	60fb      	str	r3, [r7, #12]
 80106e0:	e7fe      	b.n	80106e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d902      	bls.n	80106f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	61fb      	str	r3, [r7, #28]
 80106f0:	e002      	b.n	80106f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fc:	69fa      	ldr	r2, [r7, #28]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d067      	beq.n	80107d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	429a      	cmp	r2, r3
 801070a:	d162      	bne.n	80107d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801070c:	4b33      	ldr	r3, [pc, #204]	; (80107dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	69ba      	ldr	r2, [r7, #24]
 8010712:	429a      	cmp	r2, r3
 8010714:	d109      	bne.n	801072a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8010716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	60bb      	str	r3, [r7, #8]
 8010728:	e7fe      	b.n	8010728 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801072e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	69fa      	ldr	r2, [r7, #28]
 8010734:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	2b00      	cmp	r3, #0
 801073c:	db04      	blt.n	8010748 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	f1c3 0207 	rsb	r2, r3, #7
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	6959      	ldr	r1, [r3, #20]
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	4613      	mov	r3, r2
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4413      	add	r3, r2
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	4a22      	ldr	r2, [pc, #136]	; (80107e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010758:	4413      	add	r3, r2
 801075a:	4299      	cmp	r1, r3
 801075c:	d101      	bne.n	8010762 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801075e:	2301      	movs	r3, #1
 8010760:	e000      	b.n	8010764 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010762:	2300      	movs	r3, #0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d034      	beq.n	80107d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	3304      	adds	r3, #4
 801076c:	4618      	mov	r0, r3
 801076e:	f7fe f96c 	bl	800ea4a <uxListRemove>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d115      	bne.n	80107a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077c:	4918      	ldr	r1, [pc, #96]	; (80107e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801077e:	4613      	mov	r3, r2
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	4413      	add	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	440b      	add	r3, r1
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10a      	bne.n	80107a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010792:	2201      	movs	r2, #1
 8010794:	fa02 f303 	lsl.w	r3, r2, r3
 8010798:	43da      	mvns	r2, r3
 801079a:	4b12      	ldr	r3, [pc, #72]	; (80107e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4013      	ands	r3, r2
 80107a0:	4a10      	ldr	r2, [pc, #64]	; (80107e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80107a2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a8:	2201      	movs	r2, #1
 80107aa:	409a      	lsls	r2, r3
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4313      	orrs	r3, r2
 80107b2:	4a0c      	ldr	r2, [pc, #48]	; (80107e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80107b4:	6013      	str	r3, [r2, #0]
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ba:	4613      	mov	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	4a07      	ldr	r2, [pc, #28]	; (80107e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80107c4:	441a      	add	r2, r3
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	3304      	adds	r3, #4
 80107ca:	4619      	mov	r1, r3
 80107cc:	4610      	mov	r0, r2
 80107ce:	f7fe f8df 	bl	800e990 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107d2:	bf00      	nop
 80107d4:	3720      	adds	r7, #32
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	20001480 	.word	0x20001480
 80107e0:	20001484 	.word	0x20001484
 80107e4:	20001588 	.word	0x20001588

080107e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80107e8:	b480      	push	{r7}
 80107ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80107ec:	4b07      	ldr	r3, [pc, #28]	; (801080c <pvTaskIncrementMutexHeldCount+0x24>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d004      	beq.n	80107fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80107f4:	4b05      	ldr	r3, [pc, #20]	; (801080c <pvTaskIncrementMutexHeldCount+0x24>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80107fa:	3201      	adds	r2, #1
 80107fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80107fe:	4b03      	ldr	r3, [pc, #12]	; (801080c <pvTaskIncrementMutexHeldCount+0x24>)
 8010800:	681b      	ldr	r3, [r3, #0]
	}
 8010802:	4618      	mov	r0, r3
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr
 801080c:	20001480 	.word	0x20001480

08010810 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801081a:	4b29      	ldr	r3, [pc, #164]	; (80108c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010820:	4b28      	ldr	r3, [pc, #160]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	3304      	adds	r3, #4
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe f90f 	bl	800ea4a <uxListRemove>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d10b      	bne.n	801084a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010832:	4b24      	ldr	r3, [pc, #144]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010838:	2201      	movs	r2, #1
 801083a:	fa02 f303 	lsl.w	r3, r2, r3
 801083e:	43da      	mvns	r2, r3
 8010840:	4b21      	ldr	r3, [pc, #132]	; (80108c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4013      	ands	r3, r2
 8010846:	4a20      	ldr	r2, [pc, #128]	; (80108c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010848:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010850:	d10a      	bne.n	8010868 <prvAddCurrentTaskToDelayedList+0x58>
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d007      	beq.n	8010868 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010858:	4b1a      	ldr	r3, [pc, #104]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3304      	adds	r3, #4
 801085e:	4619      	mov	r1, r3
 8010860:	481a      	ldr	r0, [pc, #104]	; (80108cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8010862:	f7fe f895 	bl	800e990 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010866:	e026      	b.n	80108b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010870:	4b14      	ldr	r3, [pc, #80]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	429a      	cmp	r2, r3
 801087e:	d209      	bcs.n	8010894 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010880:	4b13      	ldr	r3, [pc, #76]	; (80108d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	4b0f      	ldr	r3, [pc, #60]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	3304      	adds	r3, #4
 801088a:	4619      	mov	r1, r3
 801088c:	4610      	mov	r0, r2
 801088e:	f7fe f8a3 	bl	800e9d8 <vListInsert>
}
 8010892:	e010      	b.n	80108b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010894:	4b0f      	ldr	r3, [pc, #60]	; (80108d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3304      	adds	r3, #4
 801089e:	4619      	mov	r1, r3
 80108a0:	4610      	mov	r0, r2
 80108a2:	f7fe f899 	bl	800e9d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108a6:	4b0c      	ldr	r3, [pc, #48]	; (80108d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d202      	bcs.n	80108b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80108b0:	4a09      	ldr	r2, [pc, #36]	; (80108d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	6013      	str	r3, [r2, #0]
}
 80108b6:	bf00      	nop
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	20001584 	.word	0x20001584
 80108c4:	20001480 	.word	0x20001480
 80108c8:	20001588 	.word	0x20001588
 80108cc:	2000156c 	.word	0x2000156c
 80108d0:	2000153c 	.word	0x2000153c
 80108d4:	20001538 	.word	0x20001538
 80108d8:	200015a0 	.word	0x200015a0

080108dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108dc:	b480      	push	{r7}
 80108de:	b085      	sub	sp, #20
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	3b04      	subs	r3, #4
 80108ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3b04      	subs	r3, #4
 80108fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	f023 0201 	bic.w	r2, r3, #1
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	3b04      	subs	r3, #4
 801090a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801090c:	4a0c      	ldr	r2, [pc, #48]	; (8010940 <pxPortInitialiseStack+0x64>)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	3b14      	subs	r3, #20
 8010916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	3b04      	subs	r3, #4
 8010922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f06f 0202 	mvn.w	r2, #2
 801092a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	3b20      	subs	r3, #32
 8010930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010932:	68fb      	ldr	r3, [r7, #12]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	08010945 	.word	0x08010945

08010944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801094e:	4b11      	ldr	r3, [pc, #68]	; (8010994 <prvTaskExitError+0x50>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010956:	d009      	beq.n	801096c <prvTaskExitError+0x28>
 8010958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095c:	f383 8811 	msr	BASEPRI, r3
 8010960:	f3bf 8f6f 	isb	sy
 8010964:	f3bf 8f4f 	dsb	sy
 8010968:	60fb      	str	r3, [r7, #12]
 801096a:	e7fe      	b.n	801096a <prvTaskExitError+0x26>
 801096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010970:	f383 8811 	msr	BASEPRI, r3
 8010974:	f3bf 8f6f 	isb	sy
 8010978:	f3bf 8f4f 	dsb	sy
 801097c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801097e:	bf00      	nop
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d0fc      	beq.n	8010980 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010986:	bf00      	nop
 8010988:	3714      	adds	r7, #20
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	20000dd0 	.word	0x20000dd0
	...

080109a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80109a0:	4b07      	ldr	r3, [pc, #28]	; (80109c0 <pxCurrentTCBConst2>)
 80109a2:	6819      	ldr	r1, [r3, #0]
 80109a4:	6808      	ldr	r0, [r1, #0]
 80109a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109aa:	f380 8809 	msr	PSP, r0
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f04f 0000 	mov.w	r0, #0
 80109b6:	f380 8811 	msr	BASEPRI, r0
 80109ba:	4770      	bx	lr
 80109bc:	f3af 8000 	nop.w

080109c0 <pxCurrentTCBConst2>:
 80109c0:	20001480 	.word	0x20001480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109c4:	bf00      	nop
 80109c6:	bf00      	nop

080109c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109c8:	4808      	ldr	r0, [pc, #32]	; (80109ec <prvPortStartFirstTask+0x24>)
 80109ca:	6800      	ldr	r0, [r0, #0]
 80109cc:	6800      	ldr	r0, [r0, #0]
 80109ce:	f380 8808 	msr	MSP, r0
 80109d2:	f04f 0000 	mov.w	r0, #0
 80109d6:	f380 8814 	msr	CONTROL, r0
 80109da:	b662      	cpsie	i
 80109dc:	b661      	cpsie	f
 80109de:	f3bf 8f4f 	dsb	sy
 80109e2:	f3bf 8f6f 	isb	sy
 80109e6:	df00      	svc	0
 80109e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109ea:	bf00      	nop
 80109ec:	e000ed08 	.word	0xe000ed08

080109f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80109f6:	4b44      	ldr	r3, [pc, #272]	; (8010b08 <xPortStartScheduler+0x118>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a44      	ldr	r2, [pc, #272]	; (8010b0c <xPortStartScheduler+0x11c>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d109      	bne.n	8010a14 <xPortStartScheduler+0x24>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	613b      	str	r3, [r7, #16]
 8010a12:	e7fe      	b.n	8010a12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a14:	4b3c      	ldr	r3, [pc, #240]	; (8010b08 <xPortStartScheduler+0x118>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a3d      	ldr	r2, [pc, #244]	; (8010b10 <xPortStartScheduler+0x120>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d109      	bne.n	8010a32 <xPortStartScheduler+0x42>
 8010a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a22:	f383 8811 	msr	BASEPRI, r3
 8010a26:	f3bf 8f6f 	isb	sy
 8010a2a:	f3bf 8f4f 	dsb	sy
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	e7fe      	b.n	8010a30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a32:	4b38      	ldr	r3, [pc, #224]	; (8010b14 <xPortStartScheduler+0x124>)
 8010a34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	22ff      	movs	r2, #255	; 0xff
 8010a42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a4c:	78fb      	ldrb	r3, [r7, #3]
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	4b30      	ldr	r3, [pc, #192]	; (8010b18 <xPortStartScheduler+0x128>)
 8010a58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a5a:	4b30      	ldr	r3, [pc, #192]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010a5c:	2207      	movs	r2, #7
 8010a5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a60:	e009      	b.n	8010a76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010a62:	4b2e      	ldr	r3, [pc, #184]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4a2c      	ldr	r2, [pc, #176]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010a6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a6c:	78fb      	ldrb	r3, [r7, #3]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a76:	78fb      	ldrb	r3, [r7, #3]
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a7e:	2b80      	cmp	r3, #128	; 0x80
 8010a80:	d0ef      	beq.n	8010a62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a82:	4b26      	ldr	r3, [pc, #152]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f1c3 0307 	rsb	r3, r3, #7
 8010a8a:	2b04      	cmp	r3, #4
 8010a8c:	d009      	beq.n	8010aa2 <xPortStartScheduler+0xb2>
 8010a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	60bb      	str	r3, [r7, #8]
 8010aa0:	e7fe      	b.n	8010aa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010aa2:	4b1e      	ldr	r3, [pc, #120]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	021b      	lsls	r3, r3, #8
 8010aa8:	4a1c      	ldr	r2, [pc, #112]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010aac:	4b1b      	ldr	r3, [pc, #108]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010ab4:	4a19      	ldr	r2, [pc, #100]	; (8010b1c <xPortStartScheduler+0x12c>)
 8010ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ac0:	4b17      	ldr	r3, [pc, #92]	; (8010b20 <xPortStartScheduler+0x130>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a16      	ldr	r2, [pc, #88]	; (8010b20 <xPortStartScheduler+0x130>)
 8010ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010acc:	4b14      	ldr	r3, [pc, #80]	; (8010b20 <xPortStartScheduler+0x130>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a13      	ldr	r2, [pc, #76]	; (8010b20 <xPortStartScheduler+0x130>)
 8010ad2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ad8:	f000 f8d6 	bl	8010c88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010adc:	4b11      	ldr	r3, [pc, #68]	; (8010b24 <xPortStartScheduler+0x134>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ae2:	f000 f8f5 	bl	8010cd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ae6:	4b10      	ldr	r3, [pc, #64]	; (8010b28 <xPortStartScheduler+0x138>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a0f      	ldr	r2, [pc, #60]	; (8010b28 <xPortStartScheduler+0x138>)
 8010aec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010af0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010af2:	f7ff ff69 	bl	80109c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010af6:	f7ff fa77 	bl	800ffe8 <vTaskSwitchContext>
	prvTaskExitError();
 8010afa:	f7ff ff23 	bl	8010944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3718      	adds	r7, #24
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	e000ed00 	.word	0xe000ed00
 8010b0c:	410fc271 	.word	0x410fc271
 8010b10:	410fc270 	.word	0x410fc270
 8010b14:	e000e400 	.word	0xe000e400
 8010b18:	200015ac 	.word	0x200015ac
 8010b1c:	200015b0 	.word	0x200015b0
 8010b20:	e000ed20 	.word	0xe000ed20
 8010b24:	20000dd0 	.word	0x20000dd0
 8010b28:	e000ef34 	.word	0xe000ef34

08010b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b36:	f383 8811 	msr	BASEPRI, r3
 8010b3a:	f3bf 8f6f 	isb	sy
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b44:	4b0e      	ldr	r3, [pc, #56]	; (8010b80 <vPortEnterCritical+0x54>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	4a0d      	ldr	r2, [pc, #52]	; (8010b80 <vPortEnterCritical+0x54>)
 8010b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b4e:	4b0c      	ldr	r3, [pc, #48]	; (8010b80 <vPortEnterCritical+0x54>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d10e      	bne.n	8010b74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b56:	4b0b      	ldr	r3, [pc, #44]	; (8010b84 <vPortEnterCritical+0x58>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d009      	beq.n	8010b74 <vPortEnterCritical+0x48>
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	603b      	str	r3, [r7, #0]
 8010b72:	e7fe      	b.n	8010b72 <vPortEnterCritical+0x46>
	}
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr
 8010b80:	20000dd0 	.word	0x20000dd0
 8010b84:	e000ed04 	.word	0xe000ed04

08010b88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b8e:	4b11      	ldr	r3, [pc, #68]	; (8010bd4 <vPortExitCritical+0x4c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d109      	bne.n	8010baa <vPortExitCritical+0x22>
 8010b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9a:	f383 8811 	msr	BASEPRI, r3
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	607b      	str	r3, [r7, #4]
 8010ba8:	e7fe      	b.n	8010ba8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010baa:	4b0a      	ldr	r3, [pc, #40]	; (8010bd4 <vPortExitCritical+0x4c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	4a08      	ldr	r2, [pc, #32]	; (8010bd4 <vPortExitCritical+0x4c>)
 8010bb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010bb4:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <vPortExitCritical+0x4c>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <vPortExitCritical+0x3e>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	20000dd0 	.word	0x20000dd0
	...

08010be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010be0:	f3ef 8009 	mrs	r0, PSP
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <pxCurrentTCBConst>)
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	f01e 0f10 	tst.w	lr, #16
 8010bf0:	bf08      	it	eq
 8010bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	6010      	str	r0, [r2, #0]
 8010bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c04:	f380 8811 	msr	BASEPRI, r0
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f7ff f9ea 	bl	800ffe8 <vTaskSwitchContext>
 8010c14:	f04f 0000 	mov.w	r0, #0
 8010c18:	f380 8811 	msr	BASEPRI, r0
 8010c1c:	bc09      	pop	{r0, r3}
 8010c1e:	6819      	ldr	r1, [r3, #0]
 8010c20:	6808      	ldr	r0, [r1, #0]
 8010c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c26:	f01e 0f10 	tst.w	lr, #16
 8010c2a:	bf08      	it	eq
 8010c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c30:	f380 8809 	msr	PSP, r0
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w

08010c40 <pxCurrentTCBConst>:
 8010c40:	20001480 	.word	0x20001480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop

08010c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c60:	f7ff f906 	bl	800fe70 <xTaskIncrementTick>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c6a:	4b06      	ldr	r3, [pc, #24]	; (8010c84 <SysTick_Handler+0x3c>)
 8010c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	2300      	movs	r3, #0
 8010c74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c7c:	bf00      	nop
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	e000ed04 	.word	0xe000ed04

08010c88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c88:	b480      	push	{r7}
 8010c8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c8c:	4b0b      	ldr	r3, [pc, #44]	; (8010cbc <vPortSetupTimerInterrupt+0x34>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c92:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <vPortSetupTimerInterrupt+0x38>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c98:	4b0a      	ldr	r3, [pc, #40]	; (8010cc4 <vPortSetupTimerInterrupt+0x3c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a0a      	ldr	r2, [pc, #40]	; (8010cc8 <vPortSetupTimerInterrupt+0x40>)
 8010c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ca2:	099b      	lsrs	r3, r3, #6
 8010ca4:	4a09      	ldr	r2, [pc, #36]	; (8010ccc <vPortSetupTimerInterrupt+0x44>)
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010caa:	4b04      	ldr	r3, [pc, #16]	; (8010cbc <vPortSetupTimerInterrupt+0x34>)
 8010cac:	2207      	movs	r2, #7
 8010cae:	601a      	str	r2, [r3, #0]
}
 8010cb0:	bf00      	nop
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	e000e010 	.word	0xe000e010
 8010cc0:	e000e018 	.word	0xe000e018
 8010cc4:	20000cb4 	.word	0x20000cb4
 8010cc8:	10624dd3 	.word	0x10624dd3
 8010ccc:	e000e014 	.word	0xe000e014

08010cd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010cd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ce0 <vPortEnableVFP+0x10>
 8010cd4:	6801      	ldr	r1, [r0, #0]
 8010cd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010cda:	6001      	str	r1, [r0, #0]
 8010cdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010cde:	bf00      	nop
 8010ce0:	e000ed88 	.word	0xe000ed88

08010ce4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010cea:	f3ef 8305 	mrs	r3, IPSR
 8010cee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2b0f      	cmp	r3, #15
 8010cf4:	d913      	bls.n	8010d1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cf6:	4a16      	ldr	r2, [pc, #88]	; (8010d50 <vPortValidateInterruptPriority+0x6c>)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d00:	4b14      	ldr	r3, [pc, #80]	; (8010d54 <vPortValidateInterruptPriority+0x70>)
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	7afa      	ldrb	r2, [r7, #11]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d209      	bcs.n	8010d1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	607b      	str	r3, [r7, #4]
 8010d1c:	e7fe      	b.n	8010d1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d1e:	4b0e      	ldr	r3, [pc, #56]	; (8010d58 <vPortValidateInterruptPriority+0x74>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d26:	4b0d      	ldr	r3, [pc, #52]	; (8010d5c <vPortValidateInterruptPriority+0x78>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d909      	bls.n	8010d42 <vPortValidateInterruptPriority+0x5e>
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	e7fe      	b.n	8010d40 <vPortValidateInterruptPriority+0x5c>
	}
 8010d42:	bf00      	nop
 8010d44:	3714      	adds	r7, #20
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	e000e3f0 	.word	0xe000e3f0
 8010d54:	200015ac 	.word	0x200015ac
 8010d58:	e000ed0c 	.word	0xe000ed0c
 8010d5c:	200015b0 	.word	0x200015b0

08010d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08a      	sub	sp, #40	; 0x28
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d6c:	f7fe ffd6 	bl	800fd1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d70:	4b57      	ldr	r3, [pc, #348]	; (8010ed0 <pvPortMalloc+0x170>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d101      	bne.n	8010d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d78:	f000 f90c 	bl	8010f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d7c:	4b55      	ldr	r3, [pc, #340]	; (8010ed4 <pvPortMalloc+0x174>)
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4013      	ands	r3, r2
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f040 808c 	bne.w	8010ea2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d01c      	beq.n	8010dca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010d90:	2208      	movs	r2, #8
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4413      	add	r3, r2
 8010d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f003 0307 	and.w	r3, r3, #7
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d013      	beq.n	8010dca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f023 0307 	bic.w	r3, r3, #7
 8010da8:	3308      	adds	r3, #8
 8010daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f003 0307 	and.w	r3, r3, #7
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d009      	beq.n	8010dca <pvPortMalloc+0x6a>
 8010db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dba:	f383 8811 	msr	BASEPRI, r3
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	617b      	str	r3, [r7, #20]
 8010dc8:	e7fe      	b.n	8010dc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d068      	beq.n	8010ea2 <pvPortMalloc+0x142>
 8010dd0:	4b41      	ldr	r3, [pc, #260]	; (8010ed8 <pvPortMalloc+0x178>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d863      	bhi.n	8010ea2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010dda:	4b40      	ldr	r3, [pc, #256]	; (8010edc <pvPortMalloc+0x17c>)
 8010ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010dde:	4b3f      	ldr	r3, [pc, #252]	; (8010edc <pvPortMalloc+0x17c>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010de4:	e004      	b.n	8010df0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d903      	bls.n	8010e02 <pvPortMalloc+0xa2>
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1f1      	bne.n	8010de6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e02:	4b33      	ldr	r3, [pc, #204]	; (8010ed0 <pvPortMalloc+0x170>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d04a      	beq.n	8010ea2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2208      	movs	r2, #8
 8010e12:	4413      	add	r3, r2
 8010e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	6a3b      	ldr	r3, [r7, #32]
 8010e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	685a      	ldr	r2, [r3, #4]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	1ad2      	subs	r2, r2, r3
 8010e26:	2308      	movs	r3, #8
 8010e28:	005b      	lsls	r3, r3, #1
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d91e      	bls.n	8010e6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4413      	add	r3, r2
 8010e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	f003 0307 	and.w	r3, r3, #7
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d009      	beq.n	8010e54 <pvPortMalloc+0xf4>
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	613b      	str	r3, [r7, #16]
 8010e52:	e7fe      	b.n	8010e52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	1ad2      	subs	r2, r2, r3
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e66:	69b8      	ldr	r0, [r7, #24]
 8010e68:	f000 f8f6 	bl	8011058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e6c:	4b1a      	ldr	r3, [pc, #104]	; (8010ed8 <pvPortMalloc+0x178>)
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	4a18      	ldr	r2, [pc, #96]	; (8010ed8 <pvPortMalloc+0x178>)
 8010e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e7a:	4b17      	ldr	r3, [pc, #92]	; (8010ed8 <pvPortMalloc+0x178>)
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	4b18      	ldr	r3, [pc, #96]	; (8010ee0 <pvPortMalloc+0x180>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d203      	bcs.n	8010e8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e86:	4b14      	ldr	r3, [pc, #80]	; (8010ed8 <pvPortMalloc+0x178>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4a15      	ldr	r2, [pc, #84]	; (8010ee0 <pvPortMalloc+0x180>)
 8010e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	4b10      	ldr	r3, [pc, #64]	; (8010ed4 <pvPortMalloc+0x174>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	431a      	orrs	r2, r3
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ea2:	f7fe ff49 	bl	800fd38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	f003 0307 	and.w	r3, r3, #7
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d009      	beq.n	8010ec4 <pvPortMalloc+0x164>
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	60fb      	str	r3, [r7, #12]
 8010ec2:	e7fe      	b.n	8010ec2 <pvPortMalloc+0x162>
	return pvReturn;
 8010ec4:	69fb      	ldr	r3, [r7, #28]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3728      	adds	r7, #40	; 0x28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	200051bc 	.word	0x200051bc
 8010ed4:	200051c8 	.word	0x200051c8
 8010ed8:	200051c0 	.word	0x200051c0
 8010edc:	200051b4 	.word	0x200051b4
 8010ee0:	200051c4 	.word	0x200051c4

08010ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d046      	beq.n	8010f84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ef6:	2308      	movs	r3, #8
 8010ef8:	425b      	negs	r3, r3
 8010efa:	697a      	ldr	r2, [r7, #20]
 8010efc:	4413      	add	r3, r2
 8010efe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	685a      	ldr	r2, [r3, #4]
 8010f08:	4b20      	ldr	r3, [pc, #128]	; (8010f8c <vPortFree+0xa8>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4013      	ands	r3, r2
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d109      	bne.n	8010f26 <vPortFree+0x42>
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	60fb      	str	r3, [r7, #12]
 8010f24:	e7fe      	b.n	8010f24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d009      	beq.n	8010f42 <vPortFree+0x5e>
 8010f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
 8010f3e:	60bb      	str	r3, [r7, #8]
 8010f40:	e7fe      	b.n	8010f40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	685a      	ldr	r2, [r3, #4]
 8010f46:	4b11      	ldr	r3, [pc, #68]	; (8010f8c <vPortFree+0xa8>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d019      	beq.n	8010f84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d115      	bne.n	8010f84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	4b0b      	ldr	r3, [pc, #44]	; (8010f8c <vPortFree+0xa8>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	43db      	mvns	r3, r3
 8010f62:	401a      	ands	r2, r3
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f68:	f7fe fed8 	bl	800fd1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	685a      	ldr	r2, [r3, #4]
 8010f70:	4b07      	ldr	r3, [pc, #28]	; (8010f90 <vPortFree+0xac>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4413      	add	r3, r2
 8010f76:	4a06      	ldr	r2, [pc, #24]	; (8010f90 <vPortFree+0xac>)
 8010f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f7a:	6938      	ldr	r0, [r7, #16]
 8010f7c:	f000 f86c 	bl	8011058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f80:	f7fe feda 	bl	800fd38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f84:	bf00      	nop
 8010f86:	3718      	adds	r7, #24
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	200051c8 	.word	0x200051c8
 8010f90:	200051c0 	.word	0x200051c0

08010f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010fa0:	4b27      	ldr	r3, [pc, #156]	; (8011040 <prvHeapInit+0xac>)
 8010fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f003 0307 	and.w	r3, r3, #7
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00c      	beq.n	8010fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	3307      	adds	r3, #7
 8010fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f023 0307 	bic.w	r3, r3, #7
 8010fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	4a1f      	ldr	r2, [pc, #124]	; (8011040 <prvHeapInit+0xac>)
 8010fc4:	4413      	add	r3, r2
 8010fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fcc:	4a1d      	ldr	r2, [pc, #116]	; (8011044 <prvHeapInit+0xb0>)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fd2:	4b1c      	ldr	r3, [pc, #112]	; (8011044 <prvHeapInit+0xb0>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	4413      	add	r3, r2
 8010fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fe0:	2208      	movs	r2, #8
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	1a9b      	subs	r3, r3, r2
 8010fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f023 0307 	bic.w	r3, r3, #7
 8010fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	4a15      	ldr	r2, [pc, #84]	; (8011048 <prvHeapInit+0xb4>)
 8010ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010ff6:	4b14      	ldr	r3, [pc, #80]	; (8011048 <prvHeapInit+0xb4>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010ffe:	4b12      	ldr	r3, [pc, #72]	; (8011048 <prvHeapInit+0xb4>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011014:	4b0c      	ldr	r3, [pc, #48]	; (8011048 <prvHeapInit+0xb4>)
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	4a0a      	ldr	r2, [pc, #40]	; (801104c <prvHeapInit+0xb8>)
 8011022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	4a09      	ldr	r2, [pc, #36]	; (8011050 <prvHeapInit+0xbc>)
 801102a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801102c:	4b09      	ldr	r3, [pc, #36]	; (8011054 <prvHeapInit+0xc0>)
 801102e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011032:	601a      	str	r2, [r3, #0]
}
 8011034:	bf00      	nop
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	200015b4 	.word	0x200015b4
 8011044:	200051b4 	.word	0x200051b4
 8011048:	200051bc 	.word	0x200051bc
 801104c:	200051c4 	.word	0x200051c4
 8011050:	200051c0 	.word	0x200051c0
 8011054:	200051c8 	.word	0x200051c8

08011058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011060:	4b28      	ldr	r3, [pc, #160]	; (8011104 <prvInsertBlockIntoFreeList+0xac>)
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	e002      	b.n	801106c <prvInsertBlockIntoFreeList+0x14>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	60fb      	str	r3, [r7, #12]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	429a      	cmp	r2, r3
 8011074:	d8f7      	bhi.n	8011066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	4413      	add	r3, r2
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d108      	bne.n	801109a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	441a      	add	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	441a      	add	r2, r3
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d118      	bne.n	80110e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	4b15      	ldr	r3, [pc, #84]	; (8011108 <prvInsertBlockIntoFreeList+0xb0>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d00d      	beq.n	80110d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	441a      	add	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	e008      	b.n	80110e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110d6:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <prvInsertBlockIntoFreeList+0xb0>)
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	e003      	b.n	80110e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681a      	ldr	r2, [r3, #0]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d002      	beq.n	80110f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110f6:	bf00      	nop
 80110f8:	3714      	adds	r7, #20
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	200051b4 	.word	0x200051b4
 8011108:	200051bc 	.word	0x200051bc

0801110c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011110:	2200      	movs	r2, #0
 8011112:	4912      	ldr	r1, [pc, #72]	; (801115c <MX_USB_DEVICE_Init+0x50>)
 8011114:	4812      	ldr	r0, [pc, #72]	; (8011160 <MX_USB_DEVICE_Init+0x54>)
 8011116:	f7fc f851 	bl	800d1bc <USBD_Init>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011120:	f7f1 ffe2 	bl	80030e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011124:	490f      	ldr	r1, [pc, #60]	; (8011164 <MX_USB_DEVICE_Init+0x58>)
 8011126:	480e      	ldr	r0, [pc, #56]	; (8011160 <MX_USB_DEVICE_Init+0x54>)
 8011128:	f7fc f873 	bl	800d212 <USBD_RegisterClass>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d001      	beq.n	8011136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011132:	f7f1 ffd9 	bl	80030e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011136:	490c      	ldr	r1, [pc, #48]	; (8011168 <MX_USB_DEVICE_Init+0x5c>)
 8011138:	4809      	ldr	r0, [pc, #36]	; (8011160 <MX_USB_DEVICE_Init+0x54>)
 801113a:	f7fb ffa1 	bl	800d080 <USBD_CDC_RegisterInterface>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d001      	beq.n	8011148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011144:	f7f1 ffd0 	bl	80030e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011148:	4805      	ldr	r0, [pc, #20]	; (8011160 <MX_USB_DEVICE_Init+0x54>)
 801114a:	f7fc f87c 	bl	800d246 <USBD_Start>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d001      	beq.n	8011158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011154:	f7f1 ffc8 	bl	80030e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011158:	bf00      	nop
 801115a:	bd80      	pop	{r7, pc}
 801115c:	20000de4 	.word	0x20000de4
 8011160:	20005e54 	.word	0x20005e54
 8011164:	20000ccc 	.word	0x20000ccc
 8011168:	20000dd4 	.word	0x20000dd4

0801116c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011170:	2200      	movs	r2, #0
 8011172:	4905      	ldr	r1, [pc, #20]	; (8011188 <CDC_Init_FS+0x1c>)
 8011174:	4805      	ldr	r0, [pc, #20]	; (801118c <CDC_Init_FS+0x20>)
 8011176:	f7fb ff9a 	bl	800d0ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801117a:	4905      	ldr	r1, [pc, #20]	; (8011190 <CDC_Init_FS+0x24>)
 801117c:	4803      	ldr	r0, [pc, #12]	; (801118c <CDC_Init_FS+0x20>)
 801117e:	f7fb ffb0 	bl	800d0e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011184:	4618      	mov	r0, r3
 8011186:	bd80      	pop	{r7, pc}
 8011188:	200062f0 	.word	0x200062f0
 801118c:	20005e54 	.word	0x20005e54
 8011190:	200060f0 	.word	0x200060f0

08011194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011194:	b480      	push	{r7}
 8011196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801119a:	4618      	mov	r0, r3
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	4603      	mov	r3, r0
 80111ac:	6039      	str	r1, [r7, #0]
 80111ae:	71fb      	strb	r3, [r7, #7]
 80111b0:	4613      	mov	r3, r2
 80111b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80111b4:	79fb      	ldrb	r3, [r7, #7]
 80111b6:	2b23      	cmp	r3, #35	; 0x23
 80111b8:	f200 808c 	bhi.w	80112d4 <CDC_Control_FS+0x130>
 80111bc:	a201      	add	r2, pc, #4	; (adr r2, 80111c4 <CDC_Control_FS+0x20>)
 80111be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c2:	bf00      	nop
 80111c4:	080112d5 	.word	0x080112d5
 80111c8:	080112d5 	.word	0x080112d5
 80111cc:	080112d5 	.word	0x080112d5
 80111d0:	080112d5 	.word	0x080112d5
 80111d4:	080112d5 	.word	0x080112d5
 80111d8:	080112d5 	.word	0x080112d5
 80111dc:	080112d5 	.word	0x080112d5
 80111e0:	080112d5 	.word	0x080112d5
 80111e4:	080112d5 	.word	0x080112d5
 80111e8:	080112d5 	.word	0x080112d5
 80111ec:	080112d5 	.word	0x080112d5
 80111f0:	080112d5 	.word	0x080112d5
 80111f4:	080112d5 	.word	0x080112d5
 80111f8:	080112d5 	.word	0x080112d5
 80111fc:	080112d5 	.word	0x080112d5
 8011200:	080112d5 	.word	0x080112d5
 8011204:	080112d5 	.word	0x080112d5
 8011208:	080112d5 	.word	0x080112d5
 801120c:	080112d5 	.word	0x080112d5
 8011210:	080112d5 	.word	0x080112d5
 8011214:	080112d5 	.word	0x080112d5
 8011218:	080112d5 	.word	0x080112d5
 801121c:	080112d5 	.word	0x080112d5
 8011220:	080112d5 	.word	0x080112d5
 8011224:	080112d5 	.word	0x080112d5
 8011228:	080112d5 	.word	0x080112d5
 801122c:	080112d5 	.word	0x080112d5
 8011230:	080112d5 	.word	0x080112d5
 8011234:	080112d5 	.word	0x080112d5
 8011238:	080112d5 	.word	0x080112d5
 801123c:	080112d5 	.word	0x080112d5
 8011240:	080112d5 	.word	0x080112d5
 8011244:	08011255 	.word	0x08011255
 8011248:	0801128f 	.word	0x0801128f
 801124c:	080112d5 	.word	0x080112d5
 8011250:	080112d5 	.word	0x080112d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	781a      	ldrb	r2, [r3, #0]
 8011258:	4b22      	ldr	r3, [pc, #136]	; (80112e4 <CDC_Control_FS+0x140>)
 801125a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	785a      	ldrb	r2, [r3, #1]
 8011260:	4b20      	ldr	r3, [pc, #128]	; (80112e4 <CDC_Control_FS+0x140>)
 8011262:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	789a      	ldrb	r2, [r3, #2]
 8011268:	4b1e      	ldr	r3, [pc, #120]	; (80112e4 <CDC_Control_FS+0x140>)
 801126a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	78da      	ldrb	r2, [r3, #3]
 8011270:	4b1c      	ldr	r3, [pc, #112]	; (80112e4 <CDC_Control_FS+0x140>)
 8011272:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	791a      	ldrb	r2, [r3, #4]
 8011278:	4b1a      	ldr	r3, [pc, #104]	; (80112e4 <CDC_Control_FS+0x140>)
 801127a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	795a      	ldrb	r2, [r3, #5]
 8011280:	4b18      	ldr	r3, [pc, #96]	; (80112e4 <CDC_Control_FS+0x140>)
 8011282:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	799a      	ldrb	r2, [r3, #6]
 8011288:	4b16      	ldr	r3, [pc, #88]	; (80112e4 <CDC_Control_FS+0x140>)
 801128a:	719a      	strb	r2, [r3, #6]
    	break;
 801128c:	e023      	b.n	80112d6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801128e:	4b15      	ldr	r3, [pc, #84]	; (80112e4 <CDC_Control_FS+0x140>)
 8011290:	781a      	ldrb	r2, [r3, #0]
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	3301      	adds	r3, #1
 801129a:	4a12      	ldr	r2, [pc, #72]	; (80112e4 <CDC_Control_FS+0x140>)
 801129c:	7852      	ldrb	r2, [r2, #1]
 801129e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	3302      	adds	r3, #2
 80112a4:	4a0f      	ldr	r2, [pc, #60]	; (80112e4 <CDC_Control_FS+0x140>)
 80112a6:	7892      	ldrb	r2, [r2, #2]
 80112a8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	3303      	adds	r3, #3
 80112ae:	4a0d      	ldr	r2, [pc, #52]	; (80112e4 <CDC_Control_FS+0x140>)
 80112b0:	78d2      	ldrb	r2, [r2, #3]
 80112b2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	3304      	adds	r3, #4
 80112b8:	4a0a      	ldr	r2, [pc, #40]	; (80112e4 <CDC_Control_FS+0x140>)
 80112ba:	7912      	ldrb	r2, [r2, #4]
 80112bc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	3305      	adds	r3, #5
 80112c2:	4a08      	ldr	r2, [pc, #32]	; (80112e4 <CDC_Control_FS+0x140>)
 80112c4:	7952      	ldrb	r2, [r2, #5]
 80112c6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	3306      	adds	r3, #6
 80112cc:	4a05      	ldr	r2, [pc, #20]	; (80112e4 <CDC_Control_FS+0x140>)
 80112ce:	7992      	ldrb	r2, [r2, #6]
 80112d0:	701a      	strb	r2, [r3, #0]
    break;
 80112d2:	e000      	b.n	80112d6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80112d4:	bf00      	nop
  }

  return (USBD_OK);
 80112d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	200064f0 	.word	0x200064f0

080112e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	461a      	mov	r2, r3
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	4807      	ldr	r0, [pc, #28]	; (801131c <CDC_Receive_FS+0x34>)
 80112fe:	f7f1 ff6a 	bl	80031d6 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	4806      	ldr	r0, [pc, #24]	; (8011320 <CDC_Receive_FS+0x38>)
 8011306:	f7fb feec 	bl	800d0e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801130a:	4805      	ldr	r0, [pc, #20]	; (8011320 <CDC_Receive_FS+0x38>)
 801130c:	f7fb ff2c 	bl	800d168 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	20000054 	.word	0x20000054
 8011320:	20005e54 	.word	0x20005e54

08011324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011330:	2300      	movs	r3, #0
 8011332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011334:	4b0d      	ldr	r3, [pc, #52]	; (801136c <CDC_Transmit_FS+0x48>)
 8011336:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801133a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011346:	2301      	movs	r3, #1
 8011348:	e00b      	b.n	8011362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801134a:	887b      	ldrh	r3, [r7, #2]
 801134c:	461a      	mov	r2, r3
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	4806      	ldr	r0, [pc, #24]	; (801136c <CDC_Transmit_FS+0x48>)
 8011352:	f7fb feac 	bl	800d0ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011356:	4805      	ldr	r0, [pc, #20]	; (801136c <CDC_Transmit_FS+0x48>)
 8011358:	f7fb fed7 	bl	800d10a <USBD_CDC_TransmitPacket>
 801135c:	4603      	mov	r3, r0
 801135e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011360:	7bfb      	ldrb	r3, [r7, #15]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	20005e54 	.word	0x20005e54

08011370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	6039      	str	r1, [r7, #0]
 801137a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	2212      	movs	r2, #18
 8011380:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011382:	4b03      	ldr	r3, [pc, #12]	; (8011390 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011384:	4618      	mov	r0, r3
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr
 8011390:	20000e00 	.word	0x20000e00

08011394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	6039      	str	r1, [r7, #0]
 801139e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2204      	movs	r2, #4
 80113a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113a6:	4b03      	ldr	r3, [pc, #12]	; (80113b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	370c      	adds	r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	20000e14 	.word	0x20000e14

080113b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	4603      	mov	r3, r0
 80113c0:	6039      	str	r1, [r7, #0]
 80113c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d105      	bne.n	80113d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	4907      	ldr	r1, [pc, #28]	; (80113ec <USBD_FS_ProductStrDescriptor+0x34>)
 80113ce:	4808      	ldr	r0, [pc, #32]	; (80113f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80113d0:	f7fc fe70 	bl	800e0b4 <USBD_GetString>
 80113d4:	e004      	b.n	80113e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	4904      	ldr	r1, [pc, #16]	; (80113ec <USBD_FS_ProductStrDescriptor+0x34>)
 80113da:	4805      	ldr	r0, [pc, #20]	; (80113f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80113dc:	f7fc fe6a 	bl	800e0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113e0:	4b02      	ldr	r3, [pc, #8]	; (80113ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	200064f8 	.word	0x200064f8
 80113f0:	08017d60 	.word	0x08017d60

080113f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	4603      	mov	r3, r0
 80113fc:	6039      	str	r1, [r7, #0]
 80113fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	4904      	ldr	r1, [pc, #16]	; (8011414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011404:	4804      	ldr	r0, [pc, #16]	; (8011418 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011406:	f7fc fe55 	bl	800e0b4 <USBD_GetString>
  return USBD_StrDesc;
 801140a:	4b02      	ldr	r3, [pc, #8]	; (8011414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801140c:	4618      	mov	r0, r3
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	200064f8 	.word	0x200064f8
 8011418:	08017d78 	.word	0x08017d78

0801141c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	6039      	str	r1, [r7, #0]
 8011426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	221a      	movs	r2, #26
 801142c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801142e:	f000 f843 	bl	80114b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011432:	4b02      	ldr	r3, [pc, #8]	; (801143c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	20000e18 	.word	0x20000e18

08011440 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	4603      	mov	r3, r0
 8011448:	6039      	str	r1, [r7, #0]
 801144a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801144c:	79fb      	ldrb	r3, [r7, #7]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d105      	bne.n	801145e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	4907      	ldr	r1, [pc, #28]	; (8011474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011456:	4808      	ldr	r0, [pc, #32]	; (8011478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011458:	f7fc fe2c 	bl	800e0b4 <USBD_GetString>
 801145c:	e004      	b.n	8011468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	4904      	ldr	r1, [pc, #16]	; (8011474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011462:	4805      	ldr	r0, [pc, #20]	; (8011478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011464:	f7fc fe26 	bl	800e0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011468:	4b02      	ldr	r3, [pc, #8]	; (8011474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801146a:	4618      	mov	r0, r3
 801146c:	3708      	adds	r7, #8
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	200064f8 	.word	0x200064f8
 8011478:	08017d8c 	.word	0x08017d8c

0801147c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	6039      	str	r1, [r7, #0]
 8011486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011488:	79fb      	ldrb	r3, [r7, #7]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d105      	bne.n	801149a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	4907      	ldr	r1, [pc, #28]	; (80114b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011492:	4808      	ldr	r0, [pc, #32]	; (80114b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011494:	f7fc fe0e 	bl	800e0b4 <USBD_GetString>
 8011498:	e004      	b.n	80114a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	4904      	ldr	r1, [pc, #16]	; (80114b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801149e:	4805      	ldr	r0, [pc, #20]	; (80114b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114a0:	f7fc fe08 	bl	800e0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80114a4:	4b02      	ldr	r3, [pc, #8]	; (80114b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	200064f8 	.word	0x200064f8
 80114b4:	08017d98 	.word	0x08017d98

080114b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114be:	4b0f      	ldr	r3, [pc, #60]	; (80114fc <Get_SerialNum+0x44>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114c4:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <Get_SerialNum+0x48>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114ca:	4b0e      	ldr	r3, [pc, #56]	; (8011504 <Get_SerialNum+0x4c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4413      	add	r3, r2
 80114d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d009      	beq.n	80114f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114de:	2208      	movs	r2, #8
 80114e0:	4909      	ldr	r1, [pc, #36]	; (8011508 <Get_SerialNum+0x50>)
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f000 f814 	bl	8011510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114e8:	2204      	movs	r2, #4
 80114ea:	4908      	ldr	r1, [pc, #32]	; (801150c <Get_SerialNum+0x54>)
 80114ec:	68b8      	ldr	r0, [r7, #8]
 80114ee:	f000 f80f 	bl	8011510 <IntToUnicode>
  }
}
 80114f2:	bf00      	nop
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	1fff7a10 	.word	0x1fff7a10
 8011500:	1fff7a14 	.word	0x1fff7a14
 8011504:	1fff7a18 	.word	0x1fff7a18
 8011508:	20000e1a 	.word	0x20000e1a
 801150c:	20000e2a 	.word	0x20000e2a

08011510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011510:	b480      	push	{r7}
 8011512:	b087      	sub	sp, #28
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	4613      	mov	r3, r2
 801151c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011522:	2300      	movs	r3, #0
 8011524:	75fb      	strb	r3, [r7, #23]
 8011526:	e027      	b.n	8011578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	0f1b      	lsrs	r3, r3, #28
 801152c:	2b09      	cmp	r3, #9
 801152e:	d80b      	bhi.n	8011548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	0f1b      	lsrs	r3, r3, #28
 8011534:	b2da      	uxtb	r2, r3
 8011536:	7dfb      	ldrb	r3, [r7, #23]
 8011538:	005b      	lsls	r3, r3, #1
 801153a:	4619      	mov	r1, r3
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	440b      	add	r3, r1
 8011540:	3230      	adds	r2, #48	; 0x30
 8011542:	b2d2      	uxtb	r2, r2
 8011544:	701a      	strb	r2, [r3, #0]
 8011546:	e00a      	b.n	801155e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	0f1b      	lsrs	r3, r3, #28
 801154c:	b2da      	uxtb	r2, r3
 801154e:	7dfb      	ldrb	r3, [r7, #23]
 8011550:	005b      	lsls	r3, r3, #1
 8011552:	4619      	mov	r1, r3
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	440b      	add	r3, r1
 8011558:	3237      	adds	r2, #55	; 0x37
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	011b      	lsls	r3, r3, #4
 8011562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011564:	7dfb      	ldrb	r3, [r7, #23]
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	3301      	adds	r3, #1
 801156a:	68ba      	ldr	r2, [r7, #8]
 801156c:	4413      	add	r3, r2
 801156e:	2200      	movs	r2, #0
 8011570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011572:	7dfb      	ldrb	r3, [r7, #23]
 8011574:	3301      	adds	r3, #1
 8011576:	75fb      	strb	r3, [r7, #23]
 8011578:	7dfa      	ldrb	r2, [r7, #23]
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	429a      	cmp	r2, r3
 801157e:	d3d3      	bcc.n	8011528 <IntToUnicode+0x18>
  }
}
 8011580:	bf00      	nop
 8011582:	371c      	adds	r7, #28
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08a      	sub	sp, #40	; 0x28
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011594:	f107 0314 	add.w	r3, r7, #20
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
 801159c:	605a      	str	r2, [r3, #4]
 801159e:	609a      	str	r2, [r3, #8]
 80115a0:	60da      	str	r2, [r3, #12]
 80115a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115ac:	d13a      	bne.n	8011624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ae:	2300      	movs	r3, #0
 80115b0:	613b      	str	r3, [r7, #16]
 80115b2:	4b1e      	ldr	r3, [pc, #120]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b6:	4a1d      	ldr	r2, [pc, #116]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115b8:	f043 0301 	orr.w	r3, r3, #1
 80115bc:	6313      	str	r3, [r2, #48]	; 0x30
 80115be:	4b1b      	ldr	r3, [pc, #108]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c2:	f003 0301 	and.w	r3, r3, #1
 80115c6:	613b      	str	r3, [r7, #16]
 80115c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80115ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115d0:	2302      	movs	r3, #2
 80115d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115d4:	2300      	movs	r3, #0
 80115d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115d8:	2303      	movs	r3, #3
 80115da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115dc:	230a      	movs	r3, #10
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115e0:	f107 0314 	add.w	r3, r7, #20
 80115e4:	4619      	mov	r1, r3
 80115e6:	4812      	ldr	r0, [pc, #72]	; (8011630 <HAL_PCD_MspInit+0xa4>)
 80115e8:	f7f6 ff34 	bl	8008454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115ec:	4b0f      	ldr	r3, [pc, #60]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f0:	4a0e      	ldr	r2, [pc, #56]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115f6:	6353      	str	r3, [r2, #52]	; 0x34
 80115f8:	2300      	movs	r3, #0
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	4b0b      	ldr	r3, [pc, #44]	; (801162c <HAL_PCD_MspInit+0xa0>)
 80115fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011600:	4a0a      	ldr	r2, [pc, #40]	; (801162c <HAL_PCD_MspInit+0xa0>)
 8011602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011606:	6453      	str	r3, [r2, #68]	; 0x44
 8011608:	4b08      	ldr	r3, [pc, #32]	; (801162c <HAL_PCD_MspInit+0xa0>)
 801160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011614:	2200      	movs	r2, #0
 8011616:	2105      	movs	r1, #5
 8011618:	2043      	movs	r0, #67	; 0x43
 801161a:	f7f6 fb53 	bl	8007cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801161e:	2043      	movs	r0, #67	; 0x43
 8011620:	f7f6 fb6c 	bl	8007cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011624:	bf00      	nop
 8011626:	3728      	adds	r7, #40	; 0x28
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	40023800 	.word	0x40023800
 8011630:	40020000 	.word	0x40020000

08011634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011648:	4619      	mov	r1, r3
 801164a:	4610      	mov	r0, r2
 801164c:	f7fb fe44 	bl	800d2d8 <USBD_LL_SetupStage>
}
 8011650:	bf00      	nop
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801166a:	78fa      	ldrb	r2, [r7, #3]
 801166c:	6879      	ldr	r1, [r7, #4]
 801166e:	4613      	mov	r3, r2
 8011670:	00db      	lsls	r3, r3, #3
 8011672:	1a9b      	subs	r3, r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	440b      	add	r3, r1
 8011678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	78fb      	ldrb	r3, [r7, #3]
 8011680:	4619      	mov	r1, r3
 8011682:	f7fb fe74 	bl	800d36e <USBD_LL_DataOutStage>
}
 8011686:	bf00      	nop
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b082      	sub	sp, #8
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	460b      	mov	r3, r1
 8011698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80116a0:	78fa      	ldrb	r2, [r7, #3]
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	4613      	mov	r3, r2
 80116a6:	00db      	lsls	r3, r3, #3
 80116a8:	1a9b      	subs	r3, r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	440b      	add	r3, r1
 80116ae:	3348      	adds	r3, #72	; 0x48
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	78fb      	ldrb	r3, [r7, #3]
 80116b4:	4619      	mov	r1, r3
 80116b6:	f7fb fecb 	bl	800d450 <USBD_LL_DataInStage>
}
 80116ba:	bf00      	nop
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b082      	sub	sp, #8
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fb ffd9 	bl	800d688 <USBD_LL_SOF>
}
 80116d6:	bf00      	nop
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80116de:	b580      	push	{r7, lr}
 80116e0:	b084      	sub	sp, #16
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116e6:	2301      	movs	r3, #1
 80116e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d102      	bne.n	80116f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80116f2:	2300      	movs	r3, #0
 80116f4:	73fb      	strb	r3, [r7, #15]
 80116f6:	e008      	b.n	801170a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d102      	bne.n	8011706 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011700:	2301      	movs	r3, #1
 8011702:	73fb      	strb	r3, [r7, #15]
 8011704:	e001      	b.n	801170a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011706:	f7f1 fcef 	bl	80030e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011710:	7bfa      	ldrb	r2, [r7, #15]
 8011712:	4611      	mov	r1, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f7fb ff81 	bl	800d61c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011720:	4618      	mov	r0, r3
 8011722:	f7fb ff3a 	bl	800d59a <USBD_LL_Reset>
}
 8011726:	bf00      	nop
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
	...

08011730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801173e:	4618      	mov	r0, r3
 8011740:	f7fb ff7c 	bl	800d63c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	6812      	ldr	r2, [r2, #0]
 8011752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011756:	f043 0301 	orr.w	r3, r3, #1
 801175a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6a1b      	ldr	r3, [r3, #32]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d005      	beq.n	8011770 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011764:	4b04      	ldr	r3, [pc, #16]	; (8011778 <HAL_PCD_SuspendCallback+0x48>)
 8011766:	691b      	ldr	r3, [r3, #16]
 8011768:	4a03      	ldr	r2, [pc, #12]	; (8011778 <HAL_PCD_SuspendCallback+0x48>)
 801176a:	f043 0306 	orr.w	r3, r3, #6
 801176e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011770:	bf00      	nop
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	e000ed00 	.word	0xe000ed00

0801177c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801178a:	4618      	mov	r0, r3
 801178c:	f7fb ff6b 	bl	800d666 <USBD_LL_Resume>
}
 8011790:	bf00      	nop
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	460b      	mov	r3, r1
 80117a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117aa:	78fa      	ldrb	r2, [r7, #3]
 80117ac:	4611      	mov	r1, r2
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fb ff91 	bl	800d6d6 <USBD_LL_IsoOUTIncomplete>
}
 80117b4:	bf00      	nop
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	460b      	mov	r3, r1
 80117c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117ce:	78fa      	ldrb	r2, [r7, #3]
 80117d0:	4611      	mov	r1, r2
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7fb ff72 	bl	800d6bc <USBD_LL_IsoINIncomplete>
}
 80117d8:	bf00      	nop
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fb ff7e 	bl	800d6f0 <USBD_LL_DevConnected>
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801180a:	4618      	mov	r0, r3
 801180c:	f7fb ff7b 	bl	800d706 <USBD_LL_DevDisconnected>
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d13c      	bne.n	80118a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011828:	4a20      	ldr	r2, [pc, #128]	; (80118ac <USBD_LL_Init+0x94>)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4a1e      	ldr	r2, [pc, #120]	; (80118ac <USBD_LL_Init+0x94>)
 8011834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011838:	4b1c      	ldr	r3, [pc, #112]	; (80118ac <USBD_LL_Init+0x94>)
 801183a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801183e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011840:	4b1a      	ldr	r3, [pc, #104]	; (80118ac <USBD_LL_Init+0x94>)
 8011842:	2204      	movs	r2, #4
 8011844:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011846:	4b19      	ldr	r3, [pc, #100]	; (80118ac <USBD_LL_Init+0x94>)
 8011848:	2202      	movs	r2, #2
 801184a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801184c:	4b17      	ldr	r3, [pc, #92]	; (80118ac <USBD_LL_Init+0x94>)
 801184e:	2200      	movs	r2, #0
 8011850:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011852:	4b16      	ldr	r3, [pc, #88]	; (80118ac <USBD_LL_Init+0x94>)
 8011854:	2202      	movs	r2, #2
 8011856:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011858:	4b14      	ldr	r3, [pc, #80]	; (80118ac <USBD_LL_Init+0x94>)
 801185a:	2200      	movs	r2, #0
 801185c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801185e:	4b13      	ldr	r3, [pc, #76]	; (80118ac <USBD_LL_Init+0x94>)
 8011860:	2200      	movs	r2, #0
 8011862:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011864:	4b11      	ldr	r3, [pc, #68]	; (80118ac <USBD_LL_Init+0x94>)
 8011866:	2200      	movs	r2, #0
 8011868:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801186a:	4b10      	ldr	r3, [pc, #64]	; (80118ac <USBD_LL_Init+0x94>)
 801186c:	2200      	movs	r2, #0
 801186e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011870:	4b0e      	ldr	r3, [pc, #56]	; (80118ac <USBD_LL_Init+0x94>)
 8011872:	2200      	movs	r2, #0
 8011874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011876:	480d      	ldr	r0, [pc, #52]	; (80118ac <USBD_LL_Init+0x94>)
 8011878:	f7f6 ff86 	bl	8008788 <HAL_PCD_Init>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d001      	beq.n	8011886 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011882:	f7f1 fc31 	bl	80030e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011886:	2180      	movs	r1, #128	; 0x80
 8011888:	4808      	ldr	r0, [pc, #32]	; (80118ac <USBD_LL_Init+0x94>)
 801188a:	f7f8 f8ea 	bl	8009a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801188e:	2240      	movs	r2, #64	; 0x40
 8011890:	2100      	movs	r1, #0
 8011892:	4806      	ldr	r0, [pc, #24]	; (80118ac <USBD_LL_Init+0x94>)
 8011894:	f7f8 f89e 	bl	80099d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011898:	2280      	movs	r2, #128	; 0x80
 801189a:	2101      	movs	r1, #1
 801189c:	4803      	ldr	r0, [pc, #12]	; (80118ac <USBD_LL_Init+0x94>)
 801189e:	f7f8 f899 	bl	80099d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118a2:	2300      	movs	r3, #0
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	200066f8 	.word	0x200066f8

080118b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118b8:	2300      	movs	r3, #0
 80118ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118bc:	2300      	movs	r3, #0
 80118be:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7f7 f87b 	bl	80089c2 <HAL_PCD_Start>
 80118cc:	4603      	mov	r3, r0
 80118ce:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80118d0:	7bfb      	ldrb	r3, [r7, #15]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f000 f92e 	bl	8011b34 <USBD_Get_USB_Status>
 80118d8:	4603      	mov	r3, r0
 80118da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80118dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	4608      	mov	r0, r1
 80118f0:	4611      	mov	r1, r2
 80118f2:	461a      	mov	r2, r3
 80118f4:	4603      	mov	r3, r0
 80118f6:	70fb      	strb	r3, [r7, #3]
 80118f8:	460b      	mov	r3, r1
 80118fa:	70bb      	strb	r3, [r7, #2]
 80118fc:	4613      	mov	r3, r2
 80118fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011900:	2300      	movs	r3, #0
 8011902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801190e:	78bb      	ldrb	r3, [r7, #2]
 8011910:	883a      	ldrh	r2, [r7, #0]
 8011912:	78f9      	ldrb	r1, [r7, #3]
 8011914:	f7f7 fc50 	bl	80091b8 <HAL_PCD_EP_Open>
 8011918:	4603      	mov	r3, r0
 801191a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	4618      	mov	r0, r3
 8011920:	f000 f908 	bl	8011b34 <USBD_Get_USB_Status>
 8011924:	4603      	mov	r3, r0
 8011926:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011928:	7bbb      	ldrb	r3, [r7, #14]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b084      	sub	sp, #16
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
 801193a:	460b      	mov	r3, r1
 801193c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801193e:	2300      	movs	r3, #0
 8011940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801194c:	78fa      	ldrb	r2, [r7, #3]
 801194e:	4611      	mov	r1, r2
 8011950:	4618      	mov	r0, r3
 8011952:	f7f7 fc99 	bl	8009288 <HAL_PCD_EP_Close>
 8011956:	4603      	mov	r3, r0
 8011958:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801195a:	7bfb      	ldrb	r3, [r7, #15]
 801195c:	4618      	mov	r0, r3
 801195e:	f000 f8e9 	bl	8011b34 <USBD_Get_USB_Status>
 8011962:	4603      	mov	r3, r0
 8011964:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8011966:	7bbb      	ldrb	r3, [r7, #14]
}
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011980:	2300      	movs	r3, #0
 8011982:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801198a:	78fa      	ldrb	r2, [r7, #3]
 801198c:	4611      	mov	r1, r2
 801198e:	4618      	mov	r0, r3
 8011990:	f7f7 fd71 	bl	8009476 <HAL_PCD_EP_SetStall>
 8011994:	4603      	mov	r3, r0
 8011996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011998:	7bfb      	ldrb	r3, [r7, #15]
 801199a:	4618      	mov	r0, r3
 801199c:	f000 f8ca 	bl	8011b34 <USBD_Get_USB_Status>
 80119a0:	4603      	mov	r3, r0
 80119a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80119a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b084      	sub	sp, #16
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	460b      	mov	r3, r1
 80119b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119ba:	2300      	movs	r3, #0
 80119bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80119c8:	78fa      	ldrb	r2, [r7, #3]
 80119ca:	4611      	mov	r1, r2
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7f7 fdb6 	bl	800953e <HAL_PCD_EP_ClrStall>
 80119d2:	4603      	mov	r3, r0
 80119d4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
 80119d8:	4618      	mov	r0, r3
 80119da:	f000 f8ab 	bl	8011b34 <USBD_Get_USB_Status>
 80119de:	4603      	mov	r3, r0
 80119e0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80119e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b085      	sub	sp, #20
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	460b      	mov	r3, r1
 80119f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80119fe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	da0b      	bge.n	8011a20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8011a08:	78fb      	ldrb	r3, [r7, #3]
 8011a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a0e:	68f9      	ldr	r1, [r7, #12]
 8011a10:	4613      	mov	r3, r2
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	1a9b      	subs	r3, r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	440b      	add	r3, r1
 8011a1a:	333e      	adds	r3, #62	; 0x3e
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	e00b      	b.n	8011a38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8011a20:	78fb      	ldrb	r3, [r7, #3]
 8011a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a26:	68f9      	ldr	r1, [r7, #12]
 8011a28:	4613      	mov	r3, r2
 8011a2a:	00db      	lsls	r3, r3, #3
 8011a2c:	1a9b      	subs	r3, r3, r2
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	440b      	add	r3, r1
 8011a32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3714      	adds	r7, #20
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a54:	2300      	movs	r3, #0
 8011a56:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011a5e:	78fa      	ldrb	r2, [r7, #3]
 8011a60:	4611      	mov	r1, r2
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7f7 fb83 	bl	800916e <HAL_PCD_SetAddress>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a6c:	7bfb      	ldrb	r3, [r7, #15]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f000 f860 	bl	8011b34 <USBD_Get_USB_Status>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	460b      	mov	r3, r1
 8011a90:	72fb      	strb	r3, [r7, #11]
 8011a92:	4613      	mov	r3, r2
 8011a94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a96:	2300      	movs	r3, #0
 8011a98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011aa4:	893b      	ldrh	r3, [r7, #8]
 8011aa6:	7af9      	ldrb	r1, [r7, #11]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	f7f7 fc9a 	bl	80093e2 <HAL_PCD_EP_Transmit>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8011ab2:	7dfb      	ldrb	r3, [r7, #23]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f000 f83d 	bl	8011b34 <USBD_Get_USB_Status>
 8011aba:	4603      	mov	r3, r0
 8011abc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8011abe:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	607a      	str	r2, [r7, #4]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	72fb      	strb	r3, [r7, #11]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011aea:	893b      	ldrh	r3, [r7, #8]
 8011aec:	7af9      	ldrb	r1, [r7, #11]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	f7f7 fc14 	bl	800931c <HAL_PCD_EP_Receive>
 8011af4:	4603      	mov	r3, r0
 8011af6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 f81a 	bl	8011b34 <USBD_Get_USB_Status>
 8011b00:	4603      	mov	r3, r0
 8011b02:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8011b04:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011b20:	78fa      	ldrb	r2, [r7, #3]
 8011b22:	4611      	mov	r1, r2
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f7 fc44 	bl	80093b2 <HAL_PCD_EP_GetRxCount>
 8011b2a:	4603      	mov	r3, r0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b085      	sub	sp, #20
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b42:	79fb      	ldrb	r3, [r7, #7]
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	d817      	bhi.n	8011b78 <USBD_Get_USB_Status+0x44>
 8011b48:	a201      	add	r2, pc, #4	; (adr r2, 8011b50 <USBD_Get_USB_Status+0x1c>)
 8011b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b4e:	bf00      	nop
 8011b50:	08011b61 	.word	0x08011b61
 8011b54:	08011b67 	.word	0x08011b67
 8011b58:	08011b6d 	.word	0x08011b6d
 8011b5c:	08011b73 	.word	0x08011b73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73fb      	strb	r3, [r7, #15]
    break;
 8011b64:	e00b      	b.n	8011b7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b66:	2302      	movs	r3, #2
 8011b68:	73fb      	strb	r3, [r7, #15]
    break;
 8011b6a:	e008      	b.n	8011b7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b70:	e005      	b.n	8011b7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b72:	2302      	movs	r3, #2
 8011b74:	73fb      	strb	r3, [r7, #15]
    break;
 8011b76:	e002      	b.n	8011b7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011b78:	2302      	movs	r3, #2
 8011b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b7c:	bf00      	nop
  }
  return usb_status;
 8011b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <__errno>:
 8011b8c:	4b01      	ldr	r3, [pc, #4]	; (8011b94 <__errno+0x8>)
 8011b8e:	6818      	ldr	r0, [r3, #0]
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	20000e34 	.word	0x20000e34

08011b98 <__libc_init_array>:
 8011b98:	b570      	push	{r4, r5, r6, lr}
 8011b9a:	4e0d      	ldr	r6, [pc, #52]	; (8011bd0 <__libc_init_array+0x38>)
 8011b9c:	4c0d      	ldr	r4, [pc, #52]	; (8011bd4 <__libc_init_array+0x3c>)
 8011b9e:	1ba4      	subs	r4, r4, r6
 8011ba0:	10a4      	asrs	r4, r4, #2
 8011ba2:	2500      	movs	r5, #0
 8011ba4:	42a5      	cmp	r5, r4
 8011ba6:	d109      	bne.n	8011bbc <__libc_init_array+0x24>
 8011ba8:	4e0b      	ldr	r6, [pc, #44]	; (8011bd8 <__libc_init_array+0x40>)
 8011baa:	4c0c      	ldr	r4, [pc, #48]	; (8011bdc <__libc_init_array+0x44>)
 8011bac:	f005 fe82 	bl	80178b4 <_init>
 8011bb0:	1ba4      	subs	r4, r4, r6
 8011bb2:	10a4      	asrs	r4, r4, #2
 8011bb4:	2500      	movs	r5, #0
 8011bb6:	42a5      	cmp	r5, r4
 8011bb8:	d105      	bne.n	8011bc6 <__libc_init_array+0x2e>
 8011bba:	bd70      	pop	{r4, r5, r6, pc}
 8011bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bc0:	4798      	blx	r3
 8011bc2:	3501      	adds	r5, #1
 8011bc4:	e7ee      	b.n	8011ba4 <__libc_init_array+0xc>
 8011bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bca:	4798      	blx	r3
 8011bcc:	3501      	adds	r5, #1
 8011bce:	e7f2      	b.n	8011bb6 <__libc_init_array+0x1e>
 8011bd0:	08018330 	.word	0x08018330
 8011bd4:	08018330 	.word	0x08018330
 8011bd8:	08018330 	.word	0x08018330
 8011bdc:	08018334 	.word	0x08018334

08011be0 <malloc>:
 8011be0:	4b02      	ldr	r3, [pc, #8]	; (8011bec <malloc+0xc>)
 8011be2:	4601      	mov	r1, r0
 8011be4:	6818      	ldr	r0, [r3, #0]
 8011be6:	f000 b885 	b.w	8011cf4 <_malloc_r>
 8011bea:	bf00      	nop
 8011bec:	20000e34 	.word	0x20000e34

08011bf0 <free>:
 8011bf0:	4b02      	ldr	r3, [pc, #8]	; (8011bfc <free+0xc>)
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6818      	ldr	r0, [r3, #0]
 8011bf6:	f000 b82f 	b.w	8011c58 <_free_r>
 8011bfa:	bf00      	nop
 8011bfc:	20000e34 	.word	0x20000e34

08011c00 <memcpy>:
 8011c00:	b510      	push	{r4, lr}
 8011c02:	1e43      	subs	r3, r0, #1
 8011c04:	440a      	add	r2, r1
 8011c06:	4291      	cmp	r1, r2
 8011c08:	d100      	bne.n	8011c0c <memcpy+0xc>
 8011c0a:	bd10      	pop	{r4, pc}
 8011c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c14:	e7f7      	b.n	8011c06 <memcpy+0x6>

08011c16 <memmove>:
 8011c16:	4288      	cmp	r0, r1
 8011c18:	b510      	push	{r4, lr}
 8011c1a:	eb01 0302 	add.w	r3, r1, r2
 8011c1e:	d807      	bhi.n	8011c30 <memmove+0x1a>
 8011c20:	1e42      	subs	r2, r0, #1
 8011c22:	4299      	cmp	r1, r3
 8011c24:	d00a      	beq.n	8011c3c <memmove+0x26>
 8011c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011c2e:	e7f8      	b.n	8011c22 <memmove+0xc>
 8011c30:	4283      	cmp	r3, r0
 8011c32:	d9f5      	bls.n	8011c20 <memmove+0xa>
 8011c34:	1881      	adds	r1, r0, r2
 8011c36:	1ad2      	subs	r2, r2, r3
 8011c38:	42d3      	cmn	r3, r2
 8011c3a:	d100      	bne.n	8011c3e <memmove+0x28>
 8011c3c:	bd10      	pop	{r4, pc}
 8011c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011c46:	e7f7      	b.n	8011c38 <memmove+0x22>

08011c48 <memset>:
 8011c48:	4402      	add	r2, r0
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d100      	bne.n	8011c52 <memset+0xa>
 8011c50:	4770      	bx	lr
 8011c52:	f803 1b01 	strb.w	r1, [r3], #1
 8011c56:	e7f9      	b.n	8011c4c <memset+0x4>

08011c58 <_free_r>:
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	4605      	mov	r5, r0
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	d045      	beq.n	8011cec <_free_r+0x94>
 8011c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c64:	1f0c      	subs	r4, r1, #4
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	bfb8      	it	lt
 8011c6a:	18e4      	addlt	r4, r4, r3
 8011c6c:	f002 ffce 	bl	8014c0c <__malloc_lock>
 8011c70:	4a1f      	ldr	r2, [pc, #124]	; (8011cf0 <_free_r+0x98>)
 8011c72:	6813      	ldr	r3, [r2, #0]
 8011c74:	4610      	mov	r0, r2
 8011c76:	b933      	cbnz	r3, 8011c86 <_free_r+0x2e>
 8011c78:	6063      	str	r3, [r4, #4]
 8011c7a:	6014      	str	r4, [r2, #0]
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c82:	f002 bfc4 	b.w	8014c0e <__malloc_unlock>
 8011c86:	42a3      	cmp	r3, r4
 8011c88:	d90c      	bls.n	8011ca4 <_free_r+0x4c>
 8011c8a:	6821      	ldr	r1, [r4, #0]
 8011c8c:	1862      	adds	r2, r4, r1
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	bf04      	itt	eq
 8011c92:	681a      	ldreq	r2, [r3, #0]
 8011c94:	685b      	ldreq	r3, [r3, #4]
 8011c96:	6063      	str	r3, [r4, #4]
 8011c98:	bf04      	itt	eq
 8011c9a:	1852      	addeq	r2, r2, r1
 8011c9c:	6022      	streq	r2, [r4, #0]
 8011c9e:	6004      	str	r4, [r0, #0]
 8011ca0:	e7ec      	b.n	8011c7c <_free_r+0x24>
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	685a      	ldr	r2, [r3, #4]
 8011ca6:	b10a      	cbz	r2, 8011cac <_free_r+0x54>
 8011ca8:	42a2      	cmp	r2, r4
 8011caa:	d9fa      	bls.n	8011ca2 <_free_r+0x4a>
 8011cac:	6819      	ldr	r1, [r3, #0]
 8011cae:	1858      	adds	r0, r3, r1
 8011cb0:	42a0      	cmp	r0, r4
 8011cb2:	d10b      	bne.n	8011ccc <_free_r+0x74>
 8011cb4:	6820      	ldr	r0, [r4, #0]
 8011cb6:	4401      	add	r1, r0
 8011cb8:	1858      	adds	r0, r3, r1
 8011cba:	4282      	cmp	r2, r0
 8011cbc:	6019      	str	r1, [r3, #0]
 8011cbe:	d1dd      	bne.n	8011c7c <_free_r+0x24>
 8011cc0:	6810      	ldr	r0, [r2, #0]
 8011cc2:	6852      	ldr	r2, [r2, #4]
 8011cc4:	605a      	str	r2, [r3, #4]
 8011cc6:	4401      	add	r1, r0
 8011cc8:	6019      	str	r1, [r3, #0]
 8011cca:	e7d7      	b.n	8011c7c <_free_r+0x24>
 8011ccc:	d902      	bls.n	8011cd4 <_free_r+0x7c>
 8011cce:	230c      	movs	r3, #12
 8011cd0:	602b      	str	r3, [r5, #0]
 8011cd2:	e7d3      	b.n	8011c7c <_free_r+0x24>
 8011cd4:	6820      	ldr	r0, [r4, #0]
 8011cd6:	1821      	adds	r1, r4, r0
 8011cd8:	428a      	cmp	r2, r1
 8011cda:	bf04      	itt	eq
 8011cdc:	6811      	ldreq	r1, [r2, #0]
 8011cde:	6852      	ldreq	r2, [r2, #4]
 8011ce0:	6062      	str	r2, [r4, #4]
 8011ce2:	bf04      	itt	eq
 8011ce4:	1809      	addeq	r1, r1, r0
 8011ce6:	6021      	streq	r1, [r4, #0]
 8011ce8:	605c      	str	r4, [r3, #4]
 8011cea:	e7c7      	b.n	8011c7c <_free_r+0x24>
 8011cec:	bd38      	pop	{r3, r4, r5, pc}
 8011cee:	bf00      	nop
 8011cf0:	200051cc 	.word	0x200051cc

08011cf4 <_malloc_r>:
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	1ccd      	adds	r5, r1, #3
 8011cf8:	f025 0503 	bic.w	r5, r5, #3
 8011cfc:	3508      	adds	r5, #8
 8011cfe:	2d0c      	cmp	r5, #12
 8011d00:	bf38      	it	cc
 8011d02:	250c      	movcc	r5, #12
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	4606      	mov	r6, r0
 8011d08:	db01      	blt.n	8011d0e <_malloc_r+0x1a>
 8011d0a:	42a9      	cmp	r1, r5
 8011d0c:	d903      	bls.n	8011d16 <_malloc_r+0x22>
 8011d0e:	230c      	movs	r3, #12
 8011d10:	6033      	str	r3, [r6, #0]
 8011d12:	2000      	movs	r0, #0
 8011d14:	bd70      	pop	{r4, r5, r6, pc}
 8011d16:	f002 ff79 	bl	8014c0c <__malloc_lock>
 8011d1a:	4a21      	ldr	r2, [pc, #132]	; (8011da0 <_malloc_r+0xac>)
 8011d1c:	6814      	ldr	r4, [r2, #0]
 8011d1e:	4621      	mov	r1, r4
 8011d20:	b991      	cbnz	r1, 8011d48 <_malloc_r+0x54>
 8011d22:	4c20      	ldr	r4, [pc, #128]	; (8011da4 <_malloc_r+0xb0>)
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	b91b      	cbnz	r3, 8011d30 <_malloc_r+0x3c>
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f000 fe7b 	bl	8012a24 <_sbrk_r>
 8011d2e:	6020      	str	r0, [r4, #0]
 8011d30:	4629      	mov	r1, r5
 8011d32:	4630      	mov	r0, r6
 8011d34:	f000 fe76 	bl	8012a24 <_sbrk_r>
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	d124      	bne.n	8011d86 <_malloc_r+0x92>
 8011d3c:	230c      	movs	r3, #12
 8011d3e:	6033      	str	r3, [r6, #0]
 8011d40:	4630      	mov	r0, r6
 8011d42:	f002 ff64 	bl	8014c0e <__malloc_unlock>
 8011d46:	e7e4      	b.n	8011d12 <_malloc_r+0x1e>
 8011d48:	680b      	ldr	r3, [r1, #0]
 8011d4a:	1b5b      	subs	r3, r3, r5
 8011d4c:	d418      	bmi.n	8011d80 <_malloc_r+0x8c>
 8011d4e:	2b0b      	cmp	r3, #11
 8011d50:	d90f      	bls.n	8011d72 <_malloc_r+0x7e>
 8011d52:	600b      	str	r3, [r1, #0]
 8011d54:	50cd      	str	r5, [r1, r3]
 8011d56:	18cc      	adds	r4, r1, r3
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f002 ff58 	bl	8014c0e <__malloc_unlock>
 8011d5e:	f104 000b 	add.w	r0, r4, #11
 8011d62:	1d23      	adds	r3, r4, #4
 8011d64:	f020 0007 	bic.w	r0, r0, #7
 8011d68:	1ac3      	subs	r3, r0, r3
 8011d6a:	d0d3      	beq.n	8011d14 <_malloc_r+0x20>
 8011d6c:	425a      	negs	r2, r3
 8011d6e:	50e2      	str	r2, [r4, r3]
 8011d70:	e7d0      	b.n	8011d14 <_malloc_r+0x20>
 8011d72:	428c      	cmp	r4, r1
 8011d74:	684b      	ldr	r3, [r1, #4]
 8011d76:	bf16      	itet	ne
 8011d78:	6063      	strne	r3, [r4, #4]
 8011d7a:	6013      	streq	r3, [r2, #0]
 8011d7c:	460c      	movne	r4, r1
 8011d7e:	e7eb      	b.n	8011d58 <_malloc_r+0x64>
 8011d80:	460c      	mov	r4, r1
 8011d82:	6849      	ldr	r1, [r1, #4]
 8011d84:	e7cc      	b.n	8011d20 <_malloc_r+0x2c>
 8011d86:	1cc4      	adds	r4, r0, #3
 8011d88:	f024 0403 	bic.w	r4, r4, #3
 8011d8c:	42a0      	cmp	r0, r4
 8011d8e:	d005      	beq.n	8011d9c <_malloc_r+0xa8>
 8011d90:	1a21      	subs	r1, r4, r0
 8011d92:	4630      	mov	r0, r6
 8011d94:	f000 fe46 	bl	8012a24 <_sbrk_r>
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d0cf      	beq.n	8011d3c <_malloc_r+0x48>
 8011d9c:	6025      	str	r5, [r4, #0]
 8011d9e:	e7db      	b.n	8011d58 <_malloc_r+0x64>
 8011da0:	200051cc 	.word	0x200051cc
 8011da4:	200051d0 	.word	0x200051d0

08011da8 <__cvt>:
 8011da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dac:	ec55 4b10 	vmov	r4, r5, d0
 8011db0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011db2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011db6:	2d00      	cmp	r5, #0
 8011db8:	460e      	mov	r6, r1
 8011dba:	4691      	mov	r9, r2
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	bfb8      	it	lt
 8011dc0:	4622      	movlt	r2, r4
 8011dc2:	462b      	mov	r3, r5
 8011dc4:	f027 0720 	bic.w	r7, r7, #32
 8011dc8:	bfbb      	ittet	lt
 8011dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011dce:	461d      	movlt	r5, r3
 8011dd0:	2300      	movge	r3, #0
 8011dd2:	232d      	movlt	r3, #45	; 0x2d
 8011dd4:	bfb8      	it	lt
 8011dd6:	4614      	movlt	r4, r2
 8011dd8:	2f46      	cmp	r7, #70	; 0x46
 8011dda:	700b      	strb	r3, [r1, #0]
 8011ddc:	d004      	beq.n	8011de8 <__cvt+0x40>
 8011dde:	2f45      	cmp	r7, #69	; 0x45
 8011de0:	d100      	bne.n	8011de4 <__cvt+0x3c>
 8011de2:	3601      	adds	r6, #1
 8011de4:	2102      	movs	r1, #2
 8011de6:	e000      	b.n	8011dea <__cvt+0x42>
 8011de8:	2103      	movs	r1, #3
 8011dea:	ab03      	add	r3, sp, #12
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	ab02      	add	r3, sp, #8
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	4632      	mov	r2, r6
 8011df4:	4653      	mov	r3, sl
 8011df6:	ec45 4b10 	vmov	d0, r4, r5
 8011dfa:	f001 fdf5 	bl	80139e8 <_dtoa_r>
 8011dfe:	2f47      	cmp	r7, #71	; 0x47
 8011e00:	4680      	mov	r8, r0
 8011e02:	d102      	bne.n	8011e0a <__cvt+0x62>
 8011e04:	f019 0f01 	tst.w	r9, #1
 8011e08:	d026      	beq.n	8011e58 <__cvt+0xb0>
 8011e0a:	2f46      	cmp	r7, #70	; 0x46
 8011e0c:	eb08 0906 	add.w	r9, r8, r6
 8011e10:	d111      	bne.n	8011e36 <__cvt+0x8e>
 8011e12:	f898 3000 	ldrb.w	r3, [r8]
 8011e16:	2b30      	cmp	r3, #48	; 0x30
 8011e18:	d10a      	bne.n	8011e30 <__cvt+0x88>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	4620      	mov	r0, r4
 8011e20:	4629      	mov	r1, r5
 8011e22:	f7ee fe61 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e26:	b918      	cbnz	r0, 8011e30 <__cvt+0x88>
 8011e28:	f1c6 0601 	rsb	r6, r6, #1
 8011e2c:	f8ca 6000 	str.w	r6, [sl]
 8011e30:	f8da 3000 	ldr.w	r3, [sl]
 8011e34:	4499      	add	r9, r3
 8011e36:	2200      	movs	r2, #0
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	4629      	mov	r1, r5
 8011e3e:	f7ee fe53 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e42:	b938      	cbnz	r0, 8011e54 <__cvt+0xac>
 8011e44:	2230      	movs	r2, #48	; 0x30
 8011e46:	9b03      	ldr	r3, [sp, #12]
 8011e48:	454b      	cmp	r3, r9
 8011e4a:	d205      	bcs.n	8011e58 <__cvt+0xb0>
 8011e4c:	1c59      	adds	r1, r3, #1
 8011e4e:	9103      	str	r1, [sp, #12]
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	e7f8      	b.n	8011e46 <__cvt+0x9e>
 8011e54:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e58:	9b03      	ldr	r3, [sp, #12]
 8011e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e5c:	eba3 0308 	sub.w	r3, r3, r8
 8011e60:	4640      	mov	r0, r8
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	b004      	add	sp, #16
 8011e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011e6a <__exponent>:
 8011e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e6c:	2900      	cmp	r1, #0
 8011e6e:	4604      	mov	r4, r0
 8011e70:	bfba      	itte	lt
 8011e72:	4249      	neglt	r1, r1
 8011e74:	232d      	movlt	r3, #45	; 0x2d
 8011e76:	232b      	movge	r3, #43	; 0x2b
 8011e78:	2909      	cmp	r1, #9
 8011e7a:	f804 2b02 	strb.w	r2, [r4], #2
 8011e7e:	7043      	strb	r3, [r0, #1]
 8011e80:	dd20      	ble.n	8011ec4 <__exponent+0x5a>
 8011e82:	f10d 0307 	add.w	r3, sp, #7
 8011e86:	461f      	mov	r7, r3
 8011e88:	260a      	movs	r6, #10
 8011e8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8011e8e:	fb06 1115 	mls	r1, r6, r5, r1
 8011e92:	3130      	adds	r1, #48	; 0x30
 8011e94:	2d09      	cmp	r5, #9
 8011e96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011e9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	dc09      	bgt.n	8011eb6 <__exponent+0x4c>
 8011ea2:	3130      	adds	r1, #48	; 0x30
 8011ea4:	3b02      	subs	r3, #2
 8011ea6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011eaa:	42bb      	cmp	r3, r7
 8011eac:	4622      	mov	r2, r4
 8011eae:	d304      	bcc.n	8011eba <__exponent+0x50>
 8011eb0:	1a10      	subs	r0, r2, r0
 8011eb2:	b003      	add	sp, #12
 8011eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	e7e7      	b.n	8011e8a <__exponent+0x20>
 8011eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ebe:	f804 2b01 	strb.w	r2, [r4], #1
 8011ec2:	e7f2      	b.n	8011eaa <__exponent+0x40>
 8011ec4:	2330      	movs	r3, #48	; 0x30
 8011ec6:	4419      	add	r1, r3
 8011ec8:	7083      	strb	r3, [r0, #2]
 8011eca:	1d02      	adds	r2, r0, #4
 8011ecc:	70c1      	strb	r1, [r0, #3]
 8011ece:	e7ef      	b.n	8011eb0 <__exponent+0x46>

08011ed0 <_printf_float>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	b08d      	sub	sp, #52	; 0x34
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011edc:	4616      	mov	r6, r2
 8011ede:	461f      	mov	r7, r3
 8011ee0:	4605      	mov	r5, r0
 8011ee2:	f002 fe73 	bl	8014bcc <_localeconv_r>
 8011ee6:	6803      	ldr	r3, [r0, #0]
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7ee f97a 	bl	80001e4 <strlen>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8011ef8:	9005      	str	r0, [sp, #20]
 8011efa:	3307      	adds	r3, #7
 8011efc:	f023 0307 	bic.w	r3, r3, #7
 8011f00:	f103 0208 	add.w	r2, r3, #8
 8011f04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011f08:	f8d4 b000 	ldr.w	fp, [r4]
 8011f0c:	f8c8 2000 	str.w	r2, [r8]
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011f18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011f1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f20:	9307      	str	r3, [sp, #28]
 8011f22:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f26:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2a:	4ba7      	ldr	r3, [pc, #668]	; (80121c8 <_printf_float+0x2f8>)
 8011f2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f30:	f7ee fe0c 	bl	8000b4c <__aeabi_dcmpun>
 8011f34:	bb70      	cbnz	r0, 8011f94 <_printf_float+0xc4>
 8011f36:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3a:	4ba3      	ldr	r3, [pc, #652]	; (80121c8 <_printf_float+0x2f8>)
 8011f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f40:	f7ee fde6 	bl	8000b10 <__aeabi_dcmple>
 8011f44:	bb30      	cbnz	r0, 8011f94 <_printf_float+0xc4>
 8011f46:	2200      	movs	r2, #0
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	f7ee fdd5 	bl	8000afc <__aeabi_dcmplt>
 8011f52:	b110      	cbz	r0, 8011f5a <_printf_float+0x8a>
 8011f54:	232d      	movs	r3, #45	; 0x2d
 8011f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f5a:	4a9c      	ldr	r2, [pc, #624]	; (80121cc <_printf_float+0x2fc>)
 8011f5c:	4b9c      	ldr	r3, [pc, #624]	; (80121d0 <_printf_float+0x300>)
 8011f5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011f62:	bf8c      	ite	hi
 8011f64:	4690      	movhi	r8, r2
 8011f66:	4698      	movls	r8, r3
 8011f68:	2303      	movs	r3, #3
 8011f6a:	f02b 0204 	bic.w	r2, fp, #4
 8011f6e:	6123      	str	r3, [r4, #16]
 8011f70:	6022      	str	r2, [r4, #0]
 8011f72:	f04f 0900 	mov.w	r9, #0
 8011f76:	9700      	str	r7, [sp, #0]
 8011f78:	4633      	mov	r3, r6
 8011f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011f7c:	4621      	mov	r1, r4
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f000 f9e6 	bl	8012350 <_printf_common>
 8011f84:	3001      	adds	r0, #1
 8011f86:	f040 808d 	bne.w	80120a4 <_printf_float+0x1d4>
 8011f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8e:	b00d      	add	sp, #52	; 0x34
 8011f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f94:	4642      	mov	r2, r8
 8011f96:	464b      	mov	r3, r9
 8011f98:	4640      	mov	r0, r8
 8011f9a:	4649      	mov	r1, r9
 8011f9c:	f7ee fdd6 	bl	8000b4c <__aeabi_dcmpun>
 8011fa0:	b110      	cbz	r0, 8011fa8 <_printf_float+0xd8>
 8011fa2:	4a8c      	ldr	r2, [pc, #560]	; (80121d4 <_printf_float+0x304>)
 8011fa4:	4b8c      	ldr	r3, [pc, #560]	; (80121d8 <_printf_float+0x308>)
 8011fa6:	e7da      	b.n	8011f5e <_printf_float+0x8e>
 8011fa8:	6861      	ldr	r1, [r4, #4]
 8011faa:	1c4b      	adds	r3, r1, #1
 8011fac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011fb0:	a80a      	add	r0, sp, #40	; 0x28
 8011fb2:	d13e      	bne.n	8012032 <_printf_float+0x162>
 8011fb4:	2306      	movs	r3, #6
 8011fb6:	6063      	str	r3, [r4, #4]
 8011fb8:	2300      	movs	r3, #0
 8011fba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011fbe:	ab09      	add	r3, sp, #36	; 0x24
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	ec49 8b10 	vmov	d0, r8, r9
 8011fc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011fca:	6022      	str	r2, [r4, #0]
 8011fcc:	f8cd a004 	str.w	sl, [sp, #4]
 8011fd0:	6861      	ldr	r1, [r4, #4]
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f7ff fee8 	bl	8011da8 <__cvt>
 8011fd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011fdc:	2b47      	cmp	r3, #71	; 0x47
 8011fde:	4680      	mov	r8, r0
 8011fe0:	d109      	bne.n	8011ff6 <_printf_float+0x126>
 8011fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fe4:	1cd8      	adds	r0, r3, #3
 8011fe6:	db02      	blt.n	8011fee <_printf_float+0x11e>
 8011fe8:	6862      	ldr	r2, [r4, #4]
 8011fea:	4293      	cmp	r3, r2
 8011fec:	dd47      	ble.n	801207e <_printf_float+0x1ae>
 8011fee:	f1aa 0a02 	sub.w	sl, sl, #2
 8011ff2:	fa5f fa8a 	uxtb.w	sl, sl
 8011ff6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ffc:	d824      	bhi.n	8012048 <_printf_float+0x178>
 8011ffe:	3901      	subs	r1, #1
 8012000:	4652      	mov	r2, sl
 8012002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012006:	9109      	str	r1, [sp, #36]	; 0x24
 8012008:	f7ff ff2f 	bl	8011e6a <__exponent>
 801200c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801200e:	1813      	adds	r3, r2, r0
 8012010:	2a01      	cmp	r2, #1
 8012012:	4681      	mov	r9, r0
 8012014:	6123      	str	r3, [r4, #16]
 8012016:	dc02      	bgt.n	801201e <_printf_float+0x14e>
 8012018:	6822      	ldr	r2, [r4, #0]
 801201a:	07d1      	lsls	r1, r2, #31
 801201c:	d501      	bpl.n	8012022 <_printf_float+0x152>
 801201e:	3301      	adds	r3, #1
 8012020:	6123      	str	r3, [r4, #16]
 8012022:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012026:	2b00      	cmp	r3, #0
 8012028:	d0a5      	beq.n	8011f76 <_printf_float+0xa6>
 801202a:	232d      	movs	r3, #45	; 0x2d
 801202c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012030:	e7a1      	b.n	8011f76 <_printf_float+0xa6>
 8012032:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012036:	f000 8177 	beq.w	8012328 <_printf_float+0x458>
 801203a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801203e:	d1bb      	bne.n	8011fb8 <_printf_float+0xe8>
 8012040:	2900      	cmp	r1, #0
 8012042:	d1b9      	bne.n	8011fb8 <_printf_float+0xe8>
 8012044:	2301      	movs	r3, #1
 8012046:	e7b6      	b.n	8011fb6 <_printf_float+0xe6>
 8012048:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801204c:	d119      	bne.n	8012082 <_printf_float+0x1b2>
 801204e:	2900      	cmp	r1, #0
 8012050:	6863      	ldr	r3, [r4, #4]
 8012052:	dd0c      	ble.n	801206e <_printf_float+0x19e>
 8012054:	6121      	str	r1, [r4, #16]
 8012056:	b913      	cbnz	r3, 801205e <_printf_float+0x18e>
 8012058:	6822      	ldr	r2, [r4, #0]
 801205a:	07d2      	lsls	r2, r2, #31
 801205c:	d502      	bpl.n	8012064 <_printf_float+0x194>
 801205e:	3301      	adds	r3, #1
 8012060:	440b      	add	r3, r1
 8012062:	6123      	str	r3, [r4, #16]
 8012064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012066:	65a3      	str	r3, [r4, #88]	; 0x58
 8012068:	f04f 0900 	mov.w	r9, #0
 801206c:	e7d9      	b.n	8012022 <_printf_float+0x152>
 801206e:	b913      	cbnz	r3, 8012076 <_printf_float+0x1a6>
 8012070:	6822      	ldr	r2, [r4, #0]
 8012072:	07d0      	lsls	r0, r2, #31
 8012074:	d501      	bpl.n	801207a <_printf_float+0x1aa>
 8012076:	3302      	adds	r3, #2
 8012078:	e7f3      	b.n	8012062 <_printf_float+0x192>
 801207a:	2301      	movs	r3, #1
 801207c:	e7f1      	b.n	8012062 <_printf_float+0x192>
 801207e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012082:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012086:	4293      	cmp	r3, r2
 8012088:	db05      	blt.n	8012096 <_printf_float+0x1c6>
 801208a:	6822      	ldr	r2, [r4, #0]
 801208c:	6123      	str	r3, [r4, #16]
 801208e:	07d1      	lsls	r1, r2, #31
 8012090:	d5e8      	bpl.n	8012064 <_printf_float+0x194>
 8012092:	3301      	adds	r3, #1
 8012094:	e7e5      	b.n	8012062 <_printf_float+0x192>
 8012096:	2b00      	cmp	r3, #0
 8012098:	bfd4      	ite	le
 801209a:	f1c3 0302 	rsble	r3, r3, #2
 801209e:	2301      	movgt	r3, #1
 80120a0:	4413      	add	r3, r2
 80120a2:	e7de      	b.n	8012062 <_printf_float+0x192>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	055a      	lsls	r2, r3, #21
 80120a8:	d407      	bmi.n	80120ba <_printf_float+0x1ea>
 80120aa:	6923      	ldr	r3, [r4, #16]
 80120ac:	4642      	mov	r2, r8
 80120ae:	4631      	mov	r1, r6
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b8      	blx	r7
 80120b4:	3001      	adds	r0, #1
 80120b6:	d12b      	bne.n	8012110 <_printf_float+0x240>
 80120b8:	e767      	b.n	8011f8a <_printf_float+0xba>
 80120ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80120be:	f240 80dc 	bls.w	801227a <_printf_float+0x3aa>
 80120c2:	2200      	movs	r2, #0
 80120c4:	2300      	movs	r3, #0
 80120c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80120ca:	f7ee fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80120ce:	2800      	cmp	r0, #0
 80120d0:	d033      	beq.n	801213a <_printf_float+0x26a>
 80120d2:	2301      	movs	r3, #1
 80120d4:	4a41      	ldr	r2, [pc, #260]	; (80121dc <_printf_float+0x30c>)
 80120d6:	4631      	mov	r1, r6
 80120d8:	4628      	mov	r0, r5
 80120da:	47b8      	blx	r7
 80120dc:	3001      	adds	r0, #1
 80120de:	f43f af54 	beq.w	8011f8a <_printf_float+0xba>
 80120e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120e6:	429a      	cmp	r2, r3
 80120e8:	db02      	blt.n	80120f0 <_printf_float+0x220>
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	07d8      	lsls	r0, r3, #31
 80120ee:	d50f      	bpl.n	8012110 <_printf_float+0x240>
 80120f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120f4:	4631      	mov	r1, r6
 80120f6:	4628      	mov	r0, r5
 80120f8:	47b8      	blx	r7
 80120fa:	3001      	adds	r0, #1
 80120fc:	f43f af45 	beq.w	8011f8a <_printf_float+0xba>
 8012100:	f04f 0800 	mov.w	r8, #0
 8012104:	f104 091a 	add.w	r9, r4, #26
 8012108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801210a:	3b01      	subs	r3, #1
 801210c:	4543      	cmp	r3, r8
 801210e:	dc09      	bgt.n	8012124 <_printf_float+0x254>
 8012110:	6823      	ldr	r3, [r4, #0]
 8012112:	079b      	lsls	r3, r3, #30
 8012114:	f100 8103 	bmi.w	801231e <_printf_float+0x44e>
 8012118:	68e0      	ldr	r0, [r4, #12]
 801211a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801211c:	4298      	cmp	r0, r3
 801211e:	bfb8      	it	lt
 8012120:	4618      	movlt	r0, r3
 8012122:	e734      	b.n	8011f8e <_printf_float+0xbe>
 8012124:	2301      	movs	r3, #1
 8012126:	464a      	mov	r2, r9
 8012128:	4631      	mov	r1, r6
 801212a:	4628      	mov	r0, r5
 801212c:	47b8      	blx	r7
 801212e:	3001      	adds	r0, #1
 8012130:	f43f af2b 	beq.w	8011f8a <_printf_float+0xba>
 8012134:	f108 0801 	add.w	r8, r8, #1
 8012138:	e7e6      	b.n	8012108 <_printf_float+0x238>
 801213a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801213c:	2b00      	cmp	r3, #0
 801213e:	dc2b      	bgt.n	8012198 <_printf_float+0x2c8>
 8012140:	2301      	movs	r3, #1
 8012142:	4a26      	ldr	r2, [pc, #152]	; (80121dc <_printf_float+0x30c>)
 8012144:	4631      	mov	r1, r6
 8012146:	4628      	mov	r0, r5
 8012148:	47b8      	blx	r7
 801214a:	3001      	adds	r0, #1
 801214c:	f43f af1d 	beq.w	8011f8a <_printf_float+0xba>
 8012150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012152:	b923      	cbnz	r3, 801215e <_printf_float+0x28e>
 8012154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012156:	b913      	cbnz	r3, 801215e <_printf_float+0x28e>
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	07d9      	lsls	r1, r3, #31
 801215c:	d5d8      	bpl.n	8012110 <_printf_float+0x240>
 801215e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012162:	4631      	mov	r1, r6
 8012164:	4628      	mov	r0, r5
 8012166:	47b8      	blx	r7
 8012168:	3001      	adds	r0, #1
 801216a:	f43f af0e 	beq.w	8011f8a <_printf_float+0xba>
 801216e:	f04f 0900 	mov.w	r9, #0
 8012172:	f104 0a1a 	add.w	sl, r4, #26
 8012176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012178:	425b      	negs	r3, r3
 801217a:	454b      	cmp	r3, r9
 801217c:	dc01      	bgt.n	8012182 <_printf_float+0x2b2>
 801217e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012180:	e794      	b.n	80120ac <_printf_float+0x1dc>
 8012182:	2301      	movs	r3, #1
 8012184:	4652      	mov	r2, sl
 8012186:	4631      	mov	r1, r6
 8012188:	4628      	mov	r0, r5
 801218a:	47b8      	blx	r7
 801218c:	3001      	adds	r0, #1
 801218e:	f43f aefc 	beq.w	8011f8a <_printf_float+0xba>
 8012192:	f109 0901 	add.w	r9, r9, #1
 8012196:	e7ee      	b.n	8012176 <_printf_float+0x2a6>
 8012198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801219a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801219c:	429a      	cmp	r2, r3
 801219e:	bfa8      	it	ge
 80121a0:	461a      	movge	r2, r3
 80121a2:	2a00      	cmp	r2, #0
 80121a4:	4691      	mov	r9, r2
 80121a6:	dd07      	ble.n	80121b8 <_printf_float+0x2e8>
 80121a8:	4613      	mov	r3, r2
 80121aa:	4631      	mov	r1, r6
 80121ac:	4642      	mov	r2, r8
 80121ae:	4628      	mov	r0, r5
 80121b0:	47b8      	blx	r7
 80121b2:	3001      	adds	r0, #1
 80121b4:	f43f aee9 	beq.w	8011f8a <_printf_float+0xba>
 80121b8:	f104 031a 	add.w	r3, r4, #26
 80121bc:	f04f 0b00 	mov.w	fp, #0
 80121c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121c4:	9306      	str	r3, [sp, #24]
 80121c6:	e015      	b.n	80121f4 <_printf_float+0x324>
 80121c8:	7fefffff 	.word	0x7fefffff
 80121cc:	08017dd8 	.word	0x08017dd8
 80121d0:	08017dd4 	.word	0x08017dd4
 80121d4:	08017de0 	.word	0x08017de0
 80121d8:	08017ddc 	.word	0x08017ddc
 80121dc:	08017f9b 	.word	0x08017f9b
 80121e0:	2301      	movs	r3, #1
 80121e2:	9a06      	ldr	r2, [sp, #24]
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	f43f aecd 	beq.w	8011f8a <_printf_float+0xba>
 80121f0:	f10b 0b01 	add.w	fp, fp, #1
 80121f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80121f8:	ebaa 0309 	sub.w	r3, sl, r9
 80121fc:	455b      	cmp	r3, fp
 80121fe:	dcef      	bgt.n	80121e0 <_printf_float+0x310>
 8012200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012204:	429a      	cmp	r2, r3
 8012206:	44d0      	add	r8, sl
 8012208:	db15      	blt.n	8012236 <_printf_float+0x366>
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	07da      	lsls	r2, r3, #31
 801220e:	d412      	bmi.n	8012236 <_printf_float+0x366>
 8012210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012214:	eba3 020a 	sub.w	r2, r3, sl
 8012218:	eba3 0a01 	sub.w	sl, r3, r1
 801221c:	4592      	cmp	sl, r2
 801221e:	bfa8      	it	ge
 8012220:	4692      	movge	sl, r2
 8012222:	f1ba 0f00 	cmp.w	sl, #0
 8012226:	dc0e      	bgt.n	8012246 <_printf_float+0x376>
 8012228:	f04f 0800 	mov.w	r8, #0
 801222c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012230:	f104 091a 	add.w	r9, r4, #26
 8012234:	e019      	b.n	801226a <_printf_float+0x39a>
 8012236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801223a:	4631      	mov	r1, r6
 801223c:	4628      	mov	r0, r5
 801223e:	47b8      	blx	r7
 8012240:	3001      	adds	r0, #1
 8012242:	d1e5      	bne.n	8012210 <_printf_float+0x340>
 8012244:	e6a1      	b.n	8011f8a <_printf_float+0xba>
 8012246:	4653      	mov	r3, sl
 8012248:	4642      	mov	r2, r8
 801224a:	4631      	mov	r1, r6
 801224c:	4628      	mov	r0, r5
 801224e:	47b8      	blx	r7
 8012250:	3001      	adds	r0, #1
 8012252:	d1e9      	bne.n	8012228 <_printf_float+0x358>
 8012254:	e699      	b.n	8011f8a <_printf_float+0xba>
 8012256:	2301      	movs	r3, #1
 8012258:	464a      	mov	r2, r9
 801225a:	4631      	mov	r1, r6
 801225c:	4628      	mov	r0, r5
 801225e:	47b8      	blx	r7
 8012260:	3001      	adds	r0, #1
 8012262:	f43f ae92 	beq.w	8011f8a <_printf_float+0xba>
 8012266:	f108 0801 	add.w	r8, r8, #1
 801226a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801226e:	1a9b      	subs	r3, r3, r2
 8012270:	eba3 030a 	sub.w	r3, r3, sl
 8012274:	4543      	cmp	r3, r8
 8012276:	dcee      	bgt.n	8012256 <_printf_float+0x386>
 8012278:	e74a      	b.n	8012110 <_printf_float+0x240>
 801227a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801227c:	2a01      	cmp	r2, #1
 801227e:	dc01      	bgt.n	8012284 <_printf_float+0x3b4>
 8012280:	07db      	lsls	r3, r3, #31
 8012282:	d53a      	bpl.n	80122fa <_printf_float+0x42a>
 8012284:	2301      	movs	r3, #1
 8012286:	4642      	mov	r2, r8
 8012288:	4631      	mov	r1, r6
 801228a:	4628      	mov	r0, r5
 801228c:	47b8      	blx	r7
 801228e:	3001      	adds	r0, #1
 8012290:	f43f ae7b 	beq.w	8011f8a <_printf_float+0xba>
 8012294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012298:	4631      	mov	r1, r6
 801229a:	4628      	mov	r0, r5
 801229c:	47b8      	blx	r7
 801229e:	3001      	adds	r0, #1
 80122a0:	f108 0801 	add.w	r8, r8, #1
 80122a4:	f43f ae71 	beq.w	8011f8a <_printf_float+0xba>
 80122a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122aa:	2200      	movs	r2, #0
 80122ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80122b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122b4:	2300      	movs	r3, #0
 80122b6:	f7ee fc17 	bl	8000ae8 <__aeabi_dcmpeq>
 80122ba:	b9c8      	cbnz	r0, 80122f0 <_printf_float+0x420>
 80122bc:	4653      	mov	r3, sl
 80122be:	4642      	mov	r2, r8
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	47b8      	blx	r7
 80122c6:	3001      	adds	r0, #1
 80122c8:	d10e      	bne.n	80122e8 <_printf_float+0x418>
 80122ca:	e65e      	b.n	8011f8a <_printf_float+0xba>
 80122cc:	2301      	movs	r3, #1
 80122ce:	4652      	mov	r2, sl
 80122d0:	4631      	mov	r1, r6
 80122d2:	4628      	mov	r0, r5
 80122d4:	47b8      	blx	r7
 80122d6:	3001      	adds	r0, #1
 80122d8:	f43f ae57 	beq.w	8011f8a <_printf_float+0xba>
 80122dc:	f108 0801 	add.w	r8, r8, #1
 80122e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122e2:	3b01      	subs	r3, #1
 80122e4:	4543      	cmp	r3, r8
 80122e6:	dcf1      	bgt.n	80122cc <_printf_float+0x3fc>
 80122e8:	464b      	mov	r3, r9
 80122ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80122ee:	e6de      	b.n	80120ae <_printf_float+0x1de>
 80122f0:	f04f 0800 	mov.w	r8, #0
 80122f4:	f104 0a1a 	add.w	sl, r4, #26
 80122f8:	e7f2      	b.n	80122e0 <_printf_float+0x410>
 80122fa:	2301      	movs	r3, #1
 80122fc:	e7df      	b.n	80122be <_printf_float+0x3ee>
 80122fe:	2301      	movs	r3, #1
 8012300:	464a      	mov	r2, r9
 8012302:	4631      	mov	r1, r6
 8012304:	4628      	mov	r0, r5
 8012306:	47b8      	blx	r7
 8012308:	3001      	adds	r0, #1
 801230a:	f43f ae3e 	beq.w	8011f8a <_printf_float+0xba>
 801230e:	f108 0801 	add.w	r8, r8, #1
 8012312:	68e3      	ldr	r3, [r4, #12]
 8012314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012316:	1a9b      	subs	r3, r3, r2
 8012318:	4543      	cmp	r3, r8
 801231a:	dcf0      	bgt.n	80122fe <_printf_float+0x42e>
 801231c:	e6fc      	b.n	8012118 <_printf_float+0x248>
 801231e:	f04f 0800 	mov.w	r8, #0
 8012322:	f104 0919 	add.w	r9, r4, #25
 8012326:	e7f4      	b.n	8012312 <_printf_float+0x442>
 8012328:	2900      	cmp	r1, #0
 801232a:	f43f ae8b 	beq.w	8012044 <_printf_float+0x174>
 801232e:	2300      	movs	r3, #0
 8012330:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012334:	ab09      	add	r3, sp, #36	; 0x24
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	ec49 8b10 	vmov	d0, r8, r9
 801233c:	6022      	str	r2, [r4, #0]
 801233e:	f8cd a004 	str.w	sl, [sp, #4]
 8012342:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012346:	4628      	mov	r0, r5
 8012348:	f7ff fd2e 	bl	8011da8 <__cvt>
 801234c:	4680      	mov	r8, r0
 801234e:	e648      	b.n	8011fe2 <_printf_float+0x112>

08012350 <_printf_common>:
 8012350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012354:	4691      	mov	r9, r2
 8012356:	461f      	mov	r7, r3
 8012358:	688a      	ldr	r2, [r1, #8]
 801235a:	690b      	ldr	r3, [r1, #16]
 801235c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012360:	4293      	cmp	r3, r2
 8012362:	bfb8      	it	lt
 8012364:	4613      	movlt	r3, r2
 8012366:	f8c9 3000 	str.w	r3, [r9]
 801236a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801236e:	4606      	mov	r6, r0
 8012370:	460c      	mov	r4, r1
 8012372:	b112      	cbz	r2, 801237a <_printf_common+0x2a>
 8012374:	3301      	adds	r3, #1
 8012376:	f8c9 3000 	str.w	r3, [r9]
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	0699      	lsls	r1, r3, #26
 801237e:	bf42      	ittt	mi
 8012380:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012384:	3302      	addmi	r3, #2
 8012386:	f8c9 3000 	strmi.w	r3, [r9]
 801238a:	6825      	ldr	r5, [r4, #0]
 801238c:	f015 0506 	ands.w	r5, r5, #6
 8012390:	d107      	bne.n	80123a2 <_printf_common+0x52>
 8012392:	f104 0a19 	add.w	sl, r4, #25
 8012396:	68e3      	ldr	r3, [r4, #12]
 8012398:	f8d9 2000 	ldr.w	r2, [r9]
 801239c:	1a9b      	subs	r3, r3, r2
 801239e:	42ab      	cmp	r3, r5
 80123a0:	dc28      	bgt.n	80123f4 <_printf_common+0xa4>
 80123a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80123a6:	6822      	ldr	r2, [r4, #0]
 80123a8:	3300      	adds	r3, #0
 80123aa:	bf18      	it	ne
 80123ac:	2301      	movne	r3, #1
 80123ae:	0692      	lsls	r2, r2, #26
 80123b0:	d42d      	bmi.n	801240e <_printf_common+0xbe>
 80123b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123b6:	4639      	mov	r1, r7
 80123b8:	4630      	mov	r0, r6
 80123ba:	47c0      	blx	r8
 80123bc:	3001      	adds	r0, #1
 80123be:	d020      	beq.n	8012402 <_printf_common+0xb2>
 80123c0:	6823      	ldr	r3, [r4, #0]
 80123c2:	68e5      	ldr	r5, [r4, #12]
 80123c4:	f8d9 2000 	ldr.w	r2, [r9]
 80123c8:	f003 0306 	and.w	r3, r3, #6
 80123cc:	2b04      	cmp	r3, #4
 80123ce:	bf08      	it	eq
 80123d0:	1aad      	subeq	r5, r5, r2
 80123d2:	68a3      	ldr	r3, [r4, #8]
 80123d4:	6922      	ldr	r2, [r4, #16]
 80123d6:	bf0c      	ite	eq
 80123d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123dc:	2500      	movne	r5, #0
 80123de:	4293      	cmp	r3, r2
 80123e0:	bfc4      	itt	gt
 80123e2:	1a9b      	subgt	r3, r3, r2
 80123e4:	18ed      	addgt	r5, r5, r3
 80123e6:	f04f 0900 	mov.w	r9, #0
 80123ea:	341a      	adds	r4, #26
 80123ec:	454d      	cmp	r5, r9
 80123ee:	d11a      	bne.n	8012426 <_printf_common+0xd6>
 80123f0:	2000      	movs	r0, #0
 80123f2:	e008      	b.n	8012406 <_printf_common+0xb6>
 80123f4:	2301      	movs	r3, #1
 80123f6:	4652      	mov	r2, sl
 80123f8:	4639      	mov	r1, r7
 80123fa:	4630      	mov	r0, r6
 80123fc:	47c0      	blx	r8
 80123fe:	3001      	adds	r0, #1
 8012400:	d103      	bne.n	801240a <_printf_common+0xba>
 8012402:	f04f 30ff 	mov.w	r0, #4294967295
 8012406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801240a:	3501      	adds	r5, #1
 801240c:	e7c3      	b.n	8012396 <_printf_common+0x46>
 801240e:	18e1      	adds	r1, r4, r3
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	2030      	movs	r0, #48	; 0x30
 8012414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012418:	4422      	add	r2, r4
 801241a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801241e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012422:	3302      	adds	r3, #2
 8012424:	e7c5      	b.n	80123b2 <_printf_common+0x62>
 8012426:	2301      	movs	r3, #1
 8012428:	4622      	mov	r2, r4
 801242a:	4639      	mov	r1, r7
 801242c:	4630      	mov	r0, r6
 801242e:	47c0      	blx	r8
 8012430:	3001      	adds	r0, #1
 8012432:	d0e6      	beq.n	8012402 <_printf_common+0xb2>
 8012434:	f109 0901 	add.w	r9, r9, #1
 8012438:	e7d8      	b.n	80123ec <_printf_common+0x9c>
	...

0801243c <_printf_i>:
 801243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012440:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012444:	460c      	mov	r4, r1
 8012446:	7e09      	ldrb	r1, [r1, #24]
 8012448:	b085      	sub	sp, #20
 801244a:	296e      	cmp	r1, #110	; 0x6e
 801244c:	4617      	mov	r7, r2
 801244e:	4606      	mov	r6, r0
 8012450:	4698      	mov	r8, r3
 8012452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012454:	f000 80b3 	beq.w	80125be <_printf_i+0x182>
 8012458:	d822      	bhi.n	80124a0 <_printf_i+0x64>
 801245a:	2963      	cmp	r1, #99	; 0x63
 801245c:	d036      	beq.n	80124cc <_printf_i+0x90>
 801245e:	d80a      	bhi.n	8012476 <_printf_i+0x3a>
 8012460:	2900      	cmp	r1, #0
 8012462:	f000 80b9 	beq.w	80125d8 <_printf_i+0x19c>
 8012466:	2958      	cmp	r1, #88	; 0x58
 8012468:	f000 8083 	beq.w	8012572 <_printf_i+0x136>
 801246c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012470:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012474:	e032      	b.n	80124dc <_printf_i+0xa0>
 8012476:	2964      	cmp	r1, #100	; 0x64
 8012478:	d001      	beq.n	801247e <_printf_i+0x42>
 801247a:	2969      	cmp	r1, #105	; 0x69
 801247c:	d1f6      	bne.n	801246c <_printf_i+0x30>
 801247e:	6820      	ldr	r0, [r4, #0]
 8012480:	6813      	ldr	r3, [r2, #0]
 8012482:	0605      	lsls	r5, r0, #24
 8012484:	f103 0104 	add.w	r1, r3, #4
 8012488:	d52a      	bpl.n	80124e0 <_printf_i+0xa4>
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	6011      	str	r1, [r2, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	da03      	bge.n	801249a <_printf_i+0x5e>
 8012492:	222d      	movs	r2, #45	; 0x2d
 8012494:	425b      	negs	r3, r3
 8012496:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801249a:	486f      	ldr	r0, [pc, #444]	; (8012658 <_printf_i+0x21c>)
 801249c:	220a      	movs	r2, #10
 801249e:	e039      	b.n	8012514 <_printf_i+0xd8>
 80124a0:	2973      	cmp	r1, #115	; 0x73
 80124a2:	f000 809d 	beq.w	80125e0 <_printf_i+0x1a4>
 80124a6:	d808      	bhi.n	80124ba <_printf_i+0x7e>
 80124a8:	296f      	cmp	r1, #111	; 0x6f
 80124aa:	d020      	beq.n	80124ee <_printf_i+0xb2>
 80124ac:	2970      	cmp	r1, #112	; 0x70
 80124ae:	d1dd      	bne.n	801246c <_printf_i+0x30>
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	f043 0320 	orr.w	r3, r3, #32
 80124b6:	6023      	str	r3, [r4, #0]
 80124b8:	e003      	b.n	80124c2 <_printf_i+0x86>
 80124ba:	2975      	cmp	r1, #117	; 0x75
 80124bc:	d017      	beq.n	80124ee <_printf_i+0xb2>
 80124be:	2978      	cmp	r1, #120	; 0x78
 80124c0:	d1d4      	bne.n	801246c <_printf_i+0x30>
 80124c2:	2378      	movs	r3, #120	; 0x78
 80124c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124c8:	4864      	ldr	r0, [pc, #400]	; (801265c <_printf_i+0x220>)
 80124ca:	e055      	b.n	8012578 <_printf_i+0x13c>
 80124cc:	6813      	ldr	r3, [r2, #0]
 80124ce:	1d19      	adds	r1, r3, #4
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6011      	str	r1, [r2, #0]
 80124d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124dc:	2301      	movs	r3, #1
 80124de:	e08c      	b.n	80125fa <_printf_i+0x1be>
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6011      	str	r1, [r2, #0]
 80124e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124e8:	bf18      	it	ne
 80124ea:	b21b      	sxthne	r3, r3
 80124ec:	e7cf      	b.n	801248e <_printf_i+0x52>
 80124ee:	6813      	ldr	r3, [r2, #0]
 80124f0:	6825      	ldr	r5, [r4, #0]
 80124f2:	1d18      	adds	r0, r3, #4
 80124f4:	6010      	str	r0, [r2, #0]
 80124f6:	0628      	lsls	r0, r5, #24
 80124f8:	d501      	bpl.n	80124fe <_printf_i+0xc2>
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	e002      	b.n	8012504 <_printf_i+0xc8>
 80124fe:	0668      	lsls	r0, r5, #25
 8012500:	d5fb      	bpl.n	80124fa <_printf_i+0xbe>
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	4854      	ldr	r0, [pc, #336]	; (8012658 <_printf_i+0x21c>)
 8012506:	296f      	cmp	r1, #111	; 0x6f
 8012508:	bf14      	ite	ne
 801250a:	220a      	movne	r2, #10
 801250c:	2208      	moveq	r2, #8
 801250e:	2100      	movs	r1, #0
 8012510:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012514:	6865      	ldr	r5, [r4, #4]
 8012516:	60a5      	str	r5, [r4, #8]
 8012518:	2d00      	cmp	r5, #0
 801251a:	f2c0 8095 	blt.w	8012648 <_printf_i+0x20c>
 801251e:	6821      	ldr	r1, [r4, #0]
 8012520:	f021 0104 	bic.w	r1, r1, #4
 8012524:	6021      	str	r1, [r4, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d13d      	bne.n	80125a6 <_printf_i+0x16a>
 801252a:	2d00      	cmp	r5, #0
 801252c:	f040 808e 	bne.w	801264c <_printf_i+0x210>
 8012530:	4665      	mov	r5, ip
 8012532:	2a08      	cmp	r2, #8
 8012534:	d10b      	bne.n	801254e <_printf_i+0x112>
 8012536:	6823      	ldr	r3, [r4, #0]
 8012538:	07db      	lsls	r3, r3, #31
 801253a:	d508      	bpl.n	801254e <_printf_i+0x112>
 801253c:	6923      	ldr	r3, [r4, #16]
 801253e:	6862      	ldr	r2, [r4, #4]
 8012540:	429a      	cmp	r2, r3
 8012542:	bfde      	ittt	le
 8012544:	2330      	movle	r3, #48	; 0x30
 8012546:	f805 3c01 	strble.w	r3, [r5, #-1]
 801254a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801254e:	ebac 0305 	sub.w	r3, ip, r5
 8012552:	6123      	str	r3, [r4, #16]
 8012554:	f8cd 8000 	str.w	r8, [sp]
 8012558:	463b      	mov	r3, r7
 801255a:	aa03      	add	r2, sp, #12
 801255c:	4621      	mov	r1, r4
 801255e:	4630      	mov	r0, r6
 8012560:	f7ff fef6 	bl	8012350 <_printf_common>
 8012564:	3001      	adds	r0, #1
 8012566:	d14d      	bne.n	8012604 <_printf_i+0x1c8>
 8012568:	f04f 30ff 	mov.w	r0, #4294967295
 801256c:	b005      	add	sp, #20
 801256e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012572:	4839      	ldr	r0, [pc, #228]	; (8012658 <_printf_i+0x21c>)
 8012574:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012578:	6813      	ldr	r3, [r2, #0]
 801257a:	6821      	ldr	r1, [r4, #0]
 801257c:	1d1d      	adds	r5, r3, #4
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6015      	str	r5, [r2, #0]
 8012582:	060a      	lsls	r2, r1, #24
 8012584:	d50b      	bpl.n	801259e <_printf_i+0x162>
 8012586:	07ca      	lsls	r2, r1, #31
 8012588:	bf44      	itt	mi
 801258a:	f041 0120 	orrmi.w	r1, r1, #32
 801258e:	6021      	strmi	r1, [r4, #0]
 8012590:	b91b      	cbnz	r3, 801259a <_printf_i+0x15e>
 8012592:	6822      	ldr	r2, [r4, #0]
 8012594:	f022 0220 	bic.w	r2, r2, #32
 8012598:	6022      	str	r2, [r4, #0]
 801259a:	2210      	movs	r2, #16
 801259c:	e7b7      	b.n	801250e <_printf_i+0xd2>
 801259e:	064d      	lsls	r5, r1, #25
 80125a0:	bf48      	it	mi
 80125a2:	b29b      	uxthmi	r3, r3
 80125a4:	e7ef      	b.n	8012586 <_printf_i+0x14a>
 80125a6:	4665      	mov	r5, ip
 80125a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80125ac:	fb02 3311 	mls	r3, r2, r1, r3
 80125b0:	5cc3      	ldrb	r3, [r0, r3]
 80125b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80125b6:	460b      	mov	r3, r1
 80125b8:	2900      	cmp	r1, #0
 80125ba:	d1f5      	bne.n	80125a8 <_printf_i+0x16c>
 80125bc:	e7b9      	b.n	8012532 <_printf_i+0xf6>
 80125be:	6813      	ldr	r3, [r2, #0]
 80125c0:	6825      	ldr	r5, [r4, #0]
 80125c2:	6961      	ldr	r1, [r4, #20]
 80125c4:	1d18      	adds	r0, r3, #4
 80125c6:	6010      	str	r0, [r2, #0]
 80125c8:	0628      	lsls	r0, r5, #24
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	d501      	bpl.n	80125d2 <_printf_i+0x196>
 80125ce:	6019      	str	r1, [r3, #0]
 80125d0:	e002      	b.n	80125d8 <_printf_i+0x19c>
 80125d2:	066a      	lsls	r2, r5, #25
 80125d4:	d5fb      	bpl.n	80125ce <_printf_i+0x192>
 80125d6:	8019      	strh	r1, [r3, #0]
 80125d8:	2300      	movs	r3, #0
 80125da:	6123      	str	r3, [r4, #16]
 80125dc:	4665      	mov	r5, ip
 80125de:	e7b9      	b.n	8012554 <_printf_i+0x118>
 80125e0:	6813      	ldr	r3, [r2, #0]
 80125e2:	1d19      	adds	r1, r3, #4
 80125e4:	6011      	str	r1, [r2, #0]
 80125e6:	681d      	ldr	r5, [r3, #0]
 80125e8:	6862      	ldr	r2, [r4, #4]
 80125ea:	2100      	movs	r1, #0
 80125ec:	4628      	mov	r0, r5
 80125ee:	f7ed fe07 	bl	8000200 <memchr>
 80125f2:	b108      	cbz	r0, 80125f8 <_printf_i+0x1bc>
 80125f4:	1b40      	subs	r0, r0, r5
 80125f6:	6060      	str	r0, [r4, #4]
 80125f8:	6863      	ldr	r3, [r4, #4]
 80125fa:	6123      	str	r3, [r4, #16]
 80125fc:	2300      	movs	r3, #0
 80125fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012602:	e7a7      	b.n	8012554 <_printf_i+0x118>
 8012604:	6923      	ldr	r3, [r4, #16]
 8012606:	462a      	mov	r2, r5
 8012608:	4639      	mov	r1, r7
 801260a:	4630      	mov	r0, r6
 801260c:	47c0      	blx	r8
 801260e:	3001      	adds	r0, #1
 8012610:	d0aa      	beq.n	8012568 <_printf_i+0x12c>
 8012612:	6823      	ldr	r3, [r4, #0]
 8012614:	079b      	lsls	r3, r3, #30
 8012616:	d413      	bmi.n	8012640 <_printf_i+0x204>
 8012618:	68e0      	ldr	r0, [r4, #12]
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	4298      	cmp	r0, r3
 801261e:	bfb8      	it	lt
 8012620:	4618      	movlt	r0, r3
 8012622:	e7a3      	b.n	801256c <_printf_i+0x130>
 8012624:	2301      	movs	r3, #1
 8012626:	464a      	mov	r2, r9
 8012628:	4639      	mov	r1, r7
 801262a:	4630      	mov	r0, r6
 801262c:	47c0      	blx	r8
 801262e:	3001      	adds	r0, #1
 8012630:	d09a      	beq.n	8012568 <_printf_i+0x12c>
 8012632:	3501      	adds	r5, #1
 8012634:	68e3      	ldr	r3, [r4, #12]
 8012636:	9a03      	ldr	r2, [sp, #12]
 8012638:	1a9b      	subs	r3, r3, r2
 801263a:	42ab      	cmp	r3, r5
 801263c:	dcf2      	bgt.n	8012624 <_printf_i+0x1e8>
 801263e:	e7eb      	b.n	8012618 <_printf_i+0x1dc>
 8012640:	2500      	movs	r5, #0
 8012642:	f104 0919 	add.w	r9, r4, #25
 8012646:	e7f5      	b.n	8012634 <_printf_i+0x1f8>
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1ac      	bne.n	80125a6 <_printf_i+0x16a>
 801264c:	7803      	ldrb	r3, [r0, #0]
 801264e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012656:	e76c      	b.n	8012532 <_printf_i+0xf6>
 8012658:	08017de4 	.word	0x08017de4
 801265c:	08017df5 	.word	0x08017df5

08012660 <_scanf_float>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	469a      	mov	sl, r3
 8012666:	688b      	ldr	r3, [r1, #8]
 8012668:	4616      	mov	r6, r2
 801266a:	1e5a      	subs	r2, r3, #1
 801266c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012670:	b087      	sub	sp, #28
 8012672:	bf83      	ittte	hi
 8012674:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012678:	189b      	addhi	r3, r3, r2
 801267a:	9301      	strhi	r3, [sp, #4]
 801267c:	2300      	movls	r3, #0
 801267e:	bf86      	itte	hi
 8012680:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012684:	608b      	strhi	r3, [r1, #8]
 8012686:	9301      	strls	r3, [sp, #4]
 8012688:	680b      	ldr	r3, [r1, #0]
 801268a:	4688      	mov	r8, r1
 801268c:	f04f 0b00 	mov.w	fp, #0
 8012690:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012694:	f848 3b1c 	str.w	r3, [r8], #28
 8012698:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801269c:	4607      	mov	r7, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	4645      	mov	r5, r8
 80126a2:	465a      	mov	r2, fp
 80126a4:	46d9      	mov	r9, fp
 80126a6:	f8cd b008 	str.w	fp, [sp, #8]
 80126aa:	68a1      	ldr	r1, [r4, #8]
 80126ac:	b181      	cbz	r1, 80126d0 <_scanf_float+0x70>
 80126ae:	6833      	ldr	r3, [r6, #0]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b49      	cmp	r3, #73	; 0x49
 80126b4:	d071      	beq.n	801279a <_scanf_float+0x13a>
 80126b6:	d84d      	bhi.n	8012754 <_scanf_float+0xf4>
 80126b8:	2b39      	cmp	r3, #57	; 0x39
 80126ba:	d840      	bhi.n	801273e <_scanf_float+0xde>
 80126bc:	2b31      	cmp	r3, #49	; 0x31
 80126be:	f080 8088 	bcs.w	80127d2 <_scanf_float+0x172>
 80126c2:	2b2d      	cmp	r3, #45	; 0x2d
 80126c4:	f000 8090 	beq.w	80127e8 <_scanf_float+0x188>
 80126c8:	d815      	bhi.n	80126f6 <_scanf_float+0x96>
 80126ca:	2b2b      	cmp	r3, #43	; 0x2b
 80126cc:	f000 808c 	beq.w	80127e8 <_scanf_float+0x188>
 80126d0:	f1b9 0f00 	cmp.w	r9, #0
 80126d4:	d003      	beq.n	80126de <_scanf_float+0x7e>
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	3a01      	subs	r2, #1
 80126e0:	2a01      	cmp	r2, #1
 80126e2:	f200 80ea 	bhi.w	80128ba <_scanf_float+0x25a>
 80126e6:	4545      	cmp	r5, r8
 80126e8:	f200 80dc 	bhi.w	80128a4 <_scanf_float+0x244>
 80126ec:	2601      	movs	r6, #1
 80126ee:	4630      	mov	r0, r6
 80126f0:	b007      	add	sp, #28
 80126f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f6:	2b2e      	cmp	r3, #46	; 0x2e
 80126f8:	f000 809f 	beq.w	801283a <_scanf_float+0x1da>
 80126fc:	2b30      	cmp	r3, #48	; 0x30
 80126fe:	d1e7      	bne.n	80126d0 <_scanf_float+0x70>
 8012700:	6820      	ldr	r0, [r4, #0]
 8012702:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012706:	d064      	beq.n	80127d2 <_scanf_float+0x172>
 8012708:	9b01      	ldr	r3, [sp, #4]
 801270a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801270e:	6020      	str	r0, [r4, #0]
 8012710:	f109 0901 	add.w	r9, r9, #1
 8012714:	b11b      	cbz	r3, 801271e <_scanf_float+0xbe>
 8012716:	3b01      	subs	r3, #1
 8012718:	3101      	adds	r1, #1
 801271a:	9301      	str	r3, [sp, #4]
 801271c:	60a1      	str	r1, [r4, #8]
 801271e:	68a3      	ldr	r3, [r4, #8]
 8012720:	3b01      	subs	r3, #1
 8012722:	60a3      	str	r3, [r4, #8]
 8012724:	6923      	ldr	r3, [r4, #16]
 8012726:	3301      	adds	r3, #1
 8012728:	6123      	str	r3, [r4, #16]
 801272a:	6873      	ldr	r3, [r6, #4]
 801272c:	3b01      	subs	r3, #1
 801272e:	2b00      	cmp	r3, #0
 8012730:	6073      	str	r3, [r6, #4]
 8012732:	f340 80ac 	ble.w	801288e <_scanf_float+0x22e>
 8012736:	6833      	ldr	r3, [r6, #0]
 8012738:	3301      	adds	r3, #1
 801273a:	6033      	str	r3, [r6, #0]
 801273c:	e7b5      	b.n	80126aa <_scanf_float+0x4a>
 801273e:	2b45      	cmp	r3, #69	; 0x45
 8012740:	f000 8085 	beq.w	801284e <_scanf_float+0x1ee>
 8012744:	2b46      	cmp	r3, #70	; 0x46
 8012746:	d06a      	beq.n	801281e <_scanf_float+0x1be>
 8012748:	2b41      	cmp	r3, #65	; 0x41
 801274a:	d1c1      	bne.n	80126d0 <_scanf_float+0x70>
 801274c:	2a01      	cmp	r2, #1
 801274e:	d1bf      	bne.n	80126d0 <_scanf_float+0x70>
 8012750:	2202      	movs	r2, #2
 8012752:	e046      	b.n	80127e2 <_scanf_float+0x182>
 8012754:	2b65      	cmp	r3, #101	; 0x65
 8012756:	d07a      	beq.n	801284e <_scanf_float+0x1ee>
 8012758:	d818      	bhi.n	801278c <_scanf_float+0x12c>
 801275a:	2b54      	cmp	r3, #84	; 0x54
 801275c:	d066      	beq.n	801282c <_scanf_float+0x1cc>
 801275e:	d811      	bhi.n	8012784 <_scanf_float+0x124>
 8012760:	2b4e      	cmp	r3, #78	; 0x4e
 8012762:	d1b5      	bne.n	80126d0 <_scanf_float+0x70>
 8012764:	2a00      	cmp	r2, #0
 8012766:	d146      	bne.n	80127f6 <_scanf_float+0x196>
 8012768:	f1b9 0f00 	cmp.w	r9, #0
 801276c:	d145      	bne.n	80127fa <_scanf_float+0x19a>
 801276e:	6821      	ldr	r1, [r4, #0]
 8012770:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012774:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012778:	d13f      	bne.n	80127fa <_scanf_float+0x19a>
 801277a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801277e:	6021      	str	r1, [r4, #0]
 8012780:	2201      	movs	r2, #1
 8012782:	e02e      	b.n	80127e2 <_scanf_float+0x182>
 8012784:	2b59      	cmp	r3, #89	; 0x59
 8012786:	d01e      	beq.n	80127c6 <_scanf_float+0x166>
 8012788:	2b61      	cmp	r3, #97	; 0x61
 801278a:	e7de      	b.n	801274a <_scanf_float+0xea>
 801278c:	2b6e      	cmp	r3, #110	; 0x6e
 801278e:	d0e9      	beq.n	8012764 <_scanf_float+0x104>
 8012790:	d815      	bhi.n	80127be <_scanf_float+0x15e>
 8012792:	2b66      	cmp	r3, #102	; 0x66
 8012794:	d043      	beq.n	801281e <_scanf_float+0x1be>
 8012796:	2b69      	cmp	r3, #105	; 0x69
 8012798:	d19a      	bne.n	80126d0 <_scanf_float+0x70>
 801279a:	f1bb 0f00 	cmp.w	fp, #0
 801279e:	d138      	bne.n	8012812 <_scanf_float+0x1b2>
 80127a0:	f1b9 0f00 	cmp.w	r9, #0
 80127a4:	d197      	bne.n	80126d6 <_scanf_float+0x76>
 80127a6:	6821      	ldr	r1, [r4, #0]
 80127a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80127ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80127b0:	d195      	bne.n	80126de <_scanf_float+0x7e>
 80127b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80127b6:	6021      	str	r1, [r4, #0]
 80127b8:	f04f 0b01 	mov.w	fp, #1
 80127bc:	e011      	b.n	80127e2 <_scanf_float+0x182>
 80127be:	2b74      	cmp	r3, #116	; 0x74
 80127c0:	d034      	beq.n	801282c <_scanf_float+0x1cc>
 80127c2:	2b79      	cmp	r3, #121	; 0x79
 80127c4:	d184      	bne.n	80126d0 <_scanf_float+0x70>
 80127c6:	f1bb 0f07 	cmp.w	fp, #7
 80127ca:	d181      	bne.n	80126d0 <_scanf_float+0x70>
 80127cc:	f04f 0b08 	mov.w	fp, #8
 80127d0:	e007      	b.n	80127e2 <_scanf_float+0x182>
 80127d2:	eb12 0f0b 	cmn.w	r2, fp
 80127d6:	f47f af7b 	bne.w	80126d0 <_scanf_float+0x70>
 80127da:	6821      	ldr	r1, [r4, #0]
 80127dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80127e0:	6021      	str	r1, [r4, #0]
 80127e2:	702b      	strb	r3, [r5, #0]
 80127e4:	3501      	adds	r5, #1
 80127e6:	e79a      	b.n	801271e <_scanf_float+0xbe>
 80127e8:	6821      	ldr	r1, [r4, #0]
 80127ea:	0608      	lsls	r0, r1, #24
 80127ec:	f57f af70 	bpl.w	80126d0 <_scanf_float+0x70>
 80127f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80127f4:	e7f4      	b.n	80127e0 <_scanf_float+0x180>
 80127f6:	2a02      	cmp	r2, #2
 80127f8:	d047      	beq.n	801288a <_scanf_float+0x22a>
 80127fa:	f1bb 0f01 	cmp.w	fp, #1
 80127fe:	d003      	beq.n	8012808 <_scanf_float+0x1a8>
 8012800:	f1bb 0f04 	cmp.w	fp, #4
 8012804:	f47f af64 	bne.w	80126d0 <_scanf_float+0x70>
 8012808:	f10b 0b01 	add.w	fp, fp, #1
 801280c:	fa5f fb8b 	uxtb.w	fp, fp
 8012810:	e7e7      	b.n	80127e2 <_scanf_float+0x182>
 8012812:	f1bb 0f03 	cmp.w	fp, #3
 8012816:	d0f7      	beq.n	8012808 <_scanf_float+0x1a8>
 8012818:	f1bb 0f05 	cmp.w	fp, #5
 801281c:	e7f2      	b.n	8012804 <_scanf_float+0x1a4>
 801281e:	f1bb 0f02 	cmp.w	fp, #2
 8012822:	f47f af55 	bne.w	80126d0 <_scanf_float+0x70>
 8012826:	f04f 0b03 	mov.w	fp, #3
 801282a:	e7da      	b.n	80127e2 <_scanf_float+0x182>
 801282c:	f1bb 0f06 	cmp.w	fp, #6
 8012830:	f47f af4e 	bne.w	80126d0 <_scanf_float+0x70>
 8012834:	f04f 0b07 	mov.w	fp, #7
 8012838:	e7d3      	b.n	80127e2 <_scanf_float+0x182>
 801283a:	6821      	ldr	r1, [r4, #0]
 801283c:	0588      	lsls	r0, r1, #22
 801283e:	f57f af47 	bpl.w	80126d0 <_scanf_float+0x70>
 8012842:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012846:	6021      	str	r1, [r4, #0]
 8012848:	f8cd 9008 	str.w	r9, [sp, #8]
 801284c:	e7c9      	b.n	80127e2 <_scanf_float+0x182>
 801284e:	6821      	ldr	r1, [r4, #0]
 8012850:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012854:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012858:	d006      	beq.n	8012868 <_scanf_float+0x208>
 801285a:	0548      	lsls	r0, r1, #21
 801285c:	f57f af38 	bpl.w	80126d0 <_scanf_float+0x70>
 8012860:	f1b9 0f00 	cmp.w	r9, #0
 8012864:	f43f af3b 	beq.w	80126de <_scanf_float+0x7e>
 8012868:	0588      	lsls	r0, r1, #22
 801286a:	bf58      	it	pl
 801286c:	9802      	ldrpl	r0, [sp, #8]
 801286e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012872:	bf58      	it	pl
 8012874:	eba9 0000 	subpl.w	r0, r9, r0
 8012878:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801287c:	bf58      	it	pl
 801287e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012882:	6021      	str	r1, [r4, #0]
 8012884:	f04f 0900 	mov.w	r9, #0
 8012888:	e7ab      	b.n	80127e2 <_scanf_float+0x182>
 801288a:	2203      	movs	r2, #3
 801288c:	e7a9      	b.n	80127e2 <_scanf_float+0x182>
 801288e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012892:	9205      	str	r2, [sp, #20]
 8012894:	4631      	mov	r1, r6
 8012896:	4638      	mov	r0, r7
 8012898:	4798      	blx	r3
 801289a:	9a05      	ldr	r2, [sp, #20]
 801289c:	2800      	cmp	r0, #0
 801289e:	f43f af04 	beq.w	80126aa <_scanf_float+0x4a>
 80128a2:	e715      	b.n	80126d0 <_scanf_float+0x70>
 80128a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80128ac:	4632      	mov	r2, r6
 80128ae:	4638      	mov	r0, r7
 80128b0:	4798      	blx	r3
 80128b2:	6923      	ldr	r3, [r4, #16]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	e715      	b.n	80126e6 <_scanf_float+0x86>
 80128ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80128be:	2b06      	cmp	r3, #6
 80128c0:	d80a      	bhi.n	80128d8 <_scanf_float+0x278>
 80128c2:	f1bb 0f02 	cmp.w	fp, #2
 80128c6:	d968      	bls.n	801299a <_scanf_float+0x33a>
 80128c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80128cc:	fa5f fb8b 	uxtb.w	fp, fp
 80128d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80128d4:	455d      	cmp	r5, fp
 80128d6:	d14b      	bne.n	8012970 <_scanf_float+0x310>
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	05da      	lsls	r2, r3, #23
 80128dc:	d51f      	bpl.n	801291e <_scanf_float+0x2be>
 80128de:	055b      	lsls	r3, r3, #21
 80128e0:	d468      	bmi.n	80129b4 <_scanf_float+0x354>
 80128e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80128e6:	6923      	ldr	r3, [r4, #16]
 80128e8:	2965      	cmp	r1, #101	; 0x65
 80128ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80128ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80128f2:	6123      	str	r3, [r4, #16]
 80128f4:	d00d      	beq.n	8012912 <_scanf_float+0x2b2>
 80128f6:	2945      	cmp	r1, #69	; 0x45
 80128f8:	d00b      	beq.n	8012912 <_scanf_float+0x2b2>
 80128fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128fe:	4632      	mov	r2, r6
 8012900:	4638      	mov	r0, r7
 8012902:	4798      	blx	r3
 8012904:	6923      	ldr	r3, [r4, #16]
 8012906:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801290a:	3b01      	subs	r3, #1
 801290c:	f1a5 0b02 	sub.w	fp, r5, #2
 8012910:	6123      	str	r3, [r4, #16]
 8012912:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012916:	4632      	mov	r2, r6
 8012918:	4638      	mov	r0, r7
 801291a:	4798      	blx	r3
 801291c:	465d      	mov	r5, fp
 801291e:	6826      	ldr	r6, [r4, #0]
 8012920:	f016 0610 	ands.w	r6, r6, #16
 8012924:	d17a      	bne.n	8012a1c <_scanf_float+0x3bc>
 8012926:	702e      	strb	r6, [r5, #0]
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012932:	d142      	bne.n	80129ba <_scanf_float+0x35a>
 8012934:	9b02      	ldr	r3, [sp, #8]
 8012936:	eba9 0303 	sub.w	r3, r9, r3
 801293a:	425a      	negs	r2, r3
 801293c:	2b00      	cmp	r3, #0
 801293e:	d149      	bne.n	80129d4 <_scanf_float+0x374>
 8012940:	2200      	movs	r2, #0
 8012942:	4641      	mov	r1, r8
 8012944:	4638      	mov	r0, r7
 8012946:	f000 ff23 	bl	8013790 <_strtod_r>
 801294a:	6825      	ldr	r5, [r4, #0]
 801294c:	f8da 3000 	ldr.w	r3, [sl]
 8012950:	f015 0f02 	tst.w	r5, #2
 8012954:	f103 0204 	add.w	r2, r3, #4
 8012958:	ec59 8b10 	vmov	r8, r9, d0
 801295c:	f8ca 2000 	str.w	r2, [sl]
 8012960:	d043      	beq.n	80129ea <_scanf_float+0x38a>
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	e9c3 8900 	strd	r8, r9, [r3]
 8012968:	68e3      	ldr	r3, [r4, #12]
 801296a:	3301      	adds	r3, #1
 801296c:	60e3      	str	r3, [r4, #12]
 801296e:	e6be      	b.n	80126ee <_scanf_float+0x8e>
 8012970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012974:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012978:	4632      	mov	r2, r6
 801297a:	4638      	mov	r0, r7
 801297c:	4798      	blx	r3
 801297e:	6923      	ldr	r3, [r4, #16]
 8012980:	3b01      	subs	r3, #1
 8012982:	6123      	str	r3, [r4, #16]
 8012984:	e7a6      	b.n	80128d4 <_scanf_float+0x274>
 8012986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801298a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801298e:	4632      	mov	r2, r6
 8012990:	4638      	mov	r0, r7
 8012992:	4798      	blx	r3
 8012994:	6923      	ldr	r3, [r4, #16]
 8012996:	3b01      	subs	r3, #1
 8012998:	6123      	str	r3, [r4, #16]
 801299a:	4545      	cmp	r5, r8
 801299c:	d8f3      	bhi.n	8012986 <_scanf_float+0x326>
 801299e:	e6a5      	b.n	80126ec <_scanf_float+0x8c>
 80129a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80129a8:	4632      	mov	r2, r6
 80129aa:	4638      	mov	r0, r7
 80129ac:	4798      	blx	r3
 80129ae:	6923      	ldr	r3, [r4, #16]
 80129b0:	3b01      	subs	r3, #1
 80129b2:	6123      	str	r3, [r4, #16]
 80129b4:	4545      	cmp	r5, r8
 80129b6:	d8f3      	bhi.n	80129a0 <_scanf_float+0x340>
 80129b8:	e698      	b.n	80126ec <_scanf_float+0x8c>
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d0bf      	beq.n	8012940 <_scanf_float+0x2e0>
 80129c0:	9904      	ldr	r1, [sp, #16]
 80129c2:	230a      	movs	r3, #10
 80129c4:	4632      	mov	r2, r6
 80129c6:	3101      	adds	r1, #1
 80129c8:	4638      	mov	r0, r7
 80129ca:	f000 ff6d 	bl	80138a8 <_strtol_r>
 80129ce:	9b03      	ldr	r3, [sp, #12]
 80129d0:	9d04      	ldr	r5, [sp, #16]
 80129d2:	1ac2      	subs	r2, r0, r3
 80129d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80129d8:	429d      	cmp	r5, r3
 80129da:	bf28      	it	cs
 80129dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80129e0:	490f      	ldr	r1, [pc, #60]	; (8012a20 <_scanf_float+0x3c0>)
 80129e2:	4628      	mov	r0, r5
 80129e4:	f000 f868 	bl	8012ab8 <siprintf>
 80129e8:	e7aa      	b.n	8012940 <_scanf_float+0x2e0>
 80129ea:	f015 0504 	ands.w	r5, r5, #4
 80129ee:	d1b8      	bne.n	8012962 <_scanf_float+0x302>
 80129f0:	681f      	ldr	r7, [r3, #0]
 80129f2:	ee10 2a10 	vmov	r2, s0
 80129f6:	464b      	mov	r3, r9
 80129f8:	ee10 0a10 	vmov	r0, s0
 80129fc:	4649      	mov	r1, r9
 80129fe:	f7ee f8a5 	bl	8000b4c <__aeabi_dcmpun>
 8012a02:	b128      	cbz	r0, 8012a10 <_scanf_float+0x3b0>
 8012a04:	4628      	mov	r0, r5
 8012a06:	f000 f81d 	bl	8012a44 <nanf>
 8012a0a:	ed87 0a00 	vstr	s0, [r7]
 8012a0e:	e7ab      	b.n	8012968 <_scanf_float+0x308>
 8012a10:	4640      	mov	r0, r8
 8012a12:	4649      	mov	r1, r9
 8012a14:	f7ee f8f8 	bl	8000c08 <__aeabi_d2f>
 8012a18:	6038      	str	r0, [r7, #0]
 8012a1a:	e7a5      	b.n	8012968 <_scanf_float+0x308>
 8012a1c:	2600      	movs	r6, #0
 8012a1e:	e666      	b.n	80126ee <_scanf_float+0x8e>
 8012a20:	08017e06 	.word	0x08017e06

08012a24 <_sbrk_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	4c06      	ldr	r4, [pc, #24]	; (8012a40 <_sbrk_r+0x1c>)
 8012a28:	2300      	movs	r3, #0
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	4608      	mov	r0, r1
 8012a2e:	6023      	str	r3, [r4, #0]
 8012a30:	f7f4 feec 	bl	800780c <_sbrk>
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	d102      	bne.n	8012a3e <_sbrk_r+0x1a>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	b103      	cbz	r3, 8012a3e <_sbrk_r+0x1a>
 8012a3c:	602b      	str	r3, [r5, #0]
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}
 8012a40:	20006b00 	.word	0x20006b00

08012a44 <nanf>:
 8012a44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012a4c <nanf+0x8>
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop
 8012a4c:	7fc00000 	.word	0x7fc00000

08012a50 <sniprintf>:
 8012a50:	b40c      	push	{r2, r3}
 8012a52:	b530      	push	{r4, r5, lr}
 8012a54:	4b17      	ldr	r3, [pc, #92]	; (8012ab4 <sniprintf+0x64>)
 8012a56:	1e0c      	subs	r4, r1, #0
 8012a58:	b09d      	sub	sp, #116	; 0x74
 8012a5a:	681d      	ldr	r5, [r3, #0]
 8012a5c:	da08      	bge.n	8012a70 <sniprintf+0x20>
 8012a5e:	238b      	movs	r3, #139	; 0x8b
 8012a60:	602b      	str	r3, [r5, #0]
 8012a62:	f04f 30ff 	mov.w	r0, #4294967295
 8012a66:	b01d      	add	sp, #116	; 0x74
 8012a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a6c:	b002      	add	sp, #8
 8012a6e:	4770      	bx	lr
 8012a70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012a78:	bf14      	ite	ne
 8012a7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012a7e:	4623      	moveq	r3, r4
 8012a80:	9304      	str	r3, [sp, #16]
 8012a82:	9307      	str	r3, [sp, #28]
 8012a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a88:	9002      	str	r0, [sp, #8]
 8012a8a:	9006      	str	r0, [sp, #24]
 8012a8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012a90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012a92:	ab21      	add	r3, sp, #132	; 0x84
 8012a94:	a902      	add	r1, sp, #8
 8012a96:	4628      	mov	r0, r5
 8012a98:	9301      	str	r3, [sp, #4]
 8012a9a:	f002 fd21 	bl	80154e0 <_svfiprintf_r>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	bfbc      	itt	lt
 8012aa2:	238b      	movlt	r3, #139	; 0x8b
 8012aa4:	602b      	strlt	r3, [r5, #0]
 8012aa6:	2c00      	cmp	r4, #0
 8012aa8:	d0dd      	beq.n	8012a66 <sniprintf+0x16>
 8012aaa:	9b02      	ldr	r3, [sp, #8]
 8012aac:	2200      	movs	r2, #0
 8012aae:	701a      	strb	r2, [r3, #0]
 8012ab0:	e7d9      	b.n	8012a66 <sniprintf+0x16>
 8012ab2:	bf00      	nop
 8012ab4:	20000e34 	.word	0x20000e34

08012ab8 <siprintf>:
 8012ab8:	b40e      	push	{r1, r2, r3}
 8012aba:	b500      	push	{lr}
 8012abc:	b09c      	sub	sp, #112	; 0x70
 8012abe:	ab1d      	add	r3, sp, #116	; 0x74
 8012ac0:	9002      	str	r0, [sp, #8]
 8012ac2:	9006      	str	r0, [sp, #24]
 8012ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ac8:	4809      	ldr	r0, [pc, #36]	; (8012af0 <siprintf+0x38>)
 8012aca:	9107      	str	r1, [sp, #28]
 8012acc:	9104      	str	r1, [sp, #16]
 8012ace:	4909      	ldr	r1, [pc, #36]	; (8012af4 <siprintf+0x3c>)
 8012ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ad4:	9105      	str	r1, [sp, #20]
 8012ad6:	6800      	ldr	r0, [r0, #0]
 8012ad8:	9301      	str	r3, [sp, #4]
 8012ada:	a902      	add	r1, sp, #8
 8012adc:	f002 fd00 	bl	80154e0 <_svfiprintf_r>
 8012ae0:	9b02      	ldr	r3, [sp, #8]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	701a      	strb	r2, [r3, #0]
 8012ae6:	b01c      	add	sp, #112	; 0x70
 8012ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012aec:	b003      	add	sp, #12
 8012aee:	4770      	bx	lr
 8012af0:	20000e34 	.word	0x20000e34
 8012af4:	ffff0208 	.word	0xffff0208

08012af8 <siscanf>:
 8012af8:	b40e      	push	{r1, r2, r3}
 8012afa:	b530      	push	{r4, r5, lr}
 8012afc:	b09c      	sub	sp, #112	; 0x70
 8012afe:	ac1f      	add	r4, sp, #124	; 0x7c
 8012b00:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012b04:	f854 5b04 	ldr.w	r5, [r4], #4
 8012b08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012b0c:	9002      	str	r0, [sp, #8]
 8012b0e:	9006      	str	r0, [sp, #24]
 8012b10:	f7ed fb68 	bl	80001e4 <strlen>
 8012b14:	4b0b      	ldr	r3, [pc, #44]	; (8012b44 <siscanf+0x4c>)
 8012b16:	9003      	str	r0, [sp, #12]
 8012b18:	9007      	str	r0, [sp, #28]
 8012b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b1c:	480a      	ldr	r0, [pc, #40]	; (8012b48 <siscanf+0x50>)
 8012b1e:	9401      	str	r4, [sp, #4]
 8012b20:	2300      	movs	r3, #0
 8012b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b24:	9314      	str	r3, [sp, #80]	; 0x50
 8012b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b2e:	462a      	mov	r2, r5
 8012b30:	4623      	mov	r3, r4
 8012b32:	a902      	add	r1, sp, #8
 8012b34:	6800      	ldr	r0, [r0, #0]
 8012b36:	f002 fe25 	bl	8015784 <__ssvfiscanf_r>
 8012b3a:	b01c      	add	sp, #112	; 0x70
 8012b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b40:	b003      	add	sp, #12
 8012b42:	4770      	bx	lr
 8012b44:	08012b4d 	.word	0x08012b4d
 8012b48:	20000e34 	.word	0x20000e34

08012b4c <__seofread>:
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	4770      	bx	lr

08012b50 <strcat>:
 8012b50:	b510      	push	{r4, lr}
 8012b52:	4603      	mov	r3, r0
 8012b54:	781a      	ldrb	r2, [r3, #0]
 8012b56:	1c5c      	adds	r4, r3, #1
 8012b58:	b93a      	cbnz	r2, 8012b6a <strcat+0x1a>
 8012b5a:	3b01      	subs	r3, #1
 8012b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b64:	2a00      	cmp	r2, #0
 8012b66:	d1f9      	bne.n	8012b5c <strcat+0xc>
 8012b68:	bd10      	pop	{r4, pc}
 8012b6a:	4623      	mov	r3, r4
 8012b6c:	e7f2      	b.n	8012b54 <strcat+0x4>

08012b6e <sulp>:
 8012b6e:	b570      	push	{r4, r5, r6, lr}
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	ec45 4b10 	vmov	d0, r4, r5
 8012b78:	4616      	mov	r6, r2
 8012b7a:	f002 fb15 	bl	80151a8 <__ulp>
 8012b7e:	ec51 0b10 	vmov	r0, r1, d0
 8012b82:	b17e      	cbz	r6, 8012ba4 <sulp+0x36>
 8012b84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012b88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	dd09      	ble.n	8012ba4 <sulp+0x36>
 8012b90:	051b      	lsls	r3, r3, #20
 8012b92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012b96:	2400      	movs	r4, #0
 8012b98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012b9c:	4622      	mov	r2, r4
 8012b9e:	462b      	mov	r3, r5
 8012ba0:	f7ed fd3a 	bl	8000618 <__aeabi_dmul>
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ba8 <_strtod_l>:
 8012ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bac:	461f      	mov	r7, r3
 8012bae:	b0a1      	sub	sp, #132	; 0x84
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	4681      	mov	r9, r0
 8012bb4:	4638      	mov	r0, r7
 8012bb6:	460e      	mov	r6, r1
 8012bb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8012bba:	931c      	str	r3, [sp, #112]	; 0x70
 8012bbc:	f002 f804 	bl	8014bc8 <__localeconv_l>
 8012bc0:	4680      	mov	r8, r0
 8012bc2:	6800      	ldr	r0, [r0, #0]
 8012bc4:	f7ed fb0e 	bl	80001e4 <strlen>
 8012bc8:	f04f 0a00 	mov.w	sl, #0
 8012bcc:	4604      	mov	r4, r0
 8012bce:	f04f 0b00 	mov.w	fp, #0
 8012bd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8012bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bd6:	781a      	ldrb	r2, [r3, #0]
 8012bd8:	2a0d      	cmp	r2, #13
 8012bda:	d832      	bhi.n	8012c42 <_strtod_l+0x9a>
 8012bdc:	2a09      	cmp	r2, #9
 8012bde:	d236      	bcs.n	8012c4e <_strtod_l+0xa6>
 8012be0:	2a00      	cmp	r2, #0
 8012be2:	d03e      	beq.n	8012c62 <_strtod_l+0xba>
 8012be4:	2300      	movs	r3, #0
 8012be6:	930d      	str	r3, [sp, #52]	; 0x34
 8012be8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012bea:	782b      	ldrb	r3, [r5, #0]
 8012bec:	2b30      	cmp	r3, #48	; 0x30
 8012bee:	f040 80ac 	bne.w	8012d4a <_strtod_l+0x1a2>
 8012bf2:	786b      	ldrb	r3, [r5, #1]
 8012bf4:	2b58      	cmp	r3, #88	; 0x58
 8012bf6:	d001      	beq.n	8012bfc <_strtod_l+0x54>
 8012bf8:	2b78      	cmp	r3, #120	; 0x78
 8012bfa:	d167      	bne.n	8012ccc <_strtod_l+0x124>
 8012bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bfe:	9301      	str	r3, [sp, #4]
 8012c00:	ab1c      	add	r3, sp, #112	; 0x70
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	9702      	str	r7, [sp, #8]
 8012c06:	ab1d      	add	r3, sp, #116	; 0x74
 8012c08:	4a88      	ldr	r2, [pc, #544]	; (8012e2c <_strtod_l+0x284>)
 8012c0a:	a91b      	add	r1, sp, #108	; 0x6c
 8012c0c:	4648      	mov	r0, r9
 8012c0e:	f001 fcf2 	bl	80145f6 <__gethex>
 8012c12:	f010 0407 	ands.w	r4, r0, #7
 8012c16:	4606      	mov	r6, r0
 8012c18:	d005      	beq.n	8012c26 <_strtod_l+0x7e>
 8012c1a:	2c06      	cmp	r4, #6
 8012c1c:	d12b      	bne.n	8012c76 <_strtod_l+0xce>
 8012c1e:	3501      	adds	r5, #1
 8012c20:	2300      	movs	r3, #0
 8012c22:	951b      	str	r5, [sp, #108]	; 0x6c
 8012c24:	930d      	str	r3, [sp, #52]	; 0x34
 8012c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f040 859a 	bne.w	8013762 <_strtod_l+0xbba>
 8012c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c30:	b1e3      	cbz	r3, 8012c6c <_strtod_l+0xc4>
 8012c32:	4652      	mov	r2, sl
 8012c34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012c38:	ec43 2b10 	vmov	d0, r2, r3
 8012c3c:	b021      	add	sp, #132	; 0x84
 8012c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c42:	2a2b      	cmp	r2, #43	; 0x2b
 8012c44:	d015      	beq.n	8012c72 <_strtod_l+0xca>
 8012c46:	2a2d      	cmp	r2, #45	; 0x2d
 8012c48:	d004      	beq.n	8012c54 <_strtod_l+0xac>
 8012c4a:	2a20      	cmp	r2, #32
 8012c4c:	d1ca      	bne.n	8012be4 <_strtod_l+0x3c>
 8012c4e:	3301      	adds	r3, #1
 8012c50:	931b      	str	r3, [sp, #108]	; 0x6c
 8012c52:	e7bf      	b.n	8012bd4 <_strtod_l+0x2c>
 8012c54:	2201      	movs	r2, #1
 8012c56:	920d      	str	r2, [sp, #52]	; 0x34
 8012c58:	1c5a      	adds	r2, r3, #1
 8012c5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c5c:	785b      	ldrb	r3, [r3, #1]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1c2      	bne.n	8012be8 <_strtod_l+0x40>
 8012c62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c64:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f040 8579 	bne.w	801375e <_strtod_l+0xbb6>
 8012c6c:	4652      	mov	r2, sl
 8012c6e:	465b      	mov	r3, fp
 8012c70:	e7e2      	b.n	8012c38 <_strtod_l+0x90>
 8012c72:	2200      	movs	r2, #0
 8012c74:	e7ef      	b.n	8012c56 <_strtod_l+0xae>
 8012c76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012c78:	b13a      	cbz	r2, 8012c8a <_strtod_l+0xe2>
 8012c7a:	2135      	movs	r1, #53	; 0x35
 8012c7c:	a81e      	add	r0, sp, #120	; 0x78
 8012c7e:	f002 fb8b 	bl	8015398 <__copybits>
 8012c82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012c84:	4648      	mov	r0, r9
 8012c86:	f001 fff7 	bl	8014c78 <_Bfree>
 8012c8a:	3c01      	subs	r4, #1
 8012c8c:	2c04      	cmp	r4, #4
 8012c8e:	d806      	bhi.n	8012c9e <_strtod_l+0xf6>
 8012c90:	e8df f004 	tbb	[pc, r4]
 8012c94:	1714030a 	.word	0x1714030a
 8012c98:	0a          	.byte	0x0a
 8012c99:	00          	.byte	0x00
 8012c9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012c9e:	0730      	lsls	r0, r6, #28
 8012ca0:	d5c1      	bpl.n	8012c26 <_strtod_l+0x7e>
 8012ca2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012ca6:	e7be      	b.n	8012c26 <_strtod_l+0x7e>
 8012ca8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012cac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012cae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012cb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012cb6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012cba:	e7f0      	b.n	8012c9e <_strtod_l+0xf6>
 8012cbc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012e30 <_strtod_l+0x288>
 8012cc0:	e7ed      	b.n	8012c9e <_strtod_l+0xf6>
 8012cc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012cc6:	f04f 3aff 	mov.w	sl, #4294967295
 8012cca:	e7e8      	b.n	8012c9e <_strtod_l+0xf6>
 8012ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8012cd2:	785b      	ldrb	r3, [r3, #1]
 8012cd4:	2b30      	cmp	r3, #48	; 0x30
 8012cd6:	d0f9      	beq.n	8012ccc <_strtod_l+0x124>
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d0a4      	beq.n	8012c26 <_strtod_l+0x7e>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	2500      	movs	r5, #0
 8012ce0:	9306      	str	r3, [sp, #24]
 8012ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ce4:	9308      	str	r3, [sp, #32]
 8012ce6:	9507      	str	r5, [sp, #28]
 8012ce8:	9505      	str	r5, [sp, #20]
 8012cea:	220a      	movs	r2, #10
 8012cec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012cee:	7807      	ldrb	r7, [r0, #0]
 8012cf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012cf4:	b2d9      	uxtb	r1, r3
 8012cf6:	2909      	cmp	r1, #9
 8012cf8:	d929      	bls.n	8012d4e <_strtod_l+0x1a6>
 8012cfa:	4622      	mov	r2, r4
 8012cfc:	f8d8 1000 	ldr.w	r1, [r8]
 8012d00:	f003 f81a 	bl	8015d38 <strncmp>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d031      	beq.n	8012d6c <_strtod_l+0x1c4>
 8012d08:	2000      	movs	r0, #0
 8012d0a:	9c05      	ldr	r4, [sp, #20]
 8012d0c:	9004      	str	r0, [sp, #16]
 8012d0e:	463b      	mov	r3, r7
 8012d10:	4602      	mov	r2, r0
 8012d12:	2b65      	cmp	r3, #101	; 0x65
 8012d14:	d001      	beq.n	8012d1a <_strtod_l+0x172>
 8012d16:	2b45      	cmp	r3, #69	; 0x45
 8012d18:	d114      	bne.n	8012d44 <_strtod_l+0x19c>
 8012d1a:	b924      	cbnz	r4, 8012d26 <_strtod_l+0x17e>
 8012d1c:	b910      	cbnz	r0, 8012d24 <_strtod_l+0x17c>
 8012d1e:	9b06      	ldr	r3, [sp, #24]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d09e      	beq.n	8012c62 <_strtod_l+0xba>
 8012d24:	2400      	movs	r4, #0
 8012d26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012d28:	1c73      	adds	r3, r6, #1
 8012d2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d2c:	7873      	ldrb	r3, [r6, #1]
 8012d2e:	2b2b      	cmp	r3, #43	; 0x2b
 8012d30:	d078      	beq.n	8012e24 <_strtod_l+0x27c>
 8012d32:	2b2d      	cmp	r3, #45	; 0x2d
 8012d34:	d070      	beq.n	8012e18 <_strtod_l+0x270>
 8012d36:	f04f 0c00 	mov.w	ip, #0
 8012d3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012d3e:	2f09      	cmp	r7, #9
 8012d40:	d97c      	bls.n	8012e3c <_strtod_l+0x294>
 8012d42:	961b      	str	r6, [sp, #108]	; 0x6c
 8012d44:	f04f 0e00 	mov.w	lr, #0
 8012d48:	e09a      	b.n	8012e80 <_strtod_l+0x2d8>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	e7c7      	b.n	8012cde <_strtod_l+0x136>
 8012d4e:	9905      	ldr	r1, [sp, #20]
 8012d50:	2908      	cmp	r1, #8
 8012d52:	bfdd      	ittte	le
 8012d54:	9907      	ldrle	r1, [sp, #28]
 8012d56:	fb02 3301 	mlale	r3, r2, r1, r3
 8012d5a:	9307      	strle	r3, [sp, #28]
 8012d5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012d60:	9b05      	ldr	r3, [sp, #20]
 8012d62:	3001      	adds	r0, #1
 8012d64:	3301      	adds	r3, #1
 8012d66:	9305      	str	r3, [sp, #20]
 8012d68:	901b      	str	r0, [sp, #108]	; 0x6c
 8012d6a:	e7bf      	b.n	8012cec <_strtod_l+0x144>
 8012d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d6e:	191a      	adds	r2, r3, r4
 8012d70:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d72:	9a05      	ldr	r2, [sp, #20]
 8012d74:	5d1b      	ldrb	r3, [r3, r4]
 8012d76:	2a00      	cmp	r2, #0
 8012d78:	d037      	beq.n	8012dea <_strtod_l+0x242>
 8012d7a:	9c05      	ldr	r4, [sp, #20]
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012d82:	2909      	cmp	r1, #9
 8012d84:	d913      	bls.n	8012dae <_strtod_l+0x206>
 8012d86:	2101      	movs	r1, #1
 8012d88:	9104      	str	r1, [sp, #16]
 8012d8a:	e7c2      	b.n	8012d12 <_strtod_l+0x16a>
 8012d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d8e:	1c5a      	adds	r2, r3, #1
 8012d90:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d92:	785b      	ldrb	r3, [r3, #1]
 8012d94:	3001      	adds	r0, #1
 8012d96:	2b30      	cmp	r3, #48	; 0x30
 8012d98:	d0f8      	beq.n	8012d8c <_strtod_l+0x1e4>
 8012d9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012d9e:	2a08      	cmp	r2, #8
 8012da0:	f200 84e4 	bhi.w	801376c <_strtod_l+0xbc4>
 8012da4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012da6:	9208      	str	r2, [sp, #32]
 8012da8:	4602      	mov	r2, r0
 8012daa:	2000      	movs	r0, #0
 8012dac:	4604      	mov	r4, r0
 8012dae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012db2:	f100 0101 	add.w	r1, r0, #1
 8012db6:	d012      	beq.n	8012dde <_strtod_l+0x236>
 8012db8:	440a      	add	r2, r1
 8012dba:	eb00 0c04 	add.w	ip, r0, r4
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	270a      	movs	r7, #10
 8012dc2:	458c      	cmp	ip, r1
 8012dc4:	d113      	bne.n	8012dee <_strtod_l+0x246>
 8012dc6:	1821      	adds	r1, r4, r0
 8012dc8:	2908      	cmp	r1, #8
 8012dca:	f104 0401 	add.w	r4, r4, #1
 8012dce:	4404      	add	r4, r0
 8012dd0:	dc19      	bgt.n	8012e06 <_strtod_l+0x25e>
 8012dd2:	9b07      	ldr	r3, [sp, #28]
 8012dd4:	210a      	movs	r1, #10
 8012dd6:	fb01 e303 	mla	r3, r1, r3, lr
 8012dda:	9307      	str	r3, [sp, #28]
 8012ddc:	2100      	movs	r1, #0
 8012dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012de0:	1c58      	adds	r0, r3, #1
 8012de2:	901b      	str	r0, [sp, #108]	; 0x6c
 8012de4:	785b      	ldrb	r3, [r3, #1]
 8012de6:	4608      	mov	r0, r1
 8012de8:	e7c9      	b.n	8012d7e <_strtod_l+0x1d6>
 8012dea:	9805      	ldr	r0, [sp, #20]
 8012dec:	e7d3      	b.n	8012d96 <_strtod_l+0x1ee>
 8012dee:	2908      	cmp	r1, #8
 8012df0:	f101 0101 	add.w	r1, r1, #1
 8012df4:	dc03      	bgt.n	8012dfe <_strtod_l+0x256>
 8012df6:	9b07      	ldr	r3, [sp, #28]
 8012df8:	437b      	muls	r3, r7
 8012dfa:	9307      	str	r3, [sp, #28]
 8012dfc:	e7e1      	b.n	8012dc2 <_strtod_l+0x21a>
 8012dfe:	2910      	cmp	r1, #16
 8012e00:	bfd8      	it	le
 8012e02:	437d      	mulle	r5, r7
 8012e04:	e7dd      	b.n	8012dc2 <_strtod_l+0x21a>
 8012e06:	2c10      	cmp	r4, #16
 8012e08:	bfdc      	itt	le
 8012e0a:	210a      	movle	r1, #10
 8012e0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8012e10:	e7e4      	b.n	8012ddc <_strtod_l+0x234>
 8012e12:	2301      	movs	r3, #1
 8012e14:	9304      	str	r3, [sp, #16]
 8012e16:	e781      	b.n	8012d1c <_strtod_l+0x174>
 8012e18:	f04f 0c01 	mov.w	ip, #1
 8012e1c:	1cb3      	adds	r3, r6, #2
 8012e1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e20:	78b3      	ldrb	r3, [r6, #2]
 8012e22:	e78a      	b.n	8012d3a <_strtod_l+0x192>
 8012e24:	f04f 0c00 	mov.w	ip, #0
 8012e28:	e7f8      	b.n	8012e1c <_strtod_l+0x274>
 8012e2a:	bf00      	nop
 8012e2c:	08017e0c 	.word	0x08017e0c
 8012e30:	7ff00000 	.word	0x7ff00000
 8012e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e36:	1c5f      	adds	r7, r3, #1
 8012e38:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e3a:	785b      	ldrb	r3, [r3, #1]
 8012e3c:	2b30      	cmp	r3, #48	; 0x30
 8012e3e:	d0f9      	beq.n	8012e34 <_strtod_l+0x28c>
 8012e40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012e44:	2f08      	cmp	r7, #8
 8012e46:	f63f af7d 	bhi.w	8012d44 <_strtod_l+0x19c>
 8012e4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e50:	930a      	str	r3, [sp, #40]	; 0x28
 8012e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e54:	1c5f      	adds	r7, r3, #1
 8012e56:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e58:	785b      	ldrb	r3, [r3, #1]
 8012e5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012e5e:	f1b8 0f09 	cmp.w	r8, #9
 8012e62:	d937      	bls.n	8012ed4 <_strtod_l+0x32c>
 8012e64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012e66:	1a7f      	subs	r7, r7, r1
 8012e68:	2f08      	cmp	r7, #8
 8012e6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012e6e:	dc37      	bgt.n	8012ee0 <_strtod_l+0x338>
 8012e70:	45be      	cmp	lr, r7
 8012e72:	bfa8      	it	ge
 8012e74:	46be      	movge	lr, r7
 8012e76:	f1bc 0f00 	cmp.w	ip, #0
 8012e7a:	d001      	beq.n	8012e80 <_strtod_l+0x2d8>
 8012e7c:	f1ce 0e00 	rsb	lr, lr, #0
 8012e80:	2c00      	cmp	r4, #0
 8012e82:	d151      	bne.n	8012f28 <_strtod_l+0x380>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	f47f aece 	bne.w	8012c26 <_strtod_l+0x7e>
 8012e8a:	9a06      	ldr	r2, [sp, #24]
 8012e8c:	2a00      	cmp	r2, #0
 8012e8e:	f47f aeca 	bne.w	8012c26 <_strtod_l+0x7e>
 8012e92:	9a04      	ldr	r2, [sp, #16]
 8012e94:	2a00      	cmp	r2, #0
 8012e96:	f47f aee4 	bne.w	8012c62 <_strtod_l+0xba>
 8012e9a:	2b4e      	cmp	r3, #78	; 0x4e
 8012e9c:	d027      	beq.n	8012eee <_strtod_l+0x346>
 8012e9e:	dc21      	bgt.n	8012ee4 <_strtod_l+0x33c>
 8012ea0:	2b49      	cmp	r3, #73	; 0x49
 8012ea2:	f47f aede 	bne.w	8012c62 <_strtod_l+0xba>
 8012ea6:	49a0      	ldr	r1, [pc, #640]	; (8013128 <_strtod_l+0x580>)
 8012ea8:	a81b      	add	r0, sp, #108	; 0x6c
 8012eaa:	f001 fdd7 	bl	8014a5c <__match>
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	f43f aed7 	beq.w	8012c62 <_strtod_l+0xba>
 8012eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012eb6:	499d      	ldr	r1, [pc, #628]	; (801312c <_strtod_l+0x584>)
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	a81b      	add	r0, sp, #108	; 0x6c
 8012ebc:	931b      	str	r3, [sp, #108]	; 0x6c
 8012ebe:	f001 fdcd 	bl	8014a5c <__match>
 8012ec2:	b910      	cbnz	r0, 8012eca <_strtod_l+0x322>
 8012ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	931b      	str	r3, [sp, #108]	; 0x6c
 8012eca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013140 <_strtod_l+0x598>
 8012ece:	f04f 0a00 	mov.w	sl, #0
 8012ed2:	e6a8      	b.n	8012c26 <_strtod_l+0x7e>
 8012ed4:	210a      	movs	r1, #10
 8012ed6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012eda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012ede:	e7b8      	b.n	8012e52 <_strtod_l+0x2aa>
 8012ee0:	46be      	mov	lr, r7
 8012ee2:	e7c8      	b.n	8012e76 <_strtod_l+0x2ce>
 8012ee4:	2b69      	cmp	r3, #105	; 0x69
 8012ee6:	d0de      	beq.n	8012ea6 <_strtod_l+0x2fe>
 8012ee8:	2b6e      	cmp	r3, #110	; 0x6e
 8012eea:	f47f aeba 	bne.w	8012c62 <_strtod_l+0xba>
 8012eee:	4990      	ldr	r1, [pc, #576]	; (8013130 <_strtod_l+0x588>)
 8012ef0:	a81b      	add	r0, sp, #108	; 0x6c
 8012ef2:	f001 fdb3 	bl	8014a5c <__match>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	f43f aeb3 	beq.w	8012c62 <_strtod_l+0xba>
 8012efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	2b28      	cmp	r3, #40	; 0x28
 8012f02:	d10e      	bne.n	8012f22 <_strtod_l+0x37a>
 8012f04:	aa1e      	add	r2, sp, #120	; 0x78
 8012f06:	498b      	ldr	r1, [pc, #556]	; (8013134 <_strtod_l+0x58c>)
 8012f08:	a81b      	add	r0, sp, #108	; 0x6c
 8012f0a:	f001 fdbb 	bl	8014a84 <__hexnan>
 8012f0e:	2805      	cmp	r0, #5
 8012f10:	d107      	bne.n	8012f22 <_strtod_l+0x37a>
 8012f12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012f18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012f1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012f20:	e681      	b.n	8012c26 <_strtod_l+0x7e>
 8012f22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013148 <_strtod_l+0x5a0>
 8012f26:	e7d2      	b.n	8012ece <_strtod_l+0x326>
 8012f28:	ebae 0302 	sub.w	r3, lr, r2
 8012f2c:	9306      	str	r3, [sp, #24]
 8012f2e:	9b05      	ldr	r3, [sp, #20]
 8012f30:	9807      	ldr	r0, [sp, #28]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	bf08      	it	eq
 8012f36:	4623      	moveq	r3, r4
 8012f38:	2c10      	cmp	r4, #16
 8012f3a:	9305      	str	r3, [sp, #20]
 8012f3c:	46a0      	mov	r8, r4
 8012f3e:	bfa8      	it	ge
 8012f40:	f04f 0810 	movge.w	r8, #16
 8012f44:	f7ed faee 	bl	8000524 <__aeabi_ui2d>
 8012f48:	2c09      	cmp	r4, #9
 8012f4a:	4682      	mov	sl, r0
 8012f4c:	468b      	mov	fp, r1
 8012f4e:	dc13      	bgt.n	8012f78 <_strtod_l+0x3d0>
 8012f50:	9b06      	ldr	r3, [sp, #24]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	f43f ae67 	beq.w	8012c26 <_strtod_l+0x7e>
 8012f58:	9b06      	ldr	r3, [sp, #24]
 8012f5a:	dd7a      	ble.n	8013052 <_strtod_l+0x4aa>
 8012f5c:	2b16      	cmp	r3, #22
 8012f5e:	dc61      	bgt.n	8013024 <_strtod_l+0x47c>
 8012f60:	4a75      	ldr	r2, [pc, #468]	; (8013138 <_strtod_l+0x590>)
 8012f62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012f66:	e9de 0100 	ldrd	r0, r1, [lr]
 8012f6a:	4652      	mov	r2, sl
 8012f6c:	465b      	mov	r3, fp
 8012f6e:	f7ed fb53 	bl	8000618 <__aeabi_dmul>
 8012f72:	4682      	mov	sl, r0
 8012f74:	468b      	mov	fp, r1
 8012f76:	e656      	b.n	8012c26 <_strtod_l+0x7e>
 8012f78:	4b6f      	ldr	r3, [pc, #444]	; (8013138 <_strtod_l+0x590>)
 8012f7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012f7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012f82:	f7ed fb49 	bl	8000618 <__aeabi_dmul>
 8012f86:	4606      	mov	r6, r0
 8012f88:	4628      	mov	r0, r5
 8012f8a:	460f      	mov	r7, r1
 8012f8c:	f7ed faca 	bl	8000524 <__aeabi_ui2d>
 8012f90:	4602      	mov	r2, r0
 8012f92:	460b      	mov	r3, r1
 8012f94:	4630      	mov	r0, r6
 8012f96:	4639      	mov	r1, r7
 8012f98:	f7ed f988 	bl	80002ac <__adddf3>
 8012f9c:	2c0f      	cmp	r4, #15
 8012f9e:	4682      	mov	sl, r0
 8012fa0:	468b      	mov	fp, r1
 8012fa2:	ddd5      	ble.n	8012f50 <_strtod_l+0x3a8>
 8012fa4:	9b06      	ldr	r3, [sp, #24]
 8012fa6:	eba4 0808 	sub.w	r8, r4, r8
 8012faa:	4498      	add	r8, r3
 8012fac:	f1b8 0f00 	cmp.w	r8, #0
 8012fb0:	f340 8096 	ble.w	80130e0 <_strtod_l+0x538>
 8012fb4:	f018 030f 	ands.w	r3, r8, #15
 8012fb8:	d00a      	beq.n	8012fd0 <_strtod_l+0x428>
 8012fba:	495f      	ldr	r1, [pc, #380]	; (8013138 <_strtod_l+0x590>)
 8012fbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012fc0:	4652      	mov	r2, sl
 8012fc2:	465b      	mov	r3, fp
 8012fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fc8:	f7ed fb26 	bl	8000618 <__aeabi_dmul>
 8012fcc:	4682      	mov	sl, r0
 8012fce:	468b      	mov	fp, r1
 8012fd0:	f038 080f 	bics.w	r8, r8, #15
 8012fd4:	d073      	beq.n	80130be <_strtod_l+0x516>
 8012fd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012fda:	dd47      	ble.n	801306c <_strtod_l+0x4c4>
 8012fdc:	2400      	movs	r4, #0
 8012fde:	46a0      	mov	r8, r4
 8012fe0:	9407      	str	r4, [sp, #28]
 8012fe2:	9405      	str	r4, [sp, #20]
 8012fe4:	2322      	movs	r3, #34	; 0x22
 8012fe6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013140 <_strtod_l+0x598>
 8012fea:	f8c9 3000 	str.w	r3, [r9]
 8012fee:	f04f 0a00 	mov.w	sl, #0
 8012ff2:	9b07      	ldr	r3, [sp, #28]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f43f ae16 	beq.w	8012c26 <_strtod_l+0x7e>
 8012ffa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ffc:	4648      	mov	r0, r9
 8012ffe:	f001 fe3b 	bl	8014c78 <_Bfree>
 8013002:	9905      	ldr	r1, [sp, #20]
 8013004:	4648      	mov	r0, r9
 8013006:	f001 fe37 	bl	8014c78 <_Bfree>
 801300a:	4641      	mov	r1, r8
 801300c:	4648      	mov	r0, r9
 801300e:	f001 fe33 	bl	8014c78 <_Bfree>
 8013012:	9907      	ldr	r1, [sp, #28]
 8013014:	4648      	mov	r0, r9
 8013016:	f001 fe2f 	bl	8014c78 <_Bfree>
 801301a:	4621      	mov	r1, r4
 801301c:	4648      	mov	r0, r9
 801301e:	f001 fe2b 	bl	8014c78 <_Bfree>
 8013022:	e600      	b.n	8012c26 <_strtod_l+0x7e>
 8013024:	9a06      	ldr	r2, [sp, #24]
 8013026:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801302a:	4293      	cmp	r3, r2
 801302c:	dbba      	blt.n	8012fa4 <_strtod_l+0x3fc>
 801302e:	4d42      	ldr	r5, [pc, #264]	; (8013138 <_strtod_l+0x590>)
 8013030:	f1c4 040f 	rsb	r4, r4, #15
 8013034:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013038:	4652      	mov	r2, sl
 801303a:	465b      	mov	r3, fp
 801303c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013040:	f7ed faea 	bl	8000618 <__aeabi_dmul>
 8013044:	9b06      	ldr	r3, [sp, #24]
 8013046:	1b1c      	subs	r4, r3, r4
 8013048:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801304c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013050:	e78d      	b.n	8012f6e <_strtod_l+0x3c6>
 8013052:	f113 0f16 	cmn.w	r3, #22
 8013056:	dba5      	blt.n	8012fa4 <_strtod_l+0x3fc>
 8013058:	4a37      	ldr	r2, [pc, #220]	; (8013138 <_strtod_l+0x590>)
 801305a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801305e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013062:	4650      	mov	r0, sl
 8013064:	4659      	mov	r1, fp
 8013066:	f7ed fc01 	bl	800086c <__aeabi_ddiv>
 801306a:	e782      	b.n	8012f72 <_strtod_l+0x3ca>
 801306c:	2300      	movs	r3, #0
 801306e:	4e33      	ldr	r6, [pc, #204]	; (801313c <_strtod_l+0x594>)
 8013070:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013074:	4650      	mov	r0, sl
 8013076:	4659      	mov	r1, fp
 8013078:	461d      	mov	r5, r3
 801307a:	f1b8 0f01 	cmp.w	r8, #1
 801307e:	dc21      	bgt.n	80130c4 <_strtod_l+0x51c>
 8013080:	b10b      	cbz	r3, 8013086 <_strtod_l+0x4de>
 8013082:	4682      	mov	sl, r0
 8013084:	468b      	mov	fp, r1
 8013086:	4b2d      	ldr	r3, [pc, #180]	; (801313c <_strtod_l+0x594>)
 8013088:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801308c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013090:	4652      	mov	r2, sl
 8013092:	465b      	mov	r3, fp
 8013094:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013098:	f7ed fabe 	bl	8000618 <__aeabi_dmul>
 801309c:	4b28      	ldr	r3, [pc, #160]	; (8013140 <_strtod_l+0x598>)
 801309e:	460a      	mov	r2, r1
 80130a0:	400b      	ands	r3, r1
 80130a2:	4928      	ldr	r1, [pc, #160]	; (8013144 <_strtod_l+0x59c>)
 80130a4:	428b      	cmp	r3, r1
 80130a6:	4682      	mov	sl, r0
 80130a8:	d898      	bhi.n	8012fdc <_strtod_l+0x434>
 80130aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80130ae:	428b      	cmp	r3, r1
 80130b0:	bf86      	itte	hi
 80130b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801314c <_strtod_l+0x5a4>
 80130b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80130ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80130be:	2300      	movs	r3, #0
 80130c0:	9304      	str	r3, [sp, #16]
 80130c2:	e077      	b.n	80131b4 <_strtod_l+0x60c>
 80130c4:	f018 0f01 	tst.w	r8, #1
 80130c8:	d006      	beq.n	80130d8 <_strtod_l+0x530>
 80130ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80130ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d2:	f7ed faa1 	bl	8000618 <__aeabi_dmul>
 80130d6:	2301      	movs	r3, #1
 80130d8:	3501      	adds	r5, #1
 80130da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80130de:	e7cc      	b.n	801307a <_strtod_l+0x4d2>
 80130e0:	d0ed      	beq.n	80130be <_strtod_l+0x516>
 80130e2:	f1c8 0800 	rsb	r8, r8, #0
 80130e6:	f018 020f 	ands.w	r2, r8, #15
 80130ea:	d00a      	beq.n	8013102 <_strtod_l+0x55a>
 80130ec:	4b12      	ldr	r3, [pc, #72]	; (8013138 <_strtod_l+0x590>)
 80130ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130f2:	4650      	mov	r0, sl
 80130f4:	4659      	mov	r1, fp
 80130f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fa:	f7ed fbb7 	bl	800086c <__aeabi_ddiv>
 80130fe:	4682      	mov	sl, r0
 8013100:	468b      	mov	fp, r1
 8013102:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013106:	d0da      	beq.n	80130be <_strtod_l+0x516>
 8013108:	f1b8 0f1f 	cmp.w	r8, #31
 801310c:	dd20      	ble.n	8013150 <_strtod_l+0x5a8>
 801310e:	2400      	movs	r4, #0
 8013110:	46a0      	mov	r8, r4
 8013112:	9407      	str	r4, [sp, #28]
 8013114:	9405      	str	r4, [sp, #20]
 8013116:	2322      	movs	r3, #34	; 0x22
 8013118:	f04f 0a00 	mov.w	sl, #0
 801311c:	f04f 0b00 	mov.w	fp, #0
 8013120:	f8c9 3000 	str.w	r3, [r9]
 8013124:	e765      	b.n	8012ff2 <_strtod_l+0x44a>
 8013126:	bf00      	nop
 8013128:	08017dd9 	.word	0x08017dd9
 801312c:	08017e63 	.word	0x08017e63
 8013130:	08017de1 	.word	0x08017de1
 8013134:	08017e20 	.word	0x08017e20
 8013138:	08017ea0 	.word	0x08017ea0
 801313c:	08017e78 	.word	0x08017e78
 8013140:	7ff00000 	.word	0x7ff00000
 8013144:	7ca00000 	.word	0x7ca00000
 8013148:	fff80000 	.word	0xfff80000
 801314c:	7fefffff 	.word	0x7fefffff
 8013150:	f018 0310 	ands.w	r3, r8, #16
 8013154:	bf18      	it	ne
 8013156:	236a      	movne	r3, #106	; 0x6a
 8013158:	4da0      	ldr	r5, [pc, #640]	; (80133dc <_strtod_l+0x834>)
 801315a:	9304      	str	r3, [sp, #16]
 801315c:	4650      	mov	r0, sl
 801315e:	4659      	mov	r1, fp
 8013160:	2300      	movs	r3, #0
 8013162:	f1b8 0f00 	cmp.w	r8, #0
 8013166:	f300 810a 	bgt.w	801337e <_strtod_l+0x7d6>
 801316a:	b10b      	cbz	r3, 8013170 <_strtod_l+0x5c8>
 801316c:	4682      	mov	sl, r0
 801316e:	468b      	mov	fp, r1
 8013170:	9b04      	ldr	r3, [sp, #16]
 8013172:	b1bb      	cbz	r3, 80131a4 <_strtod_l+0x5fc>
 8013174:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013178:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801317c:	2b00      	cmp	r3, #0
 801317e:	4659      	mov	r1, fp
 8013180:	dd10      	ble.n	80131a4 <_strtod_l+0x5fc>
 8013182:	2b1f      	cmp	r3, #31
 8013184:	f340 8107 	ble.w	8013396 <_strtod_l+0x7ee>
 8013188:	2b34      	cmp	r3, #52	; 0x34
 801318a:	bfde      	ittt	le
 801318c:	3b20      	suble	r3, #32
 801318e:	f04f 32ff 	movle.w	r2, #4294967295
 8013192:	fa02 f303 	lslle.w	r3, r2, r3
 8013196:	f04f 0a00 	mov.w	sl, #0
 801319a:	bfcc      	ite	gt
 801319c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80131a0:	ea03 0b01 	andle.w	fp, r3, r1
 80131a4:	2200      	movs	r2, #0
 80131a6:	2300      	movs	r3, #0
 80131a8:	4650      	mov	r0, sl
 80131aa:	4659      	mov	r1, fp
 80131ac:	f7ed fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80131b0:	2800      	cmp	r0, #0
 80131b2:	d1ac      	bne.n	801310e <_strtod_l+0x566>
 80131b4:	9b07      	ldr	r3, [sp, #28]
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	9a05      	ldr	r2, [sp, #20]
 80131ba:	9908      	ldr	r1, [sp, #32]
 80131bc:	4623      	mov	r3, r4
 80131be:	4648      	mov	r0, r9
 80131c0:	f001 fdac 	bl	8014d1c <__s2b>
 80131c4:	9007      	str	r0, [sp, #28]
 80131c6:	2800      	cmp	r0, #0
 80131c8:	f43f af08 	beq.w	8012fdc <_strtod_l+0x434>
 80131cc:	9a06      	ldr	r2, [sp, #24]
 80131ce:	9b06      	ldr	r3, [sp, #24]
 80131d0:	2a00      	cmp	r2, #0
 80131d2:	f1c3 0300 	rsb	r3, r3, #0
 80131d6:	bfa8      	it	ge
 80131d8:	2300      	movge	r3, #0
 80131da:	930e      	str	r3, [sp, #56]	; 0x38
 80131dc:	2400      	movs	r4, #0
 80131de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80131e2:	9316      	str	r3, [sp, #88]	; 0x58
 80131e4:	46a0      	mov	r8, r4
 80131e6:	9b07      	ldr	r3, [sp, #28]
 80131e8:	4648      	mov	r0, r9
 80131ea:	6859      	ldr	r1, [r3, #4]
 80131ec:	f001 fd10 	bl	8014c10 <_Balloc>
 80131f0:	9005      	str	r0, [sp, #20]
 80131f2:	2800      	cmp	r0, #0
 80131f4:	f43f aef6 	beq.w	8012fe4 <_strtod_l+0x43c>
 80131f8:	9b07      	ldr	r3, [sp, #28]
 80131fa:	691a      	ldr	r2, [r3, #16]
 80131fc:	3202      	adds	r2, #2
 80131fe:	f103 010c 	add.w	r1, r3, #12
 8013202:	0092      	lsls	r2, r2, #2
 8013204:	300c      	adds	r0, #12
 8013206:	f7fe fcfb 	bl	8011c00 <memcpy>
 801320a:	aa1e      	add	r2, sp, #120	; 0x78
 801320c:	a91d      	add	r1, sp, #116	; 0x74
 801320e:	ec4b ab10 	vmov	d0, sl, fp
 8013212:	4648      	mov	r0, r9
 8013214:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013218:	f002 f83c 	bl	8015294 <__d2b>
 801321c:	901c      	str	r0, [sp, #112]	; 0x70
 801321e:	2800      	cmp	r0, #0
 8013220:	f43f aee0 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013224:	2101      	movs	r1, #1
 8013226:	4648      	mov	r0, r9
 8013228:	f001 fe04 	bl	8014e34 <__i2b>
 801322c:	4680      	mov	r8, r0
 801322e:	2800      	cmp	r0, #0
 8013230:	f43f aed8 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013234:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013236:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013238:	2e00      	cmp	r6, #0
 801323a:	bfab      	itete	ge
 801323c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801323e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013240:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013242:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013244:	bfac      	ite	ge
 8013246:	18f7      	addge	r7, r6, r3
 8013248:	1b9d      	sublt	r5, r3, r6
 801324a:	9b04      	ldr	r3, [sp, #16]
 801324c:	1af6      	subs	r6, r6, r3
 801324e:	4416      	add	r6, r2
 8013250:	4b63      	ldr	r3, [pc, #396]	; (80133e0 <_strtod_l+0x838>)
 8013252:	3e01      	subs	r6, #1
 8013254:	429e      	cmp	r6, r3
 8013256:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801325a:	f280 80af 	bge.w	80133bc <_strtod_l+0x814>
 801325e:	1b9b      	subs	r3, r3, r6
 8013260:	2b1f      	cmp	r3, #31
 8013262:	eba2 0203 	sub.w	r2, r2, r3
 8013266:	f04f 0101 	mov.w	r1, #1
 801326a:	f300 809b 	bgt.w	80133a4 <_strtod_l+0x7fc>
 801326e:	fa01 f303 	lsl.w	r3, r1, r3
 8013272:	930f      	str	r3, [sp, #60]	; 0x3c
 8013274:	2300      	movs	r3, #0
 8013276:	930a      	str	r3, [sp, #40]	; 0x28
 8013278:	18be      	adds	r6, r7, r2
 801327a:	9b04      	ldr	r3, [sp, #16]
 801327c:	42b7      	cmp	r7, r6
 801327e:	4415      	add	r5, r2
 8013280:	441d      	add	r5, r3
 8013282:	463b      	mov	r3, r7
 8013284:	bfa8      	it	ge
 8013286:	4633      	movge	r3, r6
 8013288:	42ab      	cmp	r3, r5
 801328a:	bfa8      	it	ge
 801328c:	462b      	movge	r3, r5
 801328e:	2b00      	cmp	r3, #0
 8013290:	bfc2      	ittt	gt
 8013292:	1af6      	subgt	r6, r6, r3
 8013294:	1aed      	subgt	r5, r5, r3
 8013296:	1aff      	subgt	r7, r7, r3
 8013298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801329a:	b1bb      	cbz	r3, 80132cc <_strtod_l+0x724>
 801329c:	4641      	mov	r1, r8
 801329e:	461a      	mov	r2, r3
 80132a0:	4648      	mov	r0, r9
 80132a2:	f001 fe67 	bl	8014f74 <__pow5mult>
 80132a6:	4680      	mov	r8, r0
 80132a8:	2800      	cmp	r0, #0
 80132aa:	f43f ae9b 	beq.w	8012fe4 <_strtod_l+0x43c>
 80132ae:	4601      	mov	r1, r0
 80132b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80132b2:	4648      	mov	r0, r9
 80132b4:	f001 fdc7 	bl	8014e46 <__multiply>
 80132b8:	900c      	str	r0, [sp, #48]	; 0x30
 80132ba:	2800      	cmp	r0, #0
 80132bc:	f43f ae92 	beq.w	8012fe4 <_strtod_l+0x43c>
 80132c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132c2:	4648      	mov	r0, r9
 80132c4:	f001 fcd8 	bl	8014c78 <_Bfree>
 80132c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132ca:	931c      	str	r3, [sp, #112]	; 0x70
 80132cc:	2e00      	cmp	r6, #0
 80132ce:	dc7a      	bgt.n	80133c6 <_strtod_l+0x81e>
 80132d0:	9b06      	ldr	r3, [sp, #24]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	dd08      	ble.n	80132e8 <_strtod_l+0x740>
 80132d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80132d8:	9905      	ldr	r1, [sp, #20]
 80132da:	4648      	mov	r0, r9
 80132dc:	f001 fe4a 	bl	8014f74 <__pow5mult>
 80132e0:	9005      	str	r0, [sp, #20]
 80132e2:	2800      	cmp	r0, #0
 80132e4:	f43f ae7e 	beq.w	8012fe4 <_strtod_l+0x43c>
 80132e8:	2d00      	cmp	r5, #0
 80132ea:	dd08      	ble.n	80132fe <_strtod_l+0x756>
 80132ec:	462a      	mov	r2, r5
 80132ee:	9905      	ldr	r1, [sp, #20]
 80132f0:	4648      	mov	r0, r9
 80132f2:	f001 fe8d 	bl	8015010 <__lshift>
 80132f6:	9005      	str	r0, [sp, #20]
 80132f8:	2800      	cmp	r0, #0
 80132fa:	f43f ae73 	beq.w	8012fe4 <_strtod_l+0x43c>
 80132fe:	2f00      	cmp	r7, #0
 8013300:	dd08      	ble.n	8013314 <_strtod_l+0x76c>
 8013302:	4641      	mov	r1, r8
 8013304:	463a      	mov	r2, r7
 8013306:	4648      	mov	r0, r9
 8013308:	f001 fe82 	bl	8015010 <__lshift>
 801330c:	4680      	mov	r8, r0
 801330e:	2800      	cmp	r0, #0
 8013310:	f43f ae68 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013314:	9a05      	ldr	r2, [sp, #20]
 8013316:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013318:	4648      	mov	r0, r9
 801331a:	f001 fee7 	bl	80150ec <__mdiff>
 801331e:	4604      	mov	r4, r0
 8013320:	2800      	cmp	r0, #0
 8013322:	f43f ae5f 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013326:	68c3      	ldr	r3, [r0, #12]
 8013328:	930c      	str	r3, [sp, #48]	; 0x30
 801332a:	2300      	movs	r3, #0
 801332c:	60c3      	str	r3, [r0, #12]
 801332e:	4641      	mov	r1, r8
 8013330:	f001 fec2 	bl	80150b8 <__mcmp>
 8013334:	2800      	cmp	r0, #0
 8013336:	da55      	bge.n	80133e4 <_strtod_l+0x83c>
 8013338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801333a:	b9e3      	cbnz	r3, 8013376 <_strtod_l+0x7ce>
 801333c:	f1ba 0f00 	cmp.w	sl, #0
 8013340:	d119      	bne.n	8013376 <_strtod_l+0x7ce>
 8013342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013346:	b9b3      	cbnz	r3, 8013376 <_strtod_l+0x7ce>
 8013348:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801334c:	0d1b      	lsrs	r3, r3, #20
 801334e:	051b      	lsls	r3, r3, #20
 8013350:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013354:	d90f      	bls.n	8013376 <_strtod_l+0x7ce>
 8013356:	6963      	ldr	r3, [r4, #20]
 8013358:	b913      	cbnz	r3, 8013360 <_strtod_l+0x7b8>
 801335a:	6923      	ldr	r3, [r4, #16]
 801335c:	2b01      	cmp	r3, #1
 801335e:	dd0a      	ble.n	8013376 <_strtod_l+0x7ce>
 8013360:	4621      	mov	r1, r4
 8013362:	2201      	movs	r2, #1
 8013364:	4648      	mov	r0, r9
 8013366:	f001 fe53 	bl	8015010 <__lshift>
 801336a:	4641      	mov	r1, r8
 801336c:	4604      	mov	r4, r0
 801336e:	f001 fea3 	bl	80150b8 <__mcmp>
 8013372:	2800      	cmp	r0, #0
 8013374:	dc67      	bgt.n	8013446 <_strtod_l+0x89e>
 8013376:	9b04      	ldr	r3, [sp, #16]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d171      	bne.n	8013460 <_strtod_l+0x8b8>
 801337c:	e63d      	b.n	8012ffa <_strtod_l+0x452>
 801337e:	f018 0f01 	tst.w	r8, #1
 8013382:	d004      	beq.n	801338e <_strtod_l+0x7e6>
 8013384:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013388:	f7ed f946 	bl	8000618 <__aeabi_dmul>
 801338c:	2301      	movs	r3, #1
 801338e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013392:	3508      	adds	r5, #8
 8013394:	e6e5      	b.n	8013162 <_strtod_l+0x5ba>
 8013396:	f04f 32ff 	mov.w	r2, #4294967295
 801339a:	fa02 f303 	lsl.w	r3, r2, r3
 801339e:	ea03 0a0a 	and.w	sl, r3, sl
 80133a2:	e6ff      	b.n	80131a4 <_strtod_l+0x5fc>
 80133a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80133a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80133ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80133b0:	36e2      	adds	r6, #226	; 0xe2
 80133b2:	fa01 f306 	lsl.w	r3, r1, r6
 80133b6:	930a      	str	r3, [sp, #40]	; 0x28
 80133b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80133ba:	e75d      	b.n	8013278 <_strtod_l+0x6d0>
 80133bc:	2300      	movs	r3, #0
 80133be:	930a      	str	r3, [sp, #40]	; 0x28
 80133c0:	2301      	movs	r3, #1
 80133c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80133c4:	e758      	b.n	8013278 <_strtod_l+0x6d0>
 80133c6:	4632      	mov	r2, r6
 80133c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80133ca:	4648      	mov	r0, r9
 80133cc:	f001 fe20 	bl	8015010 <__lshift>
 80133d0:	901c      	str	r0, [sp, #112]	; 0x70
 80133d2:	2800      	cmp	r0, #0
 80133d4:	f47f af7c 	bne.w	80132d0 <_strtod_l+0x728>
 80133d8:	e604      	b.n	8012fe4 <_strtod_l+0x43c>
 80133da:	bf00      	nop
 80133dc:	08017e38 	.word	0x08017e38
 80133e0:	fffffc02 	.word	0xfffffc02
 80133e4:	465d      	mov	r5, fp
 80133e6:	f040 8086 	bne.w	80134f6 <_strtod_l+0x94e>
 80133ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80133f0:	b32a      	cbz	r2, 801343e <_strtod_l+0x896>
 80133f2:	4aaf      	ldr	r2, [pc, #700]	; (80136b0 <_strtod_l+0xb08>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d153      	bne.n	80134a0 <_strtod_l+0x8f8>
 80133f8:	9b04      	ldr	r3, [sp, #16]
 80133fa:	4650      	mov	r0, sl
 80133fc:	b1d3      	cbz	r3, 8013434 <_strtod_l+0x88c>
 80133fe:	4aad      	ldr	r2, [pc, #692]	; (80136b4 <_strtod_l+0xb0c>)
 8013400:	402a      	ands	r2, r5
 8013402:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013406:	f04f 31ff 	mov.w	r1, #4294967295
 801340a:	d816      	bhi.n	801343a <_strtod_l+0x892>
 801340c:	0d12      	lsrs	r2, r2, #20
 801340e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013412:	fa01 f303 	lsl.w	r3, r1, r3
 8013416:	4298      	cmp	r0, r3
 8013418:	d142      	bne.n	80134a0 <_strtod_l+0x8f8>
 801341a:	4ba7      	ldr	r3, [pc, #668]	; (80136b8 <_strtod_l+0xb10>)
 801341c:	429d      	cmp	r5, r3
 801341e:	d102      	bne.n	8013426 <_strtod_l+0x87e>
 8013420:	3001      	adds	r0, #1
 8013422:	f43f addf 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013426:	4ba3      	ldr	r3, [pc, #652]	; (80136b4 <_strtod_l+0xb0c>)
 8013428:	402b      	ands	r3, r5
 801342a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801342e:	f04f 0a00 	mov.w	sl, #0
 8013432:	e7a0      	b.n	8013376 <_strtod_l+0x7ce>
 8013434:	f04f 33ff 	mov.w	r3, #4294967295
 8013438:	e7ed      	b.n	8013416 <_strtod_l+0x86e>
 801343a:	460b      	mov	r3, r1
 801343c:	e7eb      	b.n	8013416 <_strtod_l+0x86e>
 801343e:	bb7b      	cbnz	r3, 80134a0 <_strtod_l+0x8f8>
 8013440:	f1ba 0f00 	cmp.w	sl, #0
 8013444:	d12c      	bne.n	80134a0 <_strtod_l+0x8f8>
 8013446:	9904      	ldr	r1, [sp, #16]
 8013448:	4a9a      	ldr	r2, [pc, #616]	; (80136b4 <_strtod_l+0xb0c>)
 801344a:	465b      	mov	r3, fp
 801344c:	b1f1      	cbz	r1, 801348c <_strtod_l+0x8e4>
 801344e:	ea02 010b 	and.w	r1, r2, fp
 8013452:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013456:	dc19      	bgt.n	801348c <_strtod_l+0x8e4>
 8013458:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801345c:	f77f ae5b 	ble.w	8013116 <_strtod_l+0x56e>
 8013460:	4a96      	ldr	r2, [pc, #600]	; (80136bc <_strtod_l+0xb14>)
 8013462:	2300      	movs	r3, #0
 8013464:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013468:	4650      	mov	r0, sl
 801346a:	4659      	mov	r1, fp
 801346c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013470:	f7ed f8d2 	bl	8000618 <__aeabi_dmul>
 8013474:	4682      	mov	sl, r0
 8013476:	468b      	mov	fp, r1
 8013478:	2900      	cmp	r1, #0
 801347a:	f47f adbe 	bne.w	8012ffa <_strtod_l+0x452>
 801347e:	2800      	cmp	r0, #0
 8013480:	f47f adbb 	bne.w	8012ffa <_strtod_l+0x452>
 8013484:	2322      	movs	r3, #34	; 0x22
 8013486:	f8c9 3000 	str.w	r3, [r9]
 801348a:	e5b6      	b.n	8012ffa <_strtod_l+0x452>
 801348c:	4013      	ands	r3, r2
 801348e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013492:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013496:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801349a:	f04f 3aff 	mov.w	sl, #4294967295
 801349e:	e76a      	b.n	8013376 <_strtod_l+0x7ce>
 80134a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134a2:	b193      	cbz	r3, 80134ca <_strtod_l+0x922>
 80134a4:	422b      	tst	r3, r5
 80134a6:	f43f af66 	beq.w	8013376 <_strtod_l+0x7ce>
 80134aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134ac:	9a04      	ldr	r2, [sp, #16]
 80134ae:	4650      	mov	r0, sl
 80134b0:	4659      	mov	r1, fp
 80134b2:	b173      	cbz	r3, 80134d2 <_strtod_l+0x92a>
 80134b4:	f7ff fb5b 	bl	8012b6e <sulp>
 80134b8:	4602      	mov	r2, r0
 80134ba:	460b      	mov	r3, r1
 80134bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134c0:	f7ec fef4 	bl	80002ac <__adddf3>
 80134c4:	4682      	mov	sl, r0
 80134c6:	468b      	mov	fp, r1
 80134c8:	e755      	b.n	8013376 <_strtod_l+0x7ce>
 80134ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134cc:	ea13 0f0a 	tst.w	r3, sl
 80134d0:	e7e9      	b.n	80134a6 <_strtod_l+0x8fe>
 80134d2:	f7ff fb4c 	bl	8012b6e <sulp>
 80134d6:	4602      	mov	r2, r0
 80134d8:	460b      	mov	r3, r1
 80134da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134de:	f7ec fee3 	bl	80002a8 <__aeabi_dsub>
 80134e2:	2200      	movs	r2, #0
 80134e4:	2300      	movs	r3, #0
 80134e6:	4682      	mov	sl, r0
 80134e8:	468b      	mov	fp, r1
 80134ea:	f7ed fafd 	bl	8000ae8 <__aeabi_dcmpeq>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	f47f ae11 	bne.w	8013116 <_strtod_l+0x56e>
 80134f4:	e73f      	b.n	8013376 <_strtod_l+0x7ce>
 80134f6:	4641      	mov	r1, r8
 80134f8:	4620      	mov	r0, r4
 80134fa:	f001 ff1a 	bl	8015332 <__ratio>
 80134fe:	ec57 6b10 	vmov	r6, r7, d0
 8013502:	2200      	movs	r2, #0
 8013504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013508:	ee10 0a10 	vmov	r0, s0
 801350c:	4639      	mov	r1, r7
 801350e:	f7ed faff 	bl	8000b10 <__aeabi_dcmple>
 8013512:	2800      	cmp	r0, #0
 8013514:	d077      	beq.n	8013606 <_strtod_l+0xa5e>
 8013516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013518:	2b00      	cmp	r3, #0
 801351a:	d04a      	beq.n	80135b2 <_strtod_l+0xa0a>
 801351c:	4b68      	ldr	r3, [pc, #416]	; (80136c0 <_strtod_l+0xb18>)
 801351e:	2200      	movs	r2, #0
 8013520:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013524:	4f66      	ldr	r7, [pc, #408]	; (80136c0 <_strtod_l+0xb18>)
 8013526:	2600      	movs	r6, #0
 8013528:	4b62      	ldr	r3, [pc, #392]	; (80136b4 <_strtod_l+0xb0c>)
 801352a:	402b      	ands	r3, r5
 801352c:	930f      	str	r3, [sp, #60]	; 0x3c
 801352e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013530:	4b64      	ldr	r3, [pc, #400]	; (80136c4 <_strtod_l+0xb1c>)
 8013532:	429a      	cmp	r2, r3
 8013534:	f040 80ce 	bne.w	80136d4 <_strtod_l+0xb2c>
 8013538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801353c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013540:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013544:	ec4b ab10 	vmov	d0, sl, fp
 8013548:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801354c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013550:	f001 fe2a 	bl	80151a8 <__ulp>
 8013554:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013558:	ec53 2b10 	vmov	r2, r3, d0
 801355c:	f7ed f85c 	bl	8000618 <__aeabi_dmul>
 8013560:	4652      	mov	r2, sl
 8013562:	465b      	mov	r3, fp
 8013564:	f7ec fea2 	bl	80002ac <__adddf3>
 8013568:	460b      	mov	r3, r1
 801356a:	4952      	ldr	r1, [pc, #328]	; (80136b4 <_strtod_l+0xb0c>)
 801356c:	4a56      	ldr	r2, [pc, #344]	; (80136c8 <_strtod_l+0xb20>)
 801356e:	4019      	ands	r1, r3
 8013570:	4291      	cmp	r1, r2
 8013572:	4682      	mov	sl, r0
 8013574:	d95b      	bls.n	801362e <_strtod_l+0xa86>
 8013576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013578:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801357c:	4293      	cmp	r3, r2
 801357e:	d103      	bne.n	8013588 <_strtod_l+0x9e0>
 8013580:	9b08      	ldr	r3, [sp, #32]
 8013582:	3301      	adds	r3, #1
 8013584:	f43f ad2e 	beq.w	8012fe4 <_strtod_l+0x43c>
 8013588:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80136b8 <_strtod_l+0xb10>
 801358c:	f04f 3aff 	mov.w	sl, #4294967295
 8013590:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013592:	4648      	mov	r0, r9
 8013594:	f001 fb70 	bl	8014c78 <_Bfree>
 8013598:	9905      	ldr	r1, [sp, #20]
 801359a:	4648      	mov	r0, r9
 801359c:	f001 fb6c 	bl	8014c78 <_Bfree>
 80135a0:	4641      	mov	r1, r8
 80135a2:	4648      	mov	r0, r9
 80135a4:	f001 fb68 	bl	8014c78 <_Bfree>
 80135a8:	4621      	mov	r1, r4
 80135aa:	4648      	mov	r0, r9
 80135ac:	f001 fb64 	bl	8014c78 <_Bfree>
 80135b0:	e619      	b.n	80131e6 <_strtod_l+0x63e>
 80135b2:	f1ba 0f00 	cmp.w	sl, #0
 80135b6:	d11a      	bne.n	80135ee <_strtod_l+0xa46>
 80135b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135bc:	b9eb      	cbnz	r3, 80135fa <_strtod_l+0xa52>
 80135be:	2200      	movs	r2, #0
 80135c0:	4b3f      	ldr	r3, [pc, #252]	; (80136c0 <_strtod_l+0xb18>)
 80135c2:	4630      	mov	r0, r6
 80135c4:	4639      	mov	r1, r7
 80135c6:	f7ed fa99 	bl	8000afc <__aeabi_dcmplt>
 80135ca:	b9c8      	cbnz	r0, 8013600 <_strtod_l+0xa58>
 80135cc:	4630      	mov	r0, r6
 80135ce:	4639      	mov	r1, r7
 80135d0:	2200      	movs	r2, #0
 80135d2:	4b3e      	ldr	r3, [pc, #248]	; (80136cc <_strtod_l+0xb24>)
 80135d4:	f7ed f820 	bl	8000618 <__aeabi_dmul>
 80135d8:	4606      	mov	r6, r0
 80135da:	460f      	mov	r7, r1
 80135dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80135e0:	9618      	str	r6, [sp, #96]	; 0x60
 80135e2:	9319      	str	r3, [sp, #100]	; 0x64
 80135e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80135e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80135ec:	e79c      	b.n	8013528 <_strtod_l+0x980>
 80135ee:	f1ba 0f01 	cmp.w	sl, #1
 80135f2:	d102      	bne.n	80135fa <_strtod_l+0xa52>
 80135f4:	2d00      	cmp	r5, #0
 80135f6:	f43f ad8e 	beq.w	8013116 <_strtod_l+0x56e>
 80135fa:	2200      	movs	r2, #0
 80135fc:	4b34      	ldr	r3, [pc, #208]	; (80136d0 <_strtod_l+0xb28>)
 80135fe:	e78f      	b.n	8013520 <_strtod_l+0x978>
 8013600:	2600      	movs	r6, #0
 8013602:	4f32      	ldr	r7, [pc, #200]	; (80136cc <_strtod_l+0xb24>)
 8013604:	e7ea      	b.n	80135dc <_strtod_l+0xa34>
 8013606:	4b31      	ldr	r3, [pc, #196]	; (80136cc <_strtod_l+0xb24>)
 8013608:	4630      	mov	r0, r6
 801360a:	4639      	mov	r1, r7
 801360c:	2200      	movs	r2, #0
 801360e:	f7ed f803 	bl	8000618 <__aeabi_dmul>
 8013612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013614:	4606      	mov	r6, r0
 8013616:	460f      	mov	r7, r1
 8013618:	b933      	cbnz	r3, 8013628 <_strtod_l+0xa80>
 801361a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801361e:	9010      	str	r0, [sp, #64]	; 0x40
 8013620:	9311      	str	r3, [sp, #68]	; 0x44
 8013622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013626:	e7df      	b.n	80135e8 <_strtod_l+0xa40>
 8013628:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801362c:	e7f9      	b.n	8013622 <_strtod_l+0xa7a>
 801362e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013632:	9b04      	ldr	r3, [sp, #16]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1ab      	bne.n	8013590 <_strtod_l+0x9e8>
 8013638:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801363c:	0d1b      	lsrs	r3, r3, #20
 801363e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013640:	051b      	lsls	r3, r3, #20
 8013642:	429a      	cmp	r2, r3
 8013644:	465d      	mov	r5, fp
 8013646:	d1a3      	bne.n	8013590 <_strtod_l+0x9e8>
 8013648:	4639      	mov	r1, r7
 801364a:	4630      	mov	r0, r6
 801364c:	f7ed fa94 	bl	8000b78 <__aeabi_d2iz>
 8013650:	f7ec ff78 	bl	8000544 <__aeabi_i2d>
 8013654:	460b      	mov	r3, r1
 8013656:	4602      	mov	r2, r0
 8013658:	4639      	mov	r1, r7
 801365a:	4630      	mov	r0, r6
 801365c:	f7ec fe24 	bl	80002a8 <__aeabi_dsub>
 8013660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013662:	4606      	mov	r6, r0
 8013664:	460f      	mov	r7, r1
 8013666:	b933      	cbnz	r3, 8013676 <_strtod_l+0xace>
 8013668:	f1ba 0f00 	cmp.w	sl, #0
 801366c:	d103      	bne.n	8013676 <_strtod_l+0xace>
 801366e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013672:	2d00      	cmp	r5, #0
 8013674:	d06d      	beq.n	8013752 <_strtod_l+0xbaa>
 8013676:	a30a      	add	r3, pc, #40	; (adr r3, 80136a0 <_strtod_l+0xaf8>)
 8013678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367c:	4630      	mov	r0, r6
 801367e:	4639      	mov	r1, r7
 8013680:	f7ed fa3c 	bl	8000afc <__aeabi_dcmplt>
 8013684:	2800      	cmp	r0, #0
 8013686:	f47f acb8 	bne.w	8012ffa <_strtod_l+0x452>
 801368a:	a307      	add	r3, pc, #28	; (adr r3, 80136a8 <_strtod_l+0xb00>)
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	4630      	mov	r0, r6
 8013692:	4639      	mov	r1, r7
 8013694:	f7ed fa50 	bl	8000b38 <__aeabi_dcmpgt>
 8013698:	2800      	cmp	r0, #0
 801369a:	f43f af79 	beq.w	8013590 <_strtod_l+0x9e8>
 801369e:	e4ac      	b.n	8012ffa <_strtod_l+0x452>
 80136a0:	94a03595 	.word	0x94a03595
 80136a4:	3fdfffff 	.word	0x3fdfffff
 80136a8:	35afe535 	.word	0x35afe535
 80136ac:	3fe00000 	.word	0x3fe00000
 80136b0:	000fffff 	.word	0x000fffff
 80136b4:	7ff00000 	.word	0x7ff00000
 80136b8:	7fefffff 	.word	0x7fefffff
 80136bc:	39500000 	.word	0x39500000
 80136c0:	3ff00000 	.word	0x3ff00000
 80136c4:	7fe00000 	.word	0x7fe00000
 80136c8:	7c9fffff 	.word	0x7c9fffff
 80136cc:	3fe00000 	.word	0x3fe00000
 80136d0:	bff00000 	.word	0xbff00000
 80136d4:	9b04      	ldr	r3, [sp, #16]
 80136d6:	b333      	cbz	r3, 8013726 <_strtod_l+0xb7e>
 80136d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80136de:	d822      	bhi.n	8013726 <_strtod_l+0xb7e>
 80136e0:	a327      	add	r3, pc, #156	; (adr r3, 8013780 <_strtod_l+0xbd8>)
 80136e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e6:	4630      	mov	r0, r6
 80136e8:	4639      	mov	r1, r7
 80136ea:	f7ed fa11 	bl	8000b10 <__aeabi_dcmple>
 80136ee:	b1a0      	cbz	r0, 801371a <_strtod_l+0xb72>
 80136f0:	4639      	mov	r1, r7
 80136f2:	4630      	mov	r0, r6
 80136f4:	f7ed fa68 	bl	8000bc8 <__aeabi_d2uiz>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	bf08      	it	eq
 80136fc:	2001      	moveq	r0, #1
 80136fe:	f7ec ff11 	bl	8000524 <__aeabi_ui2d>
 8013702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013704:	4606      	mov	r6, r0
 8013706:	460f      	mov	r7, r1
 8013708:	bb03      	cbnz	r3, 801374c <_strtod_l+0xba4>
 801370a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801370e:	9012      	str	r0, [sp, #72]	; 0x48
 8013710:	9313      	str	r3, [sp, #76]	; 0x4c
 8013712:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013716:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801371a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801371c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801371e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013722:	1a9b      	subs	r3, r3, r2
 8013724:	930b      	str	r3, [sp, #44]	; 0x2c
 8013726:	ed9d 0b08 	vldr	d0, [sp, #32]
 801372a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801372e:	f001 fd3b 	bl	80151a8 <__ulp>
 8013732:	4650      	mov	r0, sl
 8013734:	ec53 2b10 	vmov	r2, r3, d0
 8013738:	4659      	mov	r1, fp
 801373a:	f7ec ff6d 	bl	8000618 <__aeabi_dmul>
 801373e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013742:	f7ec fdb3 	bl	80002ac <__adddf3>
 8013746:	4682      	mov	sl, r0
 8013748:	468b      	mov	fp, r1
 801374a:	e772      	b.n	8013632 <_strtod_l+0xa8a>
 801374c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013750:	e7df      	b.n	8013712 <_strtod_l+0xb6a>
 8013752:	a30d      	add	r3, pc, #52	; (adr r3, 8013788 <_strtod_l+0xbe0>)
 8013754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013758:	f7ed f9d0 	bl	8000afc <__aeabi_dcmplt>
 801375c:	e79c      	b.n	8013698 <_strtod_l+0xaf0>
 801375e:	2300      	movs	r3, #0
 8013760:	930d      	str	r3, [sp, #52]	; 0x34
 8013762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	f7ff ba61 	b.w	8012c2e <_strtod_l+0x86>
 801376c:	2b65      	cmp	r3, #101	; 0x65
 801376e:	f04f 0200 	mov.w	r2, #0
 8013772:	f43f ab4e 	beq.w	8012e12 <_strtod_l+0x26a>
 8013776:	2101      	movs	r1, #1
 8013778:	4614      	mov	r4, r2
 801377a:	9104      	str	r1, [sp, #16]
 801377c:	f7ff bacb 	b.w	8012d16 <_strtod_l+0x16e>
 8013780:	ffc00000 	.word	0xffc00000
 8013784:	41dfffff 	.word	0x41dfffff
 8013788:	94a03595 	.word	0x94a03595
 801378c:	3fcfffff 	.word	0x3fcfffff

08013790 <_strtod_r>:
 8013790:	4b05      	ldr	r3, [pc, #20]	; (80137a8 <_strtod_r+0x18>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	b410      	push	{r4}
 8013796:	6a1b      	ldr	r3, [r3, #32]
 8013798:	4c04      	ldr	r4, [pc, #16]	; (80137ac <_strtod_r+0x1c>)
 801379a:	2b00      	cmp	r3, #0
 801379c:	bf08      	it	eq
 801379e:	4623      	moveq	r3, r4
 80137a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137a4:	f7ff ba00 	b.w	8012ba8 <_strtod_l>
 80137a8:	20000e34 	.word	0x20000e34
 80137ac:	20000e98 	.word	0x20000e98

080137b0 <_strtol_l.isra.0>:
 80137b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b4:	4680      	mov	r8, r0
 80137b6:	4689      	mov	r9, r1
 80137b8:	4692      	mov	sl, r2
 80137ba:	461e      	mov	r6, r3
 80137bc:	460f      	mov	r7, r1
 80137be:	463d      	mov	r5, r7
 80137c0:	9808      	ldr	r0, [sp, #32]
 80137c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137c6:	f001 f9ed 	bl	8014ba4 <__locale_ctype_ptr_l>
 80137ca:	4420      	add	r0, r4
 80137cc:	7843      	ldrb	r3, [r0, #1]
 80137ce:	f013 0308 	ands.w	r3, r3, #8
 80137d2:	d132      	bne.n	801383a <_strtol_l.isra.0+0x8a>
 80137d4:	2c2d      	cmp	r4, #45	; 0x2d
 80137d6:	d132      	bne.n	801383e <_strtol_l.isra.0+0x8e>
 80137d8:	787c      	ldrb	r4, [r7, #1]
 80137da:	1cbd      	adds	r5, r7, #2
 80137dc:	2201      	movs	r2, #1
 80137de:	2e00      	cmp	r6, #0
 80137e0:	d05d      	beq.n	801389e <_strtol_l.isra.0+0xee>
 80137e2:	2e10      	cmp	r6, #16
 80137e4:	d109      	bne.n	80137fa <_strtol_l.isra.0+0x4a>
 80137e6:	2c30      	cmp	r4, #48	; 0x30
 80137e8:	d107      	bne.n	80137fa <_strtol_l.isra.0+0x4a>
 80137ea:	782b      	ldrb	r3, [r5, #0]
 80137ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80137f0:	2b58      	cmp	r3, #88	; 0x58
 80137f2:	d14f      	bne.n	8013894 <_strtol_l.isra.0+0xe4>
 80137f4:	786c      	ldrb	r4, [r5, #1]
 80137f6:	2610      	movs	r6, #16
 80137f8:	3502      	adds	r5, #2
 80137fa:	2a00      	cmp	r2, #0
 80137fc:	bf14      	ite	ne
 80137fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013802:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013806:	2700      	movs	r7, #0
 8013808:	fbb1 fcf6 	udiv	ip, r1, r6
 801380c:	4638      	mov	r0, r7
 801380e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013812:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013816:	2b09      	cmp	r3, #9
 8013818:	d817      	bhi.n	801384a <_strtol_l.isra.0+0x9a>
 801381a:	461c      	mov	r4, r3
 801381c:	42a6      	cmp	r6, r4
 801381e:	dd23      	ble.n	8013868 <_strtol_l.isra.0+0xb8>
 8013820:	1c7b      	adds	r3, r7, #1
 8013822:	d007      	beq.n	8013834 <_strtol_l.isra.0+0x84>
 8013824:	4584      	cmp	ip, r0
 8013826:	d31c      	bcc.n	8013862 <_strtol_l.isra.0+0xb2>
 8013828:	d101      	bne.n	801382e <_strtol_l.isra.0+0x7e>
 801382a:	45a6      	cmp	lr, r4
 801382c:	db19      	blt.n	8013862 <_strtol_l.isra.0+0xb2>
 801382e:	fb00 4006 	mla	r0, r0, r6, r4
 8013832:	2701      	movs	r7, #1
 8013834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013838:	e7eb      	b.n	8013812 <_strtol_l.isra.0+0x62>
 801383a:	462f      	mov	r7, r5
 801383c:	e7bf      	b.n	80137be <_strtol_l.isra.0+0xe>
 801383e:	2c2b      	cmp	r4, #43	; 0x2b
 8013840:	bf04      	itt	eq
 8013842:	1cbd      	addeq	r5, r7, #2
 8013844:	787c      	ldrbeq	r4, [r7, #1]
 8013846:	461a      	mov	r2, r3
 8013848:	e7c9      	b.n	80137de <_strtol_l.isra.0+0x2e>
 801384a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801384e:	2b19      	cmp	r3, #25
 8013850:	d801      	bhi.n	8013856 <_strtol_l.isra.0+0xa6>
 8013852:	3c37      	subs	r4, #55	; 0x37
 8013854:	e7e2      	b.n	801381c <_strtol_l.isra.0+0x6c>
 8013856:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801385a:	2b19      	cmp	r3, #25
 801385c:	d804      	bhi.n	8013868 <_strtol_l.isra.0+0xb8>
 801385e:	3c57      	subs	r4, #87	; 0x57
 8013860:	e7dc      	b.n	801381c <_strtol_l.isra.0+0x6c>
 8013862:	f04f 37ff 	mov.w	r7, #4294967295
 8013866:	e7e5      	b.n	8013834 <_strtol_l.isra.0+0x84>
 8013868:	1c7b      	adds	r3, r7, #1
 801386a:	d108      	bne.n	801387e <_strtol_l.isra.0+0xce>
 801386c:	2322      	movs	r3, #34	; 0x22
 801386e:	f8c8 3000 	str.w	r3, [r8]
 8013872:	4608      	mov	r0, r1
 8013874:	f1ba 0f00 	cmp.w	sl, #0
 8013878:	d107      	bne.n	801388a <_strtol_l.isra.0+0xda>
 801387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387e:	b102      	cbz	r2, 8013882 <_strtol_l.isra.0+0xd2>
 8013880:	4240      	negs	r0, r0
 8013882:	f1ba 0f00 	cmp.w	sl, #0
 8013886:	d0f8      	beq.n	801387a <_strtol_l.isra.0+0xca>
 8013888:	b10f      	cbz	r7, 801388e <_strtol_l.isra.0+0xde>
 801388a:	f105 39ff 	add.w	r9, r5, #4294967295
 801388e:	f8ca 9000 	str.w	r9, [sl]
 8013892:	e7f2      	b.n	801387a <_strtol_l.isra.0+0xca>
 8013894:	2430      	movs	r4, #48	; 0x30
 8013896:	2e00      	cmp	r6, #0
 8013898:	d1af      	bne.n	80137fa <_strtol_l.isra.0+0x4a>
 801389a:	2608      	movs	r6, #8
 801389c:	e7ad      	b.n	80137fa <_strtol_l.isra.0+0x4a>
 801389e:	2c30      	cmp	r4, #48	; 0x30
 80138a0:	d0a3      	beq.n	80137ea <_strtol_l.isra.0+0x3a>
 80138a2:	260a      	movs	r6, #10
 80138a4:	e7a9      	b.n	80137fa <_strtol_l.isra.0+0x4a>
	...

080138a8 <_strtol_r>:
 80138a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138aa:	4c06      	ldr	r4, [pc, #24]	; (80138c4 <_strtol_r+0x1c>)
 80138ac:	4d06      	ldr	r5, [pc, #24]	; (80138c8 <_strtol_r+0x20>)
 80138ae:	6824      	ldr	r4, [r4, #0]
 80138b0:	6a24      	ldr	r4, [r4, #32]
 80138b2:	2c00      	cmp	r4, #0
 80138b4:	bf08      	it	eq
 80138b6:	462c      	moveq	r4, r5
 80138b8:	9400      	str	r4, [sp, #0]
 80138ba:	f7ff ff79 	bl	80137b0 <_strtol_l.isra.0>
 80138be:	b003      	add	sp, #12
 80138c0:	bd30      	pop	{r4, r5, pc}
 80138c2:	bf00      	nop
 80138c4:	20000e34 	.word	0x20000e34
 80138c8:	20000e98 	.word	0x20000e98

080138cc <quorem>:
 80138cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138d0:	6903      	ldr	r3, [r0, #16]
 80138d2:	690c      	ldr	r4, [r1, #16]
 80138d4:	42a3      	cmp	r3, r4
 80138d6:	4680      	mov	r8, r0
 80138d8:	f2c0 8082 	blt.w	80139e0 <quorem+0x114>
 80138dc:	3c01      	subs	r4, #1
 80138de:	f101 0714 	add.w	r7, r1, #20
 80138e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80138e6:	f100 0614 	add.w	r6, r0, #20
 80138ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80138ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80138f2:	eb06 030c 	add.w	r3, r6, ip
 80138f6:	3501      	adds	r5, #1
 80138f8:	eb07 090c 	add.w	r9, r7, ip
 80138fc:	9301      	str	r3, [sp, #4]
 80138fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8013902:	b395      	cbz	r5, 801396a <quorem+0x9e>
 8013904:	f04f 0a00 	mov.w	sl, #0
 8013908:	4638      	mov	r0, r7
 801390a:	46b6      	mov	lr, r6
 801390c:	46d3      	mov	fp, sl
 801390e:	f850 2b04 	ldr.w	r2, [r0], #4
 8013912:	b293      	uxth	r3, r2
 8013914:	fb05 a303 	mla	r3, r5, r3, sl
 8013918:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801391c:	b29b      	uxth	r3, r3
 801391e:	ebab 0303 	sub.w	r3, fp, r3
 8013922:	0c12      	lsrs	r2, r2, #16
 8013924:	f8de b000 	ldr.w	fp, [lr]
 8013928:	fb05 a202 	mla	r2, r5, r2, sl
 801392c:	fa13 f38b 	uxtah	r3, r3, fp
 8013930:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013934:	fa1f fb82 	uxth.w	fp, r2
 8013938:	f8de 2000 	ldr.w	r2, [lr]
 801393c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013944:	b29b      	uxth	r3, r3
 8013946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801394a:	4581      	cmp	r9, r0
 801394c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013950:	f84e 3b04 	str.w	r3, [lr], #4
 8013954:	d2db      	bcs.n	801390e <quorem+0x42>
 8013956:	f856 300c 	ldr.w	r3, [r6, ip]
 801395a:	b933      	cbnz	r3, 801396a <quorem+0x9e>
 801395c:	9b01      	ldr	r3, [sp, #4]
 801395e:	3b04      	subs	r3, #4
 8013960:	429e      	cmp	r6, r3
 8013962:	461a      	mov	r2, r3
 8013964:	d330      	bcc.n	80139c8 <quorem+0xfc>
 8013966:	f8c8 4010 	str.w	r4, [r8, #16]
 801396a:	4640      	mov	r0, r8
 801396c:	f001 fba4 	bl	80150b8 <__mcmp>
 8013970:	2800      	cmp	r0, #0
 8013972:	db25      	blt.n	80139c0 <quorem+0xf4>
 8013974:	3501      	adds	r5, #1
 8013976:	4630      	mov	r0, r6
 8013978:	f04f 0c00 	mov.w	ip, #0
 801397c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013980:	f8d0 e000 	ldr.w	lr, [r0]
 8013984:	b293      	uxth	r3, r2
 8013986:	ebac 0303 	sub.w	r3, ip, r3
 801398a:	0c12      	lsrs	r2, r2, #16
 801398c:	fa13 f38e 	uxtah	r3, r3, lr
 8013990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013998:	b29b      	uxth	r3, r3
 801399a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801399e:	45b9      	cmp	r9, r7
 80139a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80139a4:	f840 3b04 	str.w	r3, [r0], #4
 80139a8:	d2e8      	bcs.n	801397c <quorem+0xb0>
 80139aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80139ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80139b2:	b92a      	cbnz	r2, 80139c0 <quorem+0xf4>
 80139b4:	3b04      	subs	r3, #4
 80139b6:	429e      	cmp	r6, r3
 80139b8:	461a      	mov	r2, r3
 80139ba:	d30b      	bcc.n	80139d4 <quorem+0x108>
 80139bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80139c0:	4628      	mov	r0, r5
 80139c2:	b003      	add	sp, #12
 80139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c8:	6812      	ldr	r2, [r2, #0]
 80139ca:	3b04      	subs	r3, #4
 80139cc:	2a00      	cmp	r2, #0
 80139ce:	d1ca      	bne.n	8013966 <quorem+0x9a>
 80139d0:	3c01      	subs	r4, #1
 80139d2:	e7c5      	b.n	8013960 <quorem+0x94>
 80139d4:	6812      	ldr	r2, [r2, #0]
 80139d6:	3b04      	subs	r3, #4
 80139d8:	2a00      	cmp	r2, #0
 80139da:	d1ef      	bne.n	80139bc <quorem+0xf0>
 80139dc:	3c01      	subs	r4, #1
 80139de:	e7ea      	b.n	80139b6 <quorem+0xea>
 80139e0:	2000      	movs	r0, #0
 80139e2:	e7ee      	b.n	80139c2 <quorem+0xf6>
 80139e4:	0000      	movs	r0, r0
	...

080139e8 <_dtoa_r>:
 80139e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ec:	ec57 6b10 	vmov	r6, r7, d0
 80139f0:	b097      	sub	sp, #92	; 0x5c
 80139f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80139f4:	9106      	str	r1, [sp, #24]
 80139f6:	4604      	mov	r4, r0
 80139f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80139fa:	9312      	str	r3, [sp, #72]	; 0x48
 80139fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013a00:	e9cd 6700 	strd	r6, r7, [sp]
 8013a04:	b93d      	cbnz	r5, 8013a16 <_dtoa_r+0x2e>
 8013a06:	2010      	movs	r0, #16
 8013a08:	f7fe f8ea 	bl	8011be0 <malloc>
 8013a0c:	6260      	str	r0, [r4, #36]	; 0x24
 8013a0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a12:	6005      	str	r5, [r0, #0]
 8013a14:	60c5      	str	r5, [r0, #12]
 8013a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a18:	6819      	ldr	r1, [r3, #0]
 8013a1a:	b151      	cbz	r1, 8013a32 <_dtoa_r+0x4a>
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	604a      	str	r2, [r1, #4]
 8013a20:	2301      	movs	r3, #1
 8013a22:	4093      	lsls	r3, r2
 8013a24:	608b      	str	r3, [r1, #8]
 8013a26:	4620      	mov	r0, r4
 8013a28:	f001 f926 	bl	8014c78 <_Bfree>
 8013a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a2e:	2200      	movs	r2, #0
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	1e3b      	subs	r3, r7, #0
 8013a34:	bfbb      	ittet	lt
 8013a36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013a3a:	9301      	strlt	r3, [sp, #4]
 8013a3c:	2300      	movge	r3, #0
 8013a3e:	2201      	movlt	r2, #1
 8013a40:	bfac      	ite	ge
 8013a42:	f8c8 3000 	strge.w	r3, [r8]
 8013a46:	f8c8 2000 	strlt.w	r2, [r8]
 8013a4a:	4baf      	ldr	r3, [pc, #700]	; (8013d08 <_dtoa_r+0x320>)
 8013a4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a50:	ea33 0308 	bics.w	r3, r3, r8
 8013a54:	d114      	bne.n	8013a80 <_dtoa_r+0x98>
 8013a56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a58:	f242 730f 	movw	r3, #9999	; 0x270f
 8013a5c:	6013      	str	r3, [r2, #0]
 8013a5e:	9b00      	ldr	r3, [sp, #0]
 8013a60:	b923      	cbnz	r3, 8013a6c <_dtoa_r+0x84>
 8013a62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013a66:	2800      	cmp	r0, #0
 8013a68:	f000 8542 	beq.w	80144f0 <_dtoa_r+0xb08>
 8013a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013d1c <_dtoa_r+0x334>
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 8544 	beq.w	8014500 <_dtoa_r+0xb18>
 8013a78:	f10b 0303 	add.w	r3, fp, #3
 8013a7c:	f000 bd3e 	b.w	80144fc <_dtoa_r+0xb14>
 8013a80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013a84:	2200      	movs	r2, #0
 8013a86:	2300      	movs	r3, #0
 8013a88:	4630      	mov	r0, r6
 8013a8a:	4639      	mov	r1, r7
 8013a8c:	f7ed f82c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013a90:	4681      	mov	r9, r0
 8013a92:	b168      	cbz	r0, 8013ab0 <_dtoa_r+0xc8>
 8013a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a96:	2301      	movs	r3, #1
 8013a98:	6013      	str	r3, [r2, #0]
 8013a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f000 8524 	beq.w	80144ea <_dtoa_r+0xb02>
 8013aa2:	4b9a      	ldr	r3, [pc, #616]	; (8013d0c <_dtoa_r+0x324>)
 8013aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013aa6:	f103 3bff 	add.w	fp, r3, #4294967295
 8013aaa:	6013      	str	r3, [r2, #0]
 8013aac:	f000 bd28 	b.w	8014500 <_dtoa_r+0xb18>
 8013ab0:	aa14      	add	r2, sp, #80	; 0x50
 8013ab2:	a915      	add	r1, sp, #84	; 0x54
 8013ab4:	ec47 6b10 	vmov	d0, r6, r7
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f001 fbeb 	bl	8015294 <__d2b>
 8013abe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013ac2:	9004      	str	r0, [sp, #16]
 8013ac4:	2d00      	cmp	r5, #0
 8013ac6:	d07c      	beq.n	8013bc2 <_dtoa_r+0x1da>
 8013ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013acc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013ad0:	46b2      	mov	sl, r6
 8013ad2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013ada:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013ade:	2200      	movs	r2, #0
 8013ae0:	4b8b      	ldr	r3, [pc, #556]	; (8013d10 <_dtoa_r+0x328>)
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	4659      	mov	r1, fp
 8013ae6:	f7ec fbdf 	bl	80002a8 <__aeabi_dsub>
 8013aea:	a381      	add	r3, pc, #516	; (adr r3, 8013cf0 <_dtoa_r+0x308>)
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f7ec fd92 	bl	8000618 <__aeabi_dmul>
 8013af4:	a380      	add	r3, pc, #512	; (adr r3, 8013cf8 <_dtoa_r+0x310>)
 8013af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afa:	f7ec fbd7 	bl	80002ac <__adddf3>
 8013afe:	4606      	mov	r6, r0
 8013b00:	4628      	mov	r0, r5
 8013b02:	460f      	mov	r7, r1
 8013b04:	f7ec fd1e 	bl	8000544 <__aeabi_i2d>
 8013b08:	a37d      	add	r3, pc, #500	; (adr r3, 8013d00 <_dtoa_r+0x318>)
 8013b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0e:	f7ec fd83 	bl	8000618 <__aeabi_dmul>
 8013b12:	4602      	mov	r2, r0
 8013b14:	460b      	mov	r3, r1
 8013b16:	4630      	mov	r0, r6
 8013b18:	4639      	mov	r1, r7
 8013b1a:	f7ec fbc7 	bl	80002ac <__adddf3>
 8013b1e:	4606      	mov	r6, r0
 8013b20:	460f      	mov	r7, r1
 8013b22:	f7ed f829 	bl	8000b78 <__aeabi_d2iz>
 8013b26:	2200      	movs	r2, #0
 8013b28:	4682      	mov	sl, r0
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	4639      	mov	r1, r7
 8013b30:	f7ec ffe4 	bl	8000afc <__aeabi_dcmplt>
 8013b34:	b148      	cbz	r0, 8013b4a <_dtoa_r+0x162>
 8013b36:	4650      	mov	r0, sl
 8013b38:	f7ec fd04 	bl	8000544 <__aeabi_i2d>
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	463b      	mov	r3, r7
 8013b40:	f7ec ffd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b44:	b908      	cbnz	r0, 8013b4a <_dtoa_r+0x162>
 8013b46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b4a:	f1ba 0f16 	cmp.w	sl, #22
 8013b4e:	d859      	bhi.n	8013c04 <_dtoa_r+0x21c>
 8013b50:	4970      	ldr	r1, [pc, #448]	; (8013d14 <_dtoa_r+0x32c>)
 8013b52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b5e:	f7ec ffeb 	bl	8000b38 <__aeabi_dcmpgt>
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d050      	beq.n	8013c08 <_dtoa_r+0x220>
 8013b66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b70:	1b5d      	subs	r5, r3, r5
 8013b72:	f1b5 0801 	subs.w	r8, r5, #1
 8013b76:	bf49      	itett	mi
 8013b78:	f1c5 0301 	rsbmi	r3, r5, #1
 8013b7c:	2300      	movpl	r3, #0
 8013b7e:	9305      	strmi	r3, [sp, #20]
 8013b80:	f04f 0800 	movmi.w	r8, #0
 8013b84:	bf58      	it	pl
 8013b86:	9305      	strpl	r3, [sp, #20]
 8013b88:	f1ba 0f00 	cmp.w	sl, #0
 8013b8c:	db3e      	blt.n	8013c0c <_dtoa_r+0x224>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	44d0      	add	r8, sl
 8013b92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013b96:	9307      	str	r3, [sp, #28]
 8013b98:	9b06      	ldr	r3, [sp, #24]
 8013b9a:	2b09      	cmp	r3, #9
 8013b9c:	f200 8090 	bhi.w	8013cc0 <_dtoa_r+0x2d8>
 8013ba0:	2b05      	cmp	r3, #5
 8013ba2:	bfc4      	itt	gt
 8013ba4:	3b04      	subgt	r3, #4
 8013ba6:	9306      	strgt	r3, [sp, #24]
 8013ba8:	9b06      	ldr	r3, [sp, #24]
 8013baa:	f1a3 0302 	sub.w	r3, r3, #2
 8013bae:	bfcc      	ite	gt
 8013bb0:	2500      	movgt	r5, #0
 8013bb2:	2501      	movle	r5, #1
 8013bb4:	2b03      	cmp	r3, #3
 8013bb6:	f200 808f 	bhi.w	8013cd8 <_dtoa_r+0x2f0>
 8013bba:	e8df f003 	tbb	[pc, r3]
 8013bbe:	7f7d      	.short	0x7f7d
 8013bc0:	7131      	.short	0x7131
 8013bc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013bc6:	441d      	add	r5, r3
 8013bc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013bcc:	2820      	cmp	r0, #32
 8013bce:	dd13      	ble.n	8013bf8 <_dtoa_r+0x210>
 8013bd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013bd4:	9b00      	ldr	r3, [sp, #0]
 8013bd6:	fa08 f800 	lsl.w	r8, r8, r0
 8013bda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013bde:	fa23 f000 	lsr.w	r0, r3, r0
 8013be2:	ea48 0000 	orr.w	r0, r8, r0
 8013be6:	f7ec fc9d 	bl	8000524 <__aeabi_ui2d>
 8013bea:	2301      	movs	r3, #1
 8013bec:	4682      	mov	sl, r0
 8013bee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013bf2:	3d01      	subs	r5, #1
 8013bf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8013bf6:	e772      	b.n	8013ade <_dtoa_r+0xf6>
 8013bf8:	9b00      	ldr	r3, [sp, #0]
 8013bfa:	f1c0 0020 	rsb	r0, r0, #32
 8013bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8013c02:	e7f0      	b.n	8013be6 <_dtoa_r+0x1fe>
 8013c04:	2301      	movs	r3, #1
 8013c06:	e7b1      	b.n	8013b6c <_dtoa_r+0x184>
 8013c08:	900f      	str	r0, [sp, #60]	; 0x3c
 8013c0a:	e7b0      	b.n	8013b6e <_dtoa_r+0x186>
 8013c0c:	9b05      	ldr	r3, [sp, #20]
 8013c0e:	eba3 030a 	sub.w	r3, r3, sl
 8013c12:	9305      	str	r3, [sp, #20]
 8013c14:	f1ca 0300 	rsb	r3, sl, #0
 8013c18:	9307      	str	r3, [sp, #28]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8013c1e:	e7bb      	b.n	8013b98 <_dtoa_r+0x1b0>
 8013c20:	2301      	movs	r3, #1
 8013c22:	930a      	str	r3, [sp, #40]	; 0x28
 8013c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	dd59      	ble.n	8013cde <_dtoa_r+0x2f6>
 8013c2a:	9302      	str	r3, [sp, #8]
 8013c2c:	4699      	mov	r9, r3
 8013c2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c30:	2200      	movs	r2, #0
 8013c32:	6072      	str	r2, [r6, #4]
 8013c34:	2204      	movs	r2, #4
 8013c36:	f102 0014 	add.w	r0, r2, #20
 8013c3a:	4298      	cmp	r0, r3
 8013c3c:	6871      	ldr	r1, [r6, #4]
 8013c3e:	d953      	bls.n	8013ce8 <_dtoa_r+0x300>
 8013c40:	4620      	mov	r0, r4
 8013c42:	f000 ffe5 	bl	8014c10 <_Balloc>
 8013c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c48:	6030      	str	r0, [r6, #0]
 8013c4a:	f1b9 0f0e 	cmp.w	r9, #14
 8013c4e:	f8d3 b000 	ldr.w	fp, [r3]
 8013c52:	f200 80e6 	bhi.w	8013e22 <_dtoa_r+0x43a>
 8013c56:	2d00      	cmp	r5, #0
 8013c58:	f000 80e3 	beq.w	8013e22 <_dtoa_r+0x43a>
 8013c5c:	ed9d 7b00 	vldr	d7, [sp]
 8013c60:	f1ba 0f00 	cmp.w	sl, #0
 8013c64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013c68:	dd74      	ble.n	8013d54 <_dtoa_r+0x36c>
 8013c6a:	4a2a      	ldr	r2, [pc, #168]	; (8013d14 <_dtoa_r+0x32c>)
 8013c6c:	f00a 030f 	and.w	r3, sl, #15
 8013c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013c74:	ed93 7b00 	vldr	d7, [r3]
 8013c78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013c7c:	06f0      	lsls	r0, r6, #27
 8013c7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013c82:	d565      	bpl.n	8013d50 <_dtoa_r+0x368>
 8013c84:	4b24      	ldr	r3, [pc, #144]	; (8013d18 <_dtoa_r+0x330>)
 8013c86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c8e:	f7ec fded 	bl	800086c <__aeabi_ddiv>
 8013c92:	e9cd 0100 	strd	r0, r1, [sp]
 8013c96:	f006 060f 	and.w	r6, r6, #15
 8013c9a:	2503      	movs	r5, #3
 8013c9c:	4f1e      	ldr	r7, [pc, #120]	; (8013d18 <_dtoa_r+0x330>)
 8013c9e:	e04c      	b.n	8013d3a <_dtoa_r+0x352>
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ca6:	4453      	add	r3, sl
 8013ca8:	f103 0901 	add.w	r9, r3, #1
 8013cac:	9302      	str	r3, [sp, #8]
 8013cae:	464b      	mov	r3, r9
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	bfb8      	it	lt
 8013cb4:	2301      	movlt	r3, #1
 8013cb6:	e7ba      	b.n	8013c2e <_dtoa_r+0x246>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e7b2      	b.n	8013c22 <_dtoa_r+0x23a>
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e7f0      	b.n	8013ca2 <_dtoa_r+0x2ba>
 8013cc0:	2501      	movs	r5, #1
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	9306      	str	r3, [sp, #24]
 8013cc6:	950a      	str	r5, [sp, #40]	; 0x28
 8013cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ccc:	9302      	str	r3, [sp, #8]
 8013cce:	4699      	mov	r9, r3
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	2312      	movs	r3, #18
 8013cd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8013cd6:	e7aa      	b.n	8013c2e <_dtoa_r+0x246>
 8013cd8:	2301      	movs	r3, #1
 8013cda:	930a      	str	r3, [sp, #40]	; 0x28
 8013cdc:	e7f4      	b.n	8013cc8 <_dtoa_r+0x2e0>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	4699      	mov	r9, r3
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	e7f5      	b.n	8013cd4 <_dtoa_r+0x2ec>
 8013ce8:	3101      	adds	r1, #1
 8013cea:	6071      	str	r1, [r6, #4]
 8013cec:	0052      	lsls	r2, r2, #1
 8013cee:	e7a2      	b.n	8013c36 <_dtoa_r+0x24e>
 8013cf0:	636f4361 	.word	0x636f4361
 8013cf4:	3fd287a7 	.word	0x3fd287a7
 8013cf8:	8b60c8b3 	.word	0x8b60c8b3
 8013cfc:	3fc68a28 	.word	0x3fc68a28
 8013d00:	509f79fb 	.word	0x509f79fb
 8013d04:	3fd34413 	.word	0x3fd34413
 8013d08:	7ff00000 	.word	0x7ff00000
 8013d0c:	08017f9c 	.word	0x08017f9c
 8013d10:	3ff80000 	.word	0x3ff80000
 8013d14:	08017ea0 	.word	0x08017ea0
 8013d18:	08017e78 	.word	0x08017e78
 8013d1c:	08017e69 	.word	0x08017e69
 8013d20:	07f1      	lsls	r1, r6, #31
 8013d22:	d508      	bpl.n	8013d36 <_dtoa_r+0x34e>
 8013d24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d2c:	f7ec fc74 	bl	8000618 <__aeabi_dmul>
 8013d30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d34:	3501      	adds	r5, #1
 8013d36:	1076      	asrs	r6, r6, #1
 8013d38:	3708      	adds	r7, #8
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	d1f0      	bne.n	8013d20 <_dtoa_r+0x338>
 8013d3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d46:	f7ec fd91 	bl	800086c <__aeabi_ddiv>
 8013d4a:	e9cd 0100 	strd	r0, r1, [sp]
 8013d4e:	e01a      	b.n	8013d86 <_dtoa_r+0x39e>
 8013d50:	2502      	movs	r5, #2
 8013d52:	e7a3      	b.n	8013c9c <_dtoa_r+0x2b4>
 8013d54:	f000 80a0 	beq.w	8013e98 <_dtoa_r+0x4b0>
 8013d58:	f1ca 0600 	rsb	r6, sl, #0
 8013d5c:	4b9f      	ldr	r3, [pc, #636]	; (8013fdc <_dtoa_r+0x5f4>)
 8013d5e:	4fa0      	ldr	r7, [pc, #640]	; (8013fe0 <_dtoa_r+0x5f8>)
 8013d60:	f006 020f 	and.w	r2, r6, #15
 8013d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013d70:	f7ec fc52 	bl	8000618 <__aeabi_dmul>
 8013d74:	e9cd 0100 	strd	r0, r1, [sp]
 8013d78:	1136      	asrs	r6, r6, #4
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	2502      	movs	r5, #2
 8013d7e:	2e00      	cmp	r6, #0
 8013d80:	d17f      	bne.n	8013e82 <_dtoa_r+0x49a>
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d1e1      	bne.n	8013d4a <_dtoa_r+0x362>
 8013d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f000 8087 	beq.w	8013e9c <_dtoa_r+0x4b4>
 8013d8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013d92:	2200      	movs	r2, #0
 8013d94:	4b93      	ldr	r3, [pc, #588]	; (8013fe4 <_dtoa_r+0x5fc>)
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec feaf 	bl	8000afc <__aeabi_dcmplt>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d07c      	beq.n	8013e9c <_dtoa_r+0x4b4>
 8013da2:	f1b9 0f00 	cmp.w	r9, #0
 8013da6:	d079      	beq.n	8013e9c <_dtoa_r+0x4b4>
 8013da8:	9b02      	ldr	r3, [sp, #8]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	dd35      	ble.n	8013e1a <_dtoa_r+0x432>
 8013dae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013db2:	9308      	str	r3, [sp, #32]
 8013db4:	4639      	mov	r1, r7
 8013db6:	2200      	movs	r2, #0
 8013db8:	4b8b      	ldr	r3, [pc, #556]	; (8013fe8 <_dtoa_r+0x600>)
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f7ec fc2c 	bl	8000618 <__aeabi_dmul>
 8013dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8013dc4:	9f02      	ldr	r7, [sp, #8]
 8013dc6:	3501      	adds	r5, #1
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7ec fbbb 	bl	8000544 <__aeabi_i2d>
 8013dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dd2:	f7ec fc21 	bl	8000618 <__aeabi_dmul>
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	4b84      	ldr	r3, [pc, #528]	; (8013fec <_dtoa_r+0x604>)
 8013dda:	f7ec fa67 	bl	80002ac <__adddf3>
 8013dde:	4605      	mov	r5, r0
 8013de0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013de4:	2f00      	cmp	r7, #0
 8013de6:	d15d      	bne.n	8013ea4 <_dtoa_r+0x4bc>
 8013de8:	2200      	movs	r2, #0
 8013dea:	4b81      	ldr	r3, [pc, #516]	; (8013ff0 <_dtoa_r+0x608>)
 8013dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013df0:	f7ec fa5a 	bl	80002a8 <__aeabi_dsub>
 8013df4:	462a      	mov	r2, r5
 8013df6:	4633      	mov	r3, r6
 8013df8:	e9cd 0100 	strd	r0, r1, [sp]
 8013dfc:	f7ec fe9c 	bl	8000b38 <__aeabi_dcmpgt>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	f040 8288 	bne.w	8014316 <_dtoa_r+0x92e>
 8013e06:	462a      	mov	r2, r5
 8013e08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e10:	f7ec fe74 	bl	8000afc <__aeabi_dcmplt>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	f040 827c 	bne.w	8014312 <_dtoa_r+0x92a>
 8013e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8013e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	f2c0 8150 	blt.w	80140ca <_dtoa_r+0x6e2>
 8013e2a:	f1ba 0f0e 	cmp.w	sl, #14
 8013e2e:	f300 814c 	bgt.w	80140ca <_dtoa_r+0x6e2>
 8013e32:	4b6a      	ldr	r3, [pc, #424]	; (8013fdc <_dtoa_r+0x5f4>)
 8013e34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e38:	ed93 7b00 	vldr	d7, [r3]
 8013e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e44:	f280 80d8 	bge.w	8013ff8 <_dtoa_r+0x610>
 8013e48:	f1b9 0f00 	cmp.w	r9, #0
 8013e4c:	f300 80d4 	bgt.w	8013ff8 <_dtoa_r+0x610>
 8013e50:	f040 825e 	bne.w	8014310 <_dtoa_r+0x928>
 8013e54:	2200      	movs	r2, #0
 8013e56:	4b66      	ldr	r3, [pc, #408]	; (8013ff0 <_dtoa_r+0x608>)
 8013e58:	ec51 0b17 	vmov	r0, r1, d7
 8013e5c:	f7ec fbdc 	bl	8000618 <__aeabi_dmul>
 8013e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e64:	f7ec fe5e 	bl	8000b24 <__aeabi_dcmpge>
 8013e68:	464f      	mov	r7, r9
 8013e6a:	464e      	mov	r6, r9
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	f040 8234 	bne.w	80142da <_dtoa_r+0x8f2>
 8013e72:	2331      	movs	r3, #49	; 0x31
 8013e74:	f10b 0501 	add.w	r5, fp, #1
 8013e78:	f88b 3000 	strb.w	r3, [fp]
 8013e7c:	f10a 0a01 	add.w	sl, sl, #1
 8013e80:	e22f      	b.n	80142e2 <_dtoa_r+0x8fa>
 8013e82:	07f2      	lsls	r2, r6, #31
 8013e84:	d505      	bpl.n	8013e92 <_dtoa_r+0x4aa>
 8013e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e8a:	f7ec fbc5 	bl	8000618 <__aeabi_dmul>
 8013e8e:	3501      	adds	r5, #1
 8013e90:	2301      	movs	r3, #1
 8013e92:	1076      	asrs	r6, r6, #1
 8013e94:	3708      	adds	r7, #8
 8013e96:	e772      	b.n	8013d7e <_dtoa_r+0x396>
 8013e98:	2502      	movs	r5, #2
 8013e9a:	e774      	b.n	8013d86 <_dtoa_r+0x39e>
 8013e9c:	f8cd a020 	str.w	sl, [sp, #32]
 8013ea0:	464f      	mov	r7, r9
 8013ea2:	e791      	b.n	8013dc8 <_dtoa_r+0x3e0>
 8013ea4:	4b4d      	ldr	r3, [pc, #308]	; (8013fdc <_dtoa_r+0x5f4>)
 8013ea6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013eaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d047      	beq.n	8013f44 <_dtoa_r+0x55c>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	2000      	movs	r0, #0
 8013eba:	494e      	ldr	r1, [pc, #312]	; (8013ff4 <_dtoa_r+0x60c>)
 8013ebc:	f7ec fcd6 	bl	800086c <__aeabi_ddiv>
 8013ec0:	462a      	mov	r2, r5
 8013ec2:	4633      	mov	r3, r6
 8013ec4:	f7ec f9f0 	bl	80002a8 <__aeabi_dsub>
 8013ec8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013ecc:	465d      	mov	r5, fp
 8013ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ed2:	f7ec fe51 	bl	8000b78 <__aeabi_d2iz>
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	f7ec fb34 	bl	8000544 <__aeabi_i2d>
 8013edc:	4602      	mov	r2, r0
 8013ede:	460b      	mov	r3, r1
 8013ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ee4:	f7ec f9e0 	bl	80002a8 <__aeabi_dsub>
 8013ee8:	3630      	adds	r6, #48	; 0x30
 8013eea:	f805 6b01 	strb.w	r6, [r5], #1
 8013eee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013ef2:	e9cd 0100 	strd	r0, r1, [sp]
 8013ef6:	f7ec fe01 	bl	8000afc <__aeabi_dcmplt>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	d163      	bne.n	8013fc6 <_dtoa_r+0x5de>
 8013efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f02:	2000      	movs	r0, #0
 8013f04:	4937      	ldr	r1, [pc, #220]	; (8013fe4 <_dtoa_r+0x5fc>)
 8013f06:	f7ec f9cf 	bl	80002a8 <__aeabi_dsub>
 8013f0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013f0e:	f7ec fdf5 	bl	8000afc <__aeabi_dcmplt>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	f040 80b7 	bne.w	8014086 <_dtoa_r+0x69e>
 8013f18:	eba5 030b 	sub.w	r3, r5, fp
 8013f1c:	429f      	cmp	r7, r3
 8013f1e:	f77f af7c 	ble.w	8013e1a <_dtoa_r+0x432>
 8013f22:	2200      	movs	r2, #0
 8013f24:	4b30      	ldr	r3, [pc, #192]	; (8013fe8 <_dtoa_r+0x600>)
 8013f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013f2a:	f7ec fb75 	bl	8000618 <__aeabi_dmul>
 8013f2e:	2200      	movs	r2, #0
 8013f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013f34:	4b2c      	ldr	r3, [pc, #176]	; (8013fe8 <_dtoa_r+0x600>)
 8013f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f3a:	f7ec fb6d 	bl	8000618 <__aeabi_dmul>
 8013f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8013f42:	e7c4      	b.n	8013ece <_dtoa_r+0x4e6>
 8013f44:	462a      	mov	r2, r5
 8013f46:	4633      	mov	r3, r6
 8013f48:	f7ec fb66 	bl	8000618 <__aeabi_dmul>
 8013f4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013f50:	eb0b 0507 	add.w	r5, fp, r7
 8013f54:	465e      	mov	r6, fp
 8013f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f5a:	f7ec fe0d 	bl	8000b78 <__aeabi_d2iz>
 8013f5e:	4607      	mov	r7, r0
 8013f60:	f7ec faf0 	bl	8000544 <__aeabi_i2d>
 8013f64:	3730      	adds	r7, #48	; 0x30
 8013f66:	4602      	mov	r2, r0
 8013f68:	460b      	mov	r3, r1
 8013f6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f6e:	f7ec f99b 	bl	80002a8 <__aeabi_dsub>
 8013f72:	f806 7b01 	strb.w	r7, [r6], #1
 8013f76:	42ae      	cmp	r6, r5
 8013f78:	e9cd 0100 	strd	r0, r1, [sp]
 8013f7c:	f04f 0200 	mov.w	r2, #0
 8013f80:	d126      	bne.n	8013fd0 <_dtoa_r+0x5e8>
 8013f82:	4b1c      	ldr	r3, [pc, #112]	; (8013ff4 <_dtoa_r+0x60c>)
 8013f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013f88:	f7ec f990 	bl	80002ac <__adddf3>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	460b      	mov	r3, r1
 8013f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f94:	f7ec fdd0 	bl	8000b38 <__aeabi_dcmpgt>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d174      	bne.n	8014086 <_dtoa_r+0x69e>
 8013f9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	4914      	ldr	r1, [pc, #80]	; (8013ff4 <_dtoa_r+0x60c>)
 8013fa4:	f7ec f980 	bl	80002a8 <__aeabi_dsub>
 8013fa8:	4602      	mov	r2, r0
 8013faa:	460b      	mov	r3, r1
 8013fac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fb0:	f7ec fda4 	bl	8000afc <__aeabi_dcmplt>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	f43f af30 	beq.w	8013e1a <_dtoa_r+0x432>
 8013fba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013fbe:	2b30      	cmp	r3, #48	; 0x30
 8013fc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8013fc4:	d002      	beq.n	8013fcc <_dtoa_r+0x5e4>
 8013fc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013fca:	e04a      	b.n	8014062 <_dtoa_r+0x67a>
 8013fcc:	4615      	mov	r5, r2
 8013fce:	e7f4      	b.n	8013fba <_dtoa_r+0x5d2>
 8013fd0:	4b05      	ldr	r3, [pc, #20]	; (8013fe8 <_dtoa_r+0x600>)
 8013fd2:	f7ec fb21 	bl	8000618 <__aeabi_dmul>
 8013fd6:	e9cd 0100 	strd	r0, r1, [sp]
 8013fda:	e7bc      	b.n	8013f56 <_dtoa_r+0x56e>
 8013fdc:	08017ea0 	.word	0x08017ea0
 8013fe0:	08017e78 	.word	0x08017e78
 8013fe4:	3ff00000 	.word	0x3ff00000
 8013fe8:	40240000 	.word	0x40240000
 8013fec:	401c0000 	.word	0x401c0000
 8013ff0:	40140000 	.word	0x40140000
 8013ff4:	3fe00000 	.word	0x3fe00000
 8013ff8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013ffc:	465d      	mov	r5, fp
 8013ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014002:	4630      	mov	r0, r6
 8014004:	4639      	mov	r1, r7
 8014006:	f7ec fc31 	bl	800086c <__aeabi_ddiv>
 801400a:	f7ec fdb5 	bl	8000b78 <__aeabi_d2iz>
 801400e:	4680      	mov	r8, r0
 8014010:	f7ec fa98 	bl	8000544 <__aeabi_i2d>
 8014014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014018:	f7ec fafe 	bl	8000618 <__aeabi_dmul>
 801401c:	4602      	mov	r2, r0
 801401e:	460b      	mov	r3, r1
 8014020:	4630      	mov	r0, r6
 8014022:	4639      	mov	r1, r7
 8014024:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014028:	f7ec f93e 	bl	80002a8 <__aeabi_dsub>
 801402c:	f805 6b01 	strb.w	r6, [r5], #1
 8014030:	eba5 060b 	sub.w	r6, r5, fp
 8014034:	45b1      	cmp	r9, r6
 8014036:	4602      	mov	r2, r0
 8014038:	460b      	mov	r3, r1
 801403a:	d139      	bne.n	80140b0 <_dtoa_r+0x6c8>
 801403c:	f7ec f936 	bl	80002ac <__adddf3>
 8014040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014044:	4606      	mov	r6, r0
 8014046:	460f      	mov	r7, r1
 8014048:	f7ec fd76 	bl	8000b38 <__aeabi_dcmpgt>
 801404c:	b9c8      	cbnz	r0, 8014082 <_dtoa_r+0x69a>
 801404e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014052:	4630      	mov	r0, r6
 8014054:	4639      	mov	r1, r7
 8014056:	f7ec fd47 	bl	8000ae8 <__aeabi_dcmpeq>
 801405a:	b110      	cbz	r0, 8014062 <_dtoa_r+0x67a>
 801405c:	f018 0f01 	tst.w	r8, #1
 8014060:	d10f      	bne.n	8014082 <_dtoa_r+0x69a>
 8014062:	9904      	ldr	r1, [sp, #16]
 8014064:	4620      	mov	r0, r4
 8014066:	f000 fe07 	bl	8014c78 <_Bfree>
 801406a:	2300      	movs	r3, #0
 801406c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801406e:	702b      	strb	r3, [r5, #0]
 8014070:	f10a 0301 	add.w	r3, sl, #1
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 8241 	beq.w	8014500 <_dtoa_r+0xb18>
 801407e:	601d      	str	r5, [r3, #0]
 8014080:	e23e      	b.n	8014500 <_dtoa_r+0xb18>
 8014082:	f8cd a020 	str.w	sl, [sp, #32]
 8014086:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801408a:	2a39      	cmp	r2, #57	; 0x39
 801408c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014090:	d108      	bne.n	80140a4 <_dtoa_r+0x6bc>
 8014092:	459b      	cmp	fp, r3
 8014094:	d10a      	bne.n	80140ac <_dtoa_r+0x6c4>
 8014096:	9b08      	ldr	r3, [sp, #32]
 8014098:	3301      	adds	r3, #1
 801409a:	9308      	str	r3, [sp, #32]
 801409c:	2330      	movs	r3, #48	; 0x30
 801409e:	f88b 3000 	strb.w	r3, [fp]
 80140a2:	465b      	mov	r3, fp
 80140a4:	781a      	ldrb	r2, [r3, #0]
 80140a6:	3201      	adds	r2, #1
 80140a8:	701a      	strb	r2, [r3, #0]
 80140aa:	e78c      	b.n	8013fc6 <_dtoa_r+0x5de>
 80140ac:	461d      	mov	r5, r3
 80140ae:	e7ea      	b.n	8014086 <_dtoa_r+0x69e>
 80140b0:	2200      	movs	r2, #0
 80140b2:	4b9b      	ldr	r3, [pc, #620]	; (8014320 <_dtoa_r+0x938>)
 80140b4:	f7ec fab0 	bl	8000618 <__aeabi_dmul>
 80140b8:	2200      	movs	r2, #0
 80140ba:	2300      	movs	r3, #0
 80140bc:	4606      	mov	r6, r0
 80140be:	460f      	mov	r7, r1
 80140c0:	f7ec fd12 	bl	8000ae8 <__aeabi_dcmpeq>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d09a      	beq.n	8013ffe <_dtoa_r+0x616>
 80140c8:	e7cb      	b.n	8014062 <_dtoa_r+0x67a>
 80140ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140cc:	2a00      	cmp	r2, #0
 80140ce:	f000 808b 	beq.w	80141e8 <_dtoa_r+0x800>
 80140d2:	9a06      	ldr	r2, [sp, #24]
 80140d4:	2a01      	cmp	r2, #1
 80140d6:	dc6e      	bgt.n	80141b6 <_dtoa_r+0x7ce>
 80140d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80140da:	2a00      	cmp	r2, #0
 80140dc:	d067      	beq.n	80141ae <_dtoa_r+0x7c6>
 80140de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80140e2:	9f07      	ldr	r7, [sp, #28]
 80140e4:	9d05      	ldr	r5, [sp, #20]
 80140e6:	9a05      	ldr	r2, [sp, #20]
 80140e8:	2101      	movs	r1, #1
 80140ea:	441a      	add	r2, r3
 80140ec:	4620      	mov	r0, r4
 80140ee:	9205      	str	r2, [sp, #20]
 80140f0:	4498      	add	r8, r3
 80140f2:	f000 fe9f 	bl	8014e34 <__i2b>
 80140f6:	4606      	mov	r6, r0
 80140f8:	2d00      	cmp	r5, #0
 80140fa:	dd0c      	ble.n	8014116 <_dtoa_r+0x72e>
 80140fc:	f1b8 0f00 	cmp.w	r8, #0
 8014100:	dd09      	ble.n	8014116 <_dtoa_r+0x72e>
 8014102:	4545      	cmp	r5, r8
 8014104:	9a05      	ldr	r2, [sp, #20]
 8014106:	462b      	mov	r3, r5
 8014108:	bfa8      	it	ge
 801410a:	4643      	movge	r3, r8
 801410c:	1ad2      	subs	r2, r2, r3
 801410e:	9205      	str	r2, [sp, #20]
 8014110:	1aed      	subs	r5, r5, r3
 8014112:	eba8 0803 	sub.w	r8, r8, r3
 8014116:	9b07      	ldr	r3, [sp, #28]
 8014118:	b1eb      	cbz	r3, 8014156 <_dtoa_r+0x76e>
 801411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801411c:	2b00      	cmp	r3, #0
 801411e:	d067      	beq.n	80141f0 <_dtoa_r+0x808>
 8014120:	b18f      	cbz	r7, 8014146 <_dtoa_r+0x75e>
 8014122:	4631      	mov	r1, r6
 8014124:	463a      	mov	r2, r7
 8014126:	4620      	mov	r0, r4
 8014128:	f000 ff24 	bl	8014f74 <__pow5mult>
 801412c:	9a04      	ldr	r2, [sp, #16]
 801412e:	4601      	mov	r1, r0
 8014130:	4606      	mov	r6, r0
 8014132:	4620      	mov	r0, r4
 8014134:	f000 fe87 	bl	8014e46 <__multiply>
 8014138:	9904      	ldr	r1, [sp, #16]
 801413a:	9008      	str	r0, [sp, #32]
 801413c:	4620      	mov	r0, r4
 801413e:	f000 fd9b 	bl	8014c78 <_Bfree>
 8014142:	9b08      	ldr	r3, [sp, #32]
 8014144:	9304      	str	r3, [sp, #16]
 8014146:	9b07      	ldr	r3, [sp, #28]
 8014148:	1bda      	subs	r2, r3, r7
 801414a:	d004      	beq.n	8014156 <_dtoa_r+0x76e>
 801414c:	9904      	ldr	r1, [sp, #16]
 801414e:	4620      	mov	r0, r4
 8014150:	f000 ff10 	bl	8014f74 <__pow5mult>
 8014154:	9004      	str	r0, [sp, #16]
 8014156:	2101      	movs	r1, #1
 8014158:	4620      	mov	r0, r4
 801415a:	f000 fe6b 	bl	8014e34 <__i2b>
 801415e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014160:	4607      	mov	r7, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	f000 81d0 	beq.w	8014508 <_dtoa_r+0xb20>
 8014168:	461a      	mov	r2, r3
 801416a:	4601      	mov	r1, r0
 801416c:	4620      	mov	r0, r4
 801416e:	f000 ff01 	bl	8014f74 <__pow5mult>
 8014172:	9b06      	ldr	r3, [sp, #24]
 8014174:	2b01      	cmp	r3, #1
 8014176:	4607      	mov	r7, r0
 8014178:	dc40      	bgt.n	80141fc <_dtoa_r+0x814>
 801417a:	9b00      	ldr	r3, [sp, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d139      	bne.n	80141f4 <_dtoa_r+0x80c>
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014186:	2b00      	cmp	r3, #0
 8014188:	d136      	bne.n	80141f8 <_dtoa_r+0x810>
 801418a:	9b01      	ldr	r3, [sp, #4]
 801418c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014190:	0d1b      	lsrs	r3, r3, #20
 8014192:	051b      	lsls	r3, r3, #20
 8014194:	b12b      	cbz	r3, 80141a2 <_dtoa_r+0x7ba>
 8014196:	9b05      	ldr	r3, [sp, #20]
 8014198:	3301      	adds	r3, #1
 801419a:	9305      	str	r3, [sp, #20]
 801419c:	f108 0801 	add.w	r8, r8, #1
 80141a0:	2301      	movs	r3, #1
 80141a2:	9307      	str	r3, [sp, #28]
 80141a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d12a      	bne.n	8014200 <_dtoa_r+0x818>
 80141aa:	2001      	movs	r0, #1
 80141ac:	e030      	b.n	8014210 <_dtoa_r+0x828>
 80141ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80141b4:	e795      	b.n	80140e2 <_dtoa_r+0x6fa>
 80141b6:	9b07      	ldr	r3, [sp, #28]
 80141b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80141bc:	42bb      	cmp	r3, r7
 80141be:	bfbf      	itttt	lt
 80141c0:	9b07      	ldrlt	r3, [sp, #28]
 80141c2:	9707      	strlt	r7, [sp, #28]
 80141c4:	1afa      	sublt	r2, r7, r3
 80141c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80141c8:	bfbb      	ittet	lt
 80141ca:	189b      	addlt	r3, r3, r2
 80141cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80141ce:	1bdf      	subge	r7, r3, r7
 80141d0:	2700      	movlt	r7, #0
 80141d2:	f1b9 0f00 	cmp.w	r9, #0
 80141d6:	bfb5      	itete	lt
 80141d8:	9b05      	ldrlt	r3, [sp, #20]
 80141da:	9d05      	ldrge	r5, [sp, #20]
 80141dc:	eba3 0509 	sublt.w	r5, r3, r9
 80141e0:	464b      	movge	r3, r9
 80141e2:	bfb8      	it	lt
 80141e4:	2300      	movlt	r3, #0
 80141e6:	e77e      	b.n	80140e6 <_dtoa_r+0x6fe>
 80141e8:	9f07      	ldr	r7, [sp, #28]
 80141ea:	9d05      	ldr	r5, [sp, #20]
 80141ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80141ee:	e783      	b.n	80140f8 <_dtoa_r+0x710>
 80141f0:	9a07      	ldr	r2, [sp, #28]
 80141f2:	e7ab      	b.n	801414c <_dtoa_r+0x764>
 80141f4:	2300      	movs	r3, #0
 80141f6:	e7d4      	b.n	80141a2 <_dtoa_r+0x7ba>
 80141f8:	9b00      	ldr	r3, [sp, #0]
 80141fa:	e7d2      	b.n	80141a2 <_dtoa_r+0x7ba>
 80141fc:	2300      	movs	r3, #0
 80141fe:	9307      	str	r3, [sp, #28]
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014206:	6918      	ldr	r0, [r3, #16]
 8014208:	f000 fdc6 	bl	8014d98 <__hi0bits>
 801420c:	f1c0 0020 	rsb	r0, r0, #32
 8014210:	4440      	add	r0, r8
 8014212:	f010 001f 	ands.w	r0, r0, #31
 8014216:	d047      	beq.n	80142a8 <_dtoa_r+0x8c0>
 8014218:	f1c0 0320 	rsb	r3, r0, #32
 801421c:	2b04      	cmp	r3, #4
 801421e:	dd3b      	ble.n	8014298 <_dtoa_r+0x8b0>
 8014220:	9b05      	ldr	r3, [sp, #20]
 8014222:	f1c0 001c 	rsb	r0, r0, #28
 8014226:	4403      	add	r3, r0
 8014228:	9305      	str	r3, [sp, #20]
 801422a:	4405      	add	r5, r0
 801422c:	4480      	add	r8, r0
 801422e:	9b05      	ldr	r3, [sp, #20]
 8014230:	2b00      	cmp	r3, #0
 8014232:	dd05      	ble.n	8014240 <_dtoa_r+0x858>
 8014234:	461a      	mov	r2, r3
 8014236:	9904      	ldr	r1, [sp, #16]
 8014238:	4620      	mov	r0, r4
 801423a:	f000 fee9 	bl	8015010 <__lshift>
 801423e:	9004      	str	r0, [sp, #16]
 8014240:	f1b8 0f00 	cmp.w	r8, #0
 8014244:	dd05      	ble.n	8014252 <_dtoa_r+0x86a>
 8014246:	4639      	mov	r1, r7
 8014248:	4642      	mov	r2, r8
 801424a:	4620      	mov	r0, r4
 801424c:	f000 fee0 	bl	8015010 <__lshift>
 8014250:	4607      	mov	r7, r0
 8014252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014254:	b353      	cbz	r3, 80142ac <_dtoa_r+0x8c4>
 8014256:	4639      	mov	r1, r7
 8014258:	9804      	ldr	r0, [sp, #16]
 801425a:	f000 ff2d 	bl	80150b8 <__mcmp>
 801425e:	2800      	cmp	r0, #0
 8014260:	da24      	bge.n	80142ac <_dtoa_r+0x8c4>
 8014262:	2300      	movs	r3, #0
 8014264:	220a      	movs	r2, #10
 8014266:	9904      	ldr	r1, [sp, #16]
 8014268:	4620      	mov	r0, r4
 801426a:	f000 fd1c 	bl	8014ca6 <__multadd>
 801426e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014270:	9004      	str	r0, [sp, #16]
 8014272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014276:	2b00      	cmp	r3, #0
 8014278:	f000 814d 	beq.w	8014516 <_dtoa_r+0xb2e>
 801427c:	2300      	movs	r3, #0
 801427e:	4631      	mov	r1, r6
 8014280:	220a      	movs	r2, #10
 8014282:	4620      	mov	r0, r4
 8014284:	f000 fd0f 	bl	8014ca6 <__multadd>
 8014288:	9b02      	ldr	r3, [sp, #8]
 801428a:	2b00      	cmp	r3, #0
 801428c:	4606      	mov	r6, r0
 801428e:	dc4f      	bgt.n	8014330 <_dtoa_r+0x948>
 8014290:	9b06      	ldr	r3, [sp, #24]
 8014292:	2b02      	cmp	r3, #2
 8014294:	dd4c      	ble.n	8014330 <_dtoa_r+0x948>
 8014296:	e011      	b.n	80142bc <_dtoa_r+0x8d4>
 8014298:	d0c9      	beq.n	801422e <_dtoa_r+0x846>
 801429a:	9a05      	ldr	r2, [sp, #20]
 801429c:	331c      	adds	r3, #28
 801429e:	441a      	add	r2, r3
 80142a0:	9205      	str	r2, [sp, #20]
 80142a2:	441d      	add	r5, r3
 80142a4:	4498      	add	r8, r3
 80142a6:	e7c2      	b.n	801422e <_dtoa_r+0x846>
 80142a8:	4603      	mov	r3, r0
 80142aa:	e7f6      	b.n	801429a <_dtoa_r+0x8b2>
 80142ac:	f1b9 0f00 	cmp.w	r9, #0
 80142b0:	dc38      	bgt.n	8014324 <_dtoa_r+0x93c>
 80142b2:	9b06      	ldr	r3, [sp, #24]
 80142b4:	2b02      	cmp	r3, #2
 80142b6:	dd35      	ble.n	8014324 <_dtoa_r+0x93c>
 80142b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80142bc:	9b02      	ldr	r3, [sp, #8]
 80142be:	b963      	cbnz	r3, 80142da <_dtoa_r+0x8f2>
 80142c0:	4639      	mov	r1, r7
 80142c2:	2205      	movs	r2, #5
 80142c4:	4620      	mov	r0, r4
 80142c6:	f000 fcee 	bl	8014ca6 <__multadd>
 80142ca:	4601      	mov	r1, r0
 80142cc:	4607      	mov	r7, r0
 80142ce:	9804      	ldr	r0, [sp, #16]
 80142d0:	f000 fef2 	bl	80150b8 <__mcmp>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	f73f adcc 	bgt.w	8013e72 <_dtoa_r+0x48a>
 80142da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142dc:	465d      	mov	r5, fp
 80142de:	ea6f 0a03 	mvn.w	sl, r3
 80142e2:	f04f 0900 	mov.w	r9, #0
 80142e6:	4639      	mov	r1, r7
 80142e8:	4620      	mov	r0, r4
 80142ea:	f000 fcc5 	bl	8014c78 <_Bfree>
 80142ee:	2e00      	cmp	r6, #0
 80142f0:	f43f aeb7 	beq.w	8014062 <_dtoa_r+0x67a>
 80142f4:	f1b9 0f00 	cmp.w	r9, #0
 80142f8:	d005      	beq.n	8014306 <_dtoa_r+0x91e>
 80142fa:	45b1      	cmp	r9, r6
 80142fc:	d003      	beq.n	8014306 <_dtoa_r+0x91e>
 80142fe:	4649      	mov	r1, r9
 8014300:	4620      	mov	r0, r4
 8014302:	f000 fcb9 	bl	8014c78 <_Bfree>
 8014306:	4631      	mov	r1, r6
 8014308:	4620      	mov	r0, r4
 801430a:	f000 fcb5 	bl	8014c78 <_Bfree>
 801430e:	e6a8      	b.n	8014062 <_dtoa_r+0x67a>
 8014310:	2700      	movs	r7, #0
 8014312:	463e      	mov	r6, r7
 8014314:	e7e1      	b.n	80142da <_dtoa_r+0x8f2>
 8014316:	f8dd a020 	ldr.w	sl, [sp, #32]
 801431a:	463e      	mov	r6, r7
 801431c:	e5a9      	b.n	8013e72 <_dtoa_r+0x48a>
 801431e:	bf00      	nop
 8014320:	40240000 	.word	0x40240000
 8014324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014326:	f8cd 9008 	str.w	r9, [sp, #8]
 801432a:	2b00      	cmp	r3, #0
 801432c:	f000 80fa 	beq.w	8014524 <_dtoa_r+0xb3c>
 8014330:	2d00      	cmp	r5, #0
 8014332:	dd05      	ble.n	8014340 <_dtoa_r+0x958>
 8014334:	4631      	mov	r1, r6
 8014336:	462a      	mov	r2, r5
 8014338:	4620      	mov	r0, r4
 801433a:	f000 fe69 	bl	8015010 <__lshift>
 801433e:	4606      	mov	r6, r0
 8014340:	9b07      	ldr	r3, [sp, #28]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d04c      	beq.n	80143e0 <_dtoa_r+0x9f8>
 8014346:	6871      	ldr	r1, [r6, #4]
 8014348:	4620      	mov	r0, r4
 801434a:	f000 fc61 	bl	8014c10 <_Balloc>
 801434e:	6932      	ldr	r2, [r6, #16]
 8014350:	3202      	adds	r2, #2
 8014352:	4605      	mov	r5, r0
 8014354:	0092      	lsls	r2, r2, #2
 8014356:	f106 010c 	add.w	r1, r6, #12
 801435a:	300c      	adds	r0, #12
 801435c:	f7fd fc50 	bl	8011c00 <memcpy>
 8014360:	2201      	movs	r2, #1
 8014362:	4629      	mov	r1, r5
 8014364:	4620      	mov	r0, r4
 8014366:	f000 fe53 	bl	8015010 <__lshift>
 801436a:	9b00      	ldr	r3, [sp, #0]
 801436c:	f8cd b014 	str.w	fp, [sp, #20]
 8014370:	f003 0301 	and.w	r3, r3, #1
 8014374:	46b1      	mov	r9, r6
 8014376:	9307      	str	r3, [sp, #28]
 8014378:	4606      	mov	r6, r0
 801437a:	4639      	mov	r1, r7
 801437c:	9804      	ldr	r0, [sp, #16]
 801437e:	f7ff faa5 	bl	80138cc <quorem>
 8014382:	4649      	mov	r1, r9
 8014384:	4605      	mov	r5, r0
 8014386:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801438a:	9804      	ldr	r0, [sp, #16]
 801438c:	f000 fe94 	bl	80150b8 <__mcmp>
 8014390:	4632      	mov	r2, r6
 8014392:	9000      	str	r0, [sp, #0]
 8014394:	4639      	mov	r1, r7
 8014396:	4620      	mov	r0, r4
 8014398:	f000 fea8 	bl	80150ec <__mdiff>
 801439c:	68c3      	ldr	r3, [r0, #12]
 801439e:	4602      	mov	r2, r0
 80143a0:	bb03      	cbnz	r3, 80143e4 <_dtoa_r+0x9fc>
 80143a2:	4601      	mov	r1, r0
 80143a4:	9008      	str	r0, [sp, #32]
 80143a6:	9804      	ldr	r0, [sp, #16]
 80143a8:	f000 fe86 	bl	80150b8 <__mcmp>
 80143ac:	9a08      	ldr	r2, [sp, #32]
 80143ae:	4603      	mov	r3, r0
 80143b0:	4611      	mov	r1, r2
 80143b2:	4620      	mov	r0, r4
 80143b4:	9308      	str	r3, [sp, #32]
 80143b6:	f000 fc5f 	bl	8014c78 <_Bfree>
 80143ba:	9b08      	ldr	r3, [sp, #32]
 80143bc:	b9a3      	cbnz	r3, 80143e8 <_dtoa_r+0xa00>
 80143be:	9a06      	ldr	r2, [sp, #24]
 80143c0:	b992      	cbnz	r2, 80143e8 <_dtoa_r+0xa00>
 80143c2:	9a07      	ldr	r2, [sp, #28]
 80143c4:	b982      	cbnz	r2, 80143e8 <_dtoa_r+0xa00>
 80143c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80143ca:	d029      	beq.n	8014420 <_dtoa_r+0xa38>
 80143cc:	9b00      	ldr	r3, [sp, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	dd01      	ble.n	80143d6 <_dtoa_r+0x9ee>
 80143d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80143d6:	9b05      	ldr	r3, [sp, #20]
 80143d8:	1c5d      	adds	r5, r3, #1
 80143da:	f883 8000 	strb.w	r8, [r3]
 80143de:	e782      	b.n	80142e6 <_dtoa_r+0x8fe>
 80143e0:	4630      	mov	r0, r6
 80143e2:	e7c2      	b.n	801436a <_dtoa_r+0x982>
 80143e4:	2301      	movs	r3, #1
 80143e6:	e7e3      	b.n	80143b0 <_dtoa_r+0x9c8>
 80143e8:	9a00      	ldr	r2, [sp, #0]
 80143ea:	2a00      	cmp	r2, #0
 80143ec:	db04      	blt.n	80143f8 <_dtoa_r+0xa10>
 80143ee:	d125      	bne.n	801443c <_dtoa_r+0xa54>
 80143f0:	9a06      	ldr	r2, [sp, #24]
 80143f2:	bb1a      	cbnz	r2, 801443c <_dtoa_r+0xa54>
 80143f4:	9a07      	ldr	r2, [sp, #28]
 80143f6:	bb0a      	cbnz	r2, 801443c <_dtoa_r+0xa54>
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	ddec      	ble.n	80143d6 <_dtoa_r+0x9ee>
 80143fc:	2201      	movs	r2, #1
 80143fe:	9904      	ldr	r1, [sp, #16]
 8014400:	4620      	mov	r0, r4
 8014402:	f000 fe05 	bl	8015010 <__lshift>
 8014406:	4639      	mov	r1, r7
 8014408:	9004      	str	r0, [sp, #16]
 801440a:	f000 fe55 	bl	80150b8 <__mcmp>
 801440e:	2800      	cmp	r0, #0
 8014410:	dc03      	bgt.n	801441a <_dtoa_r+0xa32>
 8014412:	d1e0      	bne.n	80143d6 <_dtoa_r+0x9ee>
 8014414:	f018 0f01 	tst.w	r8, #1
 8014418:	d0dd      	beq.n	80143d6 <_dtoa_r+0x9ee>
 801441a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801441e:	d1d8      	bne.n	80143d2 <_dtoa_r+0x9ea>
 8014420:	9b05      	ldr	r3, [sp, #20]
 8014422:	9a05      	ldr	r2, [sp, #20]
 8014424:	1c5d      	adds	r5, r3, #1
 8014426:	2339      	movs	r3, #57	; 0x39
 8014428:	7013      	strb	r3, [r2, #0]
 801442a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801442e:	2b39      	cmp	r3, #57	; 0x39
 8014430:	f105 32ff 	add.w	r2, r5, #4294967295
 8014434:	d04f      	beq.n	80144d6 <_dtoa_r+0xaee>
 8014436:	3301      	adds	r3, #1
 8014438:	7013      	strb	r3, [r2, #0]
 801443a:	e754      	b.n	80142e6 <_dtoa_r+0x8fe>
 801443c:	9a05      	ldr	r2, [sp, #20]
 801443e:	2b00      	cmp	r3, #0
 8014440:	f102 0501 	add.w	r5, r2, #1
 8014444:	dd06      	ble.n	8014454 <_dtoa_r+0xa6c>
 8014446:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801444a:	d0e9      	beq.n	8014420 <_dtoa_r+0xa38>
 801444c:	f108 0801 	add.w	r8, r8, #1
 8014450:	9b05      	ldr	r3, [sp, #20]
 8014452:	e7c2      	b.n	80143da <_dtoa_r+0x9f2>
 8014454:	9a02      	ldr	r2, [sp, #8]
 8014456:	f805 8c01 	strb.w	r8, [r5, #-1]
 801445a:	eba5 030b 	sub.w	r3, r5, fp
 801445e:	4293      	cmp	r3, r2
 8014460:	d021      	beq.n	80144a6 <_dtoa_r+0xabe>
 8014462:	2300      	movs	r3, #0
 8014464:	220a      	movs	r2, #10
 8014466:	9904      	ldr	r1, [sp, #16]
 8014468:	4620      	mov	r0, r4
 801446a:	f000 fc1c 	bl	8014ca6 <__multadd>
 801446e:	45b1      	cmp	r9, r6
 8014470:	9004      	str	r0, [sp, #16]
 8014472:	f04f 0300 	mov.w	r3, #0
 8014476:	f04f 020a 	mov.w	r2, #10
 801447a:	4649      	mov	r1, r9
 801447c:	4620      	mov	r0, r4
 801447e:	d105      	bne.n	801448c <_dtoa_r+0xaa4>
 8014480:	f000 fc11 	bl	8014ca6 <__multadd>
 8014484:	4681      	mov	r9, r0
 8014486:	4606      	mov	r6, r0
 8014488:	9505      	str	r5, [sp, #20]
 801448a:	e776      	b.n	801437a <_dtoa_r+0x992>
 801448c:	f000 fc0b 	bl	8014ca6 <__multadd>
 8014490:	4631      	mov	r1, r6
 8014492:	4681      	mov	r9, r0
 8014494:	2300      	movs	r3, #0
 8014496:	220a      	movs	r2, #10
 8014498:	4620      	mov	r0, r4
 801449a:	f000 fc04 	bl	8014ca6 <__multadd>
 801449e:	4606      	mov	r6, r0
 80144a0:	e7f2      	b.n	8014488 <_dtoa_r+0xaa0>
 80144a2:	f04f 0900 	mov.w	r9, #0
 80144a6:	2201      	movs	r2, #1
 80144a8:	9904      	ldr	r1, [sp, #16]
 80144aa:	4620      	mov	r0, r4
 80144ac:	f000 fdb0 	bl	8015010 <__lshift>
 80144b0:	4639      	mov	r1, r7
 80144b2:	9004      	str	r0, [sp, #16]
 80144b4:	f000 fe00 	bl	80150b8 <__mcmp>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	dcb6      	bgt.n	801442a <_dtoa_r+0xa42>
 80144bc:	d102      	bne.n	80144c4 <_dtoa_r+0xadc>
 80144be:	f018 0f01 	tst.w	r8, #1
 80144c2:	d1b2      	bne.n	801442a <_dtoa_r+0xa42>
 80144c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80144c8:	2b30      	cmp	r3, #48	; 0x30
 80144ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80144ce:	f47f af0a 	bne.w	80142e6 <_dtoa_r+0x8fe>
 80144d2:	4615      	mov	r5, r2
 80144d4:	e7f6      	b.n	80144c4 <_dtoa_r+0xadc>
 80144d6:	4593      	cmp	fp, r2
 80144d8:	d105      	bne.n	80144e6 <_dtoa_r+0xafe>
 80144da:	2331      	movs	r3, #49	; 0x31
 80144dc:	f10a 0a01 	add.w	sl, sl, #1
 80144e0:	f88b 3000 	strb.w	r3, [fp]
 80144e4:	e6ff      	b.n	80142e6 <_dtoa_r+0x8fe>
 80144e6:	4615      	mov	r5, r2
 80144e8:	e79f      	b.n	801442a <_dtoa_r+0xa42>
 80144ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014550 <_dtoa_r+0xb68>
 80144ee:	e007      	b.n	8014500 <_dtoa_r+0xb18>
 80144f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014554 <_dtoa_r+0xb6c>
 80144f6:	b11b      	cbz	r3, 8014500 <_dtoa_r+0xb18>
 80144f8:	f10b 0308 	add.w	r3, fp, #8
 80144fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	4658      	mov	r0, fp
 8014502:	b017      	add	sp, #92	; 0x5c
 8014504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014508:	9b06      	ldr	r3, [sp, #24]
 801450a:	2b01      	cmp	r3, #1
 801450c:	f77f ae35 	ble.w	801417a <_dtoa_r+0x792>
 8014510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014512:	9307      	str	r3, [sp, #28]
 8014514:	e649      	b.n	80141aa <_dtoa_r+0x7c2>
 8014516:	9b02      	ldr	r3, [sp, #8]
 8014518:	2b00      	cmp	r3, #0
 801451a:	dc03      	bgt.n	8014524 <_dtoa_r+0xb3c>
 801451c:	9b06      	ldr	r3, [sp, #24]
 801451e:	2b02      	cmp	r3, #2
 8014520:	f73f aecc 	bgt.w	80142bc <_dtoa_r+0x8d4>
 8014524:	465d      	mov	r5, fp
 8014526:	4639      	mov	r1, r7
 8014528:	9804      	ldr	r0, [sp, #16]
 801452a:	f7ff f9cf 	bl	80138cc <quorem>
 801452e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014532:	f805 8b01 	strb.w	r8, [r5], #1
 8014536:	9a02      	ldr	r2, [sp, #8]
 8014538:	eba5 030b 	sub.w	r3, r5, fp
 801453c:	429a      	cmp	r2, r3
 801453e:	ddb0      	ble.n	80144a2 <_dtoa_r+0xaba>
 8014540:	2300      	movs	r3, #0
 8014542:	220a      	movs	r2, #10
 8014544:	9904      	ldr	r1, [sp, #16]
 8014546:	4620      	mov	r0, r4
 8014548:	f000 fbad 	bl	8014ca6 <__multadd>
 801454c:	9004      	str	r0, [sp, #16]
 801454e:	e7ea      	b.n	8014526 <_dtoa_r+0xb3e>
 8014550:	08017f9b 	.word	0x08017f9b
 8014554:	08017e60 	.word	0x08017e60

08014558 <rshift>:
 8014558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801455a:	6906      	ldr	r6, [r0, #16]
 801455c:	114b      	asrs	r3, r1, #5
 801455e:	429e      	cmp	r6, r3
 8014560:	f100 0414 	add.w	r4, r0, #20
 8014564:	dd30      	ble.n	80145c8 <rshift+0x70>
 8014566:	f011 011f 	ands.w	r1, r1, #31
 801456a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801456e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014572:	d108      	bne.n	8014586 <rshift+0x2e>
 8014574:	4621      	mov	r1, r4
 8014576:	42b2      	cmp	r2, r6
 8014578:	460b      	mov	r3, r1
 801457a:	d211      	bcs.n	80145a0 <rshift+0x48>
 801457c:	f852 3b04 	ldr.w	r3, [r2], #4
 8014580:	f841 3b04 	str.w	r3, [r1], #4
 8014584:	e7f7      	b.n	8014576 <rshift+0x1e>
 8014586:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801458a:	f1c1 0c20 	rsb	ip, r1, #32
 801458e:	40cd      	lsrs	r5, r1
 8014590:	3204      	adds	r2, #4
 8014592:	4623      	mov	r3, r4
 8014594:	42b2      	cmp	r2, r6
 8014596:	4617      	mov	r7, r2
 8014598:	d30c      	bcc.n	80145b4 <rshift+0x5c>
 801459a:	601d      	str	r5, [r3, #0]
 801459c:	b105      	cbz	r5, 80145a0 <rshift+0x48>
 801459e:	3304      	adds	r3, #4
 80145a0:	1b1a      	subs	r2, r3, r4
 80145a2:	42a3      	cmp	r3, r4
 80145a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80145a8:	bf08      	it	eq
 80145aa:	2300      	moveq	r3, #0
 80145ac:	6102      	str	r2, [r0, #16]
 80145ae:	bf08      	it	eq
 80145b0:	6143      	streq	r3, [r0, #20]
 80145b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b4:	683f      	ldr	r7, [r7, #0]
 80145b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80145ba:	433d      	orrs	r5, r7
 80145bc:	f843 5b04 	str.w	r5, [r3], #4
 80145c0:	f852 5b04 	ldr.w	r5, [r2], #4
 80145c4:	40cd      	lsrs	r5, r1
 80145c6:	e7e5      	b.n	8014594 <rshift+0x3c>
 80145c8:	4623      	mov	r3, r4
 80145ca:	e7e9      	b.n	80145a0 <rshift+0x48>

080145cc <__hexdig_fun>:
 80145cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80145d0:	2b09      	cmp	r3, #9
 80145d2:	d802      	bhi.n	80145da <__hexdig_fun+0xe>
 80145d4:	3820      	subs	r0, #32
 80145d6:	b2c0      	uxtb	r0, r0
 80145d8:	4770      	bx	lr
 80145da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80145de:	2b05      	cmp	r3, #5
 80145e0:	d801      	bhi.n	80145e6 <__hexdig_fun+0x1a>
 80145e2:	3847      	subs	r0, #71	; 0x47
 80145e4:	e7f7      	b.n	80145d6 <__hexdig_fun+0xa>
 80145e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80145ea:	2b05      	cmp	r3, #5
 80145ec:	d801      	bhi.n	80145f2 <__hexdig_fun+0x26>
 80145ee:	3827      	subs	r0, #39	; 0x27
 80145f0:	e7f1      	b.n	80145d6 <__hexdig_fun+0xa>
 80145f2:	2000      	movs	r0, #0
 80145f4:	4770      	bx	lr

080145f6 <__gethex>:
 80145f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fa:	b08b      	sub	sp, #44	; 0x2c
 80145fc:	468a      	mov	sl, r1
 80145fe:	9002      	str	r0, [sp, #8]
 8014600:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014602:	9306      	str	r3, [sp, #24]
 8014604:	4690      	mov	r8, r2
 8014606:	f000 fadf 	bl	8014bc8 <__localeconv_l>
 801460a:	6803      	ldr	r3, [r0, #0]
 801460c:	9303      	str	r3, [sp, #12]
 801460e:	4618      	mov	r0, r3
 8014610:	f7eb fde8 	bl	80001e4 <strlen>
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	9001      	str	r0, [sp, #4]
 8014618:	4403      	add	r3, r0
 801461a:	f04f 0b00 	mov.w	fp, #0
 801461e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014622:	9307      	str	r3, [sp, #28]
 8014624:	f8da 3000 	ldr.w	r3, [sl]
 8014628:	3302      	adds	r3, #2
 801462a:	461f      	mov	r7, r3
 801462c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014630:	2830      	cmp	r0, #48	; 0x30
 8014632:	d06c      	beq.n	801470e <__gethex+0x118>
 8014634:	f7ff ffca 	bl	80145cc <__hexdig_fun>
 8014638:	4604      	mov	r4, r0
 801463a:	2800      	cmp	r0, #0
 801463c:	d16a      	bne.n	8014714 <__gethex+0x11e>
 801463e:	9a01      	ldr	r2, [sp, #4]
 8014640:	9903      	ldr	r1, [sp, #12]
 8014642:	4638      	mov	r0, r7
 8014644:	f001 fb78 	bl	8015d38 <strncmp>
 8014648:	2800      	cmp	r0, #0
 801464a:	d166      	bne.n	801471a <__gethex+0x124>
 801464c:	9b01      	ldr	r3, [sp, #4]
 801464e:	5cf8      	ldrb	r0, [r7, r3]
 8014650:	18fe      	adds	r6, r7, r3
 8014652:	f7ff ffbb 	bl	80145cc <__hexdig_fun>
 8014656:	2800      	cmp	r0, #0
 8014658:	d062      	beq.n	8014720 <__gethex+0x12a>
 801465a:	4633      	mov	r3, r6
 801465c:	7818      	ldrb	r0, [r3, #0]
 801465e:	2830      	cmp	r0, #48	; 0x30
 8014660:	461f      	mov	r7, r3
 8014662:	f103 0301 	add.w	r3, r3, #1
 8014666:	d0f9      	beq.n	801465c <__gethex+0x66>
 8014668:	f7ff ffb0 	bl	80145cc <__hexdig_fun>
 801466c:	fab0 f580 	clz	r5, r0
 8014670:	096d      	lsrs	r5, r5, #5
 8014672:	4634      	mov	r4, r6
 8014674:	f04f 0b01 	mov.w	fp, #1
 8014678:	463a      	mov	r2, r7
 801467a:	4616      	mov	r6, r2
 801467c:	3201      	adds	r2, #1
 801467e:	7830      	ldrb	r0, [r6, #0]
 8014680:	f7ff ffa4 	bl	80145cc <__hexdig_fun>
 8014684:	2800      	cmp	r0, #0
 8014686:	d1f8      	bne.n	801467a <__gethex+0x84>
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	9903      	ldr	r1, [sp, #12]
 801468c:	4630      	mov	r0, r6
 801468e:	f001 fb53 	bl	8015d38 <strncmp>
 8014692:	b950      	cbnz	r0, 80146aa <__gethex+0xb4>
 8014694:	b954      	cbnz	r4, 80146ac <__gethex+0xb6>
 8014696:	9b01      	ldr	r3, [sp, #4]
 8014698:	18f4      	adds	r4, r6, r3
 801469a:	4622      	mov	r2, r4
 801469c:	4616      	mov	r6, r2
 801469e:	3201      	adds	r2, #1
 80146a0:	7830      	ldrb	r0, [r6, #0]
 80146a2:	f7ff ff93 	bl	80145cc <__hexdig_fun>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d1f8      	bne.n	801469c <__gethex+0xa6>
 80146aa:	b10c      	cbz	r4, 80146b0 <__gethex+0xba>
 80146ac:	1ba4      	subs	r4, r4, r6
 80146ae:	00a4      	lsls	r4, r4, #2
 80146b0:	7833      	ldrb	r3, [r6, #0]
 80146b2:	2b50      	cmp	r3, #80	; 0x50
 80146b4:	d001      	beq.n	80146ba <__gethex+0xc4>
 80146b6:	2b70      	cmp	r3, #112	; 0x70
 80146b8:	d140      	bne.n	801473c <__gethex+0x146>
 80146ba:	7873      	ldrb	r3, [r6, #1]
 80146bc:	2b2b      	cmp	r3, #43	; 0x2b
 80146be:	d031      	beq.n	8014724 <__gethex+0x12e>
 80146c0:	2b2d      	cmp	r3, #45	; 0x2d
 80146c2:	d033      	beq.n	801472c <__gethex+0x136>
 80146c4:	1c71      	adds	r1, r6, #1
 80146c6:	f04f 0900 	mov.w	r9, #0
 80146ca:	7808      	ldrb	r0, [r1, #0]
 80146cc:	f7ff ff7e 	bl	80145cc <__hexdig_fun>
 80146d0:	1e43      	subs	r3, r0, #1
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	2b18      	cmp	r3, #24
 80146d6:	d831      	bhi.n	801473c <__gethex+0x146>
 80146d8:	f1a0 0210 	sub.w	r2, r0, #16
 80146dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80146e0:	f7ff ff74 	bl	80145cc <__hexdig_fun>
 80146e4:	1e43      	subs	r3, r0, #1
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	2b18      	cmp	r3, #24
 80146ea:	d922      	bls.n	8014732 <__gethex+0x13c>
 80146ec:	f1b9 0f00 	cmp.w	r9, #0
 80146f0:	d000      	beq.n	80146f4 <__gethex+0xfe>
 80146f2:	4252      	negs	r2, r2
 80146f4:	4414      	add	r4, r2
 80146f6:	f8ca 1000 	str.w	r1, [sl]
 80146fa:	b30d      	cbz	r5, 8014740 <__gethex+0x14a>
 80146fc:	f1bb 0f00 	cmp.w	fp, #0
 8014700:	bf0c      	ite	eq
 8014702:	2706      	moveq	r7, #6
 8014704:	2700      	movne	r7, #0
 8014706:	4638      	mov	r0, r7
 8014708:	b00b      	add	sp, #44	; 0x2c
 801470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801470e:	f10b 0b01 	add.w	fp, fp, #1
 8014712:	e78a      	b.n	801462a <__gethex+0x34>
 8014714:	2500      	movs	r5, #0
 8014716:	462c      	mov	r4, r5
 8014718:	e7ae      	b.n	8014678 <__gethex+0x82>
 801471a:	463e      	mov	r6, r7
 801471c:	2501      	movs	r5, #1
 801471e:	e7c7      	b.n	80146b0 <__gethex+0xba>
 8014720:	4604      	mov	r4, r0
 8014722:	e7fb      	b.n	801471c <__gethex+0x126>
 8014724:	f04f 0900 	mov.w	r9, #0
 8014728:	1cb1      	adds	r1, r6, #2
 801472a:	e7ce      	b.n	80146ca <__gethex+0xd4>
 801472c:	f04f 0901 	mov.w	r9, #1
 8014730:	e7fa      	b.n	8014728 <__gethex+0x132>
 8014732:	230a      	movs	r3, #10
 8014734:	fb03 0202 	mla	r2, r3, r2, r0
 8014738:	3a10      	subs	r2, #16
 801473a:	e7cf      	b.n	80146dc <__gethex+0xe6>
 801473c:	4631      	mov	r1, r6
 801473e:	e7da      	b.n	80146f6 <__gethex+0x100>
 8014740:	1bf3      	subs	r3, r6, r7
 8014742:	3b01      	subs	r3, #1
 8014744:	4629      	mov	r1, r5
 8014746:	2b07      	cmp	r3, #7
 8014748:	dc49      	bgt.n	80147de <__gethex+0x1e8>
 801474a:	9802      	ldr	r0, [sp, #8]
 801474c:	f000 fa60 	bl	8014c10 <_Balloc>
 8014750:	9b01      	ldr	r3, [sp, #4]
 8014752:	f100 0914 	add.w	r9, r0, #20
 8014756:	f04f 0b00 	mov.w	fp, #0
 801475a:	f1c3 0301 	rsb	r3, r3, #1
 801475e:	4605      	mov	r5, r0
 8014760:	f8cd 9010 	str.w	r9, [sp, #16]
 8014764:	46da      	mov	sl, fp
 8014766:	9308      	str	r3, [sp, #32]
 8014768:	42b7      	cmp	r7, r6
 801476a:	d33b      	bcc.n	80147e4 <__gethex+0x1ee>
 801476c:	9804      	ldr	r0, [sp, #16]
 801476e:	f840 ab04 	str.w	sl, [r0], #4
 8014772:	eba0 0009 	sub.w	r0, r0, r9
 8014776:	1080      	asrs	r0, r0, #2
 8014778:	6128      	str	r0, [r5, #16]
 801477a:	0147      	lsls	r7, r0, #5
 801477c:	4650      	mov	r0, sl
 801477e:	f000 fb0b 	bl	8014d98 <__hi0bits>
 8014782:	f8d8 6000 	ldr.w	r6, [r8]
 8014786:	1a3f      	subs	r7, r7, r0
 8014788:	42b7      	cmp	r7, r6
 801478a:	dd64      	ble.n	8014856 <__gethex+0x260>
 801478c:	1bbf      	subs	r7, r7, r6
 801478e:	4639      	mov	r1, r7
 8014790:	4628      	mov	r0, r5
 8014792:	f000 fe1b 	bl	80153cc <__any_on>
 8014796:	4682      	mov	sl, r0
 8014798:	b178      	cbz	r0, 80147ba <__gethex+0x1c4>
 801479a:	1e7b      	subs	r3, r7, #1
 801479c:	1159      	asrs	r1, r3, #5
 801479e:	f003 021f 	and.w	r2, r3, #31
 80147a2:	f04f 0a01 	mov.w	sl, #1
 80147a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80147aa:	fa0a f202 	lsl.w	r2, sl, r2
 80147ae:	420a      	tst	r2, r1
 80147b0:	d003      	beq.n	80147ba <__gethex+0x1c4>
 80147b2:	4553      	cmp	r3, sl
 80147b4:	dc46      	bgt.n	8014844 <__gethex+0x24e>
 80147b6:	f04f 0a02 	mov.w	sl, #2
 80147ba:	4639      	mov	r1, r7
 80147bc:	4628      	mov	r0, r5
 80147be:	f7ff fecb 	bl	8014558 <rshift>
 80147c2:	443c      	add	r4, r7
 80147c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80147c8:	42a3      	cmp	r3, r4
 80147ca:	da52      	bge.n	8014872 <__gethex+0x27c>
 80147cc:	4629      	mov	r1, r5
 80147ce:	9802      	ldr	r0, [sp, #8]
 80147d0:	f000 fa52 	bl	8014c78 <_Bfree>
 80147d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80147d6:	2300      	movs	r3, #0
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	27a3      	movs	r7, #163	; 0xa3
 80147dc:	e793      	b.n	8014706 <__gethex+0x110>
 80147de:	3101      	adds	r1, #1
 80147e0:	105b      	asrs	r3, r3, #1
 80147e2:	e7b0      	b.n	8014746 <__gethex+0x150>
 80147e4:	1e73      	subs	r3, r6, #1
 80147e6:	9305      	str	r3, [sp, #20]
 80147e8:	9a07      	ldr	r2, [sp, #28]
 80147ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d018      	beq.n	8014824 <__gethex+0x22e>
 80147f2:	f1bb 0f20 	cmp.w	fp, #32
 80147f6:	d107      	bne.n	8014808 <__gethex+0x212>
 80147f8:	9b04      	ldr	r3, [sp, #16]
 80147fa:	f8c3 a000 	str.w	sl, [r3]
 80147fe:	3304      	adds	r3, #4
 8014800:	f04f 0a00 	mov.w	sl, #0
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	46d3      	mov	fp, sl
 8014808:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801480c:	f7ff fede 	bl	80145cc <__hexdig_fun>
 8014810:	f000 000f 	and.w	r0, r0, #15
 8014814:	fa00 f00b 	lsl.w	r0, r0, fp
 8014818:	ea4a 0a00 	orr.w	sl, sl, r0
 801481c:	f10b 0b04 	add.w	fp, fp, #4
 8014820:	9b05      	ldr	r3, [sp, #20]
 8014822:	e00d      	b.n	8014840 <__gethex+0x24a>
 8014824:	9b05      	ldr	r3, [sp, #20]
 8014826:	9a08      	ldr	r2, [sp, #32]
 8014828:	4413      	add	r3, r2
 801482a:	42bb      	cmp	r3, r7
 801482c:	d3e1      	bcc.n	80147f2 <__gethex+0x1fc>
 801482e:	4618      	mov	r0, r3
 8014830:	9a01      	ldr	r2, [sp, #4]
 8014832:	9903      	ldr	r1, [sp, #12]
 8014834:	9309      	str	r3, [sp, #36]	; 0x24
 8014836:	f001 fa7f 	bl	8015d38 <strncmp>
 801483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801483c:	2800      	cmp	r0, #0
 801483e:	d1d8      	bne.n	80147f2 <__gethex+0x1fc>
 8014840:	461e      	mov	r6, r3
 8014842:	e791      	b.n	8014768 <__gethex+0x172>
 8014844:	1eb9      	subs	r1, r7, #2
 8014846:	4628      	mov	r0, r5
 8014848:	f000 fdc0 	bl	80153cc <__any_on>
 801484c:	2800      	cmp	r0, #0
 801484e:	d0b2      	beq.n	80147b6 <__gethex+0x1c0>
 8014850:	f04f 0a03 	mov.w	sl, #3
 8014854:	e7b1      	b.n	80147ba <__gethex+0x1c4>
 8014856:	da09      	bge.n	801486c <__gethex+0x276>
 8014858:	1bf7      	subs	r7, r6, r7
 801485a:	4629      	mov	r1, r5
 801485c:	463a      	mov	r2, r7
 801485e:	9802      	ldr	r0, [sp, #8]
 8014860:	f000 fbd6 	bl	8015010 <__lshift>
 8014864:	1be4      	subs	r4, r4, r7
 8014866:	4605      	mov	r5, r0
 8014868:	f100 0914 	add.w	r9, r0, #20
 801486c:	f04f 0a00 	mov.w	sl, #0
 8014870:	e7a8      	b.n	80147c4 <__gethex+0x1ce>
 8014872:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014876:	42a0      	cmp	r0, r4
 8014878:	dd6a      	ble.n	8014950 <__gethex+0x35a>
 801487a:	1b04      	subs	r4, r0, r4
 801487c:	42a6      	cmp	r6, r4
 801487e:	dc2e      	bgt.n	80148de <__gethex+0x2e8>
 8014880:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014884:	2b02      	cmp	r3, #2
 8014886:	d022      	beq.n	80148ce <__gethex+0x2d8>
 8014888:	2b03      	cmp	r3, #3
 801488a:	d024      	beq.n	80148d6 <__gethex+0x2e0>
 801488c:	2b01      	cmp	r3, #1
 801488e:	d115      	bne.n	80148bc <__gethex+0x2c6>
 8014890:	42a6      	cmp	r6, r4
 8014892:	d113      	bne.n	80148bc <__gethex+0x2c6>
 8014894:	2e01      	cmp	r6, #1
 8014896:	dc0b      	bgt.n	80148b0 <__gethex+0x2ba>
 8014898:	9a06      	ldr	r2, [sp, #24]
 801489a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801489e:	6013      	str	r3, [r2, #0]
 80148a0:	2301      	movs	r3, #1
 80148a2:	612b      	str	r3, [r5, #16]
 80148a4:	f8c9 3000 	str.w	r3, [r9]
 80148a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148aa:	2762      	movs	r7, #98	; 0x62
 80148ac:	601d      	str	r5, [r3, #0]
 80148ae:	e72a      	b.n	8014706 <__gethex+0x110>
 80148b0:	1e71      	subs	r1, r6, #1
 80148b2:	4628      	mov	r0, r5
 80148b4:	f000 fd8a 	bl	80153cc <__any_on>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d1ed      	bne.n	8014898 <__gethex+0x2a2>
 80148bc:	4629      	mov	r1, r5
 80148be:	9802      	ldr	r0, [sp, #8]
 80148c0:	f000 f9da 	bl	8014c78 <_Bfree>
 80148c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148c6:	2300      	movs	r3, #0
 80148c8:	6013      	str	r3, [r2, #0]
 80148ca:	2750      	movs	r7, #80	; 0x50
 80148cc:	e71b      	b.n	8014706 <__gethex+0x110>
 80148ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d0e1      	beq.n	8014898 <__gethex+0x2a2>
 80148d4:	e7f2      	b.n	80148bc <__gethex+0x2c6>
 80148d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d1dd      	bne.n	8014898 <__gethex+0x2a2>
 80148dc:	e7ee      	b.n	80148bc <__gethex+0x2c6>
 80148de:	1e67      	subs	r7, r4, #1
 80148e0:	f1ba 0f00 	cmp.w	sl, #0
 80148e4:	d131      	bne.n	801494a <__gethex+0x354>
 80148e6:	b127      	cbz	r7, 80148f2 <__gethex+0x2fc>
 80148e8:	4639      	mov	r1, r7
 80148ea:	4628      	mov	r0, r5
 80148ec:	f000 fd6e 	bl	80153cc <__any_on>
 80148f0:	4682      	mov	sl, r0
 80148f2:	117a      	asrs	r2, r7, #5
 80148f4:	2301      	movs	r3, #1
 80148f6:	f007 071f 	and.w	r7, r7, #31
 80148fa:	fa03 f707 	lsl.w	r7, r3, r7
 80148fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014902:	4621      	mov	r1, r4
 8014904:	421f      	tst	r7, r3
 8014906:	4628      	mov	r0, r5
 8014908:	bf18      	it	ne
 801490a:	f04a 0a02 	orrne.w	sl, sl, #2
 801490e:	1b36      	subs	r6, r6, r4
 8014910:	f7ff fe22 	bl	8014558 <rshift>
 8014914:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014918:	2702      	movs	r7, #2
 801491a:	f1ba 0f00 	cmp.w	sl, #0
 801491e:	d048      	beq.n	80149b2 <__gethex+0x3bc>
 8014920:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014924:	2b02      	cmp	r3, #2
 8014926:	d015      	beq.n	8014954 <__gethex+0x35e>
 8014928:	2b03      	cmp	r3, #3
 801492a:	d017      	beq.n	801495c <__gethex+0x366>
 801492c:	2b01      	cmp	r3, #1
 801492e:	d109      	bne.n	8014944 <__gethex+0x34e>
 8014930:	f01a 0f02 	tst.w	sl, #2
 8014934:	d006      	beq.n	8014944 <__gethex+0x34e>
 8014936:	f8d9 3000 	ldr.w	r3, [r9]
 801493a:	ea4a 0a03 	orr.w	sl, sl, r3
 801493e:	f01a 0f01 	tst.w	sl, #1
 8014942:	d10e      	bne.n	8014962 <__gethex+0x36c>
 8014944:	f047 0710 	orr.w	r7, r7, #16
 8014948:	e033      	b.n	80149b2 <__gethex+0x3bc>
 801494a:	f04f 0a01 	mov.w	sl, #1
 801494e:	e7d0      	b.n	80148f2 <__gethex+0x2fc>
 8014950:	2701      	movs	r7, #1
 8014952:	e7e2      	b.n	801491a <__gethex+0x324>
 8014954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014956:	f1c3 0301 	rsb	r3, r3, #1
 801495a:	9315      	str	r3, [sp, #84]	; 0x54
 801495c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0f0      	beq.n	8014944 <__gethex+0x34e>
 8014962:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014966:	f105 0314 	add.w	r3, r5, #20
 801496a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801496e:	eb03 010a 	add.w	r1, r3, sl
 8014972:	f04f 0c00 	mov.w	ip, #0
 8014976:	4618      	mov	r0, r3
 8014978:	f853 2b04 	ldr.w	r2, [r3], #4
 801497c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014980:	d01c      	beq.n	80149bc <__gethex+0x3c6>
 8014982:	3201      	adds	r2, #1
 8014984:	6002      	str	r2, [r0, #0]
 8014986:	2f02      	cmp	r7, #2
 8014988:	f105 0314 	add.w	r3, r5, #20
 801498c:	d138      	bne.n	8014a00 <__gethex+0x40a>
 801498e:	f8d8 2000 	ldr.w	r2, [r8]
 8014992:	3a01      	subs	r2, #1
 8014994:	42b2      	cmp	r2, r6
 8014996:	d10a      	bne.n	80149ae <__gethex+0x3b8>
 8014998:	1171      	asrs	r1, r6, #5
 801499a:	2201      	movs	r2, #1
 801499c:	f006 061f 	and.w	r6, r6, #31
 80149a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149a4:	fa02 f606 	lsl.w	r6, r2, r6
 80149a8:	421e      	tst	r6, r3
 80149aa:	bf18      	it	ne
 80149ac:	4617      	movne	r7, r2
 80149ae:	f047 0720 	orr.w	r7, r7, #32
 80149b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149b4:	601d      	str	r5, [r3, #0]
 80149b6:	9b06      	ldr	r3, [sp, #24]
 80149b8:	601c      	str	r4, [r3, #0]
 80149ba:	e6a4      	b.n	8014706 <__gethex+0x110>
 80149bc:	4299      	cmp	r1, r3
 80149be:	f843 cc04 	str.w	ip, [r3, #-4]
 80149c2:	d8d8      	bhi.n	8014976 <__gethex+0x380>
 80149c4:	68ab      	ldr	r3, [r5, #8]
 80149c6:	4599      	cmp	r9, r3
 80149c8:	db12      	blt.n	80149f0 <__gethex+0x3fa>
 80149ca:	6869      	ldr	r1, [r5, #4]
 80149cc:	9802      	ldr	r0, [sp, #8]
 80149ce:	3101      	adds	r1, #1
 80149d0:	f000 f91e 	bl	8014c10 <_Balloc>
 80149d4:	692a      	ldr	r2, [r5, #16]
 80149d6:	3202      	adds	r2, #2
 80149d8:	f105 010c 	add.w	r1, r5, #12
 80149dc:	4683      	mov	fp, r0
 80149de:	0092      	lsls	r2, r2, #2
 80149e0:	300c      	adds	r0, #12
 80149e2:	f7fd f90d 	bl	8011c00 <memcpy>
 80149e6:	4629      	mov	r1, r5
 80149e8:	9802      	ldr	r0, [sp, #8]
 80149ea:	f000 f945 	bl	8014c78 <_Bfree>
 80149ee:	465d      	mov	r5, fp
 80149f0:	692b      	ldr	r3, [r5, #16]
 80149f2:	1c5a      	adds	r2, r3, #1
 80149f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80149f8:	612a      	str	r2, [r5, #16]
 80149fa:	2201      	movs	r2, #1
 80149fc:	615a      	str	r2, [r3, #20]
 80149fe:	e7c2      	b.n	8014986 <__gethex+0x390>
 8014a00:	692a      	ldr	r2, [r5, #16]
 8014a02:	454a      	cmp	r2, r9
 8014a04:	dd0b      	ble.n	8014a1e <__gethex+0x428>
 8014a06:	2101      	movs	r1, #1
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7ff fda5 	bl	8014558 <rshift>
 8014a0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a12:	3401      	adds	r4, #1
 8014a14:	42a3      	cmp	r3, r4
 8014a16:	f6ff aed9 	blt.w	80147cc <__gethex+0x1d6>
 8014a1a:	2701      	movs	r7, #1
 8014a1c:	e7c7      	b.n	80149ae <__gethex+0x3b8>
 8014a1e:	f016 061f 	ands.w	r6, r6, #31
 8014a22:	d0fa      	beq.n	8014a1a <__gethex+0x424>
 8014a24:	449a      	add	sl, r3
 8014a26:	f1c6 0620 	rsb	r6, r6, #32
 8014a2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014a2e:	f000 f9b3 	bl	8014d98 <__hi0bits>
 8014a32:	42b0      	cmp	r0, r6
 8014a34:	dbe7      	blt.n	8014a06 <__gethex+0x410>
 8014a36:	e7f0      	b.n	8014a1a <__gethex+0x424>

08014a38 <L_shift>:
 8014a38:	f1c2 0208 	rsb	r2, r2, #8
 8014a3c:	0092      	lsls	r2, r2, #2
 8014a3e:	b570      	push	{r4, r5, r6, lr}
 8014a40:	f1c2 0620 	rsb	r6, r2, #32
 8014a44:	6843      	ldr	r3, [r0, #4]
 8014a46:	6804      	ldr	r4, [r0, #0]
 8014a48:	fa03 f506 	lsl.w	r5, r3, r6
 8014a4c:	432c      	orrs	r4, r5
 8014a4e:	40d3      	lsrs	r3, r2
 8014a50:	6004      	str	r4, [r0, #0]
 8014a52:	f840 3f04 	str.w	r3, [r0, #4]!
 8014a56:	4288      	cmp	r0, r1
 8014a58:	d3f4      	bcc.n	8014a44 <L_shift+0xc>
 8014a5a:	bd70      	pop	{r4, r5, r6, pc}

08014a5c <__match>:
 8014a5c:	b530      	push	{r4, r5, lr}
 8014a5e:	6803      	ldr	r3, [r0, #0]
 8014a60:	3301      	adds	r3, #1
 8014a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a66:	b914      	cbnz	r4, 8014a6e <__match+0x12>
 8014a68:	6003      	str	r3, [r0, #0]
 8014a6a:	2001      	movs	r0, #1
 8014a6c:	bd30      	pop	{r4, r5, pc}
 8014a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014a76:	2d19      	cmp	r5, #25
 8014a78:	bf98      	it	ls
 8014a7a:	3220      	addls	r2, #32
 8014a7c:	42a2      	cmp	r2, r4
 8014a7e:	d0f0      	beq.n	8014a62 <__match+0x6>
 8014a80:	2000      	movs	r0, #0
 8014a82:	e7f3      	b.n	8014a6c <__match+0x10>

08014a84 <__hexnan>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	680b      	ldr	r3, [r1, #0]
 8014a8a:	6801      	ldr	r1, [r0, #0]
 8014a8c:	115f      	asrs	r7, r3, #5
 8014a8e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014a92:	f013 031f 	ands.w	r3, r3, #31
 8014a96:	b087      	sub	sp, #28
 8014a98:	bf18      	it	ne
 8014a9a:	3704      	addne	r7, #4
 8014a9c:	2500      	movs	r5, #0
 8014a9e:	1f3e      	subs	r6, r7, #4
 8014aa0:	4682      	mov	sl, r0
 8014aa2:	4690      	mov	r8, r2
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	f847 5c04 	str.w	r5, [r7, #-4]
 8014aaa:	46b1      	mov	r9, r6
 8014aac:	4634      	mov	r4, r6
 8014aae:	9502      	str	r5, [sp, #8]
 8014ab0:	46ab      	mov	fp, r5
 8014ab2:	784a      	ldrb	r2, [r1, #1]
 8014ab4:	1c4b      	adds	r3, r1, #1
 8014ab6:	9303      	str	r3, [sp, #12]
 8014ab8:	b342      	cbz	r2, 8014b0c <__hexnan+0x88>
 8014aba:	4610      	mov	r0, r2
 8014abc:	9105      	str	r1, [sp, #20]
 8014abe:	9204      	str	r2, [sp, #16]
 8014ac0:	f7ff fd84 	bl	80145cc <__hexdig_fun>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d143      	bne.n	8014b50 <__hexnan+0xcc>
 8014ac8:	9a04      	ldr	r2, [sp, #16]
 8014aca:	9905      	ldr	r1, [sp, #20]
 8014acc:	2a20      	cmp	r2, #32
 8014ace:	d818      	bhi.n	8014b02 <__hexnan+0x7e>
 8014ad0:	9b02      	ldr	r3, [sp, #8]
 8014ad2:	459b      	cmp	fp, r3
 8014ad4:	dd13      	ble.n	8014afe <__hexnan+0x7a>
 8014ad6:	454c      	cmp	r4, r9
 8014ad8:	d206      	bcs.n	8014ae8 <__hexnan+0x64>
 8014ada:	2d07      	cmp	r5, #7
 8014adc:	dc04      	bgt.n	8014ae8 <__hexnan+0x64>
 8014ade:	462a      	mov	r2, r5
 8014ae0:	4649      	mov	r1, r9
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f7ff ffa8 	bl	8014a38 <L_shift>
 8014ae8:	4544      	cmp	r4, r8
 8014aea:	d944      	bls.n	8014b76 <__hexnan+0xf2>
 8014aec:	2300      	movs	r3, #0
 8014aee:	f1a4 0904 	sub.w	r9, r4, #4
 8014af2:	f844 3c04 	str.w	r3, [r4, #-4]
 8014af6:	f8cd b008 	str.w	fp, [sp, #8]
 8014afa:	464c      	mov	r4, r9
 8014afc:	461d      	mov	r5, r3
 8014afe:	9903      	ldr	r1, [sp, #12]
 8014b00:	e7d7      	b.n	8014ab2 <__hexnan+0x2e>
 8014b02:	2a29      	cmp	r2, #41	; 0x29
 8014b04:	d14a      	bne.n	8014b9c <__hexnan+0x118>
 8014b06:	3102      	adds	r1, #2
 8014b08:	f8ca 1000 	str.w	r1, [sl]
 8014b0c:	f1bb 0f00 	cmp.w	fp, #0
 8014b10:	d044      	beq.n	8014b9c <__hexnan+0x118>
 8014b12:	454c      	cmp	r4, r9
 8014b14:	d206      	bcs.n	8014b24 <__hexnan+0xa0>
 8014b16:	2d07      	cmp	r5, #7
 8014b18:	dc04      	bgt.n	8014b24 <__hexnan+0xa0>
 8014b1a:	462a      	mov	r2, r5
 8014b1c:	4649      	mov	r1, r9
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f7ff ff8a 	bl	8014a38 <L_shift>
 8014b24:	4544      	cmp	r4, r8
 8014b26:	d928      	bls.n	8014b7a <__hexnan+0xf6>
 8014b28:	4643      	mov	r3, r8
 8014b2a:	f854 2b04 	ldr.w	r2, [r4], #4
 8014b2e:	f843 2b04 	str.w	r2, [r3], #4
 8014b32:	42a6      	cmp	r6, r4
 8014b34:	d2f9      	bcs.n	8014b2a <__hexnan+0xa6>
 8014b36:	2200      	movs	r2, #0
 8014b38:	f843 2b04 	str.w	r2, [r3], #4
 8014b3c:	429e      	cmp	r6, r3
 8014b3e:	d2fb      	bcs.n	8014b38 <__hexnan+0xb4>
 8014b40:	6833      	ldr	r3, [r6, #0]
 8014b42:	b91b      	cbnz	r3, 8014b4c <__hexnan+0xc8>
 8014b44:	4546      	cmp	r6, r8
 8014b46:	d127      	bne.n	8014b98 <__hexnan+0x114>
 8014b48:	2301      	movs	r3, #1
 8014b4a:	6033      	str	r3, [r6, #0]
 8014b4c:	2005      	movs	r0, #5
 8014b4e:	e026      	b.n	8014b9e <__hexnan+0x11a>
 8014b50:	3501      	adds	r5, #1
 8014b52:	2d08      	cmp	r5, #8
 8014b54:	f10b 0b01 	add.w	fp, fp, #1
 8014b58:	dd06      	ble.n	8014b68 <__hexnan+0xe4>
 8014b5a:	4544      	cmp	r4, r8
 8014b5c:	d9cf      	bls.n	8014afe <__hexnan+0x7a>
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b64:	2501      	movs	r5, #1
 8014b66:	3c04      	subs	r4, #4
 8014b68:	6822      	ldr	r2, [r4, #0]
 8014b6a:	f000 000f 	and.w	r0, r0, #15
 8014b6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014b72:	6020      	str	r0, [r4, #0]
 8014b74:	e7c3      	b.n	8014afe <__hexnan+0x7a>
 8014b76:	2508      	movs	r5, #8
 8014b78:	e7c1      	b.n	8014afe <__hexnan+0x7a>
 8014b7a:	9b01      	ldr	r3, [sp, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d0df      	beq.n	8014b40 <__hexnan+0xbc>
 8014b80:	f04f 32ff 	mov.w	r2, #4294967295
 8014b84:	f1c3 0320 	rsb	r3, r3, #32
 8014b88:	fa22 f303 	lsr.w	r3, r2, r3
 8014b8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014b90:	401a      	ands	r2, r3
 8014b92:	f847 2c04 	str.w	r2, [r7, #-4]
 8014b96:	e7d3      	b.n	8014b40 <__hexnan+0xbc>
 8014b98:	3e04      	subs	r6, #4
 8014b9a:	e7d1      	b.n	8014b40 <__hexnan+0xbc>
 8014b9c:	2004      	movs	r0, #4
 8014b9e:	b007      	add	sp, #28
 8014ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ba4 <__locale_ctype_ptr_l>:
 8014ba4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014ba8:	4770      	bx	lr
	...

08014bac <__locale_ctype_ptr>:
 8014bac:	4b04      	ldr	r3, [pc, #16]	; (8014bc0 <__locale_ctype_ptr+0x14>)
 8014bae:	4a05      	ldr	r2, [pc, #20]	; (8014bc4 <__locale_ctype_ptr+0x18>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	6a1b      	ldr	r3, [r3, #32]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	bf08      	it	eq
 8014bb8:	4613      	moveq	r3, r2
 8014bba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014bbe:	4770      	bx	lr
 8014bc0:	20000e34 	.word	0x20000e34
 8014bc4:	20000e98 	.word	0x20000e98

08014bc8 <__localeconv_l>:
 8014bc8:	30f0      	adds	r0, #240	; 0xf0
 8014bca:	4770      	bx	lr

08014bcc <_localeconv_r>:
 8014bcc:	4b04      	ldr	r3, [pc, #16]	; (8014be0 <_localeconv_r+0x14>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	6a18      	ldr	r0, [r3, #32]
 8014bd2:	4b04      	ldr	r3, [pc, #16]	; (8014be4 <_localeconv_r+0x18>)
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	bf08      	it	eq
 8014bd8:	4618      	moveq	r0, r3
 8014bda:	30f0      	adds	r0, #240	; 0xf0
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	20000e34 	.word	0x20000e34
 8014be4:	20000e98 	.word	0x20000e98

08014be8 <__ascii_mbtowc>:
 8014be8:	b082      	sub	sp, #8
 8014bea:	b901      	cbnz	r1, 8014bee <__ascii_mbtowc+0x6>
 8014bec:	a901      	add	r1, sp, #4
 8014bee:	b142      	cbz	r2, 8014c02 <__ascii_mbtowc+0x1a>
 8014bf0:	b14b      	cbz	r3, 8014c06 <__ascii_mbtowc+0x1e>
 8014bf2:	7813      	ldrb	r3, [r2, #0]
 8014bf4:	600b      	str	r3, [r1, #0]
 8014bf6:	7812      	ldrb	r2, [r2, #0]
 8014bf8:	1c10      	adds	r0, r2, #0
 8014bfa:	bf18      	it	ne
 8014bfc:	2001      	movne	r0, #1
 8014bfe:	b002      	add	sp, #8
 8014c00:	4770      	bx	lr
 8014c02:	4610      	mov	r0, r2
 8014c04:	e7fb      	b.n	8014bfe <__ascii_mbtowc+0x16>
 8014c06:	f06f 0001 	mvn.w	r0, #1
 8014c0a:	e7f8      	b.n	8014bfe <__ascii_mbtowc+0x16>

08014c0c <__malloc_lock>:
 8014c0c:	4770      	bx	lr

08014c0e <__malloc_unlock>:
 8014c0e:	4770      	bx	lr

08014c10 <_Balloc>:
 8014c10:	b570      	push	{r4, r5, r6, lr}
 8014c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c14:	4604      	mov	r4, r0
 8014c16:	460e      	mov	r6, r1
 8014c18:	b93d      	cbnz	r5, 8014c2a <_Balloc+0x1a>
 8014c1a:	2010      	movs	r0, #16
 8014c1c:	f7fc ffe0 	bl	8011be0 <malloc>
 8014c20:	6260      	str	r0, [r4, #36]	; 0x24
 8014c22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c26:	6005      	str	r5, [r0, #0]
 8014c28:	60c5      	str	r5, [r0, #12]
 8014c2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014c2c:	68eb      	ldr	r3, [r5, #12]
 8014c2e:	b183      	cbz	r3, 8014c52 <_Balloc+0x42>
 8014c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c32:	68db      	ldr	r3, [r3, #12]
 8014c34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014c38:	b9b8      	cbnz	r0, 8014c6a <_Balloc+0x5a>
 8014c3a:	2101      	movs	r1, #1
 8014c3c:	fa01 f506 	lsl.w	r5, r1, r6
 8014c40:	1d6a      	adds	r2, r5, #5
 8014c42:	0092      	lsls	r2, r2, #2
 8014c44:	4620      	mov	r0, r4
 8014c46:	f000 fbe2 	bl	801540e <_calloc_r>
 8014c4a:	b160      	cbz	r0, 8014c66 <_Balloc+0x56>
 8014c4c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014c50:	e00e      	b.n	8014c70 <_Balloc+0x60>
 8014c52:	2221      	movs	r2, #33	; 0x21
 8014c54:	2104      	movs	r1, #4
 8014c56:	4620      	mov	r0, r4
 8014c58:	f000 fbd9 	bl	801540e <_calloc_r>
 8014c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c5e:	60e8      	str	r0, [r5, #12]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d1e4      	bne.n	8014c30 <_Balloc+0x20>
 8014c66:	2000      	movs	r0, #0
 8014c68:	bd70      	pop	{r4, r5, r6, pc}
 8014c6a:	6802      	ldr	r2, [r0, #0]
 8014c6c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014c70:	2300      	movs	r3, #0
 8014c72:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014c76:	e7f7      	b.n	8014c68 <_Balloc+0x58>

08014c78 <_Bfree>:
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014c7c:	4606      	mov	r6, r0
 8014c7e:	460d      	mov	r5, r1
 8014c80:	b93c      	cbnz	r4, 8014c92 <_Bfree+0x1a>
 8014c82:	2010      	movs	r0, #16
 8014c84:	f7fc ffac 	bl	8011be0 <malloc>
 8014c88:	6270      	str	r0, [r6, #36]	; 0x24
 8014c8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c8e:	6004      	str	r4, [r0, #0]
 8014c90:	60c4      	str	r4, [r0, #12]
 8014c92:	b13d      	cbz	r5, 8014ca4 <_Bfree+0x2c>
 8014c94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014c96:	686a      	ldr	r2, [r5, #4]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c9e:	6029      	str	r1, [r5, #0]
 8014ca0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}

08014ca6 <__multadd>:
 8014ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014caa:	690d      	ldr	r5, [r1, #16]
 8014cac:	461f      	mov	r7, r3
 8014cae:	4606      	mov	r6, r0
 8014cb0:	460c      	mov	r4, r1
 8014cb2:	f101 0c14 	add.w	ip, r1, #20
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f8dc 0000 	ldr.w	r0, [ip]
 8014cbc:	b281      	uxth	r1, r0
 8014cbe:	fb02 7101 	mla	r1, r2, r1, r7
 8014cc2:	0c0f      	lsrs	r7, r1, #16
 8014cc4:	0c00      	lsrs	r0, r0, #16
 8014cc6:	fb02 7000 	mla	r0, r2, r0, r7
 8014cca:	b289      	uxth	r1, r1
 8014ccc:	3301      	adds	r3, #1
 8014cce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014cd2:	429d      	cmp	r5, r3
 8014cd4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014cd8:	f84c 1b04 	str.w	r1, [ip], #4
 8014cdc:	dcec      	bgt.n	8014cb8 <__multadd+0x12>
 8014cde:	b1d7      	cbz	r7, 8014d16 <__multadd+0x70>
 8014ce0:	68a3      	ldr	r3, [r4, #8]
 8014ce2:	42ab      	cmp	r3, r5
 8014ce4:	dc12      	bgt.n	8014d0c <__multadd+0x66>
 8014ce6:	6861      	ldr	r1, [r4, #4]
 8014ce8:	4630      	mov	r0, r6
 8014cea:	3101      	adds	r1, #1
 8014cec:	f7ff ff90 	bl	8014c10 <_Balloc>
 8014cf0:	6922      	ldr	r2, [r4, #16]
 8014cf2:	3202      	adds	r2, #2
 8014cf4:	f104 010c 	add.w	r1, r4, #12
 8014cf8:	4680      	mov	r8, r0
 8014cfa:	0092      	lsls	r2, r2, #2
 8014cfc:	300c      	adds	r0, #12
 8014cfe:	f7fc ff7f 	bl	8011c00 <memcpy>
 8014d02:	4621      	mov	r1, r4
 8014d04:	4630      	mov	r0, r6
 8014d06:	f7ff ffb7 	bl	8014c78 <_Bfree>
 8014d0a:	4644      	mov	r4, r8
 8014d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014d10:	3501      	adds	r5, #1
 8014d12:	615f      	str	r7, [r3, #20]
 8014d14:	6125      	str	r5, [r4, #16]
 8014d16:	4620      	mov	r0, r4
 8014d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d1c <__s2b>:
 8014d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d20:	460c      	mov	r4, r1
 8014d22:	4615      	mov	r5, r2
 8014d24:	461f      	mov	r7, r3
 8014d26:	2209      	movs	r2, #9
 8014d28:	3308      	adds	r3, #8
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d30:	2100      	movs	r1, #0
 8014d32:	2201      	movs	r2, #1
 8014d34:	429a      	cmp	r2, r3
 8014d36:	db20      	blt.n	8014d7a <__s2b+0x5e>
 8014d38:	4630      	mov	r0, r6
 8014d3a:	f7ff ff69 	bl	8014c10 <_Balloc>
 8014d3e:	9b08      	ldr	r3, [sp, #32]
 8014d40:	6143      	str	r3, [r0, #20]
 8014d42:	2d09      	cmp	r5, #9
 8014d44:	f04f 0301 	mov.w	r3, #1
 8014d48:	6103      	str	r3, [r0, #16]
 8014d4a:	dd19      	ble.n	8014d80 <__s2b+0x64>
 8014d4c:	f104 0809 	add.w	r8, r4, #9
 8014d50:	46c1      	mov	r9, r8
 8014d52:	442c      	add	r4, r5
 8014d54:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014d58:	4601      	mov	r1, r0
 8014d5a:	3b30      	subs	r3, #48	; 0x30
 8014d5c:	220a      	movs	r2, #10
 8014d5e:	4630      	mov	r0, r6
 8014d60:	f7ff ffa1 	bl	8014ca6 <__multadd>
 8014d64:	45a1      	cmp	r9, r4
 8014d66:	d1f5      	bne.n	8014d54 <__s2b+0x38>
 8014d68:	eb08 0405 	add.w	r4, r8, r5
 8014d6c:	3c08      	subs	r4, #8
 8014d6e:	1b2d      	subs	r5, r5, r4
 8014d70:	1963      	adds	r3, r4, r5
 8014d72:	42bb      	cmp	r3, r7
 8014d74:	db07      	blt.n	8014d86 <__s2b+0x6a>
 8014d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d7a:	0052      	lsls	r2, r2, #1
 8014d7c:	3101      	adds	r1, #1
 8014d7e:	e7d9      	b.n	8014d34 <__s2b+0x18>
 8014d80:	340a      	adds	r4, #10
 8014d82:	2509      	movs	r5, #9
 8014d84:	e7f3      	b.n	8014d6e <__s2b+0x52>
 8014d86:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014d8a:	4601      	mov	r1, r0
 8014d8c:	3b30      	subs	r3, #48	; 0x30
 8014d8e:	220a      	movs	r2, #10
 8014d90:	4630      	mov	r0, r6
 8014d92:	f7ff ff88 	bl	8014ca6 <__multadd>
 8014d96:	e7eb      	b.n	8014d70 <__s2b+0x54>

08014d98 <__hi0bits>:
 8014d98:	0c02      	lsrs	r2, r0, #16
 8014d9a:	0412      	lsls	r2, r2, #16
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	b9b2      	cbnz	r2, 8014dce <__hi0bits+0x36>
 8014da0:	0403      	lsls	r3, r0, #16
 8014da2:	2010      	movs	r0, #16
 8014da4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014da8:	bf04      	itt	eq
 8014daa:	021b      	lsleq	r3, r3, #8
 8014dac:	3008      	addeq	r0, #8
 8014dae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014db2:	bf04      	itt	eq
 8014db4:	011b      	lsleq	r3, r3, #4
 8014db6:	3004      	addeq	r0, #4
 8014db8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014dbc:	bf04      	itt	eq
 8014dbe:	009b      	lsleq	r3, r3, #2
 8014dc0:	3002      	addeq	r0, #2
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	db06      	blt.n	8014dd4 <__hi0bits+0x3c>
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	d503      	bpl.n	8014dd2 <__hi0bits+0x3a>
 8014dca:	3001      	adds	r0, #1
 8014dcc:	4770      	bx	lr
 8014dce:	2000      	movs	r0, #0
 8014dd0:	e7e8      	b.n	8014da4 <__hi0bits+0xc>
 8014dd2:	2020      	movs	r0, #32
 8014dd4:	4770      	bx	lr

08014dd6 <__lo0bits>:
 8014dd6:	6803      	ldr	r3, [r0, #0]
 8014dd8:	f013 0207 	ands.w	r2, r3, #7
 8014ddc:	4601      	mov	r1, r0
 8014dde:	d00b      	beq.n	8014df8 <__lo0bits+0x22>
 8014de0:	07da      	lsls	r2, r3, #31
 8014de2:	d423      	bmi.n	8014e2c <__lo0bits+0x56>
 8014de4:	0798      	lsls	r0, r3, #30
 8014de6:	bf49      	itett	mi
 8014de8:	085b      	lsrmi	r3, r3, #1
 8014dea:	089b      	lsrpl	r3, r3, #2
 8014dec:	2001      	movmi	r0, #1
 8014dee:	600b      	strmi	r3, [r1, #0]
 8014df0:	bf5c      	itt	pl
 8014df2:	600b      	strpl	r3, [r1, #0]
 8014df4:	2002      	movpl	r0, #2
 8014df6:	4770      	bx	lr
 8014df8:	b298      	uxth	r0, r3
 8014dfa:	b9a8      	cbnz	r0, 8014e28 <__lo0bits+0x52>
 8014dfc:	0c1b      	lsrs	r3, r3, #16
 8014dfe:	2010      	movs	r0, #16
 8014e00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014e04:	bf04      	itt	eq
 8014e06:	0a1b      	lsreq	r3, r3, #8
 8014e08:	3008      	addeq	r0, #8
 8014e0a:	071a      	lsls	r2, r3, #28
 8014e0c:	bf04      	itt	eq
 8014e0e:	091b      	lsreq	r3, r3, #4
 8014e10:	3004      	addeq	r0, #4
 8014e12:	079a      	lsls	r2, r3, #30
 8014e14:	bf04      	itt	eq
 8014e16:	089b      	lsreq	r3, r3, #2
 8014e18:	3002      	addeq	r0, #2
 8014e1a:	07da      	lsls	r2, r3, #31
 8014e1c:	d402      	bmi.n	8014e24 <__lo0bits+0x4e>
 8014e1e:	085b      	lsrs	r3, r3, #1
 8014e20:	d006      	beq.n	8014e30 <__lo0bits+0x5a>
 8014e22:	3001      	adds	r0, #1
 8014e24:	600b      	str	r3, [r1, #0]
 8014e26:	4770      	bx	lr
 8014e28:	4610      	mov	r0, r2
 8014e2a:	e7e9      	b.n	8014e00 <__lo0bits+0x2a>
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	4770      	bx	lr
 8014e30:	2020      	movs	r0, #32
 8014e32:	4770      	bx	lr

08014e34 <__i2b>:
 8014e34:	b510      	push	{r4, lr}
 8014e36:	460c      	mov	r4, r1
 8014e38:	2101      	movs	r1, #1
 8014e3a:	f7ff fee9 	bl	8014c10 <_Balloc>
 8014e3e:	2201      	movs	r2, #1
 8014e40:	6144      	str	r4, [r0, #20]
 8014e42:	6102      	str	r2, [r0, #16]
 8014e44:	bd10      	pop	{r4, pc}

08014e46 <__multiply>:
 8014e46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4a:	4614      	mov	r4, r2
 8014e4c:	690a      	ldr	r2, [r1, #16]
 8014e4e:	6923      	ldr	r3, [r4, #16]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	bfb8      	it	lt
 8014e54:	460b      	movlt	r3, r1
 8014e56:	4688      	mov	r8, r1
 8014e58:	bfbc      	itt	lt
 8014e5a:	46a0      	movlt	r8, r4
 8014e5c:	461c      	movlt	r4, r3
 8014e5e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014e62:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014e6e:	eb07 0609 	add.w	r6, r7, r9
 8014e72:	42b3      	cmp	r3, r6
 8014e74:	bfb8      	it	lt
 8014e76:	3101      	addlt	r1, #1
 8014e78:	f7ff feca 	bl	8014c10 <_Balloc>
 8014e7c:	f100 0514 	add.w	r5, r0, #20
 8014e80:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014e84:	462b      	mov	r3, r5
 8014e86:	2200      	movs	r2, #0
 8014e88:	4573      	cmp	r3, lr
 8014e8a:	d316      	bcc.n	8014eba <__multiply+0x74>
 8014e8c:	f104 0214 	add.w	r2, r4, #20
 8014e90:	f108 0114 	add.w	r1, r8, #20
 8014e94:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014e98:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	9b00      	ldr	r3, [sp, #0]
 8014ea0:	9201      	str	r2, [sp, #4]
 8014ea2:	4293      	cmp	r3, r2
 8014ea4:	d80c      	bhi.n	8014ec0 <__multiply+0x7a>
 8014ea6:	2e00      	cmp	r6, #0
 8014ea8:	dd03      	ble.n	8014eb2 <__multiply+0x6c>
 8014eaa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d05d      	beq.n	8014f6e <__multiply+0x128>
 8014eb2:	6106      	str	r6, [r0, #16]
 8014eb4:	b003      	add	sp, #12
 8014eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eba:	f843 2b04 	str.w	r2, [r3], #4
 8014ebe:	e7e3      	b.n	8014e88 <__multiply+0x42>
 8014ec0:	f8b2 b000 	ldrh.w	fp, [r2]
 8014ec4:	f1bb 0f00 	cmp.w	fp, #0
 8014ec8:	d023      	beq.n	8014f12 <__multiply+0xcc>
 8014eca:	4689      	mov	r9, r1
 8014ecc:	46ac      	mov	ip, r5
 8014ece:	f04f 0800 	mov.w	r8, #0
 8014ed2:	f859 4b04 	ldr.w	r4, [r9], #4
 8014ed6:	f8dc a000 	ldr.w	sl, [ip]
 8014eda:	b2a3      	uxth	r3, r4
 8014edc:	fa1f fa8a 	uxth.w	sl, sl
 8014ee0:	fb0b a303 	mla	r3, fp, r3, sl
 8014ee4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014ee8:	f8dc 4000 	ldr.w	r4, [ip]
 8014eec:	4443      	add	r3, r8
 8014eee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014ef2:	fb0b 840a 	mla	r4, fp, sl, r8
 8014ef6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014efa:	46e2      	mov	sl, ip
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014f02:	454f      	cmp	r7, r9
 8014f04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014f08:	f84a 3b04 	str.w	r3, [sl], #4
 8014f0c:	d82b      	bhi.n	8014f66 <__multiply+0x120>
 8014f0e:	f8cc 8004 	str.w	r8, [ip, #4]
 8014f12:	9b01      	ldr	r3, [sp, #4]
 8014f14:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014f18:	3204      	adds	r2, #4
 8014f1a:	f1ba 0f00 	cmp.w	sl, #0
 8014f1e:	d020      	beq.n	8014f62 <__multiply+0x11c>
 8014f20:	682b      	ldr	r3, [r5, #0]
 8014f22:	4689      	mov	r9, r1
 8014f24:	46a8      	mov	r8, r5
 8014f26:	f04f 0b00 	mov.w	fp, #0
 8014f2a:	f8b9 c000 	ldrh.w	ip, [r9]
 8014f2e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014f32:	fb0a 440c 	mla	r4, sl, ip, r4
 8014f36:	445c      	add	r4, fp
 8014f38:	46c4      	mov	ip, r8
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014f40:	f84c 3b04 	str.w	r3, [ip], #4
 8014f44:	f859 3b04 	ldr.w	r3, [r9], #4
 8014f48:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014f4c:	0c1b      	lsrs	r3, r3, #16
 8014f4e:	fb0a b303 	mla	r3, sl, r3, fp
 8014f52:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014f56:	454f      	cmp	r7, r9
 8014f58:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014f5c:	d805      	bhi.n	8014f6a <__multiply+0x124>
 8014f5e:	f8c8 3004 	str.w	r3, [r8, #4]
 8014f62:	3504      	adds	r5, #4
 8014f64:	e79b      	b.n	8014e9e <__multiply+0x58>
 8014f66:	46d4      	mov	ip, sl
 8014f68:	e7b3      	b.n	8014ed2 <__multiply+0x8c>
 8014f6a:	46e0      	mov	r8, ip
 8014f6c:	e7dd      	b.n	8014f2a <__multiply+0xe4>
 8014f6e:	3e01      	subs	r6, #1
 8014f70:	e799      	b.n	8014ea6 <__multiply+0x60>
	...

08014f74 <__pow5mult>:
 8014f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f78:	4615      	mov	r5, r2
 8014f7a:	f012 0203 	ands.w	r2, r2, #3
 8014f7e:	4606      	mov	r6, r0
 8014f80:	460f      	mov	r7, r1
 8014f82:	d007      	beq.n	8014f94 <__pow5mult+0x20>
 8014f84:	3a01      	subs	r2, #1
 8014f86:	4c21      	ldr	r4, [pc, #132]	; (801500c <__pow5mult+0x98>)
 8014f88:	2300      	movs	r3, #0
 8014f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014f8e:	f7ff fe8a 	bl	8014ca6 <__multadd>
 8014f92:	4607      	mov	r7, r0
 8014f94:	10ad      	asrs	r5, r5, #2
 8014f96:	d035      	beq.n	8015004 <__pow5mult+0x90>
 8014f98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014f9a:	b93c      	cbnz	r4, 8014fac <__pow5mult+0x38>
 8014f9c:	2010      	movs	r0, #16
 8014f9e:	f7fc fe1f 	bl	8011be0 <malloc>
 8014fa2:	6270      	str	r0, [r6, #36]	; 0x24
 8014fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014fa8:	6004      	str	r4, [r0, #0]
 8014faa:	60c4      	str	r4, [r0, #12]
 8014fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014fb4:	b94c      	cbnz	r4, 8014fca <__pow5mult+0x56>
 8014fb6:	f240 2171 	movw	r1, #625	; 0x271
 8014fba:	4630      	mov	r0, r6
 8014fbc:	f7ff ff3a 	bl	8014e34 <__i2b>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	6003      	str	r3, [r0, #0]
 8014fca:	f04f 0800 	mov.w	r8, #0
 8014fce:	07eb      	lsls	r3, r5, #31
 8014fd0:	d50a      	bpl.n	8014fe8 <__pow5mult+0x74>
 8014fd2:	4639      	mov	r1, r7
 8014fd4:	4622      	mov	r2, r4
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	f7ff ff35 	bl	8014e46 <__multiply>
 8014fdc:	4639      	mov	r1, r7
 8014fde:	4681      	mov	r9, r0
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	f7ff fe49 	bl	8014c78 <_Bfree>
 8014fe6:	464f      	mov	r7, r9
 8014fe8:	106d      	asrs	r5, r5, #1
 8014fea:	d00b      	beq.n	8015004 <__pow5mult+0x90>
 8014fec:	6820      	ldr	r0, [r4, #0]
 8014fee:	b938      	cbnz	r0, 8015000 <__pow5mult+0x8c>
 8014ff0:	4622      	mov	r2, r4
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	f7ff ff26 	bl	8014e46 <__multiply>
 8014ffa:	6020      	str	r0, [r4, #0]
 8014ffc:	f8c0 8000 	str.w	r8, [r0]
 8015000:	4604      	mov	r4, r0
 8015002:	e7e4      	b.n	8014fce <__pow5mult+0x5a>
 8015004:	4638      	mov	r0, r7
 8015006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801500a:	bf00      	nop
 801500c:	08017f68 	.word	0x08017f68

08015010 <__lshift>:
 8015010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015014:	460c      	mov	r4, r1
 8015016:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801501a:	6923      	ldr	r3, [r4, #16]
 801501c:	6849      	ldr	r1, [r1, #4]
 801501e:	eb0a 0903 	add.w	r9, sl, r3
 8015022:	68a3      	ldr	r3, [r4, #8]
 8015024:	4607      	mov	r7, r0
 8015026:	4616      	mov	r6, r2
 8015028:	f109 0501 	add.w	r5, r9, #1
 801502c:	42ab      	cmp	r3, r5
 801502e:	db32      	blt.n	8015096 <__lshift+0x86>
 8015030:	4638      	mov	r0, r7
 8015032:	f7ff fded 	bl	8014c10 <_Balloc>
 8015036:	2300      	movs	r3, #0
 8015038:	4680      	mov	r8, r0
 801503a:	f100 0114 	add.w	r1, r0, #20
 801503e:	461a      	mov	r2, r3
 8015040:	4553      	cmp	r3, sl
 8015042:	db2b      	blt.n	801509c <__lshift+0x8c>
 8015044:	6920      	ldr	r0, [r4, #16]
 8015046:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801504a:	f104 0314 	add.w	r3, r4, #20
 801504e:	f016 021f 	ands.w	r2, r6, #31
 8015052:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015056:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801505a:	d025      	beq.n	80150a8 <__lshift+0x98>
 801505c:	f1c2 0e20 	rsb	lr, r2, #32
 8015060:	2000      	movs	r0, #0
 8015062:	681e      	ldr	r6, [r3, #0]
 8015064:	468a      	mov	sl, r1
 8015066:	4096      	lsls	r6, r2
 8015068:	4330      	orrs	r0, r6
 801506a:	f84a 0b04 	str.w	r0, [sl], #4
 801506e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015072:	459c      	cmp	ip, r3
 8015074:	fa20 f00e 	lsr.w	r0, r0, lr
 8015078:	d814      	bhi.n	80150a4 <__lshift+0x94>
 801507a:	6048      	str	r0, [r1, #4]
 801507c:	b108      	cbz	r0, 8015082 <__lshift+0x72>
 801507e:	f109 0502 	add.w	r5, r9, #2
 8015082:	3d01      	subs	r5, #1
 8015084:	4638      	mov	r0, r7
 8015086:	f8c8 5010 	str.w	r5, [r8, #16]
 801508a:	4621      	mov	r1, r4
 801508c:	f7ff fdf4 	bl	8014c78 <_Bfree>
 8015090:	4640      	mov	r0, r8
 8015092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015096:	3101      	adds	r1, #1
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	e7c7      	b.n	801502c <__lshift+0x1c>
 801509c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80150a0:	3301      	adds	r3, #1
 80150a2:	e7cd      	b.n	8015040 <__lshift+0x30>
 80150a4:	4651      	mov	r1, sl
 80150a6:	e7dc      	b.n	8015062 <__lshift+0x52>
 80150a8:	3904      	subs	r1, #4
 80150aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80150ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80150b2:	459c      	cmp	ip, r3
 80150b4:	d8f9      	bhi.n	80150aa <__lshift+0x9a>
 80150b6:	e7e4      	b.n	8015082 <__lshift+0x72>

080150b8 <__mcmp>:
 80150b8:	6903      	ldr	r3, [r0, #16]
 80150ba:	690a      	ldr	r2, [r1, #16]
 80150bc:	1a9b      	subs	r3, r3, r2
 80150be:	b530      	push	{r4, r5, lr}
 80150c0:	d10c      	bne.n	80150dc <__mcmp+0x24>
 80150c2:	0092      	lsls	r2, r2, #2
 80150c4:	3014      	adds	r0, #20
 80150c6:	3114      	adds	r1, #20
 80150c8:	1884      	adds	r4, r0, r2
 80150ca:	4411      	add	r1, r2
 80150cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80150d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80150d4:	4295      	cmp	r5, r2
 80150d6:	d003      	beq.n	80150e0 <__mcmp+0x28>
 80150d8:	d305      	bcc.n	80150e6 <__mcmp+0x2e>
 80150da:	2301      	movs	r3, #1
 80150dc:	4618      	mov	r0, r3
 80150de:	bd30      	pop	{r4, r5, pc}
 80150e0:	42a0      	cmp	r0, r4
 80150e2:	d3f3      	bcc.n	80150cc <__mcmp+0x14>
 80150e4:	e7fa      	b.n	80150dc <__mcmp+0x24>
 80150e6:	f04f 33ff 	mov.w	r3, #4294967295
 80150ea:	e7f7      	b.n	80150dc <__mcmp+0x24>

080150ec <__mdiff>:
 80150ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150f0:	460d      	mov	r5, r1
 80150f2:	4607      	mov	r7, r0
 80150f4:	4611      	mov	r1, r2
 80150f6:	4628      	mov	r0, r5
 80150f8:	4614      	mov	r4, r2
 80150fa:	f7ff ffdd 	bl	80150b8 <__mcmp>
 80150fe:	1e06      	subs	r6, r0, #0
 8015100:	d108      	bne.n	8015114 <__mdiff+0x28>
 8015102:	4631      	mov	r1, r6
 8015104:	4638      	mov	r0, r7
 8015106:	f7ff fd83 	bl	8014c10 <_Balloc>
 801510a:	2301      	movs	r3, #1
 801510c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015114:	bfa4      	itt	ge
 8015116:	4623      	movge	r3, r4
 8015118:	462c      	movge	r4, r5
 801511a:	4638      	mov	r0, r7
 801511c:	6861      	ldr	r1, [r4, #4]
 801511e:	bfa6      	itte	ge
 8015120:	461d      	movge	r5, r3
 8015122:	2600      	movge	r6, #0
 8015124:	2601      	movlt	r6, #1
 8015126:	f7ff fd73 	bl	8014c10 <_Balloc>
 801512a:	692b      	ldr	r3, [r5, #16]
 801512c:	60c6      	str	r6, [r0, #12]
 801512e:	6926      	ldr	r6, [r4, #16]
 8015130:	f105 0914 	add.w	r9, r5, #20
 8015134:	f104 0214 	add.w	r2, r4, #20
 8015138:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801513c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015140:	f100 0514 	add.w	r5, r0, #20
 8015144:	f04f 0e00 	mov.w	lr, #0
 8015148:	f852 ab04 	ldr.w	sl, [r2], #4
 801514c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015150:	fa1e f18a 	uxtah	r1, lr, sl
 8015154:	b2a3      	uxth	r3, r4
 8015156:	1ac9      	subs	r1, r1, r3
 8015158:	0c23      	lsrs	r3, r4, #16
 801515a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801515e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015162:	b289      	uxth	r1, r1
 8015164:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015168:	45c8      	cmp	r8, r9
 801516a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801516e:	4694      	mov	ip, r2
 8015170:	f845 3b04 	str.w	r3, [r5], #4
 8015174:	d8e8      	bhi.n	8015148 <__mdiff+0x5c>
 8015176:	45bc      	cmp	ip, r7
 8015178:	d304      	bcc.n	8015184 <__mdiff+0x98>
 801517a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801517e:	b183      	cbz	r3, 80151a2 <__mdiff+0xb6>
 8015180:	6106      	str	r6, [r0, #16]
 8015182:	e7c5      	b.n	8015110 <__mdiff+0x24>
 8015184:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015188:	fa1e f381 	uxtah	r3, lr, r1
 801518c:	141a      	asrs	r2, r3, #16
 801518e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015192:	b29b      	uxth	r3, r3
 8015194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015198:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801519c:	f845 3b04 	str.w	r3, [r5], #4
 80151a0:	e7e9      	b.n	8015176 <__mdiff+0x8a>
 80151a2:	3e01      	subs	r6, #1
 80151a4:	e7e9      	b.n	801517a <__mdiff+0x8e>
	...

080151a8 <__ulp>:
 80151a8:	4b12      	ldr	r3, [pc, #72]	; (80151f4 <__ulp+0x4c>)
 80151aa:	ee10 2a90 	vmov	r2, s1
 80151ae:	401a      	ands	r2, r3
 80151b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dd04      	ble.n	80151c2 <__ulp+0x1a>
 80151b8:	2000      	movs	r0, #0
 80151ba:	4619      	mov	r1, r3
 80151bc:	ec41 0b10 	vmov	d0, r0, r1
 80151c0:	4770      	bx	lr
 80151c2:	425b      	negs	r3, r3
 80151c4:	151b      	asrs	r3, r3, #20
 80151c6:	2b13      	cmp	r3, #19
 80151c8:	f04f 0000 	mov.w	r0, #0
 80151cc:	f04f 0100 	mov.w	r1, #0
 80151d0:	dc04      	bgt.n	80151dc <__ulp+0x34>
 80151d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80151d6:	fa42 f103 	asr.w	r1, r2, r3
 80151da:	e7ef      	b.n	80151bc <__ulp+0x14>
 80151dc:	3b14      	subs	r3, #20
 80151de:	2b1e      	cmp	r3, #30
 80151e0:	f04f 0201 	mov.w	r2, #1
 80151e4:	bfda      	itte	le
 80151e6:	f1c3 031f 	rsble	r3, r3, #31
 80151ea:	fa02 f303 	lslle.w	r3, r2, r3
 80151ee:	4613      	movgt	r3, r2
 80151f0:	4618      	mov	r0, r3
 80151f2:	e7e3      	b.n	80151bc <__ulp+0x14>
 80151f4:	7ff00000 	.word	0x7ff00000

080151f8 <__b2d>:
 80151f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151fa:	6905      	ldr	r5, [r0, #16]
 80151fc:	f100 0714 	add.w	r7, r0, #20
 8015200:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015204:	1f2e      	subs	r6, r5, #4
 8015206:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801520a:	4620      	mov	r0, r4
 801520c:	f7ff fdc4 	bl	8014d98 <__hi0bits>
 8015210:	f1c0 0320 	rsb	r3, r0, #32
 8015214:	280a      	cmp	r0, #10
 8015216:	600b      	str	r3, [r1, #0]
 8015218:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015290 <__b2d+0x98>
 801521c:	dc14      	bgt.n	8015248 <__b2d+0x50>
 801521e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015222:	fa24 f10e 	lsr.w	r1, r4, lr
 8015226:	42b7      	cmp	r7, r6
 8015228:	ea41 030c 	orr.w	r3, r1, ip
 801522c:	bf34      	ite	cc
 801522e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015232:	2100      	movcs	r1, #0
 8015234:	3015      	adds	r0, #21
 8015236:	fa04 f000 	lsl.w	r0, r4, r0
 801523a:	fa21 f10e 	lsr.w	r1, r1, lr
 801523e:	ea40 0201 	orr.w	r2, r0, r1
 8015242:	ec43 2b10 	vmov	d0, r2, r3
 8015246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015248:	42b7      	cmp	r7, r6
 801524a:	bf3a      	itte	cc
 801524c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015250:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015254:	2100      	movcs	r1, #0
 8015256:	380b      	subs	r0, #11
 8015258:	d015      	beq.n	8015286 <__b2d+0x8e>
 801525a:	4084      	lsls	r4, r0
 801525c:	f1c0 0520 	rsb	r5, r0, #32
 8015260:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015264:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015268:	42be      	cmp	r6, r7
 801526a:	fa21 fc05 	lsr.w	ip, r1, r5
 801526e:	ea44 030c 	orr.w	r3, r4, ip
 8015272:	bf8c      	ite	hi
 8015274:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015278:	2400      	movls	r4, #0
 801527a:	fa01 f000 	lsl.w	r0, r1, r0
 801527e:	40ec      	lsrs	r4, r5
 8015280:	ea40 0204 	orr.w	r2, r0, r4
 8015284:	e7dd      	b.n	8015242 <__b2d+0x4a>
 8015286:	ea44 030c 	orr.w	r3, r4, ip
 801528a:	460a      	mov	r2, r1
 801528c:	e7d9      	b.n	8015242 <__b2d+0x4a>
 801528e:	bf00      	nop
 8015290:	3ff00000 	.word	0x3ff00000

08015294 <__d2b>:
 8015294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015298:	460e      	mov	r6, r1
 801529a:	2101      	movs	r1, #1
 801529c:	ec59 8b10 	vmov	r8, r9, d0
 80152a0:	4615      	mov	r5, r2
 80152a2:	f7ff fcb5 	bl	8014c10 <_Balloc>
 80152a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80152aa:	4607      	mov	r7, r0
 80152ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152b0:	bb34      	cbnz	r4, 8015300 <__d2b+0x6c>
 80152b2:	9301      	str	r3, [sp, #4]
 80152b4:	f1b8 0300 	subs.w	r3, r8, #0
 80152b8:	d027      	beq.n	801530a <__d2b+0x76>
 80152ba:	a802      	add	r0, sp, #8
 80152bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80152c0:	f7ff fd89 	bl	8014dd6 <__lo0bits>
 80152c4:	9900      	ldr	r1, [sp, #0]
 80152c6:	b1f0      	cbz	r0, 8015306 <__d2b+0x72>
 80152c8:	9a01      	ldr	r2, [sp, #4]
 80152ca:	f1c0 0320 	rsb	r3, r0, #32
 80152ce:	fa02 f303 	lsl.w	r3, r2, r3
 80152d2:	430b      	orrs	r3, r1
 80152d4:	40c2      	lsrs	r2, r0
 80152d6:	617b      	str	r3, [r7, #20]
 80152d8:	9201      	str	r2, [sp, #4]
 80152da:	9b01      	ldr	r3, [sp, #4]
 80152dc:	61bb      	str	r3, [r7, #24]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	bf14      	ite	ne
 80152e2:	2102      	movne	r1, #2
 80152e4:	2101      	moveq	r1, #1
 80152e6:	6139      	str	r1, [r7, #16]
 80152e8:	b1c4      	cbz	r4, 801531c <__d2b+0x88>
 80152ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80152ee:	4404      	add	r4, r0
 80152f0:	6034      	str	r4, [r6, #0]
 80152f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80152f6:	6028      	str	r0, [r5, #0]
 80152f8:	4638      	mov	r0, r7
 80152fa:	b003      	add	sp, #12
 80152fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015304:	e7d5      	b.n	80152b2 <__d2b+0x1e>
 8015306:	6179      	str	r1, [r7, #20]
 8015308:	e7e7      	b.n	80152da <__d2b+0x46>
 801530a:	a801      	add	r0, sp, #4
 801530c:	f7ff fd63 	bl	8014dd6 <__lo0bits>
 8015310:	9b01      	ldr	r3, [sp, #4]
 8015312:	617b      	str	r3, [r7, #20]
 8015314:	2101      	movs	r1, #1
 8015316:	6139      	str	r1, [r7, #16]
 8015318:	3020      	adds	r0, #32
 801531a:	e7e5      	b.n	80152e8 <__d2b+0x54>
 801531c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015324:	6030      	str	r0, [r6, #0]
 8015326:	6918      	ldr	r0, [r3, #16]
 8015328:	f7ff fd36 	bl	8014d98 <__hi0bits>
 801532c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015330:	e7e1      	b.n	80152f6 <__d2b+0x62>

08015332 <__ratio>:
 8015332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015336:	4688      	mov	r8, r1
 8015338:	4669      	mov	r1, sp
 801533a:	4681      	mov	r9, r0
 801533c:	f7ff ff5c 	bl	80151f8 <__b2d>
 8015340:	a901      	add	r1, sp, #4
 8015342:	4640      	mov	r0, r8
 8015344:	ec57 6b10 	vmov	r6, r7, d0
 8015348:	f7ff ff56 	bl	80151f8 <__b2d>
 801534c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015350:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015354:	eba3 0c02 	sub.w	ip, r3, r2
 8015358:	e9dd 3200 	ldrd	r3, r2, [sp]
 801535c:	1a9b      	subs	r3, r3, r2
 801535e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015362:	ec5b ab10 	vmov	sl, fp, d0
 8015366:	2b00      	cmp	r3, #0
 8015368:	bfce      	itee	gt
 801536a:	463a      	movgt	r2, r7
 801536c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015370:	465a      	movle	r2, fp
 8015372:	4659      	mov	r1, fp
 8015374:	463d      	mov	r5, r7
 8015376:	bfd4      	ite	le
 8015378:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801537c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015380:	4630      	mov	r0, r6
 8015382:	ee10 2a10 	vmov	r2, s0
 8015386:	460b      	mov	r3, r1
 8015388:	4629      	mov	r1, r5
 801538a:	f7eb fa6f 	bl	800086c <__aeabi_ddiv>
 801538e:	ec41 0b10 	vmov	d0, r0, r1
 8015392:	b003      	add	sp, #12
 8015394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015398 <__copybits>:
 8015398:	3901      	subs	r1, #1
 801539a:	b510      	push	{r4, lr}
 801539c:	1149      	asrs	r1, r1, #5
 801539e:	6914      	ldr	r4, [r2, #16]
 80153a0:	3101      	adds	r1, #1
 80153a2:	f102 0314 	add.w	r3, r2, #20
 80153a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80153aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153ae:	42a3      	cmp	r3, r4
 80153b0:	4602      	mov	r2, r0
 80153b2:	d303      	bcc.n	80153bc <__copybits+0x24>
 80153b4:	2300      	movs	r3, #0
 80153b6:	428a      	cmp	r2, r1
 80153b8:	d305      	bcc.n	80153c6 <__copybits+0x2e>
 80153ba:	bd10      	pop	{r4, pc}
 80153bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80153c0:	f840 2b04 	str.w	r2, [r0], #4
 80153c4:	e7f3      	b.n	80153ae <__copybits+0x16>
 80153c6:	f842 3b04 	str.w	r3, [r2], #4
 80153ca:	e7f4      	b.n	80153b6 <__copybits+0x1e>

080153cc <__any_on>:
 80153cc:	f100 0214 	add.w	r2, r0, #20
 80153d0:	6900      	ldr	r0, [r0, #16]
 80153d2:	114b      	asrs	r3, r1, #5
 80153d4:	4298      	cmp	r0, r3
 80153d6:	b510      	push	{r4, lr}
 80153d8:	db11      	blt.n	80153fe <__any_on+0x32>
 80153da:	dd0a      	ble.n	80153f2 <__any_on+0x26>
 80153dc:	f011 011f 	ands.w	r1, r1, #31
 80153e0:	d007      	beq.n	80153f2 <__any_on+0x26>
 80153e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80153e6:	fa24 f001 	lsr.w	r0, r4, r1
 80153ea:	fa00 f101 	lsl.w	r1, r0, r1
 80153ee:	428c      	cmp	r4, r1
 80153f0:	d10b      	bne.n	801540a <__any_on+0x3e>
 80153f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d803      	bhi.n	8015402 <__any_on+0x36>
 80153fa:	2000      	movs	r0, #0
 80153fc:	bd10      	pop	{r4, pc}
 80153fe:	4603      	mov	r3, r0
 8015400:	e7f7      	b.n	80153f2 <__any_on+0x26>
 8015402:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015406:	2900      	cmp	r1, #0
 8015408:	d0f5      	beq.n	80153f6 <__any_on+0x2a>
 801540a:	2001      	movs	r0, #1
 801540c:	e7f6      	b.n	80153fc <__any_on+0x30>

0801540e <_calloc_r>:
 801540e:	b538      	push	{r3, r4, r5, lr}
 8015410:	fb02 f401 	mul.w	r4, r2, r1
 8015414:	4621      	mov	r1, r4
 8015416:	f7fc fc6d 	bl	8011cf4 <_malloc_r>
 801541a:	4605      	mov	r5, r0
 801541c:	b118      	cbz	r0, 8015426 <_calloc_r+0x18>
 801541e:	4622      	mov	r2, r4
 8015420:	2100      	movs	r1, #0
 8015422:	f7fc fc11 	bl	8011c48 <memset>
 8015426:	4628      	mov	r0, r5
 8015428:	bd38      	pop	{r3, r4, r5, pc}

0801542a <__ssputs_r>:
 801542a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801542e:	688e      	ldr	r6, [r1, #8]
 8015430:	429e      	cmp	r6, r3
 8015432:	4682      	mov	sl, r0
 8015434:	460c      	mov	r4, r1
 8015436:	4690      	mov	r8, r2
 8015438:	4699      	mov	r9, r3
 801543a:	d837      	bhi.n	80154ac <__ssputs_r+0x82>
 801543c:	898a      	ldrh	r2, [r1, #12]
 801543e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015442:	d031      	beq.n	80154a8 <__ssputs_r+0x7e>
 8015444:	6825      	ldr	r5, [r4, #0]
 8015446:	6909      	ldr	r1, [r1, #16]
 8015448:	1a6f      	subs	r7, r5, r1
 801544a:	6965      	ldr	r5, [r4, #20]
 801544c:	2302      	movs	r3, #2
 801544e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015452:	fb95 f5f3 	sdiv	r5, r5, r3
 8015456:	f109 0301 	add.w	r3, r9, #1
 801545a:	443b      	add	r3, r7
 801545c:	429d      	cmp	r5, r3
 801545e:	bf38      	it	cc
 8015460:	461d      	movcc	r5, r3
 8015462:	0553      	lsls	r3, r2, #21
 8015464:	d530      	bpl.n	80154c8 <__ssputs_r+0x9e>
 8015466:	4629      	mov	r1, r5
 8015468:	f7fc fc44 	bl	8011cf4 <_malloc_r>
 801546c:	4606      	mov	r6, r0
 801546e:	b950      	cbnz	r0, 8015486 <__ssputs_r+0x5c>
 8015470:	230c      	movs	r3, #12
 8015472:	f8ca 3000 	str.w	r3, [sl]
 8015476:	89a3      	ldrh	r3, [r4, #12]
 8015478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801547c:	81a3      	strh	r3, [r4, #12]
 801547e:	f04f 30ff 	mov.w	r0, #4294967295
 8015482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015486:	463a      	mov	r2, r7
 8015488:	6921      	ldr	r1, [r4, #16]
 801548a:	f7fc fbb9 	bl	8011c00 <memcpy>
 801548e:	89a3      	ldrh	r3, [r4, #12]
 8015490:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015498:	81a3      	strh	r3, [r4, #12]
 801549a:	6126      	str	r6, [r4, #16]
 801549c:	6165      	str	r5, [r4, #20]
 801549e:	443e      	add	r6, r7
 80154a0:	1bed      	subs	r5, r5, r7
 80154a2:	6026      	str	r6, [r4, #0]
 80154a4:	60a5      	str	r5, [r4, #8]
 80154a6:	464e      	mov	r6, r9
 80154a8:	454e      	cmp	r6, r9
 80154aa:	d900      	bls.n	80154ae <__ssputs_r+0x84>
 80154ac:	464e      	mov	r6, r9
 80154ae:	4632      	mov	r2, r6
 80154b0:	4641      	mov	r1, r8
 80154b2:	6820      	ldr	r0, [r4, #0]
 80154b4:	f7fc fbaf 	bl	8011c16 <memmove>
 80154b8:	68a3      	ldr	r3, [r4, #8]
 80154ba:	1b9b      	subs	r3, r3, r6
 80154bc:	60a3      	str	r3, [r4, #8]
 80154be:	6823      	ldr	r3, [r4, #0]
 80154c0:	441e      	add	r6, r3
 80154c2:	6026      	str	r6, [r4, #0]
 80154c4:	2000      	movs	r0, #0
 80154c6:	e7dc      	b.n	8015482 <__ssputs_r+0x58>
 80154c8:	462a      	mov	r2, r5
 80154ca:	f000 fd1a 	bl	8015f02 <_realloc_r>
 80154ce:	4606      	mov	r6, r0
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d1e2      	bne.n	801549a <__ssputs_r+0x70>
 80154d4:	6921      	ldr	r1, [r4, #16]
 80154d6:	4650      	mov	r0, sl
 80154d8:	f7fc fbbe 	bl	8011c58 <_free_r>
 80154dc:	e7c8      	b.n	8015470 <__ssputs_r+0x46>
	...

080154e0 <_svfiprintf_r>:
 80154e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e4:	461d      	mov	r5, r3
 80154e6:	898b      	ldrh	r3, [r1, #12]
 80154e8:	061f      	lsls	r7, r3, #24
 80154ea:	b09d      	sub	sp, #116	; 0x74
 80154ec:	4680      	mov	r8, r0
 80154ee:	460c      	mov	r4, r1
 80154f0:	4616      	mov	r6, r2
 80154f2:	d50f      	bpl.n	8015514 <_svfiprintf_r+0x34>
 80154f4:	690b      	ldr	r3, [r1, #16]
 80154f6:	b96b      	cbnz	r3, 8015514 <_svfiprintf_r+0x34>
 80154f8:	2140      	movs	r1, #64	; 0x40
 80154fa:	f7fc fbfb 	bl	8011cf4 <_malloc_r>
 80154fe:	6020      	str	r0, [r4, #0]
 8015500:	6120      	str	r0, [r4, #16]
 8015502:	b928      	cbnz	r0, 8015510 <_svfiprintf_r+0x30>
 8015504:	230c      	movs	r3, #12
 8015506:	f8c8 3000 	str.w	r3, [r8]
 801550a:	f04f 30ff 	mov.w	r0, #4294967295
 801550e:	e0c8      	b.n	80156a2 <_svfiprintf_r+0x1c2>
 8015510:	2340      	movs	r3, #64	; 0x40
 8015512:	6163      	str	r3, [r4, #20]
 8015514:	2300      	movs	r3, #0
 8015516:	9309      	str	r3, [sp, #36]	; 0x24
 8015518:	2320      	movs	r3, #32
 801551a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801551e:	2330      	movs	r3, #48	; 0x30
 8015520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015524:	9503      	str	r5, [sp, #12]
 8015526:	f04f 0b01 	mov.w	fp, #1
 801552a:	4637      	mov	r7, r6
 801552c:	463d      	mov	r5, r7
 801552e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015532:	b10b      	cbz	r3, 8015538 <_svfiprintf_r+0x58>
 8015534:	2b25      	cmp	r3, #37	; 0x25
 8015536:	d13e      	bne.n	80155b6 <_svfiprintf_r+0xd6>
 8015538:	ebb7 0a06 	subs.w	sl, r7, r6
 801553c:	d00b      	beq.n	8015556 <_svfiprintf_r+0x76>
 801553e:	4653      	mov	r3, sl
 8015540:	4632      	mov	r2, r6
 8015542:	4621      	mov	r1, r4
 8015544:	4640      	mov	r0, r8
 8015546:	f7ff ff70 	bl	801542a <__ssputs_r>
 801554a:	3001      	adds	r0, #1
 801554c:	f000 80a4 	beq.w	8015698 <_svfiprintf_r+0x1b8>
 8015550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015552:	4453      	add	r3, sl
 8015554:	9309      	str	r3, [sp, #36]	; 0x24
 8015556:	783b      	ldrb	r3, [r7, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	f000 809d 	beq.w	8015698 <_svfiprintf_r+0x1b8>
 801555e:	2300      	movs	r3, #0
 8015560:	f04f 32ff 	mov.w	r2, #4294967295
 8015564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015568:	9304      	str	r3, [sp, #16]
 801556a:	9307      	str	r3, [sp, #28]
 801556c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015570:	931a      	str	r3, [sp, #104]	; 0x68
 8015572:	462f      	mov	r7, r5
 8015574:	2205      	movs	r2, #5
 8015576:	f817 1b01 	ldrb.w	r1, [r7], #1
 801557a:	4850      	ldr	r0, [pc, #320]	; (80156bc <_svfiprintf_r+0x1dc>)
 801557c:	f7ea fe40 	bl	8000200 <memchr>
 8015580:	9b04      	ldr	r3, [sp, #16]
 8015582:	b9d0      	cbnz	r0, 80155ba <_svfiprintf_r+0xda>
 8015584:	06d9      	lsls	r1, r3, #27
 8015586:	bf44      	itt	mi
 8015588:	2220      	movmi	r2, #32
 801558a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801558e:	071a      	lsls	r2, r3, #28
 8015590:	bf44      	itt	mi
 8015592:	222b      	movmi	r2, #43	; 0x2b
 8015594:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015598:	782a      	ldrb	r2, [r5, #0]
 801559a:	2a2a      	cmp	r2, #42	; 0x2a
 801559c:	d015      	beq.n	80155ca <_svfiprintf_r+0xea>
 801559e:	9a07      	ldr	r2, [sp, #28]
 80155a0:	462f      	mov	r7, r5
 80155a2:	2000      	movs	r0, #0
 80155a4:	250a      	movs	r5, #10
 80155a6:	4639      	mov	r1, r7
 80155a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155ac:	3b30      	subs	r3, #48	; 0x30
 80155ae:	2b09      	cmp	r3, #9
 80155b0:	d94d      	bls.n	801564e <_svfiprintf_r+0x16e>
 80155b2:	b1b8      	cbz	r0, 80155e4 <_svfiprintf_r+0x104>
 80155b4:	e00f      	b.n	80155d6 <_svfiprintf_r+0xf6>
 80155b6:	462f      	mov	r7, r5
 80155b8:	e7b8      	b.n	801552c <_svfiprintf_r+0x4c>
 80155ba:	4a40      	ldr	r2, [pc, #256]	; (80156bc <_svfiprintf_r+0x1dc>)
 80155bc:	1a80      	subs	r0, r0, r2
 80155be:	fa0b f000 	lsl.w	r0, fp, r0
 80155c2:	4318      	orrs	r0, r3
 80155c4:	9004      	str	r0, [sp, #16]
 80155c6:	463d      	mov	r5, r7
 80155c8:	e7d3      	b.n	8015572 <_svfiprintf_r+0x92>
 80155ca:	9a03      	ldr	r2, [sp, #12]
 80155cc:	1d11      	adds	r1, r2, #4
 80155ce:	6812      	ldr	r2, [r2, #0]
 80155d0:	9103      	str	r1, [sp, #12]
 80155d2:	2a00      	cmp	r2, #0
 80155d4:	db01      	blt.n	80155da <_svfiprintf_r+0xfa>
 80155d6:	9207      	str	r2, [sp, #28]
 80155d8:	e004      	b.n	80155e4 <_svfiprintf_r+0x104>
 80155da:	4252      	negs	r2, r2
 80155dc:	f043 0302 	orr.w	r3, r3, #2
 80155e0:	9207      	str	r2, [sp, #28]
 80155e2:	9304      	str	r3, [sp, #16]
 80155e4:	783b      	ldrb	r3, [r7, #0]
 80155e6:	2b2e      	cmp	r3, #46	; 0x2e
 80155e8:	d10c      	bne.n	8015604 <_svfiprintf_r+0x124>
 80155ea:	787b      	ldrb	r3, [r7, #1]
 80155ec:	2b2a      	cmp	r3, #42	; 0x2a
 80155ee:	d133      	bne.n	8015658 <_svfiprintf_r+0x178>
 80155f0:	9b03      	ldr	r3, [sp, #12]
 80155f2:	1d1a      	adds	r2, r3, #4
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	9203      	str	r2, [sp, #12]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	bfb8      	it	lt
 80155fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8015600:	3702      	adds	r7, #2
 8015602:	9305      	str	r3, [sp, #20]
 8015604:	4d2e      	ldr	r5, [pc, #184]	; (80156c0 <_svfiprintf_r+0x1e0>)
 8015606:	7839      	ldrb	r1, [r7, #0]
 8015608:	2203      	movs	r2, #3
 801560a:	4628      	mov	r0, r5
 801560c:	f7ea fdf8 	bl	8000200 <memchr>
 8015610:	b138      	cbz	r0, 8015622 <_svfiprintf_r+0x142>
 8015612:	2340      	movs	r3, #64	; 0x40
 8015614:	1b40      	subs	r0, r0, r5
 8015616:	fa03 f000 	lsl.w	r0, r3, r0
 801561a:	9b04      	ldr	r3, [sp, #16]
 801561c:	4303      	orrs	r3, r0
 801561e:	3701      	adds	r7, #1
 8015620:	9304      	str	r3, [sp, #16]
 8015622:	7839      	ldrb	r1, [r7, #0]
 8015624:	4827      	ldr	r0, [pc, #156]	; (80156c4 <_svfiprintf_r+0x1e4>)
 8015626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801562a:	2206      	movs	r2, #6
 801562c:	1c7e      	adds	r6, r7, #1
 801562e:	f7ea fde7 	bl	8000200 <memchr>
 8015632:	2800      	cmp	r0, #0
 8015634:	d038      	beq.n	80156a8 <_svfiprintf_r+0x1c8>
 8015636:	4b24      	ldr	r3, [pc, #144]	; (80156c8 <_svfiprintf_r+0x1e8>)
 8015638:	bb13      	cbnz	r3, 8015680 <_svfiprintf_r+0x1a0>
 801563a:	9b03      	ldr	r3, [sp, #12]
 801563c:	3307      	adds	r3, #7
 801563e:	f023 0307 	bic.w	r3, r3, #7
 8015642:	3308      	adds	r3, #8
 8015644:	9303      	str	r3, [sp, #12]
 8015646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015648:	444b      	add	r3, r9
 801564a:	9309      	str	r3, [sp, #36]	; 0x24
 801564c:	e76d      	b.n	801552a <_svfiprintf_r+0x4a>
 801564e:	fb05 3202 	mla	r2, r5, r2, r3
 8015652:	2001      	movs	r0, #1
 8015654:	460f      	mov	r7, r1
 8015656:	e7a6      	b.n	80155a6 <_svfiprintf_r+0xc6>
 8015658:	2300      	movs	r3, #0
 801565a:	3701      	adds	r7, #1
 801565c:	9305      	str	r3, [sp, #20]
 801565e:	4619      	mov	r1, r3
 8015660:	250a      	movs	r5, #10
 8015662:	4638      	mov	r0, r7
 8015664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015668:	3a30      	subs	r2, #48	; 0x30
 801566a:	2a09      	cmp	r2, #9
 801566c:	d903      	bls.n	8015676 <_svfiprintf_r+0x196>
 801566e:	2b00      	cmp	r3, #0
 8015670:	d0c8      	beq.n	8015604 <_svfiprintf_r+0x124>
 8015672:	9105      	str	r1, [sp, #20]
 8015674:	e7c6      	b.n	8015604 <_svfiprintf_r+0x124>
 8015676:	fb05 2101 	mla	r1, r5, r1, r2
 801567a:	2301      	movs	r3, #1
 801567c:	4607      	mov	r7, r0
 801567e:	e7f0      	b.n	8015662 <_svfiprintf_r+0x182>
 8015680:	ab03      	add	r3, sp, #12
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	4622      	mov	r2, r4
 8015686:	4b11      	ldr	r3, [pc, #68]	; (80156cc <_svfiprintf_r+0x1ec>)
 8015688:	a904      	add	r1, sp, #16
 801568a:	4640      	mov	r0, r8
 801568c:	f7fc fc20 	bl	8011ed0 <_printf_float>
 8015690:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015694:	4681      	mov	r9, r0
 8015696:	d1d6      	bne.n	8015646 <_svfiprintf_r+0x166>
 8015698:	89a3      	ldrh	r3, [r4, #12]
 801569a:	065b      	lsls	r3, r3, #25
 801569c:	f53f af35 	bmi.w	801550a <_svfiprintf_r+0x2a>
 80156a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156a2:	b01d      	add	sp, #116	; 0x74
 80156a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a8:	ab03      	add	r3, sp, #12
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	4622      	mov	r2, r4
 80156ae:	4b07      	ldr	r3, [pc, #28]	; (80156cc <_svfiprintf_r+0x1ec>)
 80156b0:	a904      	add	r1, sp, #16
 80156b2:	4640      	mov	r0, r8
 80156b4:	f7fc fec2 	bl	801243c <_printf_i>
 80156b8:	e7ea      	b.n	8015690 <_svfiprintf_r+0x1b0>
 80156ba:	bf00      	nop
 80156bc:	08017f74 	.word	0x08017f74
 80156c0:	08017f7a 	.word	0x08017f7a
 80156c4:	08017f7e 	.word	0x08017f7e
 80156c8:	08011ed1 	.word	0x08011ed1
 80156cc:	0801542b 	.word	0x0801542b

080156d0 <_sungetc_r>:
 80156d0:	b538      	push	{r3, r4, r5, lr}
 80156d2:	1c4b      	adds	r3, r1, #1
 80156d4:	4614      	mov	r4, r2
 80156d6:	d103      	bne.n	80156e0 <_sungetc_r+0x10>
 80156d8:	f04f 35ff 	mov.w	r5, #4294967295
 80156dc:	4628      	mov	r0, r5
 80156de:	bd38      	pop	{r3, r4, r5, pc}
 80156e0:	8993      	ldrh	r3, [r2, #12]
 80156e2:	f023 0320 	bic.w	r3, r3, #32
 80156e6:	8193      	strh	r3, [r2, #12]
 80156e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156ea:	6852      	ldr	r2, [r2, #4]
 80156ec:	b2cd      	uxtb	r5, r1
 80156ee:	b18b      	cbz	r3, 8015714 <_sungetc_r+0x44>
 80156f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80156f2:	4293      	cmp	r3, r2
 80156f4:	dd08      	ble.n	8015708 <_sungetc_r+0x38>
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	1e5a      	subs	r2, r3, #1
 80156fa:	6022      	str	r2, [r4, #0]
 80156fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015700:	6863      	ldr	r3, [r4, #4]
 8015702:	3301      	adds	r3, #1
 8015704:	6063      	str	r3, [r4, #4]
 8015706:	e7e9      	b.n	80156dc <_sungetc_r+0xc>
 8015708:	4621      	mov	r1, r4
 801570a:	f000 fbb3 	bl	8015e74 <__submore>
 801570e:	2800      	cmp	r0, #0
 8015710:	d0f1      	beq.n	80156f6 <_sungetc_r+0x26>
 8015712:	e7e1      	b.n	80156d8 <_sungetc_r+0x8>
 8015714:	6921      	ldr	r1, [r4, #16]
 8015716:	6823      	ldr	r3, [r4, #0]
 8015718:	b151      	cbz	r1, 8015730 <_sungetc_r+0x60>
 801571a:	4299      	cmp	r1, r3
 801571c:	d208      	bcs.n	8015730 <_sungetc_r+0x60>
 801571e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015722:	42a9      	cmp	r1, r5
 8015724:	d104      	bne.n	8015730 <_sungetc_r+0x60>
 8015726:	3b01      	subs	r3, #1
 8015728:	3201      	adds	r2, #1
 801572a:	6023      	str	r3, [r4, #0]
 801572c:	6062      	str	r2, [r4, #4]
 801572e:	e7d5      	b.n	80156dc <_sungetc_r+0xc>
 8015730:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015738:	6363      	str	r3, [r4, #52]	; 0x34
 801573a:	2303      	movs	r3, #3
 801573c:	63a3      	str	r3, [r4, #56]	; 0x38
 801573e:	4623      	mov	r3, r4
 8015740:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015744:	6023      	str	r3, [r4, #0]
 8015746:	2301      	movs	r3, #1
 8015748:	e7dc      	b.n	8015704 <_sungetc_r+0x34>

0801574a <__ssrefill_r>:
 801574a:	b510      	push	{r4, lr}
 801574c:	460c      	mov	r4, r1
 801574e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015750:	b169      	cbz	r1, 801576e <__ssrefill_r+0x24>
 8015752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015756:	4299      	cmp	r1, r3
 8015758:	d001      	beq.n	801575e <__ssrefill_r+0x14>
 801575a:	f7fc fa7d 	bl	8011c58 <_free_r>
 801575e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015760:	6063      	str	r3, [r4, #4]
 8015762:	2000      	movs	r0, #0
 8015764:	6360      	str	r0, [r4, #52]	; 0x34
 8015766:	b113      	cbz	r3, 801576e <__ssrefill_r+0x24>
 8015768:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801576a:	6023      	str	r3, [r4, #0]
 801576c:	bd10      	pop	{r4, pc}
 801576e:	6923      	ldr	r3, [r4, #16]
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	2300      	movs	r3, #0
 8015774:	6063      	str	r3, [r4, #4]
 8015776:	89a3      	ldrh	r3, [r4, #12]
 8015778:	f043 0320 	orr.w	r3, r3, #32
 801577c:	81a3      	strh	r3, [r4, #12]
 801577e:	f04f 30ff 	mov.w	r0, #4294967295
 8015782:	e7f3      	b.n	801576c <__ssrefill_r+0x22>

08015784 <__ssvfiscanf_r>:
 8015784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015788:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801578c:	460c      	mov	r4, r1
 801578e:	2100      	movs	r1, #0
 8015790:	9144      	str	r1, [sp, #272]	; 0x110
 8015792:	9145      	str	r1, [sp, #276]	; 0x114
 8015794:	499f      	ldr	r1, [pc, #636]	; (8015a14 <__ssvfiscanf_r+0x290>)
 8015796:	91a0      	str	r1, [sp, #640]	; 0x280
 8015798:	f10d 0804 	add.w	r8, sp, #4
 801579c:	499e      	ldr	r1, [pc, #632]	; (8015a18 <__ssvfiscanf_r+0x294>)
 801579e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8015a1c <__ssvfiscanf_r+0x298>
 80157a2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80157a6:	4606      	mov	r6, r0
 80157a8:	4692      	mov	sl, r2
 80157aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	270a      	movs	r7, #10
 80157b0:	f89a 3000 	ldrb.w	r3, [sl]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	f000 812a 	beq.w	8015a0e <__ssvfiscanf_r+0x28a>
 80157ba:	4655      	mov	r5, sl
 80157bc:	f7ff f9f6 	bl	8014bac <__locale_ctype_ptr>
 80157c0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80157c4:	4458      	add	r0, fp
 80157c6:	7843      	ldrb	r3, [r0, #1]
 80157c8:	f013 0308 	ands.w	r3, r3, #8
 80157cc:	d01c      	beq.n	8015808 <__ssvfiscanf_r+0x84>
 80157ce:	6863      	ldr	r3, [r4, #4]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	dd12      	ble.n	80157fa <__ssvfiscanf_r+0x76>
 80157d4:	f7ff f9ea 	bl	8014bac <__locale_ctype_ptr>
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	781a      	ldrb	r2, [r3, #0]
 80157dc:	4410      	add	r0, r2
 80157de:	7842      	ldrb	r2, [r0, #1]
 80157e0:	0712      	lsls	r2, r2, #28
 80157e2:	d401      	bmi.n	80157e8 <__ssvfiscanf_r+0x64>
 80157e4:	46aa      	mov	sl, r5
 80157e6:	e7e3      	b.n	80157b0 <__ssvfiscanf_r+0x2c>
 80157e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80157ea:	3201      	adds	r2, #1
 80157ec:	9245      	str	r2, [sp, #276]	; 0x114
 80157ee:	6862      	ldr	r2, [r4, #4]
 80157f0:	3301      	adds	r3, #1
 80157f2:	3a01      	subs	r2, #1
 80157f4:	6062      	str	r2, [r4, #4]
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	e7e9      	b.n	80157ce <__ssvfiscanf_r+0x4a>
 80157fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80157fc:	4621      	mov	r1, r4
 80157fe:	4630      	mov	r0, r6
 8015800:	4798      	blx	r3
 8015802:	2800      	cmp	r0, #0
 8015804:	d0e6      	beq.n	80157d4 <__ssvfiscanf_r+0x50>
 8015806:	e7ed      	b.n	80157e4 <__ssvfiscanf_r+0x60>
 8015808:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801580c:	f040 8082 	bne.w	8015914 <__ssvfiscanf_r+0x190>
 8015810:	9343      	str	r3, [sp, #268]	; 0x10c
 8015812:	9341      	str	r3, [sp, #260]	; 0x104
 8015814:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015818:	2b2a      	cmp	r3, #42	; 0x2a
 801581a:	d103      	bne.n	8015824 <__ssvfiscanf_r+0xa0>
 801581c:	2310      	movs	r3, #16
 801581e:	9341      	str	r3, [sp, #260]	; 0x104
 8015820:	f10a 0502 	add.w	r5, sl, #2
 8015824:	46aa      	mov	sl, r5
 8015826:	f815 1b01 	ldrb.w	r1, [r5], #1
 801582a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801582e:	2a09      	cmp	r2, #9
 8015830:	d922      	bls.n	8015878 <__ssvfiscanf_r+0xf4>
 8015832:	2203      	movs	r2, #3
 8015834:	4879      	ldr	r0, [pc, #484]	; (8015a1c <__ssvfiscanf_r+0x298>)
 8015836:	f7ea fce3 	bl	8000200 <memchr>
 801583a:	b138      	cbz	r0, 801584c <__ssvfiscanf_r+0xc8>
 801583c:	eba0 0309 	sub.w	r3, r0, r9
 8015840:	2001      	movs	r0, #1
 8015842:	4098      	lsls	r0, r3
 8015844:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015846:	4318      	orrs	r0, r3
 8015848:	9041      	str	r0, [sp, #260]	; 0x104
 801584a:	46aa      	mov	sl, r5
 801584c:	f89a 3000 	ldrb.w	r3, [sl]
 8015850:	2b67      	cmp	r3, #103	; 0x67
 8015852:	f10a 0501 	add.w	r5, sl, #1
 8015856:	d82b      	bhi.n	80158b0 <__ssvfiscanf_r+0x12c>
 8015858:	2b65      	cmp	r3, #101	; 0x65
 801585a:	f080 809f 	bcs.w	801599c <__ssvfiscanf_r+0x218>
 801585e:	2b47      	cmp	r3, #71	; 0x47
 8015860:	d810      	bhi.n	8015884 <__ssvfiscanf_r+0x100>
 8015862:	2b45      	cmp	r3, #69	; 0x45
 8015864:	f080 809a 	bcs.w	801599c <__ssvfiscanf_r+0x218>
 8015868:	2b00      	cmp	r3, #0
 801586a:	d06c      	beq.n	8015946 <__ssvfiscanf_r+0x1c2>
 801586c:	2b25      	cmp	r3, #37	; 0x25
 801586e:	d051      	beq.n	8015914 <__ssvfiscanf_r+0x190>
 8015870:	2303      	movs	r3, #3
 8015872:	9347      	str	r3, [sp, #284]	; 0x11c
 8015874:	9742      	str	r7, [sp, #264]	; 0x108
 8015876:	e027      	b.n	80158c8 <__ssvfiscanf_r+0x144>
 8015878:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801587a:	fb07 1303 	mla	r3, r7, r3, r1
 801587e:	3b30      	subs	r3, #48	; 0x30
 8015880:	9343      	str	r3, [sp, #268]	; 0x10c
 8015882:	e7cf      	b.n	8015824 <__ssvfiscanf_r+0xa0>
 8015884:	2b5b      	cmp	r3, #91	; 0x5b
 8015886:	d06a      	beq.n	801595e <__ssvfiscanf_r+0x1da>
 8015888:	d80c      	bhi.n	80158a4 <__ssvfiscanf_r+0x120>
 801588a:	2b58      	cmp	r3, #88	; 0x58
 801588c:	d1f0      	bne.n	8015870 <__ssvfiscanf_r+0xec>
 801588e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015894:	9241      	str	r2, [sp, #260]	; 0x104
 8015896:	2210      	movs	r2, #16
 8015898:	9242      	str	r2, [sp, #264]	; 0x108
 801589a:	2b6e      	cmp	r3, #110	; 0x6e
 801589c:	bf8c      	ite	hi
 801589e:	2304      	movhi	r3, #4
 80158a0:	2303      	movls	r3, #3
 80158a2:	e010      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 80158a4:	2b63      	cmp	r3, #99	; 0x63
 80158a6:	d065      	beq.n	8015974 <__ssvfiscanf_r+0x1f0>
 80158a8:	2b64      	cmp	r3, #100	; 0x64
 80158aa:	d1e1      	bne.n	8015870 <__ssvfiscanf_r+0xec>
 80158ac:	9742      	str	r7, [sp, #264]	; 0x108
 80158ae:	e7f4      	b.n	801589a <__ssvfiscanf_r+0x116>
 80158b0:	2b70      	cmp	r3, #112	; 0x70
 80158b2:	d04b      	beq.n	801594c <__ssvfiscanf_r+0x1c8>
 80158b4:	d826      	bhi.n	8015904 <__ssvfiscanf_r+0x180>
 80158b6:	2b6e      	cmp	r3, #110	; 0x6e
 80158b8:	d062      	beq.n	8015980 <__ssvfiscanf_r+0x1fc>
 80158ba:	d84c      	bhi.n	8015956 <__ssvfiscanf_r+0x1d2>
 80158bc:	2b69      	cmp	r3, #105	; 0x69
 80158be:	d1d7      	bne.n	8015870 <__ssvfiscanf_r+0xec>
 80158c0:	2300      	movs	r3, #0
 80158c2:	9342      	str	r3, [sp, #264]	; 0x108
 80158c4:	2303      	movs	r3, #3
 80158c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80158c8:	6863      	ldr	r3, [r4, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	dd68      	ble.n	80159a0 <__ssvfiscanf_r+0x21c>
 80158ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80158d0:	0659      	lsls	r1, r3, #25
 80158d2:	d407      	bmi.n	80158e4 <__ssvfiscanf_r+0x160>
 80158d4:	f7ff f96a 	bl	8014bac <__locale_ctype_ptr>
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	781a      	ldrb	r2, [r3, #0]
 80158dc:	4410      	add	r0, r2
 80158de:	7842      	ldrb	r2, [r0, #1]
 80158e0:	0712      	lsls	r2, r2, #28
 80158e2:	d464      	bmi.n	80159ae <__ssvfiscanf_r+0x22a>
 80158e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80158e6:	2b02      	cmp	r3, #2
 80158e8:	dc73      	bgt.n	80159d2 <__ssvfiscanf_r+0x24e>
 80158ea:	466b      	mov	r3, sp
 80158ec:	4622      	mov	r2, r4
 80158ee:	a941      	add	r1, sp, #260	; 0x104
 80158f0:	4630      	mov	r0, r6
 80158f2:	f000 f897 	bl	8015a24 <_scanf_chars>
 80158f6:	2801      	cmp	r0, #1
 80158f8:	f000 8089 	beq.w	8015a0e <__ssvfiscanf_r+0x28a>
 80158fc:	2802      	cmp	r0, #2
 80158fe:	f47f af71 	bne.w	80157e4 <__ssvfiscanf_r+0x60>
 8015902:	e01d      	b.n	8015940 <__ssvfiscanf_r+0x1bc>
 8015904:	2b75      	cmp	r3, #117	; 0x75
 8015906:	d0d1      	beq.n	80158ac <__ssvfiscanf_r+0x128>
 8015908:	2b78      	cmp	r3, #120	; 0x78
 801590a:	d0c0      	beq.n	801588e <__ssvfiscanf_r+0x10a>
 801590c:	2b73      	cmp	r3, #115	; 0x73
 801590e:	d1af      	bne.n	8015870 <__ssvfiscanf_r+0xec>
 8015910:	2302      	movs	r3, #2
 8015912:	e7d8      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 8015914:	6863      	ldr	r3, [r4, #4]
 8015916:	2b00      	cmp	r3, #0
 8015918:	dd0c      	ble.n	8015934 <__ssvfiscanf_r+0x1b0>
 801591a:	6823      	ldr	r3, [r4, #0]
 801591c:	781a      	ldrb	r2, [r3, #0]
 801591e:	455a      	cmp	r2, fp
 8015920:	d175      	bne.n	8015a0e <__ssvfiscanf_r+0x28a>
 8015922:	3301      	adds	r3, #1
 8015924:	6862      	ldr	r2, [r4, #4]
 8015926:	6023      	str	r3, [r4, #0]
 8015928:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801592a:	3a01      	subs	r2, #1
 801592c:	3301      	adds	r3, #1
 801592e:	6062      	str	r2, [r4, #4]
 8015930:	9345      	str	r3, [sp, #276]	; 0x114
 8015932:	e757      	b.n	80157e4 <__ssvfiscanf_r+0x60>
 8015934:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015936:	4621      	mov	r1, r4
 8015938:	4630      	mov	r0, r6
 801593a:	4798      	blx	r3
 801593c:	2800      	cmp	r0, #0
 801593e:	d0ec      	beq.n	801591a <__ssvfiscanf_r+0x196>
 8015940:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015942:	2800      	cmp	r0, #0
 8015944:	d159      	bne.n	80159fa <__ssvfiscanf_r+0x276>
 8015946:	f04f 30ff 	mov.w	r0, #4294967295
 801594a:	e05c      	b.n	8015a06 <__ssvfiscanf_r+0x282>
 801594c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801594e:	f042 0220 	orr.w	r2, r2, #32
 8015952:	9241      	str	r2, [sp, #260]	; 0x104
 8015954:	e79b      	b.n	801588e <__ssvfiscanf_r+0x10a>
 8015956:	2308      	movs	r3, #8
 8015958:	9342      	str	r3, [sp, #264]	; 0x108
 801595a:	2304      	movs	r3, #4
 801595c:	e7b3      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 801595e:	4629      	mov	r1, r5
 8015960:	4640      	mov	r0, r8
 8015962:	f000 f9b7 	bl	8015cd4 <__sccl>
 8015966:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801596c:	9341      	str	r3, [sp, #260]	; 0x104
 801596e:	4605      	mov	r5, r0
 8015970:	2301      	movs	r3, #1
 8015972:	e7a8      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 8015974:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801597a:	9341      	str	r3, [sp, #260]	; 0x104
 801597c:	2300      	movs	r3, #0
 801597e:	e7a2      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 8015980:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015982:	06c3      	lsls	r3, r0, #27
 8015984:	f53f af2e 	bmi.w	80157e4 <__ssvfiscanf_r+0x60>
 8015988:	9b00      	ldr	r3, [sp, #0]
 801598a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801598c:	1d19      	adds	r1, r3, #4
 801598e:	9100      	str	r1, [sp, #0]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	07c0      	lsls	r0, r0, #31
 8015994:	bf4c      	ite	mi
 8015996:	801a      	strhmi	r2, [r3, #0]
 8015998:	601a      	strpl	r2, [r3, #0]
 801599a:	e723      	b.n	80157e4 <__ssvfiscanf_r+0x60>
 801599c:	2305      	movs	r3, #5
 801599e:	e792      	b.n	80158c6 <__ssvfiscanf_r+0x142>
 80159a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80159a2:	4621      	mov	r1, r4
 80159a4:	4630      	mov	r0, r6
 80159a6:	4798      	blx	r3
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d090      	beq.n	80158ce <__ssvfiscanf_r+0x14a>
 80159ac:	e7c8      	b.n	8015940 <__ssvfiscanf_r+0x1bc>
 80159ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80159b0:	3201      	adds	r2, #1
 80159b2:	9245      	str	r2, [sp, #276]	; 0x114
 80159b4:	6862      	ldr	r2, [r4, #4]
 80159b6:	3a01      	subs	r2, #1
 80159b8:	2a00      	cmp	r2, #0
 80159ba:	6062      	str	r2, [r4, #4]
 80159bc:	dd02      	ble.n	80159c4 <__ssvfiscanf_r+0x240>
 80159be:	3301      	adds	r3, #1
 80159c0:	6023      	str	r3, [r4, #0]
 80159c2:	e787      	b.n	80158d4 <__ssvfiscanf_r+0x150>
 80159c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80159c6:	4621      	mov	r1, r4
 80159c8:	4630      	mov	r0, r6
 80159ca:	4798      	blx	r3
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d081      	beq.n	80158d4 <__ssvfiscanf_r+0x150>
 80159d0:	e7b6      	b.n	8015940 <__ssvfiscanf_r+0x1bc>
 80159d2:	2b04      	cmp	r3, #4
 80159d4:	dc06      	bgt.n	80159e4 <__ssvfiscanf_r+0x260>
 80159d6:	466b      	mov	r3, sp
 80159d8:	4622      	mov	r2, r4
 80159da:	a941      	add	r1, sp, #260	; 0x104
 80159dc:	4630      	mov	r0, r6
 80159de:	f000 f885 	bl	8015aec <_scanf_i>
 80159e2:	e788      	b.n	80158f6 <__ssvfiscanf_r+0x172>
 80159e4:	4b0e      	ldr	r3, [pc, #56]	; (8015a20 <__ssvfiscanf_r+0x29c>)
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	f43f aefc 	beq.w	80157e4 <__ssvfiscanf_r+0x60>
 80159ec:	466b      	mov	r3, sp
 80159ee:	4622      	mov	r2, r4
 80159f0:	a941      	add	r1, sp, #260	; 0x104
 80159f2:	4630      	mov	r0, r6
 80159f4:	f7fc fe34 	bl	8012660 <_scanf_float>
 80159f8:	e77d      	b.n	80158f6 <__ssvfiscanf_r+0x172>
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015a00:	bf18      	it	ne
 8015a02:	f04f 30ff 	movne.w	r0, #4294967295
 8015a06:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015a10:	e7f9      	b.n	8015a06 <__ssvfiscanf_r+0x282>
 8015a12:	bf00      	nop
 8015a14:	080156d1 	.word	0x080156d1
 8015a18:	0801574b 	.word	0x0801574b
 8015a1c:	08017f7a 	.word	0x08017f7a
 8015a20:	08012661 	.word	0x08012661

08015a24 <_scanf_chars>:
 8015a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a28:	4615      	mov	r5, r2
 8015a2a:	688a      	ldr	r2, [r1, #8]
 8015a2c:	4680      	mov	r8, r0
 8015a2e:	460c      	mov	r4, r1
 8015a30:	b932      	cbnz	r2, 8015a40 <_scanf_chars+0x1c>
 8015a32:	698a      	ldr	r2, [r1, #24]
 8015a34:	2a00      	cmp	r2, #0
 8015a36:	bf14      	ite	ne
 8015a38:	f04f 32ff 	movne.w	r2, #4294967295
 8015a3c:	2201      	moveq	r2, #1
 8015a3e:	608a      	str	r2, [r1, #8]
 8015a40:	6822      	ldr	r2, [r4, #0]
 8015a42:	06d1      	lsls	r1, r2, #27
 8015a44:	bf5f      	itttt	pl
 8015a46:	681a      	ldrpl	r2, [r3, #0]
 8015a48:	1d11      	addpl	r1, r2, #4
 8015a4a:	6019      	strpl	r1, [r3, #0]
 8015a4c:	6817      	ldrpl	r7, [r2, #0]
 8015a4e:	2600      	movs	r6, #0
 8015a50:	69a3      	ldr	r3, [r4, #24]
 8015a52:	b1db      	cbz	r3, 8015a8c <_scanf_chars+0x68>
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d107      	bne.n	8015a68 <_scanf_chars+0x44>
 8015a58:	682b      	ldr	r3, [r5, #0]
 8015a5a:	6962      	ldr	r2, [r4, #20]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	5cd3      	ldrb	r3, [r2, r3]
 8015a60:	b9a3      	cbnz	r3, 8015a8c <_scanf_chars+0x68>
 8015a62:	2e00      	cmp	r6, #0
 8015a64:	d132      	bne.n	8015acc <_scanf_chars+0xa8>
 8015a66:	e006      	b.n	8015a76 <_scanf_chars+0x52>
 8015a68:	2b02      	cmp	r3, #2
 8015a6a:	d007      	beq.n	8015a7c <_scanf_chars+0x58>
 8015a6c:	2e00      	cmp	r6, #0
 8015a6e:	d12d      	bne.n	8015acc <_scanf_chars+0xa8>
 8015a70:	69a3      	ldr	r3, [r4, #24]
 8015a72:	2b01      	cmp	r3, #1
 8015a74:	d12a      	bne.n	8015acc <_scanf_chars+0xa8>
 8015a76:	2001      	movs	r0, #1
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	f7ff f896 	bl	8014bac <__locale_ctype_ptr>
 8015a80:	682b      	ldr	r3, [r5, #0]
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	4418      	add	r0, r3
 8015a86:	7843      	ldrb	r3, [r0, #1]
 8015a88:	071b      	lsls	r3, r3, #28
 8015a8a:	d4ef      	bmi.n	8015a6c <_scanf_chars+0x48>
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	06da      	lsls	r2, r3, #27
 8015a90:	bf5e      	ittt	pl
 8015a92:	682b      	ldrpl	r3, [r5, #0]
 8015a94:	781b      	ldrbpl	r3, [r3, #0]
 8015a96:	703b      	strbpl	r3, [r7, #0]
 8015a98:	682a      	ldr	r2, [r5, #0]
 8015a9a:	686b      	ldr	r3, [r5, #4]
 8015a9c:	f102 0201 	add.w	r2, r2, #1
 8015aa0:	602a      	str	r2, [r5, #0]
 8015aa2:	68a2      	ldr	r2, [r4, #8]
 8015aa4:	f103 33ff 	add.w	r3, r3, #4294967295
 8015aa8:	f102 32ff 	add.w	r2, r2, #4294967295
 8015aac:	606b      	str	r3, [r5, #4]
 8015aae:	f106 0601 	add.w	r6, r6, #1
 8015ab2:	bf58      	it	pl
 8015ab4:	3701      	addpl	r7, #1
 8015ab6:	60a2      	str	r2, [r4, #8]
 8015ab8:	b142      	cbz	r2, 8015acc <_scanf_chars+0xa8>
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dcc8      	bgt.n	8015a50 <_scanf_chars+0x2c>
 8015abe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015ac2:	4629      	mov	r1, r5
 8015ac4:	4640      	mov	r0, r8
 8015ac6:	4798      	blx	r3
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d0c1      	beq.n	8015a50 <_scanf_chars+0x2c>
 8015acc:	6823      	ldr	r3, [r4, #0]
 8015ace:	f013 0310 	ands.w	r3, r3, #16
 8015ad2:	d105      	bne.n	8015ae0 <_scanf_chars+0xbc>
 8015ad4:	68e2      	ldr	r2, [r4, #12]
 8015ad6:	3201      	adds	r2, #1
 8015ad8:	60e2      	str	r2, [r4, #12]
 8015ada:	69a2      	ldr	r2, [r4, #24]
 8015adc:	b102      	cbz	r2, 8015ae0 <_scanf_chars+0xbc>
 8015ade:	703b      	strb	r3, [r7, #0]
 8015ae0:	6923      	ldr	r3, [r4, #16]
 8015ae2:	441e      	add	r6, r3
 8015ae4:	6126      	str	r6, [r4, #16]
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	e7c6      	b.n	8015a78 <_scanf_chars+0x54>
	...

08015aec <_scanf_i>:
 8015aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af0:	469a      	mov	sl, r3
 8015af2:	4b74      	ldr	r3, [pc, #464]	; (8015cc4 <_scanf_i+0x1d8>)
 8015af4:	460c      	mov	r4, r1
 8015af6:	4683      	mov	fp, r0
 8015af8:	4616      	mov	r6, r2
 8015afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015afe:	b087      	sub	sp, #28
 8015b00:	ab03      	add	r3, sp, #12
 8015b02:	68a7      	ldr	r7, [r4, #8]
 8015b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015b08:	4b6f      	ldr	r3, [pc, #444]	; (8015cc8 <_scanf_i+0x1dc>)
 8015b0a:	69a1      	ldr	r1, [r4, #24]
 8015b0c:	4a6f      	ldr	r2, [pc, #444]	; (8015ccc <_scanf_i+0x1e0>)
 8015b0e:	2903      	cmp	r1, #3
 8015b10:	bf08      	it	eq
 8015b12:	461a      	moveq	r2, r3
 8015b14:	1e7b      	subs	r3, r7, #1
 8015b16:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8015b1a:	bf84      	itt	hi
 8015b1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b20:	60a3      	strhi	r3, [r4, #8]
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	9200      	str	r2, [sp, #0]
 8015b26:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015b2a:	bf88      	it	hi
 8015b2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015b30:	f104 091c 	add.w	r9, r4, #28
 8015b34:	6023      	str	r3, [r4, #0]
 8015b36:	bf8c      	ite	hi
 8015b38:	197f      	addhi	r7, r7, r5
 8015b3a:	2700      	movls	r7, #0
 8015b3c:	464b      	mov	r3, r9
 8015b3e:	f04f 0800 	mov.w	r8, #0
 8015b42:	9301      	str	r3, [sp, #4]
 8015b44:	6831      	ldr	r1, [r6, #0]
 8015b46:	ab03      	add	r3, sp, #12
 8015b48:	2202      	movs	r2, #2
 8015b4a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015b4e:	7809      	ldrb	r1, [r1, #0]
 8015b50:	f7ea fb56 	bl	8000200 <memchr>
 8015b54:	9b01      	ldr	r3, [sp, #4]
 8015b56:	b330      	cbz	r0, 8015ba6 <_scanf_i+0xba>
 8015b58:	f1b8 0f01 	cmp.w	r8, #1
 8015b5c:	d15a      	bne.n	8015c14 <_scanf_i+0x128>
 8015b5e:	6862      	ldr	r2, [r4, #4]
 8015b60:	b92a      	cbnz	r2, 8015b6e <_scanf_i+0x82>
 8015b62:	6822      	ldr	r2, [r4, #0]
 8015b64:	2108      	movs	r1, #8
 8015b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015b6a:	6061      	str	r1, [r4, #4]
 8015b6c:	6022      	str	r2, [r4, #0]
 8015b6e:	6822      	ldr	r2, [r4, #0]
 8015b70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015b74:	6022      	str	r2, [r4, #0]
 8015b76:	68a2      	ldr	r2, [r4, #8]
 8015b78:	1e51      	subs	r1, r2, #1
 8015b7a:	60a1      	str	r1, [r4, #8]
 8015b7c:	b19a      	cbz	r2, 8015ba6 <_scanf_i+0xba>
 8015b7e:	6832      	ldr	r2, [r6, #0]
 8015b80:	1c51      	adds	r1, r2, #1
 8015b82:	6031      	str	r1, [r6, #0]
 8015b84:	7812      	ldrb	r2, [r2, #0]
 8015b86:	701a      	strb	r2, [r3, #0]
 8015b88:	1c5d      	adds	r5, r3, #1
 8015b8a:	6873      	ldr	r3, [r6, #4]
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	6073      	str	r3, [r6, #4]
 8015b92:	dc07      	bgt.n	8015ba4 <_scanf_i+0xb8>
 8015b94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b98:	4631      	mov	r1, r6
 8015b9a:	4658      	mov	r0, fp
 8015b9c:	4798      	blx	r3
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	f040 8086 	bne.w	8015cb0 <_scanf_i+0x1c4>
 8015ba4:	462b      	mov	r3, r5
 8015ba6:	f108 0801 	add.w	r8, r8, #1
 8015baa:	f1b8 0f03 	cmp.w	r8, #3
 8015bae:	d1c8      	bne.n	8015b42 <_scanf_i+0x56>
 8015bb0:	6862      	ldr	r2, [r4, #4]
 8015bb2:	b90a      	cbnz	r2, 8015bb8 <_scanf_i+0xcc>
 8015bb4:	220a      	movs	r2, #10
 8015bb6:	6062      	str	r2, [r4, #4]
 8015bb8:	6862      	ldr	r2, [r4, #4]
 8015bba:	4945      	ldr	r1, [pc, #276]	; (8015cd0 <_scanf_i+0x1e4>)
 8015bbc:	6960      	ldr	r0, [r4, #20]
 8015bbe:	9301      	str	r3, [sp, #4]
 8015bc0:	1a89      	subs	r1, r1, r2
 8015bc2:	f000 f887 	bl	8015cd4 <__sccl>
 8015bc6:	9b01      	ldr	r3, [sp, #4]
 8015bc8:	f04f 0800 	mov.w	r8, #0
 8015bcc:	461d      	mov	r5, r3
 8015bce:	68a3      	ldr	r3, [r4, #8]
 8015bd0:	6822      	ldr	r2, [r4, #0]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d03a      	beq.n	8015c4c <_scanf_i+0x160>
 8015bd6:	6831      	ldr	r1, [r6, #0]
 8015bd8:	6960      	ldr	r0, [r4, #20]
 8015bda:	f891 c000 	ldrb.w	ip, [r1]
 8015bde:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d032      	beq.n	8015c4c <_scanf_i+0x160>
 8015be6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015bea:	d121      	bne.n	8015c30 <_scanf_i+0x144>
 8015bec:	0510      	lsls	r0, r2, #20
 8015bee:	d51f      	bpl.n	8015c30 <_scanf_i+0x144>
 8015bf0:	f108 0801 	add.w	r8, r8, #1
 8015bf4:	b117      	cbz	r7, 8015bfc <_scanf_i+0x110>
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	3f01      	subs	r7, #1
 8015bfa:	60a3      	str	r3, [r4, #8]
 8015bfc:	6873      	ldr	r3, [r6, #4]
 8015bfe:	3b01      	subs	r3, #1
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	6073      	str	r3, [r6, #4]
 8015c04:	dd1b      	ble.n	8015c3e <_scanf_i+0x152>
 8015c06:	6833      	ldr	r3, [r6, #0]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	6033      	str	r3, [r6, #0]
 8015c0c:	68a3      	ldr	r3, [r4, #8]
 8015c0e:	3b01      	subs	r3, #1
 8015c10:	60a3      	str	r3, [r4, #8]
 8015c12:	e7dc      	b.n	8015bce <_scanf_i+0xe2>
 8015c14:	f1b8 0f02 	cmp.w	r8, #2
 8015c18:	d1ad      	bne.n	8015b76 <_scanf_i+0x8a>
 8015c1a:	6822      	ldr	r2, [r4, #0]
 8015c1c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015c20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015c24:	d1bf      	bne.n	8015ba6 <_scanf_i+0xba>
 8015c26:	2110      	movs	r1, #16
 8015c28:	6061      	str	r1, [r4, #4]
 8015c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015c2e:	e7a1      	b.n	8015b74 <_scanf_i+0x88>
 8015c30:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015c34:	6022      	str	r2, [r4, #0]
 8015c36:	780b      	ldrb	r3, [r1, #0]
 8015c38:	702b      	strb	r3, [r5, #0]
 8015c3a:	3501      	adds	r5, #1
 8015c3c:	e7de      	b.n	8015bfc <_scanf_i+0x110>
 8015c3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015c42:	4631      	mov	r1, r6
 8015c44:	4658      	mov	r0, fp
 8015c46:	4798      	blx	r3
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d0df      	beq.n	8015c0c <_scanf_i+0x120>
 8015c4c:	6823      	ldr	r3, [r4, #0]
 8015c4e:	05d9      	lsls	r1, r3, #23
 8015c50:	d50c      	bpl.n	8015c6c <_scanf_i+0x180>
 8015c52:	454d      	cmp	r5, r9
 8015c54:	d908      	bls.n	8015c68 <_scanf_i+0x17c>
 8015c56:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c5e:	4632      	mov	r2, r6
 8015c60:	4658      	mov	r0, fp
 8015c62:	4798      	blx	r3
 8015c64:	1e6f      	subs	r7, r5, #1
 8015c66:	463d      	mov	r5, r7
 8015c68:	454d      	cmp	r5, r9
 8015c6a:	d029      	beq.n	8015cc0 <_scanf_i+0x1d4>
 8015c6c:	6822      	ldr	r2, [r4, #0]
 8015c6e:	f012 0210 	ands.w	r2, r2, #16
 8015c72:	d113      	bne.n	8015c9c <_scanf_i+0x1b0>
 8015c74:	702a      	strb	r2, [r5, #0]
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	9e00      	ldr	r6, [sp, #0]
 8015c7a:	4649      	mov	r1, r9
 8015c7c:	4658      	mov	r0, fp
 8015c7e:	47b0      	blx	r6
 8015c80:	f8da 3000 	ldr.w	r3, [sl]
 8015c84:	6821      	ldr	r1, [r4, #0]
 8015c86:	1d1a      	adds	r2, r3, #4
 8015c88:	f8ca 2000 	str.w	r2, [sl]
 8015c8c:	f011 0f20 	tst.w	r1, #32
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	d010      	beq.n	8015cb6 <_scanf_i+0x1ca>
 8015c94:	6018      	str	r0, [r3, #0]
 8015c96:	68e3      	ldr	r3, [r4, #12]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	60e3      	str	r3, [r4, #12]
 8015c9c:	eba5 0509 	sub.w	r5, r5, r9
 8015ca0:	44a8      	add	r8, r5
 8015ca2:	6925      	ldr	r5, [r4, #16]
 8015ca4:	4445      	add	r5, r8
 8015ca6:	6125      	str	r5, [r4, #16]
 8015ca8:	2000      	movs	r0, #0
 8015caa:	b007      	add	sp, #28
 8015cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb0:	f04f 0800 	mov.w	r8, #0
 8015cb4:	e7ca      	b.n	8015c4c <_scanf_i+0x160>
 8015cb6:	07ca      	lsls	r2, r1, #31
 8015cb8:	bf4c      	ite	mi
 8015cba:	8018      	strhmi	r0, [r3, #0]
 8015cbc:	6018      	strpl	r0, [r3, #0]
 8015cbe:	e7ea      	b.n	8015c96 <_scanf_i+0x1aa>
 8015cc0:	2001      	movs	r0, #1
 8015cc2:	e7f2      	b.n	8015caa <_scanf_i+0x1be>
 8015cc4:	08017da8 	.word	0x08017da8
 8015cc8:	080138a9 	.word	0x080138a9
 8015ccc:	08015e51 	.word	0x08015e51
 8015cd0:	08017f95 	.word	0x08017f95

08015cd4 <__sccl>:
 8015cd4:	b570      	push	{r4, r5, r6, lr}
 8015cd6:	780b      	ldrb	r3, [r1, #0]
 8015cd8:	2b5e      	cmp	r3, #94	; 0x5e
 8015cda:	bf13      	iteet	ne
 8015cdc:	1c4a      	addne	r2, r1, #1
 8015cde:	1c8a      	addeq	r2, r1, #2
 8015ce0:	784b      	ldrbeq	r3, [r1, #1]
 8015ce2:	2100      	movne	r1, #0
 8015ce4:	bf08      	it	eq
 8015ce6:	2101      	moveq	r1, #1
 8015ce8:	1e44      	subs	r4, r0, #1
 8015cea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8015cee:	f804 1f01 	strb.w	r1, [r4, #1]!
 8015cf2:	42ac      	cmp	r4, r5
 8015cf4:	d1fb      	bne.n	8015cee <__sccl+0x1a>
 8015cf6:	b913      	cbnz	r3, 8015cfe <__sccl+0x2a>
 8015cf8:	3a01      	subs	r2, #1
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	bd70      	pop	{r4, r5, r6, pc}
 8015cfe:	f081 0401 	eor.w	r4, r1, #1
 8015d02:	54c4      	strb	r4, [r0, r3]
 8015d04:	1c51      	adds	r1, r2, #1
 8015d06:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015d0a:	2d2d      	cmp	r5, #45	; 0x2d
 8015d0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8015d10:	460a      	mov	r2, r1
 8015d12:	d006      	beq.n	8015d22 <__sccl+0x4e>
 8015d14:	2d5d      	cmp	r5, #93	; 0x5d
 8015d16:	d0f0      	beq.n	8015cfa <__sccl+0x26>
 8015d18:	b90d      	cbnz	r5, 8015d1e <__sccl+0x4a>
 8015d1a:	4632      	mov	r2, r6
 8015d1c:	e7ed      	b.n	8015cfa <__sccl+0x26>
 8015d1e:	462b      	mov	r3, r5
 8015d20:	e7ef      	b.n	8015d02 <__sccl+0x2e>
 8015d22:	780e      	ldrb	r6, [r1, #0]
 8015d24:	2e5d      	cmp	r6, #93	; 0x5d
 8015d26:	d0fa      	beq.n	8015d1e <__sccl+0x4a>
 8015d28:	42b3      	cmp	r3, r6
 8015d2a:	dcf8      	bgt.n	8015d1e <__sccl+0x4a>
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	429e      	cmp	r6, r3
 8015d30:	54c4      	strb	r4, [r0, r3]
 8015d32:	dcfb      	bgt.n	8015d2c <__sccl+0x58>
 8015d34:	3102      	adds	r1, #2
 8015d36:	e7e6      	b.n	8015d06 <__sccl+0x32>

08015d38 <strncmp>:
 8015d38:	b510      	push	{r4, lr}
 8015d3a:	b16a      	cbz	r2, 8015d58 <strncmp+0x20>
 8015d3c:	3901      	subs	r1, #1
 8015d3e:	1884      	adds	r4, r0, r2
 8015d40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015d44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015d48:	4293      	cmp	r3, r2
 8015d4a:	d103      	bne.n	8015d54 <strncmp+0x1c>
 8015d4c:	42a0      	cmp	r0, r4
 8015d4e:	d001      	beq.n	8015d54 <strncmp+0x1c>
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d1f5      	bne.n	8015d40 <strncmp+0x8>
 8015d54:	1a98      	subs	r0, r3, r2
 8015d56:	bd10      	pop	{r4, pc}
 8015d58:	4610      	mov	r0, r2
 8015d5a:	e7fc      	b.n	8015d56 <strncmp+0x1e>

08015d5c <_strtoul_l.isra.0>:
 8015d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d60:	4680      	mov	r8, r0
 8015d62:	4689      	mov	r9, r1
 8015d64:	4692      	mov	sl, r2
 8015d66:	461e      	mov	r6, r3
 8015d68:	460f      	mov	r7, r1
 8015d6a:	463d      	mov	r5, r7
 8015d6c:	9808      	ldr	r0, [sp, #32]
 8015d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d72:	f7fe ff17 	bl	8014ba4 <__locale_ctype_ptr_l>
 8015d76:	4420      	add	r0, r4
 8015d78:	7843      	ldrb	r3, [r0, #1]
 8015d7a:	f013 0308 	ands.w	r3, r3, #8
 8015d7e:	d130      	bne.n	8015de2 <_strtoul_l.isra.0+0x86>
 8015d80:	2c2d      	cmp	r4, #45	; 0x2d
 8015d82:	d130      	bne.n	8015de6 <_strtoul_l.isra.0+0x8a>
 8015d84:	787c      	ldrb	r4, [r7, #1]
 8015d86:	1cbd      	adds	r5, r7, #2
 8015d88:	2101      	movs	r1, #1
 8015d8a:	2e00      	cmp	r6, #0
 8015d8c:	d05c      	beq.n	8015e48 <_strtoul_l.isra.0+0xec>
 8015d8e:	2e10      	cmp	r6, #16
 8015d90:	d109      	bne.n	8015da6 <_strtoul_l.isra.0+0x4a>
 8015d92:	2c30      	cmp	r4, #48	; 0x30
 8015d94:	d107      	bne.n	8015da6 <_strtoul_l.isra.0+0x4a>
 8015d96:	782b      	ldrb	r3, [r5, #0]
 8015d98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015d9c:	2b58      	cmp	r3, #88	; 0x58
 8015d9e:	d14e      	bne.n	8015e3e <_strtoul_l.isra.0+0xe2>
 8015da0:	786c      	ldrb	r4, [r5, #1]
 8015da2:	2610      	movs	r6, #16
 8015da4:	3502      	adds	r5, #2
 8015da6:	f04f 32ff 	mov.w	r2, #4294967295
 8015daa:	2300      	movs	r3, #0
 8015dac:	fbb2 f2f6 	udiv	r2, r2, r6
 8015db0:	fb06 fc02 	mul.w	ip, r6, r2
 8015db4:	ea6f 0c0c 	mvn.w	ip, ip
 8015db8:	4618      	mov	r0, r3
 8015dba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015dbe:	2f09      	cmp	r7, #9
 8015dc0:	d817      	bhi.n	8015df2 <_strtoul_l.isra.0+0x96>
 8015dc2:	463c      	mov	r4, r7
 8015dc4:	42a6      	cmp	r6, r4
 8015dc6:	dd23      	ble.n	8015e10 <_strtoul_l.isra.0+0xb4>
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	db1e      	blt.n	8015e0a <_strtoul_l.isra.0+0xae>
 8015dcc:	4282      	cmp	r2, r0
 8015dce:	d31c      	bcc.n	8015e0a <_strtoul_l.isra.0+0xae>
 8015dd0:	d101      	bne.n	8015dd6 <_strtoul_l.isra.0+0x7a>
 8015dd2:	45a4      	cmp	ip, r4
 8015dd4:	db19      	blt.n	8015e0a <_strtoul_l.isra.0+0xae>
 8015dd6:	fb00 4006 	mla	r0, r0, r6, r4
 8015dda:	2301      	movs	r3, #1
 8015ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015de0:	e7eb      	b.n	8015dba <_strtoul_l.isra.0+0x5e>
 8015de2:	462f      	mov	r7, r5
 8015de4:	e7c1      	b.n	8015d6a <_strtoul_l.isra.0+0xe>
 8015de6:	2c2b      	cmp	r4, #43	; 0x2b
 8015de8:	bf04      	itt	eq
 8015dea:	1cbd      	addeq	r5, r7, #2
 8015dec:	787c      	ldrbeq	r4, [r7, #1]
 8015dee:	4619      	mov	r1, r3
 8015df0:	e7cb      	b.n	8015d8a <_strtoul_l.isra.0+0x2e>
 8015df2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015df6:	2f19      	cmp	r7, #25
 8015df8:	d801      	bhi.n	8015dfe <_strtoul_l.isra.0+0xa2>
 8015dfa:	3c37      	subs	r4, #55	; 0x37
 8015dfc:	e7e2      	b.n	8015dc4 <_strtoul_l.isra.0+0x68>
 8015dfe:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015e02:	2f19      	cmp	r7, #25
 8015e04:	d804      	bhi.n	8015e10 <_strtoul_l.isra.0+0xb4>
 8015e06:	3c57      	subs	r4, #87	; 0x57
 8015e08:	e7dc      	b.n	8015dc4 <_strtoul_l.isra.0+0x68>
 8015e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e0e:	e7e5      	b.n	8015ddc <_strtoul_l.isra.0+0x80>
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	da09      	bge.n	8015e28 <_strtoul_l.isra.0+0xcc>
 8015e14:	2322      	movs	r3, #34	; 0x22
 8015e16:	f8c8 3000 	str.w	r3, [r8]
 8015e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e1e:	f1ba 0f00 	cmp.w	sl, #0
 8015e22:	d107      	bne.n	8015e34 <_strtoul_l.isra.0+0xd8>
 8015e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e28:	b101      	cbz	r1, 8015e2c <_strtoul_l.isra.0+0xd0>
 8015e2a:	4240      	negs	r0, r0
 8015e2c:	f1ba 0f00 	cmp.w	sl, #0
 8015e30:	d0f8      	beq.n	8015e24 <_strtoul_l.isra.0+0xc8>
 8015e32:	b10b      	cbz	r3, 8015e38 <_strtoul_l.isra.0+0xdc>
 8015e34:	f105 39ff 	add.w	r9, r5, #4294967295
 8015e38:	f8ca 9000 	str.w	r9, [sl]
 8015e3c:	e7f2      	b.n	8015e24 <_strtoul_l.isra.0+0xc8>
 8015e3e:	2430      	movs	r4, #48	; 0x30
 8015e40:	2e00      	cmp	r6, #0
 8015e42:	d1b0      	bne.n	8015da6 <_strtoul_l.isra.0+0x4a>
 8015e44:	2608      	movs	r6, #8
 8015e46:	e7ae      	b.n	8015da6 <_strtoul_l.isra.0+0x4a>
 8015e48:	2c30      	cmp	r4, #48	; 0x30
 8015e4a:	d0a4      	beq.n	8015d96 <_strtoul_l.isra.0+0x3a>
 8015e4c:	260a      	movs	r6, #10
 8015e4e:	e7aa      	b.n	8015da6 <_strtoul_l.isra.0+0x4a>

08015e50 <_strtoul_r>:
 8015e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e52:	4c06      	ldr	r4, [pc, #24]	; (8015e6c <_strtoul_r+0x1c>)
 8015e54:	4d06      	ldr	r5, [pc, #24]	; (8015e70 <_strtoul_r+0x20>)
 8015e56:	6824      	ldr	r4, [r4, #0]
 8015e58:	6a24      	ldr	r4, [r4, #32]
 8015e5a:	2c00      	cmp	r4, #0
 8015e5c:	bf08      	it	eq
 8015e5e:	462c      	moveq	r4, r5
 8015e60:	9400      	str	r4, [sp, #0]
 8015e62:	f7ff ff7b 	bl	8015d5c <_strtoul_l.isra.0>
 8015e66:	b003      	add	sp, #12
 8015e68:	bd30      	pop	{r4, r5, pc}
 8015e6a:	bf00      	nop
 8015e6c:	20000e34 	.word	0x20000e34
 8015e70:	20000e98 	.word	0x20000e98

08015e74 <__submore>:
 8015e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e78:	460c      	mov	r4, r1
 8015e7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e80:	4299      	cmp	r1, r3
 8015e82:	d11d      	bne.n	8015ec0 <__submore+0x4c>
 8015e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015e88:	f7fb ff34 	bl	8011cf4 <_malloc_r>
 8015e8c:	b918      	cbnz	r0, 8015e96 <__submore+0x22>
 8015e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8015e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8015e9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8015ea2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015ea6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015eaa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015eae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015eb2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015eb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015eba:	6020      	str	r0, [r4, #0]
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	e7e8      	b.n	8015e92 <__submore+0x1e>
 8015ec0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015ec2:	0077      	lsls	r7, r6, #1
 8015ec4:	463a      	mov	r2, r7
 8015ec6:	f000 f81c 	bl	8015f02 <_realloc_r>
 8015eca:	4605      	mov	r5, r0
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d0de      	beq.n	8015e8e <__submore+0x1a>
 8015ed0:	eb00 0806 	add.w	r8, r0, r6
 8015ed4:	4601      	mov	r1, r0
 8015ed6:	4632      	mov	r2, r6
 8015ed8:	4640      	mov	r0, r8
 8015eda:	f7fb fe91 	bl	8011c00 <memcpy>
 8015ede:	f8c4 8000 	str.w	r8, [r4]
 8015ee2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015ee6:	e7e9      	b.n	8015ebc <__submore+0x48>

08015ee8 <__ascii_wctomb>:
 8015ee8:	b149      	cbz	r1, 8015efe <__ascii_wctomb+0x16>
 8015eea:	2aff      	cmp	r2, #255	; 0xff
 8015eec:	bf85      	ittet	hi
 8015eee:	238a      	movhi	r3, #138	; 0x8a
 8015ef0:	6003      	strhi	r3, [r0, #0]
 8015ef2:	700a      	strbls	r2, [r1, #0]
 8015ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ef8:	bf98      	it	ls
 8015efa:	2001      	movls	r0, #1
 8015efc:	4770      	bx	lr
 8015efe:	4608      	mov	r0, r1
 8015f00:	4770      	bx	lr

08015f02 <_realloc_r>:
 8015f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f04:	4607      	mov	r7, r0
 8015f06:	4614      	mov	r4, r2
 8015f08:	460e      	mov	r6, r1
 8015f0a:	b921      	cbnz	r1, 8015f16 <_realloc_r+0x14>
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015f12:	f7fb beef 	b.w	8011cf4 <_malloc_r>
 8015f16:	b922      	cbnz	r2, 8015f22 <_realloc_r+0x20>
 8015f18:	f7fb fe9e 	bl	8011c58 <_free_r>
 8015f1c:	4625      	mov	r5, r4
 8015f1e:	4628      	mov	r0, r5
 8015f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f22:	f000 f814 	bl	8015f4e <_malloc_usable_size_r>
 8015f26:	42a0      	cmp	r0, r4
 8015f28:	d20f      	bcs.n	8015f4a <_realloc_r+0x48>
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f7fb fee1 	bl	8011cf4 <_malloc_r>
 8015f32:	4605      	mov	r5, r0
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d0f2      	beq.n	8015f1e <_realloc_r+0x1c>
 8015f38:	4631      	mov	r1, r6
 8015f3a:	4622      	mov	r2, r4
 8015f3c:	f7fb fe60 	bl	8011c00 <memcpy>
 8015f40:	4631      	mov	r1, r6
 8015f42:	4638      	mov	r0, r7
 8015f44:	f7fb fe88 	bl	8011c58 <_free_r>
 8015f48:	e7e9      	b.n	8015f1e <_realloc_r+0x1c>
 8015f4a:	4635      	mov	r5, r6
 8015f4c:	e7e7      	b.n	8015f1e <_realloc_r+0x1c>

08015f4e <_malloc_usable_size_r>:
 8015f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f52:	1f18      	subs	r0, r3, #4
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	bfbc      	itt	lt
 8015f58:	580b      	ldrlt	r3, [r1, r0]
 8015f5a:	18c0      	addlt	r0, r0, r3
 8015f5c:	4770      	bx	lr
	...

08015f60 <ceil>:
 8015f60:	ec51 0b10 	vmov	r0, r1, d0
 8015f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015f6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015f70:	2e13      	cmp	r6, #19
 8015f72:	460c      	mov	r4, r1
 8015f74:	ee10 5a10 	vmov	r5, s0
 8015f78:	4680      	mov	r8, r0
 8015f7a:	dc30      	bgt.n	8015fde <ceil+0x7e>
 8015f7c:	2e00      	cmp	r6, #0
 8015f7e:	da12      	bge.n	8015fa6 <ceil+0x46>
 8015f80:	a333      	add	r3, pc, #204	; (adr r3, 8016050 <ceil+0xf0>)
 8015f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f86:	f7ea f991 	bl	80002ac <__adddf3>
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	f7ea fdd3 	bl	8000b38 <__aeabi_dcmpgt>
 8015f92:	b128      	cbz	r0, 8015fa0 <ceil+0x40>
 8015f94:	2c00      	cmp	r4, #0
 8015f96:	db55      	blt.n	8016044 <ceil+0xe4>
 8015f98:	432c      	orrs	r4, r5
 8015f9a:	d057      	beq.n	801604c <ceil+0xec>
 8015f9c:	4c2e      	ldr	r4, [pc, #184]	; (8016058 <ceil+0xf8>)
 8015f9e:	2500      	movs	r5, #0
 8015fa0:	4621      	mov	r1, r4
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	e025      	b.n	8015ff2 <ceil+0x92>
 8015fa6:	4f2d      	ldr	r7, [pc, #180]	; (801605c <ceil+0xfc>)
 8015fa8:	4137      	asrs	r7, r6
 8015faa:	ea01 0307 	and.w	r3, r1, r7
 8015fae:	4303      	orrs	r3, r0
 8015fb0:	d01f      	beq.n	8015ff2 <ceil+0x92>
 8015fb2:	a327      	add	r3, pc, #156	; (adr r3, 8016050 <ceil+0xf0>)
 8015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb8:	f7ea f978 	bl	80002ac <__adddf3>
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	f7ea fdba 	bl	8000b38 <__aeabi_dcmpgt>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d0eb      	beq.n	8015fa0 <ceil+0x40>
 8015fc8:	2c00      	cmp	r4, #0
 8015fca:	bfc2      	ittt	gt
 8015fcc:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015fd0:	fa43 f606 	asrgt.w	r6, r3, r6
 8015fd4:	19a4      	addgt	r4, r4, r6
 8015fd6:	ea24 0407 	bic.w	r4, r4, r7
 8015fda:	2500      	movs	r5, #0
 8015fdc:	e7e0      	b.n	8015fa0 <ceil+0x40>
 8015fde:	2e33      	cmp	r6, #51	; 0x33
 8015fe0:	dd0b      	ble.n	8015ffa <ceil+0x9a>
 8015fe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015fe6:	d104      	bne.n	8015ff2 <ceil+0x92>
 8015fe8:	ee10 2a10 	vmov	r2, s0
 8015fec:	460b      	mov	r3, r1
 8015fee:	f7ea f95d 	bl	80002ac <__adddf3>
 8015ff2:	ec41 0b10 	vmov	d0, r0, r1
 8015ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ffa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8016002:	fa23 f707 	lsr.w	r7, r3, r7
 8016006:	4207      	tst	r7, r0
 8016008:	d0f3      	beq.n	8015ff2 <ceil+0x92>
 801600a:	a311      	add	r3, pc, #68	; (adr r3, 8016050 <ceil+0xf0>)
 801600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016010:	f7ea f94c 	bl	80002ac <__adddf3>
 8016014:	2200      	movs	r2, #0
 8016016:	2300      	movs	r3, #0
 8016018:	f7ea fd8e 	bl	8000b38 <__aeabi_dcmpgt>
 801601c:	2800      	cmp	r0, #0
 801601e:	d0bf      	beq.n	8015fa0 <ceil+0x40>
 8016020:	2c00      	cmp	r4, #0
 8016022:	dd02      	ble.n	801602a <ceil+0xca>
 8016024:	2e14      	cmp	r6, #20
 8016026:	d103      	bne.n	8016030 <ceil+0xd0>
 8016028:	3401      	adds	r4, #1
 801602a:	ea25 0507 	bic.w	r5, r5, r7
 801602e:	e7b7      	b.n	8015fa0 <ceil+0x40>
 8016030:	2301      	movs	r3, #1
 8016032:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016036:	fa03 f606 	lsl.w	r6, r3, r6
 801603a:	4435      	add	r5, r6
 801603c:	4545      	cmp	r5, r8
 801603e:	bf38      	it	cc
 8016040:	18e4      	addcc	r4, r4, r3
 8016042:	e7f2      	b.n	801602a <ceil+0xca>
 8016044:	2500      	movs	r5, #0
 8016046:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801604a:	e7a9      	b.n	8015fa0 <ceil+0x40>
 801604c:	4625      	mov	r5, r4
 801604e:	e7a7      	b.n	8015fa0 <ceil+0x40>
 8016050:	8800759c 	.word	0x8800759c
 8016054:	7e37e43c 	.word	0x7e37e43c
 8016058:	3ff00000 	.word	0x3ff00000
 801605c:	000fffff 	.word	0x000fffff

08016060 <cos>:
 8016060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016062:	ec51 0b10 	vmov	r0, r1, d0
 8016066:	4a1e      	ldr	r2, [pc, #120]	; (80160e0 <cos+0x80>)
 8016068:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801606c:	4293      	cmp	r3, r2
 801606e:	dc06      	bgt.n	801607e <cos+0x1e>
 8016070:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80160d8 <cos+0x78>
 8016074:	f000 fca0 	bl	80169b8 <__kernel_cos>
 8016078:	ec51 0b10 	vmov	r0, r1, d0
 801607c:	e007      	b.n	801608e <cos+0x2e>
 801607e:	4a19      	ldr	r2, [pc, #100]	; (80160e4 <cos+0x84>)
 8016080:	4293      	cmp	r3, r2
 8016082:	dd09      	ble.n	8016098 <cos+0x38>
 8016084:	ee10 2a10 	vmov	r2, s0
 8016088:	460b      	mov	r3, r1
 801608a:	f7ea f90d 	bl	80002a8 <__aeabi_dsub>
 801608e:	ec41 0b10 	vmov	d0, r0, r1
 8016092:	b005      	add	sp, #20
 8016094:	f85d fb04 	ldr.w	pc, [sp], #4
 8016098:	4668      	mov	r0, sp
 801609a:	f000 f9e9 	bl	8016470 <__ieee754_rem_pio2>
 801609e:	f000 0003 	and.w	r0, r0, #3
 80160a2:	2801      	cmp	r0, #1
 80160a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80160a8:	ed9d 0b00 	vldr	d0, [sp]
 80160ac:	d007      	beq.n	80160be <cos+0x5e>
 80160ae:	2802      	cmp	r0, #2
 80160b0:	d00e      	beq.n	80160d0 <cos+0x70>
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d0de      	beq.n	8016074 <cos+0x14>
 80160b6:	2001      	movs	r0, #1
 80160b8:	f001 f886 	bl	80171c8 <__kernel_sin>
 80160bc:	e7dc      	b.n	8016078 <cos+0x18>
 80160be:	f001 f883 	bl	80171c8 <__kernel_sin>
 80160c2:	ec53 2b10 	vmov	r2, r3, d0
 80160c6:	ee10 0a10 	vmov	r0, s0
 80160ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80160ce:	e7de      	b.n	801608e <cos+0x2e>
 80160d0:	f000 fc72 	bl	80169b8 <__kernel_cos>
 80160d4:	e7f5      	b.n	80160c2 <cos+0x62>
 80160d6:	bf00      	nop
	...
 80160e0:	3fe921fb 	.word	0x3fe921fb
 80160e4:	7fefffff 	.word	0x7fefffff

080160e8 <sin>:
 80160e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80160ea:	ec51 0b10 	vmov	r0, r1, d0
 80160ee:	4a20      	ldr	r2, [pc, #128]	; (8016170 <sin+0x88>)
 80160f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80160f4:	4293      	cmp	r3, r2
 80160f6:	dc07      	bgt.n	8016108 <sin+0x20>
 80160f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016168 <sin+0x80>
 80160fc:	2000      	movs	r0, #0
 80160fe:	f001 f863 	bl	80171c8 <__kernel_sin>
 8016102:	ec51 0b10 	vmov	r0, r1, d0
 8016106:	e007      	b.n	8016118 <sin+0x30>
 8016108:	4a1a      	ldr	r2, [pc, #104]	; (8016174 <sin+0x8c>)
 801610a:	4293      	cmp	r3, r2
 801610c:	dd09      	ble.n	8016122 <sin+0x3a>
 801610e:	ee10 2a10 	vmov	r2, s0
 8016112:	460b      	mov	r3, r1
 8016114:	f7ea f8c8 	bl	80002a8 <__aeabi_dsub>
 8016118:	ec41 0b10 	vmov	d0, r0, r1
 801611c:	b005      	add	sp, #20
 801611e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016122:	4668      	mov	r0, sp
 8016124:	f000 f9a4 	bl	8016470 <__ieee754_rem_pio2>
 8016128:	f000 0003 	and.w	r0, r0, #3
 801612c:	2801      	cmp	r0, #1
 801612e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016132:	ed9d 0b00 	vldr	d0, [sp]
 8016136:	d004      	beq.n	8016142 <sin+0x5a>
 8016138:	2802      	cmp	r0, #2
 801613a:	d005      	beq.n	8016148 <sin+0x60>
 801613c:	b970      	cbnz	r0, 801615c <sin+0x74>
 801613e:	2001      	movs	r0, #1
 8016140:	e7dd      	b.n	80160fe <sin+0x16>
 8016142:	f000 fc39 	bl	80169b8 <__kernel_cos>
 8016146:	e7dc      	b.n	8016102 <sin+0x1a>
 8016148:	2001      	movs	r0, #1
 801614a:	f001 f83d 	bl	80171c8 <__kernel_sin>
 801614e:	ec53 2b10 	vmov	r2, r3, d0
 8016152:	ee10 0a10 	vmov	r0, s0
 8016156:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801615a:	e7dd      	b.n	8016118 <sin+0x30>
 801615c:	f000 fc2c 	bl	80169b8 <__kernel_cos>
 8016160:	e7f5      	b.n	801614e <sin+0x66>
 8016162:	bf00      	nop
 8016164:	f3af 8000 	nop.w
	...
 8016170:	3fe921fb 	.word	0x3fe921fb
 8016174:	7fefffff 	.word	0x7fefffff

08016178 <ceilf>:
 8016178:	ee10 3a10 	vmov	r3, s0
 801617c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016180:	0dca      	lsrs	r2, r1, #23
 8016182:	3a7f      	subs	r2, #127	; 0x7f
 8016184:	2a16      	cmp	r2, #22
 8016186:	dc2a      	bgt.n	80161de <ceilf+0x66>
 8016188:	2a00      	cmp	r2, #0
 801618a:	da11      	bge.n	80161b0 <ceilf+0x38>
 801618c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80161f0 <ceilf+0x78>
 8016190:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016194:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801619c:	dd05      	ble.n	80161aa <ceilf+0x32>
 801619e:	2b00      	cmp	r3, #0
 80161a0:	db23      	blt.n	80161ea <ceilf+0x72>
 80161a2:	2900      	cmp	r1, #0
 80161a4:	bf18      	it	ne
 80161a6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80161aa:	ee00 3a10 	vmov	s0, r3
 80161ae:	4770      	bx	lr
 80161b0:	4910      	ldr	r1, [pc, #64]	; (80161f4 <ceilf+0x7c>)
 80161b2:	4111      	asrs	r1, r2
 80161b4:	420b      	tst	r3, r1
 80161b6:	d0fa      	beq.n	80161ae <ceilf+0x36>
 80161b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80161f0 <ceilf+0x78>
 80161bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80161c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80161c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c8:	ddef      	ble.n	80161aa <ceilf+0x32>
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	bfc2      	ittt	gt
 80161ce:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80161d2:	fa40 f202 	asrgt.w	r2, r0, r2
 80161d6:	189b      	addgt	r3, r3, r2
 80161d8:	ea23 0301 	bic.w	r3, r3, r1
 80161dc:	e7e5      	b.n	80161aa <ceilf+0x32>
 80161de:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80161e2:	d3e4      	bcc.n	80161ae <ceilf+0x36>
 80161e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80161e8:	4770      	bx	lr
 80161ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80161ee:	e7dc      	b.n	80161aa <ceilf+0x32>
 80161f0:	7149f2ca 	.word	0x7149f2ca
 80161f4:	007fffff 	.word	0x007fffff

080161f8 <atan2>:
 80161f8:	f000 b85a 	b.w	80162b0 <__ieee754_atan2>

080161fc <sqrt>:
 80161fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016200:	ed2d 8b02 	vpush	{d8}
 8016204:	b08b      	sub	sp, #44	; 0x2c
 8016206:	ec55 4b10 	vmov	r4, r5, d0
 801620a:	f000 fb23 	bl	8016854 <__ieee754_sqrt>
 801620e:	4b26      	ldr	r3, [pc, #152]	; (80162a8 <sqrt+0xac>)
 8016210:	eeb0 8a40 	vmov.f32	s16, s0
 8016214:	eef0 8a60 	vmov.f32	s17, s1
 8016218:	f993 6000 	ldrsb.w	r6, [r3]
 801621c:	1c73      	adds	r3, r6, #1
 801621e:	d02a      	beq.n	8016276 <sqrt+0x7a>
 8016220:	4622      	mov	r2, r4
 8016222:	462b      	mov	r3, r5
 8016224:	4620      	mov	r0, r4
 8016226:	4629      	mov	r1, r5
 8016228:	f7ea fc90 	bl	8000b4c <__aeabi_dcmpun>
 801622c:	4607      	mov	r7, r0
 801622e:	bb10      	cbnz	r0, 8016276 <sqrt+0x7a>
 8016230:	f04f 0800 	mov.w	r8, #0
 8016234:	f04f 0900 	mov.w	r9, #0
 8016238:	4642      	mov	r2, r8
 801623a:	464b      	mov	r3, r9
 801623c:	4620      	mov	r0, r4
 801623e:	4629      	mov	r1, r5
 8016240:	f7ea fc5c 	bl	8000afc <__aeabi_dcmplt>
 8016244:	b1b8      	cbz	r0, 8016276 <sqrt+0x7a>
 8016246:	2301      	movs	r3, #1
 8016248:	9300      	str	r3, [sp, #0]
 801624a:	4b18      	ldr	r3, [pc, #96]	; (80162ac <sqrt+0xb0>)
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	9708      	str	r7, [sp, #32]
 8016250:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8016254:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016258:	b9b6      	cbnz	r6, 8016288 <sqrt+0x8c>
 801625a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801625e:	4668      	mov	r0, sp
 8016260:	f001 fa9e 	bl	80177a0 <matherr>
 8016264:	b1d0      	cbz	r0, 801629c <sqrt+0xa0>
 8016266:	9b08      	ldr	r3, [sp, #32]
 8016268:	b11b      	cbz	r3, 8016272 <sqrt+0x76>
 801626a:	f7fb fc8f 	bl	8011b8c <__errno>
 801626e:	9b08      	ldr	r3, [sp, #32]
 8016270:	6003      	str	r3, [r0, #0]
 8016272:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016276:	eeb0 0a48 	vmov.f32	s0, s16
 801627a:	eef0 0a68 	vmov.f32	s1, s17
 801627e:	b00b      	add	sp, #44	; 0x2c
 8016280:	ecbd 8b02 	vpop	{d8}
 8016284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016288:	4642      	mov	r2, r8
 801628a:	464b      	mov	r3, r9
 801628c:	4640      	mov	r0, r8
 801628e:	4649      	mov	r1, r9
 8016290:	f7ea faec 	bl	800086c <__aeabi_ddiv>
 8016294:	2e02      	cmp	r6, #2
 8016296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801629a:	d1e0      	bne.n	801625e <sqrt+0x62>
 801629c:	f7fb fc76 	bl	8011b8c <__errno>
 80162a0:	2321      	movs	r3, #33	; 0x21
 80162a2:	6003      	str	r3, [r0, #0]
 80162a4:	e7df      	b.n	8016266 <sqrt+0x6a>
 80162a6:	bf00      	nop
 80162a8:	20001004 	.word	0x20001004
 80162ac:	08018104 	.word	0x08018104

080162b0 <__ieee754_atan2>:
 80162b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162b4:	ec57 6b11 	vmov	r6, r7, d1
 80162b8:	4273      	negs	r3, r6
 80162ba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80162be:	4333      	orrs	r3, r6
 80162c0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8016468 <__ieee754_atan2+0x1b8>
 80162c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80162c8:	4573      	cmp	r3, lr
 80162ca:	ec51 0b10 	vmov	r0, r1, d0
 80162ce:	ee11 8a10 	vmov	r8, s2
 80162d2:	d80a      	bhi.n	80162ea <__ieee754_atan2+0x3a>
 80162d4:	4244      	negs	r4, r0
 80162d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80162da:	4304      	orrs	r4, r0
 80162dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80162e0:	4574      	cmp	r4, lr
 80162e2:	468c      	mov	ip, r1
 80162e4:	ee10 9a10 	vmov	r9, s0
 80162e8:	d907      	bls.n	80162fa <__ieee754_atan2+0x4a>
 80162ea:	4632      	mov	r2, r6
 80162ec:	463b      	mov	r3, r7
 80162ee:	f7e9 ffdd 	bl	80002ac <__adddf3>
 80162f2:	ec41 0b10 	vmov	d0, r0, r1
 80162f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80162fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016302:	4334      	orrs	r4, r6
 8016304:	d103      	bne.n	801630e <__ieee754_atan2+0x5e>
 8016306:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801630a:	f001 b819 	b.w	8017340 <atan>
 801630e:	17bc      	asrs	r4, r7, #30
 8016310:	f004 0402 	and.w	r4, r4, #2
 8016314:	ea53 0909 	orrs.w	r9, r3, r9
 8016318:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801631c:	d107      	bne.n	801632e <__ieee754_atan2+0x7e>
 801631e:	2c02      	cmp	r4, #2
 8016320:	d073      	beq.n	801640a <__ieee754_atan2+0x15a>
 8016322:	2c03      	cmp	r4, #3
 8016324:	d1e5      	bne.n	80162f2 <__ieee754_atan2+0x42>
 8016326:	a13e      	add	r1, pc, #248	; (adr r1, 8016420 <__ieee754_atan2+0x170>)
 8016328:	e9d1 0100 	ldrd	r0, r1, [r1]
 801632c:	e7e1      	b.n	80162f2 <__ieee754_atan2+0x42>
 801632e:	ea52 0808 	orrs.w	r8, r2, r8
 8016332:	d106      	bne.n	8016342 <__ieee754_atan2+0x92>
 8016334:	f1bc 0f00 	cmp.w	ip, #0
 8016338:	da6b      	bge.n	8016412 <__ieee754_atan2+0x162>
 801633a:	a13b      	add	r1, pc, #236	; (adr r1, 8016428 <__ieee754_atan2+0x178>)
 801633c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016340:	e7d7      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016342:	4572      	cmp	r2, lr
 8016344:	d120      	bne.n	8016388 <__ieee754_atan2+0xd8>
 8016346:	4293      	cmp	r3, r2
 8016348:	d111      	bne.n	801636e <__ieee754_atan2+0xbe>
 801634a:	2c02      	cmp	r4, #2
 801634c:	d007      	beq.n	801635e <__ieee754_atan2+0xae>
 801634e:	2c03      	cmp	r4, #3
 8016350:	d009      	beq.n	8016366 <__ieee754_atan2+0xb6>
 8016352:	2c01      	cmp	r4, #1
 8016354:	d155      	bne.n	8016402 <__ieee754_atan2+0x152>
 8016356:	a136      	add	r1, pc, #216	; (adr r1, 8016430 <__ieee754_atan2+0x180>)
 8016358:	e9d1 0100 	ldrd	r0, r1, [r1]
 801635c:	e7c9      	b.n	80162f2 <__ieee754_atan2+0x42>
 801635e:	a136      	add	r1, pc, #216	; (adr r1, 8016438 <__ieee754_atan2+0x188>)
 8016360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016364:	e7c5      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016366:	a136      	add	r1, pc, #216	; (adr r1, 8016440 <__ieee754_atan2+0x190>)
 8016368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801636c:	e7c1      	b.n	80162f2 <__ieee754_atan2+0x42>
 801636e:	2c02      	cmp	r4, #2
 8016370:	d04b      	beq.n	801640a <__ieee754_atan2+0x15a>
 8016372:	2c03      	cmp	r4, #3
 8016374:	d0d7      	beq.n	8016326 <__ieee754_atan2+0x76>
 8016376:	2c01      	cmp	r4, #1
 8016378:	f04f 0000 	mov.w	r0, #0
 801637c:	d102      	bne.n	8016384 <__ieee754_atan2+0xd4>
 801637e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016382:	e7b6      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016384:	2100      	movs	r1, #0
 8016386:	e7b4      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016388:	4573      	cmp	r3, lr
 801638a:	d0d3      	beq.n	8016334 <__ieee754_atan2+0x84>
 801638c:	1a9b      	subs	r3, r3, r2
 801638e:	151b      	asrs	r3, r3, #20
 8016390:	2b3c      	cmp	r3, #60	; 0x3c
 8016392:	dc1e      	bgt.n	80163d2 <__ieee754_atan2+0x122>
 8016394:	2f00      	cmp	r7, #0
 8016396:	da01      	bge.n	801639c <__ieee754_atan2+0xec>
 8016398:	333c      	adds	r3, #60	; 0x3c
 801639a:	db1e      	blt.n	80163da <__ieee754_atan2+0x12a>
 801639c:	4632      	mov	r2, r6
 801639e:	463b      	mov	r3, r7
 80163a0:	f7ea fa64 	bl	800086c <__aeabi_ddiv>
 80163a4:	ec41 0b10 	vmov	d0, r0, r1
 80163a8:	f001 f96a 	bl	8017680 <fabs>
 80163ac:	f000 ffc8 	bl	8017340 <atan>
 80163b0:	ec51 0b10 	vmov	r0, r1, d0
 80163b4:	2c01      	cmp	r4, #1
 80163b6:	d013      	beq.n	80163e0 <__ieee754_atan2+0x130>
 80163b8:	2c02      	cmp	r4, #2
 80163ba:	d015      	beq.n	80163e8 <__ieee754_atan2+0x138>
 80163bc:	2c00      	cmp	r4, #0
 80163be:	d098      	beq.n	80162f2 <__ieee754_atan2+0x42>
 80163c0:	a321      	add	r3, pc, #132	; (adr r3, 8016448 <__ieee754_atan2+0x198>)
 80163c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c6:	f7e9 ff6f 	bl	80002a8 <__aeabi_dsub>
 80163ca:	a321      	add	r3, pc, #132	; (adr r3, 8016450 <__ieee754_atan2+0x1a0>)
 80163cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d0:	e014      	b.n	80163fc <__ieee754_atan2+0x14c>
 80163d2:	a121      	add	r1, pc, #132	; (adr r1, 8016458 <__ieee754_atan2+0x1a8>)
 80163d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163d8:	e7ec      	b.n	80163b4 <__ieee754_atan2+0x104>
 80163da:	2000      	movs	r0, #0
 80163dc:	2100      	movs	r1, #0
 80163de:	e7e9      	b.n	80163b4 <__ieee754_atan2+0x104>
 80163e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80163e4:	4619      	mov	r1, r3
 80163e6:	e784      	b.n	80162f2 <__ieee754_atan2+0x42>
 80163e8:	a317      	add	r3, pc, #92	; (adr r3, 8016448 <__ieee754_atan2+0x198>)
 80163ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ee:	f7e9 ff5b 	bl	80002a8 <__aeabi_dsub>
 80163f2:	4602      	mov	r2, r0
 80163f4:	460b      	mov	r3, r1
 80163f6:	a116      	add	r1, pc, #88	; (adr r1, 8016450 <__ieee754_atan2+0x1a0>)
 80163f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163fc:	f7e9 ff54 	bl	80002a8 <__aeabi_dsub>
 8016400:	e777      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016402:	a117      	add	r1, pc, #92	; (adr r1, 8016460 <__ieee754_atan2+0x1b0>)
 8016404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016408:	e773      	b.n	80162f2 <__ieee754_atan2+0x42>
 801640a:	a111      	add	r1, pc, #68	; (adr r1, 8016450 <__ieee754_atan2+0x1a0>)
 801640c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016410:	e76f      	b.n	80162f2 <__ieee754_atan2+0x42>
 8016412:	a111      	add	r1, pc, #68	; (adr r1, 8016458 <__ieee754_atan2+0x1a8>)
 8016414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016418:	e76b      	b.n	80162f2 <__ieee754_atan2+0x42>
 801641a:	bf00      	nop
 801641c:	f3af 8000 	nop.w
 8016420:	54442d18 	.word	0x54442d18
 8016424:	c00921fb 	.word	0xc00921fb
 8016428:	54442d18 	.word	0x54442d18
 801642c:	bff921fb 	.word	0xbff921fb
 8016430:	54442d18 	.word	0x54442d18
 8016434:	bfe921fb 	.word	0xbfe921fb
 8016438:	7f3321d2 	.word	0x7f3321d2
 801643c:	4002d97c 	.word	0x4002d97c
 8016440:	7f3321d2 	.word	0x7f3321d2
 8016444:	c002d97c 	.word	0xc002d97c
 8016448:	33145c07 	.word	0x33145c07
 801644c:	3ca1a626 	.word	0x3ca1a626
 8016450:	54442d18 	.word	0x54442d18
 8016454:	400921fb 	.word	0x400921fb
 8016458:	54442d18 	.word	0x54442d18
 801645c:	3ff921fb 	.word	0x3ff921fb
 8016460:	54442d18 	.word	0x54442d18
 8016464:	3fe921fb 	.word	0x3fe921fb
 8016468:	7ff00000 	.word	0x7ff00000
 801646c:	00000000 	.word	0x00000000

08016470 <__ieee754_rem_pio2>:
 8016470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016474:	ec57 6b10 	vmov	r6, r7, d0
 8016478:	4bc3      	ldr	r3, [pc, #780]	; (8016788 <__ieee754_rem_pio2+0x318>)
 801647a:	b08d      	sub	sp, #52	; 0x34
 801647c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016480:	4598      	cmp	r8, r3
 8016482:	4604      	mov	r4, r0
 8016484:	9704      	str	r7, [sp, #16]
 8016486:	dc07      	bgt.n	8016498 <__ieee754_rem_pio2+0x28>
 8016488:	2200      	movs	r2, #0
 801648a:	2300      	movs	r3, #0
 801648c:	ed84 0b00 	vstr	d0, [r4]
 8016490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016494:	2500      	movs	r5, #0
 8016496:	e027      	b.n	80164e8 <__ieee754_rem_pio2+0x78>
 8016498:	4bbc      	ldr	r3, [pc, #752]	; (801678c <__ieee754_rem_pio2+0x31c>)
 801649a:	4598      	cmp	r8, r3
 801649c:	dc75      	bgt.n	801658a <__ieee754_rem_pio2+0x11a>
 801649e:	9b04      	ldr	r3, [sp, #16]
 80164a0:	4dbb      	ldr	r5, [pc, #748]	; (8016790 <__ieee754_rem_pio2+0x320>)
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	ee10 0a10 	vmov	r0, s0
 80164a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8016750 <__ieee754_rem_pio2+0x2e0>)
 80164aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ae:	4639      	mov	r1, r7
 80164b0:	dd36      	ble.n	8016520 <__ieee754_rem_pio2+0xb0>
 80164b2:	f7e9 fef9 	bl	80002a8 <__aeabi_dsub>
 80164b6:	45a8      	cmp	r8, r5
 80164b8:	4606      	mov	r6, r0
 80164ba:	460f      	mov	r7, r1
 80164bc:	d018      	beq.n	80164f0 <__ieee754_rem_pio2+0x80>
 80164be:	a3a6      	add	r3, pc, #664	; (adr r3, 8016758 <__ieee754_rem_pio2+0x2e8>)
 80164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c4:	f7e9 fef0 	bl	80002a8 <__aeabi_dsub>
 80164c8:	4602      	mov	r2, r0
 80164ca:	460b      	mov	r3, r1
 80164cc:	e9c4 2300 	strd	r2, r3, [r4]
 80164d0:	4630      	mov	r0, r6
 80164d2:	4639      	mov	r1, r7
 80164d4:	f7e9 fee8 	bl	80002a8 <__aeabi_dsub>
 80164d8:	a39f      	add	r3, pc, #636	; (adr r3, 8016758 <__ieee754_rem_pio2+0x2e8>)
 80164da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164de:	f7e9 fee3 	bl	80002a8 <__aeabi_dsub>
 80164e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80164e6:	2501      	movs	r5, #1
 80164e8:	4628      	mov	r0, r5
 80164ea:	b00d      	add	sp, #52	; 0x34
 80164ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f0:	a39b      	add	r3, pc, #620	; (adr r3, 8016760 <__ieee754_rem_pio2+0x2f0>)
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	f7e9 fed7 	bl	80002a8 <__aeabi_dsub>
 80164fa:	a39b      	add	r3, pc, #620	; (adr r3, 8016768 <__ieee754_rem_pio2+0x2f8>)
 80164fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016500:	4606      	mov	r6, r0
 8016502:	460f      	mov	r7, r1
 8016504:	f7e9 fed0 	bl	80002a8 <__aeabi_dsub>
 8016508:	4602      	mov	r2, r0
 801650a:	460b      	mov	r3, r1
 801650c:	e9c4 2300 	strd	r2, r3, [r4]
 8016510:	4630      	mov	r0, r6
 8016512:	4639      	mov	r1, r7
 8016514:	f7e9 fec8 	bl	80002a8 <__aeabi_dsub>
 8016518:	a393      	add	r3, pc, #588	; (adr r3, 8016768 <__ieee754_rem_pio2+0x2f8>)
 801651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801651e:	e7de      	b.n	80164de <__ieee754_rem_pio2+0x6e>
 8016520:	f7e9 fec4 	bl	80002ac <__adddf3>
 8016524:	45a8      	cmp	r8, r5
 8016526:	4606      	mov	r6, r0
 8016528:	460f      	mov	r7, r1
 801652a:	d016      	beq.n	801655a <__ieee754_rem_pio2+0xea>
 801652c:	a38a      	add	r3, pc, #552	; (adr r3, 8016758 <__ieee754_rem_pio2+0x2e8>)
 801652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016532:	f7e9 febb 	bl	80002ac <__adddf3>
 8016536:	4602      	mov	r2, r0
 8016538:	460b      	mov	r3, r1
 801653a:	e9c4 2300 	strd	r2, r3, [r4]
 801653e:	4630      	mov	r0, r6
 8016540:	4639      	mov	r1, r7
 8016542:	f7e9 feb1 	bl	80002a8 <__aeabi_dsub>
 8016546:	a384      	add	r3, pc, #528	; (adr r3, 8016758 <__ieee754_rem_pio2+0x2e8>)
 8016548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654c:	f7e9 feae 	bl	80002ac <__adddf3>
 8016550:	f04f 35ff 	mov.w	r5, #4294967295
 8016554:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016558:	e7c6      	b.n	80164e8 <__ieee754_rem_pio2+0x78>
 801655a:	a381      	add	r3, pc, #516	; (adr r3, 8016760 <__ieee754_rem_pio2+0x2f0>)
 801655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016560:	f7e9 fea4 	bl	80002ac <__adddf3>
 8016564:	a380      	add	r3, pc, #512	; (adr r3, 8016768 <__ieee754_rem_pio2+0x2f8>)
 8016566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656a:	4606      	mov	r6, r0
 801656c:	460f      	mov	r7, r1
 801656e:	f7e9 fe9d 	bl	80002ac <__adddf3>
 8016572:	4602      	mov	r2, r0
 8016574:	460b      	mov	r3, r1
 8016576:	e9c4 2300 	strd	r2, r3, [r4]
 801657a:	4630      	mov	r0, r6
 801657c:	4639      	mov	r1, r7
 801657e:	f7e9 fe93 	bl	80002a8 <__aeabi_dsub>
 8016582:	a379      	add	r3, pc, #484	; (adr r3, 8016768 <__ieee754_rem_pio2+0x2f8>)
 8016584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016588:	e7e0      	b.n	801654c <__ieee754_rem_pio2+0xdc>
 801658a:	4b82      	ldr	r3, [pc, #520]	; (8016794 <__ieee754_rem_pio2+0x324>)
 801658c:	4598      	cmp	r8, r3
 801658e:	f300 80d0 	bgt.w	8016732 <__ieee754_rem_pio2+0x2c2>
 8016592:	f001 f875 	bl	8017680 <fabs>
 8016596:	ec57 6b10 	vmov	r6, r7, d0
 801659a:	ee10 0a10 	vmov	r0, s0
 801659e:	a374      	add	r3, pc, #464	; (adr r3, 8016770 <__ieee754_rem_pio2+0x300>)
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	4639      	mov	r1, r7
 80165a6:	f7ea f837 	bl	8000618 <__aeabi_dmul>
 80165aa:	2200      	movs	r2, #0
 80165ac:	4b7a      	ldr	r3, [pc, #488]	; (8016798 <__ieee754_rem_pio2+0x328>)
 80165ae:	f7e9 fe7d 	bl	80002ac <__adddf3>
 80165b2:	f7ea fae1 	bl	8000b78 <__aeabi_d2iz>
 80165b6:	4605      	mov	r5, r0
 80165b8:	f7e9 ffc4 	bl	8000544 <__aeabi_i2d>
 80165bc:	a364      	add	r3, pc, #400	; (adr r3, 8016750 <__ieee754_rem_pio2+0x2e0>)
 80165be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165c6:	f7ea f827 	bl	8000618 <__aeabi_dmul>
 80165ca:	4602      	mov	r2, r0
 80165cc:	460b      	mov	r3, r1
 80165ce:	4630      	mov	r0, r6
 80165d0:	4639      	mov	r1, r7
 80165d2:	f7e9 fe69 	bl	80002a8 <__aeabi_dsub>
 80165d6:	a360      	add	r3, pc, #384	; (adr r3, 8016758 <__ieee754_rem_pio2+0x2e8>)
 80165d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165dc:	4682      	mov	sl, r0
 80165de:	468b      	mov	fp, r1
 80165e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165e4:	f7ea f818 	bl	8000618 <__aeabi_dmul>
 80165e8:	2d1f      	cmp	r5, #31
 80165ea:	4606      	mov	r6, r0
 80165ec:	460f      	mov	r7, r1
 80165ee:	dc0c      	bgt.n	801660a <__ieee754_rem_pio2+0x19a>
 80165f0:	1e6a      	subs	r2, r5, #1
 80165f2:	4b6a      	ldr	r3, [pc, #424]	; (801679c <__ieee754_rem_pio2+0x32c>)
 80165f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f8:	4543      	cmp	r3, r8
 80165fa:	d006      	beq.n	801660a <__ieee754_rem_pio2+0x19a>
 80165fc:	4632      	mov	r2, r6
 80165fe:	463b      	mov	r3, r7
 8016600:	4650      	mov	r0, sl
 8016602:	4659      	mov	r1, fp
 8016604:	f7e9 fe50 	bl	80002a8 <__aeabi_dsub>
 8016608:	e00e      	b.n	8016628 <__ieee754_rem_pio2+0x1b8>
 801660a:	4632      	mov	r2, r6
 801660c:	463b      	mov	r3, r7
 801660e:	4650      	mov	r0, sl
 8016610:	4659      	mov	r1, fp
 8016612:	f7e9 fe49 	bl	80002a8 <__aeabi_dsub>
 8016616:	ea4f 5328 	mov.w	r3, r8, asr #20
 801661a:	9305      	str	r3, [sp, #20]
 801661c:	9a05      	ldr	r2, [sp, #20]
 801661e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016622:	1ad3      	subs	r3, r2, r3
 8016624:	2b10      	cmp	r3, #16
 8016626:	dc02      	bgt.n	801662e <__ieee754_rem_pio2+0x1be>
 8016628:	e9c4 0100 	strd	r0, r1, [r4]
 801662c:	e039      	b.n	80166a2 <__ieee754_rem_pio2+0x232>
 801662e:	a34c      	add	r3, pc, #304	; (adr r3, 8016760 <__ieee754_rem_pio2+0x2f0>)
 8016630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016638:	f7e9 ffee 	bl	8000618 <__aeabi_dmul>
 801663c:	4606      	mov	r6, r0
 801663e:	460f      	mov	r7, r1
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	4650      	mov	r0, sl
 8016646:	4659      	mov	r1, fp
 8016648:	f7e9 fe2e 	bl	80002a8 <__aeabi_dsub>
 801664c:	4602      	mov	r2, r0
 801664e:	460b      	mov	r3, r1
 8016650:	4680      	mov	r8, r0
 8016652:	4689      	mov	r9, r1
 8016654:	4650      	mov	r0, sl
 8016656:	4659      	mov	r1, fp
 8016658:	f7e9 fe26 	bl	80002a8 <__aeabi_dsub>
 801665c:	4632      	mov	r2, r6
 801665e:	463b      	mov	r3, r7
 8016660:	f7e9 fe22 	bl	80002a8 <__aeabi_dsub>
 8016664:	a340      	add	r3, pc, #256	; (adr r3, 8016768 <__ieee754_rem_pio2+0x2f8>)
 8016666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666a:	4606      	mov	r6, r0
 801666c:	460f      	mov	r7, r1
 801666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016672:	f7e9 ffd1 	bl	8000618 <__aeabi_dmul>
 8016676:	4632      	mov	r2, r6
 8016678:	463b      	mov	r3, r7
 801667a:	f7e9 fe15 	bl	80002a8 <__aeabi_dsub>
 801667e:	4602      	mov	r2, r0
 8016680:	460b      	mov	r3, r1
 8016682:	4606      	mov	r6, r0
 8016684:	460f      	mov	r7, r1
 8016686:	4640      	mov	r0, r8
 8016688:	4649      	mov	r1, r9
 801668a:	f7e9 fe0d 	bl	80002a8 <__aeabi_dsub>
 801668e:	9a05      	ldr	r2, [sp, #20]
 8016690:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016694:	1ad3      	subs	r3, r2, r3
 8016696:	2b31      	cmp	r3, #49	; 0x31
 8016698:	dc20      	bgt.n	80166dc <__ieee754_rem_pio2+0x26c>
 801669a:	e9c4 0100 	strd	r0, r1, [r4]
 801669e:	46c2      	mov	sl, r8
 80166a0:	46cb      	mov	fp, r9
 80166a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80166a6:	4650      	mov	r0, sl
 80166a8:	4642      	mov	r2, r8
 80166aa:	464b      	mov	r3, r9
 80166ac:	4659      	mov	r1, fp
 80166ae:	f7e9 fdfb 	bl	80002a8 <__aeabi_dsub>
 80166b2:	463b      	mov	r3, r7
 80166b4:	4632      	mov	r2, r6
 80166b6:	f7e9 fdf7 	bl	80002a8 <__aeabi_dsub>
 80166ba:	9b04      	ldr	r3, [sp, #16]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80166c2:	f6bf af11 	bge.w	80164e8 <__ieee754_rem_pio2+0x78>
 80166c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80166ca:	6063      	str	r3, [r4, #4]
 80166cc:	f8c4 8000 	str.w	r8, [r4]
 80166d0:	60a0      	str	r0, [r4, #8]
 80166d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80166d6:	60e3      	str	r3, [r4, #12]
 80166d8:	426d      	negs	r5, r5
 80166da:	e705      	b.n	80164e8 <__ieee754_rem_pio2+0x78>
 80166dc:	a326      	add	r3, pc, #152	; (adr r3, 8016778 <__ieee754_rem_pio2+0x308>)
 80166de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166e6:	f7e9 ff97 	bl	8000618 <__aeabi_dmul>
 80166ea:	4606      	mov	r6, r0
 80166ec:	460f      	mov	r7, r1
 80166ee:	4602      	mov	r2, r0
 80166f0:	460b      	mov	r3, r1
 80166f2:	4640      	mov	r0, r8
 80166f4:	4649      	mov	r1, r9
 80166f6:	f7e9 fdd7 	bl	80002a8 <__aeabi_dsub>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	4682      	mov	sl, r0
 8016700:	468b      	mov	fp, r1
 8016702:	4640      	mov	r0, r8
 8016704:	4649      	mov	r1, r9
 8016706:	f7e9 fdcf 	bl	80002a8 <__aeabi_dsub>
 801670a:	4632      	mov	r2, r6
 801670c:	463b      	mov	r3, r7
 801670e:	f7e9 fdcb 	bl	80002a8 <__aeabi_dsub>
 8016712:	a31b      	add	r3, pc, #108	; (adr r3, 8016780 <__ieee754_rem_pio2+0x310>)
 8016714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016718:	4606      	mov	r6, r0
 801671a:	460f      	mov	r7, r1
 801671c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016720:	f7e9 ff7a 	bl	8000618 <__aeabi_dmul>
 8016724:	4632      	mov	r2, r6
 8016726:	463b      	mov	r3, r7
 8016728:	f7e9 fdbe 	bl	80002a8 <__aeabi_dsub>
 801672c:	4606      	mov	r6, r0
 801672e:	460f      	mov	r7, r1
 8016730:	e764      	b.n	80165fc <__ieee754_rem_pio2+0x18c>
 8016732:	4b1b      	ldr	r3, [pc, #108]	; (80167a0 <__ieee754_rem_pio2+0x330>)
 8016734:	4598      	cmp	r8, r3
 8016736:	dd35      	ble.n	80167a4 <__ieee754_rem_pio2+0x334>
 8016738:	ee10 2a10 	vmov	r2, s0
 801673c:	463b      	mov	r3, r7
 801673e:	4630      	mov	r0, r6
 8016740:	4639      	mov	r1, r7
 8016742:	f7e9 fdb1 	bl	80002a8 <__aeabi_dsub>
 8016746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801674a:	e9c4 0100 	strd	r0, r1, [r4]
 801674e:	e6a1      	b.n	8016494 <__ieee754_rem_pio2+0x24>
 8016750:	54400000 	.word	0x54400000
 8016754:	3ff921fb 	.word	0x3ff921fb
 8016758:	1a626331 	.word	0x1a626331
 801675c:	3dd0b461 	.word	0x3dd0b461
 8016760:	1a600000 	.word	0x1a600000
 8016764:	3dd0b461 	.word	0x3dd0b461
 8016768:	2e037073 	.word	0x2e037073
 801676c:	3ba3198a 	.word	0x3ba3198a
 8016770:	6dc9c883 	.word	0x6dc9c883
 8016774:	3fe45f30 	.word	0x3fe45f30
 8016778:	2e000000 	.word	0x2e000000
 801677c:	3ba3198a 	.word	0x3ba3198a
 8016780:	252049c1 	.word	0x252049c1
 8016784:	397b839a 	.word	0x397b839a
 8016788:	3fe921fb 	.word	0x3fe921fb
 801678c:	4002d97b 	.word	0x4002d97b
 8016790:	3ff921fb 	.word	0x3ff921fb
 8016794:	413921fb 	.word	0x413921fb
 8016798:	3fe00000 	.word	0x3fe00000
 801679c:	0801810c 	.word	0x0801810c
 80167a0:	7fefffff 	.word	0x7fefffff
 80167a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80167a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80167ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80167b0:	4630      	mov	r0, r6
 80167b2:	460f      	mov	r7, r1
 80167b4:	f7ea f9e0 	bl	8000b78 <__aeabi_d2iz>
 80167b8:	f7e9 fec4 	bl	8000544 <__aeabi_i2d>
 80167bc:	4602      	mov	r2, r0
 80167be:	460b      	mov	r3, r1
 80167c0:	4630      	mov	r0, r6
 80167c2:	4639      	mov	r1, r7
 80167c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80167c8:	f7e9 fd6e 	bl	80002a8 <__aeabi_dsub>
 80167cc:	2200      	movs	r2, #0
 80167ce:	4b1f      	ldr	r3, [pc, #124]	; (801684c <__ieee754_rem_pio2+0x3dc>)
 80167d0:	f7e9 ff22 	bl	8000618 <__aeabi_dmul>
 80167d4:	460f      	mov	r7, r1
 80167d6:	4606      	mov	r6, r0
 80167d8:	f7ea f9ce 	bl	8000b78 <__aeabi_d2iz>
 80167dc:	f7e9 feb2 	bl	8000544 <__aeabi_i2d>
 80167e0:	4602      	mov	r2, r0
 80167e2:	460b      	mov	r3, r1
 80167e4:	4630      	mov	r0, r6
 80167e6:	4639      	mov	r1, r7
 80167e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80167ec:	f7e9 fd5c 	bl	80002a8 <__aeabi_dsub>
 80167f0:	2200      	movs	r2, #0
 80167f2:	4b16      	ldr	r3, [pc, #88]	; (801684c <__ieee754_rem_pio2+0x3dc>)
 80167f4:	f7e9 ff10 	bl	8000618 <__aeabi_dmul>
 80167f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016800:	f04f 0803 	mov.w	r8, #3
 8016804:	2600      	movs	r6, #0
 8016806:	2700      	movs	r7, #0
 8016808:	4632      	mov	r2, r6
 801680a:	463b      	mov	r3, r7
 801680c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016810:	f108 3aff 	add.w	sl, r8, #4294967295
 8016814:	f7ea f968 	bl	8000ae8 <__aeabi_dcmpeq>
 8016818:	b9b0      	cbnz	r0, 8016848 <__ieee754_rem_pio2+0x3d8>
 801681a:	4b0d      	ldr	r3, [pc, #52]	; (8016850 <__ieee754_rem_pio2+0x3e0>)
 801681c:	9301      	str	r3, [sp, #4]
 801681e:	2302      	movs	r3, #2
 8016820:	9300      	str	r3, [sp, #0]
 8016822:	462a      	mov	r2, r5
 8016824:	4643      	mov	r3, r8
 8016826:	4621      	mov	r1, r4
 8016828:	a806      	add	r0, sp, #24
 801682a:	f000 f98d 	bl	8016b48 <__kernel_rem_pio2>
 801682e:	9b04      	ldr	r3, [sp, #16]
 8016830:	2b00      	cmp	r3, #0
 8016832:	4605      	mov	r5, r0
 8016834:	f6bf ae58 	bge.w	80164e8 <__ieee754_rem_pio2+0x78>
 8016838:	6863      	ldr	r3, [r4, #4]
 801683a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801683e:	6063      	str	r3, [r4, #4]
 8016840:	68e3      	ldr	r3, [r4, #12]
 8016842:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016846:	e746      	b.n	80166d6 <__ieee754_rem_pio2+0x266>
 8016848:	46d0      	mov	r8, sl
 801684a:	e7dd      	b.n	8016808 <__ieee754_rem_pio2+0x398>
 801684c:	41700000 	.word	0x41700000
 8016850:	0801818c 	.word	0x0801818c

08016854 <__ieee754_sqrt>:
 8016854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016858:	4955      	ldr	r1, [pc, #340]	; (80169b0 <__ieee754_sqrt+0x15c>)
 801685a:	ec55 4b10 	vmov	r4, r5, d0
 801685e:	43a9      	bics	r1, r5
 8016860:	462b      	mov	r3, r5
 8016862:	462a      	mov	r2, r5
 8016864:	d112      	bne.n	801688c <__ieee754_sqrt+0x38>
 8016866:	ee10 2a10 	vmov	r2, s0
 801686a:	ee10 0a10 	vmov	r0, s0
 801686e:	4629      	mov	r1, r5
 8016870:	f7e9 fed2 	bl	8000618 <__aeabi_dmul>
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	4620      	mov	r0, r4
 801687a:	4629      	mov	r1, r5
 801687c:	f7e9 fd16 	bl	80002ac <__adddf3>
 8016880:	4604      	mov	r4, r0
 8016882:	460d      	mov	r5, r1
 8016884:	ec45 4b10 	vmov	d0, r4, r5
 8016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688c:	2d00      	cmp	r5, #0
 801688e:	ee10 0a10 	vmov	r0, s0
 8016892:	4621      	mov	r1, r4
 8016894:	dc0f      	bgt.n	80168b6 <__ieee754_sqrt+0x62>
 8016896:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801689a:	4330      	orrs	r0, r6
 801689c:	d0f2      	beq.n	8016884 <__ieee754_sqrt+0x30>
 801689e:	b155      	cbz	r5, 80168b6 <__ieee754_sqrt+0x62>
 80168a0:	ee10 2a10 	vmov	r2, s0
 80168a4:	4620      	mov	r0, r4
 80168a6:	4629      	mov	r1, r5
 80168a8:	f7e9 fcfe 	bl	80002a8 <__aeabi_dsub>
 80168ac:	4602      	mov	r2, r0
 80168ae:	460b      	mov	r3, r1
 80168b0:	f7e9 ffdc 	bl	800086c <__aeabi_ddiv>
 80168b4:	e7e4      	b.n	8016880 <__ieee754_sqrt+0x2c>
 80168b6:	151b      	asrs	r3, r3, #20
 80168b8:	d073      	beq.n	80169a2 <__ieee754_sqrt+0x14e>
 80168ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80168be:	07dd      	lsls	r5, r3, #31
 80168c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80168c4:	bf48      	it	mi
 80168c6:	0fc8      	lsrmi	r0, r1, #31
 80168c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80168cc:	bf44      	itt	mi
 80168ce:	0049      	lslmi	r1, r1, #1
 80168d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80168d4:	2500      	movs	r5, #0
 80168d6:	1058      	asrs	r0, r3, #1
 80168d8:	0fcb      	lsrs	r3, r1, #31
 80168da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80168de:	0049      	lsls	r1, r1, #1
 80168e0:	2316      	movs	r3, #22
 80168e2:	462c      	mov	r4, r5
 80168e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80168e8:	19a7      	adds	r7, r4, r6
 80168ea:	4297      	cmp	r7, r2
 80168ec:	bfde      	ittt	le
 80168ee:	19bc      	addle	r4, r7, r6
 80168f0:	1bd2      	suble	r2, r2, r7
 80168f2:	19ad      	addle	r5, r5, r6
 80168f4:	0fcf      	lsrs	r7, r1, #31
 80168f6:	3b01      	subs	r3, #1
 80168f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80168fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016904:	d1f0      	bne.n	80168e8 <__ieee754_sqrt+0x94>
 8016906:	f04f 0c20 	mov.w	ip, #32
 801690a:	469e      	mov	lr, r3
 801690c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016910:	42a2      	cmp	r2, r4
 8016912:	eb06 070e 	add.w	r7, r6, lr
 8016916:	dc02      	bgt.n	801691e <__ieee754_sqrt+0xca>
 8016918:	d112      	bne.n	8016940 <__ieee754_sqrt+0xec>
 801691a:	428f      	cmp	r7, r1
 801691c:	d810      	bhi.n	8016940 <__ieee754_sqrt+0xec>
 801691e:	2f00      	cmp	r7, #0
 8016920:	eb07 0e06 	add.w	lr, r7, r6
 8016924:	da42      	bge.n	80169ac <__ieee754_sqrt+0x158>
 8016926:	f1be 0f00 	cmp.w	lr, #0
 801692a:	db3f      	blt.n	80169ac <__ieee754_sqrt+0x158>
 801692c:	f104 0801 	add.w	r8, r4, #1
 8016930:	1b12      	subs	r2, r2, r4
 8016932:	428f      	cmp	r7, r1
 8016934:	bf88      	it	hi
 8016936:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801693a:	1bc9      	subs	r1, r1, r7
 801693c:	4433      	add	r3, r6
 801693e:	4644      	mov	r4, r8
 8016940:	0052      	lsls	r2, r2, #1
 8016942:	f1bc 0c01 	subs.w	ip, ip, #1
 8016946:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801694a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801694e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016952:	d1dd      	bne.n	8016910 <__ieee754_sqrt+0xbc>
 8016954:	430a      	orrs	r2, r1
 8016956:	d006      	beq.n	8016966 <__ieee754_sqrt+0x112>
 8016958:	1c5c      	adds	r4, r3, #1
 801695a:	bf13      	iteet	ne
 801695c:	3301      	addne	r3, #1
 801695e:	3501      	addeq	r5, #1
 8016960:	4663      	moveq	r3, ip
 8016962:	f023 0301 	bicne.w	r3, r3, #1
 8016966:	106a      	asrs	r2, r5, #1
 8016968:	085b      	lsrs	r3, r3, #1
 801696a:	07e9      	lsls	r1, r5, #31
 801696c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016970:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016974:	bf48      	it	mi
 8016976:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801697a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801697e:	461c      	mov	r4, r3
 8016980:	e780      	b.n	8016884 <__ieee754_sqrt+0x30>
 8016982:	0aca      	lsrs	r2, r1, #11
 8016984:	3815      	subs	r0, #21
 8016986:	0549      	lsls	r1, r1, #21
 8016988:	2a00      	cmp	r2, #0
 801698a:	d0fa      	beq.n	8016982 <__ieee754_sqrt+0x12e>
 801698c:	02d6      	lsls	r6, r2, #11
 801698e:	d50a      	bpl.n	80169a6 <__ieee754_sqrt+0x152>
 8016990:	f1c3 0420 	rsb	r4, r3, #32
 8016994:	fa21 f404 	lsr.w	r4, r1, r4
 8016998:	1e5d      	subs	r5, r3, #1
 801699a:	4099      	lsls	r1, r3
 801699c:	4322      	orrs	r2, r4
 801699e:	1b43      	subs	r3, r0, r5
 80169a0:	e78b      	b.n	80168ba <__ieee754_sqrt+0x66>
 80169a2:	4618      	mov	r0, r3
 80169a4:	e7f0      	b.n	8016988 <__ieee754_sqrt+0x134>
 80169a6:	0052      	lsls	r2, r2, #1
 80169a8:	3301      	adds	r3, #1
 80169aa:	e7ef      	b.n	801698c <__ieee754_sqrt+0x138>
 80169ac:	46a0      	mov	r8, r4
 80169ae:	e7bf      	b.n	8016930 <__ieee754_sqrt+0xdc>
 80169b0:	7ff00000 	.word	0x7ff00000
 80169b4:	00000000 	.word	0x00000000

080169b8 <__kernel_cos>:
 80169b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169bc:	ec59 8b10 	vmov	r8, r9, d0
 80169c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80169c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80169c8:	ed2d 8b02 	vpush	{d8}
 80169cc:	eeb0 8a41 	vmov.f32	s16, s2
 80169d0:	eef0 8a61 	vmov.f32	s17, s3
 80169d4:	da07      	bge.n	80169e6 <__kernel_cos+0x2e>
 80169d6:	ee10 0a10 	vmov	r0, s0
 80169da:	4649      	mov	r1, r9
 80169dc:	f7ea f8cc 	bl	8000b78 <__aeabi_d2iz>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	f000 8089 	beq.w	8016af8 <__kernel_cos+0x140>
 80169e6:	4642      	mov	r2, r8
 80169e8:	464b      	mov	r3, r9
 80169ea:	4640      	mov	r0, r8
 80169ec:	4649      	mov	r1, r9
 80169ee:	f7e9 fe13 	bl	8000618 <__aeabi_dmul>
 80169f2:	2200      	movs	r2, #0
 80169f4:	4b4e      	ldr	r3, [pc, #312]	; (8016b30 <__kernel_cos+0x178>)
 80169f6:	4604      	mov	r4, r0
 80169f8:	460d      	mov	r5, r1
 80169fa:	f7e9 fe0d 	bl	8000618 <__aeabi_dmul>
 80169fe:	a340      	add	r3, pc, #256	; (adr r3, 8016b00 <__kernel_cos+0x148>)
 8016a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a04:	4682      	mov	sl, r0
 8016a06:	468b      	mov	fp, r1
 8016a08:	4620      	mov	r0, r4
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	f7e9 fe04 	bl	8000618 <__aeabi_dmul>
 8016a10:	a33d      	add	r3, pc, #244	; (adr r3, 8016b08 <__kernel_cos+0x150>)
 8016a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a16:	f7e9 fc49 	bl	80002ac <__adddf3>
 8016a1a:	4622      	mov	r2, r4
 8016a1c:	462b      	mov	r3, r5
 8016a1e:	f7e9 fdfb 	bl	8000618 <__aeabi_dmul>
 8016a22:	a33b      	add	r3, pc, #236	; (adr r3, 8016b10 <__kernel_cos+0x158>)
 8016a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a28:	f7e9 fc3e 	bl	80002a8 <__aeabi_dsub>
 8016a2c:	4622      	mov	r2, r4
 8016a2e:	462b      	mov	r3, r5
 8016a30:	f7e9 fdf2 	bl	8000618 <__aeabi_dmul>
 8016a34:	a338      	add	r3, pc, #224	; (adr r3, 8016b18 <__kernel_cos+0x160>)
 8016a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3a:	f7e9 fc37 	bl	80002ac <__adddf3>
 8016a3e:	4622      	mov	r2, r4
 8016a40:	462b      	mov	r3, r5
 8016a42:	f7e9 fde9 	bl	8000618 <__aeabi_dmul>
 8016a46:	a336      	add	r3, pc, #216	; (adr r3, 8016b20 <__kernel_cos+0x168>)
 8016a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4c:	f7e9 fc2c 	bl	80002a8 <__aeabi_dsub>
 8016a50:	4622      	mov	r2, r4
 8016a52:	462b      	mov	r3, r5
 8016a54:	f7e9 fde0 	bl	8000618 <__aeabi_dmul>
 8016a58:	a333      	add	r3, pc, #204	; (adr r3, 8016b28 <__kernel_cos+0x170>)
 8016a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5e:	f7e9 fc25 	bl	80002ac <__adddf3>
 8016a62:	4622      	mov	r2, r4
 8016a64:	462b      	mov	r3, r5
 8016a66:	f7e9 fdd7 	bl	8000618 <__aeabi_dmul>
 8016a6a:	4622      	mov	r2, r4
 8016a6c:	462b      	mov	r3, r5
 8016a6e:	f7e9 fdd3 	bl	8000618 <__aeabi_dmul>
 8016a72:	ec53 2b18 	vmov	r2, r3, d8
 8016a76:	4604      	mov	r4, r0
 8016a78:	460d      	mov	r5, r1
 8016a7a:	4640      	mov	r0, r8
 8016a7c:	4649      	mov	r1, r9
 8016a7e:	f7e9 fdcb 	bl	8000618 <__aeabi_dmul>
 8016a82:	460b      	mov	r3, r1
 8016a84:	4602      	mov	r2, r0
 8016a86:	4629      	mov	r1, r5
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f7e9 fc0d 	bl	80002a8 <__aeabi_dsub>
 8016a8e:	4b29      	ldr	r3, [pc, #164]	; (8016b34 <__kernel_cos+0x17c>)
 8016a90:	429e      	cmp	r6, r3
 8016a92:	4680      	mov	r8, r0
 8016a94:	4689      	mov	r9, r1
 8016a96:	dc11      	bgt.n	8016abc <__kernel_cos+0x104>
 8016a98:	4602      	mov	r2, r0
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	4650      	mov	r0, sl
 8016a9e:	4659      	mov	r1, fp
 8016aa0:	f7e9 fc02 	bl	80002a8 <__aeabi_dsub>
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	4924      	ldr	r1, [pc, #144]	; (8016b38 <__kernel_cos+0x180>)
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	2000      	movs	r0, #0
 8016aac:	f7e9 fbfc 	bl	80002a8 <__aeabi_dsub>
 8016ab0:	ecbd 8b02 	vpop	{d8}
 8016ab4:	ec41 0b10 	vmov	d0, r0, r1
 8016ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016abc:	4b1f      	ldr	r3, [pc, #124]	; (8016b3c <__kernel_cos+0x184>)
 8016abe:	491e      	ldr	r1, [pc, #120]	; (8016b38 <__kernel_cos+0x180>)
 8016ac0:	429e      	cmp	r6, r3
 8016ac2:	bfcc      	ite	gt
 8016ac4:	4d1e      	ldrgt	r5, [pc, #120]	; (8016b40 <__kernel_cos+0x188>)
 8016ac6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016aca:	2400      	movs	r4, #0
 8016acc:	4622      	mov	r2, r4
 8016ace:	462b      	mov	r3, r5
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	f7e9 fbe9 	bl	80002a8 <__aeabi_dsub>
 8016ad6:	4622      	mov	r2, r4
 8016ad8:	4606      	mov	r6, r0
 8016ada:	460f      	mov	r7, r1
 8016adc:	462b      	mov	r3, r5
 8016ade:	4650      	mov	r0, sl
 8016ae0:	4659      	mov	r1, fp
 8016ae2:	f7e9 fbe1 	bl	80002a8 <__aeabi_dsub>
 8016ae6:	4642      	mov	r2, r8
 8016ae8:	464b      	mov	r3, r9
 8016aea:	f7e9 fbdd 	bl	80002a8 <__aeabi_dsub>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	4630      	mov	r0, r6
 8016af4:	4639      	mov	r1, r7
 8016af6:	e7d9      	b.n	8016aac <__kernel_cos+0xf4>
 8016af8:	2000      	movs	r0, #0
 8016afa:	490f      	ldr	r1, [pc, #60]	; (8016b38 <__kernel_cos+0x180>)
 8016afc:	e7d8      	b.n	8016ab0 <__kernel_cos+0xf8>
 8016afe:	bf00      	nop
 8016b00:	be8838d4 	.word	0xbe8838d4
 8016b04:	bda8fae9 	.word	0xbda8fae9
 8016b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8016b0c:	3e21ee9e 	.word	0x3e21ee9e
 8016b10:	809c52ad 	.word	0x809c52ad
 8016b14:	3e927e4f 	.word	0x3e927e4f
 8016b18:	19cb1590 	.word	0x19cb1590
 8016b1c:	3efa01a0 	.word	0x3efa01a0
 8016b20:	16c15177 	.word	0x16c15177
 8016b24:	3f56c16c 	.word	0x3f56c16c
 8016b28:	5555554c 	.word	0x5555554c
 8016b2c:	3fa55555 	.word	0x3fa55555
 8016b30:	3fe00000 	.word	0x3fe00000
 8016b34:	3fd33332 	.word	0x3fd33332
 8016b38:	3ff00000 	.word	0x3ff00000
 8016b3c:	3fe90000 	.word	0x3fe90000
 8016b40:	3fd20000 	.word	0x3fd20000
 8016b44:	00000000 	.word	0x00000000

08016b48 <__kernel_rem_pio2>:
 8016b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b4c:	ed2d 8b02 	vpush	{d8}
 8016b50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8016b54:	1ed4      	subs	r4, r2, #3
 8016b56:	9308      	str	r3, [sp, #32]
 8016b58:	9101      	str	r1, [sp, #4]
 8016b5a:	4bc5      	ldr	r3, [pc, #788]	; (8016e70 <__kernel_rem_pio2+0x328>)
 8016b5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016b5e:	9009      	str	r0, [sp, #36]	; 0x24
 8016b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016b64:	9304      	str	r3, [sp, #16]
 8016b66:	9b08      	ldr	r3, [sp, #32]
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	9307      	str	r3, [sp, #28]
 8016b6c:	2318      	movs	r3, #24
 8016b6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8016b72:	f06f 0317 	mvn.w	r3, #23
 8016b76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016b7a:	fb04 3303 	mla	r3, r4, r3, r3
 8016b7e:	eb03 0a02 	add.w	sl, r3, r2
 8016b82:	9b04      	ldr	r3, [sp, #16]
 8016b84:	9a07      	ldr	r2, [sp, #28]
 8016b86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8016e60 <__kernel_rem_pio2+0x318>
 8016b8a:	eb03 0802 	add.w	r8, r3, r2
 8016b8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016b90:	1aa7      	subs	r7, r4, r2
 8016b92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016b96:	ae22      	add	r6, sp, #136	; 0x88
 8016b98:	2500      	movs	r5, #0
 8016b9a:	4545      	cmp	r5, r8
 8016b9c:	dd13      	ble.n	8016bc6 <__kernel_rem_pio2+0x7e>
 8016b9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8016e60 <__kernel_rem_pio2+0x318>
 8016ba2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8016ba6:	2600      	movs	r6, #0
 8016ba8:	9b04      	ldr	r3, [sp, #16]
 8016baa:	429e      	cmp	r6, r3
 8016bac:	dc32      	bgt.n	8016c14 <__kernel_rem_pio2+0xcc>
 8016bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bb0:	9302      	str	r3, [sp, #8]
 8016bb2:	9b08      	ldr	r3, [sp, #32]
 8016bb4:	199d      	adds	r5, r3, r6
 8016bb6:	ab22      	add	r3, sp, #136	; 0x88
 8016bb8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016bbc:	9306      	str	r3, [sp, #24]
 8016bbe:	ec59 8b18 	vmov	r8, r9, d8
 8016bc2:	2700      	movs	r7, #0
 8016bc4:	e01f      	b.n	8016c06 <__kernel_rem_pio2+0xbe>
 8016bc6:	42ef      	cmn	r7, r5
 8016bc8:	d407      	bmi.n	8016bda <__kernel_rem_pio2+0x92>
 8016bca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016bce:	f7e9 fcb9 	bl	8000544 <__aeabi_i2d>
 8016bd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016bd6:	3501      	adds	r5, #1
 8016bd8:	e7df      	b.n	8016b9a <__kernel_rem_pio2+0x52>
 8016bda:	ec51 0b18 	vmov	r0, r1, d8
 8016bde:	e7f8      	b.n	8016bd2 <__kernel_rem_pio2+0x8a>
 8016be0:	9906      	ldr	r1, [sp, #24]
 8016be2:	9d02      	ldr	r5, [sp, #8]
 8016be4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016be8:	9106      	str	r1, [sp, #24]
 8016bea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016bee:	9502      	str	r5, [sp, #8]
 8016bf0:	f7e9 fd12 	bl	8000618 <__aeabi_dmul>
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	4640      	mov	r0, r8
 8016bfa:	4649      	mov	r1, r9
 8016bfc:	f7e9 fb56 	bl	80002ac <__adddf3>
 8016c00:	3701      	adds	r7, #1
 8016c02:	4680      	mov	r8, r0
 8016c04:	4689      	mov	r9, r1
 8016c06:	9b07      	ldr	r3, [sp, #28]
 8016c08:	429f      	cmp	r7, r3
 8016c0a:	dde9      	ble.n	8016be0 <__kernel_rem_pio2+0x98>
 8016c0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016c10:	3601      	adds	r6, #1
 8016c12:	e7c9      	b.n	8016ba8 <__kernel_rem_pio2+0x60>
 8016c14:	9b04      	ldr	r3, [sp, #16]
 8016c16:	aa0e      	add	r2, sp, #56	; 0x38
 8016c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8016c1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016c20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016c24:	9c04      	ldr	r4, [sp, #16]
 8016c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c28:	ab9a      	add	r3, sp, #616	; 0x268
 8016c2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8016c2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016c32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8016c3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016c3e:	ab9a      	add	r3, sp, #616	; 0x268
 8016c40:	445b      	add	r3, fp
 8016c42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8016c46:	2500      	movs	r5, #0
 8016c48:	1b63      	subs	r3, r4, r5
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	dc78      	bgt.n	8016d40 <__kernel_rem_pio2+0x1f8>
 8016c4e:	4650      	mov	r0, sl
 8016c50:	ec49 8b10 	vmov	d0, r8, r9
 8016c54:	f000 fda8 	bl	80177a8 <scalbn>
 8016c58:	ec57 6b10 	vmov	r6, r7, d0
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016c62:	ee10 0a10 	vmov	r0, s0
 8016c66:	4639      	mov	r1, r7
 8016c68:	f7e9 fcd6 	bl	8000618 <__aeabi_dmul>
 8016c6c:	ec41 0b10 	vmov	d0, r0, r1
 8016c70:	f000 fd12 	bl	8017698 <floor>
 8016c74:	2200      	movs	r2, #0
 8016c76:	ec51 0b10 	vmov	r0, r1, d0
 8016c7a:	4b7e      	ldr	r3, [pc, #504]	; (8016e74 <__kernel_rem_pio2+0x32c>)
 8016c7c:	f7e9 fccc 	bl	8000618 <__aeabi_dmul>
 8016c80:	4602      	mov	r2, r0
 8016c82:	460b      	mov	r3, r1
 8016c84:	4630      	mov	r0, r6
 8016c86:	4639      	mov	r1, r7
 8016c88:	f7e9 fb0e 	bl	80002a8 <__aeabi_dsub>
 8016c8c:	460f      	mov	r7, r1
 8016c8e:	4606      	mov	r6, r0
 8016c90:	f7e9 ff72 	bl	8000b78 <__aeabi_d2iz>
 8016c94:	9006      	str	r0, [sp, #24]
 8016c96:	f7e9 fc55 	bl	8000544 <__aeabi_i2d>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	4639      	mov	r1, r7
 8016ca2:	f7e9 fb01 	bl	80002a8 <__aeabi_dsub>
 8016ca6:	f1ba 0f00 	cmp.w	sl, #0
 8016caa:	4606      	mov	r6, r0
 8016cac:	460f      	mov	r7, r1
 8016cae:	dd6c      	ble.n	8016d8a <__kernel_rem_pio2+0x242>
 8016cb0:	1e62      	subs	r2, r4, #1
 8016cb2:	ab0e      	add	r3, sp, #56	; 0x38
 8016cb4:	f1ca 0118 	rsb	r1, sl, #24
 8016cb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016cbc:	9d06      	ldr	r5, [sp, #24]
 8016cbe:	fa40 f301 	asr.w	r3, r0, r1
 8016cc2:	441d      	add	r5, r3
 8016cc4:	408b      	lsls	r3, r1
 8016cc6:	1ac0      	subs	r0, r0, r3
 8016cc8:	ab0e      	add	r3, sp, #56	; 0x38
 8016cca:	9506      	str	r5, [sp, #24]
 8016ccc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016cd0:	f1ca 0317 	rsb	r3, sl, #23
 8016cd4:	fa40 f303 	asr.w	r3, r0, r3
 8016cd8:	9302      	str	r3, [sp, #8]
 8016cda:	9b02      	ldr	r3, [sp, #8]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	dd62      	ble.n	8016da6 <__kernel_rem_pio2+0x25e>
 8016ce0:	9b06      	ldr	r3, [sp, #24]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	9306      	str	r3, [sp, #24]
 8016ce8:	4615      	mov	r5, r2
 8016cea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016cee:	4294      	cmp	r4, r2
 8016cf0:	f300 8095 	bgt.w	8016e1e <__kernel_rem_pio2+0x2d6>
 8016cf4:	f1ba 0f00 	cmp.w	sl, #0
 8016cf8:	dd07      	ble.n	8016d0a <__kernel_rem_pio2+0x1c2>
 8016cfa:	f1ba 0f01 	cmp.w	sl, #1
 8016cfe:	f000 80a2 	beq.w	8016e46 <__kernel_rem_pio2+0x2fe>
 8016d02:	f1ba 0f02 	cmp.w	sl, #2
 8016d06:	f000 80c1 	beq.w	8016e8c <__kernel_rem_pio2+0x344>
 8016d0a:	9b02      	ldr	r3, [sp, #8]
 8016d0c:	2b02      	cmp	r3, #2
 8016d0e:	d14a      	bne.n	8016da6 <__kernel_rem_pio2+0x25e>
 8016d10:	4632      	mov	r2, r6
 8016d12:	463b      	mov	r3, r7
 8016d14:	2000      	movs	r0, #0
 8016d16:	4958      	ldr	r1, [pc, #352]	; (8016e78 <__kernel_rem_pio2+0x330>)
 8016d18:	f7e9 fac6 	bl	80002a8 <__aeabi_dsub>
 8016d1c:	4606      	mov	r6, r0
 8016d1e:	460f      	mov	r7, r1
 8016d20:	2d00      	cmp	r5, #0
 8016d22:	d040      	beq.n	8016da6 <__kernel_rem_pio2+0x25e>
 8016d24:	4650      	mov	r0, sl
 8016d26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016e68 <__kernel_rem_pio2+0x320>
 8016d2a:	f000 fd3d 	bl	80177a8 <scalbn>
 8016d2e:	4630      	mov	r0, r6
 8016d30:	4639      	mov	r1, r7
 8016d32:	ec53 2b10 	vmov	r2, r3, d0
 8016d36:	f7e9 fab7 	bl	80002a8 <__aeabi_dsub>
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460f      	mov	r7, r1
 8016d3e:	e032      	b.n	8016da6 <__kernel_rem_pio2+0x25e>
 8016d40:	2200      	movs	r2, #0
 8016d42:	4b4e      	ldr	r3, [pc, #312]	; (8016e7c <__kernel_rem_pio2+0x334>)
 8016d44:	4640      	mov	r0, r8
 8016d46:	4649      	mov	r1, r9
 8016d48:	f7e9 fc66 	bl	8000618 <__aeabi_dmul>
 8016d4c:	f7e9 ff14 	bl	8000b78 <__aeabi_d2iz>
 8016d50:	f7e9 fbf8 	bl	8000544 <__aeabi_i2d>
 8016d54:	2200      	movs	r2, #0
 8016d56:	4b4a      	ldr	r3, [pc, #296]	; (8016e80 <__kernel_rem_pio2+0x338>)
 8016d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d5c:	f7e9 fc5c 	bl	8000618 <__aeabi_dmul>
 8016d60:	4602      	mov	r2, r0
 8016d62:	460b      	mov	r3, r1
 8016d64:	4640      	mov	r0, r8
 8016d66:	4649      	mov	r1, r9
 8016d68:	f7e9 fa9e 	bl	80002a8 <__aeabi_dsub>
 8016d6c:	f7e9 ff04 	bl	8000b78 <__aeabi_d2iz>
 8016d70:	ab0e      	add	r3, sp, #56	; 0x38
 8016d72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8016d76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d7e:	f7e9 fa95 	bl	80002ac <__adddf3>
 8016d82:	3501      	adds	r5, #1
 8016d84:	4680      	mov	r8, r0
 8016d86:	4689      	mov	r9, r1
 8016d88:	e75e      	b.n	8016c48 <__kernel_rem_pio2+0x100>
 8016d8a:	d105      	bne.n	8016d98 <__kernel_rem_pio2+0x250>
 8016d8c:	1e63      	subs	r3, r4, #1
 8016d8e:	aa0e      	add	r2, sp, #56	; 0x38
 8016d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016d94:	15c3      	asrs	r3, r0, #23
 8016d96:	e79f      	b.n	8016cd8 <__kernel_rem_pio2+0x190>
 8016d98:	2200      	movs	r2, #0
 8016d9a:	4b3a      	ldr	r3, [pc, #232]	; (8016e84 <__kernel_rem_pio2+0x33c>)
 8016d9c:	f7e9 fec2 	bl	8000b24 <__aeabi_dcmpge>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d139      	bne.n	8016e18 <__kernel_rem_pio2+0x2d0>
 8016da4:	9002      	str	r0, [sp, #8]
 8016da6:	2200      	movs	r2, #0
 8016da8:	2300      	movs	r3, #0
 8016daa:	4630      	mov	r0, r6
 8016dac:	4639      	mov	r1, r7
 8016dae:	f7e9 fe9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	f000 80c7 	beq.w	8016f46 <__kernel_rem_pio2+0x3fe>
 8016db8:	1e65      	subs	r5, r4, #1
 8016dba:	462b      	mov	r3, r5
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	9904      	ldr	r1, [sp, #16]
 8016dc0:	428b      	cmp	r3, r1
 8016dc2:	da6a      	bge.n	8016e9a <__kernel_rem_pio2+0x352>
 8016dc4:	2a00      	cmp	r2, #0
 8016dc6:	f000 8088 	beq.w	8016eda <__kernel_rem_pio2+0x392>
 8016dca:	ab0e      	add	r3, sp, #56	; 0x38
 8016dcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8016dd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f000 80b4 	beq.w	8016f42 <__kernel_rem_pio2+0x3fa>
 8016dda:	4650      	mov	r0, sl
 8016ddc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8016e68 <__kernel_rem_pio2+0x320>
 8016de0:	f000 fce2 	bl	80177a8 <scalbn>
 8016de4:	00ec      	lsls	r4, r5, #3
 8016de6:	ab72      	add	r3, sp, #456	; 0x1c8
 8016de8:	191e      	adds	r6, r3, r4
 8016dea:	ec59 8b10 	vmov	r8, r9, d0
 8016dee:	f106 0a08 	add.w	sl, r6, #8
 8016df2:	462f      	mov	r7, r5
 8016df4:	2f00      	cmp	r7, #0
 8016df6:	f280 80df 	bge.w	8016fb8 <__kernel_rem_pio2+0x470>
 8016dfa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8016e60 <__kernel_rem_pio2+0x318>
 8016dfe:	f04f 0a00 	mov.w	sl, #0
 8016e02:	eba5 030a 	sub.w	r3, r5, sl
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	f2c0 810a 	blt.w	8017020 <__kernel_rem_pio2+0x4d8>
 8016e0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8016e88 <__kernel_rem_pio2+0x340>
 8016e10:	ec59 8b18 	vmov	r8, r9, d8
 8016e14:	2700      	movs	r7, #0
 8016e16:	e0f5      	b.n	8017004 <__kernel_rem_pio2+0x4bc>
 8016e18:	2302      	movs	r3, #2
 8016e1a:	9302      	str	r3, [sp, #8]
 8016e1c:	e760      	b.n	8016ce0 <__kernel_rem_pio2+0x198>
 8016e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8016e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e24:	b94d      	cbnz	r5, 8016e3a <__kernel_rem_pio2+0x2f2>
 8016e26:	b12b      	cbz	r3, 8016e34 <__kernel_rem_pio2+0x2ec>
 8016e28:	a80e      	add	r0, sp, #56	; 0x38
 8016e2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016e2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016e32:	2301      	movs	r3, #1
 8016e34:	3201      	adds	r2, #1
 8016e36:	461d      	mov	r5, r3
 8016e38:	e759      	b.n	8016cee <__kernel_rem_pio2+0x1a6>
 8016e3a:	a80e      	add	r0, sp, #56	; 0x38
 8016e3c:	1acb      	subs	r3, r1, r3
 8016e3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016e42:	462b      	mov	r3, r5
 8016e44:	e7f6      	b.n	8016e34 <__kernel_rem_pio2+0x2ec>
 8016e46:	1e62      	subs	r2, r4, #1
 8016e48:	ab0e      	add	r3, sp, #56	; 0x38
 8016e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016e52:	a90e      	add	r1, sp, #56	; 0x38
 8016e54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016e58:	e757      	b.n	8016d0a <__kernel_rem_pio2+0x1c2>
 8016e5a:	bf00      	nop
 8016e5c:	f3af 8000 	nop.w
	...
 8016e6c:	3ff00000 	.word	0x3ff00000
 8016e70:	080182d8 	.word	0x080182d8
 8016e74:	40200000 	.word	0x40200000
 8016e78:	3ff00000 	.word	0x3ff00000
 8016e7c:	3e700000 	.word	0x3e700000
 8016e80:	41700000 	.word	0x41700000
 8016e84:	3fe00000 	.word	0x3fe00000
 8016e88:	08018298 	.word	0x08018298
 8016e8c:	1e62      	subs	r2, r4, #1
 8016e8e:	ab0e      	add	r3, sp, #56	; 0x38
 8016e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016e98:	e7db      	b.n	8016e52 <__kernel_rem_pio2+0x30a>
 8016e9a:	a90e      	add	r1, sp, #56	; 0x38
 8016e9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	430a      	orrs	r2, r1
 8016ea4:	e78b      	b.n	8016dbe <__kernel_rem_pio2+0x276>
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016eac:	2900      	cmp	r1, #0
 8016eae:	d0fa      	beq.n	8016ea6 <__kernel_rem_pio2+0x35e>
 8016eb0:	9a08      	ldr	r2, [sp, #32]
 8016eb2:	4422      	add	r2, r4
 8016eb4:	00d2      	lsls	r2, r2, #3
 8016eb6:	a922      	add	r1, sp, #136	; 0x88
 8016eb8:	18e3      	adds	r3, r4, r3
 8016eba:	9206      	str	r2, [sp, #24]
 8016ebc:	440a      	add	r2, r1
 8016ebe:	9302      	str	r3, [sp, #8]
 8016ec0:	f10b 0108 	add.w	r1, fp, #8
 8016ec4:	f102 0308 	add.w	r3, r2, #8
 8016ec8:	1c66      	adds	r6, r4, #1
 8016eca:	910a      	str	r1, [sp, #40]	; 0x28
 8016ecc:	2500      	movs	r5, #0
 8016ece:	930d      	str	r3, [sp, #52]	; 0x34
 8016ed0:	9b02      	ldr	r3, [sp, #8]
 8016ed2:	42b3      	cmp	r3, r6
 8016ed4:	da04      	bge.n	8016ee0 <__kernel_rem_pio2+0x398>
 8016ed6:	461c      	mov	r4, r3
 8016ed8:	e6a6      	b.n	8016c28 <__kernel_rem_pio2+0xe0>
 8016eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016edc:	2301      	movs	r3, #1
 8016ede:	e7e3      	b.n	8016ea8 <__kernel_rem_pio2+0x360>
 8016ee0:	9b06      	ldr	r3, [sp, #24]
 8016ee2:	18ef      	adds	r7, r5, r3
 8016ee4:	ab22      	add	r3, sp, #136	; 0x88
 8016ee6:	441f      	add	r7, r3
 8016ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016eee:	f7e9 fb29 	bl	8000544 <__aeabi_i2d>
 8016ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ef4:	461c      	mov	r4, r3
 8016ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ef8:	e9c7 0100 	strd	r0, r1, [r7]
 8016efc:	eb03 0b05 	add.w	fp, r3, r5
 8016f00:	2700      	movs	r7, #0
 8016f02:	f04f 0800 	mov.w	r8, #0
 8016f06:	f04f 0900 	mov.w	r9, #0
 8016f0a:	9b07      	ldr	r3, [sp, #28]
 8016f0c:	429f      	cmp	r7, r3
 8016f0e:	dd08      	ble.n	8016f22 <__kernel_rem_pio2+0x3da>
 8016f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f12:	aa72      	add	r2, sp, #456	; 0x1c8
 8016f14:	18eb      	adds	r3, r5, r3
 8016f16:	4413      	add	r3, r2
 8016f18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8016f1c:	3601      	adds	r6, #1
 8016f1e:	3508      	adds	r5, #8
 8016f20:	e7d6      	b.n	8016ed0 <__kernel_rem_pio2+0x388>
 8016f22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016f26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016f2a:	f7e9 fb75 	bl	8000618 <__aeabi_dmul>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	460b      	mov	r3, r1
 8016f32:	4640      	mov	r0, r8
 8016f34:	4649      	mov	r1, r9
 8016f36:	f7e9 f9b9 	bl	80002ac <__adddf3>
 8016f3a:	3701      	adds	r7, #1
 8016f3c:	4680      	mov	r8, r0
 8016f3e:	4689      	mov	r9, r1
 8016f40:	e7e3      	b.n	8016f0a <__kernel_rem_pio2+0x3c2>
 8016f42:	3d01      	subs	r5, #1
 8016f44:	e741      	b.n	8016dca <__kernel_rem_pio2+0x282>
 8016f46:	f1ca 0000 	rsb	r0, sl, #0
 8016f4a:	ec47 6b10 	vmov	d0, r6, r7
 8016f4e:	f000 fc2b 	bl	80177a8 <scalbn>
 8016f52:	ec57 6b10 	vmov	r6, r7, d0
 8016f56:	2200      	movs	r2, #0
 8016f58:	4b99      	ldr	r3, [pc, #612]	; (80171c0 <__kernel_rem_pio2+0x678>)
 8016f5a:	ee10 0a10 	vmov	r0, s0
 8016f5e:	4639      	mov	r1, r7
 8016f60:	f7e9 fde0 	bl	8000b24 <__aeabi_dcmpge>
 8016f64:	b1f8      	cbz	r0, 8016fa6 <__kernel_rem_pio2+0x45e>
 8016f66:	2200      	movs	r2, #0
 8016f68:	4b96      	ldr	r3, [pc, #600]	; (80171c4 <__kernel_rem_pio2+0x67c>)
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	f7e9 fb53 	bl	8000618 <__aeabi_dmul>
 8016f72:	f7e9 fe01 	bl	8000b78 <__aeabi_d2iz>
 8016f76:	4680      	mov	r8, r0
 8016f78:	f7e9 fae4 	bl	8000544 <__aeabi_i2d>
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	4b90      	ldr	r3, [pc, #576]	; (80171c0 <__kernel_rem_pio2+0x678>)
 8016f80:	f7e9 fb4a 	bl	8000618 <__aeabi_dmul>
 8016f84:	460b      	mov	r3, r1
 8016f86:	4602      	mov	r2, r0
 8016f88:	4639      	mov	r1, r7
 8016f8a:	4630      	mov	r0, r6
 8016f8c:	f7e9 f98c 	bl	80002a8 <__aeabi_dsub>
 8016f90:	f7e9 fdf2 	bl	8000b78 <__aeabi_d2iz>
 8016f94:	1c65      	adds	r5, r4, #1
 8016f96:	ab0e      	add	r3, sp, #56	; 0x38
 8016f98:	f10a 0a18 	add.w	sl, sl, #24
 8016f9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016fa0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016fa4:	e719      	b.n	8016dda <__kernel_rem_pio2+0x292>
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	4639      	mov	r1, r7
 8016faa:	f7e9 fde5 	bl	8000b78 <__aeabi_d2iz>
 8016fae:	ab0e      	add	r3, sp, #56	; 0x38
 8016fb0:	4625      	mov	r5, r4
 8016fb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016fb6:	e710      	b.n	8016dda <__kernel_rem_pio2+0x292>
 8016fb8:	ab0e      	add	r3, sp, #56	; 0x38
 8016fba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8016fbe:	f7e9 fac1 	bl	8000544 <__aeabi_i2d>
 8016fc2:	4642      	mov	r2, r8
 8016fc4:	464b      	mov	r3, r9
 8016fc6:	f7e9 fb27 	bl	8000618 <__aeabi_dmul>
 8016fca:	2200      	movs	r2, #0
 8016fcc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016fd0:	4b7c      	ldr	r3, [pc, #496]	; (80171c4 <__kernel_rem_pio2+0x67c>)
 8016fd2:	4640      	mov	r0, r8
 8016fd4:	4649      	mov	r1, r9
 8016fd6:	f7e9 fb1f 	bl	8000618 <__aeabi_dmul>
 8016fda:	3f01      	subs	r7, #1
 8016fdc:	4680      	mov	r8, r0
 8016fde:	4689      	mov	r9, r1
 8016fe0:	e708      	b.n	8016df4 <__kernel_rem_pio2+0x2ac>
 8016fe2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8016fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8016fee:	f7e9 fb13 	bl	8000618 <__aeabi_dmul>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	4640      	mov	r0, r8
 8016ff8:	4649      	mov	r1, r9
 8016ffa:	f7e9 f957 	bl	80002ac <__adddf3>
 8016ffe:	3701      	adds	r7, #1
 8017000:	4680      	mov	r8, r0
 8017002:	4689      	mov	r9, r1
 8017004:	9b04      	ldr	r3, [sp, #16]
 8017006:	429f      	cmp	r7, r3
 8017008:	dc01      	bgt.n	801700e <__kernel_rem_pio2+0x4c6>
 801700a:	45ba      	cmp	sl, r7
 801700c:	dae9      	bge.n	8016fe2 <__kernel_rem_pio2+0x49a>
 801700e:	ab4a      	add	r3, sp, #296	; 0x128
 8017010:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017014:	e9c3 8900 	strd	r8, r9, [r3]
 8017018:	f10a 0a01 	add.w	sl, sl, #1
 801701c:	3e08      	subs	r6, #8
 801701e:	e6f0      	b.n	8016e02 <__kernel_rem_pio2+0x2ba>
 8017020:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017022:	2b03      	cmp	r3, #3
 8017024:	d85b      	bhi.n	80170de <__kernel_rem_pio2+0x596>
 8017026:	e8df f003 	tbb	[pc, r3]
 801702a:	264a      	.short	0x264a
 801702c:	0226      	.short	0x0226
 801702e:	ab9a      	add	r3, sp, #616	; 0x268
 8017030:	441c      	add	r4, r3
 8017032:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017036:	46a2      	mov	sl, r4
 8017038:	46ab      	mov	fp, r5
 801703a:	f1bb 0f00 	cmp.w	fp, #0
 801703e:	dc6c      	bgt.n	801711a <__kernel_rem_pio2+0x5d2>
 8017040:	46a2      	mov	sl, r4
 8017042:	46ab      	mov	fp, r5
 8017044:	f1bb 0f01 	cmp.w	fp, #1
 8017048:	f300 8086 	bgt.w	8017158 <__kernel_rem_pio2+0x610>
 801704c:	2000      	movs	r0, #0
 801704e:	2100      	movs	r1, #0
 8017050:	2d01      	cmp	r5, #1
 8017052:	f300 80a0 	bgt.w	8017196 <__kernel_rem_pio2+0x64e>
 8017056:	9b02      	ldr	r3, [sp, #8]
 8017058:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801705c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017060:	2b00      	cmp	r3, #0
 8017062:	f040 809e 	bne.w	80171a2 <__kernel_rem_pio2+0x65a>
 8017066:	9b01      	ldr	r3, [sp, #4]
 8017068:	e9c3 7800 	strd	r7, r8, [r3]
 801706c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017070:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017074:	e033      	b.n	80170de <__kernel_rem_pio2+0x596>
 8017076:	3408      	adds	r4, #8
 8017078:	ab4a      	add	r3, sp, #296	; 0x128
 801707a:	441c      	add	r4, r3
 801707c:	462e      	mov	r6, r5
 801707e:	2000      	movs	r0, #0
 8017080:	2100      	movs	r1, #0
 8017082:	2e00      	cmp	r6, #0
 8017084:	da3a      	bge.n	80170fc <__kernel_rem_pio2+0x5b4>
 8017086:	9b02      	ldr	r3, [sp, #8]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d03d      	beq.n	8017108 <__kernel_rem_pio2+0x5c0>
 801708c:	4602      	mov	r2, r0
 801708e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017092:	9c01      	ldr	r4, [sp, #4]
 8017094:	e9c4 2300 	strd	r2, r3, [r4]
 8017098:	4602      	mov	r2, r0
 801709a:	460b      	mov	r3, r1
 801709c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80170a0:	f7e9 f902 	bl	80002a8 <__aeabi_dsub>
 80170a4:	ae4c      	add	r6, sp, #304	; 0x130
 80170a6:	2401      	movs	r4, #1
 80170a8:	42a5      	cmp	r5, r4
 80170aa:	da30      	bge.n	801710e <__kernel_rem_pio2+0x5c6>
 80170ac:	9b02      	ldr	r3, [sp, #8]
 80170ae:	b113      	cbz	r3, 80170b6 <__kernel_rem_pio2+0x56e>
 80170b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170b4:	4619      	mov	r1, r3
 80170b6:	9b01      	ldr	r3, [sp, #4]
 80170b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80170bc:	e00f      	b.n	80170de <__kernel_rem_pio2+0x596>
 80170be:	ab9a      	add	r3, sp, #616	; 0x268
 80170c0:	441c      	add	r4, r3
 80170c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80170c6:	2000      	movs	r0, #0
 80170c8:	2100      	movs	r1, #0
 80170ca:	2d00      	cmp	r5, #0
 80170cc:	da10      	bge.n	80170f0 <__kernel_rem_pio2+0x5a8>
 80170ce:	9b02      	ldr	r3, [sp, #8]
 80170d0:	b113      	cbz	r3, 80170d8 <__kernel_rem_pio2+0x590>
 80170d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170d6:	4619      	mov	r1, r3
 80170d8:	9b01      	ldr	r3, [sp, #4]
 80170da:	e9c3 0100 	strd	r0, r1, [r3]
 80170de:	9b06      	ldr	r3, [sp, #24]
 80170e0:	f003 0007 	and.w	r0, r3, #7
 80170e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80170e8:	ecbd 8b02 	vpop	{d8}
 80170ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80170f4:	f7e9 f8da 	bl	80002ac <__adddf3>
 80170f8:	3d01      	subs	r5, #1
 80170fa:	e7e6      	b.n	80170ca <__kernel_rem_pio2+0x582>
 80170fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017100:	f7e9 f8d4 	bl	80002ac <__adddf3>
 8017104:	3e01      	subs	r6, #1
 8017106:	e7bc      	b.n	8017082 <__kernel_rem_pio2+0x53a>
 8017108:	4602      	mov	r2, r0
 801710a:	460b      	mov	r3, r1
 801710c:	e7c1      	b.n	8017092 <__kernel_rem_pio2+0x54a>
 801710e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8017112:	f7e9 f8cb 	bl	80002ac <__adddf3>
 8017116:	3401      	adds	r4, #1
 8017118:	e7c6      	b.n	80170a8 <__kernel_rem_pio2+0x560>
 801711a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801711e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017122:	4640      	mov	r0, r8
 8017124:	ec53 2b17 	vmov	r2, r3, d7
 8017128:	4649      	mov	r1, r9
 801712a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801712e:	f7e9 f8bd 	bl	80002ac <__adddf3>
 8017132:	4602      	mov	r2, r0
 8017134:	460b      	mov	r3, r1
 8017136:	4606      	mov	r6, r0
 8017138:	460f      	mov	r7, r1
 801713a:	4640      	mov	r0, r8
 801713c:	4649      	mov	r1, r9
 801713e:	f7e9 f8b3 	bl	80002a8 <__aeabi_dsub>
 8017142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017146:	f7e9 f8b1 	bl	80002ac <__adddf3>
 801714a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801714e:	e9ca 0100 	strd	r0, r1, [sl]
 8017152:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8017156:	e770      	b.n	801703a <__kernel_rem_pio2+0x4f2>
 8017158:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801715c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017160:	4630      	mov	r0, r6
 8017162:	ec53 2b17 	vmov	r2, r3, d7
 8017166:	4639      	mov	r1, r7
 8017168:	ed8d 7b04 	vstr	d7, [sp, #16]
 801716c:	f7e9 f89e 	bl	80002ac <__adddf3>
 8017170:	4602      	mov	r2, r0
 8017172:	460b      	mov	r3, r1
 8017174:	4680      	mov	r8, r0
 8017176:	4689      	mov	r9, r1
 8017178:	4630      	mov	r0, r6
 801717a:	4639      	mov	r1, r7
 801717c:	f7e9 f894 	bl	80002a8 <__aeabi_dsub>
 8017180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017184:	f7e9 f892 	bl	80002ac <__adddf3>
 8017188:	f10b 3bff 	add.w	fp, fp, #4294967295
 801718c:	e9ca 0100 	strd	r0, r1, [sl]
 8017190:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8017194:	e756      	b.n	8017044 <__kernel_rem_pio2+0x4fc>
 8017196:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801719a:	f7e9 f887 	bl	80002ac <__adddf3>
 801719e:	3d01      	subs	r5, #1
 80171a0:	e756      	b.n	8017050 <__kernel_rem_pio2+0x508>
 80171a2:	9b01      	ldr	r3, [sp, #4]
 80171a4:	9a01      	ldr	r2, [sp, #4]
 80171a6:	601f      	str	r7, [r3, #0]
 80171a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80171ac:	605c      	str	r4, [r3, #4]
 80171ae:	609d      	str	r5, [r3, #8]
 80171b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80171b4:	60d3      	str	r3, [r2, #12]
 80171b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171ba:	6110      	str	r0, [r2, #16]
 80171bc:	6153      	str	r3, [r2, #20]
 80171be:	e78e      	b.n	80170de <__kernel_rem_pio2+0x596>
 80171c0:	41700000 	.word	0x41700000
 80171c4:	3e700000 	.word	0x3e700000

080171c8 <__kernel_sin>:
 80171c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171cc:	ec55 4b10 	vmov	r4, r5, d0
 80171d0:	b085      	sub	sp, #20
 80171d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80171d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80171da:	ed8d 1b00 	vstr	d1, [sp]
 80171de:	9002      	str	r0, [sp, #8]
 80171e0:	da06      	bge.n	80171f0 <__kernel_sin+0x28>
 80171e2:	ee10 0a10 	vmov	r0, s0
 80171e6:	4629      	mov	r1, r5
 80171e8:	f7e9 fcc6 	bl	8000b78 <__aeabi_d2iz>
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d051      	beq.n	8017294 <__kernel_sin+0xcc>
 80171f0:	4622      	mov	r2, r4
 80171f2:	462b      	mov	r3, r5
 80171f4:	4620      	mov	r0, r4
 80171f6:	4629      	mov	r1, r5
 80171f8:	f7e9 fa0e 	bl	8000618 <__aeabi_dmul>
 80171fc:	4682      	mov	sl, r0
 80171fe:	468b      	mov	fp, r1
 8017200:	4602      	mov	r2, r0
 8017202:	460b      	mov	r3, r1
 8017204:	4620      	mov	r0, r4
 8017206:	4629      	mov	r1, r5
 8017208:	f7e9 fa06 	bl	8000618 <__aeabi_dmul>
 801720c:	a341      	add	r3, pc, #260	; (adr r3, 8017314 <__kernel_sin+0x14c>)
 801720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017212:	4680      	mov	r8, r0
 8017214:	4689      	mov	r9, r1
 8017216:	4650      	mov	r0, sl
 8017218:	4659      	mov	r1, fp
 801721a:	f7e9 f9fd 	bl	8000618 <__aeabi_dmul>
 801721e:	a33f      	add	r3, pc, #252	; (adr r3, 801731c <__kernel_sin+0x154>)
 8017220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017224:	f7e9 f840 	bl	80002a8 <__aeabi_dsub>
 8017228:	4652      	mov	r2, sl
 801722a:	465b      	mov	r3, fp
 801722c:	f7e9 f9f4 	bl	8000618 <__aeabi_dmul>
 8017230:	a33c      	add	r3, pc, #240	; (adr r3, 8017324 <__kernel_sin+0x15c>)
 8017232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017236:	f7e9 f839 	bl	80002ac <__adddf3>
 801723a:	4652      	mov	r2, sl
 801723c:	465b      	mov	r3, fp
 801723e:	f7e9 f9eb 	bl	8000618 <__aeabi_dmul>
 8017242:	a33a      	add	r3, pc, #232	; (adr r3, 801732c <__kernel_sin+0x164>)
 8017244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017248:	f7e9 f82e 	bl	80002a8 <__aeabi_dsub>
 801724c:	4652      	mov	r2, sl
 801724e:	465b      	mov	r3, fp
 8017250:	f7e9 f9e2 	bl	8000618 <__aeabi_dmul>
 8017254:	a337      	add	r3, pc, #220	; (adr r3, 8017334 <__kernel_sin+0x16c>)
 8017256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801725a:	f7e9 f827 	bl	80002ac <__adddf3>
 801725e:	9b02      	ldr	r3, [sp, #8]
 8017260:	4606      	mov	r6, r0
 8017262:	460f      	mov	r7, r1
 8017264:	b9db      	cbnz	r3, 801729e <__kernel_sin+0xd6>
 8017266:	4602      	mov	r2, r0
 8017268:	460b      	mov	r3, r1
 801726a:	4650      	mov	r0, sl
 801726c:	4659      	mov	r1, fp
 801726e:	f7e9 f9d3 	bl	8000618 <__aeabi_dmul>
 8017272:	a325      	add	r3, pc, #148	; (adr r3, 8017308 <__kernel_sin+0x140>)
 8017274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017278:	f7e9 f816 	bl	80002a8 <__aeabi_dsub>
 801727c:	4642      	mov	r2, r8
 801727e:	464b      	mov	r3, r9
 8017280:	f7e9 f9ca 	bl	8000618 <__aeabi_dmul>
 8017284:	4602      	mov	r2, r0
 8017286:	460b      	mov	r3, r1
 8017288:	4620      	mov	r0, r4
 801728a:	4629      	mov	r1, r5
 801728c:	f7e9 f80e 	bl	80002ac <__adddf3>
 8017290:	4604      	mov	r4, r0
 8017292:	460d      	mov	r5, r1
 8017294:	ec45 4b10 	vmov	d0, r4, r5
 8017298:	b005      	add	sp, #20
 801729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729e:	2200      	movs	r2, #0
 80172a0:	4b1b      	ldr	r3, [pc, #108]	; (8017310 <__kernel_sin+0x148>)
 80172a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172a6:	f7e9 f9b7 	bl	8000618 <__aeabi_dmul>
 80172aa:	4632      	mov	r2, r6
 80172ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80172b0:	463b      	mov	r3, r7
 80172b2:	4640      	mov	r0, r8
 80172b4:	4649      	mov	r1, r9
 80172b6:	f7e9 f9af 	bl	8000618 <__aeabi_dmul>
 80172ba:	4602      	mov	r2, r0
 80172bc:	460b      	mov	r3, r1
 80172be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172c2:	f7e8 fff1 	bl	80002a8 <__aeabi_dsub>
 80172c6:	4652      	mov	r2, sl
 80172c8:	465b      	mov	r3, fp
 80172ca:	f7e9 f9a5 	bl	8000618 <__aeabi_dmul>
 80172ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172d2:	f7e8 ffe9 	bl	80002a8 <__aeabi_dsub>
 80172d6:	a30c      	add	r3, pc, #48	; (adr r3, 8017308 <__kernel_sin+0x140>)
 80172d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172dc:	4606      	mov	r6, r0
 80172de:	460f      	mov	r7, r1
 80172e0:	4640      	mov	r0, r8
 80172e2:	4649      	mov	r1, r9
 80172e4:	f7e9 f998 	bl	8000618 <__aeabi_dmul>
 80172e8:	4602      	mov	r2, r0
 80172ea:	460b      	mov	r3, r1
 80172ec:	4630      	mov	r0, r6
 80172ee:	4639      	mov	r1, r7
 80172f0:	f7e8 ffdc 	bl	80002ac <__adddf3>
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4620      	mov	r0, r4
 80172fa:	4629      	mov	r1, r5
 80172fc:	f7e8 ffd4 	bl	80002a8 <__aeabi_dsub>
 8017300:	e7c6      	b.n	8017290 <__kernel_sin+0xc8>
 8017302:	bf00      	nop
 8017304:	f3af 8000 	nop.w
 8017308:	55555549 	.word	0x55555549
 801730c:	3fc55555 	.word	0x3fc55555
 8017310:	3fe00000 	.word	0x3fe00000
 8017314:	5acfd57c 	.word	0x5acfd57c
 8017318:	3de5d93a 	.word	0x3de5d93a
 801731c:	8a2b9ceb 	.word	0x8a2b9ceb
 8017320:	3e5ae5e6 	.word	0x3e5ae5e6
 8017324:	57b1fe7d 	.word	0x57b1fe7d
 8017328:	3ec71de3 	.word	0x3ec71de3
 801732c:	19c161d5 	.word	0x19c161d5
 8017330:	3f2a01a0 	.word	0x3f2a01a0
 8017334:	1110f8a6 	.word	0x1110f8a6
 8017338:	3f811111 	.word	0x3f811111
 801733c:	00000000 	.word	0x00000000

08017340 <atan>:
 8017340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017344:	ec55 4b10 	vmov	r4, r5, d0
 8017348:	4bc3      	ldr	r3, [pc, #780]	; (8017658 <atan+0x318>)
 801734a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801734e:	429e      	cmp	r6, r3
 8017350:	46ab      	mov	fp, r5
 8017352:	dd18      	ble.n	8017386 <atan+0x46>
 8017354:	4bc1      	ldr	r3, [pc, #772]	; (801765c <atan+0x31c>)
 8017356:	429e      	cmp	r6, r3
 8017358:	dc01      	bgt.n	801735e <atan+0x1e>
 801735a:	d109      	bne.n	8017370 <atan+0x30>
 801735c:	b144      	cbz	r4, 8017370 <atan+0x30>
 801735e:	4622      	mov	r2, r4
 8017360:	462b      	mov	r3, r5
 8017362:	4620      	mov	r0, r4
 8017364:	4629      	mov	r1, r5
 8017366:	f7e8 ffa1 	bl	80002ac <__adddf3>
 801736a:	4604      	mov	r4, r0
 801736c:	460d      	mov	r5, r1
 801736e:	e006      	b.n	801737e <atan+0x3e>
 8017370:	f1bb 0f00 	cmp.w	fp, #0
 8017374:	f340 8131 	ble.w	80175da <atan+0x29a>
 8017378:	a59b      	add	r5, pc, #620	; (adr r5, 80175e8 <atan+0x2a8>)
 801737a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801737e:	ec45 4b10 	vmov	d0, r4, r5
 8017382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017386:	4bb6      	ldr	r3, [pc, #728]	; (8017660 <atan+0x320>)
 8017388:	429e      	cmp	r6, r3
 801738a:	dc14      	bgt.n	80173b6 <atan+0x76>
 801738c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017390:	429e      	cmp	r6, r3
 8017392:	dc0d      	bgt.n	80173b0 <atan+0x70>
 8017394:	a396      	add	r3, pc, #600	; (adr r3, 80175f0 <atan+0x2b0>)
 8017396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801739a:	ee10 0a10 	vmov	r0, s0
 801739e:	4629      	mov	r1, r5
 80173a0:	f7e8 ff84 	bl	80002ac <__adddf3>
 80173a4:	2200      	movs	r2, #0
 80173a6:	4baf      	ldr	r3, [pc, #700]	; (8017664 <atan+0x324>)
 80173a8:	f7e9 fbc6 	bl	8000b38 <__aeabi_dcmpgt>
 80173ac:	2800      	cmp	r0, #0
 80173ae:	d1e6      	bne.n	801737e <atan+0x3e>
 80173b0:	f04f 3aff 	mov.w	sl, #4294967295
 80173b4:	e02b      	b.n	801740e <atan+0xce>
 80173b6:	f000 f963 	bl	8017680 <fabs>
 80173ba:	4bab      	ldr	r3, [pc, #684]	; (8017668 <atan+0x328>)
 80173bc:	429e      	cmp	r6, r3
 80173be:	ec55 4b10 	vmov	r4, r5, d0
 80173c2:	f300 80bf 	bgt.w	8017544 <atan+0x204>
 80173c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80173ca:	429e      	cmp	r6, r3
 80173cc:	f300 80a0 	bgt.w	8017510 <atan+0x1d0>
 80173d0:	ee10 2a10 	vmov	r2, s0
 80173d4:	ee10 0a10 	vmov	r0, s0
 80173d8:	462b      	mov	r3, r5
 80173da:	4629      	mov	r1, r5
 80173dc:	f7e8 ff66 	bl	80002ac <__adddf3>
 80173e0:	2200      	movs	r2, #0
 80173e2:	4ba0      	ldr	r3, [pc, #640]	; (8017664 <atan+0x324>)
 80173e4:	f7e8 ff60 	bl	80002a8 <__aeabi_dsub>
 80173e8:	2200      	movs	r2, #0
 80173ea:	4606      	mov	r6, r0
 80173ec:	460f      	mov	r7, r1
 80173ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173f2:	4620      	mov	r0, r4
 80173f4:	4629      	mov	r1, r5
 80173f6:	f7e8 ff59 	bl	80002ac <__adddf3>
 80173fa:	4602      	mov	r2, r0
 80173fc:	460b      	mov	r3, r1
 80173fe:	4630      	mov	r0, r6
 8017400:	4639      	mov	r1, r7
 8017402:	f7e9 fa33 	bl	800086c <__aeabi_ddiv>
 8017406:	f04f 0a00 	mov.w	sl, #0
 801740a:	4604      	mov	r4, r0
 801740c:	460d      	mov	r5, r1
 801740e:	4622      	mov	r2, r4
 8017410:	462b      	mov	r3, r5
 8017412:	4620      	mov	r0, r4
 8017414:	4629      	mov	r1, r5
 8017416:	f7e9 f8ff 	bl	8000618 <__aeabi_dmul>
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	4680      	mov	r8, r0
 8017420:	4689      	mov	r9, r1
 8017422:	f7e9 f8f9 	bl	8000618 <__aeabi_dmul>
 8017426:	a374      	add	r3, pc, #464	; (adr r3, 80175f8 <atan+0x2b8>)
 8017428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742c:	4606      	mov	r6, r0
 801742e:	460f      	mov	r7, r1
 8017430:	f7e9 f8f2 	bl	8000618 <__aeabi_dmul>
 8017434:	a372      	add	r3, pc, #456	; (adr r3, 8017600 <atan+0x2c0>)
 8017436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801743a:	f7e8 ff37 	bl	80002ac <__adddf3>
 801743e:	4632      	mov	r2, r6
 8017440:	463b      	mov	r3, r7
 8017442:	f7e9 f8e9 	bl	8000618 <__aeabi_dmul>
 8017446:	a370      	add	r3, pc, #448	; (adr r3, 8017608 <atan+0x2c8>)
 8017448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744c:	f7e8 ff2e 	bl	80002ac <__adddf3>
 8017450:	4632      	mov	r2, r6
 8017452:	463b      	mov	r3, r7
 8017454:	f7e9 f8e0 	bl	8000618 <__aeabi_dmul>
 8017458:	a36d      	add	r3, pc, #436	; (adr r3, 8017610 <atan+0x2d0>)
 801745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745e:	f7e8 ff25 	bl	80002ac <__adddf3>
 8017462:	4632      	mov	r2, r6
 8017464:	463b      	mov	r3, r7
 8017466:	f7e9 f8d7 	bl	8000618 <__aeabi_dmul>
 801746a:	a36b      	add	r3, pc, #428	; (adr r3, 8017618 <atan+0x2d8>)
 801746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017470:	f7e8 ff1c 	bl	80002ac <__adddf3>
 8017474:	4632      	mov	r2, r6
 8017476:	463b      	mov	r3, r7
 8017478:	f7e9 f8ce 	bl	8000618 <__aeabi_dmul>
 801747c:	a368      	add	r3, pc, #416	; (adr r3, 8017620 <atan+0x2e0>)
 801747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017482:	f7e8 ff13 	bl	80002ac <__adddf3>
 8017486:	4642      	mov	r2, r8
 8017488:	464b      	mov	r3, r9
 801748a:	f7e9 f8c5 	bl	8000618 <__aeabi_dmul>
 801748e:	a366      	add	r3, pc, #408	; (adr r3, 8017628 <atan+0x2e8>)
 8017490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017494:	4680      	mov	r8, r0
 8017496:	4689      	mov	r9, r1
 8017498:	4630      	mov	r0, r6
 801749a:	4639      	mov	r1, r7
 801749c:	f7e9 f8bc 	bl	8000618 <__aeabi_dmul>
 80174a0:	a363      	add	r3, pc, #396	; (adr r3, 8017630 <atan+0x2f0>)
 80174a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a6:	f7e8 feff 	bl	80002a8 <__aeabi_dsub>
 80174aa:	4632      	mov	r2, r6
 80174ac:	463b      	mov	r3, r7
 80174ae:	f7e9 f8b3 	bl	8000618 <__aeabi_dmul>
 80174b2:	a361      	add	r3, pc, #388	; (adr r3, 8017638 <atan+0x2f8>)
 80174b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174b8:	f7e8 fef6 	bl	80002a8 <__aeabi_dsub>
 80174bc:	4632      	mov	r2, r6
 80174be:	463b      	mov	r3, r7
 80174c0:	f7e9 f8aa 	bl	8000618 <__aeabi_dmul>
 80174c4:	a35e      	add	r3, pc, #376	; (adr r3, 8017640 <atan+0x300>)
 80174c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ca:	f7e8 feed 	bl	80002a8 <__aeabi_dsub>
 80174ce:	4632      	mov	r2, r6
 80174d0:	463b      	mov	r3, r7
 80174d2:	f7e9 f8a1 	bl	8000618 <__aeabi_dmul>
 80174d6:	a35c      	add	r3, pc, #368	; (adr r3, 8017648 <atan+0x308>)
 80174d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174dc:	f7e8 fee4 	bl	80002a8 <__aeabi_dsub>
 80174e0:	4632      	mov	r2, r6
 80174e2:	463b      	mov	r3, r7
 80174e4:	f7e9 f898 	bl	8000618 <__aeabi_dmul>
 80174e8:	4602      	mov	r2, r0
 80174ea:	460b      	mov	r3, r1
 80174ec:	4640      	mov	r0, r8
 80174ee:	4649      	mov	r1, r9
 80174f0:	f7e8 fedc 	bl	80002ac <__adddf3>
 80174f4:	4622      	mov	r2, r4
 80174f6:	462b      	mov	r3, r5
 80174f8:	f7e9 f88e 	bl	8000618 <__aeabi_dmul>
 80174fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017500:	4602      	mov	r2, r0
 8017502:	460b      	mov	r3, r1
 8017504:	d14b      	bne.n	801759e <atan+0x25e>
 8017506:	4620      	mov	r0, r4
 8017508:	4629      	mov	r1, r5
 801750a:	f7e8 fecd 	bl	80002a8 <__aeabi_dsub>
 801750e:	e72c      	b.n	801736a <atan+0x2a>
 8017510:	ee10 0a10 	vmov	r0, s0
 8017514:	2200      	movs	r2, #0
 8017516:	4b53      	ldr	r3, [pc, #332]	; (8017664 <atan+0x324>)
 8017518:	4629      	mov	r1, r5
 801751a:	f7e8 fec5 	bl	80002a8 <__aeabi_dsub>
 801751e:	2200      	movs	r2, #0
 8017520:	4606      	mov	r6, r0
 8017522:	460f      	mov	r7, r1
 8017524:	4b4f      	ldr	r3, [pc, #316]	; (8017664 <atan+0x324>)
 8017526:	4620      	mov	r0, r4
 8017528:	4629      	mov	r1, r5
 801752a:	f7e8 febf 	bl	80002ac <__adddf3>
 801752e:	4602      	mov	r2, r0
 8017530:	460b      	mov	r3, r1
 8017532:	4630      	mov	r0, r6
 8017534:	4639      	mov	r1, r7
 8017536:	f7e9 f999 	bl	800086c <__aeabi_ddiv>
 801753a:	f04f 0a01 	mov.w	sl, #1
 801753e:	4604      	mov	r4, r0
 8017540:	460d      	mov	r5, r1
 8017542:	e764      	b.n	801740e <atan+0xce>
 8017544:	4b49      	ldr	r3, [pc, #292]	; (801766c <atan+0x32c>)
 8017546:	429e      	cmp	r6, r3
 8017548:	dc1d      	bgt.n	8017586 <atan+0x246>
 801754a:	ee10 0a10 	vmov	r0, s0
 801754e:	2200      	movs	r2, #0
 8017550:	4b47      	ldr	r3, [pc, #284]	; (8017670 <atan+0x330>)
 8017552:	4629      	mov	r1, r5
 8017554:	f7e8 fea8 	bl	80002a8 <__aeabi_dsub>
 8017558:	2200      	movs	r2, #0
 801755a:	4606      	mov	r6, r0
 801755c:	460f      	mov	r7, r1
 801755e:	4b44      	ldr	r3, [pc, #272]	; (8017670 <atan+0x330>)
 8017560:	4620      	mov	r0, r4
 8017562:	4629      	mov	r1, r5
 8017564:	f7e9 f858 	bl	8000618 <__aeabi_dmul>
 8017568:	2200      	movs	r2, #0
 801756a:	4b3e      	ldr	r3, [pc, #248]	; (8017664 <atan+0x324>)
 801756c:	f7e8 fe9e 	bl	80002ac <__adddf3>
 8017570:	4602      	mov	r2, r0
 8017572:	460b      	mov	r3, r1
 8017574:	4630      	mov	r0, r6
 8017576:	4639      	mov	r1, r7
 8017578:	f7e9 f978 	bl	800086c <__aeabi_ddiv>
 801757c:	f04f 0a02 	mov.w	sl, #2
 8017580:	4604      	mov	r4, r0
 8017582:	460d      	mov	r5, r1
 8017584:	e743      	b.n	801740e <atan+0xce>
 8017586:	462b      	mov	r3, r5
 8017588:	ee10 2a10 	vmov	r2, s0
 801758c:	2000      	movs	r0, #0
 801758e:	4939      	ldr	r1, [pc, #228]	; (8017674 <atan+0x334>)
 8017590:	f7e9 f96c 	bl	800086c <__aeabi_ddiv>
 8017594:	f04f 0a03 	mov.w	sl, #3
 8017598:	4604      	mov	r4, r0
 801759a:	460d      	mov	r5, r1
 801759c:	e737      	b.n	801740e <atan+0xce>
 801759e:	4b36      	ldr	r3, [pc, #216]	; (8017678 <atan+0x338>)
 80175a0:	4e36      	ldr	r6, [pc, #216]	; (801767c <atan+0x33c>)
 80175a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80175a6:	4456      	add	r6, sl
 80175a8:	449a      	add	sl, r3
 80175aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80175ae:	f7e8 fe7b 	bl	80002a8 <__aeabi_dsub>
 80175b2:	4622      	mov	r2, r4
 80175b4:	462b      	mov	r3, r5
 80175b6:	f7e8 fe77 	bl	80002a8 <__aeabi_dsub>
 80175ba:	4602      	mov	r2, r0
 80175bc:	460b      	mov	r3, r1
 80175be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80175c2:	f7e8 fe71 	bl	80002a8 <__aeabi_dsub>
 80175c6:	f1bb 0f00 	cmp.w	fp, #0
 80175ca:	4604      	mov	r4, r0
 80175cc:	460d      	mov	r5, r1
 80175ce:	f6bf aed6 	bge.w	801737e <atan+0x3e>
 80175d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175d6:	461d      	mov	r5, r3
 80175d8:	e6d1      	b.n	801737e <atan+0x3e>
 80175da:	a51d      	add	r5, pc, #116	; (adr r5, 8017650 <atan+0x310>)
 80175dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80175e0:	e6cd      	b.n	801737e <atan+0x3e>
 80175e2:	bf00      	nop
 80175e4:	f3af 8000 	nop.w
 80175e8:	54442d18 	.word	0x54442d18
 80175ec:	3ff921fb 	.word	0x3ff921fb
 80175f0:	8800759c 	.word	0x8800759c
 80175f4:	7e37e43c 	.word	0x7e37e43c
 80175f8:	e322da11 	.word	0xe322da11
 80175fc:	3f90ad3a 	.word	0x3f90ad3a
 8017600:	24760deb 	.word	0x24760deb
 8017604:	3fa97b4b 	.word	0x3fa97b4b
 8017608:	a0d03d51 	.word	0xa0d03d51
 801760c:	3fb10d66 	.word	0x3fb10d66
 8017610:	c54c206e 	.word	0xc54c206e
 8017614:	3fb745cd 	.word	0x3fb745cd
 8017618:	920083ff 	.word	0x920083ff
 801761c:	3fc24924 	.word	0x3fc24924
 8017620:	5555550d 	.word	0x5555550d
 8017624:	3fd55555 	.word	0x3fd55555
 8017628:	2c6a6c2f 	.word	0x2c6a6c2f
 801762c:	bfa2b444 	.word	0xbfa2b444
 8017630:	52defd9a 	.word	0x52defd9a
 8017634:	3fadde2d 	.word	0x3fadde2d
 8017638:	af749a6d 	.word	0xaf749a6d
 801763c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017640:	fe231671 	.word	0xfe231671
 8017644:	3fbc71c6 	.word	0x3fbc71c6
 8017648:	9998ebc4 	.word	0x9998ebc4
 801764c:	3fc99999 	.word	0x3fc99999
 8017650:	54442d18 	.word	0x54442d18
 8017654:	bff921fb 	.word	0xbff921fb
 8017658:	440fffff 	.word	0x440fffff
 801765c:	7ff00000 	.word	0x7ff00000
 8017660:	3fdbffff 	.word	0x3fdbffff
 8017664:	3ff00000 	.word	0x3ff00000
 8017668:	3ff2ffff 	.word	0x3ff2ffff
 801766c:	40037fff 	.word	0x40037fff
 8017670:	3ff80000 	.word	0x3ff80000
 8017674:	bff00000 	.word	0xbff00000
 8017678:	08018308 	.word	0x08018308
 801767c:	080182e8 	.word	0x080182e8

08017680 <fabs>:
 8017680:	ec51 0b10 	vmov	r0, r1, d0
 8017684:	ee10 2a10 	vmov	r2, s0
 8017688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801768c:	ec43 2b10 	vmov	d0, r2, r3
 8017690:	4770      	bx	lr
 8017692:	0000      	movs	r0, r0
 8017694:	0000      	movs	r0, r0
	...

08017698 <floor>:
 8017698:	ec51 0b10 	vmov	r0, r1, d0
 801769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80176a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80176a8:	2e13      	cmp	r6, #19
 80176aa:	460c      	mov	r4, r1
 80176ac:	ee10 5a10 	vmov	r5, s0
 80176b0:	4680      	mov	r8, r0
 80176b2:	dc34      	bgt.n	801771e <floor+0x86>
 80176b4:	2e00      	cmp	r6, #0
 80176b6:	da16      	bge.n	80176e6 <floor+0x4e>
 80176b8:	a335      	add	r3, pc, #212	; (adr r3, 8017790 <floor+0xf8>)
 80176ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176be:	f7e8 fdf5 	bl	80002ac <__adddf3>
 80176c2:	2200      	movs	r2, #0
 80176c4:	2300      	movs	r3, #0
 80176c6:	f7e9 fa37 	bl	8000b38 <__aeabi_dcmpgt>
 80176ca:	b148      	cbz	r0, 80176e0 <floor+0x48>
 80176cc:	2c00      	cmp	r4, #0
 80176ce:	da59      	bge.n	8017784 <floor+0xec>
 80176d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80176d4:	4a30      	ldr	r2, [pc, #192]	; (8017798 <floor+0x100>)
 80176d6:	432b      	orrs	r3, r5
 80176d8:	2500      	movs	r5, #0
 80176da:	42ab      	cmp	r3, r5
 80176dc:	bf18      	it	ne
 80176de:	4614      	movne	r4, r2
 80176e0:	4621      	mov	r1, r4
 80176e2:	4628      	mov	r0, r5
 80176e4:	e025      	b.n	8017732 <floor+0x9a>
 80176e6:	4f2d      	ldr	r7, [pc, #180]	; (801779c <floor+0x104>)
 80176e8:	4137      	asrs	r7, r6
 80176ea:	ea01 0307 	and.w	r3, r1, r7
 80176ee:	4303      	orrs	r3, r0
 80176f0:	d01f      	beq.n	8017732 <floor+0x9a>
 80176f2:	a327      	add	r3, pc, #156	; (adr r3, 8017790 <floor+0xf8>)
 80176f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f8:	f7e8 fdd8 	bl	80002ac <__adddf3>
 80176fc:	2200      	movs	r2, #0
 80176fe:	2300      	movs	r3, #0
 8017700:	f7e9 fa1a 	bl	8000b38 <__aeabi_dcmpgt>
 8017704:	2800      	cmp	r0, #0
 8017706:	d0eb      	beq.n	80176e0 <floor+0x48>
 8017708:	2c00      	cmp	r4, #0
 801770a:	bfbe      	ittt	lt
 801770c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017710:	fa43 f606 	asrlt.w	r6, r3, r6
 8017714:	19a4      	addlt	r4, r4, r6
 8017716:	ea24 0407 	bic.w	r4, r4, r7
 801771a:	2500      	movs	r5, #0
 801771c:	e7e0      	b.n	80176e0 <floor+0x48>
 801771e:	2e33      	cmp	r6, #51	; 0x33
 8017720:	dd0b      	ble.n	801773a <floor+0xa2>
 8017722:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017726:	d104      	bne.n	8017732 <floor+0x9a>
 8017728:	ee10 2a10 	vmov	r2, s0
 801772c:	460b      	mov	r3, r1
 801772e:	f7e8 fdbd 	bl	80002ac <__adddf3>
 8017732:	ec41 0b10 	vmov	d0, r0, r1
 8017736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801773a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801773e:	f04f 33ff 	mov.w	r3, #4294967295
 8017742:	fa23 f707 	lsr.w	r7, r3, r7
 8017746:	4207      	tst	r7, r0
 8017748:	d0f3      	beq.n	8017732 <floor+0x9a>
 801774a:	a311      	add	r3, pc, #68	; (adr r3, 8017790 <floor+0xf8>)
 801774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017750:	f7e8 fdac 	bl	80002ac <__adddf3>
 8017754:	2200      	movs	r2, #0
 8017756:	2300      	movs	r3, #0
 8017758:	f7e9 f9ee 	bl	8000b38 <__aeabi_dcmpgt>
 801775c:	2800      	cmp	r0, #0
 801775e:	d0bf      	beq.n	80176e0 <floor+0x48>
 8017760:	2c00      	cmp	r4, #0
 8017762:	da02      	bge.n	801776a <floor+0xd2>
 8017764:	2e14      	cmp	r6, #20
 8017766:	d103      	bne.n	8017770 <floor+0xd8>
 8017768:	3401      	adds	r4, #1
 801776a:	ea25 0507 	bic.w	r5, r5, r7
 801776e:	e7b7      	b.n	80176e0 <floor+0x48>
 8017770:	2301      	movs	r3, #1
 8017772:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017776:	fa03 f606 	lsl.w	r6, r3, r6
 801777a:	4435      	add	r5, r6
 801777c:	4545      	cmp	r5, r8
 801777e:	bf38      	it	cc
 8017780:	18e4      	addcc	r4, r4, r3
 8017782:	e7f2      	b.n	801776a <floor+0xd2>
 8017784:	2500      	movs	r5, #0
 8017786:	462c      	mov	r4, r5
 8017788:	e7aa      	b.n	80176e0 <floor+0x48>
 801778a:	bf00      	nop
 801778c:	f3af 8000 	nop.w
 8017790:	8800759c 	.word	0x8800759c
 8017794:	7e37e43c 	.word	0x7e37e43c
 8017798:	bff00000 	.word	0xbff00000
 801779c:	000fffff 	.word	0x000fffff

080177a0 <matherr>:
 80177a0:	2000      	movs	r0, #0
 80177a2:	4770      	bx	lr
 80177a4:	0000      	movs	r0, r0
	...

080177a8 <scalbn>:
 80177a8:	b570      	push	{r4, r5, r6, lr}
 80177aa:	ec55 4b10 	vmov	r4, r5, d0
 80177ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80177b2:	4606      	mov	r6, r0
 80177b4:	462b      	mov	r3, r5
 80177b6:	b9aa      	cbnz	r2, 80177e4 <scalbn+0x3c>
 80177b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177bc:	4323      	orrs	r3, r4
 80177be:	d03b      	beq.n	8017838 <scalbn+0x90>
 80177c0:	4b31      	ldr	r3, [pc, #196]	; (8017888 <scalbn+0xe0>)
 80177c2:	4629      	mov	r1, r5
 80177c4:	2200      	movs	r2, #0
 80177c6:	ee10 0a10 	vmov	r0, s0
 80177ca:	f7e8 ff25 	bl	8000618 <__aeabi_dmul>
 80177ce:	4b2f      	ldr	r3, [pc, #188]	; (801788c <scalbn+0xe4>)
 80177d0:	429e      	cmp	r6, r3
 80177d2:	4604      	mov	r4, r0
 80177d4:	460d      	mov	r5, r1
 80177d6:	da12      	bge.n	80177fe <scalbn+0x56>
 80177d8:	a327      	add	r3, pc, #156	; (adr r3, 8017878 <scalbn+0xd0>)
 80177da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177de:	f7e8 ff1b 	bl	8000618 <__aeabi_dmul>
 80177e2:	e009      	b.n	80177f8 <scalbn+0x50>
 80177e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80177e8:	428a      	cmp	r2, r1
 80177ea:	d10c      	bne.n	8017806 <scalbn+0x5e>
 80177ec:	ee10 2a10 	vmov	r2, s0
 80177f0:	4620      	mov	r0, r4
 80177f2:	4629      	mov	r1, r5
 80177f4:	f7e8 fd5a 	bl	80002ac <__adddf3>
 80177f8:	4604      	mov	r4, r0
 80177fa:	460d      	mov	r5, r1
 80177fc:	e01c      	b.n	8017838 <scalbn+0x90>
 80177fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017802:	460b      	mov	r3, r1
 8017804:	3a36      	subs	r2, #54	; 0x36
 8017806:	4432      	add	r2, r6
 8017808:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801780c:	428a      	cmp	r2, r1
 801780e:	dd0b      	ble.n	8017828 <scalbn+0x80>
 8017810:	ec45 4b11 	vmov	d1, r4, r5
 8017814:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017880 <scalbn+0xd8>
 8017818:	f000 f83c 	bl	8017894 <copysign>
 801781c:	a318      	add	r3, pc, #96	; (adr r3, 8017880 <scalbn+0xd8>)
 801781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017822:	ec51 0b10 	vmov	r0, r1, d0
 8017826:	e7da      	b.n	80177de <scalbn+0x36>
 8017828:	2a00      	cmp	r2, #0
 801782a:	dd08      	ble.n	801783e <scalbn+0x96>
 801782c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017830:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017834:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017838:	ec45 4b10 	vmov	d0, r4, r5
 801783c:	bd70      	pop	{r4, r5, r6, pc}
 801783e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017842:	da0d      	bge.n	8017860 <scalbn+0xb8>
 8017844:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017848:	429e      	cmp	r6, r3
 801784a:	ec45 4b11 	vmov	d1, r4, r5
 801784e:	dce1      	bgt.n	8017814 <scalbn+0x6c>
 8017850:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017878 <scalbn+0xd0>
 8017854:	f000 f81e 	bl	8017894 <copysign>
 8017858:	a307      	add	r3, pc, #28	; (adr r3, 8017878 <scalbn+0xd0>)
 801785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801785e:	e7e0      	b.n	8017822 <scalbn+0x7a>
 8017860:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017864:	3236      	adds	r2, #54	; 0x36
 8017866:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801786a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801786e:	4620      	mov	r0, r4
 8017870:	4629      	mov	r1, r5
 8017872:	2200      	movs	r2, #0
 8017874:	4b06      	ldr	r3, [pc, #24]	; (8017890 <scalbn+0xe8>)
 8017876:	e7b2      	b.n	80177de <scalbn+0x36>
 8017878:	c2f8f359 	.word	0xc2f8f359
 801787c:	01a56e1f 	.word	0x01a56e1f
 8017880:	8800759c 	.word	0x8800759c
 8017884:	7e37e43c 	.word	0x7e37e43c
 8017888:	43500000 	.word	0x43500000
 801788c:	ffff3cb0 	.word	0xffff3cb0
 8017890:	3c900000 	.word	0x3c900000

08017894 <copysign>:
 8017894:	ec51 0b10 	vmov	r0, r1, d0
 8017898:	ee11 0a90 	vmov	r0, s3
 801789c:	ee10 2a10 	vmov	r2, s0
 80178a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80178a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80178a8:	ea41 0300 	orr.w	r3, r1, r0
 80178ac:	ec43 2b10 	vmov	d0, r2, r3
 80178b0:	4770      	bx	lr
	...

080178b4 <_init>:
 80178b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178b6:	bf00      	nop
 80178b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178ba:	bc08      	pop	{r3}
 80178bc:	469e      	mov	lr, r3
 80178be:	4770      	bx	lr

080178c0 <_fini>:
 80178c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178c2:	bf00      	nop
 80178c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178c6:	bc08      	pop	{r3}
 80178c8:	469e      	mov	lr, r3
 80178ca:	4770      	bx	lr
