
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08015a28  08015a28  00025a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016634  08016634  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  08016634  08016634  00026634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801663c  0801663c  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801663c  0801663c  0002663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016640  08016640  00026640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  08016644  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000557c  20001008  0801764c  00031008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006584  0801764c  00036584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002941a  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000058c9  00000000  00000000  0005a452  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  0005fd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  000617b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281ab  00000000  00000000  00062ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b565  00000000  00000000  0008b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7ebb  00000000  00000000  000a6708  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e5c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008190  00000000  00000000  0017e640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015a0c 	.word	0x08015a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	08015a0c 	.word	0x08015a0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0ac      	sub	sp, #176	; 0xb0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00f fbf2 	bl	80107a8 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f010 fb3f 	bl	8011658 <siscanf>
 8000fda:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e223      	b.n	800144e <commandRead+0x4a6>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e213      	b.n	800144e <commandRead+0x4a6>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11f      	bne.n	800107c <commandRead+0xd4>
		if (3 == result) {
 800103c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001040:	2b03      	cmp	r3, #3
 8001042:	d111      	bne.n	8001068 <commandRead+0xc0>
			result = sscanf( para, "%f %f",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3380      	adds	r3, #128	; 0x80
 800104e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001052:	4996      	ldr	r1, [pc, #600]	; (80012ac <commandRead+0x304>)
 8001054:	f010 fb00 	bl	8011658 <siscanf>
 8001058:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <commandRead+0xc4>
				return CMD_ERROR;
 8001064:	230b      	movs	r3, #11
 8001066:	e1f2      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001068:	230b      	movs	r3, #11
 800106a:	e1f0      	b.n	800144e <commandRead+0x4a6>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 8001078:	2302      	movs	r3, #2
 800107a:	e1e8      	b.n	800144e <commandRead+0x4a6>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107c:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14b      	bne.n	800112a <commandRead+0x182>
		if (3 == result) {
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001096:	2b03      	cmp	r3, #3
 8001098:	d143      	bne.n	8001122 <commandRead+0x17a>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %d %f",
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f103 0630 	add.w	r6, r3, #48	; 0x30
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3334      	adds	r3, #52	; 0x34
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	3238      	adds	r2, #56	; 0x38
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	317c      	adds	r1, #124	; 0x7c
 80010b2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010ba:	9004      	str	r0, [sp, #16]
 80010bc:	f107 002b 	add.w	r0, r7, #43	; 0x2b
 80010c0:	9003      	str	r0, [sp, #12]
 80010c2:	9102      	str	r1, [sp, #8]
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4633      	mov	r3, r6
 80010ca:	462a      	mov	r2, r5
 80010cc:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010ce:	4620      	mov	r0, r4
 80010d0:	f010 fac2 	bl	8011658 <siscanf>
 80010d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d001      	beq.n	80010e4 <commandRead+0x13c>
				return CMD_ERROR;
 80010e0:	230b      	movs	r3, #11
 80010e2:	e1b4      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <commandRead+0x160>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80010fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001106:	e00e      	b.n	8001126 <commandRead+0x17e>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001108:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <commandRead+0x176>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	e003      	b.n	8001126 <commandRead+0x17e>
			} else {
				return CMD_ERROR;
 800111e:	230b      	movs	r3, #11
 8001120:	e195      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001122:	230b      	movs	r3, #11
 8001124:	e193      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_LINE;
 8001126:	2303      	movs	r3, #3
 8001128:	e191      	b.n	800144e <commandRead+0x4a6>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 800112a:	4b5f      	ldr	r3, [pc, #380]	; (80012a8 <commandRead+0x300>)
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f84b 	bl	80001d0 <strcmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d159      	bne.n	80011f4 <commandRead+0x24c>
		if (3 == result) {
 8001140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001144:	2b03      	cmp	r3, #3
 8001146:	d151      	bne.n	80011ec <commandRead+0x244>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %f %f %d %f %d %f",
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 0e2c 	add.w	lr, r3, #44	; 0x2c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f103 0830 	add.w	r8, r3, #48	; 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3334      	adds	r3, #52	; 0x34
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	3238      	adds	r2, #56	; 0x38
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	315c      	adds	r1, #92	; 0x5c
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	3060      	adds	r0, #96	; 0x60
 8001166:	687c      	ldr	r4, [r7, #4]
 8001168:	3464      	adds	r4, #100	; 0x64
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 800116a:	687d      	ldr	r5, [r7, #4]
 800116c:	3510      	adds	r5, #16
			result = sscanf( para, "%f %f %f %f %f %f %f %d %f %d %f",
 800116e:	687e      	ldr	r6, [r7, #4]
 8001170:	367c      	adds	r6, #124	; 0x7c
 8001172:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	9308      	str	r3, [sp, #32]
 800117c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001180:	9307      	str	r3, [sp, #28]
 8001182:	9606      	str	r6, [sp, #24]
 8001184:	9505      	str	r5, [sp, #20]
 8001186:	9404      	str	r4, [sp, #16]
 8001188:	9003      	str	r0, [sp, #12]
 800118a:	9102      	str	r1, [sp, #8]
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4643      	mov	r3, r8
 8001194:	4672      	mov	r2, lr
 8001196:	4947      	ldr	r1, [pc, #284]	; (80012b4 <commandRead+0x30c>)
 8001198:	4660      	mov	r0, ip
 800119a:	f010 fa5d 	bl	8011658 <siscanf>
 800119e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011a6:	2b0b      	cmp	r3, #11
 80011a8:	d001      	beq.n	80011ae <commandRead+0x206>
				return CMD_ERROR;
 80011aa:	230b      	movs	r3, #11
 80011ac:	e14f      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <commandRead+0x22a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011d0:	e00e      	b.n	80011f0 <commandRead+0x248>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011d2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d106      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	e003      	b.n	80011f0 <commandRead+0x248>
			} else {
				return CMD_ERROR;
 80011e8:	230b      	movs	r3, #11
 80011ea:	e130      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 80011ec:	230b      	movs	r3, #11
 80011ee:	e12e      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_CIRCLE;
 80011f0:	2304      	movs	r3, #4
 80011f2:	e12c      	b.n	800144e <commandRead+0x4a6>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <commandRead+0x300>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe6 	bl	80001d0 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d156      	bne.n	80012b8 <commandRead+0x310>
		if (3 == result) {
 800120a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800120e:	2b03      	cmp	r3, #3
 8001210:	d143      	bne.n	800129a <commandRead+0x2f2>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %d %f",
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 0630 	add.w	r6, r3, #48	; 0x30
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3334      	adds	r3, #52	; 0x34
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3238      	adds	r2, #56	; 0x38
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	317c      	adds	r1, #124	; 0x7c
 800122a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800122e:	f107 001c 	add.w	r0, r7, #28
 8001232:	9004      	str	r0, [sp, #16]
 8001234:	f107 001b 	add.w	r0, r7, #27
 8001238:	9003      	str	r0, [sp, #12]
 800123a:	9102      	str	r1, [sp, #8]
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4633      	mov	r3, r6
 8001242:	462a      	mov	r2, r5
 8001244:	491a      	ldr	r1, [pc, #104]	; (80012b0 <commandRead+0x308>)
 8001246:	4620      	mov	r0, r4
 8001248:	f010 fa06 	bl	8011658 <siscanf>
 800124c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001254:	2b07      	cmp	r3, #7
 8001256:	d001      	beq.n	800125c <commandRead+0x2b4>
				return CMD_ERROR;
 8001258:	230b      	movs	r3, #11
 800125a:	e0f8      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001268:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <commandRead+0x2d8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800127e:	e00e      	b.n	800129e <commandRead+0x2f6>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001280:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <commandRead+0x2ee>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	e003      	b.n	800129e <commandRead+0x2f6>
			} else {
				return CMD_ERROR;
 8001296:	230b      	movs	r3, #11
 8001298:	e0d9      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 800129a:	230b      	movs	r3, #11
 800129c:	e0d7      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_JOINT;
 800129e:	2305      	movs	r3, #5
 80012a0:	e0d5      	b.n	800144e <commandRead+0x4a6>
 80012a2:	bf00      	nop
 80012a4:	08015ab8 	.word	0x08015ab8
 80012a8:	20000000 	.word	0x20000000
 80012ac:	08015ac4 	.word	0x08015ac4
 80012b0:	08015acc 	.word	0x08015acc
 80012b4:	08015ae4 	.word	0x08015ae4

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012b8:	4b67      	ldr	r3, [pc, #412]	; (8001458 <commandRead+0x4b0>)
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff84 	bl	80001d0 <strcmp>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d144      	bne.n	8001358 <commandRead+0x3b0>
		if (3 == result) {
 80012ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d13c      	bne.n	8001350 <commandRead+0x3a8>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %f %f %d %f",
							(int *)&(duty_cmd->sub_para_int),
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %f %f %d %f",
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f103 0414 	add.w	r4, r3, #20
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	337c      	adds	r3, #124	; 0x7c
 80012e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012ea:	f107 0214 	add.w	r2, r7, #20
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	f107 0213 	add.w	r2, r7, #19
 80012f4:	9201      	str	r2, [sp, #4]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4623      	mov	r3, r4
 80012fa:	460a      	mov	r2, r1
 80012fc:	4957      	ldr	r1, [pc, #348]	; (800145c <commandRead+0x4b4>)
 80012fe:	f010 f9ab 	bl	8011658 <siscanf>
 8001302:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->sub_para_float),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 8001306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800130a:	2b05      	cmp	r3, #5
 800130c:	d001      	beq.n	8001312 <commandRead+0x36a>
				return CMD_ERROR;
 800130e:	230b      	movs	r3, #11
 8001310:	e09d      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800131e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d107      	bne.n	8001336 <commandRead+0x38e>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001334:	e00e      	b.n	8001354 <commandRead+0x3ac>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <commandRead+0x3a4>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	e003      	b.n	8001354 <commandRead+0x3ac>
			} else {
				return CMD_ERROR;
 800134c:	230b      	movs	r3, #11
 800134e:	e07e      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001350:	230b      	movs	r3, #11
 8001352:	e07c      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_ROTATE_SINGLE;
 8001354:	2306      	movs	r3, #6
 8001356:	e07a      	b.n	800144e <commandRead+0x4a6>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <commandRead+0x4b0>)
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <commandRead+0x3ec>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f103 0210 	add.w	r2, r3, #16
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	4939      	ldr	r1, [pc, #228]	; (8001460 <commandRead+0x4b8>)
 800137a:	4618      	mov	r0, r3
 800137c:	f010 f96c 	bl	8011658 <siscanf>
 8001380:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		if (1 != result) {
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001388:	2b01      	cmp	r3, #1
 800138a:	d001      	beq.n	8001390 <commandRead+0x3e8>
			return CMD_ERROR;
 800138c:	230b      	movs	r3, #11
 800138e:	e05e      	b.n	800144e <commandRead+0x4a6>
		}

		return CMD_OUTPUT;
 8001390:	2307      	movs	r3, #7
 8001392:	e05c      	b.n	800144e <commandRead+0x4a6>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <commandRead+0x4b0>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff16 	bl	80001d0 <strcmp>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <commandRead+0x406>
		return CMD_READ_STATUS;
 80013aa:	2308      	movs	r3, #8
 80013ac:	e04f      	b.n	800144e <commandRead+0x4a6>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <commandRead+0x4b0>)
 80013b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff09 	bl	80001d0 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <commandRead+0x420>
			return CMD_READ_POSITION;
 80013c4:	2309      	movs	r3, #9
 80013c6:	e042      	b.n	800144e <commandRead+0x4a6>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <commandRead+0x4b0>)
 80013ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d136      	bne.n	800144c <commandRead+0x4a4>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 80013de:	f107 0312 	add.w	r3, r7, #18
 80013e2:	f107 0211 	add.w	r2, r7, #17
 80013e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013ea:	491e      	ldr	r1, [pc, #120]	; (8001464 <commandRead+0x4bc>)
 80013ec:	f010 f934 	bl	8011658 <siscanf>
 80013f0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 80013f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d001      	beq.n	8001400 <commandRead+0x458>
			return CMD_ERROR;
 80013fc:	230b      	movs	r3, #11
 80013fe:	e026      	b.n	800144e <commandRead+0x4a6>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001400:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <commandRead+0x468>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	721a      	strb	r2, [r3, #8]
 800140e:	e009      	b.n	8001424 <commandRead+0x47c>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001410:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d103      	bne.n	8001420 <commandRead+0x478>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	721a      	strb	r2, [r3, #8]
 800141e:	e001      	b.n	8001424 <commandRead+0x47c>
		} else {
			return CMD_ERROR;
 8001420:	230b      	movs	r3, #11
 8001422:	e014      	b.n	800144e <commandRead+0x4a6>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001424:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <commandRead+0x48c>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	731a      	strb	r2, [r3, #12]
 8001432:	e009      	b.n	8001448 <commandRead+0x4a0>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001434:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d103      	bne.n	8001444 <commandRead+0x49c>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	731a      	strb	r2, [r3, #12]
 8001442:	e001      	b.n	8001448 <commandRead+0x4a0>
		} else {
			return CMD_ERROR;
 8001444:	230b      	movs	r3, #11
 8001446:	e002      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_SETTING;
 8001448:	230a      	movs	r3, #10
 800144a:	e000      	b.n	800144e <commandRead+0x4a6>

	// Error command
	} else {
		return CMD_ERROR;
 800144c:	230b      	movs	r3, #11
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	3788      	adds	r7, #136	; 0x88
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	08015b08 	.word	0x08015b08
 8001460:	08015b18 	.word	0x08015b18
 8001464:	08015b1c 	.word	0x08015b1c

08001468 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001468:	b084      	sub	sp, #16
 800146a:	b5b0      	push	{r4, r5, r7, lr}
 800146c:	b09a      	sub	sp, #104	; 0x68
 800146e:	af0a      	add	r7, sp, #40	; 0x28
 8001470:	4604      	mov	r4, r0
 8001472:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800147a:	4623      	mov	r3, r4
 800147c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b0b      	cmp	r3, #11
 8001482:	f200 80f2 	bhi.w	800166a <commandReply+0x202>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <commandReply+0x24>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	080014bd 	.word	0x080014bd
 8001490:	080014bd 	.word	0x080014bd
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014bd 	.word	0x080014bd
 800149c:	080014bd 	.word	0x080014bd
 80014a0:	080014bd 	.word	0x080014bd
 80014a4:	080014bd 	.word	0x080014bd
 80014a8:	080014c5 	.word	0x080014c5
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800155f 	.word	0x0800155f
 80014b4:	08001591 	.word	0x08001591
 80014b8:	0800164b 	.word	0x0800164b
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014bc:	2309      	movs	r3, #9
 80014be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 80014c2:	e0e1      	b.n	8001688 <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10d      	bne.n	80014e6 <commandReply+0x7e>
				scaraSetOutput(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f004 fd68 	bl	8005fa0 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 80014d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014d4:	4971      	ldr	r1, [pc, #452]	; (800169c <commandReply+0x234>)
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	cb03      	ldmia	r3!, {r0, r1}
 80014dc:	6010      	str	r0, [r2, #0]
 80014de:	6051      	str	r1, [r2, #4]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	8113      	strh	r3, [r2, #8]
 80014e4:	e01d      	b.n	8001522 <commandReply+0xba>
			} else if (0 == duty_cmd.sub_para_int) {
 80014e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10f      	bne.n	800150c <commandReply+0xa4>
				scaraSetOutput(0);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f004 fd57 	bl	8005fa0 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 80014f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014f6:	496a      	ldr	r1, [pc, #424]	; (80016a0 <commandReply+0x238>)
 80014f8:	461a      	mov	r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	cb03      	ldmia	r3!, {r0, r1}
 80014fe:	6010      	str	r0, [r2, #0]
 8001500:	6051      	str	r1, [r2, #4]
 8001502:	8819      	ldrh	r1, [r3, #0]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	8111      	strh	r1, [r2, #8]
 8001508:	7293      	strb	r3, [r2, #10]
 800150a:	e00a      	b.n	8001522 <commandReply+0xba>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 800150c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001510:	4a64      	ldr	r2, [pc, #400]	; (80016a4 <commandReply+0x23c>)
 8001512:	461c      	mov	r4, r3
 8001514:	4613      	mov	r3, r2
 8001516:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001518:	6020      	str	r0, [r4, #0]
 800151a:	6061      	str	r1, [r4, #4]
 800151c:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 800151e:	2307      	movs	r3, #7
 8001520:	e0b4      	b.n	800168c <commandReply+0x224>
			}
			ret = RPD_OK;
 8001522:	2308      	movs	r3, #8
 8001524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		break;
 8001528:	e0ae      	b.n	8001688 <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800152a:	f004 fd79 	bl	8006020 <scaraGetMode>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			current_state	 = scaraGetDutyState();
 8001534:	f004 fd80 	bl	8006038 <scaraGetDutyState>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800153e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001542:	2b02      	cmp	r3, #2
 8001544:	d107      	bne.n	8001556 <commandReply+0xee>
 8001546:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <commandReply+0xee>
				ret = RPD_IDLE;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001554:	e098      	b.n	8001688 <commandReply+0x220>
				ret = RPD_BUSY;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800155c:	e094      	b.n	8001688 <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fd3c 	bl	8005fe0 <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 8001568:	466d      	mov	r5, sp
 800156a:	f107 0418 	add.w	r4, r7, #24
 800156e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001580:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001584:	f004 fd9e 	bl	80060c4 <scaraPosition2String>
			ret =  RPD_POSITION;
 8001588:	2302      	movs	r3, #2
 800158a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		break;
 800158e:	e07b      	b.n	8001688 <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001590:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 8001598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800159c:	4942      	ldr	r1, [pc, #264]	; (80016a8 <commandReply+0x240>)
 800159e:	461a      	mov	r2, r3
 80015a0:	460b      	mov	r3, r1
 80015a2:	cb03      	ldmia	r3!, {r0, r1}
 80015a4:	6010      	str	r0, [r2, #0]
 80015a6:	6051      	str	r1, [r2, #4]
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	8113      	strh	r3, [r2, #8]
 80015ac:	e017      	b.n	80015de <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10a      	bne.n	80015cc <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015ba:	493c      	ldr	r1, [pc, #240]	; (80016ac <commandReply+0x244>)
 80015bc:	461a      	mov	r2, r3
 80015be:	460b      	mov	r3, r1
 80015c0:	cb03      	ldmia	r3!, {r0, r1}
 80015c2:	6010      	str	r0, [r2, #0]
 80015c4:	6051      	str	r1, [r2, #4]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	8113      	strh	r3, [r2, #8]
 80015ca:	e008      	b.n	80015de <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <commandReply+0x248>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4619      	mov	r1, r3
 80015d2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80015d6:	f010 f86b 	bl	80116b0 <strcat>
			return RPD_ERROR;
 80015da:	2307      	movs	r3, #7
 80015dc:	e056      	b.n	800168c <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80015de:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10e      	bne.n	8001604 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 80015e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80015ea:	f7fe fdfb 	bl	80001e4 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015f6:	4413      	add	r3, r2
 80015f8:	4a2e      	ldr	r2, [pc, #184]	; (80016b4 <commandReply+0x24c>)
 80015fa:	6810      	ldr	r0, [r2, #0]
 80015fc:	6018      	str	r0, [r3, #0]
 80015fe:	8892      	ldrh	r2, [r2, #4]
 8001600:	809a      	strh	r2, [r3, #4]
 8001602:	e01e      	b.n	8001642 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001604:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001608:	2b01      	cmp	r3, #1
 800160a:	d111      	bne.n	8001630 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 800160c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001610:	f7fe fde8 	bl	80001e4 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800161c:	4413      	add	r3, r2
 800161e:	4926      	ldr	r1, [pc, #152]	; (80016b8 <commandReply+0x250>)
 8001620:	461a      	mov	r2, r3
 8001622:	460b      	mov	r3, r1
 8001624:	cb03      	ldmia	r3!, {r0, r1}
 8001626:	6010      	str	r0, [r2, #0]
 8001628:	6051      	str	r1, [r2, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	7213      	strb	r3, [r2, #8]
 800162e:	e008      	b.n	8001642 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <commandReply+0x248>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4619      	mov	r1, r3
 8001636:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800163a:	f010 f839 	bl	80116b0 <strcat>
			return RPD_ERROR;
 800163e:	2307      	movs	r3, #7
 8001640:	e024      	b.n	800168c <commandReply+0x224>
		}
		ret = RPD_OK;
 8001642:	2308      	movs	r3, #8
 8001644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8001648:	e01e      	b.n	8001688 <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800164a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <commandReply+0x254>)
 8001650:	461d      	mov	r5, r3
 8001652:	4614      	mov	r4, r2
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	6028      	str	r0, [r5, #0]
 8001658:	6069      	str	r1, [r5, #4]
 800165a:	60aa      	str	r2, [r5, #8]
 800165c:	60eb      	str	r3, [r5, #12]
 800165e:	7823      	ldrb	r3, [r4, #0]
 8001660:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001662:	2307      	movs	r3, #7
 8001664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8001668:	e00e      	b.n	8001688 <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800166a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <commandReply+0x254>)
 8001670:	461d      	mov	r5, r3
 8001672:	4614      	mov	r4, r2
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	6028      	str	r0, [r5, #0]
 8001678:	6069      	str	r1, [r5, #4]
 800167a:	60aa      	str	r2, [r5, #8]
 800167c:	60eb      	str	r3, [r5, #12]
 800167e:	7823      	ldrb	r3, [r4, #0]
 8001680:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001682:	2307      	movs	r3, #7
 8001684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	return ret;
 8001688:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800168c:	4618      	mov	r0, r3
 800168e:	3740      	adds	r7, #64	; 0x40
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001696:	b004      	add	sp, #16
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	08015b24 	.word	0x08015b24
 80016a0:	08015b30 	.word	0x08015b30
 80016a4:	08015b3c 	.word	0x08015b3c
 80016a8:	08015b48 	.word	0x08015b48
 80016ac:	08015b54 	.word	0x08015b54
 80016b0:	20000c80 	.word	0x20000c80
 80016b4:	08015b60 	.word	0x08015b60
 80016b8:	08015b68 	.word	0x08015b68
 80016bc:	08015b74 	.word	0x08015b74

080016c0 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d836      	bhi.n	8001744 <commandRespond+0x84>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <commandRespond+0x1c>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001701 	.word	0x08001701
 80016e4:	08001727 	.word	0x08001727
 80016e8:	08001727 	.word	0x08001727
 80016ec:	08001727 	.word	0x08001727
 80016f0:	08001727 	.word	0x08001727
 80016f4:	08001727 	.word	0x08001727
 80016f8:	08001727 	.word	0x08001727
 80016fc:	08001727 	.word	0x08001727
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001700:	f004 fca6 	bl	8006050 <scaraIsScanLimit>
 8001704:	4603      	mov	r3, r0
 8001706:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <commandRespond+0x94>)
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	7cfa      	ldrb	r2, [r7, #19]
 8001712:	9201      	str	r2, [sp, #4]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <commandRespond+0x98>)
 800171a:	2114      	movs	r1, #20
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f00f ff47 	bl	80115b0 <sniprintf>
 8001722:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001724:	e010      	b.n	8001748 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <commandRespond+0x94>)
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <commandRespond+0x9c>)
 8001738:	2164      	movs	r1, #100	; 0x64
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f00f ff38 	bl	80115b0 <sniprintf>
 8001740:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001742:	e001      	b.n	8001748 <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001748:	697b      	ldr	r3, [r7, #20]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000002c 	.word	0x2000002c
 8001758:	08015b88 	.word	0x08015b88
 800175c:	08015b94 	.word	0x08015b94

08001760 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af02      	add	r7, sp, #8
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s\n", line, message);
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	f107 0008 	add.w	r0, r7, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <LOG_REPORT+0x78>)
 800177a:	213f      	movs	r1, #63	; 0x3f
 800177c:	f00f ff18 	bl	80115b0 <sniprintf>
 8001780:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d101      	bne.n	800178e <LOG_REPORT+0x2e>
		return FALSE;
 800178a:	2300      	movs	r3, #0
 800178c:	e01f      	b.n	80017ce <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <LOG_REPORT+0x7c>)
 8001798:	f001 fb03 	bl	8002da2 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <LOG_REPORT+0x80>)
 800179e:	f005 fb1b 	bl	8006dd8 <HAL_DMA_GetState>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d101      	bne.n	80017ac <LOG_REPORT+0x4c>
		return TRUE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e010      	b.n	80017ce <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <LOG_REPORT+0x84>)
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <LOG_REPORT+0x7c>)
 80017b4:	f001 fb1d 	bl	8002df2 <ringBuff_PopArray>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017c2:	461a      	mov	r2, r3
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LOG_REPORT+0x84>)
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <LOG_REPORT+0x88>)
 80017c8:	f007 fe36 	bl	8009438 <HAL_UART_Transmit_DMA>
	return TRUE;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3750      	adds	r7, #80	; 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08015ba0 	.word	0x08015ba0
 80017dc:	2000086c 	.word	0x2000086c
 80017e0:	20005870 	.word	0x20005870
 80017e4:	200051d4 	.word	0x200051d4
 80017e8:	20005830 	.word	0x20005830

080017ec <float2string>:

int32_t	float2string( uint8_t *result, float value, uint8_t precision) {
 80017ec:	b480      	push	{r7}
 80017ee:	b08d      	sub	sp, #52	; 0x34
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80017f8:	460b      	mov	r3, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
	uint8_t le[6];
	int8_t sign;
	float temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d901      	bls.n	8001806 <float2string+0x1a>
		precision = 6;
 8001802:	2306      	movs	r3, #6
 8001804:	71fb      	strb	r3, [r7, #7]
	}

	if(value < 0) {
 8001806:	edd7 7a02 	vldr	s15, [r7, #8]
 800180a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d503      	bpl.n	800181c <float2string+0x30>
		sign = -1;
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800181a:	e002      	b.n	8001822 <float2string+0x36>
	} else {
		sign = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	value = value*sign;
 8001822:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a02 	vstr	s15, [r7, #8]

	if (value > 10000.0f) {
 800183a:	edd7 7a02 	vldr	s15, [r7, #8]
 800183e:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8001b74 <float2string+0x388>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd02      	ble.n	8001852 <float2string+0x66>
		return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e1f2      	b.n	8001c38 <float2string+0x44c>
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001852:	edd7 7a02 	vldr	s15, [r7, #8]
 8001856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185a:	ee17 1a90 	vmov	r1, s15
 800185e:	4bc6      	ldr	r3, [pc, #792]	; (8001b78 <float2string+0x38c>)
 8001860:	fb83 2301 	smull	r2, r3, r3, r1
 8001864:	119a      	asrs	r2, r3, #6
 8001866:	17cb      	asrs	r3, r1, #31
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	763b      	strb	r3, [r7, #24]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 800186e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 1a90 	vmov	r1, s15
 800187a:	4bc0      	ldr	r3, [pc, #768]	; (8001b7c <float2string+0x390>)
 800187c:	fb83 2301 	smull	r2, r3, r3, r1
 8001880:	115a      	asrs	r2, r3, #5
 8001882:	17cb      	asrs	r3, r1, #31
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	7e3b      	ldrb	r3, [r7, #24]
 800188a:	4619      	mov	r1, r3
 800188c:	0149      	lsls	r1, r1, #5
 800188e:	1ac9      	subs	r1, r1, r3
 8001890:	0089      	lsls	r1, r1, #2
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	767b      	strb	r3, [r7, #25]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 800189e:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 1a90 	vmov	r1, s15
 80018aa:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <float2string+0x394>)
 80018ac:	fb83 2301 	smull	r2, r3, r3, r1
 80018b0:	109a      	asrs	r2, r3, #2
 80018b2:	17cb      	asrs	r3, r1, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	7e7b      	ldrb	r3, [r7, #25]
 80018ba:	4619      	mov	r1, r3
 80018bc:	0149      	lsls	r1, r1, #5
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	0089      	lsls	r1, r1, #2
 80018c2:	1acb      	subs	r3, r1, r3
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	b2d9      	uxtb	r1, r3
 80018c8:	7e3b      	ldrb	r3, [r7, #24]
 80018ca:	4618      	mov	r0, r3
 80018cc:	0080      	lsls	r0, r0, #2
 80018ce:	4418      	add	r0, r3
 80018d0:	00c0      	lsls	r0, r0, #3
 80018d2:	1ac3      	subs	r3, r0, r3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	440b      	add	r3, r1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	76bb      	strb	r3, [r7, #26]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 80018e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ea:	edc7 7a00 	vstr	s15, [r7]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	7e7b      	ldrb	r3, [r7, #25]
 80018f4:	4619      	mov	r1, r3
 80018f6:	0089      	lsls	r1, r1, #2
 80018f8:	4419      	add	r1, r3
 80018fa:	00c9      	lsls	r1, r1, #3
 80018fc:	1acb      	subs	r3, r1, r3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	b2d9      	uxtb	r1, r3
 8001902:	7e3b      	ldrb	r3, [r7, #24]
 8001904:	4618      	mov	r0, r3
 8001906:	0040      	lsls	r0, r0, #1
 8001908:	4403      	add	r3, r0
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	440b      	add	r3, r1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b2da      	uxtb	r2, r3
 8001916:	7ebb      	ldrb	r3, [r7, #26]
 8001918:	4619      	mov	r1, r3
 800191a:	0149      	lsls	r1, r1, #5
 800191c:	1ac9      	subs	r1, r1, r3
 800191e:	0089      	lsls	r1, r1, #2
 8001920:	1acb      	subs	r3, r1, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	76fb      	strb	r3, [r7, #27]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 800192c:	7e3b      	ldrb	r3, [r7, #24]
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	fb03 f302 	mul.w	r3, r3, r2
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001940:	ed97 7a02 	vldr	s14, [r7, #8]
 8001944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001948:	7e7b      	ldrb	r3, [r7, #25]
 800194a:	461a      	mov	r2, r3
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	fb03 f302 	mul.w	r3, r3, r2
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195e:	7ebb      	ldrb	r3, [r7, #26]
 8001960:	461a      	mov	r2, r3
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b84 <float2string+0x398>
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	edc7 7a08 	vstr	s15, [r7, #32]
	le[0] 	= (int32_t)temp1/100;
 8001990:	edd7 7a08 	vldr	s15, [r7, #32]
 8001994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001998:	ee17 1a90 	vmov	r1, s15
 800199c:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <float2string+0x390>)
 800199e:	fb83 2301 	smull	r2, r3, r3, r1
 80019a2:	115a      	asrs	r2, r3, #5
 80019a4:	17cb      	asrs	r3, r1, #31
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	743b      	strb	r3, [r7, #16]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 80019ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 1a90 	vmov	r1, s15
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <float2string+0x394>)
 80019ba:	fb83 2301 	smull	r2, r3, r3, r1
 80019be:	109a      	asrs	r2, r3, #2
 80019c0:	17cb      	asrs	r3, r1, #31
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	7c3b      	ldrb	r3, [r7, #16]
 80019c8:	4619      	mov	r1, r3
 80019ca:	0149      	lsls	r1, r1, #5
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	0089      	lsls	r1, r1, #2
 80019d0:	1acb      	subs	r3, r1, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	747b      	strb	r3, [r7, #17]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 80019dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80019e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e4:	edc7 7a00 	vstr	s15, [r7]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	7c7b      	ldrb	r3, [r7, #17]
 80019ee:	4619      	mov	r1, r3
 80019f0:	0149      	lsls	r1, r1, #5
 80019f2:	1ac9      	subs	r1, r1, r3
 80019f4:	0089      	lsls	r1, r1, #2
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	b2d9      	uxtb	r1, r3
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	4618      	mov	r0, r3
 8001a00:	0080      	lsls	r0, r0, #2
 8001a02:	4418      	add	r0, r3
 8001a04:	00c0      	lsls	r0, r0, #3
 8001a06:	1ac3      	subs	r3, r0, r3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	74bb      	strb	r3, [r7, #18]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a16:	7c3b      	ldrb	r3, [r7, #16]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	fb03 f302 	mul.w	r3, r3, r2
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a30:	7c7b      	ldrb	r3, [r7, #17]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a48:	7cbb      	ldrb	r3, [r7, #18]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a56:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001b84 <float2string+0x398>
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	edc7 7a07 	vstr	s15, [r7, #28]
	le[3] 	= (int32_t)temp2/100;
 8001a62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6a:	ee17 1a90 	vmov	r1, s15
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <float2string+0x390>)
 8001a70:	fb83 2301 	smull	r2, r3, r3, r1
 8001a74:	115a      	asrs	r2, r3, #5
 8001a76:	17cb      	asrs	r3, r1, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	74fb      	strb	r3, [r7, #19]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 1a90 	vmov	r1, s15
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <float2string+0x394>)
 8001a8c:	fb83 2301 	smull	r2, r3, r3, r1
 8001a90:	109a      	asrs	r2, r3, #2
 8001a92:	17cb      	asrs	r3, r1, #31
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	0149      	lsls	r1, r1, #5
 8001a9e:	1ac9      	subs	r1, r1, r3
 8001aa0:	0089      	lsls	r1, r1, #2
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	753b      	strb	r3, [r7, #20]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	edc7 7a00 	vstr	s15, [r7]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7d3b      	ldrb	r3, [r7, #20]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	0149      	lsls	r1, r1, #5
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	0089      	lsls	r1, r1, #2
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2d9      	uxtb	r1, r3
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	0080      	lsls	r0, r0, #2
 8001ad4:	4418      	add	r0, r3
 8001ad6:	00c0      	lsls	r0, r0, #3
 8001ad8:	1ac3      	subs	r3, r0, r3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	440b      	add	r3, r1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	757b      	strb	r3, [r7, #21]

	index = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28

	if( -1 == sign) {
 8001aec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d107      	bne.n	8001b06 <float2string+0x31a>
		*(result + index++) = '-'; // Negative
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4413      	add	r3, r2
 8001b02:	222d      	movs	r2, #45	; 0x2d
 8001b04:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d508      	bpl.n	8001b2a <float2string+0x33e>
		*(result + index++) = 0x30;
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	2230      	movs	r2, #48	; 0x30
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e055      	b.n	8001bd6 <float2string+0x3ea>
	} else {
		int8_t i = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for( ; i < 4; i++) {
 8001b30:	e031      	b.n	8001b96 <float2string+0x3aa>
			if (nguyen[i] > 0) {
 8001b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d021      	beq.n	8001b88 <float2string+0x39c>
				*(result + index++) = nguyen[i] + 0x30;
 8001b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3230      	adds	r2, #48	; 0x30
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
				i++;
 8001b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001b72:	e014      	b.n	8001b9e <float2string+0x3b2>
 8001b74:	461c4000 	.word	0x461c4000
 8001b78:	10624dd3 	.word	0x10624dd3
 8001b7c:	51eb851f 	.word	0x51eb851f
 8001b80:	66666667 	.word	0x66666667
 8001b84:	447a0000 	.word	0x447a0000
		for( ; i < 4; i++) {
 8001b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	ddc9      	ble.n	8001b32 <float2string+0x346>
			}
		}

		for( ; i < 4; i++) {
 8001b9e:	e016      	b.n	8001bce <float2string+0x3e2>
		*(result + index++) = nguyen[i] + 0x30;
 8001ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ba4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ba8:	4413      	add	r3, r2
 8001baa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	1c59      	adds	r1, r3, #1
 8001bb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	440b      	add	r3, r1
 8001bba:	3230      	adds	r2, #48	; 0x30
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dde4      	ble.n	8001ba0 <float2string+0x3b4>
		}
	}
	*(result + index++) = '.';
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	222e      	movs	r2, #46	; 0x2e
 8001be4:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bec:	e016      	b.n	8001c1c <float2string+0x430>
			*(result + index++) = le[i] + 0x30;
 8001bee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001bf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c02:	4619      	mov	r1, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	440b      	add	r3, r1
 8001c08:	3230      	adds	r2, #48	; 0x30
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001c0e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c1c:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbe3      	blt.n	8001bee <float2string+0x402>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
	return index;
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3734      	adds	r7, #52	; 0x34
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	466b      	mov	r3, sp
 8001c52:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <packPayload+0x1c>
		return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e056      	b.n	8001d0e <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <packPayload+0x28>
		return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e050      	b.n	8001d0e <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3302      	adds	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	1e43      	subs	r3, r0, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	00d4      	lsls	r4, r2, #3
 8001c8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c92:	00cb      	lsls	r3, r1, #3
 8001c94:	4603      	mov	r3, r0
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f04f 0400 	mov.w	r4, #0
 8001ca4:	00d4      	lsls	r4, r2, #3
 8001ca6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001caa:	00cb      	lsls	r3, r1, #3
 8001cac:	4603      	mov	r3, r0
 8001cae:	3307      	adds	r3, #7
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb8:	466b      	mov	r3, sp
 8001cba:	3300      	adds	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	61ba      	str	r2, [r7, #24]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	2128      	movs	r1, #40	; 0x28
 8001ccc:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e00b      	b.n	8001cec <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	441a      	add	r2, r3
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	61b9      	str	r1, [r7, #24]
 8001ce0:	7811      	ldrb	r1, [r2, #0]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbef      	blt.n	8001cd4 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	61ba      	str	r2, [r7, #24]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	2129      	movs	r1, #41	; 0x29
 8001cfe:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4619      	mov	r1, r3
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f00e fd35 	bl	8010776 <memmove>

	return out_lenght;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	46ad      	mov	sp, r5
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bdb0      	pop	{r4, r5, r7, pc}

08001d18 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	466b      	mov	r3, sp
 8001d24:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	dc02      	bgt.n	8001d32 <unPackPayload+0x1a>
		return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	e063      	b.n	8001dfa <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d106      	bne.n	8001d48 <unPackPayload+0x30>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b29      	cmp	r3, #41	; 0x29
 8001d46:	d002      	beq.n	8001d4e <unPackPayload+0x36>
		return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e055      	b.n	8001dfa <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3b02      	subs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	1e43      	subs	r3, r0, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	00d4      	lsls	r4, r2, #3
 8001d6c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d70:	00cb      	lsls	r3, r1, #3
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f04f 0400 	mov.w	r4, #0
 8001d82:	00d4      	lsls	r4, r2, #3
 8001d84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d88:	00cb      	lsls	r3, r1, #3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	ebad 0d03 	sub.w	sp, sp, r3
 8001d96:	466b      	mov	r3, sp
 8001d98:	3300      	adds	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e017      	b.n	8001dd6 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b28      	cmp	r3, #40	; 0x28
 8001db0:	d00e      	beq.n	8001dd0 <unPackPayload+0xb8>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b29      	cmp	r3, #41	; 0x29
 8001dbc:	d008      	beq.n	8001dd0 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	6139      	str	r1, [r7, #16]
 8001dca:	7811      	ldrb	r1, [r2, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbe2      	blt.n	8001da6 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f00e fcde 	bl	80107a8 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f00e fcbf 	bl	8010776 <memmove>

	return out_lenght;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	46ad      	mov	sp, r5
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bdb0      	pop	{r4, r5, r7, pc}

08001e04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f004 fcf8 	bl	8006820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e30:	200f      	movs	r0, #15
 8001e32:	f004 fd11 	bl	8006858 <HAL_NVIC_EnableIRQ>

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <vApplicationGetIdleTaskMemory+0x30>)
 8001e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e62:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20001024 	.word	0x20001024
 8001e74:	20001078 	.word	0x20001078

08001e78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e82:	2300      	movs	r3, #0
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00b f82f 	bl	800ceee <osMutexCreate>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <MX_FREERTOS_Init+0x90>)
 8001e94:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001e96:	2301      	movs	r3, #1
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9a:	2384      	movs	r3, #132	; 0x84
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00b f9bc 	bl	800d228 <osMailCreate>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_FREERTOS_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_FREERTOS_Init+0x98>)
 8001eb8:	f107 041c 	add.w	r4, r7, #28
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00a ffac 	bl	800ce2e <osThreadCreate>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_FREERTOS_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_FREERTOS_Init+0xa0>)
 8001ede:	463c      	mov	r4, r7
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00a ff9b 	bl	800ce2e <osThreadCreate>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_FREERTOS_Init+0xa4>)
 8001efc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200052d8 	.word	0x200052d8
 8001f0c:	200052dc 	.word	0x200052dc
 8001f10:	08015bbc 	.word	0x08015bbc
 8001f14:	200052d4 	.word	0x200052d4
 8001f18:	08015be8 	.word	0x08015be8
 8001f1c:	200052e4 	.word	0x200052e4

08001f20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8001f26:	af1e      	add	r7, sp, #120	; 0x78
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f2c:	f00d fe9e 	bl	800fc6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
  // Robot variable
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  float						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001f36:	21c3      	movs	r1, #195	; 0xc3
 8001f38:	48d5      	ldr	r0, [pc, #852]	; (8002290 <StartDefaultTask+0x370>)
 8001f3a:	f7ff fc11 	bl	8001760 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  no_scan = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  no_duty = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  no_duty_success	= 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  no_duty_fail		= 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  current_mode	 = scaraGetMode();
 8001f5c:	f004 f860 	bl	8006020 <scaraGetMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
  current_state	 = scaraGetDutyState();
 8001f66:	f004 f867 	bl	8006038 <scaraGetDutyState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 8001f70:	4bc8      	ldr	r3, [pc, #800]	; (8002294 <StartDefaultTask+0x374>)
 8001f72:	4ac9      	ldr	r2, [pc, #804]	; (8002298 <StartDefaultTask+0x378>)
 8001f74:	621a      	str	r2, [r3, #32]
	  positionNext.Theta2 = PI/3;
 8001f76:	4bc7      	ldr	r3, [pc, #796]	; (8002294 <StartDefaultTask+0x374>)
 8001f78:	4ac8      	ldr	r2, [pc, #800]	; (800229c <StartDefaultTask+0x37c>)
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
	  positionNext.D3 = 10;
 8001f7c:	4bc5      	ldr	r3, [pc, #788]	; (8002294 <StartDefaultTask+0x374>)
 8001f7e:	4ac8      	ldr	r2, [pc, #800]	; (80022a0 <StartDefaultTask+0x380>)
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
	  positionNext.Theta4 = 0;
 8001f82:	4bc4      	ldr	r3, [pc, #784]	; (8002294 <StartDefaultTask+0x374>)
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c

	  kinematicForward(&positionNext);
 8001f8a:	48c2      	ldr	r0, [pc, #776]	; (8002294 <StartDefaultTask+0x374>)
 8001f8c:	f000 fc08 	bl	80027a0 <kinematicForward>
  /* Infinite loop */

  for(;;)
  {
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  respond_packed_lenght = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
	  infor_lenght			= 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
	  infor_packed_lenght	= 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	  task_usb_lenght		= 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
	  usb_lenght			= 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001fb4:	4abb      	ldr	r2, [pc, #748]	; (80022a4 <StartDefaultTask+0x384>)
 8001fb6:	4bb7      	ldr	r3, [pc, #732]	; (8002294 <StartDefaultTask+0x374>)
 8001fb8:	4614      	mov	r4, r2
 8001fba:	461d      	mov	r5, r3
 8001fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001fcc:	4bb6      	ldr	r3, [pc, #728]	; (80022a8 <StartDefaultTask+0x388>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00b f9d2 	bl	800d380 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001fdc:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d119      	bne.n	8002018 <StartDefaultTask+0xf8>
		   dataMail = ret_mail.value.p;
 8001fe4:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001fe8:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001fec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ff0:	2284      	movs	r2, #132	; 0x84
 8001ff2:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00e fbb2 	bl	8010760 <memcpy>
		   isNewDuty = TRUE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002002:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <StartDefaultTask+0x388>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 800200a:	4618      	mov	r0, r3
 800200c:	f00b fa2c 	bl	800d468 <osMailFree>
		   LOG_REPORT("Receive mail", __LINE__);
 8002010:	21ee      	movs	r1, #238	; 0xee
 8002012:	48a6      	ldr	r0, [pc, #664]	; (80022ac <StartDefaultTask+0x38c>)
 8002014:	f7ff fba4 	bl	8001760 <LOG_REPORT>
	  }
	  if(isNewDuty) {
 8002018:	f897 33af 	ldrb.w	r3, [r7, #943]	; 0x3af
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a3 	beq.w	8002168 <StartDefaultTask+0x248>
		  memset(respond, 0, 40);
 8002022:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002026:	2228      	movs	r2, #40	; 0x28
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f00e fbbc 	bl	80107a8 <memset>
		  switch( duty_cmd.robot_mode) {
 8002030:	f897 32e0 	ldrb.w	r3, [r7, #736]	; 0x2e0
 8002034:	2b01      	cmp	r3, #1
 8002036:	d01b      	beq.n	8002070 <StartDefaultTask+0x150>
 8002038:	2b02      	cmp	r3, #2
 800203a:	d049      	beq.n	80020d0 <StartDefaultTask+0x1b0>
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 808b 	bne.w	8002158 <StartDefaultTask+0x238>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 8002042:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002046:	3301      	adds	r3, #1
 8002048:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
				  current_mode	 = SCARA_MODE_STOP;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
				  respond_lenght = commandRespond(RPD_OK,
 8002052:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8002056:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800205a:	4a95      	ldr	r2, [pc, #596]	; (80022b0 <StartDefaultTask+0x390>)
 800205c:	2008      	movs	r0, #8
 800205e:	f7ff fb2f 	bl	80016c0 <commandRespond>
 8002062:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002066:	21fb      	movs	r1, #251	; 0xfb
 8002068:	4892      	ldr	r0, [pc, #584]	; (80022b4 <StartDefaultTask+0x394>)
 800206a:	f7ff fb79 	bl	8001760 <LOG_REPORT>
			  }
			  break;
 800206e:	e078      	b.n	8002162 <StartDefaultTask+0x242>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002070:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8002074:	2b02      	cmp	r3, #2
 8002076:	d11b      	bne.n	80020b0 <StartDefaultTask+0x190>
 8002078:	f897 3386 	ldrb.w	r3, [r7, #902]	; 0x386
 800207c:	2b00      	cmp	r3, #0
 800207e:	d117      	bne.n	80020b0 <StartDefaultTask+0x190>
					  no_scan++;
 8002080:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002084:	3301      	adds	r3, #1
 8002086:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
					  current_mode = SCARA_MODE_SCAN;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
					  respond_lenght = commandRespond(RPD_OK,
 8002090:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8002094:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002098:	4a87      	ldr	r2, [pc, #540]	; (80022b8 <StartDefaultTask+0x398>)
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff fb10 	bl	80016c0 <commandRespond>
 80020a0:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
							  	  	  	  	  	  	  duty_cmd.id_command,
													  "Start Scan",
													  (char *)respond);
					  LOG_REPORT("SCAN", __LINE__);
 80020a4:	f240 1107 	movw	r1, #263	; 0x107
 80020a8:	4884      	ldr	r0, [pc, #528]	; (80022bc <StartDefaultTask+0x39c>)
 80020aa:	f7ff fb59 	bl	8001760 <LOG_REPORT>
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
				  }
			  }
			  break;
 80020ae:	e058      	b.n	8002162 <StartDefaultTask+0x242>
					  respond_lenght = commandRespond(RPD_ERROR,
 80020b0:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80020b4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80020b8:	4a81      	ldr	r2, [pc, #516]	; (80022c0 <StartDefaultTask+0x3a0>)
 80020ba:	2007      	movs	r0, #7
 80020bc:	f7ff fb00 	bl	80016c0 <commandRespond>
 80020c0:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
 80020c4:	f240 110d 	movw	r1, #269	; 0x10d
 80020c8:	487e      	ldr	r0, [pc, #504]	; (80022c4 <StartDefaultTask+0x3a4>)
 80020ca:	f7ff fb49 	bl	8001760 <LOG_REPORT>
			  break;
 80020ce:	e048      	b.n	8002162 <StartDefaultTask+0x242>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 80020d0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80020da:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d124      	bne.n	800212c <StartDefaultTask+0x20c>
 80020e2:	f897 3386 	ldrb.w	r3, [r7, #902]	; 0x386
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d120      	bne.n	800212c <StartDefaultTask+0x20c>
					  if (scaraIsScanLimit()) {
 80020ea:	f003 ffb1 	bl	8006050 <scaraIsScanLimit>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <StartDefaultTask+0x1e2>
						  current_mode	 = SCARA_MODE_DUTY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
						  current_state	 = SCARA_DUTY_STATE_INIT;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
					  if (scaraIsScanLimit()) {
 8002100:	e029      	b.n	8002156 <StartDefaultTask+0x236>
					  } else {
						  no_duty_fail++;
 8002102:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002106:	3301      	adds	r3, #1
 8002108:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
						  respond_lenght = commandRespond(RPD_ERROR,
 800210c:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8002110:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002114:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <StartDefaultTask+0x3a8>)
 8002116:	2007      	movs	r0, #7
 8002118:	f7ff fad2 	bl	80016c0 <commandRespond>
 800211c:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002120:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002124:	4869      	ldr	r0, [pc, #420]	; (80022cc <StartDefaultTask+0x3ac>)
 8002126:	f7ff fb1b 	bl	8001760 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 800212a:	e014      	b.n	8002156 <StartDefaultTask+0x236>
					  }
				  } else {
					  no_duty_fail++;
 800212c:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002130:	3301      	adds	r3, #1
 8002132:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
					  respond_lenght	= commandRespond(RPD_ERROR,
 8002136:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800213a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800213e:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <StartDefaultTask+0x3b0>)
 8002140:	2007      	movs	r0, #7
 8002142:	f7ff fabd 	bl	80016c0 <commandRespond>
 8002146:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 800214a:	f44f 7193 	mov.w	r1, #294	; 0x126
 800214e:	4861      	ldr	r0, [pc, #388]	; (80022d4 <StartDefaultTask+0x3b4>)
 8002150:	f7ff fb06 	bl	8001760 <LOG_REPORT>
				  }
			  }
			  break;
 8002154:	e005      	b.n	8002162 <StartDefaultTask+0x242>
 8002156:	e004      	b.n	8002162 <StartDefaultTask+0x242>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002158:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800215c:	485e      	ldr	r0, [pc, #376]	; (80022d8 <StartDefaultTask+0x3b8>)
 800215e:	f7ff faff 	bl	8001760 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 8002168:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 800216c:	2b01      	cmp	r3, #1
 800216e:	d00b      	beq.n	8002188 <StartDefaultTask+0x268>
 8002170:	2b02      	cmp	r3, #2
 8002172:	d010      	beq.n	8002196 <StartDefaultTask+0x276>
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 812f 	bne.w	80023d8 <StartDefaultTask+0x4b8>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 800217a:	2302      	movs	r3, #2
 800217c:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
			  current_state = SCARA_DUTY_STATE_READY;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
		  }
		  break;
 8002186:	e12d      	b.n	80023e4 <StartDefaultTask+0x4c4>
	  case SCARA_MODE_SCAN:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002188:	2302      	movs	r3, #2
 800218a:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
			  current_state = SCARA_DUTY_STATE_READY;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
		  }
		  break;
 8002194:	e126      	b.n	80023e4 <StartDefaultTask+0x4c4>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 8002196:	f897 3386 	ldrb.w	r3, [r7, #902]	; 0x386
 800219a:	2b03      	cmp	r3, #3
 800219c:	f200 8115 	bhi.w	80023ca <StartDefaultTask+0x4aa>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <StartDefaultTask+0x288>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080022ed 	.word	0x080022ed
 80021b4:	0800238d 	.word	0x0800238d
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 80021b8:	bf00      	nop
				  }
			  break;
 80021ba:	e10c      	b.n	80023d6 <StartDefaultTask+0x4b6>
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status;
					  status = scaraInitDuty(duty_cmd);
 80021bc:	4668      	mov	r0, sp
 80021be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80021c2:	2274      	movs	r2, #116	; 0x74
 80021c4:	4619      	mov	r1, r3
 80021c6:	f00e facb 	bl	8010760 <memcpy>
 80021ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80021ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d0:	f000 fe8c 	bl	8002eec <scaraInitDuty>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
					  if ( SCARA_STATUS_OK == status) {
 80021da:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13a      	bne.n	8002258 <StartDefaultTask+0x338>
						  no_duty_success++;
 80021e2:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80021e6:	3301      	adds	r3, #1
 80021e8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
						  run_time			= 0;
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 80021fa:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80021fe:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status],
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <StartDefaultTask+0x3bc>)
 8002204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 8002208:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800220c:	2008      	movs	r0, #8
 800220e:	f7ff fa57 	bl	80016c0 <commandRespond>
 8002212:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 8002216:	4e23      	ldr	r6, [pc, #140]	; (80022a4 <StartDefaultTask+0x384>)
 8002218:	f507 7c18 	add.w	ip, r7, #608	; 0x260
 800221c:	466d      	mov	r5, sp
 800221e:	f106 040c 	add.w	r4, r6, #12
 8002222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	602b      	str	r3, [r5, #0]
 800222e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002232:	4660      	mov	r0, ip
 8002234:	f003 ff46 	bl	80060c4 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 8002238:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800223c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002240:	2100      	movs	r1, #0
 8002242:	2003      	movs	r0, #3
 8002244:	f7ff fa3c 	bl	80016c0 <commandRespond>
 8002248:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
		  	  	  	  	  	  	  	  	  	  	  	  	  	  0,
															  (char *)position,
															  (char *)infor);
						  LOG_REPORT("INIT SUCCESS", __LINE__);
 800224c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002250:	4823      	ldr	r0, [pc, #140]	; (80022e0 <StartDefaultTask+0x3c0>)
 8002252:	f7ff fa85 	bl	8001760 <LOG_REPORT>
															  (char *)DETAIL_STATUS[status],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 8002256:	e0be      	b.n	80023d6 <StartDefaultTask+0x4b6>
						  no_duty_fail++;
 8002258:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800225c:	3301      	adds	r3, #1
 800225e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
						  current_state 	= SCARA_DUTY_STATE_READY;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002268:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800226c:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
															  (char *)DETAIL_STATUS[status],
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <StartDefaultTask+0x3bc>)
 8002272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002276:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800227a:	2007      	movs	r0, #7
 800227c:	f7ff fa20 	bl	80016c0 <commandRespond>
 8002280:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
						  LOG_REPORT("INIT FAIL", __LINE__);
 8002284:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002288:	4816      	ldr	r0, [pc, #88]	; (80022e4 <StartDefaultTask+0x3c4>)
 800228a:	f7ff fa69 	bl	8001760 <LOG_REPORT>
			  break;
 800228e:	e0a2      	b.n	80023d6 <StartDefaultTask+0x4b6>
 8002290:	08015c04 	.word	0x08015c04
 8002294:	200057c0 	.word	0x200057c0
 8002298:	bf860a92 	.word	0xbf860a92
 800229c:	3f860a92 	.word	0x3f860a92
 80022a0:	41200000 	.word	0x41200000
 80022a4:	20005790 	.word	0x20005790
 80022a8:	200052dc 	.word	0x200052dc
 80022ac:	08015c24 	.word	0x08015c24
 80022b0:	08015c34 	.word	0x08015c34
 80022b4:	08015c40 	.word	0x08015c40
 80022b8:	08015c50 	.word	0x08015c50
 80022bc:	08015c5c 	.word	0x08015c5c
 80022c0:	08015c64 	.word	0x08015c64
 80022c4:	08015c6c 	.word	0x08015c6c
 80022c8:	08015c80 	.word	0x08015c80
 80022cc:	08015c94 	.word	0x08015c94
 80022d0:	08015ca8 	.word	0x08015ca8
 80022d4:	08015cb0 	.word	0x08015cb0
 80022d8:	08015cc0 	.word	0x08015cc0
 80022dc:	20000c80 	.word	0x20000c80
 80022e0:	08015cd4 	.word	0x08015cd4
 80022e4:	08015ce4 	.word	0x08015ce4
 80022e8:	3c23d70a 	.word	0x3c23d70a
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 80022ec:	edd7 7ae0 	vldr	s15, [r7, #896]	; 0x380
 80022f0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80022e8 <StartDefaultTask+0x3c8>
 80022f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022f8:	edc7 7ae0 	vstr	s15, [r7, #896]	; 0x380
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 80022fc:	ed97 0ae0 	vldr	s0, [r7, #896]	; 0x380
 8002300:	f003 feb2 	bl	8006068 <scaraIsFinish>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <StartDefaultTask+0x3f2>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 800230a:	2303      	movs	r3, #3
 800230c:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 8002310:	e061      	b.n	80023d6 <StartDefaultTask+0x4b6>
						  status = scaraFlowDuty(run_time);
 8002312:	ed97 0ae0 	vldr	s0, [r7, #896]	; 0x380
 8002316:	f002 fb43 	bl	80049a0 <scaraFlowDuty>
 800231a:	4603      	mov	r3, r0
 800231c:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
						  if ( SCARA_STATUS_OK == status) {
 8002320:	f897 3373 	ldrb.w	r3, [r7, #883]	; 0x373
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11b      	bne.n	8002360 <StartDefaultTask+0x440>
							  scaraPosition2String((char *)position, positionCurrent);
 8002328:	4e6f      	ldr	r6, [pc, #444]	; (80024e8 <StartDefaultTask+0x5c8>)
 800232a:	f507 7c18 	add.w	ip, r7, #608	; 0x260
 800232e:	466d      	mov	r5, sp
 8002330:	f106 040c 	add.w	r4, r6, #12
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002344:	4660      	mov	r0, ip
 8002346:	f003 febd 	bl	80060c4 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 800234a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800234e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002352:	2100      	movs	r1, #0
 8002354:	2004      	movs	r0, #4
 8002356:	f7ff f9b3 	bl	80016c0 <commandRespond>
 800235a:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
			  break;
 800235e:	e03a      	b.n	80023d6 <StartDefaultTask+0x4b6>
							  current_state = SCARA_DUTY_STATE_FINISH;
 8002360:	2303      	movs	r3, #3
 8002362:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
							  infor_lenght = commandRespond(RPD_STOP,
 8002366:	f897 3373 	ldrb.w	r3, [r7, #883]	; 0x373
															(char *)DETAIL_STATUS[status],
 800236a:	4a60      	ldr	r2, [pc, #384]	; (80024ec <StartDefaultTask+0x5cc>)
 800236c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 8002370:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002374:	2100      	movs	r1, #0
 8002376:	2006      	movs	r0, #6
 8002378:	f7ff f9a2 	bl	80016c0 <commandRespond>
 800237c:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
							  LOG_REPORT("STOP", __LINE__);
 8002380:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002384:	485a      	ldr	r0, [pc, #360]	; (80024f0 <StartDefaultTask+0x5d0>)
 8002386:	f7ff f9eb 	bl	8001760 <LOG_REPORT>
			  break;
 800238a:	e024      	b.n	80023d6 <StartDefaultTask+0x4b6>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  current_state = SCARA_DUTY_STATE_READY;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3386 	strb.w	r3, [r7, #902]	; 0x386
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 8002392:	4e55      	ldr	r6, [pc, #340]	; (80024e8 <StartDefaultTask+0x5c8>)
 8002394:	f507 7c18 	add.w	ip, r7, #608	; 0x260
 8002398:	466d      	mov	r5, sp
 800239a:	f106 040c 	add.w	r4, r6, #12
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80023ae:	4660      	mov	r0, ip
 80023b0:	f003 fe88 	bl	80060c4 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 80023b4:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80023b8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80023bc:	2100      	movs	r1, #0
 80023be:	2005      	movs	r0, #5
 80023c0:	f7ff f97e 	bl	80016c0 <commandRespond>
 80023c4:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 80023c8:	e005      	b.n	80023d6 <StartDefaultTask+0x4b6>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80023ca:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80023ce:	4849      	ldr	r0, [pc, #292]	; (80024f4 <StartDefaultTask+0x5d4>)
 80023d0:	f7ff f9c6 	bl	8001760 <LOG_REPORT>
					  while(1);
 80023d4:	e7fe      	b.n	80023d4 <StartDefaultTask+0x4b4>
				  }
			  }

		  }
		  break;
 80023d6:	e005      	b.n	80023e4 <StartDefaultTask+0x4c4>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80023d8:	f240 119d 	movw	r1, #413	; 0x19d
 80023dc:	4846      	ldr	r0, [pc, #280]	; (80024f8 <StartDefaultTask+0x5d8>)
 80023de:	f7ff f9bf 	bl	8001760 <LOG_REPORT>
			  while(1);
 80023e2:	e7fe      	b.n	80023e2 <StartDefaultTask+0x4c2>
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <StartDefaultTask+0x5dc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00a fd97 	bl	800cf20 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 80023f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fa:	4619      	mov	r1, r3
 80023fc:	4840      	ldr	r0, [pc, #256]	; (8002500 <StartDefaultTask+0x5e0>)
 80023fe:	f000 fcf8 	bl	8002df2 <ringBuff_PopArray>
 8002402:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  osMutexRelease(usbTxMutexHandle);
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <StartDefaultTask+0x5dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f00a fdd6 	bl	800cfbc <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002410:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002414:	2b00      	cmp	r3, #0
 8002416:	dd13      	ble.n	8002440 <StartDefaultTask+0x520>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002418:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800241c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002420:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fc0d 	bl	8001c44 <packPayload>
 800242a:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 800242e:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8002432:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4618      	mov	r0, r3
 800243c:	f00e f990 	bl	8010760 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002440:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd0b      	ble.n	8002460 <StartDefaultTask+0x540>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002448:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800244c:	f107 0208 	add.w	r2, r7, #8
 8002450:	4413      	add	r3, r2
 8002452:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8002456:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800245a:	4618      	mov	r0, r3
 800245c:	f00e f980 	bl	8010760 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002460:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002464:	2b00      	cmp	r3, #0
 8002466:	dd19      	ble.n	800249c <StartDefaultTask+0x57c>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002468:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800246c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002470:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fbe5 	bl	8001c44 <packPayload>
 800247a:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 800247e:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8002482:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002486:	4413      	add	r3, r2
 8002488:	f107 0208 	add.w	r2, r7, #8
 800248c:	4413      	add	r3, r2
 800248e:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8002492:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002496:	4618      	mov	r0, r3
 8002498:	f00e f962 	bl	8010760 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 800249c:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80024a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80024a4:	4413      	add	r3, r2
 80024a6:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 80024aa:	4413      	add	r3, r2
 80024ac:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  // Send through USB
	  if (usb_lenght > 0) {
 80024b0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dd08      	ble.n	80024ca <StartDefaultTask+0x5aa>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 80024b8:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80024bc:	b29a      	uxth	r2, r3
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00d fcdd 	bl	800fe84 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 80024ca:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fd96 	bl	8006000 <scaraSetMode>
	  scaraSetDutyState(current_state);
 80024d4:	f897 3386 	ldrb.w	r3, [r7, #902]	; 0x386
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fd71 	bl	8005fc0 <scaraSetDutyState>

    osDelay(10);
 80024de:	200a      	movs	r0, #10
 80024e0:	f00a fcf1 	bl	800cec6 <osDelay>
	  respond_lenght		= 0;
 80024e4:	e554      	b.n	8001f90 <StartDefaultTask+0x70>
 80024e6:	bf00      	nop
 80024e8:	20005790 	.word	0x20005790
 80024ec:	20000c80 	.word	0x20000c80
 80024f0:	08015cf0 	.word	0x08015cf0
 80024f4:	08015cf8 	.word	0x08015cf8
 80024f8:	08015d08 	.word	0x08015d08
 80024fc:	200052d8 	.word	0x200052d8
 8002500:	20000460 	.word	0x20000460

08002504 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800250a:	af20      	add	r7, sp, #128	; 0x80
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	6018      	str	r0, [r3, #0]
	//uint8_t test_command1[60] = "(1 ROTA 3 0.785398 0.3 0 0.3)";
	//uint8_t test_command2[60] = "(456 OUTP 1)";

	//ringBuff_PushArray(&usb_rx_ringbuff, test_command1, strlen((char *)test_command1));
	//ringBuff_PushArray(&usb_rx_ringbuff, test_command2, strlen((char *)test_command2));
	no_duty	 = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	no_other = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 800251c:	2129      	movs	r1, #41	; 0x29
 800251e:	4883      	ldr	r0, [pc, #524]	; (800272c <Start_USB_RX_Task+0x228>)
 8002520:	f000 fc88 	bl	8002e34 <ringBuff_DistanceOf>
 8002524:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
		  if ( -1 != distance ) {
 8002528:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d0f4      	beq.n	800251c <Start_USB_RX_Task+0x18>
 8002532:	466b      	mov	r3, sp
 8002534:	461d      	mov	r5, r3
			  LOG_REPORT("NEW PACKET", __LINE__);
 8002536:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800253a:	487d      	ldr	r0, [pc, #500]	; (8002730 <Start_USB_RX_Task+0x22c>)
 800253c:	f7ff f910 	bl	8001760 <LOG_REPORT>
			  uint8_t temp[distance+1];
 8002540:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002544:	1c58      	adds	r0, r3, #1
 8002546:	1e43      	subs	r3, r0, #1
 8002548:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800254c:	4603      	mov	r3, r0
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f04f 0400 	mov.w	r4, #0
 800255c:	00d4      	lsls	r4, r2, #3
 800255e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002562:	00cb      	lsls	r3, r1, #3
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	00d4      	lsls	r4, r2, #3
 8002576:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800257a:	00cb      	lsls	r3, r1, #3
 800257c:	4603      	mov	r3, r0
 800257e:	3307      	adds	r3, #7
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	ebad 0d03 	sub.w	sp, sp, r3
 8002588:	ab20      	add	r3, sp, #128	; 0x80
 800258a:	3300      	adds	r3, #0
 800258c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002590:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002594:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002598:	3301      	adds	r3, #1
 800259a:	461a      	mov	r2, r3
 800259c:	4863      	ldr	r0, [pc, #396]	; (800272c <Start_USB_RX_Task+0x228>)
 800259e:	f000 fc28 	bl	8002df2 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 80025a2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80025a6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80025aa:	3301      	adds	r3, #1
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7ff fbb2 	bl	8001d18 <unPackPayload>
 80025b4:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			  if( -1 == ret) {
 80025b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d105      	bne.n	80025ce <Start_USB_RX_Task+0xca>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 80025c2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80025c6:	485b      	ldr	r0, [pc, #364]	; (8002734 <Start_USB_RX_Task+0x230>)
 80025c8:	f7ff f8ca 	bl	8001760 <LOG_REPORT>
 80025cc:	e0ab      	b.n	8002726 <Start_USB_RX_Task+0x222>
			  } else {
				  LOG_REPORT("UNPACK SUCCESS", __LINE__);
 80025ce:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80025d2:	4859      	ldr	r0, [pc, #356]	; (8002738 <Start_USB_RX_Task+0x234>)
 80025d4:	f7ff f8c4 	bl	8001760 <LOG_REPORT>
				  LOG_REPORT((char*) temp, __LINE__);
 80025d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025dc:	f240 11f1 	movw	r1, #497	; 0x1f1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f8bd 	bl	8001760 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 80025e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025ea:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80025ee:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fcd8 	bl	8000fa8 <commandRead>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
				  memset(detail, 0, sizeof(detail));
 80025fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002602:	2255      	movs	r2, #85	; 0x55
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f00e f8ce 	bl	80107a8 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 800260c:	f897 41cb 	ldrb.w	r4, [r7, #459]	; 0x1cb
 8002610:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002614:	931e      	str	r3, [sp, #120]	; 0x78
 8002616:	4668      	mov	r0, sp
 8002618:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800261c:	2278      	movs	r2, #120	; 0x78
 800261e:	4619      	mov	r1, r3
 8002620:	f00e f89e 	bl	8010760 <memcpy>
 8002624:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262a:	4620      	mov	r0, r4
 800262c:	f7fe ff1c 	bl	8001468 <commandReply>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca

				  if ( RPD_DUTY == rpd_type) {
 8002636:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 800263a:	2b09      	cmp	r3, #9
 800263c:	d130      	bne.n	80026a0 <Start_USB_RX_Task+0x19c>
					  no_duty++;
 800263e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002642:	3301      	adds	r3, #1
 8002644:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					  // Wait allocate
					  while (dataMail == NULL) {
 800264e:	e008      	b.n	8002662 <Start_USB_RX_Task+0x15e>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <Start_USB_RX_Task+0x238>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	4618      	mov	r0, r3
 800265a:	f00a fe3d 	bl	800d2d8 <osMailAlloc>
 800265e:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
					  while (dataMail == NULL) {
 8002662:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f2      	beq.n	8002650 <Start_USB_RX_Task+0x14c>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800266a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800266e:	2284      	movs	r2, #132	; 0x84
 8002670:	4619      	mov	r1, r3
 8002672:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 8002676:	f00e f873 	bl	8010760 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <Start_USB_RX_Task+0x238>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8002682:	4618      	mov	r0, r3
 8002684:	f00a fe3e 	bl	800d304 <osMailPut>
 8002688:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
					  if (osOK == result) {
 800268c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002690:	2b00      	cmp	r3, #0
 8002692:	d148      	bne.n	8002726 <Start_USB_RX_Task+0x222>
						  LOG_REPORT("DUTY SEND", __LINE__);
 8002694:	f240 2102 	movw	r1, #514	; 0x202
 8002698:	4829      	ldr	r0, [pc, #164]	; (8002740 <Start_USB_RX_Task+0x23c>)
 800269a:	f7ff f861 	bl	8001760 <LOG_REPORT>
 800269e:	e042      	b.n	8002726 <Start_USB_RX_Task+0x222>
					  }

				  } else {
					  no_other++;
 80026a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80026a4:	3301      	adds	r3, #1
 80026a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
					  memset(respond, 0, sizeof(respond));
 80026aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026ae:	2264      	movs	r2, #100	; 0x64
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00e f878 	bl	80107a8 <memset>
					  memset(message, 0, sizeof(message));
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	226e      	movs	r2, #110	; 0x6e
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00e f871 	bl	80107a8 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 80026c6:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80026ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026ce:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80026d2:	f897 01ca 	ldrb.w	r0, [r7, #458]	; 0x1ca
 80026d6:	f7fe fff3 	bl	80016c0 <commandRespond>
 80026da:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 80026de:	f107 0108 	add.w	r1, r7, #8
 80026e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026e6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff faaa 	bl	8001c44 <packPayload>
 80026f0:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <Start_USB_RX_Task+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00a fc0f 	bl	800cf20 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800270a:	4619      	mov	r1, r3
 800270c:	480e      	ldr	r0, [pc, #56]	; (8002748 <Start_USB_RX_Task+0x244>)
 800270e:	f000 fb48 	bl	8002da2 <ringBuff_PushArray>
					  LOG_REPORT("ADD RINGBUFF", __LINE__);
 8002712:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <Start_USB_RX_Task+0x248>)
 8002718:	f7ff f822 	bl	8001760 <LOG_REPORT>
					  osMutexRelease(usbTxMutexHandle);
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <Start_USB_RX_Task+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f00a fc4b 	bl	800cfbc <osMutexRelease>
 8002726:	46ad      	mov	sp, r5
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002728:	e6f8      	b.n	800251c <Start_USB_RX_Task+0x18>
 800272a:	bf00      	nop
 800272c:	20000054 	.word	0x20000054
 8002730:	08015d18 	.word	0x08015d18
 8002734:	08015d24 	.word	0x08015d24
 8002738:	08015d30 	.word	0x08015d30
 800273c:	200052dc 	.word	0x200052dc
 8002740:	08015d40 	.word	0x08015d40
 8002744:	200052d8 	.word	0x200052d8
 8002748:	20000460 	.word	0x20000460
 800274c:	08015d4c 	.word	0x08015d4c

08002750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_GPIO_Init+0x4c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <MX_GPIO_Init+0x4c>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <MX_GPIO_Init+0x4c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_GPIO_Init+0x4c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <MX_GPIO_Init+0x4c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_GPIO_Init+0x4c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <kinematicForward>:
 */

#include "kinematic.h"
#include "math.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	ed2d 8b02 	vpush	{d8}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	float x, y, z, roll;

	x =   a1*cosf(pnt->Theta1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80027b2:	eeb0 0a67 	vmov.f32	s0, s15
 80027b6:	f012 f9c3 	bl	8014b40 <cosf>
 80027ba:	eeb0 7a40 	vmov.f32	s14, s0
 80027be:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80028fc <kinematicForward+0x15c>
 80027c2:	ee27 8a27 	vmul.f32	s16, s14, s15
		+ a2*cosf(pnt->Theta1 + pnt->Theta2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	eeb0 0a67 	vmov.f32	s0, s15
 80027da:	f012 f9b1 	bl	8014b40 <cosf>
 80027de:	eeb0 7a40 	vmov.f32	s14, s0
 80027e2:	eddf 7a47 	vldr	s15, [pc, #284]	; 8002900 <kinematicForward+0x160>
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	ee38 8a27 	vadd.f32	s16, s16, s15
		+ a4*cosf(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002808:	eeb0 0a67 	vmov.f32	s0, s15
 800280c:	f012 f998 	bl	8014b40 <cosf>
 8002810:	eeb0 7a40 	vmov.f32	s14, s0
 8002814:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002818:	ee67 7a27 	vmul.f32	s15, s14, s15
	x =   a1*cosf(pnt->Theta1)
 800281c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002820:	edc7 7a05 	vstr	s15, [r7, #20]
	y =   a1*sinf(pnt->Theta1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a08 	vldr	s15, [r3, #32]
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	f012 f9c7 	bl	8014bc0 <sinf>
 8002832:	eeb0 7a40 	vmov.f32	s14, s0
 8002836:	eddf 7a31 	vldr	s15, [pc, #196]	; 80028fc <kinematicForward+0x15c>
 800283a:	ee27 8a27 	vmul.f32	s16, s14, s15
		+ a2*sinf(pnt->Theta1 + pnt->Theta2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	ed93 7a08 	vldr	s14, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284e:	eeb0 0a67 	vmov.f32	s0, s15
 8002852:	f012 f9b5 	bl	8014bc0 <sinf>
 8002856:	eeb0 7a40 	vmov.f32	s14, s0
 800285a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8002900 <kinematicForward+0x160>
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	ee38 8a27 	vadd.f32	s16, s16, s15
		+ a4*sinf(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	ed93 7a08 	vldr	s14, [r3, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800287c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002880:	eeb0 0a67 	vmov.f32	s0, s15
 8002884:	f012 f99c 	bl	8014bc0 <sinf>
 8002888:	eeb0 7a40 	vmov.f32	s14, s0
 800288c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002890:	ee67 7a27 	vmul.f32	s15, s14, s15
	y =   a1*sinf(pnt->Theta1)
 8002894:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002898:	edc7 7a04 	vstr	s15, [r7, #16]
	z =   d1 - pnt->D3 - d4;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80028a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002904 <kinematicForward+0x164>
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002908 <kinematicForward+0x168>
 80028ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028b2:	edc7 7a03 	vstr	s15, [r7, #12]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	edc7 7a02 	vstr	s15, [r7, #8]

	pnt->x = x;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	611a      	str	r2, [r3, #16]
	pnt->y = y;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	615a      	str	r2, [r3, #20]
	pnt->z = z;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	619a      	str	r2, [r3, #24]
	pnt->roll = roll;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	61da      	str	r2, [r3, #28]

	return TRUE;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	ecbd 8b02 	vpop	{d8}
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	43450000 	.word	0x43450000
 8002900:	43200000 	.word	0x43200000
 8002904:	43530000 	.word	0x43530000
 8002908:	42860000 	.word	0x42860000

0800290c <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 800290c:	b084      	sub	sp, #16
 800290e:	b580      	push	{r7, lr}
 8002910:	ed2d 8b02 	vpush	{d8}
 8002914:	b092      	sub	sp, #72	; 0x48
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800291e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	float s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	edd3 7a06 	vldr	s15, [r3, #24]
 8002928:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002b80 <kinematicInverse+0x274>
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	pWx = pnt->x - a4*cosf(pnt->roll);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	ed93 8a04 	vldr	s16, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002940:	eeb0 0a67 	vmov.f32	s0, s15
 8002944:	f012 f8fc 	bl	8014b40 <cosf>
 8002948:	eeb0 7a40 	vmov.f32	s14, s0
 800294c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002958:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	pWy = pnt->y - a4*sinf(pnt->roll);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	ed93 8a05 	vldr	s16, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edd3 7a07 	vldr	s15, [r3, #28]
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	f012 f928 	bl	8014bc0 <sinf>
 8002970:	eeb0 7a40 	vmov.f32	s14, s0
 8002974:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002980:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8002984:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002988:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002994:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002b84 <kinematicInverse+0x278>
 80029a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029a8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002b88 <kinematicInverse+0x27c>
 80029ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029b0:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002b8c <kinematicInverse+0x280>
 80029b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	temp = 1 - c2*c2;
 80029bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80029c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if ( temp < 0 ) {
 80029d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d501      	bpl.n	80029e6 <kinematicInverse+0xda>
		return FALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e0c2      	b.n	8002b6c <kinematicInverse+0x260>
	}
	s2_positive  = sqrtf(temp); // Note that there are 2 solution: elbow up & elbow down
 80029e6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80029ea:	f012 f92d 	bl	8014c48 <sqrtf>
 80029ee:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	s2_negative	 = -s2_positive;
 80029f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029f6:	eef1 7a67 	vneg.f32	s15, s15
 80029fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	theta2_positive = atan2f(s2_positive,c2);
 80029fe:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a02:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002a06:	f012 f91d 	bl	8014c44 <atan2f>
 8002a0a:	ed87 0a08 	vstr	s0, [r7, #32]
	theta2_negative = atan2f(s2_negative,c2);
 8002a0e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a12:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a16:	f012 f915 	bl	8014c44 <atan2f>
 8002a1a:	ed87 0a07 	vstr	s0, [r7, #28]
	// Choose relevant situation : nearest
	if ( fabsf( theta2_positive - current.Theta2) <= fabsf( theta2_negative - current.Theta2)) {
 8002a1e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a22:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a2e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d804      	bhi.n	8002a52 <kinematicInverse+0x146>
		s2 		= s2_positive;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
		theta2 	= theta2_positive;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a50:	e003      	b.n	8002a5a <kinematicInverse+0x14e>
	} else {
		s2 		= s2_negative;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
		theta2 	= theta2_negative;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8002a5a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a5e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002b90 <kinematicInverse+0x284>
 8002a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a66:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002b94 <kinematicInverse+0x288>
 8002a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a7a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002b90 <kinematicInverse+0x284>
 8002a7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a8e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9a:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002a9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002aa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aae:	edc7 7a06 	vstr	s15, [r7, #24]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8002ab2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ab6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002b90 <kinematicInverse+0x284>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002b94 <kinematicInverse+0x288>
 8002ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ac6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ace:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ad2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002b90 <kinematicInverse+0x284>
 8002ad6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ada:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae2:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002ae6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002aea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af2:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002af6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002afa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b06:	edc7 7a05 	vstr	s15, [r7, #20]
	theta1 = atan2f(s1,c1);
 8002b0a:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b0e:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b12:	f012 f897 	bl	8014c44 <atan2f>
 8002b16:	ed87 0a04 	vstr	s0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8002b1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b30:	edc7 7a03 	vstr	s15, [r7, #12]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8002b34:	edd7 1a03 	vldr	s3, [r7, #12]
 8002b38:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8002b3c:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8002b40:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b44:	f003 f940 	bl	8005dc8 <scaraCheckWorkSpace4>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <kinematicInverse+0x246>
		return FALSE; // Over workspace !!!
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e00c      	b.n	8002b6c <kinematicInverse+0x260>
	}
	pnt->Theta1 = theta1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	621a      	str	r2, [r3, #32]
	pnt->Theta2 = theta2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
	pnt->D3		= d3;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
	pnt->Theta4 = theta4;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

	return TRUE; // All is well
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3748      	adds	r7, #72	; 0x48
 8002b70:	46bd      	mov	sp, r7
 8002b72:	ecbd 8b02 	vpop	{d8}
 8002b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b7a:	b004      	add	sp, #16
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	43100000 	.word	0x43100000
 8002b84:	47179900 	.word	0x47179900
 8002b88:	46c80000 	.word	0x46c80000
 8002b8c:	47764000 	.word	0x47764000
 8002b90:	43200000 	.word	0x43200000
 8002b94:	43450000 	.word	0x43450000

08002b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b9c:	f003 fd24 	bl	80065e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba0:	f000 f80c 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ba4:	f7ff fdd4 	bl	8002750 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ba8:	f7ff f92c 	bl	8001e04 <MX_DMA_Init>
  MX_UART4_Init();
 8002bac:	f003 fc1e 	bl	80063ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002bb0:	f7ff f962 	bl	8001e78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bb4:	f00a f934 	bl	800ce20 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <main+0x20>
	...

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	; 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f00d fdec 	bl	80107a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <SystemClock_Config+0xcc>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <SystemClock_Config+0xcc>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <SystemClock_Config+0xcc>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <SystemClock_Config+0xd0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c22:	2302      	movs	r3, #2
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c36:	2302      	movs	r3, #2
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3e:	f107 0320 	add.w	r3, r7, #32
 8002c42:	4618      	mov	r0, r3
 8002c44:	f005 fcd8 	bl	80085f8 <HAL_RCC_OscConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c4e:	f000 f831 	bl	8002cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c52:	230f      	movs	r3, #15
 8002c54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c56:	2302      	movs	r3, #2
 8002c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	2105      	movs	r1, #5
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 ff31 	bl	8008ad8 <HAL_RCC_ClockConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c7c:	f000 f81a 	bl	8002cb4 <Error_Handler>
  }
}
 8002c80:	bf00      	nop
 8002c82:	3750      	adds	r7, #80	; 0x50
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ca2:	f003 fcc3 	bl	800662c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40001000 	.word	0x40001000

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <ringBuff_PushChar+0x1a>
		return FALSE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e024      	b.n	8002d26 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	78f9      	ldrb	r1, [r7, #3]
 8002ce6:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002cee:	3301      	adds	r3, #1
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002cfa:	bf58      	it	pl
 8002cfc:	4253      	negpl	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d103      	bne.n	8002d1c <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8002d24:	2301      	movs	r3, #1
	}
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <ringBuff_PopChar+0x18>
		return FALSE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e025      	b.n	8002d96 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	5cd2      	ldrb	r2, [r2, r3]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d5e:	3301      	adds	r3, #1
 8002d60:	425a      	negs	r2, r3
 8002d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d66:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d6a:	bf58      	it	pl
 8002d6c:	4253      	negpl	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d103      	bne.n	8002d8c <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8002d94:	2301      	movs	r3, #1
	}
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8002dae:	2300      	movs	r3, #0
 8002db0:	82fb      	strh	r3, [r7, #22]
 8002db2:	e011      	b.n	8002dd8 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8002db4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff ff7e 	bl	8002cc2 <ringBuff_PushChar>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8002dcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	82fb      	strh	r3, [r7, #22]
 8002dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dce8      	bgt.n	8002db4 <ringBuff_PushArray+0x12>
 8002de2:	e000      	b.n	8002de6 <ringBuff_PushArray+0x44>
			break;
 8002de4:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8002de6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e00c      	b.n	8002e1e <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff90 	bl	8002d32 <ringBuff_PopChar>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dbee      	blt.n	8002e04 <ringBuff_PopArray+0x12>
 8002e26:	e000      	b.n	8002e2a <ringBuff_PopArray+0x38>
			break;
 8002e28:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8002e2a:	697b      	ldr	r3, [r7, #20]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002e4a:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	e018      	b.n	8002e8e <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4413      	add	r3, r2
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d101      	bne.n	8002e6e <ringBuff_DistanceOf+0x3a>
					return distance;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	e037      	b.n	8002ede <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	3301      	adds	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	425a      	negs	r2, r3
 8002e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e84:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002e88:	bf58      	it	pl
 8002e8a:	4253      	negpl	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	dbe2      	blt.n	8002e5c <ringBuff_DistanceOf+0x28>
 8002e96:	e020      	b.n	8002eda <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d101      	bne.n	8002eaa <ringBuff_DistanceOf+0x76>
					return distance;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	e019      	b.n	8002ede <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	3301      	adds	r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ebe:	bf58      	it	pl
 8002ec0:	4253      	negpl	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1e3      	bne.n	8002e98 <ringBuff_DistanceOf+0x64>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0de      	beq.n	8002e98 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <scaraInitDuty>:
											 "Wrong Coordinate"
											};



SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8002eec:	b084      	sub	sp, #16
 8002eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef0:	b0bd      	sub	sp, #244	; 0xf4
 8002ef2:	af22      	add	r7, sp, #136	; 0x88
 8002ef4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8002efc:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 8233 	bne.w	800336c <scaraInitDuty+0x480>
		float total_s, angle_s, dir_angle;
		SCARA_PositionTypeDef	target_point;

		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8002f06:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d124      	bne.n	8002f58 <scaraInitDuty+0x6c>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8002f0e:	4bb8      	ldr	r3, [pc, #736]	; (80031f0 <scaraInitDuty+0x304>)
 8002f10:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f14:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1c:	edc7 7a05 	vstr	s15, [r7, #20]
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8002f20:	4bb3      	ldr	r3, [pc, #716]	; (80031f0 <scaraInitDuty+0x304>)
 8002f22:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f26:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	edc7 7a06 	vstr	s15, [r7, #24]
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8002f32:	4baf      	ldr	r3, [pc, #700]	; (80031f0 <scaraInitDuty+0x304>)
 8002f34:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f38:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f40:	edc7 7a07 	vstr	s15, [r7, #28]
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8002f44:	4baa      	ldr	r3, [pc, #680]	; (80031f0 <scaraInitDuty+0x304>)
 8002f46:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f4a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	edc7 7a08 	vstr	s15, [r7, #32]
 8002f56:	e013      	b.n	8002f80 <scaraInitDuty+0x94>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8002f58:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10c      	bne.n	8002f7a <scaraInitDuty+0x8e>
			target_point.x 		= command.target_point.x;
 8002f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f64:	617b      	str	r3, [r7, #20]
			target_point.y 		= command.target_point.y;
 8002f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f6a:	61bb      	str	r3, [r7, #24]
			target_point.z 		= command.target_point.z;
 8002f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f70:	61fb      	str	r3, [r7, #28]
			target_point.roll	= command.target_point.roll;
 8002f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	e002      	b.n	8002f80 <scaraInitDuty+0x94>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	f000 bfb0 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8002f80:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f84:	4b9a      	ldr	r3, [pc, #616]	; (80031f0 <scaraInitDuty+0x304>)
 8002f86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		dir_angle = 1;
 8002f92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f96:	65bb      	str	r3, [r7, #88]	; 0x58
		if ( angle_s < 0) {
 8002f98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d501      	bpl.n	8002faa <scaraInitDuty+0xbe>
			dir_angle = -1;
 8002fa6:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <scaraInitDuty+0x308>)
 8002fa8:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if ( fabsf(angle_s) > PI) {
 8002faa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002fae:	eef0 7ae7 	vabs.f32	s15, s15
 8002fb2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80031f8 <scaraInitDuty+0x30c>
 8002fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	dd13      	ble.n	8002fe8 <scaraInitDuty+0xfc>
			dir_angle = -dir_angle;
 8002fc0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fc4:	eef1 7a67 	vneg.f32	s15, s15
 8002fc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8002fcc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002fd0:	eef0 7ae7 	vabs.f32	s15, s15
 8002fd4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80031fc <scaraInitDuty+0x310>
 8002fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fdc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <scaraInitDuty+0x314>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8002fee:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <scaraInitDuty+0x304>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a83      	ldr	r2, [pc, #524]	; (8003200 <scaraInitDuty+0x314>)
 8002ff4:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8002ff8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d122      	bne.n	8003046 <scaraInitDuty+0x15a>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8003000:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <scaraInitDuty+0x314>)
 8003002:	2200      	movs	r2, #0
 8003004:	711a      	strb	r2, [r3, #4]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8003006:	4e7a      	ldr	r6, [pc, #488]	; (80031f0 <scaraInitDuty+0x304>)
 8003008:	ad09      	add	r5, sp, #36	; 0x24
 800300a:	1d3c      	adds	r4, r7, #4
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003018:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800301c:	466d      	mov	r5, sp
 800301e:	f106 040c 	add.w	r4, r6, #12
 8003022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003032:	4874      	ldr	r0, [pc, #464]	; (8003204 <scaraInitDuty+0x318>)
 8003034:	f000 ff60 	bl	8003ef8 <scaraInitLine>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			total_s = myDUTY.task.path.line.total_s;
 800303e:	4b70      	ldr	r3, [pc, #448]	; (8003200 <scaraInitDuty+0x314>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	663b      	str	r3, [r7, #96]	; 0x60
 8003044:	e037      	b.n	80030b6 <scaraInitDuty+0x1ca>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8003046:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800304a:	2b01      	cmp	r3, #1
 800304c:	d130      	bne.n	80030b0 <scaraInitDuty+0x1c4>
			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <scaraInitDuty+0x314>)
 8003050:	2201      	movs	r2, #1
 8003052:	711a      	strb	r2, [r3, #4]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8003054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003058:	4e65      	ldr	r6, [pc, #404]	; (80031f0 <scaraInitDuty+0x304>)
 800305a:	9321      	str	r3, [sp, #132]	; 0x84
 800305c:	ad15      	add	r5, sp, #84	; 0x54
 800305e:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8003062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800306e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003072:	ad09      	add	r5, sp, #36	; 0x24
 8003074:	1d3c      	adds	r4, r7, #4
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003082:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003086:	466d      	mov	r5, sp
 8003088:	f106 040c 	add.w	r4, r6, #12
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800309c:	485a      	ldr	r0, [pc, #360]	; (8003208 <scaraInitDuty+0x31c>)
 800309e:	f000 ffb1 	bl	8004004 <scaraInitCircle>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
										positionCurrent,
										target_point,
										command.sub_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80030a8:	4b55      	ldr	r3, [pc, #340]	; (8003200 <scaraInitDuty+0x314>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	663b      	str	r3, [r7, #96]	; 0x60
 80030ae:	e002      	b.n	80030b6 <scaraInitDuty+0x1ca>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80030b0:	2303      	movs	r3, #3
 80030b2:	f000 bf15 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}

		if ( SCARA_STATUS_OK != status) {
 80030b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <scaraInitDuty+0x1da>
			return status;
 80030be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030c2:	f000 bf0d 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80030c6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 80a2 	bne.w	8003214 <scaraInitDuty+0x328>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80030d0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d12c      	bne.n	8003132 <scaraInitDuty+0x246>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80030d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030dc:	4a48      	ldr	r2, [pc, #288]	; (8003200 <scaraInitDuty+0x314>)
 80030de:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <scaraInitDuty+0x314>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80030ea:	2201      	movs	r2, #1
 80030ec:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80030f0:	2104      	movs	r1, #4
 80030f2:	4846      	ldr	r0, [pc, #280]	; (800320c <scaraInitDuty+0x320>)
 80030f4:	f001 f88c 	bl	8004210 <scaraInitLSPB>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 80030fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003102:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <scaraInitDuty+0x314>)
 8003104:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <scaraInitDuty+0x314>)
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003110:	2201      	movs	r2, #1
 8003112:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8003116:	2105      	movs	r1, #5
 8003118:	483d      	ldr	r0, [pc, #244]	; (8003210 <scaraInitDuty+0x324>)
 800311a:	f001 f879 	bl	8004210 <scaraInitLSPB>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 8003124:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <scaraInitDuty+0x314>)
 800312a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e10b      	b.n	800334a <scaraInitDuty+0x45e>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003132:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003136:	2b00      	cmp	r3, #0
 8003138:	d156      	bne.n	80031e8 <scaraInitDuty+0x2fc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <scaraInitDuty+0x314>)
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003142:	2200      	movs	r2, #0
 8003144:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003148:	2104      	movs	r1, #4
 800314a:	4830      	ldr	r0, [pc, #192]	; (800320c <scaraInitDuty+0x320>)
 800314c:	f001 f860 	bl	8004210 <scaraInitLSPB>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <scaraInitDuty+0x314>)
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800315e:	2200      	movs	r2, #0
 8003160:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8003164:	2105      	movs	r1, #5
 8003166:	482a      	ldr	r0, [pc, #168]	; (8003210 <scaraInitDuty+0x324>)
 8003168:	f001 f852 	bl	8004210 <scaraInitLSPB>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVA);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <scaraInitDuty+0x314>)
 8003174:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <scaraInitDuty+0x314>)
 800317a:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 800317e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	dd17      	ble.n	80031b8 <scaraInitDuty+0x2cc>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <scaraInitDuty+0x314>)
 800318a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <scaraInitDuty+0x314>)
 8003190:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003194:	2201      	movs	r2, #1
 8003196:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800319a:	2105      	movs	r1, #5
 800319c:	481c      	ldr	r0, [pc, #112]	; (8003210 <scaraInitDuty+0x324>)
 800319e:	f001 f837 	bl	8004210 <scaraInitLSPB>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <scaraInitDuty+0x314>)
 80031aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <scaraInitDuty+0x314>)
 80031b0:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e0c8      	b.n	800334a <scaraInitDuty+0x45e>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <scaraInitDuty+0x314>)
 80031ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <scaraInitDuty+0x314>)
 80031c0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80031c4:	2201      	movs	r2, #1
 80031c6:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80031ca:	2104      	movs	r1, #4
 80031cc:	480f      	ldr	r0, [pc, #60]	; (800320c <scaraInitDuty+0x320>)
 80031ce:	f001 f81f 	bl	8004210 <scaraInitLSPB>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <scaraInitDuty+0x314>)
 80031da:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <scaraInitDuty+0x314>)
 80031e0:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e0b0      	b.n	800334a <scaraInitDuty+0x45e>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80031e8:	2308      	movs	r3, #8
 80031ea:	f000 be79 	b.w	8003ee0 <scaraInitDuty+0xff4>
 80031ee:	bf00      	nop
 80031f0:	20005790 	.word	0x20005790
 80031f4:	bf800000 	.word	0xbf800000
 80031f8:	40490fdb 	.word	0x40490fdb
 80031fc:	40c90fdb 	.word	0x40c90fdb
 8003200:	200052e8 	.word	0x200052e8
 8003204:	200052f0 	.word	0x200052f0
 8003208:	20005328 	.word	0x20005328
 800320c:	20005374 	.word	0x20005374
 8003210:	20005420 	.word	0x20005420
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8003214:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 8093 	bne.w	8003344 <scaraInitDuty+0x458>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800321e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003222:	2b01      	cmp	r3, #1
 8003224:	d130      	bne.n	8003288 <scaraInitDuty+0x39c>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8003226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800322a:	4ace      	ldr	r2, [pc, #824]	; (8003564 <scaraInitDuty+0x678>)
 800322c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003230:	4bcc      	ldr	r3, [pc, #816]	; (8003564 <scaraInitDuty+0x678>)
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003238:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800323c:	461a      	mov	r2, r3
 800323e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003242:	2104      	movs	r1, #4
 8003244:	48c8      	ldr	r0, [pc, #800]	; (8003568 <scaraInitDuty+0x67c>)
 8003246:	f001 f9cb 	bl	80045e0 <scaraInitScurve>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, command.modeInit_type);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8003250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003254:	4ac3      	ldr	r2, [pc, #780]	; (8003564 <scaraInitDuty+0x678>)
 8003256:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800325a:	4bc2      	ldr	r3, [pc, #776]	; (8003564 <scaraInitDuty+0x678>)
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003262:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003266:	461a      	mov	r2, r3
 8003268:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800326c:	2105      	movs	r1, #5
 800326e:	48bf      	ldr	r0, [pc, #764]	; (800356c <scaraInitDuty+0x680>)
 8003270:	f001 f9b6 	bl	80045e0 <scaraInitScurve>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, command.modeInit_type);
				myDUTY.time_total = command.time_total;
 800327a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800327e:	4bb9      	ldr	r3, [pc, #740]	; (8003564 <scaraInitDuty+0x678>)
 8003280:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e060      	b.n	800334a <scaraInitDuty+0x45e>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003288:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800328c:	2b00      	cmp	r3, #0
 800328e:	d156      	bne.n	800333e <scaraInitDuty+0x452>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003290:	4bb4      	ldr	r3, [pc, #720]	; (8003564 <scaraInitDuty+0x678>)
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003298:	2200      	movs	r2, #0
 800329a:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800329e:	2104      	movs	r1, #4
 80032a0:	48b1      	ldr	r0, [pc, #708]	; (8003568 <scaraInitDuty+0x67c>)
 80032a2:	f001 f99d 	bl	80045e0 <scaraInitScurve>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80032ac:	4bad      	ldr	r3, [pc, #692]	; (8003564 <scaraInitDuty+0x678>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80032b4:	2200      	movs	r2, #0
 80032b6:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80032ba:	2105      	movs	r1, #5
 80032bc:	48ab      	ldr	r0, [pc, #684]	; (800356c <scaraInitDuty+0x680>)
 80032be:	f001 f98f 	bl	80045e0 <scaraInitScurve>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVA);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80032c8:	4ba6      	ldr	r3, [pc, #664]	; (8003564 <scaraInitDuty+0x678>)
 80032ca:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80032ce:	4ba5      	ldr	r3, [pc, #660]	; (8003564 <scaraInitDuty+0x678>)
 80032d0:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80032d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	dd17      	ble.n	800330e <scaraInitDuty+0x422>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80032de:	4ba1      	ldr	r3, [pc, #644]	; (8003564 <scaraInitDuty+0x678>)
 80032e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80032e4:	4a9f      	ldr	r2, [pc, #636]	; (8003564 <scaraInitDuty+0x678>)
 80032e6:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80032ea:	2201      	movs	r2, #1
 80032ec:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80032f0:	2105      	movs	r1, #5
 80032f2:	489e      	ldr	r0, [pc, #632]	; (800356c <scaraInitDuty+0x680>)
 80032f4:	f001 f974 	bl	80045e0 <scaraInitScurve>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80032fe:	4b99      	ldr	r3, [pc, #612]	; (8003564 <scaraInitDuty+0x678>)
 8003300:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003304:	4b97      	ldr	r3, [pc, #604]	; (8003564 <scaraInitDuty+0x678>)
 8003306:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e01d      	b.n	800334a <scaraInitDuty+0x45e>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800330e:	4b95      	ldr	r3, [pc, #596]	; (8003564 <scaraInitDuty+0x678>)
 8003310:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003314:	4a93      	ldr	r2, [pc, #588]	; (8003564 <scaraInitDuty+0x678>)
 8003316:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800331a:	2201      	movs	r2, #1
 800331c:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003320:	2104      	movs	r1, #4
 8003322:	4891      	ldr	r0, [pc, #580]	; (8003568 <scaraInitDuty+0x67c>)
 8003324:	f001 f95c 	bl	80045e0 <scaraInitScurve>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <scaraInitDuty+0x678>)
 8003330:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003334:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <scaraInitDuty+0x678>)
 8003336:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e005      	b.n	800334a <scaraInitDuty+0x45e>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800333e:	2308      	movs	r3, #8
 8003340:	f000 bdce 	b.w	8003ee0 <scaraInitDuty+0xff4>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8003344:	2305      	movs	r3, #5
 8003346:	f000 bdcb 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800334a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <scaraInitDuty+0x46e>
			return status1;
 8003352:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003356:	f000 bdc3 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}
		if ( SCARA_STATUS_OK != status2) {
 800335a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 85bd 	beq.w	8003ede <scaraInitDuty+0xff2>
			return status2;
 8003364:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003368:	f000 bdba 	b.w	8003ee0 <scaraInitDuty+0xff4>
		}

	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800336c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 85b2 	bne.w	8003eda <scaraInitDuty+0xfee>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8003376:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <scaraInitDuty+0x678>)
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800337c:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <scaraInitDuty+0x684>)
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	4b78      	ldr	r3, [pc, #480]	; (8003564 <scaraInitDuty+0x678>)
 8003382:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8003386:	601a      	str	r2, [r3, #0]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8003388:	4b79      	ldr	r3, [pc, #484]	; (8003570 <scaraInitDuty+0x684>)
 800338a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <scaraInitDuty+0x678>)
 800338e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003392:	601a      	str	r2, [r3, #0]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8003394:	4b76      	ldr	r3, [pc, #472]	; (8003570 <scaraInitDuty+0x684>)
 8003396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003398:	4b72      	ldr	r3, [pc, #456]	; (8003564 <scaraInitDuty+0x678>)
 800339a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800339e:	601a      	str	r2, [r3, #0]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <scaraInitDuty+0x684>)
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <scaraInitDuty+0x678>)
 80033a6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80033aa:	601a      	str	r2, [r3, #0]
		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80033ac:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 82e5 	bne.w	8003980 <scaraInitDuty+0xa94>
			// Trajectory 1 profile
			float s, abs_position;
			switch(command.sub_para_int) {
 80033b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	f200 80e5 	bhi.w	800358a <scaraInitDuty+0x69e>
 80033c0:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <scaraInitDuty+0x4dc>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	08003443 	.word	0x08003443
 80033d0:	080034ab 	.word	0x080034ab
 80033d4:	08003513 	.word	0x08003513
			case 0:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80033d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10e      	bne.n	80033fe <scaraInitDuty+0x512>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_float;
 80033e0:	4b60      	ldr	r3, [pc, #384]	; (8003564 <scaraInitDuty+0x678>)
 80033e2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 80033f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	e015      	b.n	800342a <scaraInitDuty+0x53e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80033fe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <scaraInitDuty+0x538>
					abs_position = command.sub_para_float;
 8003406:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta1_start;
 800340c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003410:	4b54      	ldr	r3, [pc, #336]	; (8003564 <scaraInitDuty+0x678>)
 8003412:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8003422:	e002      	b.n	800342a <scaraInitDuty+0x53e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003424:	230c      	movs	r3, #12
 8003426:	f000 bd5b 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 800342a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800342e:	2000      	movs	r0, #0
 8003430:	f002 fd38 	bl	8005ea4 <scaraCheckWorkSpace1>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80aa 	beq.w	8003590 <scaraInitDuty+0x6a4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800343c:	2307      	movs	r3, #7
 800343e:	f000 bd4f 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}
				break;
			case 1:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003442:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003446:	2b01      	cmp	r3, #1
 8003448:	d10e      	bne.n	8003468 <scaraInitDuty+0x57c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_float;
 800344a:	4b46      	ldr	r3, [pc, #280]	; (8003564 <scaraInitDuty+0x678>)
 800344c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 8003460:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003464:	657b      	str	r3, [r7, #84]	; 0x54
 8003466:	e015      	b.n	8003494 <scaraInitDuty+0x5a8>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003468:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10e      	bne.n	800348e <scaraInitDuty+0x5a2>
					abs_position = command.sub_para_float;
 8003470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta2_start;
 8003476:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800347a:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <scaraInitDuty+0x678>)
 800347c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003488:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800348c:	e002      	b.n	8003494 <scaraInitDuty+0x5a8>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800348e:	230c      	movs	r3, #12
 8003490:	f000 bd26 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8003494:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003498:	2001      	movs	r0, #1
 800349a:	f002 fd03 	bl	8005ea4 <scaraCheckWorkSpace1>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d077      	beq.n	8003594 <scaraInitDuty+0x6a8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80034a4:	2307      	movs	r3, #7
 80034a6:	f000 bd1b 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80034aa:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10e      	bne.n	80034d0 <scaraInitDuty+0x5e4>
					abs_position = myDUTY.joint.d3_start + command.sub_para_float;
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <scaraInitDuty+0x678>)
 80034b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 80034c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034cc:	657b      	str	r3, [r7, #84]	; 0x54
 80034ce:	e015      	b.n	80034fc <scaraInitDuty+0x610>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80034d0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10e      	bne.n	80034f6 <scaraInitDuty+0x60a>
					abs_position = command.sub_para_float;
 80034d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034dc:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.d3_start;
 80034de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <scaraInitDuty+0x678>)
 80034e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80034f4:	e002      	b.n	80034fc <scaraInitDuty+0x610>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80034f6:	230c      	movs	r3, #12
 80034f8:	f000 bcf2 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 80034fc:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003500:	2002      	movs	r0, #2
 8003502:	f002 fccf 	bl	8005ea4 <scaraCheckWorkSpace1>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d045      	beq.n	8003598 <scaraInitDuty+0x6ac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800350c:	2307      	movs	r3, #7
 800350e:	f000 bce7 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}
				break;
			case 3:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003512:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10e      	bne.n	8003538 <scaraInitDuty+0x64c>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_float;
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <scaraInitDuty+0x678>)
 800351c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 8003530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003534:	657b      	str	r3, [r7, #84]	; 0x54
 8003536:	e01d      	b.n	8003574 <scaraInitDuty+0x688>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003538:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <scaraInitDuty+0x672>
					abs_position = command.sub_para_float;
 8003540:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003544:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta4_start;
 8003546:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <scaraInitDuty+0x678>)
 800354c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800355c:	e00a      	b.n	8003574 <scaraInitDuty+0x688>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800355e:	230c      	movs	r3, #12
 8003560:	f000 bcbe 	b.w	8003ee0 <scaraInitDuty+0xff4>
 8003564:	200052e8 	.word	0x200052e8
 8003568:	200053b4 	.word	0x200053b4
 800356c:	20005460 	.word	0x20005460
 8003570:	20005790 	.word	0x20005790
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8003574:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003578:	2003      	movs	r0, #3
 800357a:	f002 fc93 	bl	8005ea4 <scaraCheckWorkSpace1>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <scaraInitDuty+0x6b0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003584:	2307      	movs	r3, #7
 8003586:	f000 bcab 	b.w	8003ee0 <scaraInitDuty+0xff4>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 800358a:	230b      	movs	r3, #11
 800358c:	f000 bca8 	b.w	8003ee0 <scaraInitDuty+0xff4>
				break;
 8003590:	bf00      	nop
 8003592:	e004      	b.n	800359e <scaraInitDuty+0x6b2>
				break;
 8003594:	bf00      	nop
 8003596:	e002      	b.n	800359e <scaraInitDuty+0x6b2>
				break;
 8003598:	bf00      	nop
 800359a:	e000      	b.n	800359e <scaraInitDuty+0x6b2>
				break;
 800359c:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800359e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 80ec 	bne.w	8003780 <scaraInitDuty+0x894>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80035a8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d178      	bne.n	80036a2 <scaraInitDuty+0x7b6>
					for ( uint8_t i = 0; i < 4; i++) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80035b6:	e06f      	b.n	8003698 <scaraInitDuty+0x7ac>
						if ( i == command.sub_para_int) {
 80035b8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80035bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d12f      	bne.n	8003624 <scaraInitDuty+0x738>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80035c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035c8:	4aca      	ldr	r2, [pc, #808]	; (80038f4 <scaraInitDuty+0xa08>)
 80035ca:	21ac      	movs	r1, #172	; 0xac
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80035da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035e2:	49c4      	ldr	r1, [pc, #784]	; (80038f4 <scaraInitDuty+0xa08>)
 80035e4:	20ac      	movs	r0, #172	; 0xac
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	440b      	add	r3, r1
 80035ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035f0:	601a      	str	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80035f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035f6:	22ac      	movs	r2, #172	; 0xac
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003600:	4abc      	ldr	r2, [pc, #752]	; (80038f4 <scaraInitDuty+0xa08>)
 8003602:	4413      	add	r3, r2
 8003604:	f103 0008 	add.w	r0, r3, #8
 8003608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800360c:	4aba      	ldr	r2, [pc, #744]	; (80038f8 <scaraInitDuty+0xa0c>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	2201      	movs	r2, #1
 8003612:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8003616:	4619      	mov	r1, r3
 8003618:	f000 fdfa 	bl	8004210 <scaraInitLSPB>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003622:	e02e      	b.n	8003682 <scaraInitDuty+0x796>
											s, DUTY_MODE_INIT_QVT);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003624:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003628:	4ab2      	ldr	r2, [pc, #712]	; (80038f4 <scaraInitDuty+0xa08>)
 800362a:	21ac      	movs	r1, #172	; 0xac
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800363a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800363e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003642:	49ac      	ldr	r1, [pc, #688]	; (80038f4 <scaraInitDuty+0xa08>)
 8003644:	20ac      	movs	r0, #172	; 0xac
 8003646:	fb00 f303 	mul.w	r3, r0, r3
 800364a:	440b      	add	r3, r1
 800364c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003650:	601a      	str	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003652:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003656:	22ac      	movs	r2, #172	; 0xac
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003660:	4aa4      	ldr	r2, [pc, #656]	; (80038f4 <scaraInitDuty+0xa08>)
 8003662:	4413      	add	r3, r2
 8003664:	f103 0008 	add.w	r0, r3, #8
 8003668:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800366c:	4aa2      	ldr	r2, [pc, #648]	; (80038f8 <scaraInitDuty+0xa0c>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	2201      	movs	r2, #1
 8003672:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80038fc <scaraInitDuty+0xa10>
 8003676:	4619      	mov	r1, r3
 8003678:	f000 fdca 	bl	8004210 <scaraInitLSPB>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
											0, DUTY_MODE_INIT_QVT);
						}
						myDUTY.time_total = command.time_total;
 8003682:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003686:	4b9b      	ldr	r3, [pc, #620]	; (80038f4 <scaraInitDuty+0xa08>)
 8003688:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800368c:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 800368e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003692:	3301      	adds	r3, #1
 8003694:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800369c:	2b03      	cmp	r3, #3
 800369e:	d98b      	bls.n	80035b8 <scaraInitDuty+0x6cc>
 80036a0:	e15f      	b.n	8003962 <scaraInitDuty+0xa76>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80036a2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d168      	bne.n	800377c <scaraInitDuty+0x890>
					for ( uint8_t i = 0; i < 4; i++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80036b0:	e05f      	b.n	8003772 <scaraInitDuty+0x886>
						if ( i == command.sub_para_int) {
 80036b2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80036b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d131      	bne.n	8003722 <scaraInitDuty+0x836>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80036be:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036c2:	4a8c      	ldr	r2, [pc, #560]	; (80038f4 <scaraInitDuty+0xa08>)
 80036c4:	21ac      	movs	r1, #172	; 0xac
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80036d4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036d8:	22ac      	movs	r2, #172	; 0xac
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80036e2:	4a84      	ldr	r2, [pc, #528]	; (80038f4 <scaraInitDuty+0xa08>)
 80036e4:	4413      	add	r3, r2
 80036e6:	f103 0008 	add.w	r0, r3, #8
 80036ea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036ee:	4a82      	ldr	r2, [pc, #520]	; (80038f8 <scaraInitDuty+0xa0c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	2200      	movs	r2, #0
 80036f4:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80036f8:	4619      	mov	r1, r3
 80036fa:	f000 fd89 	bl	8004210 <scaraInitLSPB>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
											s, DUTY_MODE_INIT_QVA);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003704:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003708:	4a7a      	ldr	r2, [pc, #488]	; (80038f4 <scaraInitDuty+0xa08>)
 800370a:	21ac      	movs	r1, #172	; 0xac
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <scaraInitDuty+0xa08>)
 800371a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e022      	b.n	8003768 <scaraInitDuty+0x87c>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003722:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003726:	4a73      	ldr	r2, [pc, #460]	; (80038f4 <scaraInitDuty+0xa08>)
 8003728:	21ac      	movs	r1, #172	; 0xac
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003738:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800373c:	22ac      	movs	r2, #172	; 0xac
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003746:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <scaraInitDuty+0xa08>)
 8003748:	4413      	add	r3, r2
 800374a:	f103 0008 	add.w	r0, r3, #8
 800374e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003752:	4a69      	ldr	r2, [pc, #420]	; (80038f8 <scaraInitDuty+0xa0c>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	2200      	movs	r2, #0
 8003758:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80038fc <scaraInitDuty+0xa10>
 800375c:	4619      	mov	r1, r3
 800375e:	f000 fd57 	bl	8004210 <scaraInitLSPB>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					for ( uint8_t i = 0; i < 4; i++) {
 8003768:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800376c:	3301      	adds	r3, #1
 800376e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003772:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003776:	2b03      	cmp	r3, #3
 8003778:	d99b      	bls.n	80036b2 <scaraInitDuty+0x7c6>
 800377a:	e0f2      	b.n	8003962 <scaraInitDuty+0xa76>
											0, DUTY_MODE_INIT_QVA);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800377c:	2308      	movs	r3, #8
 800377e:	e3af      	b.n	8003ee0 <scaraInitDuty+0xff4>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8003780:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 80ea 	bne.w	800395e <scaraInitDuty+0xa72>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800378a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800378e:	2b01      	cmp	r3, #1
 8003790:	d178      	bne.n	8003884 <scaraInitDuty+0x998>
						for ( uint8_t i = 0; i < 4; i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003798:	e06f      	b.n	800387a <scaraInitDuty+0x98e>
							if ( i == command.sub_para_int) {
 800379a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800379e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d12f      	bne.n	8003806 <scaraInitDuty+0x91a>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80037a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037aa:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <scaraInitDuty+0xa08>)
 80037ac:	21ac      	movs	r1, #172	; 0xac
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80037bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037c4:	494b      	ldr	r1, [pc, #300]	; (80038f4 <scaraInitDuty+0xa08>)
 80037c6:	20ac      	movs	r0, #172	; 0xac
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	440b      	add	r3, r1
 80037ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80037d2:	601a      	str	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80037d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037d8:	22ac      	movs	r2, #172	; 0xac
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80037e2:	4a44      	ldr	r2, [pc, #272]	; (80038f4 <scaraInitDuty+0xa08>)
 80037e4:	4413      	add	r3, r2
 80037e6:	f103 0008 	add.w	r0, r3, #8
 80037ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037ee:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <scaraInitDuty+0xa0c>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	2201      	movs	r2, #1
 80037f4:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80037f8:	4619      	mov	r1, r3
 80037fa:	f000 fef1 	bl	80045e0 <scaraInitScurve>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003804:	e02e      	b.n	8003864 <scaraInitDuty+0x978>
												s, DUTY_MODE_INIT_QVT);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003806:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800380a:	4a3a      	ldr	r2, [pc, #232]	; (80038f4 <scaraInitDuty+0xa08>)
 800380c:	21ac      	movs	r1, #172	; 0xac
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800381c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003820:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003824:	4933      	ldr	r1, [pc, #204]	; (80038f4 <scaraInitDuty+0xa08>)
 8003826:	20ac      	movs	r0, #172	; 0xac
 8003828:	fb00 f303 	mul.w	r3, r0, r3
 800382c:	440b      	add	r3, r1
 800382e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003832:	601a      	str	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003834:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003838:	22ac      	movs	r2, #172	; 0xac
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003842:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <scaraInitDuty+0xa08>)
 8003844:	4413      	add	r3, r2
 8003846:	f103 0008 	add.w	r0, r3, #8
 800384a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800384e:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <scaraInitDuty+0xa0c>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	2201      	movs	r2, #1
 8003854:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80038fc <scaraInitDuty+0xa10>
 8003858:	4619      	mov	r1, r3
 800385a:	f000 fec1 	bl	80045e0 <scaraInitScurve>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
												0, DUTY_MODE_INIT_QVT);
							}
							myDUTY.time_total = command.time_total;
 8003864:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003868:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <scaraInitDuty+0xa08>)
 800386a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800386e:	601a      	str	r2, [r3, #0]
						for ( uint8_t i = 0; i < 4; i++) {
 8003870:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003874:	3301      	adds	r3, #1
 8003876:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800387a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800387e:	2b03      	cmp	r3, #3
 8003880:	d98b      	bls.n	800379a <scaraInitDuty+0x8ae>
 8003882:	e06e      	b.n	8003962 <scaraInitDuty+0xa76>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003884:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003888:	2b00      	cmp	r3, #0
 800388a:	d166      	bne.n	800395a <scaraInitDuty+0xa6e>
						for ( uint8_t i = 0; i < 4; i++) {
 800388c:	2300      	movs	r3, #0
 800388e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8003892:	e05d      	b.n	8003950 <scaraInitDuty+0xa64>
							if ( i == command.sub_para_int) {
 8003894:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800389c:	429a      	cmp	r2, r3
 800389e:	d12f      	bne.n	8003900 <scaraInitDuty+0xa14>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80038a0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <scaraInitDuty+0xa08>)
 80038a6:	21ac      	movs	r1, #172	; 0xac
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80038b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80038ba:	22ac      	movs	r2, #172	; 0xac
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80038c4:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <scaraInitDuty+0xa08>)
 80038c6:	4413      	add	r3, r2
 80038c8:	f103 0008 	add.w	r0, r3, #8
 80038cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80038d0:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <scaraInitDuty+0xa0c>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	2200      	movs	r2, #0
 80038d6:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80038da:	4619      	mov	r1, r3
 80038dc:	f000 fe80 	bl	80045e0 <scaraInitScurve>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
												s, DUTY_MODE_INIT_QVA);
								myDUTY.time_total = command.time_total;
 80038e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80038ea:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <scaraInitDuty+0xa08>)
 80038ec:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e028      	b.n	8003946 <scaraInitDuty+0xa5a>
 80038f4:	200052e8 	.word	0x200052e8
 80038f8:	20000c7c 	.word	0x20000c7c
 80038fc:	00000000 	.word	0x00000000
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003900:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003904:	4ac4      	ldr	r2, [pc, #784]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003906:	21ac      	movs	r1, #172	; 0xac
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003916:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800391a:	22ac      	movs	r2, #172	; 0xac
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003924:	4abc      	ldr	r2, [pc, #752]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003926:	4413      	add	r3, r2
 8003928:	f103 0008 	add.w	r0, r3, #8
 800392c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003930:	4aba      	ldr	r2, [pc, #744]	; (8003c1c <scaraInitDuty+0xd30>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	2200      	movs	r2, #0
 8003936:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8003c20 <scaraInitDuty+0xd34>
 800393a:	4619      	mov	r1, r3
 800393c:	f000 fe50 	bl	80045e0 <scaraInitScurve>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						for ( uint8_t i = 0; i < 4; i++) {
 8003946:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800394a:	3301      	adds	r3, #1
 800394c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8003950:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003954:	2b03      	cmp	r3, #3
 8003956:	d99d      	bls.n	8003894 <scaraInitDuty+0x9a8>
 8003958:	e003      	b.n	8003962 <scaraInitDuty+0xa76>
												0, DUTY_MODE_INIT_QVA);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 800395a:	2308      	movs	r3, #8
 800395c:	e2c0      	b.n	8003ee0 <scaraInitDuty+0xff4>
					}
			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800395e:	2305      	movs	r3, #5
 8003960:	e2be      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8003962:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <scaraInitDuty+0xa84>
				return status1;
 800396a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800396e:	e2b7      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}
			if ( SCARA_STATUS_OK != status2) {
 8003970:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 82b2 	beq.w	8003ede <scaraInitDuty+0xff2>
				return status2;
 800397a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800397e:	e2af      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}

		//----Joint Quatra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8003980:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 82a6 	bne.w	8003ed6 <scaraInitDuty+0xfea>
			SCARA_PositionTypeDef	target_point;

			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800398a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800398e:	2b01      	cmp	r3, #1
 8003990:	d124      	bne.n	80039dc <scaraInitDuty+0xaf0>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8003992:	4ba4      	ldr	r3, [pc, #656]	; (8003c24 <scaraInitDuty+0xd38>)
 8003994:	ed93 7a04 	vldr	s14, [r3, #16]
 8003998:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800399c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a0:	edc7 7a05 	vstr	s15, [r7, #20]
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80039a4:	4b9f      	ldr	r3, [pc, #636]	; (8003c24 <scaraInitDuty+0xd38>)
 80039a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80039aa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80039ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b2:	edc7 7a06 	vstr	s15, [r7, #24]
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80039b6:	4b9b      	ldr	r3, [pc, #620]	; (8003c24 <scaraInitDuty+0xd38>)
 80039b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80039bc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	edc7 7a07 	vstr	s15, [r7, #28]
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80039c8:	4b96      	ldr	r3, [pc, #600]	; (8003c24 <scaraInitDuty+0xd38>)
 80039ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80039ce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80039d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d6:	edc7 7a08 	vstr	s15, [r7, #32]
 80039da:	e012      	b.n	8003a02 <scaraInitDuty+0xb16>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80039dc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <scaraInitDuty+0xb12>
				target_point.x 		= command.target_point.x;
 80039e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039e8:	617b      	str	r3, [r7, #20]
				target_point.y 		= command.target_point.y;
 80039ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039ee:	61bb      	str	r3, [r7, #24]
				target_point.z 		= command.target_point.z;
 80039f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039f4:	61fb      	str	r3, [r7, #28]
				target_point.roll	= command.target_point.roll;
 80039f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	e001      	b.n	8003a02 <scaraInitDuty+0xb16>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80039fe:	230c      	movs	r3, #12
 8003a00:	e26e      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8003a02:	4e88      	ldr	r6, [pc, #544]	; (8003c24 <scaraInitDuty+0xd38>)
 8003a04:	f107 0c04 	add.w	ip, r7, #4
 8003a08:	466d      	mov	r5, sp
 8003a0a:	f106 040c 	add.w	r4, r6, #12
 8003a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003a1e:	4660      	mov	r0, ip
 8003a20:	f7fe ff74 	bl	800290c <kinematicInverse>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <scaraInitDuty+0xb42>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	e258      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}
			// Trajectory 4 profile
			float q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8003a2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a32:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <scaraInitDuty+0xd38>)
 8003a34:	edd3 7a08 	vldr	s15, [r3, #32]
 8003a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8003a40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a44:	4b77      	ldr	r3, [pc, #476]	; (8003c24 <scaraInitDuty+0xd38>)
 8003a46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8003a52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a56:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <scaraInitDuty+0xd38>)
 8003a58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a60:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8003a64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a68:	4b6e      	ldr	r3, [pc, #440]	; (8003c24 <scaraInitDuty+0xd38>)
 8003a6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40



			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8003a76:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8119 	bne.w	8003cb2 <scaraInitDuty+0xdc6>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003a80:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d14a      	bne.n	8003b1e <scaraInitDuty+0xc32>
					for ( uint8_t i = 0; i < 4; i++) {
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003a8e:	e03b      	b.n	8003b08 <scaraInitDuty+0xc1c>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003a90:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003a94:	4a60      	ldr	r2, [pc, #384]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003a96:	21ac      	movs	r1, #172	; 0xac
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003aa6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003aaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003aae:	495a      	ldr	r1, [pc, #360]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003ab0:	20ac      	movs	r0, #172	; 0xac
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003abc:	601a      	str	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003abe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ac2:	22ac      	movs	r2, #172	; 0xac
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003acc:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	f103 0008 	add.w	r0, r3, #8
 8003ad4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <scaraInitDuty+0xd30>)
 8003ada:	5cd1      	ldrb	r1, [r2, r3]
 8003adc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3b34      	subs	r3, #52	; 0x34
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	2201      	movs	r2, #1
 8003af0:	eeb0 0a67 	vmov.f32	s0, s15
 8003af4:	f000 fb8c 	bl	8004210 <scaraInitLSPB>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003afe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b02:	3301      	adds	r3, #1
 8003b04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003b08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d9bf      	bls.n	8003a90 <scaraInitDuty+0xba4>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8003b10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b14:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003b16:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e1df      	b.n	8003ede <scaraInitDuty+0xff2>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003b1e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 80c3 	bne.w	8003cae <scaraInitDuty+0xdc2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003b2e:	e035      	b.n	8003b9c <scaraInitDuty+0xcb0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003b30:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003b36:	21ac      	movs	r1, #172	; 0xac
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003b46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b4a:	22ac      	movs	r2, #172	; 0xac
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003b56:	4413      	add	r3, r2
 8003b58:	f103 0008 	add.w	r0, r3, #8
 8003b5c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b60:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <scaraInitDuty+0xd30>)
 8003b62:	5cd1      	ldrb	r1, [r2, r3]
 8003b64:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b6e:	4413      	add	r3, r2
 8003b70:	3b34      	subs	r3, #52	; 0x34
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	2200      	movs	r2, #0
 8003b78:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7c:	f000 fb48 	bl	8004210 <scaraInitLSPB>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
													q[i], DUTY_MODE_INIT_QVA);
						myDUTY.time_total = command.time_total;
 8003b86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003b8c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003b90:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003b92:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b96:	3301      	adds	r3, #1
 8003b98:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003b9c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d9c5      	bls.n	8003b30 <scaraInitDuty+0xc44>
					}
					myDUTY.time_total = 0;
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003ba6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003bb6:	e027      	b.n	8003c08 <scaraInitDuty+0xd1c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8003bb8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003bbe:	21ac      	movs	r1, #172	; 0xac
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bca:	ed93 7a00 	vldr	s14, [r3]
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003bd0:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	dd0d      	ble.n	8003bfe <scaraInitDuty+0xd12>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003be2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003be8:	21ac      	movs	r1, #172	; 0xac
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <scaraInitDuty+0xd2c>)
 8003bf8:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003bfc:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003bfe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c02:	3301      	adds	r3, #1
 8003c04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003c08:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d9d3      	bls.n	8003bb8 <scaraInitDuty+0xccc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8003c16:	e045      	b.n	8003ca4 <scaraInitDuty+0xdb8>
 8003c18:	200052e8 	.word	0x200052e8
 8003c1c:	20000c7c 	.word	0x20000c7c
 8003c20:	00000000 	.word	0x00000000
 8003c24:	20005790 	.word	0x20005790
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003c28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c2c:	4ab0      	ldr	r2, [pc, #704]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003c2e:	21ac      	movs	r1, #172	; 0xac
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8003c3e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c42:	4aab      	ldr	r2, [pc, #684]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003c44:	f202 42a4 	addw	r2, r2, #1188	; 0x4a4
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	49a9      	ldr	r1, [pc, #676]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003c4c:	20ac      	movs	r0, #172	; 0xac
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	440b      	add	r3, r1
 8003c54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c58:	601a      	str	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003c5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c5e:	22ac      	movs	r2, #172	; 0xac
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003c68:	4aa1      	ldr	r2, [pc, #644]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f103 0008 	add.w	r0, r3, #8
 8003c70:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c74:	4a9f      	ldr	r2, [pc, #636]	; (8003ef4 <scaraInitDuty+0x1008>)
 8003c76:	5cd1      	ldrb	r1, [r2, r3]
 8003c78:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c82:	4413      	add	r3, r2
 8003c84:	3b34      	subs	r3, #52	; 0x34
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	f000 fabe 	bl	8004210 <scaraInitLSPB>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003c9a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8003ca4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d9bd      	bls.n	8003c28 <scaraInitDuty+0xd3c>
 8003cac:	e117      	b.n	8003ede <scaraInitDuty+0xff2>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	e116      	b.n	8003ee0 <scaraInitDuty+0xff4>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8003cb2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 810b 	bne.w	8003ed2 <scaraInitDuty+0xfe6>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003cbc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d14a      	bne.n	8003d5a <scaraInitDuty+0xe6e>
					for ( uint8_t i = 0; i < 4; i++) {
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003cca:	e03b      	b.n	8003d44 <scaraInitDuty+0xe58>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd0:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003cd2:	21ac      	movs	r1, #172	; 0xac
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8003ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ce6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003cea:	4981      	ldr	r1, [pc, #516]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003cec:	20ac      	movs	r0, #172	; 0xac
 8003cee:	fb00 f303 	mul.w	r3, r0, r3
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003cf8:	601a      	str	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cfe:	22ac      	movs	r2, #172	; 0xac
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003d08:	4a79      	ldr	r2, [pc, #484]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f103 0008 	add.w	r0, r3, #8
 8003d10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d14:	4a77      	ldr	r2, [pc, #476]	; (8003ef4 <scaraInitDuty+0x1008>)
 8003d16:	5cd1      	ldrb	r1, [r2, r3]
 8003d18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d22:	4413      	add	r3, r2
 8003d24:	3b34      	subs	r3, #52	; 0x34
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d30:	f000 fc56 	bl	80045e0 <scaraInitScurve>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003d3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d9bf      	bls.n	8003ccc <scaraInitDuty+0xde0>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8003d4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d50:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003d52:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e0c1      	b.n	8003ede <scaraInitDuty+0xff2>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003d5a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80b5 	bne.w	8003ece <scaraInitDuty+0xfe2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003d6a:	e02f      	b.n	8003dcc <scaraInitDuty+0xee0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003d6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d70:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003d72:	21ac      	movs	r1, #172	; 0xac
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003d82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d86:	22ac      	movs	r2, #172	; 0xac
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003d90:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003d92:	4413      	add	r3, r2
 8003d94:	f103 0008 	add.w	r0, r3, #8
 8003d98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d9c:	4a55      	ldr	r2, [pc, #340]	; (8003ef4 <scaraInitDuty+0x1008>)
 8003d9e:	5cd1      	ldrb	r1, [r2, r3]
 8003da0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003daa:	4413      	add	r3, r2
 8003dac:	3b34      	subs	r3, #52	; 0x34
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	2200      	movs	r2, #0
 8003db4:	eeb0 0a67 	vmov.f32	s0, s15
 8003db8:	f000 fc12 	bl	80045e0 <scaraInitScurve>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003dc2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003dcc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d9cb      	bls.n	8003d6c <scaraInitDuty+0xe80>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 8003dd4:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003dd6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003de6:	e027      	b.n	8003e38 <scaraInitDuty+0xf4c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8003de8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003dec:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003dee:	21ac      	movs	r1, #172	; 0xac
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dfa:	ed93 7a00 	vldr	s14, [r3]
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e00:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	dd0d      	ble.n	8003e2e <scaraInitDuty+0xf42>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003e12:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e18:	21ac      	movs	r1, #172	; 0xac
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e28:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003e2c:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003e2e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e32:	3301      	adds	r3, #1
 8003e34:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003e38:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d9d3      	bls.n	8003de8 <scaraInitDuty+0xefc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003e46:	e03d      	b.n	8003ec4 <scaraInitDuty+0xfd8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003e48:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e4e:	21ac      	movs	r1, #172	; 0xac
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8003e5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e64:	f202 42a4 	addw	r2, r2, #1188	; 0x4a4
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	4921      	ldr	r1, [pc, #132]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e6c:	20ac      	movs	r0, #172	; 0xac
 8003e6e:	fb00 f303 	mul.w	r3, r0, r3
 8003e72:	440b      	add	r3, r1
 8003e74:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003e78:	601a      	str	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003e7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e7e:	22ac      	movs	r2, #172	; 0xac
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <scaraInitDuty+0x1004>)
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f103 0008 	add.w	r0, r3, #8
 8003e90:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e94:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <scaraInitDuty+0x1008>)
 8003e96:	5cd1      	ldrb	r1, [r2, r3]
 8003e98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3b34      	subs	r3, #52	; 0x34
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	f000 fb96 	bl	80045e0 <scaraInitScurve>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003eba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003ec4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d9bd      	bls.n	8003e48 <scaraInitDuty+0xf5c>
 8003ecc:	e007      	b.n	8003ede <scaraInitDuty+0xff2>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e006      	b.n	8003ee0 <scaraInitDuty+0xff4>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	e004      	b.n	8003ee0 <scaraInitDuty+0xff4>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e002      	b.n	8003ee0 <scaraInitDuty+0xff4>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8003eda:	2302      	movs	r3, #2
 8003edc:	e000      	b.n	8003ee0 <scaraInitDuty+0xff4>
	}

	return SCARA_STATUS_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	376c      	adds	r7, #108	; 0x6c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003eea:	b004      	add	sp, #16
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	200052e8 	.word	0x200052e8
 8003ef4:	20000c7c 	.word	0x20000c7c

08003ef8 <scaraInitLine>:

SCARA_StatusTypeDef			scaraInitLine		(Path_Line_TypeDef *line,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end) {
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efc:	b08d      	sub	sp, #52	; 0x34
 8003efe:	af0a      	add	r7, sp, #40	; 0x28
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8003f0a:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8003f0e:	466d      	mov	r5, sp
 8003f10:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7fe fcf0 	bl	800290c <kinematicInverse>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <scaraInitLine+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003f32:	2307      	movs	r3, #7
 8003f34:	e05e      	b.n	8003ff4 <scaraInitLine+0xfc>
	}
	// Init line params
	line->x1 = end.x;
 8003f36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
	line->y1 = end.y;
 8003f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]
	line->z1 = end.z;
 8003f42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	615a      	str	r2, [r3, #20]
	line->x0 = start.x;
 8003f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
	line->y0 = start.y;
 8003f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
	line->z0 = start.z;
 8003f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]
	line->denta_x = end.x  -  start.x;
 8003f5a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003f5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	edc3 7a06 	vstr	s15, [r3, #24]
	line->denta_y = end.y  -  start.y;
 8003f6c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003f70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	edc3 7a07 	vstr	s15, [r3, #28]
	line->denta_z = end.z  -  start.z;
 8003f7e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003f82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	edc3 7a08 	vstr	s15, [r3, #32]
	line->total_s = sqrtf((line->denta_x)*(line->denta_x)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
			       +(line->denta_y)*(line->denta_y)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	edd3 6a07 	vldr	s13, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
				   +(line->denta_z)*(line->denta_z));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	edd3 6a08 	vldr	s13, [r3, #32]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	line->total_s = sqrtf((line->denta_x)*(line->denta_x)
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	f010 fe3c 	bl	8014c48 <sqrtf>
 8003fd0:	eef0 7a40 	vmov.f32	s15, s0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	line->x_current = line->x0;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	line->y_current = line->y0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
	line->z_current = line->z0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34

	return SCARA_STATUS_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ffe:	b004      	add	sp, #16
 8004000:	4770      	bx	lr
	...

08004004 <scaraInitCircle>:

SCARA_StatusTypeDef			scaraInitCircle		(Path_Circle_TypeDef *circle,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end,
												SCARA_PositionTypeDef center,
												int32_t dir){
 8004004:	b084      	sub	sp, #16
 8004006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004008:	b097      	sub	sp, #92	; 0x5c
 800400a:	af0a      	add	r7, sp, #40	; 0x28
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8004016:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800401a:	466d      	mov	r5, sp
 800401c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004032:	4630      	mov	r0, r6
 8004034:	f7fe fc6a 	bl	800290c <kinematicInverse>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <scaraInitCircle+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800403e:	2307      	movs	r3, #7
 8004040:	e0dc      	b.n	80041fc <scaraInitCircle+0x1f8>
	}

	if( 1 != dir && -1 != dir) {
 8004042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004046:	2b01      	cmp	r3, #1
 8004048:	d006      	beq.n	8004058 <scaraInitCircle+0x54>
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d001      	beq.n	8004058 <scaraInitCircle+0x54>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8004054:	2306      	movs	r3, #6
 8004056:	e0d1      	b.n	80041fc <scaraInitCircle+0x1f8>
	}

	float v_x_start, v_y_start, v_x_stop, v_y_stop;
	float r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8004058:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800405c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004064:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	v_y_start = start.y - center.y;
 8004068:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800406c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_x_stop  = end.x  - center.x;
 8004078:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800407c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004084:	edc7 7a08 	vstr	s15, [r7, #32]
	v_y_stop  = end.y  - center.y;
 8004088:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800408c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004094:	edc7 7a07 	vstr	s15, [r7, #28]
	r1 = sqrtf(v_x_start*v_x_start + v_y_start*v_y_start);
 8004098:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800409c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80040a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	f010 fdc6 	bl	8014c48 <sqrtf>
 80040bc:	ed87 0a06 	vstr	s0, [r7, #24]
	r2 = sqrtf(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 80040c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80040c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80040c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80040d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	f010 fdb2 	bl	8014c48 <sqrtf>
 80040e4:	ed87 0a05 	vstr	s0, [r7, #20]

	if( 1.0 < fabsf(r1 - r2)) {
 80040e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80040ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80040f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f4:	eef0 7ae7 	vabs.f32	s15, s15
 80040f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	dd01      	ble.n	800410a <scaraInitCircle+0x106>
		return SCARA_STATUS_ERROR_PARA; // 2 point start & stop are not in a circle together !!
 8004106:	2306      	movs	r3, #6
 8004108:	e078      	b.n	80041fc <scaraInitCircle+0x1f8>
	}

	angle_start = atan2f(v_y_start, v_x_start);
 800410a:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800410e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004112:	f010 fd97 	bl	8014c44 <atan2f>
 8004116:	ed87 0a04 	vstr	s0, [r7, #16]
	angle_stop  = atan2f(v_y_stop, v_x_stop);
 800411a:	edd7 0a08 	vldr	s1, [r7, #32]
 800411e:	ed97 0a07 	vldr	s0, [r7, #28]
 8004122:	f010 fd8f 	bl	8014c44 <atan2f>
 8004126:	ed87 0a03 	vstr	s0, [r7, #12]
	delta_angle = angle_stop - angle_start;
 800412a:	ed97 7a03 	vldr	s14, [r7, #12]
 800412e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004136:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if ( 0 > delta_angle) {
 800413a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800413e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d507      	bpl.n	8004158 <scaraInitCircle+0x154>
		delta_angle += 2*PI;
 8004148:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800414c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800420c <scaraInitCircle+0x208>
 8004150:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004154:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415c:	2b00      	cmp	r3, #0
 800415e:	da07      	bge.n	8004170 <scaraInitCircle+0x16c>
		delta_angle = 2*PI - delta_angle;
 8004160:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800420c <scaraInitCircle+0x208>
 8004164:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}
	// Init circle params
	circle->dir = dir;
 8004170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004174:	b25a      	sxtb	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	605a      	str	r2, [r3, #4]
	circle->angle_start = angle_start;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	609a      	str	r2, [r3, #8]
	circle->angle_stop  = angle_stop;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	60da      	str	r2, [r3, #12]
	circle->total_angle = delta_angle;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
	circle->total_s = delta_angle*r1;
 8004192:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004196:	edd7 7a06 	vldr	s15, [r7, #24]
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	circle->x0 = start.x;
 80041a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	611a      	str	r2, [r3, #16]
	circle->y0 = start.y;
 80041aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
	circle->x1 = end.x;
 80041b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	615a      	str	r2, [r3, #20]
	circle->y1 = end.y;
 80041b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	61da      	str	r2, [r3, #28]
	circle->xi = center.x;
 80041c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]
	circle->yi = center.y;
 80041c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
	circle->z0 = start.z;
 80041d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
	circle->z1 = start.z;
 80041d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
	circle->zi = start.z;
 80041dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
	circle->x_current = circle->x0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c
	circle->y_current = circle->y0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
	circle->z_current = circle->z0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44

	return SCARA_STATUS_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3734      	adds	r7, #52	; 0x34
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004206:	b004      	add	sp, #16
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40c90fdb 	.word	0x40c90fdb

08004210 <scaraInitLSPB>:

SCARA_StatusTypeDef	scaraInitLSPB	(Trajectory_LSPB_TypeDef *lspb,
									Trajectory_TargetTypeDef target,
									float total_s,
									ModeInitTypeDef modeinit) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b094      	sub	sp, #80	; 0x50
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	460b      	mov	r3, r1
 800421a:	ed87 0a01 	vstr	s0, [r7, #4]
 800421e:	72fb      	strb	r3, [r7, #11]
 8004220:	4613      	mov	r3, r2
 8004222:	72bb      	strb	r3, [r7, #10]
	 float v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d104      	bne.n	8004234 <scaraInitLSPB+0x24>
		 v_design = V_DESIGN_3D;
 800422a:	4b8e      	ldr	r3, [pc, #568]	; (8004464 <scaraInitLSPB+0x254>)
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_3D;
 800422e:	4b8e      	ldr	r3, [pc, #568]	; (8004468 <scaraInitLSPB+0x258>)
 8004230:	64bb      	str	r3, [r7, #72]	; 0x48
 8004232:	e029      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_ROLL == target) {
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d104      	bne.n	8004244 <scaraInitLSPB+0x34>
		 v_design = V_DESIGN_ROLL;
 800423a:	4b8c      	ldr	r3, [pc, #560]	; (800446c <scaraInitLSPB+0x25c>)
 800423c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_ROLL;
 800423e:	4b8c      	ldr	r3, [pc, #560]	; (8004470 <scaraInitLSPB+0x260>)
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
 8004242:	e021      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J0 == target) {
 8004244:	7afb      	ldrb	r3, [r7, #11]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <scaraInitLSPB+0x44>
		 v_design = V_DESIGN_J0;
 800424a:	4b88      	ldr	r3, [pc, #544]	; (800446c <scaraInitLSPB+0x25c>)
 800424c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J0;
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <scaraInitLSPB+0x260>)
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	e019      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J1 == target) {
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d104      	bne.n	8004264 <scaraInitLSPB+0x54>
		 v_design = V_DESIGN_J1;
 800425a:	4b84      	ldr	r3, [pc, #528]	; (800446c <scaraInitLSPB+0x25c>)
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J1;
 800425e:	4b84      	ldr	r3, [pc, #528]	; (8004470 <scaraInitLSPB+0x260>)
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
 8004262:	e011      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J2 == target) {
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d104      	bne.n	8004274 <scaraInitLSPB+0x64>
		 v_design = V_DESIGN_J2;
 800426a:	4b7e      	ldr	r3, [pc, #504]	; (8004464 <scaraInitLSPB+0x254>)
 800426c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J2;
 800426e:	4b7e      	ldr	r3, [pc, #504]	; (8004468 <scaraInitLSPB+0x258>)
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
 8004272:	e009      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J3 == target) {
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d104      	bne.n	8004284 <scaraInitLSPB+0x74>
		 v_design = V_DESIGN_J3;
 800427a:	4b7c      	ldr	r3, [pc, #496]	; (800446c <scaraInitLSPB+0x25c>)
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J3;
 800427e:	4b7c      	ldr	r3, [pc, #496]	; (8004470 <scaraInitLSPB+0x260>)
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
 8004282:	e001      	b.n	8004288 <scaraInitLSPB+0x78>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004284:	2306      	movs	r3, #6
 8004286:	e1a5      	b.n	80045d4 <scaraInitLSPB+0x3c4>
	 }

	 q0 = 0;
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
	 q1 = total_s;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
	 v0 = 0;
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
	 v1 = 0;
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	627b      	str	r3, [r7, #36]	; 0x24

	 if ( q0 <= q1) {
 800429e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80042a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80042a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ae:	d803      	bhi.n	80042b8 <scaraInitLSPB+0xa8>
		 dir = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b6:	e008      	b.n	80042ca <scaraInitLSPB+0xba>
	 } else {
		 dir = -1;
 80042b8:	23ff      	movs	r3, #255	; 0xff
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 q1 = -q1;
 80042be:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80042c2:	eef1 7a67 	vneg.f32	s15, s15
 80042c6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80042ca:	7abb      	ldrb	r3, [r7, #10]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d157      	bne.n	8004380 <scaraInitLSPB+0x170>
		 float v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
		 v_lower 	= (q1 - q0) / tf;
 80042d6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80042da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80042de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80042e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ea:	edc7 7a08 	vstr	s15, [r7, #32]
		 v_upper 	= 2*(q1 - q0) / tf;
 80042ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80042f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80042f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80042fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004306:	edc7 7a07 	vstr	s15, [r7, #28]

		 if ( v_design < v_lower) {
 800430a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800430e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431a:	d501      	bpl.n	8004320 <scaraInitLSPB+0x110>
			 return SCARA_STATUS_ERROR_OVER_VELOC;
 800431c:	2309      	movs	r3, #9
 800431e:	e159      	b.n	80045d4 <scaraInitLSPB+0x3c4>
		 } else {

			 if ( v_upper <= v_design) {
 8004320:	ed97 7a07 	vldr	s14, [r7, #28]
 8004324:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004330:	d801      	bhi.n	8004336 <scaraInitLSPB+0x126>
				 v_design = v_upper;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
			 }

			 tc_upper	= tf - (q1 - q0)/v_design;
 8004336:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800433a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800433e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004342:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800434e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004352:	edc7 7a06 	vstr	s15, [r7, #24]
			 a_upper	= v_design/tc_upper;
 8004356:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800435a:	ed97 7a06 	vldr	s14, [r7, #24]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	edc7 7a05 	vstr	s15, [r7, #20]

			 if ( a_upper > a_design) {
 8004366:	ed97 7a05 	vldr	s14, [r7, #20]
 800436a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800436e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	dd01      	ble.n	800437c <scaraInitLSPB+0x16c>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8004378:	230a      	movs	r3, #10
 800437a:	e12b      	b.n	80045d4 <scaraInitLSPB+0x3c4>
			 } else {
				 a_design = a_upper;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	64bb      	str	r3, [r7, #72]	; 0x48
			 }
		 }
	 }

	 // Check condition trapezoidal ---> triangle
	 if ( (fabsf(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8004380:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004384:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800438c:	eeb0 7ae7 	vabs.f32	s14, s15
 8004390:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004398:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800439c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80043a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80043a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043b0:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80043b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80043c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80043c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	d850      	bhi.n	8004478 <scaraInitLSPB+0x268>
		 v_lim 	= sqrtf(fabsf(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80043d6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80043da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80043de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80043e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80043ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80043f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043fa:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80043fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004402:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004406:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800440a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800440e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	eeb0 0a67 	vmov.f32	s0, s15
 800441a:	f010 fc15 	bl	8014c48 <sqrtf>
 800441e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		 ta		= (v_lim - v0)/a_design;
 8004422:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004426:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800442a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800442e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 td		= (v_lim - v1)/a_design;
 800443a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800443e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004442:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004446:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800444a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		 tf		= ta + td;
 8004452:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004456:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800445a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800445e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004462:	e075      	b.n	8004550 <scaraInitLSPB+0x340>
 8004464:	41a00000 	.word	0x41a00000
 8004468:	40a00000 	.word	0x40a00000
 800446c:	3ea0d97c 	.word	0x3ea0d97c
 8004470:	3d00adfd 	.word	0x3d00adfd
 8004474:	3c23d70a 	.word	0x3c23d70a
	 } else {
		 v_lim	= v_design;
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
		 ta		= (v_lim - v0)/a_design;
 800447c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004484:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004488:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800448c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004490:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 td		= (v_lim - v1)/a_design;
 8004494:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004498:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800449c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		 tf		= fabsf(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80044ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80044b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80044b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b8:	eef0 6ae7 	vabs.f32	s13, s15
 80044bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80044c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044cc:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80044d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80044d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 80044d8:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80044dc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80044e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80044e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 80044f0:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80044f4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80044f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004504:	ee37 7a27 	vadd.f32	s14, s14, s15
					 	+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8004508:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800450c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004510:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004514:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004518:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 800451c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004520:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004524:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004528:	ee76 7a67 	vsub.f32	s15, s12, s15
 800452c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004530:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8004534:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004538:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800453c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004540:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004544:	ee66 7aa7 	vmul.f32	s15, s13, s15
		 tf		= fabsf(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8004548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8004550:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004554:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8004474 <scaraInitLSPB+0x264>
 8004558:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800455c:	eeb0 0a66 	vmov.f32	s0, s13
 8004560:	f010 faae 	bl	8014ac0 <ceilf>
 8004564:	eef0 7a40 	vmov.f32	s15, s0
 8004568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456c:	ee17 3a90 	vmov	r3, s15
 8004570:	613b      	str	r3, [r7, #16]
	 // Init lspb params
	 lspb->dir= dir;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8004578:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457e:	605a      	str	r2, [r3, #4]
	 lspb->s1 = q1;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004584:	609a      	str	r2, [r3, #8]
	 lspb->Ta = ta;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458a:	621a      	str	r2, [r3, #32]
	 lspb->Td = td;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004590:	625a      	str	r2, [r3, #36]	; 0x24
	 lspb->Tf = tf;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
	 lspb->a_design = a_design;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800459c:	619a      	str	r2, [r3, #24]
	 lspb->v_design = v_design;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a2:	615a      	str	r2, [r3, #20]
	 lspb->v_lim = v_lim;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a8:	61da      	str	r2, [r3, #28]
	 lspb->v0 = v0;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ae:	60da      	str	r2, [r3, #12]
	 lspb->v1 = v1;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	611a      	str	r2, [r3, #16]
	 lspb->num_of_sampling = no_sample;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
	 lspb->total_s = lspb->s1 - lspb->s0;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	ed93 7a02 	vldr	s14, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80045c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	 return SCARA_STATUS_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3750      	adds	r7, #80	; 0x50
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	0000      	movs	r0, r0
	...

080045e0 <scaraInitScurve>:

SCARA_StatusTypeDef	scaraInitScurve	(Trajectory_Scurve_TypeDef *scurve,
									Trajectory_TargetTypeDef target,
									float total_s,
									ModeInitTypeDef modeinit) {
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b09e      	sub	sp, #120	; 0x78
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	460b      	mov	r3, r1
 80045ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80045ee:	72fb      	strb	r3, [r7, #11]
 80045f0:	4613      	mov	r3, r2
 80045f2:	72bb      	strb	r3, [r7, #10]
	 float v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 float v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d104      	bne.n	8004604 <scaraInitScurve+0x24>
		 v_design = V_DESIGN_3D;
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <scaraInitScurve+0x1b0>)
 80045fc:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_3D;
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <scaraInitScurve+0x1b4>)
 8004600:	673b      	str	r3, [r7, #112]	; 0x70
 8004602:	e021      	b.n	8004648 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J0 == target) {
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <scaraInitScurve+0x34>
		 v_design = V_DESIGN_J0;
 800460a:	4b63      	ldr	r3, [pc, #396]	; (8004798 <scaraInitScurve+0x1b8>)
 800460c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J0;
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <scaraInitScurve+0x1bc>)
 8004610:	673b      	str	r3, [r7, #112]	; 0x70
 8004612:	e019      	b.n	8004648 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J1 == target) {
 8004614:	7afb      	ldrb	r3, [r7, #11]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d104      	bne.n	8004624 <scaraInitScurve+0x44>
		 v_design = V_DESIGN_J1;
 800461a:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <scaraInitScurve+0x1b8>)
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J1;
 800461e:	4b5f      	ldr	r3, [pc, #380]	; (800479c <scaraInitScurve+0x1bc>)
 8004620:	673b      	str	r3, [r7, #112]	; 0x70
 8004622:	e011      	b.n	8004648 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J2 == target) {
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d104      	bne.n	8004634 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_J2;
 800462a:	4b59      	ldr	r3, [pc, #356]	; (8004790 <scaraInitScurve+0x1b0>)
 800462c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J2;
 800462e:	4b59      	ldr	r3, [pc, #356]	; (8004794 <scaraInitScurve+0x1b4>)
 8004630:	673b      	str	r3, [r7, #112]	; 0x70
 8004632:	e009      	b.n	8004648 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J3 == target) {
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d104      	bne.n	8004644 <scaraInitScurve+0x64>
		 v_design = V_DESIGN_J3;
 800463a:	4b57      	ldr	r3, [pc, #348]	; (8004798 <scaraInitScurve+0x1b8>)
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J3;
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <scaraInitScurve+0x1bc>)
 8004640:	673b      	str	r3, [r7, #112]	; 0x70
 8004642:	e001      	b.n	8004648 <scaraInitScurve+0x68>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004644:	2306      	movs	r3, #6
 8004646:	e1a5      	b.n	8004994 <scaraInitScurve+0x3b4>
	 }

	 v0 = 0;
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	657b      	str	r3, [r7, #84]	; 0x54
	 v1 = 0;
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	653b      	str	r3, [r7, #80]	; 0x50
	 q0 = 0;
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
	 q1 = total_s;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	66fb      	str	r3, [r7, #108]	; 0x6c

	 if ( q1 < q0) {
 800465e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8004662:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466e:	d508      	bpl.n	8004682 <scaraInitScurve+0xa2>
		 dir = -1;
 8004670:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <scaraInitScurve+0x1c0>)
 8004672:	65fb      	str	r3, [r7, #92]	; 0x5c
		 q1 = -q1;
 8004674:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004678:	eef1 7a67 	vneg.f32	s15, s15
 800467c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 8004680:	e002      	b.n	8004688 <scaraInitScurve+0xa8>

	 } else {
		 dir = 1;
 8004682:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004686:	65fb      	str	r3, [r7, #92]	; 0x5c
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8004688:	7abb      	ldrb	r3, [r7, #10]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d138      	bne.n	8004700 <scaraInitScurve+0x120>
		 float t_upper, v_upper, a_upper;

		 tf = scurve->Tf;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48
		 t_upper = tf / 4;
 8004694:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004698:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800469c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		 v_upper = (q1 - q0) / t_upper;
 80046a4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80046a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80046ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80046b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		 if ( v_upper > v_design) {
 80046bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80046c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80046c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046cc:	dd01      	ble.n	80046d2 <scaraInitScurve+0xf2>
			 return SCARA_STATUS_ERROR_OVER_VELOC;
 80046ce:	2309      	movs	r3, #9
 80046d0:	e160      	b.n	8004994 <scaraInitScurve+0x3b4>
		 } else {
			 v_design = v_upper;
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	677b      	str	r3, [r7, #116]	; 0x74
		 }

		 a_upper = v_design / t_upper;
 80046d6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80046da:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 if ( a_upper > a_design) {
 80046e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80046ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80046ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	dd01      	ble.n	80046fc <scaraInitScurve+0x11c>
			 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80046f8:	230a      	movs	r3, #10
 80046fa:	e14b      	b.n	8004994 <scaraInitScurve+0x3b4>
		 } else {
			 a_design = a_upper;
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	673b      	str	r3, [r7, #112]	; 0x70
		 }
	 }

	 no_phases = 5;
 8004700:	2305      	movs	r3, #5
 8004702:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	 tm = v_design/a_design;
 8004706:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800470a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	 tc = total_s/v_design - 2*tm;
 8004716:	edd7 6a01 	vldr	s13, [r7, #4]
 800471a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004726:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	 // Check condition 4 phase
	 if( 0.0 > tc) {
 8004732:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	d513      	bpl.n	8004768 <scaraInitScurve+0x188>
		 tc = 0;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	663b      	str	r3, [r7, #96]	; 0x60
		 no_phases = 4;
 8004746:	2304      	movs	r3, #4
 8004748:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		 tm = sqrtf(total_s/(2*a_design));
 800474c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004750:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004754:	ed97 7a01 	vldr	s14, [r7, #4]
 8004758:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800475c:	eeb0 0a66 	vmov.f32	s0, s13
 8004760:	f010 fa72 	bl	8014c48 <sqrtf>
 8004764:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	 }
	 if ( 0.001 > tm) {
 8004768:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800476a:	f7fb fefd 	bl	8000568 <__aeabi_f2d>
 800476e:	a306      	add	r3, pc, #24	; (adr r3, 8004788 <scaraInitScurve+0x1a8>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fc f9c2 	bl	8000afc <__aeabi_dcmplt>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <scaraInitScurve+0x1c8>
		 j_max = 0;
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	66bb      	str	r3, [r7, #104]	; 0x68
 8004784:	e018      	b.n	80047b8 <scaraInitScurve+0x1d8>
 8004786:	bf00      	nop
 8004788:	d2f1a9fc 	.word	0xd2f1a9fc
 800478c:	3f50624d 	.word	0x3f50624d
 8004790:	41a00000 	.word	0x41a00000
 8004794:	40a00000 	.word	0x40a00000
 8004798:	3ea0d97c 	.word	0x3ea0d97c
 800479c:	3d00adfd 	.word	0x3d00adfd
 80047a0:	bf800000 	.word	0xbf800000
 80047a4:	3c23d70a 	.word	0x3c23d70a
	 } else {
		 j_max = a_design/tm;
 80047a8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80047ac:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80047b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	 }
	 v_lim = a_design*tm;
 80047b8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80047bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	 tf    = 4*tm + tc;
 80047c8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80047cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80047d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	 no_sample = ceilf(tf / T_SAMPLING);
 80047e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80047e4:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80047a4 <scaraInitScurve+0x1c4>
 80047e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047ec:	eeb0 0a66 	vmov.f32	s0, s13
 80047f0:	f010 f966 	bl	8014ac0 <ceilf>
 80047f4:	eef0 7a40 	vmov.f32	s15, s0
 80047f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fc:	ee17 3a90 	vmov	r3, s15
 8004800:	637b      	str	r3, [r7, #52]	; 0x34

	 v_1 = 0.5*j_max*tm*tm;
 8004802:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004804:	f7fb feb0 	bl	8000568 <__aeabi_f2d>
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	4b63      	ldr	r3, [pc, #396]	; (800499c <scaraInitScurve+0x3bc>)
 800480e:	f7fb ff03 	bl	8000618 <__aeabi_dmul>
 8004812:	4603      	mov	r3, r0
 8004814:	460c      	mov	r4, r1
 8004816:	4625      	mov	r5, r4
 8004818:	461c      	mov	r4, r3
 800481a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800481c:	f7fb fea4 	bl	8000568 <__aeabi_f2d>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fef6 	bl	8000618 <__aeabi_dmul>
 800482c:	4603      	mov	r3, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4625      	mov	r5, r4
 8004832:	461c      	mov	r4, r3
 8004834:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004836:	f7fb fe97 	bl	8000568 <__aeabi_f2d>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4620      	mov	r0, r4
 8004840:	4629      	mov	r1, r5
 8004842:	f7fb fee9 	bl	8000618 <__aeabi_dmul>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	4618      	mov	r0, r3
 800484c:	4621      	mov	r1, r4
 800484e:	f7fc f9db 	bl	8000c08 <__aeabi_d2f>
 8004852:	4603      	mov	r3, r0
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
	 s_1 = j_max*tm*tm*tm/6;
 8004856:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800485a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800485e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004862:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800486a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800486e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004872:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8004876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800487a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	 v_2 = j_max*tm*tm;
 800487e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004882:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	 s_2 = v_2*tm;
 8004896:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800489a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	 v_3 = v_2;
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	623b      	str	r3, [r7, #32]
	 s_3 = s_2 + v_2*tc;
 80048aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80048ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80048ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
	 v_4 = v_1;
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	61bb      	str	r3, [r7, #24]
	 s_4 = s_3 + s_2 - s_1;
 80048c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80048ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048da:	edc7 7a05 	vstr	s15, [r7, #20]

	 scurve->Tc = tc;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c
	 scurve->Tf = tf;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
	 scurve->Tm = tm;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
	 scurve->a_design = a_design;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048f4:	619a      	str	r2, [r3, #24]
	 scurve->v_design = v_design;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048fa:	615a      	str	r2, [r3, #20]
	 scurve->v_lim = v_lim;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004900:	61da      	str	r2, [r3, #28]
	 scurve->v0 = v0;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004906:	60da      	str	r2, [r3, #12]
	 scurve->v1 = v1;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800490c:	611a      	str	r2, [r3, #16]
	 scurve->j_max = j_max;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
	 scurve->s0   = q0;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004918:	605a      	str	r2, [r3, #4]
	 scurve->s1   = q1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800491e:	609a      	str	r2, [r3, #8]
	 scurve->num_of_phase = no_phases;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8004926:	f883 2020 	strb.w	r2, [r3, #32]
	 scurve->num_of_sampling = no_sample;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
	 scurve->total_s = total_s;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
	 scurve->dir = dir;
 8004936:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800493a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493e:	edc7 7a00 	vstr	s15, [r7]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b25a      	sxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	65da      	str	r2, [r3, #92]	; 0x5c
	 scurve->v_current = 0;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60
	 scurve->s_current = 0;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	665a      	str	r2, [r3, #100]	; 0x64
	 scurve->v_1 = v_1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
	 scurve->v_2 = v_2;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
	 scurve->v_3 = v_3;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	64da      	str	r2, [r3, #76]	; 0x4c
	 scurve->v_4 = v_4;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
	 scurve->s_1 = s_1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
	 scurve->s_2 = s_2;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	649a      	str	r2, [r3, #72]	; 0x48
	 scurve->s_3 = s_3;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
	 scurve->s_4 = s_4;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	659a      	str	r2, [r3, #88]	; 0x58

	 return SCARA_STATUS_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3778      	adds	r7, #120	; 0x78
 8004998:	46bd      	mov	sp, r7
 800499a:	bdb0      	pop	{r4, r5, r7, pc}
 800499c:	3fe00000 	.word	0x3fe00000

080049a0 <scaraFlowDuty>:

SCARA_StatusTypeDef	scaraFlowDuty		(float time) {
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b0a5      	sub	sp, #148	; 0x94
 80049a4:	af0a      	add	r7, sp, #40	; 0x28
 80049a6:	ed87 0a01 	vstr	s0, [r7, #4]
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80049aa:	4bb6      	ldr	r3, [pc, #728]	; (8004c84 <scaraFlowDuty+0x2e4>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80ae 	bne.w	8004b10 <scaraFlowDuty+0x170>
		float s, angle, x, y, z;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80049b4:	4bb3      	ldr	r3, [pc, #716]	; (8004c84 <scaraFlowDuty+0x2e4>)
 80049b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <scaraFlowDuty+0x50>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80049be:	ed97 0a01 	vldr	s0, [r7, #4]
 80049c2:	48b1      	ldr	r0, [pc, #708]	; (8004c88 <scaraFlowDuty+0x2e8>)
 80049c4:	f000 fab0 	bl	8004f28 <scaraFlowLSPB>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80049ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80049d2:	48ae      	ldr	r0, [pc, #696]	; (8004c8c <scaraFlowDuty+0x2ec>)
 80049d4:	f000 faa8 	bl	8004f28 <scaraFlowLSPB>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80049de:	4ba9      	ldr	r3, [pc, #676]	; (8004c84 <scaraFlowDuty+0x2e4>)
 80049e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80049e4:	663b      	str	r3, [r7, #96]	; 0x60
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80049e6:	4ba7      	ldr	r3, [pc, #668]	; (8004c84 <scaraFlowDuty+0x2e4>)
 80049e8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e01f      	b.n	8004a30 <scaraFlowDuty+0x90>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80049f0:	4ba4      	ldr	r3, [pc, #656]	; (8004c84 <scaraFlowDuty+0x2e4>)
 80049f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d118      	bne.n	8004a2c <scaraFlowDuty+0x8c>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80049fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80049fe:	48a4      	ldr	r0, [pc, #656]	; (8004c90 <scaraFlowDuty+0x2f0>)
 8004a00:	f000 fbc8 	bl	8005194 <scaraFLowScurve>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8004a0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a0e:	48a1      	ldr	r0, [pc, #644]	; (8004c94 <scaraFlowDuty+0x2f4>)
 8004a10:	f000 fbc0 	bl	8005194 <scaraFLowScurve>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8004a1a:	4b9a      	ldr	r3, [pc, #616]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004a20:	663b      	str	r3, [r7, #96]	; 0x60
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8004a22:	4b98      	ldr	r3, [pc, #608]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a24:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8004a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2a:	e001      	b.n	8004a30 <scaraFlowDuty+0x90>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004a2c:	2305      	movs	r3, #5
 8004a2e:	e1c1      	b.n	8004db4 <scaraFlowDuty+0x414>
		}

		if ( SCARA_STATUS_OK != status1) {
 8004a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <scaraFlowDuty+0x9e>
			return status1;
 8004a38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a3c:	e1ba      	b.n	8004db4 <scaraFlowDuty+0x414>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004a3e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <scaraFlowDuty+0xac>
			return status2;
 8004a46:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a4a:	e1b3      	b.n	8004db4 <scaraFlowDuty+0x414>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8004a4c:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <scaraFlowDuty+0xd8>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8004a54:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004a58:	488f      	ldr	r0, [pc, #572]	; (8004c98 <scaraFlowDuty+0x2f8>)
 8004a5a:	f000 f9b3 	bl	8004dc4 <scaraFlowLine>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			x = myDUTY.task.path.line.x_current;
 8004a64:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	65bb      	str	r3, [r7, #88]	; 0x58
			y = myDUTY.task.path.line.y_current;
 8004a6a:	4b86      	ldr	r3, [pc, #536]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
			z = myDUTY.task.path.line.z_current;
 8004a70:	4b84      	ldr	r3, [pc, #528]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
 8004a76:	e019      	b.n	8004aac <scaraFlowDuty+0x10c>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8004a78:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d113      	bne.n	8004aa8 <scaraFlowDuty+0x108>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8004a80:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004a84:	4885      	ldr	r0, [pc, #532]	; (8004c9c <scaraFlowDuty+0x2fc>)
 8004a86:	f000 f9e7 	bl	8004e58 <scaraFlowCircle>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			x = myDUTY.task.path.circle.x_current;
 8004a90:	4b7c      	ldr	r3, [pc, #496]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	65bb      	str	r3, [r7, #88]	; 0x58
			y = myDUTY.task.path.circle.y_current;
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9c:	657b      	str	r3, [r7, #84]	; 0x54
			z = myDUTY.task.path.circle.z_current;
 8004a9e:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa6:	e001      	b.n	8004aac <scaraFlowDuty+0x10c>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e183      	b.n	8004db4 <scaraFlowDuty+0x414>
		}

		positionCompute.x 		= x;
 8004aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aae:	61fb      	str	r3, [r7, #28]
		positionCompute.y		= y;
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	623b      	str	r3, [r7, #32]
		positionCompute.z 		= z;
 8004ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
		positionCompute.roll 	= myDUTY.task.roll_start + angle;
 8004ab8:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004aba:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8004abe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		if ( FALSE == kinematicInverse(&positionCompute, positionCurrent)) {
 8004aca:	4e75      	ldr	r6, [pc, #468]	; (8004ca0 <scaraFlowDuty+0x300>)
 8004acc:	f107 0c0c 	add.w	ip, r7, #12
 8004ad0:	466d      	mov	r5, sp
 8004ad2:	f106 040c 	add.w	r4, r6, #12
 8004ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004ae6:	4660      	mov	r0, ip
 8004ae8:	f7fd ff10 	bl	800290c <kinematicInverse>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <scaraFlowDuty+0x156>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004af2:	2307      	movs	r3, #7
 8004af4:	e15e      	b.n	8004db4 <scaraFlowDuty+0x414>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8004af6:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <scaraFlowDuty+0x304>)
 8004af8:	461d      	mov	r5, r3
 8004afa:	f107 040c 	add.w	r4, r7, #12
 8004afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b0e:	e150      	b.n	8004db2 <scaraFlowDuty+0x412>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8004b10:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f040 814a 	bne.w	8004dae <scaraFlowDuty+0x40e>
		float s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b1c:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d145      	bne.n	8004bb0 <scaraFlowDuty+0x210>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8004b24:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b28:	485f      	ldr	r0, [pc, #380]	; (8004ca8 <scaraFlowDuty+0x308>)
 8004b2a:	f000 f9fd 	bl	8004f28 <scaraFlowLSPB>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8004b34:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b38:	485c      	ldr	r0, [pc, #368]	; (8004cac <scaraFlowDuty+0x30c>)
 8004b3a:	f000 f9f5 	bl	8004f28 <scaraFlowLSPB>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8004b44:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b48:	4859      	ldr	r0, [pc, #356]	; (8004cb0 <scaraFlowDuty+0x310>)
 8004b4a:	f000 f9ed 	bl	8004f28 <scaraFlowLSPB>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8004b54:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b58:	4856      	ldr	r0, [pc, #344]	; (8004cb4 <scaraFlowDuty+0x314>)
 8004b5a:	f000 f9e5 	bl	8004f28 <scaraFlowLSPB>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8004b64:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b66:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8004b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8004b6e:	4b45      	ldr	r3, [pc, #276]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b70:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8004b74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b7a:	f893 3340 	ldrb.w	r3, [r3, #832]	; 0x340
 8004b7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8004b82:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b84:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8004b88:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b8e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b96:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8004b9c:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8004ba4:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004ba6:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	643b      	str	r3, [r7, #64]	; 0x40
 8004bae:	e04c      	b.n	8004c4a <scaraFlowDuty+0x2aa>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8004bb0:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004bb2:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d145      	bne.n	8004c46 <scaraFlowDuty+0x2a6>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8004bba:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bbe:	483e      	ldr	r0, [pc, #248]	; (8004cb8 <scaraFlowDuty+0x318>)
 8004bc0:	f000 fae8 	bl	8005194 <scaraFLowScurve>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8004bca:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bce:	483b      	ldr	r0, [pc, #236]	; (8004cbc <scaraFlowDuty+0x31c>)
 8004bd0:	f000 fae0 	bl	8005194 <scaraFLowScurve>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8004bda:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bde:	4838      	ldr	r0, [pc, #224]	; (8004cc0 <scaraFlowDuty+0x320>)
 8004be0:	f000 fad8 	bl	8005194 <scaraFLowScurve>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8004bea:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bee:	4835      	ldr	r0, [pc, #212]	; (8004cc4 <scaraFlowDuty+0x324>)
 8004bf0:	f000 fad0 	bl	8005194 <scaraFLowScurve>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8004bfa:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004bfc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8004c04:	4b1f      	ldr	r3, [pc, #124]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c06:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 8004c0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c10:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8004c14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c1a:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 8004c1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c28:	64fb      	str	r3, [r7, #76]	; 0x4c
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c2c:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8004c30:	64bb      	str	r3, [r7, #72]	; 0x48
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c34:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <scaraFlowDuty+0x2e4>)
 8004c3c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	643b      	str	r3, [r7, #64]	; 0x40
 8004c44:	e001      	b.n	8004c4a <scaraFlowDuty+0x2aa>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004c46:	2305      	movs	r3, #5
 8004c48:	e0b4      	b.n	8004db4 <scaraFlowDuty+0x414>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8004c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <scaraFlowDuty+0x2b8>
			return status1;
 8004c52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c56:	e0ad      	b.n	8004db4 <scaraFlowDuty+0x414>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004c58:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <scaraFlowDuty+0x2c6>
			return status2;
 8004c60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c64:	e0a6      	b.n	8004db4 <scaraFlowDuty+0x414>
		}
		if ( SCARA_STATUS_OK != status3) {
 8004c66:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <scaraFlowDuty+0x2d4>
			return status3;
 8004c6e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004c72:	e09f      	b.n	8004db4 <scaraFlowDuty+0x414>
		}
		if ( SCARA_STATUS_OK != status4) {
 8004c74:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d025      	beq.n	8004cc8 <scaraFlowDuty+0x328>
			return status4;
 8004c7c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004c80:	e098      	b.n	8004db4 <scaraFlowDuty+0x414>
 8004c82:	bf00      	nop
 8004c84:	200052e8 	.word	0x200052e8
 8004c88:	20005374 	.word	0x20005374
 8004c8c:	20005420 	.word	0x20005420
 8004c90:	200053b4 	.word	0x200053b4
 8004c94:	20005460 	.word	0x20005460
 8004c98:	200052f0 	.word	0x200052f0
 8004c9c:	20005328 	.word	0x20005328
 8004ca0:	20005790 	.word	0x20005790
 8004ca4:	200057c0 	.word	0x200057c0
 8004ca8:	200054d0 	.word	0x200054d0
 8004cac:	2000557c 	.word	0x2000557c
 8004cb0:	20005628 	.word	0x20005628
 8004cb4:	200056d4 	.word	0x200056d4
 8004cb8:	20005510 	.word	0x20005510
 8004cbc:	200055bc 	.word	0x200055bc
 8004cc0:	20005668 	.word	0x20005668
 8004cc4:	20005714 	.word	0x20005714
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8004cc8:	4b3c      	ldr	r3, [pc, #240]	; (8004dbc <scaraFlowDuty+0x41c>)
 8004cca:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8004cce:	ed93 7a00 	vldr	s14, [r3]
 8004cd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cde:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <scaraFlowDuty+0x41c>)
 8004cf0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8004cf4:	ed93 7a00 	vldr	s14, [r3]
 8004cf8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8004cfc:	ee07 3a90 	vmov	s15, r3
 8004d00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d10:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <scaraFlowDuty+0x41c>)
 8004d16:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d1a:	ed93 7a00 	vldr	s14, [r3]
 8004d1e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d36:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <scaraFlowDuty+0x41c>)
 8004d3c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8004d40:	ed93 7a00 	vldr	s14, [r3]
 8004d44:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d50:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8004d60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004d68:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004d6c:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8004d70:	eef0 1a46 	vmov.f32	s3, s12
 8004d74:	eeb0 1a66 	vmov.f32	s2, s13
 8004d78:	eef0 0a47 	vmov.f32	s1, s14
 8004d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d80:	f001 f822 	bl	8005dc8 <scaraCheckWorkSpace4>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <scaraFlowDuty+0x3ee>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004d8a:	2307      	movs	r3, #7
 8004d8c:	e012      	b.n	8004db4 <scaraFlowDuty+0x414>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <scaraFlowDuty+0x420>)
 8004d90:	461d      	mov	r5, r3
 8004d92:	f107 040c 	add.w	r4, r7, #12
 8004d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004da2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		}
		kinematicForward(&positionNext);
 8004da6:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <scaraFlowDuty+0x420>)
 8004da8:	f7fd fcfa 	bl	80027a0 <kinematicForward>
 8004dac:	e001      	b.n	8004db2 <scaraFlowDuty+0x412>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e000      	b.n	8004db4 <scaraFlowDuty+0x414>
	}

	return SCARA_STATUS_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	376c      	adds	r7, #108	; 0x6c
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dbc:	200052e8 	.word	0x200052e8
 8004dc0:	200057c0 	.word	0x200057c0

08004dc4 <scaraFlowLine>:

SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, float s) {
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	ed87 0a00 	vstr	s0, [r7]
	line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	ed93 7a00 	vldr	s14, [r3]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	edd3 6a06 	vldr	s13, [r3, #24]
 8004ddc:	edd7 7a00 	vldr	s15, [r7]
 8004de0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004dea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	edd3 6a07 	vldr	s13, [r3, #28]
 8004e04:	edd7 7a00 	vldr	s15, [r7]
 8004e08:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004e12:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e2c:	edd7 7a00 	vldr	s15, [r7]
 8004e30:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004e3a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return SCARA_STATUS_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <scaraFlowCircle>:

SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, float s) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	ed2d 8b02 	vpush	{d8}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	ed87 0a00 	vstr	s0, [r7]
	float angle;
	angle = s/(2*PI*circle->radius);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e6e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004f24 <scaraFlowCircle+0xcc>
 8004e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e76:	edd7 6a00 	vldr	s13, [r7]
 8004e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e7e:	edc7 7a03 	vstr	s15, [r7, #12]
	circle->x_current = circle->xi + circle->radius*cosf(circle->angle_start + circle->dir*angle);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	ed93 8a08 	vldr	s16, [r3, #32]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	edd3 8a01 	vldr	s17, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f993 3000 	ldrsb.w	r3, [r3]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eae:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb2:	f00f fe45 	bl	8014b40 <cosf>
 8004eb6:	eef0 7a40 	vmov.f32	s15, s0
 8004eba:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ebe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	circle->y_current = circle->yi + circle->radius*sinf(circle->angle_start + circle->dir*angle);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	edd3 8a01 	vldr	s17, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f993 3000 	ldrsb.w	r3, [r3]
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef8:	f00f fe62 	bl	8014bc0 <sinf>
 8004efc:	eef0 7a40 	vmov.f32	s15, s0
 8004f00:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004f04:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	circle->z_current = circle->zi; // XY plane
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44

	return SCARA_STATUS_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	ecbd 8b02 	vpop	{d8}
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40c90fdb 	.word	0x40c90fdb

08004f28 <scaraFlowLSPB>:

SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, float time) {
 8004f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	ed87 0a00 	vstr	s0, [r7]
	float tf, td, ta;

	tf = lspb->Tf;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	617b      	str	r3, [r7, #20]
	td = lspb->Td;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	613b      	str	r3, [r7, #16]
	ta = lspb->Ta;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	60fb      	str	r3, [r7, #12]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8004f48:	edd7 7a00 	vldr	s15, [r7]
 8004f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	db61      	blt.n	800501a <scaraFlowLSPB+0xf2>
 8004f56:	ed97 7a00 	vldr	s14, [r7]
 8004f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d858      	bhi.n	800501a <scaraFlowLSPB+0xf2>
		lspb->a_current		=	lspb->a_design;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	edd3 6a06 	vldr	s13, [r3, #24]
 8004f7c:	edd7 7a00 	vldr	s15, [r7]
 8004f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f9a:	edd7 7a00 	vldr	s15, [r7]
 8004f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa6:	ee17 0a90 	vmov	r0, s15
 8004faa:	f7fb fadd 	bl	8000568 <__aeabi_f2d>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fad6 	bl	8000568 <__aeabi_f2d>
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	4b73      	ldr	r3, [pc, #460]	; (8005190 <scaraFlowLSPB+0x268>)
 8004fc2:	f7fb fb29 	bl	8000618 <__aeabi_dmul>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f7fb faca 	bl	8000568 <__aeabi_f2d>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb fb1c 	bl	8000618 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4690      	mov	r8, r2
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	6838      	ldr	r0, [r7, #0]
 8004fea:	f7fb fabd 	bl	8000568 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	f7fb fb0f 	bl	8000618 <__aeabi_dmul>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb f953 	bl	80002ac <__adddf3>
 8005006:	4603      	mov	r3, r0
 8005008:	460c      	mov	r4, r1
 800500a:	4618      	mov	r0, r3
 800500c:	4621      	mov	r1, r4
 800500e:	f7fb fdfb 	bl	8000c08 <__aeabi_d2f>
 8005012:	4602      	mov	r2, r0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c
 8005018:	e0b3      	b.n	8005182 <scaraFlowLSPB+0x25a>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 800501a:	ed97 7a03 	vldr	s14, [r7, #12]
 800501e:	edd7 7a00 	vldr	s15, [r7]
 8005022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	d839      	bhi.n	80050a0 <scaraFlowLSPB+0x178>
 800502c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005030:	edd7 7a04 	vldr	s15, [r7, #16]
 8005034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005038:	ed97 7a00 	vldr	s14, [r7]
 800503c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	d82c      	bhi.n	80050a0 <scaraFlowLSPB+0x178>
		lspb->a_current		=	0;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v_lim;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	ed93 7a01 	vldr	s14, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005062:	edd7 7a03 	vldr	s15, [r7, #12]
 8005066:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800506a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800506e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	edd3 6a07 	vldr	s13, [r3, #28]
 800507c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005080:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005088:	ed97 6a00 	vldr	s12, [r7]
 800508c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800509e:	e070      	b.n	8005182 <scaraFlowLSPB+0x25a>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 80050a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80050a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80050a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ac:	ed97 7a00 	vldr	s14, [r7]
 80050b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	db57      	blt.n	800516a <scaraFlowLSPB+0x242>
 80050ba:	ed97 7a00 	vldr	s14, [r7]
 80050be:	edd7 7a05 	vldr	s15, [r7, #20]
 80050c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d84e      	bhi.n	800516a <scaraFlowLSPB+0x242>
		lspb->a_current		=	-lspb->a_design;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80050d2:	eef1 7a67 	vneg.f32	s15, s15
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	ed93 7a04 	vldr	s14, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	edd3 6a06 	vldr	s13, [r3, #24]
 80050e8:	ed97 6a05 	vldr	s12, [r7, #20]
 80050ec:	edd7 7a00 	vldr	s15, [r7]
 80050f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80050f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	ed93 7a02 	vldr	s14, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	edd3 6a04 	vldr	s13, [r3, #16]
 800510e:	ed97 6a05 	vldr	s12, [r7, #20]
 8005112:	edd7 7a00 	vldr	s15, [r7]
 8005116:	ee76 7a67 	vsub.f32	s15, s12, s15
 800511a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800511e:	ee37 7a67 	vsub.f32	s14, s14, s15
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf -time)/(2*td);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	edd3 6a07 	vldr	s13, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	edd3 7a04 	vldr	s15, [r3, #16]
 800512e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005132:	ed97 6a05 	vldr	s12, [r7, #20]
 8005136:	edd7 7a00 	vldr	s15, [r7]
 800513a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800513e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005142:	ed97 6a05 	vldr	s12, [r7, #20]
 8005146:	edd7 7a00 	vldr	s15, [r7]
 800514a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800514e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005152:	edd7 7a04 	vldr	s15, [r7, #16]
 8005156:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800515a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800515e:	ee77 7a67 	vsub.f32	s15, s14, s15
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8005168:	e00b      	b.n	8005182 <scaraFlowLSPB+0x25a>
	} else {
		lspb->a_current 	=	0;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	0;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->total_s;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return SCARA_STATUS_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800518e:	bf00      	nop
 8005190:	3fe00000 	.word	0x3fe00000

08005194 <scaraFLowScurve>:

SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, float time) {
 8005194:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	ed87 0a00 	vstr	s0, [r7]
	float j_max, tm, tc, t;

	j_max = scurve->j_max;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	617b      	str	r3, [r7, #20]
	tm	  = scurve->Tm;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	613b      	str	r3, [r7, #16]
	tc	  = scurve->Tc;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	60fb      	str	r3, [r7, #12]

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	f040 82d1 	bne.w	8005762 <scaraFLowScurve+0x5ce>
		 // Phase 1
		 if ( (0.0f <= time) && ( time <= tm)) {
 80051c0:	edd7 7a00 	vldr	s15, [r7]
 80051c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	db55      	blt.n	800527a <scaraFLowScurve+0xe6>
 80051ce:	ed97 7a00 	vldr	s14, [r7]
 80051d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80051d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051de:	d84c      	bhi.n	800527a <scaraFLowScurve+0xe6>
			 t = time;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	60bb      	str	r3, [r7, #8]
			 scurve->a_current 	= 	j_max*t;
 80051e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80051e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80051ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	= 	0.5*j_max*t*t;
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7fb f9b6 	bl	8000568 <__aeabi_f2d>
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	4bd7      	ldr	r3, [pc, #860]	; (8005560 <scaraFLowScurve+0x3cc>)
 8005202:	f7fb fa09 	bl	8000618 <__aeabi_dmul>
 8005206:	4603      	mov	r3, r0
 8005208:	460c      	mov	r4, r1
 800520a:	4625      	mov	r5, r4
 800520c:	461c      	mov	r4, r3
 800520e:	68b8      	ldr	r0, [r7, #8]
 8005210:	f7fb f9aa 	bl	8000568 <__aeabi_f2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f7fb f9fc 	bl	8000618 <__aeabi_dmul>
 8005220:	4603      	mov	r3, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4625      	mov	r5, r4
 8005226:	461c      	mov	r4, r3
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f7fb f99d 	bl	8000568 <__aeabi_f2d>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb f9ef 	bl	8000618 <__aeabi_dmul>
 800523a:	4603      	mov	r3, r0
 800523c:	460c      	mov	r4, r1
 800523e:	4618      	mov	r0, r3
 8005240:	4621      	mov	r1, r4
 8005242:	f7fb fce1 	bl	8000c08 <__aeabi_d2f>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800524c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005250:	edd7 7a02 	vldr	s15, [r7, #8]
 8005254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005258:	edd7 7a02 	vldr	s15, [r7, #8]
 800525c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005260:	edd7 7a02 	vldr	s15, [r7, #8]
 8005264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005268:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800526c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005276:	f000 bd9f 	b.w	8005db8 <scaraFLowScurve+0xc24>
		 // Phase 2
		 } else if ( (tm <= time) && ( time <= (2*tm) ) ) {
 800527a:	ed97 7a04 	vldr	s14, [r7, #16]
 800527e:	edd7 7a00 	vldr	s15, [r7]
 8005282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528a:	f200 80dd 	bhi.w	8005448 <scaraFLowScurve+0x2b4>
 800528e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005292:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005296:	ed97 7a00 	vldr	s14, [r7]
 800529a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	f200 80d1 	bhi.w	8005448 <scaraFLowScurve+0x2b4>
			 t = time - tm;
 80052a6:	ed97 7a00 	vldr	s14, [r7]
 80052aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80052ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b2:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80052b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80052ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80052be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80052c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80052de:	edd7 6a05 	vldr	s13, [r7, #20]
 80052e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f6:	ee17 0a90 	vmov	r0, s15
 80052fa:	f7fb f935 	bl	8000568 <__aeabi_f2d>
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f7fb f930 	bl	8000568 <__aeabi_f2d>
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	4b94      	ldr	r3, [pc, #592]	; (8005560 <scaraFLowScurve+0x3cc>)
 800530e:	f7fb f983 	bl	8000618 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4690      	mov	r8, r2
 8005318:	4699      	mov	r9, r3
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f7fb f924 	bl	8000568 <__aeabi_f2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4640      	mov	r0, r8
 8005326:	4649      	mov	r1, r9
 8005328:	f7fb f976 	bl	8000618 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4690      	mov	r8, r2
 8005332:	4699      	mov	r9, r3
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	f7fb f917 	bl	8000568 <__aeabi_f2d>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fb f969 	bl	8000618 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fa ffab 	bl	80002a8 <__aeabi_dsub>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	4618      	mov	r0, r3
 8005358:	4621      	mov	r1, r4
 800535a:	f7fb fc55 	bl	8000c08 <__aeabi_d2f>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005370:	edd7 7a02 	vldr	s15, [r7, #8]
 8005374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537c:	ee17 0a90 	vmov	r0, s15
 8005380:	f7fb f8f2 	bl	8000568 <__aeabi_f2d>
 8005384:	4604      	mov	r4, r0
 8005386:	460d      	mov	r5, r1
 8005388:	6978      	ldr	r0, [r7, #20]
 800538a:	f7fb f8ed 	bl	8000568 <__aeabi_f2d>
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	4b73      	ldr	r3, [pc, #460]	; (8005560 <scaraFLowScurve+0x3cc>)
 8005394:	f7fb f940 	bl	8000618 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4690      	mov	r8, r2
 800539e:	4699      	mov	r9, r3
 80053a0:	6938      	ldr	r0, [r7, #16]
 80053a2:	f7fb f8e1 	bl	8000568 <__aeabi_f2d>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4640      	mov	r0, r8
 80053ac:	4649      	mov	r1, r9
 80053ae:	f7fb f933 	bl	8000618 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	68b8      	ldr	r0, [r7, #8]
 80053bc:	f7fb f8d4 	bl	8000568 <__aeabi_f2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb f926 	bl	8000618 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4690      	mov	r8, r2
 80053d2:	4699      	mov	r9, r3
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7fb f8c7 	bl	8000568 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fb f919 	bl	8000618 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4620      	mov	r0, r4
 80053ec:	4629      	mov	r1, r5
 80053ee:	f7fa ff5d 	bl	80002ac <__adddf3>
 80053f2:	4603      	mov	r3, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	4625      	mov	r5, r4
 80053f8:	461c      	mov	r4, r3
 80053fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80053fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005406:	edd7 7a02 	vldr	s15, [r7, #8]
 800540a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800540e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800541a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800541e:	ee16 0a90 	vmov	r0, s13
 8005422:	f7fb f8a1 	bl	8000568 <__aeabi_f2d>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fa ff3b 	bl	80002a8 <__aeabi_dsub>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	4618      	mov	r0, r3
 8005438:	4621      	mov	r1, r4
 800543a:	f7fb fbe5 	bl	8000c08 <__aeabi_d2f>
 800543e:	4602      	mov	r2, r0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	665a      	str	r2, [r3, #100]	; 0x64
 8005444:	f000 bcb8 	b.w	8005db8 <scaraFLowScurve+0xc24>
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time <= (3*tm)) ) {
 8005448:	edd7 7a04 	vldr	s15, [r7, #16]
 800544c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005450:	ed97 7a00 	vldr	s14, [r7]
 8005454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	f2c0 8082 	blt.w	8005564 <scaraFLowScurve+0x3d0>
 8005460:	edd7 7a04 	vldr	s15, [r7, #16]
 8005464:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546c:	ed97 7a00 	vldr	s14, [r7]
 8005470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005478:	d874      	bhi.n	8005564 <scaraFLowScurve+0x3d0>
			 t = time - 2*tm;
 800547a:	edd7 7a04 	vldr	s15, [r7, #16]
 800547e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005482:	ed97 7a00 	vldr	s14, [r7]
 8005486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548a:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	-j_max*t;
 800548e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005492:	eeb1 7a67 	vneg.f32	s14, s15
 8005496:	edd7 7a02 	vldr	s15, [r7, #8]
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fb f85d 	bl	8000568 <__aeabi_f2d>
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7fb f858 	bl	8000568 <__aeabi_f2d>
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <scaraFLowScurve+0x3cc>)
 80054be:	f7fb f8ab 	bl	8000618 <__aeabi_dmul>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4690      	mov	r8, r2
 80054c8:	4699      	mov	r9, r3
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f7fb f84c 	bl	8000568 <__aeabi_f2d>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4640      	mov	r0, r8
 80054d6:	4649      	mov	r1, r9
 80054d8:	f7fb f89e 	bl	8000618 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4690      	mov	r8, r2
 80054e2:	4699      	mov	r9, r3
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f7fb f83f 	bl	8000568 <__aeabi_f2d>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb f891 	bl	8000618 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fa fed3 	bl	80002a8 <__aeabi_dsub>
 8005502:	4603      	mov	r3, r0
 8005504:	460c      	mov	r4, r1
 8005506:	4618      	mov	r0, r3
 8005508:	4621      	mov	r1, r4
 800550a:	f7fb fb7d 	bl	8000c08 <__aeabi_d2f>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005520:	edd7 7a02 	vldr	s15, [r7, #8]
 8005524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800552c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005530:	edd7 7a02 	vldr	s15, [r7, #8]
 8005534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005538:	edd7 7a02 	vldr	s15, [r7, #8]
 800553c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005540:	edd7 7a02 	vldr	s15, [r7, #8]
 8005544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005548:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800554c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800555a:	f000 bc2d 	b.w	8005db8 <scaraFLowScurve+0xc24>
 800555e:	bf00      	nop
 8005560:	3fe00000 	.word	0x3fe00000
		 // Phase 4
		 } else if ( ((3*tm) <= time) && ( time <= (4*tm)) ) {
 8005564:	edd7 7a04 	vldr	s15, [r7, #16]
 8005568:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800556c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005570:	ed97 7a00 	vldr	s14, [r7]
 8005574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	f2c0 80e4 	blt.w	8005748 <scaraFLowScurve+0x5b4>
 8005580:	edd7 7a04 	vldr	s15, [r7, #16]
 8005584:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558c:	ed97 7a00 	vldr	s14, [r7]
 8005590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005598:	f200 80d6 	bhi.w	8005748 <scaraFLowScurve+0x5b4>
			 t = time - 3*tm;
 800559c:	edd7 7a04 	vldr	s15, [r7, #16]
 80055a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80055a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a8:	ed97 7a00 	vldr	s14, [r7]
 80055ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055b0:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80055b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80055b8:	eeb1 7a67 	vneg.f32	s14, s15
 80055bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80055c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80055c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80055cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80055e0:	edd7 6a05 	vldr	s13, [r7, #20]
 80055e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80055f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f8:	ee17 0a90 	vmov	r0, s15
 80055fc:	f7fa ffb4 	bl	8000568 <__aeabi_f2d>
 8005600:	4604      	mov	r4, r0
 8005602:	460d      	mov	r5, r1
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f7fa ffaf 	bl	8000568 <__aeabi_f2d>
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	4b86      	ldr	r3, [pc, #536]	; (8005828 <scaraFLowScurve+0x694>)
 8005610:	f7fb f802 	bl	8000618 <__aeabi_dmul>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4690      	mov	r8, r2
 800561a:	4699      	mov	r9, r3
 800561c:	68b8      	ldr	r0, [r7, #8]
 800561e:	f7fa ffa3 	bl	8000568 <__aeabi_f2d>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa fff5 	bl	8000618 <__aeabi_dmul>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4690      	mov	r8, r2
 8005634:	4699      	mov	r9, r3
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f7fa ff96 	bl	8000568 <__aeabi_f2d>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4640      	mov	r0, r8
 8005642:	4649      	mov	r1, r9
 8005644:	f7fa ffe8 	bl	8000618 <__aeabi_dmul>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f7fa fe2c 	bl	80002ac <__adddf3>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	4618      	mov	r0, r3
 800565a:	4621      	mov	r1, r4
 800565c:	f7fb fad4 	bl	8000c08 <__aeabi_d2f>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8005672:	edd7 7a02 	vldr	s15, [r7, #8]
 8005676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800567a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567e:	ee17 0a90 	vmov	r0, s15
 8005682:	f7fa ff71 	bl	8000568 <__aeabi_f2d>
 8005686:	4604      	mov	r4, r0
 8005688:	460d      	mov	r5, r1
									- 0.5*j_max*tm*t*t
 800568a:	6978      	ldr	r0, [r7, #20]
 800568c:	f7fa ff6c 	bl	8000568 <__aeabi_f2d>
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <scaraFLowScurve+0x694>)
 8005696:	f7fa ffbf 	bl	8000618 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4690      	mov	r8, r2
 80056a0:	4699      	mov	r9, r3
 80056a2:	6938      	ldr	r0, [r7, #16]
 80056a4:	f7fa ff60 	bl	8000568 <__aeabi_f2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fa ffb2 	bl	8000618 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4690      	mov	r8, r2
 80056ba:	4699      	mov	r9, r3
 80056bc:	68b8      	ldr	r0, [r7, #8]
 80056be:	f7fa ff53 	bl	8000568 <__aeabi_f2d>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fa ffa5 	bl	8000618 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4690      	mov	r8, r2
 80056d4:	4699      	mov	r9, r3
 80056d6:	68b8      	ldr	r0, [r7, #8]
 80056d8:	f7fa ff46 	bl	8000568 <__aeabi_f2d>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa ff98 	bl	8000618 <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa fdda 	bl	80002a8 <__aeabi_dsub>
 80056f4:	4603      	mov	r3, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	4625      	mov	r5, r4
 80056fa:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80056fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005700:	edd7 7a02 	vldr	s15, [r7, #8]
 8005704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005708:	edd7 7a02 	vldr	s15, [r7, #8]
 800570c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005710:	edd7 7a02 	vldr	s15, [r7, #8]
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800571c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005720:	ee16 0a90 	vmov	r0, s13
 8005724:	f7fa ff20 	bl	8000568 <__aeabi_f2d>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa fdbc 	bl	80002ac <__adddf3>
 8005734:	4603      	mov	r3, r0
 8005736:	460c      	mov	r4, r1
 8005738:	4618      	mov	r0, r3
 800573a:	4621      	mov	r1, r4
 800573c:	f7fb fa64 	bl	8000c08 <__aeabi_d2f>
 8005740:	4602      	mov	r2, r0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	665a      	str	r2, [r3, #100]	; 0x64
 8005746:	e337      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 } else {
			 scurve->a_current = 0;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current = 0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current = scurve->total_s;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	665a      	str	r2, [r3, #100]	; 0x64
 8005760:	e32a      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005768:	2b05      	cmp	r3, #5
 800576a:	f040 8323 	bne.w	8005db4 <scaraFLowScurve+0xc20>
		 // Phase 1
		 if ( (0 <= time) && ( time <= tm)) {
 800576e:	edd7 7a00 	vldr	s15, [r7]
 8005772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	db57      	blt.n	800582c <scaraFLowScurve+0x698>
 800577c:	ed97 7a00 	vldr	s14, [r7]
 8005780:	edd7 7a04 	vldr	s15, [r7, #16]
 8005784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578c:	d84e      	bhi.n	800582c <scaraFLowScurve+0x698>
			 t = time;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	60bb      	str	r3, [r7, #8]
			 scurve->a_current 	= 	j_max*t;
 8005792:	ed97 7a05 	vldr	s14, [r7, #20]
 8005796:	edd7 7a02 	vldr	s15, [r7, #8]
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	= 	0.5*j_max*t*t;
 80057a4:	6978      	ldr	r0, [r7, #20]
 80057a6:	f7fa fedf 	bl	8000568 <__aeabi_f2d>
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <scaraFLowScurve+0x694>)
 80057b0:	f7fa ff32 	bl	8000618 <__aeabi_dmul>
 80057b4:	4603      	mov	r3, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4625      	mov	r5, r4
 80057ba:	461c      	mov	r4, r3
 80057bc:	68b8      	ldr	r0, [r7, #8]
 80057be:	f7fa fed3 	bl	8000568 <__aeabi_f2d>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fa ff25 	bl	8000618 <__aeabi_dmul>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	4625      	mov	r5, r4
 80057d4:	461c      	mov	r4, r3
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f7fa fec6 	bl	8000568 <__aeabi_f2d>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4620      	mov	r0, r4
 80057e2:	4629      	mov	r1, r5
 80057e4:	f7fa ff18 	bl	8000618 <__aeabi_dmul>
 80057e8:	4603      	mov	r3, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	4618      	mov	r0, r3
 80057ee:	4621      	mov	r1, r4
 80057f0:	f7fb fa0a 	bl	8000c08 <__aeabi_d2f>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80057fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80057fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005806:	edd7 7a02 	vldr	s15, [r7, #8]
 800580a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800580e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005816:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800581a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005824:	e2c8      	b.n	8005db8 <scaraFLowScurve+0xc24>
 8005826:	bf00      	nop
 8005828:	3fe00000 	.word	0x3fe00000
		 // Phase 2
		 } else if ( (tm <= time) && ( time <= (2*tm) ) ) {
 800582c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005830:	edd7 7a00 	vldr	s15, [r7]
 8005834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	f200 80dc 	bhi.w	80059f8 <scaraFLowScurve+0x864>
 8005840:	edd7 7a04 	vldr	s15, [r7, #16]
 8005844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005848:	ed97 7a00 	vldr	s14, [r7]
 800584c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005854:	f200 80d0 	bhi.w	80059f8 <scaraFLowScurve+0x864>
			 t = time - tm;
 8005858:	ed97 7a00 	vldr	s14, [r7]
 800585c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005864:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8005868:	ed97 7a05 	vldr	s14, [r7, #20]
 800586c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005874:	edd7 6a05 	vldr	s13, [r7, #20]
 8005878:	edd7 7a02 	vldr	s15, [r7, #8]
 800587c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005890:	edd7 6a05 	vldr	s13, [r7, #20]
 8005894:	edd7 7a04 	vldr	s15, [r7, #16]
 8005898:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800589c:	edd7 7a02 	vldr	s15, [r7, #8]
 80058a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a8:	ee17 0a90 	vmov	r0, s15
 80058ac:	f7fa fe5c 	bl	8000568 <__aeabi_f2d>
 80058b0:	4604      	mov	r4, r0
 80058b2:	460d      	mov	r5, r1
 80058b4:	6978      	ldr	r0, [r7, #20]
 80058b6:	f7fa fe57 	bl	8000568 <__aeabi_f2d>
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	4bbd      	ldr	r3, [pc, #756]	; (8005bb4 <scaraFLowScurve+0xa20>)
 80058c0:	f7fa feaa 	bl	8000618 <__aeabi_dmul>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4690      	mov	r8, r2
 80058ca:	4699      	mov	r9, r3
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f7fa fe4b 	bl	8000568 <__aeabi_f2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fa fe9d 	bl	8000618 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4690      	mov	r8, r2
 80058e4:	4699      	mov	r9, r3
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7fa fe3e 	bl	8000568 <__aeabi_f2d>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4640      	mov	r0, r8
 80058f2:	4649      	mov	r1, r9
 80058f4:	f7fa fe90 	bl	8000618 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fa fcd2 	bl	80002a8 <__aeabi_dsub>
 8005904:	4603      	mov	r3, r0
 8005906:	460c      	mov	r4, r1
 8005908:	4618      	mov	r0, r3
 800590a:	4621      	mov	r1, r4
 800590c:	f7fb f97c 	bl	8000c08 <__aeabi_d2f>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005922:	edd7 7a02 	vldr	s15, [r7, #8]
 8005926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800592e:	ee17 0a90 	vmov	r0, s15
 8005932:	f7fa fe19 	bl	8000568 <__aeabi_f2d>
 8005936:	4604      	mov	r4, r0
 8005938:	460d      	mov	r5, r1
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f7fa fe14 	bl	8000568 <__aeabi_f2d>
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	4b9b      	ldr	r3, [pc, #620]	; (8005bb4 <scaraFLowScurve+0xa20>)
 8005946:	f7fa fe67 	bl	8000618 <__aeabi_dmul>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4690      	mov	r8, r2
 8005950:	4699      	mov	r9, r3
 8005952:	6938      	ldr	r0, [r7, #16]
 8005954:	f7fa fe08 	bl	8000568 <__aeabi_f2d>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4640      	mov	r0, r8
 800595e:	4649      	mov	r1, r9
 8005960:	f7fa fe5a 	bl	8000618 <__aeabi_dmul>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4690      	mov	r8, r2
 800596a:	4699      	mov	r9, r3
 800596c:	68b8      	ldr	r0, [r7, #8]
 800596e:	f7fa fdfb 	bl	8000568 <__aeabi_f2d>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4640      	mov	r0, r8
 8005978:	4649      	mov	r1, r9
 800597a:	f7fa fe4d 	bl	8000618 <__aeabi_dmul>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4690      	mov	r8, r2
 8005984:	4699      	mov	r9, r3
 8005986:	68b8      	ldr	r0, [r7, #8]
 8005988:	f7fa fdee 	bl	8000568 <__aeabi_f2d>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fe40 	bl	8000618 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4620      	mov	r0, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	f7fa fc84 	bl	80002ac <__adddf3>
 80059a4:	4603      	mov	r3, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	4625      	mov	r5, r4
 80059aa:	461c      	mov	r4, r3
 80059ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80059b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80059b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80059bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80059c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80059cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059d0:	ee16 0a90 	vmov	r0, s13
 80059d4:	f7fa fdc8 	bl	8000568 <__aeabi_f2d>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4620      	mov	r0, r4
 80059de:	4629      	mov	r1, r5
 80059e0:	f7fa fc62 	bl	80002a8 <__aeabi_dsub>
 80059e4:	4603      	mov	r3, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4618      	mov	r0, r3
 80059ea:	4621      	mov	r1, r4
 80059ec:	f7fb f90c 	bl	8000c08 <__aeabi_d2f>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	665a      	str	r2, [r3, #100]	; 0x64
 80059f6:	e1df      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time <= (2*tm + tc)) ) {
 80059f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80059fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a00:	ed97 7a00 	vldr	s14, [r7]
 8005a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	db30      	blt.n	8005a70 <scaraFLowScurve+0x8dc>
 8005a0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a1e:	ed97 7a00 	vldr	s14, [r7]
 8005a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	d821      	bhi.n	8005a70 <scaraFLowScurve+0x8dc>
			 t = time - 2*tm;
 8005a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a34:	ed97 7a00 	vldr	s14, [r7]
 8005a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a3c:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	0;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005a6e:	e1a3      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time <= (3*tm + tc)) ) {
 8005a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a80:	ed97 7a00 	vldr	s14, [r7]
 8005a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	f2c0 8094 	blt.w	8005bb8 <scaraFLowScurve+0xa24>
 8005a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa4:	ed97 7a00 	vldr	s14, [r7]
 8005aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab0:	f200 8082 	bhi.w	8005bb8 <scaraFLowScurve+0xa24>
			 t = time - (2*tm + tc);
 8005ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ab8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac4:	ed97 7a00 	vldr	s14, [r7]
 8005ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005acc:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	-j_max*(t - (2*tm + tc));
 8005ad0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ad4:	eeb1 7a67 	vneg.f32	s14, s15
 8005ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005adc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae8:	edd7 6a02 	vldr	s13, [r7, #8]
 8005aec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fd32 	bl	8000568 <__aeabi_f2d>
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f7fa fd2d 	bl	8000568 <__aeabi_f2d>
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <scaraFLowScurve+0xa20>)
 8005b14:	f7fa fd80 	bl	8000618 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	68b8      	ldr	r0, [r7, #8]
 8005b22:	f7fa fd21 	bl	8000568 <__aeabi_f2d>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fd73 	bl	8000618 <__aeabi_dmul>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4690      	mov	r8, r2
 8005b38:	4699      	mov	r9, r3
 8005b3a:	68b8      	ldr	r0, [r7, #8]
 8005b3c:	f7fa fd14 	bl	8000568 <__aeabi_f2d>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fd66 	bl	8000618 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fba8 	bl	80002a8 <__aeabi_dsub>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f7fb f852 	bl	8000c08 <__aeabi_d2f>
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_3 + scurve->v_2*t - j_max*t*t*t/6;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b82:	edd7 6a05 	vldr	s13, [r7, #20]
 8005b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b9e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8005ba2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005bb0:	e102      	b.n	8005db8 <scaraFLowScurve+0xc24>
 8005bb2:	bf00      	nop
 8005bb4:	3fe00000 	.word	0x3fe00000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time <= (4*tm + tc)) ) {
 8005bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bbc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005bc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bcc:	ed97 7a00 	vldr	s14, [r7]
 8005bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd8:	f2c0 80df 	blt.w	8005d9a <scaraFLowScurve+0xc06>
 8005bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005be0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005be4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf0:	ed97 7a00 	vldr	s14, [r7]
 8005bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	f200 80cd 	bhi.w	8005d9a <scaraFLowScurve+0xc06>
			 t = time - (3*tm + tc);
 8005c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005c08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c14:	ed97 7a00 	vldr	s14, [r7]
 8005c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1c:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8005c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c24:	eeb1 7a67 	vneg.f32	s14, s15
 8005c28:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c30:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005c4c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c50:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c58:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c64:	ee17 0a90 	vmov	r0, s15
 8005c68:	f7fa fc7e 	bl	8000568 <__aeabi_f2d>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f7fa fc79 	bl	8000568 <__aeabi_f2d>
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	4b52      	ldr	r3, [pc, #328]	; (8005dc4 <scaraFLowScurve+0xc30>)
 8005c7c:	f7fa fccc 	bl	8000618 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4690      	mov	r8, r2
 8005c86:	4699      	mov	r9, r3
 8005c88:	68b8      	ldr	r0, [r7, #8]
 8005c8a:	f7fa fc6d 	bl	8000568 <__aeabi_f2d>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa fcbf 	bl	8000618 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4690      	mov	r8, r2
 8005ca0:	4699      	mov	r9, r3
 8005ca2:	68b8      	ldr	r0, [r7, #8]
 8005ca4:	f7fa fc60 	bl	8000568 <__aeabi_f2d>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fcb2 	bl	8000618 <__aeabi_dmul>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa faf6 	bl	80002ac <__adddf3>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	f7fa ff9e 	bl	8000c08 <__aeabi_d2f>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t + j_max*t*t*t/6;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8005cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cea:	ee17 0a90 	vmov	r0, s15
 8005cee:	f7fa fc3b 	bl	8000568 <__aeabi_f2d>
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7fa fc36 	bl	8000568 <__aeabi_f2d>
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <scaraFLowScurve+0xc30>)
 8005d02:	f7fa fc89 	bl	8000618 <__aeabi_dmul>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4690      	mov	r8, r2
 8005d0c:	4699      	mov	r9, r3
 8005d0e:	6938      	ldr	r0, [r7, #16]
 8005d10:	f7fa fc2a 	bl	8000568 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fc7c 	bl	8000618 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4690      	mov	r8, r2
 8005d26:	4699      	mov	r9, r3
 8005d28:	68b8      	ldr	r0, [r7, #8]
 8005d2a:	f7fa fc1d 	bl	8000568 <__aeabi_f2d>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa fc6f 	bl	8000618 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fab1 	bl	80002a8 <__aeabi_dsub>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	4625      	mov	r5, r4
 8005d4c:	461c      	mov	r4, r3
 8005d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d52:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005d6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d72:	ee16 0a90 	vmov	r0, s13
 8005d76:	f7fa fbf7 	bl	8000568 <__aeabi_f2d>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fa93 	bl	80002ac <__adddf3>
 8005d86:	4603      	mov	r3, r0
 8005d88:	460c      	mov	r4, r1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	f7fa ff3b 	bl	8000c08 <__aeabi_d2f>
 8005d92:	4602      	mov	r2, r0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	665a      	str	r2, [r3, #100]	; 0x64
 8005d98:	e00e      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 } else {
			 scurve->a_current = 0;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current = 0;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current = scurve->total_s;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64
 8005db2:	e001      	b.n	8005db8 <scaraFLowScurve+0xc24>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <scaraFLowScurve+0xc26>
	 }

	 return SCARA_STATUS_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005dc4:	3fe00000 	.word	0x3fe00000

08005dc8 <scaraCheckWorkSpace4>:

SCARA_StatusTypeDef	scaraCheckWorkSpace4 (float theta1, float theta2, float d3, float theta4) {
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8005dd6:	ed87 1a01 	vstr	s2, [r7, #4]
 8005dda:	edc7 1a00 	vstr	s3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8005dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8005de2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005e88 <scaraCheckWorkSpace4+0xc0>
 8005de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dee:	d408      	bmi.n	8005e02 <scaraCheckWorkSpace4+0x3a>
 8005df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005df4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005e8c <scaraCheckWorkSpace4+0xc4>
 8005df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	dd01      	ble.n	8005e06 <scaraCheckWorkSpace4+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e02:	2307      	movs	r3, #7
 8005e04:	e03a      	b.n	8005e7c <scaraCheckWorkSpace4+0xb4>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8005e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e0a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005e90 <scaraCheckWorkSpace4+0xc8>
 8005e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e16:	d408      	bmi.n	8005e2a <scaraCheckWorkSpace4+0x62>
 8005e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005e94 <scaraCheckWorkSpace4+0xcc>
 8005e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	dd01      	ble.n	8005e2e <scaraCheckWorkSpace4+0x66>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e2a:	2307      	movs	r3, #7
 8005e2c:	e026      	b.n	8005e7c <scaraCheckWorkSpace4+0xb4>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8005e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	d408      	bmi.n	8005e4e <scaraCheckWorkSpace4+0x86>
 8005e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e40:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005e98 <scaraCheckWorkSpace4+0xd0>
 8005e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	dd01      	ble.n	8005e52 <scaraCheckWorkSpace4+0x8a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e4e:	2307      	movs	r3, #7
 8005e50:	e014      	b.n	8005e7c <scaraCheckWorkSpace4+0xb4>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8005e52:	edd7 7a00 	vldr	s15, [r7]
 8005e56:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005e9c <scaraCheckWorkSpace4+0xd4>
 8005e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d408      	bmi.n	8005e76 <scaraCheckWorkSpace4+0xae>
 8005e64:	edd7 7a00 	vldr	s15, [r7]
 8005e68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005ea0 <scaraCheckWorkSpace4+0xd8>
 8005e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	dd01      	ble.n	8005e7a <scaraCheckWorkSpace4+0xb2>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e76:	2307      	movs	r3, #7
 8005e78:	e000      	b.n	8005e7c <scaraCheckWorkSpace4+0xb4>
	}
	return SCARA_STATUS_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	bfc90fdb 	.word	0xbfc90fdb
 8005e8c:	3fc90fdb 	.word	0x3fc90fdb
 8005e90:	c016cbe4 	.word	0xc016cbe4
 8005e94:	4016cbe4 	.word	0x4016cbe4
 8005e98:	42c80000 	.word	0x42c80000
 8005e9c:	c0490fdb 	.word	0xc0490fdb
 8005ea0:	40490fdb 	.word	0x40490fdb

08005ea4 <scaraCheckWorkSpace1>:

SCARA_StatusTypeDef			scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, float value) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	ed87 0a00 	vstr	s0, [r7]
 8005eb0:	71fb      	strb	r3, [r7, #7]
	if ( TRAJECTORY_J0 == target) {
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d115      	bne.n	8005ee4 <scaraCheckWorkSpace1+0x40>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8005eb8:	edd7 7a00 	vldr	s15, [r7]
 8005ebc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005f84 <scaraCheckWorkSpace1+0xe0>
 8005ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	db0a      	blt.n	8005ee0 <scaraCheckWorkSpace1+0x3c>
 8005eca:	edd7 7a00 	vldr	s15, [r7]
 8005ece:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005f88 <scaraCheckWorkSpace1+0xe4>
 8005ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eda:	d801      	bhi.n	8005ee0 <scaraCheckWorkSpace1+0x3c>
			return SCARA_STATUS_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e04b      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	e049      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J1 == target) {
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d115      	bne.n	8005f16 <scaraCheckWorkSpace1+0x72>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8005eea:	edd7 7a00 	vldr	s15, [r7]
 8005eee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005f8c <scaraCheckWorkSpace1+0xe8>
 8005ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	db0a      	blt.n	8005f12 <scaraCheckWorkSpace1+0x6e>
 8005efc:	edd7 7a00 	vldr	s15, [r7]
 8005f00:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005f90 <scaraCheckWorkSpace1+0xec>
 8005f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	d801      	bhi.n	8005f12 <scaraCheckWorkSpace1+0x6e>
			return SCARA_STATUS_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e032      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f12:	2307      	movs	r3, #7
 8005f14:	e030      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J2 == target) {
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d113      	bne.n	8005f44 <scaraCheckWorkSpace1+0xa0>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8005f1c:	edd7 7a00 	vldr	s15, [r7]
 8005f20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	db0a      	blt.n	8005f40 <scaraCheckWorkSpace1+0x9c>
 8005f2a:	edd7 7a00 	vldr	s15, [r7]
 8005f2e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005f94 <scaraCheckWorkSpace1+0xf0>
 8005f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	d801      	bhi.n	8005f40 <scaraCheckWorkSpace1+0x9c>
			return SCARA_STATUS_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e01b      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f40:	2307      	movs	r3, #7
 8005f42:	e019      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J3 == target) {
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d115      	bne.n	8005f76 <scaraCheckWorkSpace1+0xd2>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8005f4a:	edd7 7a00 	vldr	s15, [r7]
 8005f4e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005f98 <scaraCheckWorkSpace1+0xf4>
 8005f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	db0a      	blt.n	8005f72 <scaraCheckWorkSpace1+0xce>
 8005f5c:	edd7 7a00 	vldr	s15, [r7]
 8005f60:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005f9c <scaraCheckWorkSpace1+0xf8>
 8005f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	d801      	bhi.n	8005f72 <scaraCheckWorkSpace1+0xce>
			return SCARA_STATUS_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e002      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f72:	2307      	movs	r3, #7
 8005f74:	e000      	b.n	8005f78 <scaraCheckWorkSpace1+0xd4>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8005f76:	2301      	movs	r3, #1
	}
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	bfc90fdb 	.word	0xbfc90fdb
 8005f88:	3fc90fdb 	.word	0x3fc90fdb
 8005f8c:	c016cbe4 	.word	0xc016cbe4
 8005f90:	4016cbe4 	.word	0x4016cbe4
 8005f94:	42c80000 	.word	0x42c80000
 8005f98:	c0490fdb 	.word	0xc0490fdb
 8005f9c:	40490fdb 	.word	0x40490fdb

08005fa0 <scaraSetOutput>:
void				scaraSetScanFlag(void) {
	mySCARA.isScanLitmit = TRUE;
}


void				scaraSetOutput		(int8_t level) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8005faa:	79fa      	ldrb	r2, [r7, #7]
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <scaraSetOutput+0x1c>)
 8005fae:	70da      	strb	r2, [r3, #3]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20000c78 	.word	0x20000c78

08005fc0 <scaraSetDutyState>:


void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8005fca:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <scaraSetDutyState+0x1c>)
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	7053      	strb	r3, [r2, #1]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000c78 	.word	0x20000c78

08005fe0 <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8005fe8:	2230      	movs	r2, #48	; 0x30
 8005fea:	4904      	ldr	r1, [pc, #16]	; (8005ffc <scaraGetPosition+0x1c>)
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f00a fbb7 	bl	8010760 <memcpy>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20005790 	.word	0x20005790

08006000 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800600a:	4a04      	ldr	r2, [pc, #16]	; (800601c <scaraSetMode+0x1c>)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	7013      	strb	r3, [r2, #0]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	20000c78 	.word	0x20000c78

08006020 <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <scaraGetMode+0x14>)
 8006026:	781b      	ldrb	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000c78 	.word	0x20000c78

08006038 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <scaraGetDutyState+0x14>)
 800603e:	785b      	ldrb	r3, [r3, #1]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000c78 	.word	0x20000c78

08006050 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <scaraIsScanLimit+0x14>)
 8006056:	789b      	ldrb	r3, [r3, #2]
}
 8006058:	4618      	mov	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000c78 	.word	0x20000c78

08006068 <scaraIsFinish>:

uint8_t					scaraIsFinish		(float run_time) {
 8006068:	b5b0      	push	{r4, r5, r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(myDUTY.time_total < (run_time + 0.01)) {
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <scaraIsFinish+0x58>)
 8006074:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa fa74 	bl	8000568 <__aeabi_f2d>
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fa fa6f 	bl	8000568 <__aeabi_f2d>
 800608a:	a30b      	add	r3, pc, #44	; (adr r3, 80060b8 <scaraIsFinish+0x50>)
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f7fa f90c 	bl	80002ac <__adddf3>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4620      	mov	r0, r4
 800609a:	4629      	mov	r1, r5
 800609c:	f7fa fd2e 	bl	8000afc <__aeabi_dcmplt>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <scaraIsFinish+0x42>
		return TRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <scaraIsFinish+0x44>
	} else {
		return FALSE;
 80060aa:	2300      	movs	r3, #0
	}
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bdb0      	pop	{r4, r5, r7, pc}
 80060b4:	f3af 8000 	nop.w
 80060b8:	47ae147b 	.word	0x47ae147b
 80060bc:	3f847ae1 	.word	0x3f847ae1
 80060c0:	200052e8 	.word	0x200052e8

080060c4 <scaraPosition2String>:

int32_t					scaraPosition2String(char * result, SCARA_PositionTypeDef position) {
 80060c4:	b084      	sub	sp, #16
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b09e      	sub	sp, #120	; 0x78
 80060ca:	af06      	add	r7, sp, #24
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80060d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t x[12];
	uint8_t y[12];
	uint8_t z[12];
	int32_t lenght;

	float2string(theta1, position.Theta1, 6);
 80060d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80060da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80060de:	2106      	movs	r1, #6
 80060e0:	eeb0 0a67 	vmov.f32	s0, s15
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fb fb81 	bl	80017ec <float2string>
	float2string(theta2, position.Theta2, 6);
 80060ea:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80060ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060f2:	2106      	movs	r1, #6
 80060f4:	eeb0 0a67 	vmov.f32	s0, s15
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fb fb77 	bl	80017ec <float2string>
	float2string(d3, position.D3, 6);
 80060fe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006106:	2106      	movs	r1, #6
 8006108:	eeb0 0a67 	vmov.f32	s0, s15
 800610c:	4618      	mov	r0, r3
 800610e:	f7fb fb6d 	bl	80017ec <float2string>
	float2string(theta4, position.Theta4, 6);
 8006112:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800611a:	2106      	movs	r1, #6
 800611c:	eeb0 0a67 	vmov.f32	s0, s15
 8006120:	4618      	mov	r0, r3
 8006122:	f7fb fb63 	bl	80017ec <float2string>
	float2string(x, position.x, 6);
 8006126:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800612a:	f107 0320 	add.w	r3, r7, #32
 800612e:	2106      	movs	r1, #6
 8006130:	eeb0 0a67 	vmov.f32	s0, s15
 8006134:	4618      	mov	r0, r3
 8006136:	f7fb fb59 	bl	80017ec <float2string>
	float2string(y, position.y, 6);
 800613a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800613e:	f107 0314 	add.w	r3, r7, #20
 8006142:	2106      	movs	r1, #6
 8006144:	eeb0 0a67 	vmov.f32	s0, s15
 8006148:	4618      	mov	r0, r3
 800614a:	f7fb fb4f 	bl	80017ec <float2string>
	float2string(z, position.z, 6);
 800614e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	2106      	movs	r1, #6
 8006158:	eeb0 0a67 	vmov.f32	s0, s15
 800615c:	4618      	mov	r0, r3
 800615e:	f7fb fb45 	bl	80017ec <float2string>

	lenght = snprintf( (char *)result, 85,
 8006162:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	f107 0320 	add.w	r3, r7, #32
 8006176:	9303      	str	r3, [sp, #12]
 8006178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800617c:	9302      	str	r3, [sp, #8]
 800617e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	4a06      	ldr	r2, [pc, #24]	; (80061a8 <scaraPosition2String+0xe4>)
 800618e:	2155      	movs	r1, #85	; 0x55
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f00b fa0d 	bl	80115b0 <sniprintf>
 8006196:	65f8      	str	r0, [r7, #92]	; 0x5c
						d3,
						theta4,
						x,
						y,
						z);
	return lenght;
 8006198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800619a:	4618      	mov	r0, r3
 800619c:	3760      	adds	r7, #96	; 0x60
 800619e:	46bd      	mov	sp, r7
 80061a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a4:	b004      	add	sp, #16
 80061a6:	4770      	bx	lr
 80061a8:	08015e40 	.word	0x08015e40

080061ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_MspInit+0x54>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	4a11      	ldr	r2, [pc, #68]	; (8006200 <HAL_MspInit+0x54>)
 80061bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c0:	6453      	str	r3, [r2, #68]	; 0x44
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_MspInit+0x54>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_MspInit+0x54>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <HAL_MspInit+0x54>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	; 0x40
 80061de:	4b08      	ldr	r3, [pc, #32]	; (8006200 <HAL_MspInit+0x54>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80061ea:	2200      	movs	r2, #0
 80061ec:	210f      	movs	r1, #15
 80061ee:	f06f 0001 	mvn.w	r0, #1
 80061f2:	f000 fb15 	bl	8006820 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800

08006204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006214:	2200      	movs	r2, #0
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	2036      	movs	r0, #54	; 0x36
 800621a:	f000 fb01 	bl	8006820 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800621e:	2036      	movs	r0, #54	; 0x36
 8006220:	f000 fb1a 	bl	8006858 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	4b1f      	ldr	r3, [pc, #124]	; (80062a8 <HAL_InitTick+0xa4>)
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <HAL_InitTick+0xa4>)
 800622e:	f043 0310 	orr.w	r3, r3, #16
 8006232:	6413      	str	r3, [r2, #64]	; 0x40
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <HAL_InitTick+0xa4>)
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006240:	f107 0210 	add.w	r2, r7, #16
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f002 fe36 	bl	8008ebc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006250:	f002 fe0c 	bl	8008e6c <HAL_RCC_GetPCLK1Freq>
 8006254:	4603      	mov	r3, r0
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <HAL_InitTick+0xa8>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	0c9b      	lsrs	r3, r3, #18
 8006264:	3b01      	subs	r3, #1
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <HAL_InitTick+0xac>)
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <HAL_InitTick+0xb0>)
 800626c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <HAL_InitTick+0xac>)
 8006270:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006274:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006276:	4a0e      	ldr	r2, [pc, #56]	; (80062b0 <HAL_InitTick+0xac>)
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <HAL_InitTick+0xac>)
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_InitTick+0xac>)
 8006284:	2200      	movs	r2, #0
 8006286:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006288:	4809      	ldr	r0, [pc, #36]	; (80062b0 <HAL_InitTick+0xac>)
 800628a:	f002 fe49 	bl	8008f20 <HAL_TIM_Base_Init>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006294:	4806      	ldr	r0, [pc, #24]	; (80062b0 <HAL_InitTick+0xac>)
 8006296:	f002 fe78 	bl	8008f8a <HAL_TIM_Base_Start_IT>
 800629a:	4603      	mov	r3, r0
 800629c:	e000      	b.n	80062a0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40023800 	.word	0x40023800
 80062ac:	431bde83 	.word	0x431bde83
 80062b0:	200057f0 	.word	0x200057f0
 80062b4:	40001000 	.word	0x40001000

080062b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 80062cc:	2162      	movs	r1, #98	; 0x62
 80062ce:	4802      	ldr	r0, [pc, #8]	; (80062d8 <HardFault_Handler+0x10>)
 80062d0:	f7fb fa46 	bl	8001760 <LOG_REPORT>
 80062d4:	e7fa      	b.n	80062cc <HardFault_Handler+0x4>
 80062d6:	bf00      	nop
 80062d8:	08015e58 	.word	0x08015e58

080062dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 80062e0:	2172      	movs	r1, #114	; 0x72
 80062e2:	4802      	ldr	r0, [pc, #8]	; (80062ec <MemManage_Handler+0x10>)
 80062e4:	f7fb fa3c 	bl	8001760 <LOG_REPORT>
 80062e8:	e7fa      	b.n	80062e0 <MemManage_Handler+0x4>
 80062ea:	bf00      	nop
 80062ec:	08015e70 	.word	0x08015e70

080062f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 80062f4:	2182      	movs	r1, #130	; 0x82
 80062f6:	4802      	ldr	r0, [pc, #8]	; (8006300 <BusFault_Handler+0x10>)
 80062f8:	f7fb fa32 	bl	8001760 <LOG_REPORT>
 80062fc:	e7fa      	b.n	80062f4 <BusFault_Handler+0x4>
 80062fe:	bf00      	nop
 8006300:	08015e84 	.word	0x08015e84

08006304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006308:	e7fe      	b.n	8006308 <UsageFault_Handler+0x4>

0800630a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800630a:	b480      	push	{r7}
 800630c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800630e:	bf00      	nop
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800631c:	4802      	ldr	r0, [pc, #8]	; (8006328 <DMA1_Stream4_IRQHandler+0x10>)
 800631e:	f000 fbd1 	bl	8006ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20005870 	.word	0x20005870

0800632c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <UART4_IRQHandler+0x10>)
 8006332:	f003 f8ed 	bl	8009510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20005830 	.word	0x20005830

08006340 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006344:	4802      	ldr	r0, [pc, #8]	; (8006350 <TIM6_DAC_IRQHandler+0x10>)
 8006346:	f002 fe44 	bl	8008fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200057f0 	.word	0x200057f0

08006354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006358:	4802      	ldr	r0, [pc, #8]	; (8006364 <OTG_FS_IRQHandler+0x10>)
 800635a:	f001 f913 	bl	8007584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20006178 	.word	0x20006178

08006368 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <_sbrk+0x50>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <_sbrk+0x16>
		heap_end = &end;
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <_sbrk+0x50>)
 800637a:	4a10      	ldr	r2, [pc, #64]	; (80063bc <_sbrk+0x54>)
 800637c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <_sbrk+0x50>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <_sbrk+0x50>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4413      	add	r3, r2
 800638c:	466a      	mov	r2, sp
 800638e:	4293      	cmp	r3, r2
 8006390:	d907      	bls.n	80063a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006392:	f00a f9ab 	bl	80106ec <__errno>
 8006396:	4602      	mov	r2, r0
 8006398:	230c      	movs	r3, #12
 800639a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	e006      	b.n	80063b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <_sbrk+0x50>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <_sbrk+0x50>)
 80063ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20001478 	.word	0x20001478
 80063bc:	20006588 	.word	0x20006588

080063c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063c4:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <SystemInit+0x28>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <SystemInit+0x28>)
 80063cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <SystemInit+0x28>)
 80063d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063da:	609a      	str	r2, [r3, #8]
#endif
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <MX_UART4_Init+0x4c>)
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <MX_UART4_Init+0x50>)
 80063f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <MX_UART4_Init+0x4c>)
 80063f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <MX_UART4_Init+0x4c>)
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <MX_UART4_Init+0x4c>)
 8006406:	2200      	movs	r2, #0
 8006408:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <MX_UART4_Init+0x4c>)
 800640c:	2200      	movs	r2, #0
 800640e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <MX_UART4_Init+0x4c>)
 8006412:	220c      	movs	r2, #12
 8006414:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <MX_UART4_Init+0x4c>)
 8006418:	2200      	movs	r2, #0
 800641a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <MX_UART4_Init+0x4c>)
 800641e:	2200      	movs	r2, #0
 8006420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006422:	4805      	ldr	r0, [pc, #20]	; (8006438 <MX_UART4_Init+0x4c>)
 8006424:	f002 ffba 	bl	800939c <HAL_UART_Init>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800642e:	f7fc fc41 	bl	8002cb4 <Error_Handler>
  }

}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20005830 	.word	0x20005830
 800643c:	40004c00 	.word	0x40004c00

08006440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a34      	ldr	r2, [pc, #208]	; (8006530 <HAL_UART_MspInit+0xf0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d161      	bne.n	8006526 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	4b33      	ldr	r3, [pc, #204]	; (8006534 <HAL_UART_MspInit+0xf4>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	4a32      	ldr	r2, [pc, #200]	; (8006534 <HAL_UART_MspInit+0xf4>)
 800646c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006470:	6413      	str	r3, [r2, #64]	; 0x40
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_UART_MspInit+0xf4>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <HAL_UART_MspInit+0xf4>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a2b      	ldr	r2, [pc, #172]	; (8006534 <HAL_UART_MspInit+0xf4>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b29      	ldr	r3, [pc, #164]	; (8006534 <HAL_UART_MspInit+0xf4>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800649a:	2303      	movs	r3, #3
 800649c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064a2:	2301      	movs	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a6:	2303      	movs	r3, #3
 80064a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80064aa:	2308      	movs	r3, #8
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ae:	f107 0314 	add.w	r3, r7, #20
 80064b2:	4619      	mov	r1, r3
 80064b4:	4820      	ldr	r0, [pc, #128]	; (8006538 <HAL_UART_MspInit+0xf8>)
 80064b6:	f000 fd7b 	bl	8006fb0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_UART_MspInit+0x100>)
 80064be:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80064c0:	4b1e      	ldr	r3, [pc, #120]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064c6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064ca:	2240      	movs	r2, #64	; 0x40
 80064cc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064da:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064dc:	4b17      	ldr	r3, [pc, #92]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064de:	2200      	movs	r2, #0
 80064e0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e2:	4b16      	ldr	r3, [pc, #88]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80064fa:	4810      	ldr	r0, [pc, #64]	; (800653c <HAL_UART_MspInit+0xfc>)
 80064fc:	f000 f9ba 	bl	8006874 <HAL_DMA_Init>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006506:	f7fc fbd5 	bl	8002cb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a0b      	ldr	r2, [pc, #44]	; (800653c <HAL_UART_MspInit+0xfc>)
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <HAL_UART_MspInit+0xfc>)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8006516:	2200      	movs	r2, #0
 8006518:	2105      	movs	r1, #5
 800651a:	2034      	movs	r0, #52	; 0x34
 800651c:	f000 f980 	bl	8006820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006520:	2034      	movs	r0, #52	; 0x34
 8006522:	f000 f999 	bl	8006858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8006526:	bf00      	nop
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40004c00 	.word	0x40004c00
 8006534:	40023800 	.word	0x40023800
 8006538:	40020000 	.word	0x40020000
 800653c:	20005870 	.word	0x20005870
 8006540:	40026070 	.word	0x40026070

08006544 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0c      	ldr	r2, [pc, #48]	; (8006584 <HAL_UART_TxCpltCallback+0x40>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d112      	bne.n	800657c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8006556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800655a:	490b      	ldr	r1, [pc, #44]	; (8006588 <HAL_UART_TxCpltCallback+0x44>)
 800655c:	480b      	ldr	r0, [pc, #44]	; (800658c <HAL_UART_TxCpltCallback+0x48>)
 800655e:	f7fc fc48 	bl	8002df2 <ringBuff_PopArray>
 8006562:	4603      	mov	r3, r0
 8006564:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 8006566:	89fb      	ldrh	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	461a      	mov	r2, r3
 8006570:	4905      	ldr	r1, [pc, #20]	; (8006588 <HAL_UART_TxCpltCallback+0x44>)
 8006572:	4807      	ldr	r0, [pc, #28]	; (8006590 <HAL_UART_TxCpltCallback+0x4c>)
 8006574:	f002 ff60 	bl	8009438 <HAL_UART_Transmit_DMA>
 8006578:	e000      	b.n	800657c <HAL_UART_TxCpltCallback+0x38>
			return;
 800657a:	bf00      	nop
	}
}
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40004c00 	.word	0x40004c00
 8006588:	200051d4 	.word	0x200051d4
 800658c:	2000086c 	.word	0x2000086c
 8006590:	20005830 	.word	0x20005830

08006594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800659a:	e003      	b.n	80065a4 <LoopCopyDataInit>

0800659c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800659c:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800659e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065a2:	3104      	adds	r1, #4

080065a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065a4:	480b      	ldr	r0, [pc, #44]	; (80065d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065ac:	d3f6      	bcc.n	800659c <CopyDataInit>
  ldr  r2, =_sbss
 80065ae:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065b0:	e002      	b.n	80065b8 <LoopFillZerobss>

080065b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065b4:	f842 3b04 	str.w	r3, [r2], #4

080065b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065b8:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065bc:	d3f9      	bcc.n	80065b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065be:	f7ff feff 	bl	80063c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065c2:	f00a f899 	bl	80106f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065c6:	f7fc fae7 	bl	8002b98 <main>
  bx  lr    
 80065ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80065d0:	08016644 	.word	0x08016644
  ldr  r0, =_sdata
 80065d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065d8:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 80065dc:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 80065e0:	20006584 	.word	0x20006584

080065e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065e4:	e7fe      	b.n	80065e4 <ADC_IRQHandler>
	...

080065e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HAL_Init+0x40>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <HAL_Init+0x40>)
 80065f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_Init+0x40>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <HAL_Init+0x40>)
 80065fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_Init+0x40>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a07      	ldr	r2, [pc, #28]	; (8006628 <HAL_Init+0x40>)
 800660a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006610:	2003      	movs	r0, #3
 8006612:	f000 f8fa 	bl	800680a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006616:	2000      	movs	r0, #0
 8006618:	f7ff fdf4 	bl	8006204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800661c:	f7ff fdc6 	bl	80061ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40023c00 	.word	0x40023c00

0800662c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <HAL_IncTick+0x20>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_IncTick+0x24>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4413      	add	r3, r2
 800663c:	4a04      	ldr	r2, [pc, #16]	; (8006650 <HAL_IncTick+0x24>)
 800663e:	6013      	str	r3, [r2, #0]
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000cbc 	.word	0x20000cbc
 8006650:	200058d0 	.word	0x200058d0

08006654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return uwTick;
 8006658:	4b03      	ldr	r3, [pc, #12]	; (8006668 <HAL_GetTick+0x14>)
 800665a:	681b      	ldr	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	200058d0 	.word	0x200058d0

0800666c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006674:	f7ff ffee 	bl	8006654 <HAL_GetTick>
 8006678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d005      	beq.n	8006692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <HAL_Delay+0x40>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006692:	bf00      	nop
 8006694:	f7ff ffde 	bl	8006654 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d8f7      	bhi.n	8006694 <HAL_Delay+0x28>
  {
  }
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000cbc 	.word	0x20000cbc

080066b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <__NVIC_SetPriorityGrouping+0x44>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066cc:	4013      	ands	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <__NVIC_SetPriorityGrouping+0x44>)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	60d3      	str	r3, [r2, #12]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <__NVIC_GetPriorityGrouping+0x18>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	f003 0307 	and.w	r3, r3, #7
}
 8006706:	4618      	mov	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800671e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	db0b      	blt.n	800673e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	f003 021f 	and.w	r2, r3, #31
 800672c:	4907      	ldr	r1, [pc, #28]	; (800674c <__NVIC_EnableIRQ+0x38>)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	2001      	movs	r0, #1
 8006736:	fa00 f202 	lsl.w	r2, r0, r2
 800673a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e100 	.word	0xe000e100

08006750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800675c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db0a      	blt.n	800677a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	490c      	ldr	r1, [pc, #48]	; (800679c <__NVIC_SetPriority+0x4c>)
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	0112      	lsls	r2, r2, #4
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	440b      	add	r3, r1
 8006774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006778:	e00a      	b.n	8006790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4908      	ldr	r1, [pc, #32]	; (80067a0 <__NVIC_SetPriority+0x50>)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	3b04      	subs	r3, #4
 8006788:	0112      	lsls	r2, r2, #4
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	440b      	add	r3, r1
 800678e:	761a      	strb	r2, [r3, #24]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	e000e100 	.word	0xe000e100
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b089      	sub	sp, #36	; 0x24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f1c3 0307 	rsb	r3, r3, #7
 80067be:	2b04      	cmp	r3, #4
 80067c0:	bf28      	it	cs
 80067c2:	2304      	movcs	r3, #4
 80067c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d902      	bls.n	80067d4 <NVIC_EncodePriority+0x30>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3b03      	subs	r3, #3
 80067d2:	e000      	b.n	80067d6 <NVIC_EncodePriority+0x32>
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	43da      	mvns	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	401a      	ands	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067ec:	f04f 31ff 	mov.w	r1, #4294967295
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	43d9      	mvns	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067fc:	4313      	orrs	r3, r2
         );
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff ff4c 	bl	80066b0 <__NVIC_SetPriorityGrouping>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006832:	f7ff ff61 	bl	80066f8 <__NVIC_GetPriorityGrouping>
 8006836:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	6978      	ldr	r0, [r7, #20]
 800683e:	f7ff ffb1 	bl	80067a4 <NVIC_EncodePriority>
 8006842:	4602      	mov	r2, r0
 8006844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff80 	bl	8006750 <__NVIC_SetPriority>
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ff54 	bl	8006714 <__NVIC_EnableIRQ>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006880:	f7ff fee8 	bl	8006654 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e099      	b.n	80069c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068b0:	e00f      	b.n	80068d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068b2:	f7ff fecf 	bl	8006654 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b05      	cmp	r3, #5
 80068be:	d908      	bls.n	80068d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2203      	movs	r2, #3
 80068ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e078      	b.n	80069c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e8      	bne.n	80068b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4b38      	ldr	r3, [pc, #224]	; (80069cc <HAL_DMA_Init+0x158>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800690a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b04      	cmp	r3, #4
 800692a:	d107      	bne.n	800693c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	4313      	orrs	r3, r2
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2b04      	cmp	r3, #4
 8006964:	d117      	bne.n	8006996 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa9f 	bl	8006ebc <DMA_CheckFifoParam>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006992:	2301      	movs	r3, #1
 8006994:	e016      	b.n	80069c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa56 	bl	8006e50 <DMA_CalcBaseAndBitshift>
 80069a4:	4603      	mov	r3, r0
 80069a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	223f      	movs	r2, #63	; 0x3f
 80069ae:	409a      	lsls	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	f010803f 	.word	0xf010803f

080069d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_DMA_Start_IT+0x26>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e040      	b.n	8006a78 <HAL_DMA_Start_IT+0xa8>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d12f      	bne.n	8006a6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f9e8 	bl	8006df4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a28:	223f      	movs	r2, #63	; 0x3f
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0216 	orr.w	r2, r2, #22
 8006a3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0208 	orr.w	r2, r2, #8
 8006a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e005      	b.n	8006a76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
 8006a74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d004      	beq.n	8006a9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e00c      	b.n	8006ab8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2205      	movs	r2, #5
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ad0:	4b92      	ldr	r3, [pc, #584]	; (8006d1c <HAL_DMA_IRQHandler+0x258>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a92      	ldr	r2, [pc, #584]	; (8006d20 <HAL_DMA_IRQHandler+0x25c>)
 8006ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ada:	0a9b      	lsrs	r3, r3, #10
 8006adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aee:	2208      	movs	r2, #8
 8006af0:	409a      	lsls	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01a      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	f043 0201 	orr.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	2201      	movs	r2, #1
 8006b54:	409a      	lsls	r2, r3
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	f043 0202 	orr.w	r2, r3, #2
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	409a      	lsls	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d012      	beq.n	8006b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	2204      	movs	r2, #4
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	f043 0204 	orr.w	r2, r3, #4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d043      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d03c      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d018      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d024      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	e01f      	b.n	8006c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
 8006c04:	e016      	b.n	8006c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d107      	bne.n	8006c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0208 	bic.w	r2, r2, #8
 8006c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	2220      	movs	r2, #32
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 808e 	beq.w	8006d62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8086 	beq.w	8006d62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d136      	bne.n	8006cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0216 	bic.w	r2, r2, #22
 8006c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <HAL_DMA_IRQHandler+0x1da>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0208 	bic.w	r2, r2, #8
 8006cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	223f      	movs	r2, #63	; 0x3f
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d07d      	beq.n	8006dce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
        }
        return;
 8006cda:	e078      	b.n	8006dce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01c      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d030      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
 8006d08:	e02b      	b.n	8006d62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d027      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
 8006d1a:	e022      	b.n	8006d62 <HAL_DMA_IRQHandler+0x29e>
 8006d1c:	20000cb4 	.word	0x20000cb4
 8006d20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10f      	bne.n	8006d52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0210 	bic.w	r2, r2, #16
 8006d40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d032      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d022      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2205      	movs	r2, #5
 8006d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d307      	bcc.n	8006daa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f2      	bne.n	8006d8e <HAL_DMA_IRQHandler+0x2ca>
 8006da8:	e000      	b.n	8006dac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006daa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
 8006dcc:	e000      	b.n	8006dd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006dce:	bf00      	nop
    }
  }
}
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop

08006dd8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006de6:	b2db      	uxtb	r3, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d108      	bne.n	8006e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e32:	e007      	b.n	8006e44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	3b10      	subs	r3, #16
 8006e60:	4a14      	ldr	r2, [pc, #80]	; (8006eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e6a:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d909      	bls.n	8006e92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8006e90:	e007      	b.n	8006ea2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	aaaaaaab 	.word	0xaaaaaaab
 8006eb8:	08015f08 	.word	0x08015f08

08006ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11f      	bne.n	8006f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d855      	bhi.n	8006f88 <DMA_CheckFifoParam+0xcc>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <DMA_CheckFifoParam+0x28>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f07 	.word	0x08006f07
 8006eec:	08006ef5 	.word	0x08006ef5
 8006ef0:	08006f89 	.word	0x08006f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d045      	beq.n	8006f8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f04:	e042      	b.n	8006f8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f0e:	d13f      	bne.n	8006f90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f14:	e03c      	b.n	8006f90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1e:	d121      	bne.n	8006f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d836      	bhi.n	8006f94 <DMA_CheckFifoParam+0xd8>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <DMA_CheckFifoParam+0x70>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f43 	.word	0x08006f43
 8006f34:	08006f3d 	.word	0x08006f3d
 8006f38:	08006f55 	.word	0x08006f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f40:	e02f      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d024      	beq.n	8006f98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f52:	e021      	b.n	8006f98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f5c:	d11e      	bne.n	8006f9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f62:	e01b      	b.n	8006f9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d902      	bls.n	8006f70 <DMA_CheckFifoParam+0xb4>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d003      	beq.n	8006f76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f6e:	e018      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      break;
 8006f74:	e015      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	e00b      	b.n	8006fa0 <DMA_CheckFifoParam+0xe4>
      break;
 8006f88:	bf00      	nop
 8006f8a:	e00a      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8006f8c:	bf00      	nop
 8006f8e:	e008      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8006f90:	bf00      	nop
 8006f92:	e006      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8006f94:	bf00      	nop
 8006f96:	e004      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e002      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;   
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8006fa0:	bf00      	nop
    }
  } 
  
  return status; 
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e16b      	b.n	80072a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fcc:	2201      	movs	r2, #1
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	f040 815a 	bne.w	800729e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d00b      	beq.n	800700a <HAL_GPIO_Init+0x5a>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d007      	beq.n	800700a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ffe:	2b11      	cmp	r3, #17
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b12      	cmp	r3, #18
 8007008:	d130      	bne.n	800706c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	2203      	movs	r2, #3
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43db      	mvns	r3, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4013      	ands	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4313      	orrs	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007040:	2201      	movs	r2, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	4013      	ands	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 0201 	and.w	r2, r3, #1
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4313      	orrs	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	2203      	movs	r2, #3
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	4313      	orrs	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d003      	beq.n	80070ac <HAL_GPIO_Init+0xfc>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b12      	cmp	r3, #18
 80070aa:	d123      	bne.n	80070f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	08da      	lsrs	r2, r3, #3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3208      	adds	r2, #8
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	220f      	movs	r2, #15
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	43db      	mvns	r3, r3
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4013      	ands	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	08da      	lsrs	r2, r3, #3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3208      	adds	r2, #8
 80070ee:	69b9      	ldr	r1, [r7, #24]
 80070f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	2203      	movs	r2, #3
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f003 0203 	and.w	r2, r3, #3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	4313      	orrs	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 80b4 	beq.w	800729e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	4b5f      	ldr	r3, [pc, #380]	; (80072b8 <HAL_GPIO_Init+0x308>)
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	4a5e      	ldr	r2, [pc, #376]	; (80072b8 <HAL_GPIO_Init+0x308>)
 8007140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007144:	6453      	str	r3, [r2, #68]	; 0x44
 8007146:	4b5c      	ldr	r3, [pc, #368]	; (80072b8 <HAL_GPIO_Init+0x308>)
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007152:	4a5a      	ldr	r2, [pc, #360]	; (80072bc <HAL_GPIO_Init+0x30c>)
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	3302      	adds	r3, #2
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	220f      	movs	r2, #15
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43db      	mvns	r3, r3
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	4013      	ands	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a51      	ldr	r2, [pc, #324]	; (80072c0 <HAL_GPIO_Init+0x310>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02b      	beq.n	80071d6 <HAL_GPIO_Init+0x226>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a50      	ldr	r2, [pc, #320]	; (80072c4 <HAL_GPIO_Init+0x314>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d025      	beq.n	80071d2 <HAL_GPIO_Init+0x222>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a4f      	ldr	r2, [pc, #316]	; (80072c8 <HAL_GPIO_Init+0x318>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01f      	beq.n	80071ce <HAL_GPIO_Init+0x21e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a4e      	ldr	r2, [pc, #312]	; (80072cc <HAL_GPIO_Init+0x31c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d019      	beq.n	80071ca <HAL_GPIO_Init+0x21a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a4d      	ldr	r2, [pc, #308]	; (80072d0 <HAL_GPIO_Init+0x320>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <HAL_GPIO_Init+0x216>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a4c      	ldr	r2, [pc, #304]	; (80072d4 <HAL_GPIO_Init+0x324>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00d      	beq.n	80071c2 <HAL_GPIO_Init+0x212>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a4b      	ldr	r2, [pc, #300]	; (80072d8 <HAL_GPIO_Init+0x328>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d007      	beq.n	80071be <HAL_GPIO_Init+0x20e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a4a      	ldr	r2, [pc, #296]	; (80072dc <HAL_GPIO_Init+0x32c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d101      	bne.n	80071ba <HAL_GPIO_Init+0x20a>
 80071b6:	2307      	movs	r3, #7
 80071b8:	e00e      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071ba:	2308      	movs	r3, #8
 80071bc:	e00c      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071be:	2306      	movs	r3, #6
 80071c0:	e00a      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071c2:	2305      	movs	r3, #5
 80071c4:	e008      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071c6:	2304      	movs	r3, #4
 80071c8:	e006      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071ca:	2303      	movs	r3, #3
 80071cc:	e004      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e002      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <HAL_GPIO_Init+0x228>
 80071d6:	2300      	movs	r3, #0
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	f002 0203 	and.w	r2, r2, #3
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	4093      	lsls	r3, r2
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071e8:	4934      	ldr	r1, [pc, #208]	; (80072bc <HAL_GPIO_Init+0x30c>)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	089b      	lsrs	r3, r3, #2
 80071ee:	3302      	adds	r3, #2
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071f6:	4b3a      	ldr	r3, [pc, #232]	; (80072e0 <HAL_GPIO_Init+0x330>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	43db      	mvns	r3, r3
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	4013      	ands	r3, r2
 8007204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800721a:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <HAL_GPIO_Init+0x330>)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007220:	4b2f      	ldr	r3, [pc, #188]	; (80072e0 <HAL_GPIO_Init+0x330>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	43db      	mvns	r3, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4013      	ands	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007244:	4a26      	ldr	r2, [pc, #152]	; (80072e0 <HAL_GPIO_Init+0x330>)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800724a:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <HAL_GPIO_Init+0x330>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	43db      	mvns	r3, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4013      	ands	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <HAL_GPIO_Init+0x330>)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <HAL_GPIO_Init+0x330>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	43db      	mvns	r3, r3
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	4013      	ands	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <HAL_GPIO_Init+0x330>)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	3301      	adds	r3, #1
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	f67f ae90 	bls.w	8006fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072ac:	bf00      	nop
 80072ae:	3724      	adds	r7, #36	; 0x24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40023800 	.word	0x40023800
 80072bc:	40013800 	.word	0x40013800
 80072c0:	40020000 	.word	0x40020000
 80072c4:	40020400 	.word	0x40020400
 80072c8:	40020800 	.word	0x40020800
 80072cc:	40020c00 	.word	0x40020c00
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40021400 	.word	0x40021400
 80072d8:	40021800 	.word	0x40021800
 80072dc:	40021c00 	.word	0x40021c00
 80072e0:	40013c00 	.word	0x40013c00

080072e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e6:	b08f      	sub	sp, #60	; 0x3c
 80072e8:	af0a      	add	r7, sp, #40	; 0x28
 80072ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e10f      	b.n	8007516 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f008 feeb 	bl	80100ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2203      	movs	r2, #3
 800731a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f003 f852 	bl	800a3de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	687e      	ldr	r6, [r7, #4]
 8007342:	466d      	mov	r5, sp
 8007344:	f106 0410 	add.w	r4, r6, #16
 8007348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800734a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800734c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800734e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007350:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007354:	e885 0003 	stmia.w	r5, {r0, r1}
 8007358:	1d33      	adds	r3, r6, #4
 800735a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800735c:	6838      	ldr	r0, [r7, #0]
 800735e:	f002 ff29 	bl	800a1b4 <USB_CoreInit>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0d0      	b.n	8007516 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f003 f840 	bl	800a400 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
 8007384:	e04a      	b.n	800741c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	333d      	adds	r3, #61	; 0x3d
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800739a:	7bfa      	ldrb	r2, [r7, #15]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	333c      	adds	r3, #60	; 0x3c
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	b298      	uxth	r0, r3
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3342      	adds	r3, #66	; 0x42
 80073c2:	4602      	mov	r2, r0
 80073c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	333f      	adds	r3, #63	; 0x3f
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	3344      	adds	r3, #68	; 0x44
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3348      	adds	r3, #72	; 0x48
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	3350      	adds	r3, #80	; 0x50
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	3301      	adds	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d3af      	bcc.n	8007386 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
 800742a:	e044      	b.n	80074b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800743e:	2200      	movs	r2, #0
 8007440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007454:	7bfa      	ldrb	r2, [r7, #15]
 8007456:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007484:	7bfa      	ldrb	r2, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800749a:	7bfa      	ldrb	r2, [r7, #15]
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	3301      	adds	r3, #1
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	7bfa      	ldrb	r2, [r7, #15]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d3b5      	bcc.n	800742c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	687e      	ldr	r6, [r7, #4]
 80074c8:	466d      	mov	r5, sp
 80074ca:	f106 0410 	add.w	r4, r6, #16
 80074ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074da:	e885 0003 	stmia.w	r5, {r0, r1}
 80074de:	1d33      	adds	r3, r6, #4
 80074e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074e2:	6838      	ldr	r0, [r7, #0]
 80074e4:	f002 ffb6 	bl	800a454 <USB_DevInit>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00d      	b.n	8007516 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f003 ffab 	bl	800b46a <USB_DevDisconnect>

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800751e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_PCD_Start+0x1c>
 8007536:	2302      	movs	r3, #2
 8007538:	e020      	b.n	800757c <HAL_PCD_Start+0x5e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	2b01      	cmp	r3, #1
 8007548:	d109      	bne.n	800755e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800754e:	2b01      	cmp	r3, #1
 8007550:	d005      	beq.n	800755e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f003 ff69 	bl	800b43a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f002 ff25 	bl	800a3bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007584:	b590      	push	{r4, r7, lr}
 8007586:	b08d      	sub	sp, #52	; 0x34
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f004 f810 	bl	800b5c0 <USB_GetMode>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 838e 	bne.w	8007cc4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f003 ff74 	bl	800b49a <USB_ReadInterrupts>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8384 	beq.w	8007cc2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f003 ff6b 	bl	800b49a <USB_ReadInterrupts>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d107      	bne.n	80075de <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695a      	ldr	r2, [r3, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f002 0202 	and.w	r2, r2, #2
 80075dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f003 ff59 	bl	800b49a <USB_ReadInterrupts>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075f2:	d17b      	bne.n	80076ec <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f003 ff5f 	bl	800b4c0 <USB_ReadDevAllOutEpInterrupt>
 8007602:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007604:	e06f      	b.n	80076e6 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d064      	beq.n	80076da <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f003 ff84 	bl	800b528 <USB_ReadDevOutEPInterrupt>
 8007620:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	461a      	mov	r2, r3
 800763a:	2301      	movs	r3, #1
 800763c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800763e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fe0d 	bl	8008260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00c      	beq.n	800766a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 ff0c 	bl	8008470 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	461a      	mov	r2, r3
 8007666:	2308      	movs	r3, #8
 8007668:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	461a      	mov	r2, r3
 8007682:	2310      	movs	r3, #16
 8007684:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d108      	bne.n	80076aa <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076a2:	461a      	mov	r2, r3
 80076a4:	2101      	movs	r1, #1
 80076a6:	f003 ffcf 	bl	800b648 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	461a      	mov	r2, r3
 80076b8:	2320      	movs	r3, #32
 80076ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	3301      	adds	r3, #1
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d18c      	bne.n	8007606 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f003 fed2 	bl	800b49a <USB_ReadInterrupts>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007700:	f040 80c4 	bne.w	800788c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f003 fef3 	bl	800b4f4 <USB_ReadDevAllInEpInterrupt>
 800770e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007714:	e0b6      	b.n	8007884 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80ab 	beq.w	8007878 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f003 ff19 	bl	800b564 <USB_ReadDevInEPInterrupt>
 8007732:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05b      	beq.n	80077f6 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	2201      	movs	r2, #1
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	43db      	mvns	r3, r3
 8007758:	69f9      	ldr	r1, [r7, #28]
 800775a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800775e:	4013      	ands	r3, r2
 8007760:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776e:	461a      	mov	r2, r3
 8007770:	2301      	movs	r3, #1
 8007772:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d11b      	bne.n	80077b4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	3348      	adds	r3, #72	; 0x48
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4403      	add	r3, r0
 800779c:	3344      	adds	r3, #68	; 0x44
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4419      	add	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4403      	add	r3, r0
 80077b0:	3348      	adds	r3, #72	; 0x48
 80077b2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f008 fd17 	bl	80101ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d116      	bne.n	80077f6 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d113      	bne.n	80077f6 <HAL_PCD_IRQHandler+0x272>
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3350      	adds	r3, #80	; 0x50
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077ee:	461a      	mov	r2, r3
 80077f0:	2101      	movs	r1, #1
 80077f2:	f003 ff29 	bl	800b648 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	461a      	mov	r2, r3
 800780e:	2308      	movs	r3, #8
 8007810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	461a      	mov	r2, r3
 800782a:	2310      	movs	r3, #16
 800782c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	461a      	mov	r2, r3
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	461a      	mov	r2, r3
 8007862:	2302      	movs	r3, #2
 8007864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fc67 	bl	8008146 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	3301      	adds	r3, #1
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	f47f af45 	bne.w	8007716 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f003 fe02 	bl	800b49a <USB_ReadInterrupts>
 8007896:	4603      	mov	r3, r0
 8007898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800789c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a0:	d122      	bne.n	80078e8 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d108      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078c8:	2100      	movs	r1, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fe88 	bl	80085e0 <HAL_PCDEx_LPM_Callback>
 80078d0:	e002      	b.n	80078d8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f008 fd02 	bl	80102dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80078e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f003 fdd4 	bl	800b49a <USB_ReadInterrupts>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078fc:	d112      	bne.n	8007924 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	d102      	bne.n	8007914 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f008 fcbe 	bl	8010290 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695a      	ldr	r2, [r3, #20]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007922:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f003 fdb6 	bl	800b49a <USB_ReadInterrupts>
 800792e:	4603      	mov	r3, r0
 8007930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007938:	f040 80a7 	bne.w	8007a8a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2110      	movs	r1, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f002 feee 	bl	800a738 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800795c:	2300      	movs	r3, #0
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007960:	e036      	b.n	80079d0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796e:	461a      	mov	r2, r3
 8007970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007974:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	3301      	adds	r3, #1
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3c3      	bcc.n	8007962 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80079ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a06:	f043 030b 	orr.w	r3, r3, #11
 8007a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1c:	f043 030b 	orr.w	r3, r3, #11
 8007a20:	6453      	str	r3, [r2, #68]	; 0x44
 8007a22:	e015      	b.n	8007a50 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007a3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4a:	f043 030b 	orr.w	r3, r3, #11
 8007a4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a74:	461a      	mov	r2, r3
 8007a76:	f003 fde7 	bl	800b648 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f003 fd03 	bl	800b49a <USB_ReadInterrupts>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9e:	d124      	bne.n	8007aea <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f003 fd99 	bl	800b5dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 fea3 	bl	800a7fa <USB_GetDevSpeed>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681c      	ldr	r4, [r3, #0]
 8007ac0:	f001 f9c8 	bl	8008e54 <HAL_RCC_GetHCLKFreq>
 8007ac4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f002 fbd2 	bl	800a278 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f008 fbb2 	bl	801023e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f003 fcd3 	bl	800b49a <USB_ReadInterrupts>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d161      	bne.n	8007bc2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0210 	bic.w	r2, r2, #16
 8007b0c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f003 020f 	and.w	r2, r3, #15
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	1a9b      	subs	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	0c5b      	lsrs	r3, r3, #17
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d124      	bne.n	8007b84 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d035      	beq.n	8007bb2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	6a38      	ldr	r0, [r7, #32]
 8007b5a:	f003 fb4b 	bl	800b1f4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	619a      	str	r2, [r3, #24]
 8007b82:	e016      	b.n	8007bb2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	0c5b      	lsrs	r3, r3, #17
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	2b06      	cmp	r3, #6
 8007b8e:	d110      	bne.n	8007bb2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b96:	2208      	movs	r2, #8
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6a38      	ldr	r0, [r7, #32]
 8007b9c:	f003 fb2a 	bl	800b1f4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0210 	orr.w	r2, r2, #16
 8007bc0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f003 fc67 	bl	800b49a <USB_ReadInterrupts>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d10a      	bne.n	8007bec <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f008 fb23 	bl	8010222 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f002 0208 	and.w	r2, r2, #8
 8007bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f003 fc52 	bl	800b49a <USB_ReadInterrupts>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c00:	d10f      	bne.n	8007c22 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f008 fb85 	bl	801031c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f003 fc37 	bl	800b49a <USB_ReadInterrupts>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c36:	d10f      	bne.n	8007c58 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f008 fb58 	bl	80102f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f003 fc1c 	bl	800b49a <USB_ReadInterrupts>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6c:	d10a      	bne.n	8007c84 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f008 fb66 	bl	8010340 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f003 fc06 	bl	800b49a <USB_ReadInterrupts>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d115      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f008 fb56 	bl	801035c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	e000      	b.n	8007cc4 <HAL_PCD_IRQHandler+0x740>
      return;
 8007cc2:	bf00      	nop
    }
  }
}
 8007cc4:	3734      	adds	r7, #52	; 0x34
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd90      	pop	{r4, r7, pc}

08007cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_PCD_SetAddress+0x1a>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e013      	b.n	8007d0c <HAL_PCD_SetAddress+0x42>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f003 fb76 	bl	800b3ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	461a      	mov	r2, r3
 8007d22:	4603      	mov	r3, r0
 8007d24:	70fb      	strb	r3, [r7, #3]
 8007d26:	460b      	mov	r3, r1
 8007d28:	803b      	strh	r3, [r7, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da0f      	bge.n	8007d5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	f003 020f 	and.w	r2, r3, #15
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	3338      	adds	r3, #56	; 0x38
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	705a      	strb	r2, [r3, #1]
 8007d58:	e00f      	b.n	8007d7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	f003 020f 	and.w	r2, r3, #15
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	3304      	adds	r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d86:	883a      	ldrh	r2, [r7, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	78ba      	ldrb	r2, [r7, #2]
 8007d90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007da4:	78bb      	ldrb	r3, [r7, #2]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d102      	bne.n	8007db0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_PCD_EP_Open+0xaa>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e00e      	b.n	8007ddc <HAL_PCD_EP_Open+0xc8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f002 fd39 	bl	800a844 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007dda:	7afb      	ldrb	r3, [r7, #11]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	da0f      	bge.n	8007e18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	f003 020f 	and.w	r2, r3, #15
 8007dfe:	4613      	mov	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	3338      	adds	r3, #56	; 0x38
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	705a      	strb	r2, [r3, #1]
 8007e16:	e00f      	b.n	8007e38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 020f 	and.w	r2, r3, #15
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3304      	adds	r3, #4
 8007e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_PCD_EP_Close+0x6e>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e00e      	b.n	8007e70 <HAL_PCD_EP_Close+0x8c>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68f9      	ldr	r1, [r7, #12]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f002 fd77 	bl	800a954 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	460b      	mov	r3, r1
 8007e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	f003 020f 	and.w	r2, r3, #15
 8007e8e:	4613      	mov	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d102      	bne.n	8007ed4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	f002 fffa 	bl	800aee4 <USB_EP0StartXfer>
 8007ef0:	e008      	b.n	8007f04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	f002 fdac 	bl	800aa5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007f30:	681b      	ldr	r3, [r3, #0]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	4613      	mov	r3, r2
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	3338      	adds	r3, #56	; 0x38
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	3304      	adds	r3, #4
 8007f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d102      	bne.n	8007f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	6979      	ldr	r1, [r7, #20]
 8007fb0:	f002 ff98 	bl	800aee4 <USB_EP0StartXfer>
 8007fb4:	e008      	b.n	8007fc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	f002 fd4a 	bl	800aa5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	f003 020f 	and.w	r2, r3, #15
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d901      	bls.n	8007ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e050      	b.n	8008092 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da0f      	bge.n	8008018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	f003 020f 	and.w	r2, r3, #15
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	3338      	adds	r3, #56	; 0x38
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	3304      	adds	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	705a      	strb	r2, [r3, #1]
 8008016:	e00d      	b.n	8008034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	3304      	adds	r3, #4
 800802c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	b2da      	uxtb	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_PCD_EP_SetStall+0x82>
 8008050:	2302      	movs	r3, #2
 8008052:	e01e      	b.n	8008092 <HAL_PCD_EP_SetStall+0xc0>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68f9      	ldr	r1, [r7, #12]
 8008062:	4618      	mov	r0, r3
 8008064:	f003 f8ef 	bl	800b246 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	b2d9      	uxtb	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008082:	461a      	mov	r2, r3
 8008084:	f003 fae0 	bl	800b648 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	f003 020f 	and.w	r2, r3, #15
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d901      	bls.n	80080b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e042      	b.n	800813e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0f      	bge.n	80080e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	f003 020f 	and.w	r2, r3, #15
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3338      	adds	r3, #56	; 0x38
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	705a      	strb	r2, [r3, #1]
 80080de:	e00f      	b.n	8008100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	3304      	adds	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	b2da      	uxtb	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_PCD_EP_ClrStall+0x86>
 800811c:	2302      	movs	r3, #2
 800811e:	e00e      	b.n	800813e <HAL_PCD_EP_ClrStall+0xa4>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68f9      	ldr	r1, [r7, #12]
 800812e:	4618      	mov	r0, r3
 8008130:	f003 f8f7 	bl	800b322 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b08a      	sub	sp, #40	; 0x28
 800814a:	af02      	add	r7, sp, #8
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	3338      	adds	r3, #56	; 0x38
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	3304      	adds	r3, #4
 800816c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	429a      	cmp	r2, r3
 8008178:	d901      	bls.n	800817e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e06c      	b.n	8008258 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	429a      	cmp	r2, r3
 8008192:	d902      	bls.n	800819a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3303      	adds	r3, #3
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081a2:	e02b      	b.n	80081fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d902      	bls.n	80081c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	3303      	adds	r3, #3
 80081c4:	089b      	lsrs	r3, r3, #2
 80081c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68d9      	ldr	r1, [r3, #12]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4603      	mov	r3, r0
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f002 ffd3 	bl	800b18a <USB_WritePacket>

    ep->xfer_buff  += len;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699a      	ldr	r2, [r3, #24]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	b29b      	uxth	r3, r3
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	429a      	cmp	r2, r3
 8008210:	d809      	bhi.n	8008226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800821a:	429a      	cmp	r2, r3
 800821c:	d203      	bcs.n	8008226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1be      	bne.n	80081a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	429a      	cmp	r2, r3
 8008230:	d811      	bhi.n	8008256 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	2201      	movs	r2, #1
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	43db      	mvns	r3, r3
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008252:	4013      	ands	r3, r2
 8008254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	333c      	adds	r3, #60	; 0x3c
 8008278:	3304      	adds	r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b01      	cmp	r3, #1
 8008294:	f040 80b3 	bne.w	80083fe <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d028      	beq.n	80082f4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a70      	ldr	r2, [pc, #448]	; (8008468 <PCD_EP_OutXfrComplete_int+0x208>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d90e      	bls.n	80082c8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c0:	461a      	mov	r2, r3
 80082c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f007 ff63 	bl	8010194 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082d8:	461a      	mov	r2, r3
 80082da:	2101      	movs	r1, #1
 80082dc:	f003 f9b4 	bl	800b648 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ec:	461a      	mov	r2, r3
 80082ee:	2308      	movs	r3, #8
 80082f0:	6093      	str	r3, [r2, #8]
 80082f2:	e0b3      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830a:	461a      	mov	r2, r3
 800830c:	2320      	movs	r3, #32
 800830e:	6093      	str	r3, [r2, #8]
 8008310:	e0a4      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 809f 	bne.w	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a51      	ldr	r2, [pc, #324]	; (8008468 <PCD_EP_OutXfrComplete_int+0x208>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d90f      	bls.n	8008346 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833c:	461a      	mov	r2, r3
 800833e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008342:	6093      	str	r3, [r2, #8]
 8008344:	e08a      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	4613      	mov	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008358:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	0159      	lsls	r1, r3, #5
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	440b      	add	r3, r1
 8008362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800836c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	4613      	mov	r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4403      	add	r3, r0
 800837c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008380:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	4613      	mov	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	4613      	mov	r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4403      	add	r3, r0
 80083a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4419      	add	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4403      	add	r3, r0
 80083ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083be:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f007 fef6 	bl	80101b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d144      	bne.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d138      	bne.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083f4:	461a      	mov	r2, r3
 80083f6:	2101      	movs	r1, #1
 80083f8:	f003 f926 	bl	800b648 <USB_EP0_OutStart>
 80083fc:	e02e      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4a1a      	ldr	r2, [pc, #104]	; (800846c <PCD_EP_OutXfrComplete_int+0x20c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d124      	bne.n	8008450 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841c:	461a      	mov	r2, r3
 800841e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008422:	6093      	str	r3, [r2, #8]
 8008424:	e01a      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	461a      	mov	r2, r3
 800843e:	2320      	movs	r3, #32
 8008440:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f007 feb5 	bl	80101b8 <HAL_PCD_DataOutStageCallback>
 800844e:	e005      	b.n	800845c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f007 feae 	bl	80101b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	4f54300a 	.word	0x4f54300a
 800846c:	4f54310a 	.word	0x4f54310a

08008470 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	333c      	adds	r3, #60	; 0x3c
 8008488:	3304      	adds	r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d113      	bne.n	80084ce <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d922      	bls.n	80084f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01d      	beq.n	80084f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ca:	6093      	str	r3, [r2, #8]
 80084cc:	e012      	b.n	80084f4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4a16      	ldr	r2, [pc, #88]	; (800852c <PCD_EP_OutSetupPacket_int+0xbc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d10e      	bne.n	80084f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d009      	beq.n	80084f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ec:	461a      	mov	r2, r3
 80084ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f007 fe4d 	bl	8010194 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <PCD_EP_OutSetupPacket_int+0xb8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d90c      	bls.n	800851c <PCD_EP_OutSetupPacket_int+0xac>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d108      	bne.n	800851c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008514:	461a      	mov	r2, r3
 8008516:	2101      	movs	r1, #1
 8008518:	f003 f896 	bl	800b648 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	4f54300a 	.word	0x4f54300a
 800852c:	4f54310a 	.word	0x4f54310a

08008530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
 800853c:	4613      	mov	r3, r2
 800853e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d107      	bne.n	800855e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800854e:	883b      	ldrh	r3, [r7, #0]
 8008550:	0419      	lsls	r1, r3, #16
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	430a      	orrs	r2, r1
 800855a:	629a      	str	r2, [r3, #40]	; 0x28
 800855c:	e028      	b.n	80085b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
 8008570:	e00d      	b.n	800858e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	3340      	adds	r3, #64	; 0x40
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	3301      	adds	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	3b01      	subs	r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d3ec      	bcc.n	8008572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008598:	883b      	ldrh	r3, [r7, #0]
 800859a:	0418      	lsls	r0, r3, #16
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	4302      	orrs	r2, r0
 80085a8:	3340      	adds	r3, #64	; 0x40
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	887a      	ldrh	r2, [r7, #2]
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e25b      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d075      	beq.n	8008702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008616:	4ba3      	ldr	r3, [pc, #652]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 030c 	and.w	r3, r3, #12
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00c      	beq.n	800863c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008622:	4ba0      	ldr	r3, [pc, #640]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800862a:	2b08      	cmp	r3, #8
 800862c:	d112      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800862e:	4b9d      	ldr	r3, [pc, #628]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863a:	d10b      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800863c:	4b99      	ldr	r3, [pc, #612]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05b      	beq.n	8008700 <HAL_RCC_OscConfig+0x108>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d157      	bne.n	8008700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e236      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d106      	bne.n	800866c <HAL_RCC_OscConfig+0x74>
 800865e:	4b91      	ldr	r3, [pc, #580]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a90      	ldr	r2, [pc, #576]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e01d      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008674:	d10c      	bne.n	8008690 <HAL_RCC_OscConfig+0x98>
 8008676:	4b8b      	ldr	r3, [pc, #556]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a8a      	ldr	r2, [pc, #552]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800867c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b88      	ldr	r3, [pc, #544]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a87      	ldr	r2, [pc, #540]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e00b      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 8008690:	4b84      	ldr	r3, [pc, #528]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a83      	ldr	r2, [pc, #524]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b81      	ldr	r3, [pc, #516]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a80      	ldr	r2, [pc, #512]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b0:	f7fd ffd0 	bl	8006654 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086b8:	f7fd ffcc 	bl	8006654 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b64      	cmp	r3, #100	; 0x64
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e1fb      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	4b76      	ldr	r3, [pc, #472]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0xc0>
 80086d6:	e014      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d8:	f7fd ffbc 	bl	8006654 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e0:	f7fd ffb8 	bl	8006654 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	; 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1e7      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f2:	4b6c      	ldr	r3, [pc, #432]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <HAL_RCC_OscConfig+0xe8>
 80086fe:	e000      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871a:	4b62      	ldr	r3, [pc, #392]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008722:	2b08      	cmp	r3, #8
 8008724:	d11c      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008726:	4b5f      	ldr	r3, [pc, #380]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d116      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008732:	4b5c      	ldr	r3, [pc, #368]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e1bb      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b56      	ldr	r3, [pc, #344]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4952      	ldr	r1, [pc, #328]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800875a:	4313      	orrs	r3, r2
 800875c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	e03a      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d020      	beq.n	80087aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008768:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <HAL_RCC_OscConfig+0x2b0>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fd ff71 	bl	8006654 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008776:	f7fd ff6d 	bl	8006654 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e19c      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008788:	4b46      	ldr	r3, [pc, #280]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	4b43      	ldr	r3, [pc, #268]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4940      	ldr	r1, [pc, #256]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
 80087a8:	e015      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087aa:	4b3f      	ldr	r3, [pc, #252]	; (80088a8 <HAL_RCC_OscConfig+0x2b0>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fd ff50 	bl	8006654 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b8:	f7fd ff4c 	bl	8006654 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e17b      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ca:	4b36      	ldr	r3, [pc, #216]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d030      	beq.n	8008844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ea:	4b30      	ldr	r3, [pc, #192]	; (80088ac <HAL_RCC_OscConfig+0x2b4>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f0:	f7fd ff30 	bl	8006654 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f8:	f7fd ff2c 	bl	8006654 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e15b      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800880a:	4b26      	ldr	r3, [pc, #152]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800880c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x200>
 8008816:	e015      	b.n	8008844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008818:	4b24      	ldr	r3, [pc, #144]	; (80088ac <HAL_RCC_OscConfig+0x2b4>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800881e:	f7fd ff19 	bl	8006654 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008826:	f7fd ff15 	bl	8006654 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e144      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008838:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f0      	bne.n	8008826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80a0 	beq.w	8008992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10f      	bne.n	8008882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	4a0e      	ldr	r2, [pc, #56]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800886c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008870:	6413      	str	r3, [r2, #64]	; 0x40
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887a:	60bb      	str	r3, [r7, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d121      	bne.n	80088d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800888e:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800889a:	f7fd fedb 	bl	8006654 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088a0:	e011      	b.n	80088c6 <HAL_RCC_OscConfig+0x2ce>
 80088a2:	bf00      	nop
 80088a4:	40023800 	.word	0x40023800
 80088a8:	42470000 	.word	0x42470000
 80088ac:	42470e80 	.word	0x42470e80
 80088b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b4:	f7fd fece 	bl	8006654 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e0fd      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c6:	4b81      	ldr	r3, [pc, #516]	; (8008acc <HAL_RCC_OscConfig+0x4d4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d106      	bne.n	80088e8 <HAL_RCC_OscConfig+0x2f0>
 80088da:	4b7d      	ldr	r3, [pc, #500]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088de:	4a7c      	ldr	r2, [pc, #496]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6713      	str	r3, [r2, #112]	; 0x70
 80088e6:	e01c      	b.n	8008922 <HAL_RCC_OscConfig+0x32a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b05      	cmp	r3, #5
 80088ee:	d10c      	bne.n	800890a <HAL_RCC_OscConfig+0x312>
 80088f0:	4b77      	ldr	r3, [pc, #476]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f4:	4a76      	ldr	r2, [pc, #472]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80088f6:	f043 0304 	orr.w	r3, r3, #4
 80088fa:	6713      	str	r3, [r2, #112]	; 0x70
 80088fc:	4b74      	ldr	r3, [pc, #464]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	4a73      	ldr	r2, [pc, #460]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	6713      	str	r3, [r2, #112]	; 0x70
 8008908:	e00b      	b.n	8008922 <HAL_RCC_OscConfig+0x32a>
 800890a:	4b71      	ldr	r3, [pc, #452]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	4a70      	ldr	r2, [pc, #448]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	6713      	str	r3, [r2, #112]	; 0x70
 8008916:	4b6e      	ldr	r3, [pc, #440]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	4a6d      	ldr	r2, [pc, #436]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d015      	beq.n	8008956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892a:	f7fd fe93 	bl	8006654 <HAL_GetTick>
 800892e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008930:	e00a      	b.n	8008948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008932:	f7fd fe8f 	bl	8006654 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008940:	4293      	cmp	r3, r2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e0bc      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008948:	4b61      	ldr	r3, [pc, #388]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ee      	beq.n	8008932 <HAL_RCC_OscConfig+0x33a>
 8008954:	e014      	b.n	8008980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008956:	f7fd fe7d 	bl	8006654 <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895c:	e00a      	b.n	8008974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800895e:	f7fd fe79 	bl	8006654 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f241 3288 	movw	r2, #5000	; 0x1388
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e0a6      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008974:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1ee      	bne.n	800895e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008986:	4b52      	ldr	r3, [pc, #328]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	4a51      	ldr	r2, [pc, #324]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 800898c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8092 	beq.w	8008ac0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800899c:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 030c 	and.w	r3, r3, #12
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d05c      	beq.n	8008a62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d141      	bne.n	8008a34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089b0:	4b48      	ldr	r3, [pc, #288]	; (8008ad4 <HAL_RCC_OscConfig+0x4dc>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b6:	f7fd fe4d 	bl	8006654 <HAL_GetTick>
 80089ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089bc:	e008      	b.n	80089d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089be:	f7fd fe49 	bl	8006654 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e078      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d0:	4b3f      	ldr	r3, [pc, #252]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f0      	bne.n	80089be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	019b      	lsls	r3, r3, #6
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	3b01      	subs	r3, #1
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	061b      	lsls	r3, r3, #24
 8008a00:	4933      	ldr	r1, [pc, #204]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a06:	4b33      	ldr	r3, [pc, #204]	; (8008ad4 <HAL_RCC_OscConfig+0x4dc>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0c:	f7fd fe22 	bl	8006654 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a14:	f7fd fe1e 	bl	8006654 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e04d      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a26:	4b2a      	ldr	r3, [pc, #168]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x41c>
 8008a32:	e045      	b.n	8008ac0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a34:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <HAL_RCC_OscConfig+0x4dc>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a3a:	f7fd fe0b 	bl	8006654 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a42:	f7fd fe07 	bl	8006654 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e036      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a54:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f0      	bne.n	8008a42 <HAL_RCC_OscConfig+0x44a>
 8008a60:	e02e      	b.n	8008ac0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e029      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008a6e:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <HAL_RCC_OscConfig+0x4d8>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d11c      	bne.n	8008abc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d115      	bne.n	8008abc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a96:	4013      	ands	r3, r2
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d10d      	bne.n	8008abc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d106      	bne.n	8008abc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e000      	b.n	8008ac2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40007000 	.word	0x40007000
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	42470060 	.word	0x42470060

08008ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0cc      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008aec:	4b68      	ldr	r3, [pc, #416]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d90c      	bls.n	8008b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afa:	4b65      	ldr	r3, [pc, #404]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b02:	4b63      	ldr	r3, [pc, #396]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0b8      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d020      	beq.n	8008b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b2c:	4b59      	ldr	r3, [pc, #356]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	4a58      	ldr	r2, [pc, #352]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b44:	4b53      	ldr	r3, [pc, #332]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	4a52      	ldr	r2, [pc, #328]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b50:	4b50      	ldr	r3, [pc, #320]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	494d      	ldr	r1, [pc, #308]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d044      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d107      	bne.n	8008b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b76:	4b47      	ldr	r3, [pc, #284]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d119      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e07f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d003      	beq.n	8008b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b96:	4b3f      	ldr	r3, [pc, #252]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e06f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e067      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bb6:	4b37      	ldr	r3, [pc, #220]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f023 0203 	bic.w	r2, r3, #3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4934      	ldr	r1, [pc, #208]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bc8:	f7fd fd44 	bl	8006654 <HAL_GetTick>
 8008bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bce:	e00a      	b.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd0:	f7fd fd40 	bl	8006654 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e04f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be6:	4b2b      	ldr	r3, [pc, #172]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 020c 	and.w	r2, r3, #12
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1eb      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf8:	4b25      	ldr	r3, [pc, #148]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d20c      	bcs.n	8008c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c06:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0e:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d001      	beq.n	8008c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e032      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c2c:	4b19      	ldr	r3, [pc, #100]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4916      	ldr	r1, [pc, #88]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	490e      	ldr	r1, [pc, #56]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c5e:	f000 f821 	bl	8008ca4 <HAL_RCC_GetSysClockFreq>
 8008c62:	4601      	mov	r1, r0
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008c70:	5cd3      	ldrb	r3, [r2, r3]
 8008c72:	fa21 f303 	lsr.w	r3, r1, r3
 8008c76:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fac0 	bl	8006204 <HAL_InitTick>

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40023c00 	.word	0x40023c00
 8008c94:	40023800 	.word	0x40023800
 8008c98:	08015ef0 	.word	0x08015ef0
 8008c9c:	20000cb4 	.word	0x20000cb4
 8008ca0:	20000cb8 	.word	0x20000cb8

08008ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cba:	4b63      	ldr	r3, [pc, #396]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d007      	beq.n	8008cd6 <HAL_RCC_GetSysClockFreq+0x32>
 8008cc6:	2b08      	cmp	r3, #8
 8008cc8:	d008      	beq.n	8008cdc <HAL_RCC_GetSysClockFreq+0x38>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 80b4 	bne.w	8008e38 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cd0:	4b5e      	ldr	r3, [pc, #376]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008cd2:	60bb      	str	r3, [r7, #8]
       break;
 8008cd4:	e0b3      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cd6:	4b5e      	ldr	r3, [pc, #376]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008cd8:	60bb      	str	r3, [r7, #8]
      break;
 8008cda:	e0b0      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cdc:	4b5a      	ldr	r3, [pc, #360]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ce6:	4b58      	ldr	r3, [pc, #352]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d04a      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf2:	4b55      	ldr	r3, [pc, #340]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	f04f 0400 	mov.w	r4, #0
 8008cfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	ea03 0501 	and.w	r5, r3, r1
 8008d08:	ea04 0602 	and.w	r6, r4, r2
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4632      	mov	r2, r6
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	f04f 0400 	mov.w	r4, #0
 8008d18:	0154      	lsls	r4, r2, #5
 8008d1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d1e:	014b      	lsls	r3, r1, #5
 8008d20:	4619      	mov	r1, r3
 8008d22:	4622      	mov	r2, r4
 8008d24:	1b49      	subs	r1, r1, r5
 8008d26:	eb62 0206 	sbc.w	r2, r2, r6
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	f04f 0400 	mov.w	r4, #0
 8008d32:	0194      	lsls	r4, r2, #6
 8008d34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d38:	018b      	lsls	r3, r1, #6
 8008d3a:	1a5b      	subs	r3, r3, r1
 8008d3c:	eb64 0402 	sbc.w	r4, r4, r2
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	00e2      	lsls	r2, r4, #3
 8008d4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d4e:	00d9      	lsls	r1, r3, #3
 8008d50:	460b      	mov	r3, r1
 8008d52:	4614      	mov	r4, r2
 8008d54:	195b      	adds	r3, r3, r5
 8008d56:	eb44 0406 	adc.w	r4, r4, r6
 8008d5a:	f04f 0100 	mov.w	r1, #0
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	0262      	lsls	r2, r4, #9
 8008d64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008d68:	0259      	lsls	r1, r3, #9
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	4621      	mov	r1, r4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f04f 0400 	mov.w	r4, #0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	f7f7 ff94 	bl	8000ca8 <__aeabi_uldivmod>
 8008d80:	4603      	mov	r3, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	e049      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d88:	4b2f      	ldr	r3, [pc, #188]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	099b      	lsrs	r3, r3, #6
 8008d8e:	f04f 0400 	mov.w	r4, #0
 8008d92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	ea03 0501 	and.w	r5, r3, r1
 8008d9e:	ea04 0602 	and.w	r6, r4, r2
 8008da2:	4629      	mov	r1, r5
 8008da4:	4632      	mov	r2, r6
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	f04f 0400 	mov.w	r4, #0
 8008dae:	0154      	lsls	r4, r2, #5
 8008db0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008db4:	014b      	lsls	r3, r1, #5
 8008db6:	4619      	mov	r1, r3
 8008db8:	4622      	mov	r2, r4
 8008dba:	1b49      	subs	r1, r1, r5
 8008dbc:	eb62 0206 	sbc.w	r2, r2, r6
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	f04f 0400 	mov.w	r4, #0
 8008dc8:	0194      	lsls	r4, r2, #6
 8008dca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008dce:	018b      	lsls	r3, r1, #6
 8008dd0:	1a5b      	subs	r3, r3, r1
 8008dd2:	eb64 0402 	sbc.w	r4, r4, r2
 8008dd6:	f04f 0100 	mov.w	r1, #0
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	00e2      	lsls	r2, r4, #3
 8008de0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008de4:	00d9      	lsls	r1, r3, #3
 8008de6:	460b      	mov	r3, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	195b      	adds	r3, r3, r5
 8008dec:	eb44 0406 	adc.w	r4, r4, r6
 8008df0:	f04f 0100 	mov.w	r1, #0
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	02a2      	lsls	r2, r4, #10
 8008dfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008dfe:	0299      	lsls	r1, r3, #10
 8008e00:	460b      	mov	r3, r1
 8008e02:	4614      	mov	r4, r2
 8008e04:	4618      	mov	r0, r3
 8008e06:	4621      	mov	r1, r4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f04f 0400 	mov.w	r4, #0
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4623      	mov	r3, r4
 8008e12:	f7f7 ff49 	bl	8000ca8 <__aeabi_uldivmod>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	3301      	adds	r3, #1
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e34:	60bb      	str	r3, [r7, #8]
      break;
 8008e36:	e002      	b.n	8008e3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e3a:	60bb      	str	r3, [r7, #8]
      break;
 8008e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	00f42400 	.word	0x00f42400
 8008e50:	007a1200 	.word	0x007a1200

08008e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000cb4 	.word	0x20000cb4

08008e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e70:	f7ff fff0 	bl	8008e54 <HAL_RCC_GetHCLKFreq>
 8008e74:	4601      	mov	r1, r0
 8008e76:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	0a9b      	lsrs	r3, r3, #10
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	4a03      	ldr	r2, [pc, #12]	; (8008e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e82:	5cd3      	ldrb	r3, [r2, r3]
 8008e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	08015f00 	.word	0x08015f00

08008e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e98:	f7ff ffdc 	bl	8008e54 <HAL_RCC_GetHCLKFreq>
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	0b5b      	lsrs	r3, r3, #13
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	4a03      	ldr	r2, [pc, #12]	; (8008eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eaa:	5cd3      	ldrb	r3, [r2, r3]
 8008eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	08015f00 	.word	0x08015f00

08008ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220f      	movs	r2, #15
 8008eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <HAL_RCC_GetClockConfig+0x5c>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0203 	and.w	r2, r3, #3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ed8:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <HAL_RCC_GetClockConfig+0x5c>)
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <HAL_RCC_GetClockConfig+0x5c>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ef0:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <HAL_RCC_GetClockConfig+0x5c>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	08db      	lsrs	r3, r3, #3
 8008ef6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <HAL_RCC_GetClockConfig+0x60>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	601a      	str	r2, [r3, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	40023c00 	.word	0x40023c00

08008f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e01d      	b.n	8008f6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f815 	bl	8008f76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f000 f968 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0201 	orr.w	r2, r2, #1
 8008fa0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b06      	cmp	r3, #6
 8008fb2:	d007      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d122      	bne.n	800902e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d11b      	bne.n	800902e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0202 	mvn.w	r2, #2
 8008ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f8ee 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 800901a:	e005      	b.n	8009028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8e0 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8f1 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d122      	bne.n	8009082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d11b      	bne.n	8009082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0204 	mvn.w	r2, #4
 8009052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f8c4 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 800906e:	e005      	b.n	800907c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f8b6 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8c7 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b08      	cmp	r3, #8
 800908e:	d122      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b08      	cmp	r3, #8
 800909c:	d11b      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f06f 0208 	mvn.w	r2, #8
 80090a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2204      	movs	r2, #4
 80090ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f89a 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 80090c2:	e005      	b.n	80090d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f88c 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f89d 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d122      	bne.n	800912a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f003 0310 	and.w	r3, r3, #16
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d11b      	bne.n	800912a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f06f 0210 	mvn.w	r2, #16
 80090fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2208      	movs	r2, #8
 8009100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f870 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 8009116:	e005      	b.n	8009124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f862 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f873 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d10e      	bne.n	8009156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b01      	cmp	r3, #1
 8009144:	d107      	bne.n	8009156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f06f 0201 	mvn.w	r2, #1
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7f9 fd9d 	bl	8002c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d10e      	bne.n	8009182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d107      	bne.n	8009182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800917a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f903 	bl	8009388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b40      	cmp	r3, #64	; 0x40
 800918e:	d10e      	bne.n	80091ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	d107      	bne.n	80091ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f838 	bl	800921e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d10e      	bne.n	80091da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d107      	bne.n	80091da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f06f 0220 	mvn.w	r2, #32
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f8cd 	bl	8009374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a40      	ldr	r2, [pc, #256]	; (8009348 <TIM_Base_SetConfig+0x114>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d013      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009252:	d00f      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a3d      	ldr	r2, [pc, #244]	; (800934c <TIM_Base_SetConfig+0x118>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00b      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a3c      	ldr	r2, [pc, #240]	; (8009350 <TIM_Base_SetConfig+0x11c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d007      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <TIM_Base_SetConfig+0x120>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d003      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <TIM_Base_SetConfig+0x124>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d108      	bne.n	8009286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a2f      	ldr	r2, [pc, #188]	; (8009348 <TIM_Base_SetConfig+0x114>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009294:	d027      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2c      	ldr	r2, [pc, #176]	; (800934c <TIM_Base_SetConfig+0x118>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d023      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2b      	ldr	r2, [pc, #172]	; (8009350 <TIM_Base_SetConfig+0x11c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2a      	ldr	r2, [pc, #168]	; (8009354 <TIM_Base_SetConfig+0x120>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d01b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a29      	ldr	r2, [pc, #164]	; (8009358 <TIM_Base_SetConfig+0x124>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d017      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a28      	ldr	r2, [pc, #160]	; (800935c <TIM_Base_SetConfig+0x128>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d013      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a27      	ldr	r2, [pc, #156]	; (8009360 <TIM_Base_SetConfig+0x12c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a26      	ldr	r2, [pc, #152]	; (8009364 <TIM_Base_SetConfig+0x130>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a25      	ldr	r2, [pc, #148]	; (8009368 <TIM_Base_SetConfig+0x134>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d007      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a24      	ldr	r2, [pc, #144]	; (800936c <TIM_Base_SetConfig+0x138>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d003      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a23      	ldr	r2, [pc, #140]	; (8009370 <TIM_Base_SetConfig+0x13c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d108      	bne.n	80092f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <TIM_Base_SetConfig+0x114>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_Base_SetConfig+0xf8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a0c      	ldr	r2, [pc, #48]	; (8009358 <TIM_Base_SetConfig+0x124>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d103      	bne.n	8009334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	615a      	str	r2, [r3, #20]
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40010000 	.word	0x40010000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40010400 	.word	0x40010400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800
 8009368:	40001800 	.word	0x40001800
 800936c:	40001c00 	.word	0x40001c00
 8009370:	40002000 	.word	0x40002000

08009374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e03f      	b.n	800942e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fd f83c 	bl	8006440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2224      	movs	r2, #36	; 0x24
 80093cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fb6b 	bl	8009abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b20      	cmp	r3, #32
 8009450:	d153      	bne.n	80094fa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <HAL_UART_Transmit_DMA+0x26>
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e04c      	b.n	80094fc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_UART_Transmit_DMA+0x38>
 800946c:	2302      	movs	r3, #2
 800946e:	e045      	b.n	80094fc <HAL_UART_Transmit_DMA+0xc4>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	88fa      	ldrh	r2, [r7, #6]
 8009482:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	88fa      	ldrh	r2, [r7, #6]
 8009488:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2221      	movs	r2, #33	; 0x21
 8009494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	4a19      	ldr	r2, [pc, #100]	; (8009504 <HAL_UART_Transmit_DMA+0xcc>)
 800949e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a4:	4a18      	ldr	r2, [pc, #96]	; (8009508 <HAL_UART_Transmit_DMA+0xd0>)
 80094a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	4a17      	ldr	r2, [pc, #92]	; (800950c <HAL_UART_Transmit_DMA+0xd4>)
 80094ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	2200      	movs	r2, #0
 80094b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3304      	adds	r3, #4
 80094cc:	461a      	mov	r2, r3
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	f7fd fa7e 	bl	80069d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094f4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e000      	b.n	80094fc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	0800974d 	.word	0x0800974d
 8009508:	0800979f 	.word	0x0800979f
 800950c:	080097bb 	.word	0x080097bb

08009510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009530:	2300      	movs	r3, #0
 8009532:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_UART_IRQHandler+0x52>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa2d 	bl	80099ba <UART_Receive_IT>
      return;
 8009560:	e0d1      	b.n	8009706 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 80b0 	beq.w	80096ca <HAL_UART_IRQHandler+0x1ba>
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d105      	bne.n	8009580 <HAL_UART_IRQHandler+0x70>
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80a5 	beq.w	80096ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <HAL_UART_IRQHandler+0x90>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	f043 0201 	orr.w	r2, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <HAL_UART_IRQHandler+0xb0>
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b8:	f043 0202 	orr.w	r2, r3, #2
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <HAL_UART_IRQHandler+0xd0>
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d005      	beq.n	80095e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d8:	f043 0204 	orr.w	r2, r3, #4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00f      	beq.n	800960a <HAL_UART_IRQHandler+0xfa>
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <HAL_UART_IRQHandler+0xee>
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	f043 0208 	orr.w	r2, r3, #8
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d078      	beq.n	8009704 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <HAL_UART_IRQHandler+0x11c>
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9c7 	bl	80099ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <HAL_UART_IRQHandler+0x144>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d031      	beq.n	80096b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f910 	bl	800987a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009664:	2b40      	cmp	r3, #64	; 0x40
 8009666:	d123      	bne.n	80096b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009676:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d013      	beq.n	80096a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	4a21      	ldr	r2, [pc, #132]	; (800970c <HAL_UART_IRQHandler+0x1fc>)
 8009686:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968c:	4618      	mov	r0, r3
 800968e:	f7fd f9f7 	bl	8006a80 <HAL_DMA_Abort_IT>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d016      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096a2:	4610      	mov	r0, r2
 80096a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a6:	e00e      	b.n	80096c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f845 	bl	8009738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ae:	e00a      	b.n	80096c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f841 	bl	8009738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b6:	e006      	b.n	80096c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f83d 	bl	8009738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80096c4:	e01e      	b.n	8009704 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c6:	bf00      	nop
    return;
 80096c8:	e01c      	b.n	8009704 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d008      	beq.n	80096e6 <HAL_UART_IRQHandler+0x1d6>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8fd 	bl	80098de <UART_Transmit_IT>
    return;
 80096e4:	e00f      	b.n	8009706 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_UART_IRQHandler+0x1f6>
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f945 	bl	800998a <UART_EndTransmit_IT>
    return;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009704:	bf00      	nop
  }
}
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	080098b7 	.word	0x080098b7

08009710 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009758:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009764:	2b00      	cmp	r3, #0
 8009766:	d113      	bne.n	8009790 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	695a      	ldr	r2, [r3, #20]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800977c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800978c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800978e:	e002      	b.n	8009796 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7fc fed7 	bl	8006544 <HAL_UART_TxCpltCallback>
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff ffaf 	bl	8009710 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d6:	2b80      	cmp	r3, #128	; 0x80
 80097d8:	bf0c      	ite	eq
 80097da:	2301      	moveq	r3, #1
 80097dc:	2300      	movne	r3, #0
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b21      	cmp	r3, #33	; 0x21
 80097ec:	d108      	bne.n	8009800 <UART_DMAError+0x46>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f000 f827 	bl	800984e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b22      	cmp	r3, #34	; 0x22
 8009820:	d108      	bne.n	8009834 <UART_DMAError+0x7a>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800982e:	68b8      	ldr	r0, [r7, #8]
 8009830:	f000 f823 	bl	800987a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009838:	f043 0210 	orr.w	r2, r3, #16
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009840:	68b8      	ldr	r0, [r7, #8]
 8009842:	f7ff ff79 	bl	8009738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009864:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695a      	ldr	r2, [r3, #20]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff ff31 	bl	8009738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b21      	cmp	r3, #33	; 0x21
 80098f0:	d144      	bne.n	800997c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	d11a      	bne.n	8009932 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009910:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	621a      	str	r2, [r3, #32]
 8009924:	e00e      	b.n	8009944 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	621a      	str	r2, [r3, #32]
 8009930:	e008      	b.n	8009944 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6211      	str	r1, [r2, #32]
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	4619      	mov	r1, r3
 8009952:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10f      	bne.n	8009978 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009966:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009976:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fc fdca 	bl	8006544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b22      	cmp	r3, #34	; 0x22
 80099cc:	d171      	bne.n	8009ab2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d6:	d123      	bne.n	8009a20 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10e      	bne.n	8009a04 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	1c9a      	adds	r2, r3, #2
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
 8009a02:	e029      	b.n	8009a58 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8009a1e:	e01b      	b.n	8009a58 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6858      	ldr	r0, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	1c59      	adds	r1, r3, #1
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6291      	str	r1, [r2, #40]	; 0x28
 8009a38:	b2c2      	uxtb	r2, r0
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e00c      	b.n	8009a58 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	1c58      	adds	r0, r3, #1
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	6288      	str	r0, [r1, #40]	; 0x28
 8009a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4619      	mov	r1, r3
 8009a66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d120      	bne.n	8009aae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0220 	bic.w	r2, r2, #32
 8009a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68da      	ldr	r2, [r3, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695a      	ldr	r2, [r3, #20]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 0201 	bic.w	r2, r2, #1
 8009a9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fe3d 	bl	8009724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e002      	b.n	8009ab4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e000      	b.n	8009ab4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009ab2:	2302      	movs	r3, #2
  }
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009afe:	f023 030c 	bic.w	r3, r3, #12
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	68f9      	ldr	r1, [r7, #12]
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b2a:	f040 818b 	bne.w	8009e44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4ac1      	ldr	r2, [pc, #772]	; (8009e38 <UART_SetConfig+0x37c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d005      	beq.n	8009b44 <UART_SetConfig+0x88>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4abf      	ldr	r2, [pc, #764]	; (8009e3c <UART_SetConfig+0x380>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	f040 80bd 	bne.w	8009cbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b44:	f7ff f9a6 	bl	8008e94 <HAL_RCC_GetPCLK2Freq>
 8009b48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	461d      	mov	r5, r3
 8009b4e:	f04f 0600 	mov.w	r6, #0
 8009b52:	46a8      	mov	r8, r5
 8009b54:	46b1      	mov	r9, r6
 8009b56:	eb18 0308 	adds.w	r3, r8, r8
 8009b5a:	eb49 0409 	adc.w	r4, r9, r9
 8009b5e:	4698      	mov	r8, r3
 8009b60:	46a1      	mov	r9, r4
 8009b62:	eb18 0805 	adds.w	r8, r8, r5
 8009b66:	eb49 0906 	adc.w	r9, r9, r6
 8009b6a:	f04f 0100 	mov.w	r1, #0
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009b76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009b7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009b7e:	4688      	mov	r8, r1
 8009b80:	4691      	mov	r9, r2
 8009b82:	eb18 0005 	adds.w	r0, r8, r5
 8009b86:	eb49 0106 	adc.w	r1, r9, r6
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	461d      	mov	r5, r3
 8009b90:	f04f 0600 	mov.w	r6, #0
 8009b94:	196b      	adds	r3, r5, r5
 8009b96:	eb46 0406 	adc.w	r4, r6, r6
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4623      	mov	r3, r4
 8009b9e:	f7f7 f883 	bl	8000ca8 <__aeabi_uldivmod>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4ba5      	ldr	r3, [pc, #660]	; (8009e40 <UART_SetConfig+0x384>)
 8009baa:	fba3 2302 	umull	r2, r3, r3, r2
 8009bae:	095b      	lsrs	r3, r3, #5
 8009bb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	461d      	mov	r5, r3
 8009bb8:	f04f 0600 	mov.w	r6, #0
 8009bbc:	46a9      	mov	r9, r5
 8009bbe:	46b2      	mov	sl, r6
 8009bc0:	eb19 0309 	adds.w	r3, r9, r9
 8009bc4:	eb4a 040a 	adc.w	r4, sl, sl
 8009bc8:	4699      	mov	r9, r3
 8009bca:	46a2      	mov	sl, r4
 8009bcc:	eb19 0905 	adds.w	r9, r9, r5
 8009bd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8009bd4:	f04f 0100 	mov.w	r1, #0
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009be0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009be4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009be8:	4689      	mov	r9, r1
 8009bea:	4692      	mov	sl, r2
 8009bec:	eb19 0005 	adds.w	r0, r9, r5
 8009bf0:	eb4a 0106 	adc.w	r1, sl, r6
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	461d      	mov	r5, r3
 8009bfa:	f04f 0600 	mov.w	r6, #0
 8009bfe:	196b      	adds	r3, r5, r5
 8009c00:	eb46 0406 	adc.w	r4, r6, r6
 8009c04:	461a      	mov	r2, r3
 8009c06:	4623      	mov	r3, r4
 8009c08:	f7f7 f84e 	bl	8000ca8 <__aeabi_uldivmod>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	461a      	mov	r2, r3
 8009c12:	4b8b      	ldr	r3, [pc, #556]	; (8009e40 <UART_SetConfig+0x384>)
 8009c14:	fba3 1302 	umull	r1, r3, r3, r2
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	2164      	movs	r1, #100	; 0x64
 8009c1c:	fb01 f303 	mul.w	r3, r1, r3
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	3332      	adds	r3, #50	; 0x32
 8009c26:	4a86      	ldr	r2, [pc, #536]	; (8009e40 <UART_SetConfig+0x384>)
 8009c28:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2c:	095b      	lsrs	r3, r3, #5
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c34:	4498      	add	r8, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	461d      	mov	r5, r3
 8009c3a:	f04f 0600 	mov.w	r6, #0
 8009c3e:	46a9      	mov	r9, r5
 8009c40:	46b2      	mov	sl, r6
 8009c42:	eb19 0309 	adds.w	r3, r9, r9
 8009c46:	eb4a 040a 	adc.w	r4, sl, sl
 8009c4a:	4699      	mov	r9, r3
 8009c4c:	46a2      	mov	sl, r4
 8009c4e:	eb19 0905 	adds.w	r9, r9, r5
 8009c52:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c56:	f04f 0100 	mov.w	r1, #0
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	4692      	mov	sl, r2
 8009c6e:	eb19 0005 	adds.w	r0, r9, r5
 8009c72:	eb4a 0106 	adc.w	r1, sl, r6
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	461d      	mov	r5, r3
 8009c7c:	f04f 0600 	mov.w	r6, #0
 8009c80:	196b      	adds	r3, r5, r5
 8009c82:	eb46 0406 	adc.w	r4, r6, r6
 8009c86:	461a      	mov	r2, r3
 8009c88:	4623      	mov	r3, r4
 8009c8a:	f7f7 f80d 	bl	8000ca8 <__aeabi_uldivmod>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	461a      	mov	r2, r3
 8009c94:	4b6a      	ldr	r3, [pc, #424]	; (8009e40 <UART_SetConfig+0x384>)
 8009c96:	fba3 1302 	umull	r1, r3, r3, r2
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	2164      	movs	r1, #100	; 0x64
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	3332      	adds	r3, #50	; 0x32
 8009ca8:	4a65      	ldr	r2, [pc, #404]	; (8009e40 <UART_SetConfig+0x384>)
 8009caa:	fba2 2303 	umull	r2, r3, r2, r3
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	f003 0207 	and.w	r2, r3, #7
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4442      	add	r2, r8
 8009cba:	609a      	str	r2, [r3, #8]
 8009cbc:	e26f      	b.n	800a19e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cbe:	f7ff f8d5 	bl	8008e6c <HAL_RCC_GetPCLK1Freq>
 8009cc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	461d      	mov	r5, r3
 8009cc8:	f04f 0600 	mov.w	r6, #0
 8009ccc:	46a8      	mov	r8, r5
 8009cce:	46b1      	mov	r9, r6
 8009cd0:	eb18 0308 	adds.w	r3, r8, r8
 8009cd4:	eb49 0409 	adc.w	r4, r9, r9
 8009cd8:	4698      	mov	r8, r3
 8009cda:	46a1      	mov	r9, r4
 8009cdc:	eb18 0805 	adds.w	r8, r8, r5
 8009ce0:	eb49 0906 	adc.w	r9, r9, r6
 8009ce4:	f04f 0100 	mov.w	r1, #0
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009cf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009cf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009cf8:	4688      	mov	r8, r1
 8009cfa:	4691      	mov	r9, r2
 8009cfc:	eb18 0005 	adds.w	r0, r8, r5
 8009d00:	eb49 0106 	adc.w	r1, r9, r6
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	461d      	mov	r5, r3
 8009d0a:	f04f 0600 	mov.w	r6, #0
 8009d0e:	196b      	adds	r3, r5, r5
 8009d10:	eb46 0406 	adc.w	r4, r6, r6
 8009d14:	461a      	mov	r2, r3
 8009d16:	4623      	mov	r3, r4
 8009d18:	f7f6 ffc6 	bl	8000ca8 <__aeabi_uldivmod>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b47      	ldr	r3, [pc, #284]	; (8009e40 <UART_SetConfig+0x384>)
 8009d24:	fba3 2302 	umull	r2, r3, r3, r2
 8009d28:	095b      	lsrs	r3, r3, #5
 8009d2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	461d      	mov	r5, r3
 8009d32:	f04f 0600 	mov.w	r6, #0
 8009d36:	46a9      	mov	r9, r5
 8009d38:	46b2      	mov	sl, r6
 8009d3a:	eb19 0309 	adds.w	r3, r9, r9
 8009d3e:	eb4a 040a 	adc.w	r4, sl, sl
 8009d42:	4699      	mov	r9, r3
 8009d44:	46a2      	mov	sl, r4
 8009d46:	eb19 0905 	adds.w	r9, r9, r5
 8009d4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d4e:	f04f 0100 	mov.w	r1, #0
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d62:	4689      	mov	r9, r1
 8009d64:	4692      	mov	sl, r2
 8009d66:	eb19 0005 	adds.w	r0, r9, r5
 8009d6a:	eb4a 0106 	adc.w	r1, sl, r6
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	461d      	mov	r5, r3
 8009d74:	f04f 0600 	mov.w	r6, #0
 8009d78:	196b      	adds	r3, r5, r5
 8009d7a:	eb46 0406 	adc.w	r4, r6, r6
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4623      	mov	r3, r4
 8009d82:	f7f6 ff91 	bl	8000ca8 <__aeabi_uldivmod>
 8009d86:	4603      	mov	r3, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <UART_SetConfig+0x384>)
 8009d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2164      	movs	r1, #100	; 0x64
 8009d96:	fb01 f303 	mul.w	r3, r1, r3
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3332      	adds	r3, #50	; 0x32
 8009da0:	4a27      	ldr	r2, [pc, #156]	; (8009e40 <UART_SetConfig+0x384>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dae:	4498      	add	r8, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	461d      	mov	r5, r3
 8009db4:	f04f 0600 	mov.w	r6, #0
 8009db8:	46a9      	mov	r9, r5
 8009dba:	46b2      	mov	sl, r6
 8009dbc:	eb19 0309 	adds.w	r3, r9, r9
 8009dc0:	eb4a 040a 	adc.w	r4, sl, sl
 8009dc4:	4699      	mov	r9, r3
 8009dc6:	46a2      	mov	sl, r4
 8009dc8:	eb19 0905 	adds.w	r9, r9, r5
 8009dcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8009dd0:	f04f 0100 	mov.w	r1, #0
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009de0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009de4:	4689      	mov	r9, r1
 8009de6:	4692      	mov	sl, r2
 8009de8:	eb19 0005 	adds.w	r0, r9, r5
 8009dec:	eb4a 0106 	adc.w	r1, sl, r6
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	461d      	mov	r5, r3
 8009df6:	f04f 0600 	mov.w	r6, #0
 8009dfa:	196b      	adds	r3, r5, r5
 8009dfc:	eb46 0406 	adc.w	r4, r6, r6
 8009e00:	461a      	mov	r2, r3
 8009e02:	4623      	mov	r3, r4
 8009e04:	f7f6 ff50 	bl	8000ca8 <__aeabi_uldivmod>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <UART_SetConfig+0x384>)
 8009e10:	fba3 1302 	umull	r1, r3, r3, r2
 8009e14:	095b      	lsrs	r3, r3, #5
 8009e16:	2164      	movs	r1, #100	; 0x64
 8009e18:	fb01 f303 	mul.w	r3, r1, r3
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	3332      	adds	r3, #50	; 0x32
 8009e22:	4a07      	ldr	r2, [pc, #28]	; (8009e40 <UART_SetConfig+0x384>)
 8009e24:	fba2 2303 	umull	r2, r3, r2, r3
 8009e28:	095b      	lsrs	r3, r3, #5
 8009e2a:	f003 0207 	and.w	r2, r3, #7
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4442      	add	r2, r8
 8009e34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009e36:	e1b2      	b.n	800a19e <UART_SetConfig+0x6e2>
 8009e38:	40011000 	.word	0x40011000
 8009e3c:	40011400 	.word	0x40011400
 8009e40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4ad7      	ldr	r2, [pc, #860]	; (800a1a8 <UART_SetConfig+0x6ec>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d005      	beq.n	8009e5a <UART_SetConfig+0x39e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4ad6      	ldr	r2, [pc, #856]	; (800a1ac <UART_SetConfig+0x6f0>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	f040 80d1 	bne.w	8009ffc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e5a:	f7ff f81b 	bl	8008e94 <HAL_RCC_GetPCLK2Freq>
 8009e5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	469a      	mov	sl, r3
 8009e64:	f04f 0b00 	mov.w	fp, #0
 8009e68:	46d0      	mov	r8, sl
 8009e6a:	46d9      	mov	r9, fp
 8009e6c:	eb18 0308 	adds.w	r3, r8, r8
 8009e70:	eb49 0409 	adc.w	r4, r9, r9
 8009e74:	4698      	mov	r8, r3
 8009e76:	46a1      	mov	r9, r4
 8009e78:	eb18 080a 	adds.w	r8, r8, sl
 8009e7c:	eb49 090b 	adc.w	r9, r9, fp
 8009e80:	f04f 0100 	mov.w	r1, #0
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e94:	4688      	mov	r8, r1
 8009e96:	4691      	mov	r9, r2
 8009e98:	eb1a 0508 	adds.w	r5, sl, r8
 8009e9c:	eb4b 0609 	adc.w	r6, fp, r9
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	f04f 0400 	mov.w	r4, #0
 8009eb2:	0094      	lsls	r4, r2, #2
 8009eb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009eb8:	008b      	lsls	r3, r1, #2
 8009eba:	461a      	mov	r2, r3
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	f7f6 fef1 	bl	8000ca8 <__aeabi_uldivmod>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	460c      	mov	r4, r1
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4bb8      	ldr	r3, [pc, #736]	; (800a1b0 <UART_SetConfig+0x6f4>)
 8009ece:	fba3 2302 	umull	r2, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	469b      	mov	fp, r3
 8009edc:	f04f 0c00 	mov.w	ip, #0
 8009ee0:	46d9      	mov	r9, fp
 8009ee2:	46e2      	mov	sl, ip
 8009ee4:	eb19 0309 	adds.w	r3, r9, r9
 8009ee8:	eb4a 040a 	adc.w	r4, sl, sl
 8009eec:	4699      	mov	r9, r3
 8009eee:	46a2      	mov	sl, r4
 8009ef0:	eb19 090b 	adds.w	r9, r9, fp
 8009ef4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ef8:	f04f 0100 	mov.w	r1, #0
 8009efc:	f04f 0200 	mov.w	r2, #0
 8009f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	4692      	mov	sl, r2
 8009f10:	eb1b 0509 	adds.w	r5, fp, r9
 8009f14:	eb4c 060a 	adc.w	r6, ip, sl
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f04f 0200 	mov.w	r2, #0
 8009f22:	f04f 0300 	mov.w	r3, #0
 8009f26:	f04f 0400 	mov.w	r4, #0
 8009f2a:	0094      	lsls	r4, r2, #2
 8009f2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f30:	008b      	lsls	r3, r1, #2
 8009f32:	461a      	mov	r2, r3
 8009f34:	4623      	mov	r3, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	4631      	mov	r1, r6
 8009f3a:	f7f6 feb5 	bl	8000ca8 <__aeabi_uldivmod>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	461a      	mov	r2, r3
 8009f44:	4b9a      	ldr	r3, [pc, #616]	; (800a1b0 <UART_SetConfig+0x6f4>)
 8009f46:	fba3 1302 	umull	r1, r3, r3, r2
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	2164      	movs	r1, #100	; 0x64
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	3332      	adds	r3, #50	; 0x32
 8009f58:	4a95      	ldr	r2, [pc, #596]	; (800a1b0 <UART_SetConfig+0x6f4>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f64:	4498      	add	r8, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	469b      	mov	fp, r3
 8009f6a:	f04f 0c00 	mov.w	ip, #0
 8009f6e:	46d9      	mov	r9, fp
 8009f70:	46e2      	mov	sl, ip
 8009f72:	eb19 0309 	adds.w	r3, r9, r9
 8009f76:	eb4a 040a 	adc.w	r4, sl, sl
 8009f7a:	4699      	mov	r9, r3
 8009f7c:	46a2      	mov	sl, r4
 8009f7e:	eb19 090b 	adds.w	r9, r9, fp
 8009f82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f86:	f04f 0100 	mov.w	r1, #0
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f9a:	4689      	mov	r9, r1
 8009f9c:	4692      	mov	sl, r2
 8009f9e:	eb1b 0509 	adds.w	r5, fp, r9
 8009fa2:	eb4c 060a 	adc.w	r6, ip, sl
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	4619      	mov	r1, r3
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	f04f 0400 	mov.w	r4, #0
 8009fb8:	0094      	lsls	r4, r2, #2
 8009fba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fbe:	008b      	lsls	r3, r1, #2
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4623      	mov	r3, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	f7f6 fe6e 	bl	8000ca8 <__aeabi_uldivmod>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4b77      	ldr	r3, [pc, #476]	; (800a1b0 <UART_SetConfig+0x6f4>)
 8009fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd8:	095b      	lsrs	r3, r3, #5
 8009fda:	2164      	movs	r1, #100	; 0x64
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	3332      	adds	r3, #50	; 0x32
 8009fe6:	4a72      	ldr	r2, [pc, #456]	; (800a1b0 <UART_SetConfig+0x6f4>)
 8009fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fec:	095b      	lsrs	r3, r3, #5
 8009fee:	f003 020f 	and.w	r2, r3, #15
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4442      	add	r2, r8
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	e0d0      	b.n	800a19e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ffc:	f7fe ff36 	bl	8008e6c <HAL_RCC_GetPCLK1Freq>
 800a000:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	469a      	mov	sl, r3
 800a006:	f04f 0b00 	mov.w	fp, #0
 800a00a:	46d0      	mov	r8, sl
 800a00c:	46d9      	mov	r9, fp
 800a00e:	eb18 0308 	adds.w	r3, r8, r8
 800a012:	eb49 0409 	adc.w	r4, r9, r9
 800a016:	4698      	mov	r8, r3
 800a018:	46a1      	mov	r9, r4
 800a01a:	eb18 080a 	adds.w	r8, r8, sl
 800a01e:	eb49 090b 	adc.w	r9, r9, fp
 800a022:	f04f 0100 	mov.w	r1, #0
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a02e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a032:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a036:	4688      	mov	r8, r1
 800a038:	4691      	mov	r9, r2
 800a03a:	eb1a 0508 	adds.w	r5, sl, r8
 800a03e:	eb4b 0609 	adc.w	r6, fp, r9
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4619      	mov	r1, r3
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	f04f 0400 	mov.w	r4, #0
 800a054:	0094      	lsls	r4, r2, #2
 800a056:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a05a:	008b      	lsls	r3, r1, #2
 800a05c:	461a      	mov	r2, r3
 800a05e:	4623      	mov	r3, r4
 800a060:	4628      	mov	r0, r5
 800a062:	4631      	mov	r1, r6
 800a064:	f7f6 fe20 	bl	8000ca8 <__aeabi_uldivmod>
 800a068:	4603      	mov	r3, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	461a      	mov	r2, r3
 800a06e:	4b50      	ldr	r3, [pc, #320]	; (800a1b0 <UART_SetConfig+0x6f4>)
 800a070:	fba3 2302 	umull	r2, r3, r3, r2
 800a074:	095b      	lsrs	r3, r3, #5
 800a076:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	469b      	mov	fp, r3
 800a07e:	f04f 0c00 	mov.w	ip, #0
 800a082:	46d9      	mov	r9, fp
 800a084:	46e2      	mov	sl, ip
 800a086:	eb19 0309 	adds.w	r3, r9, r9
 800a08a:	eb4a 040a 	adc.w	r4, sl, sl
 800a08e:	4699      	mov	r9, r3
 800a090:	46a2      	mov	sl, r4
 800a092:	eb19 090b 	adds.w	r9, r9, fp
 800a096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a09a:	f04f 0100 	mov.w	r1, #0
 800a09e:	f04f 0200 	mov.w	r2, #0
 800a0a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	4692      	mov	sl, r2
 800a0b2:	eb1b 0509 	adds.w	r5, fp, r9
 800a0b6:	eb4c 060a 	adc.w	r6, ip, sl
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f04f 0200 	mov.w	r2, #0
 800a0c4:	f04f 0300 	mov.w	r3, #0
 800a0c8:	f04f 0400 	mov.w	r4, #0
 800a0cc:	0094      	lsls	r4, r2, #2
 800a0ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0d2:	008b      	lsls	r3, r1, #2
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	4631      	mov	r1, r6
 800a0dc:	f7f6 fde4 	bl	8000ca8 <__aeabi_uldivmod>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4b32      	ldr	r3, [pc, #200]	; (800a1b0 <UART_SetConfig+0x6f4>)
 800a0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0ec:	095b      	lsrs	r3, r3, #5
 800a0ee:	2164      	movs	r1, #100	; 0x64
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	3332      	adds	r3, #50	; 0x32
 800a0fa:	4a2d      	ldr	r2, [pc, #180]	; (800a1b0 <UART_SetConfig+0x6f4>)
 800a0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a106:	4498      	add	r8, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	469b      	mov	fp, r3
 800a10c:	f04f 0c00 	mov.w	ip, #0
 800a110:	46d9      	mov	r9, fp
 800a112:	46e2      	mov	sl, ip
 800a114:	eb19 0309 	adds.w	r3, r9, r9
 800a118:	eb4a 040a 	adc.w	r4, sl, sl
 800a11c:	4699      	mov	r9, r3
 800a11e:	46a2      	mov	sl, r4
 800a120:	eb19 090b 	adds.w	r9, r9, fp
 800a124:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a128:	f04f 0100 	mov.w	r1, #0
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a134:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a138:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a13c:	4689      	mov	r9, r1
 800a13e:	4692      	mov	sl, r2
 800a140:	eb1b 0509 	adds.w	r5, fp, r9
 800a144:	eb4c 060a 	adc.w	r6, ip, sl
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	4619      	mov	r1, r3
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	f04f 0400 	mov.w	r4, #0
 800a15a:	0094      	lsls	r4, r2, #2
 800a15c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a160:	008b      	lsls	r3, r1, #2
 800a162:	461a      	mov	r2, r3
 800a164:	4623      	mov	r3, r4
 800a166:	4628      	mov	r0, r5
 800a168:	4631      	mov	r1, r6
 800a16a:	f7f6 fd9d 	bl	8000ca8 <__aeabi_uldivmod>
 800a16e:	4603      	mov	r3, r0
 800a170:	460c      	mov	r4, r1
 800a172:	461a      	mov	r2, r3
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <UART_SetConfig+0x6f4>)
 800a176:	fba3 1302 	umull	r1, r3, r3, r2
 800a17a:	095b      	lsrs	r3, r3, #5
 800a17c:	2164      	movs	r1, #100	; 0x64
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	011b      	lsls	r3, r3, #4
 800a186:	3332      	adds	r3, #50	; 0x32
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <UART_SetConfig+0x6f4>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	095b      	lsrs	r3, r3, #5
 800a190:	f003 020f 	and.w	r2, r3, #15
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4442      	add	r2, r8
 800a19a:	609a      	str	r2, [r3, #8]
}
 800a19c:	e7ff      	b.n	800a19e <UART_SetConfig+0x6e2>
 800a19e:	bf00      	nop
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a8:	40011000 	.word	0x40011000
 800a1ac:	40011400 	.word	0x40011400
 800a1b0:	51eb851f 	.word	0x51eb851f

0800a1b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	f107 001c 	add.w	r0, r7, #28
 800a1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d122      	bne.n	800a212 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d105      	bne.n	800a206 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 fa7c 	bl	800b704 <USB_CoreReset>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e01a      	b.n	800a248 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f001 fa70 	bl	800b704 <USB_CoreReset>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	639a      	str	r2, [r3, #56]	; 0x38
 800a23a:	e005      	b.n	800a248 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d10b      	bne.n	800a266 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f043 0206 	orr.w	r2, r3, #6
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f043 0220 	orr.w	r2, r3, #32
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a272:	b004      	add	sp, #16
 800a274:	4770      	bx	lr
	...

0800a278 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d165      	bne.n	800a358 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4a41      	ldr	r2, [pc, #260]	; (800a394 <USB_SetTurnaroundTime+0x11c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d906      	bls.n	800a2a2 <USB_SetTurnaroundTime+0x2a>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4a40      	ldr	r2, [pc, #256]	; (800a398 <USB_SetTurnaroundTime+0x120>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d802      	bhi.n	800a2a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a29c:	230f      	movs	r3, #15
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e062      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4a3c      	ldr	r2, [pc, #240]	; (800a398 <USB_SetTurnaroundTime+0x120>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d906      	bls.n	800a2b8 <USB_SetTurnaroundTime+0x40>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4a3b      	ldr	r2, [pc, #236]	; (800a39c <USB_SetTurnaroundTime+0x124>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d802      	bhi.n	800a2b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a2b2:	230e      	movs	r3, #14
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	e057      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	4a38      	ldr	r2, [pc, #224]	; (800a39c <USB_SetTurnaroundTime+0x124>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d906      	bls.n	800a2ce <USB_SetTurnaroundTime+0x56>
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4a37      	ldr	r2, [pc, #220]	; (800a3a0 <USB_SetTurnaroundTime+0x128>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d802      	bhi.n	800a2ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a2c8:	230d      	movs	r3, #13
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e04c      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	4a33      	ldr	r2, [pc, #204]	; (800a3a0 <USB_SetTurnaroundTime+0x128>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d906      	bls.n	800a2e4 <USB_SetTurnaroundTime+0x6c>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4a32      	ldr	r2, [pc, #200]	; (800a3a4 <USB_SetTurnaroundTime+0x12c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d802      	bhi.n	800a2e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a2de:	230c      	movs	r3, #12
 800a2e0:	617b      	str	r3, [r7, #20]
 800a2e2:	e041      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	4a2f      	ldr	r2, [pc, #188]	; (800a3a4 <USB_SetTurnaroundTime+0x12c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d906      	bls.n	800a2fa <USB_SetTurnaroundTime+0x82>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	4a2e      	ldr	r2, [pc, #184]	; (800a3a8 <USB_SetTurnaroundTime+0x130>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d802      	bhi.n	800a2fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a2f4:	230b      	movs	r3, #11
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e036      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4a2a      	ldr	r2, [pc, #168]	; (800a3a8 <USB_SetTurnaroundTime+0x130>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d906      	bls.n	800a310 <USB_SetTurnaroundTime+0x98>
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4a29      	ldr	r2, [pc, #164]	; (800a3ac <USB_SetTurnaroundTime+0x134>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d802      	bhi.n	800a310 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a30a:	230a      	movs	r3, #10
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	e02b      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4a26      	ldr	r2, [pc, #152]	; (800a3ac <USB_SetTurnaroundTime+0x134>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d906      	bls.n	800a326 <USB_SetTurnaroundTime+0xae>
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4a25      	ldr	r2, [pc, #148]	; (800a3b0 <USB_SetTurnaroundTime+0x138>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d802      	bhi.n	800a326 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a320:	2309      	movs	r3, #9
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e020      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4a21      	ldr	r2, [pc, #132]	; (800a3b0 <USB_SetTurnaroundTime+0x138>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d906      	bls.n	800a33c <USB_SetTurnaroundTime+0xc4>
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <USB_SetTurnaroundTime+0x13c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d802      	bhi.n	800a33c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a336:	2308      	movs	r3, #8
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	e015      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <USB_SetTurnaroundTime+0x13c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d906      	bls.n	800a352 <USB_SetTurnaroundTime+0xda>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4a1c      	ldr	r2, [pc, #112]	; (800a3b8 <USB_SetTurnaroundTime+0x140>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d802      	bhi.n	800a352 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a34c:	2307      	movs	r3, #7
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	e00a      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a352:	2306      	movs	r3, #6
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	e007      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a35e:	2309      	movs	r3, #9
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	e001      	b.n	800a368 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a364:	2309      	movs	r3, #9
 800a366:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	029b      	lsls	r3, r3, #10
 800a37c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a380:	431a      	orrs	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	00d8acbf 	.word	0x00d8acbf
 800a398:	00e4e1bf 	.word	0x00e4e1bf
 800a39c:	00f423ff 	.word	0x00f423ff
 800a3a0:	0106737f 	.word	0x0106737f
 800a3a4:	011a499f 	.word	0x011a499f
 800a3a8:	01312cff 	.word	0x01312cff
 800a3ac:	014ca43f 	.word	0x014ca43f
 800a3b0:	016e35ff 	.word	0x016e35ff
 800a3b4:	01a6ab1f 	.word	0x01a6ab1f
 800a3b8:	01e847ff 	.word	0x01e847ff

0800a3bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f043 0201 	orr.w	r2, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f023 0201 	bic.w	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d106      	bne.n	800a42c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	e00b      	b.n	800a444 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60da      	str	r2, [r3, #12]
 800a43e:	e001      	b.n	800a444 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e003      	b.n	800a44c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a444:	2032      	movs	r0, #50	; 0x32
 800a446:	f7fc f911 	bl	800666c <HAL_Delay>

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a454:	b084      	sub	sp, #16
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a46e:	2300      	movs	r3, #0
 800a470:	613b      	str	r3, [r7, #16]
 800a472:	e009      	b.n	800a488 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	3340      	adds	r3, #64	; 0x40
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	3301      	adds	r3, #1
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2b0e      	cmp	r3, #14
 800a48c:	d9f2      	bls.n	800a474 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d112      	bne.n	800a4ba <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
 800a4b8:	e00b      	b.n	800a4d2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	680b      	ldr	r3, [r1, #0]
 800a4f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d10c      	bne.n	800a512 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d104      	bne.n	800a508 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4fe:	2100      	movs	r1, #0
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f961 	bl	800a7c8 <USB_SetDevSpeed>
 800a506:	e008      	b.n	800a51a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a508:	2101      	movs	r1, #1
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f95c 	bl	800a7c8 <USB_SetDevSpeed>
 800a510:	e003      	b.n	800a51a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a512:	2103      	movs	r1, #3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f957 	bl	800a7c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a51a:	2110      	movs	r1, #16
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f90b 	bl	800a738 <USB_FlushTxFifo>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f929 	bl	800a784 <USB_FlushRxFifo>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a542:	461a      	mov	r2, r3
 800a544:	2300      	movs	r3, #0
 800a546:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54e:	461a      	mov	r2, r3
 800a550:	2300      	movs	r3, #0
 800a552:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55a:	461a      	mov	r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a560:	2300      	movs	r3, #0
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	e043      	b.n	800a5ee <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a57c:	d118      	bne.n	800a5b0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	461a      	mov	r2, r3
 800a592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	e013      	b.n	800a5c2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	e008      	b.n	800a5c2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5bc:	461a      	mov	r2, r3
 800a5be:	2300      	movs	r3, #0
 800a5c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3b7      	bcc.n	800a566 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	e043      	b.n	800a684 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a60e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a612:	d118      	bne.n	800a646 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a626:	461a      	mov	r2, r3
 800a628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	e013      	b.n	800a658 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63c:	461a      	mov	r2, r3
 800a63e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	e008      	b.n	800a658 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a652:	461a      	mov	r2, r3
 800a654:	2300      	movs	r3, #0
 800a656:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	461a      	mov	r2, r3
 800a666:	2300      	movs	r3, #0
 800a668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a676:	461a      	mov	r2, r3
 800a678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a67c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3301      	adds	r3, #1
 800a682:	613b      	str	r3, [r7, #16]
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d3b7      	bcc.n	800a5fc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a69a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a69e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d111      	bne.n	800a6ca <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4b20      	ldr	r3, [pc, #128]	; (800a730 <USB_DevInit+0x2dc>)
 800a6b0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c4:	f043 0303 	orr.w	r3, r3, #3
 800a6c8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a6d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	f043 0210 	orr.w	r2, r3, #16
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	4b11      	ldr	r3, [pc, #68]	; (800a734 <USB_DevInit+0x2e0>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	f043 0208 	orr.w	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d107      	bne.n	800a71e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a716:	f043 0304 	orr.w	r3, r3, #4
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a72a:	b004      	add	sp, #16
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	00800100 	.word	0x00800100
 800a734:	803c3800 	.word	0x803c3800

0800a738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	019b      	lsls	r3, r3, #6
 800a74a:	f043 0220 	orr.w	r2, r3, #32
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3301      	adds	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4a09      	ldr	r2, [pc, #36]	; (800a780 <USB_FlushTxFifo+0x48>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d901      	bls.n	800a764 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e006      	b.n	800a772 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b20      	cmp	r3, #32
 800a76e:	d0f0      	beq.n	800a752 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	00030d40 	.word	0x00030d40

0800a784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2210      	movs	r2, #16
 800a794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <USB_FlushRxFifo+0x40>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d901      	bls.n	800a7a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e006      	b.n	800a7b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d0f0      	beq.n	800a796 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	00030d40 	.word	0x00030d40

0800a7c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	68f9      	ldr	r1, [r7, #12]
 800a7e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b087      	sub	sp, #28
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 0306 	and.w	r3, r3, #6
 800a812:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]
 800a81e:	e00a      	b.n	800a836 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d002      	beq.n	800a82c <USB_GetDevSpeed+0x32>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b06      	cmp	r3, #6
 800a82a:	d102      	bne.n	800a832 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a82c:	2302      	movs	r3, #2
 800a82e:	75fb      	strb	r3, [r7, #23]
 800a830:	e001      	b.n	800a836 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a832:	230f      	movs	r3, #15
 800a834:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d13a      	bne.n	800a8d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a866:	69da      	ldr	r2, [r3, #28]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	2101      	movs	r1, #1
 800a872:	fa01 f303 	lsl.w	r3, r1, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	68f9      	ldr	r1, [r7, #12]
 800a87a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a87e:	4313      	orrs	r3, r2
 800a880:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d155      	bne.n	800a944 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	78db      	ldrb	r3, [r3, #3]
 800a8b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	059b      	lsls	r3, r3, #22
 800a8ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	0151      	lsls	r1, r2, #5
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	440a      	add	r2, r1
 800a8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	e036      	b.n	800a944 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8dc:	69da      	ldr	r2, [r3, #28]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ec:	041b      	lsls	r3, r3, #16
 800a8ee:	68f9      	ldr	r1, [r7, #12]
 800a8f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d11a      	bne.n	800a944 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a92a:	430b      	orrs	r3, r1
 800a92c:	4313      	orrs	r3, r2
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	0151      	lsls	r1, r2, #5
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	440a      	add	r2, r1
 800a936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a93e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a942:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
	...

0800a954 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d135      	bne.n	800a9dc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	2101      	movs	r1, #1
 800a982:	fa01 f303 	lsl.w	r3, r1, r3
 800a986:	b29b      	uxth	r3, r3
 800a988:	43db      	mvns	r3, r3
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a990:	4013      	ands	r3, r2
 800a992:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	69da      	ldr	r2, [r3, #28]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	0159      	lsls	r1, r3, #5
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	440b      	add	r3, r1
 800a9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4b1f      	ldr	r3, [pc, #124]	; (800aa54 <USB_DeactivateEndpoint+0x100>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	600b      	str	r3, [r1, #0]
 800a9da:	e034      	b.n	800aa46 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 030f 	and.w	r3, r3, #15
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	69da      	ldr	r2, [r3, #28]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	2101      	movs	r1, #1
 800aa12:	fa01 f303 	lsl.w	r3, r1, r3
 800aa16:	041b      	lsls	r3, r3, #16
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa20:	4013      	ands	r3, r2
 800aa22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	0159      	lsls	r1, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	440b      	add	r3, r1
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <USB_DeactivateEndpoint+0x104>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	ec337800 	.word	0xec337800
 800aa58:	eff37800 	.word	0xeff37800

0800aa5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08a      	sub	sp, #40	; 0x28
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	f040 815c 	bne.w	800ad36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d132      	bne.n	800aaec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aaa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aaa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	015a      	lsls	r2, r3, #5
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	4413      	add	r3, r2
 800aab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	69ba      	ldr	r2, [r7, #24]
 800aaba:	0151      	lsls	r1, r2, #5
 800aabc:	69fa      	ldr	r2, [r7, #28]
 800aabe:	440a      	add	r2, r1
 800aac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	015a      	lsls	r2, r3, #5
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	4413      	add	r3, r2
 800aad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	0151      	lsls	r1, r2, #5
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	440a      	add	r2, r1
 800aae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae4:	0cdb      	lsrs	r3, r3, #19
 800aae6:	04db      	lsls	r3, r3, #19
 800aae8:	6113      	str	r3, [r2, #16]
 800aaea:	e074      	b.n	800abd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	0151      	lsls	r1, r2, #5
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	440a      	add	r2, r1
 800ab02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab06:	0cdb      	lsrs	r3, r3, #19
 800ab08:	04db      	lsls	r3, r3, #19
 800ab0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	0151      	lsls	r1, r2, #5
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	440a      	add	r2, r1
 800ab22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6959      	ldr	r1, [r3, #20]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	440b      	add	r3, r1
 800ab48:	1e59      	subs	r1, r3, #1
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab52:	04d9      	lsls	r1, r3, #19
 800ab54:	4b9d      	ldr	r3, [pc, #628]	; (800adcc <USB_EPStartXfer+0x370>)
 800ab56:	400b      	ands	r3, r1
 800ab58:	69b9      	ldr	r1, [r7, #24]
 800ab5a:	0148      	lsls	r0, r1, #5
 800ab5c:	69f9      	ldr	r1, [r7, #28]
 800ab5e:	4401      	add	r1, r0
 800ab60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab64:	4313      	orrs	r3, r2
 800ab66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab7e:	69b9      	ldr	r1, [r7, #24]
 800ab80:	0148      	lsls	r0, r1, #5
 800ab82:	69f9      	ldr	r1, [r7, #28]
 800ab84:	4401      	add	r1, r0
 800ab86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	78db      	ldrb	r3, [r3, #3]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d11f      	bne.n	800abd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800abb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d14b      	bne.n	800ac74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d009      	beq.n	800abf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	461a      	mov	r2, r3
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	78db      	ldrb	r3, [r3, #3]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d128      	bne.n	800ac52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d110      	bne.n	800ac32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	0151      	lsls	r1, r2, #5
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	440a      	add	r2, r1
 800ac26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e00f      	b.n	800ac52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	0151      	lsls	r1, r2, #5
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	440a      	add	r2, r1
 800ac48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	e12f      	b.n	800aed4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	0151      	lsls	r1, r2, #5
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	440a      	add	r2, r1
 800ac8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	78db      	ldrb	r3, [r3, #3]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d015      	beq.n	800acc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8117 	beq.w	800aed4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	2101      	movs	r1, #1
 800acb8:	fa01 f303 	lsl.w	r3, r1, r3
 800acbc:	69f9      	ldr	r1, [r7, #28]
 800acbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acc2:	4313      	orrs	r3, r2
 800acc4:	634b      	str	r3, [r1, #52]	; 0x34
 800acc6:	e105      	b.n	800aed4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d110      	bne.n	800acfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	0151      	lsls	r1, r2, #5
 800acea:	69fa      	ldr	r2, [r7, #28]
 800acec:	440a      	add	r2, r1
 800acee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	e00f      	b.n	800ad1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	015a      	lsls	r2, r3, #5
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	69ba      	ldr	r2, [r7, #24]
 800ad0a:	0151      	lsls	r1, r2, #5
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	440a      	add	r2, r1
 800ad10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	68d9      	ldr	r1, [r3, #12]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	781a      	ldrb	r2, [r3, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	b298      	uxth	r0, r3
 800ad28:	79fb      	ldrb	r3, [r7, #7]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 fa2b 	bl	800b18a <USB_WritePacket>
 800ad34:	e0ce      	b.n	800aed4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	0151      	lsls	r1, r2, #5
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	440a      	add	r2, r1
 800ad4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad50:	0cdb      	lsrs	r3, r3, #19
 800ad52:	04db      	lsls	r3, r3, #19
 800ad54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d126      	bne.n	800add0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad98:	69b9      	ldr	r1, [r7, #24]
 800ad9a:	0148      	lsls	r0, r1, #5
 800ad9c:	69f9      	ldr	r1, [r7, #28]
 800ad9e:	4401      	add	r1, r0
 800ada0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ada4:	4313      	orrs	r3, r2
 800ada6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adc6:	6113      	str	r3, [r2, #16]
 800adc8:	e036      	b.n	800ae38 <USB_EPStartXfer+0x3dc>
 800adca:	bf00      	nop
 800adcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	695a      	ldr	r2, [r3, #20]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	4413      	add	r3, r2
 800adda:	1e5a      	subs	r2, r3, #1
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf2:	691a      	ldr	r2, [r3, #16]
 800adf4:	8afb      	ldrh	r3, [r7, #22]
 800adf6:	04d9      	lsls	r1, r3, #19
 800adf8:	4b39      	ldr	r3, [pc, #228]	; (800aee0 <USB_EPStartXfer+0x484>)
 800adfa:	400b      	ands	r3, r1
 800adfc:	69b9      	ldr	r1, [r7, #24]
 800adfe:	0148      	lsls	r0, r1, #5
 800ae00:	69f9      	ldr	r1, [r7, #28]
 800ae02:	4401      	add	r1, r0
 800ae04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae18:	691a      	ldr	r2, [r3, #16]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	8af9      	ldrh	r1, [r7, #22]
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae28:	69b9      	ldr	r1, [r7, #24]
 800ae2a:	0148      	lsls	r0, r1, #5
 800ae2c:	69f9      	ldr	r1, [r7, #28]
 800ae2e:	4401      	add	r1, r0
 800ae30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae34:	4313      	orrs	r3, r2
 800ae36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d10d      	bne.n	800ae5a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	68d9      	ldr	r1, [r3, #12]
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae56:	460a      	mov	r2, r1
 800ae58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	78db      	ldrb	r3, [r3, #3]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d128      	bne.n	800aeb4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d110      	bne.n	800ae94 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	0151      	lsls	r1, r2, #5
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	440a      	add	r2, r1
 800ae88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	e00f      	b.n	800aeb4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3720      	adds	r7, #32
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	1ff80000 	.word	0x1ff80000

0800aee4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	2b01      	cmp	r3, #1
 800af02:	f040 80cd 	bne.w	800b0a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d132      	bne.n	800af74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	0151      	lsls	r1, r2, #5
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	440a      	add	r2, r1
 800af24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	440a      	add	r2, r1
 800af48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	0151      	lsls	r1, r2, #5
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	440a      	add	r2, r1
 800af68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6c:	0cdb      	lsrs	r3, r3, #19
 800af6e:	04db      	lsls	r3, r3, #19
 800af70:	6113      	str	r3, [r2, #16]
 800af72:	e04e      	b.n	800b012 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af8e:	0cdb      	lsrs	r3, r3, #19
 800af90:	04db      	lsls	r3, r3, #19
 800af92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	695a      	ldr	r2, [r3, #20]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	0151      	lsls	r1, r2, #5
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	440a      	add	r2, r1
 800afe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b002:	6939      	ldr	r1, [r7, #16]
 800b004:	0148      	lsls	r0, r1, #5
 800b006:	6979      	ldr	r1, [r7, #20]
 800b008:	4401      	add	r1, r0
 800b00a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b00e:	4313      	orrs	r3, r2
 800b010:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d11e      	bne.n	800b056 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02c:	461a      	mov	r2, r3
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	0151      	lsls	r1, r2, #5
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	440a      	add	r2, r1
 800b04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b04e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	e092      	b.n	800b17c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	0151      	lsls	r1, r2, #5
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	440a      	add	r2, r1
 800b06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b070:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b074:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d07e      	beq.n	800b17c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f003 030f 	and.w	r3, r3, #15
 800b08e:	2101      	movs	r1, #1
 800b090:	fa01 f303 	lsl.w	r3, r1, r3
 800b094:	6979      	ldr	r1, [r7, #20]
 800b096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b09a:	4313      	orrs	r3, r2
 800b09c:	634b      	str	r3, [r1, #52]	; 0x34
 800b09e:	e06d      	b.n	800b17c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ba:	0cdb      	lsrs	r3, r3, #19
 800b0bc:	04db      	lsls	r3, r3, #19
 800b0be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b10e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b112:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b12a:	6939      	ldr	r1, [r7, #16]
 800b12c:	0148      	lsls	r0, r1, #5
 800b12e:	6979      	ldr	r1, [r7, #20]
 800b130:	4401      	add	r1, r0
 800b132:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b136:	4313      	orrs	r3, r2
 800b138:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10d      	bne.n	800b15c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d009      	beq.n	800b15c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	68d9      	ldr	r1, [r3, #12]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	015a      	lsls	r2, r3, #5
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	4413      	add	r3, r2
 800b154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b158:	460a      	mov	r2, r1
 800b15a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	0151      	lsls	r1, r2, #5
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	440a      	add	r2, r1
 800b172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b17a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b089      	sub	sp, #36	; 0x24
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	4611      	mov	r1, r2
 800b196:	461a      	mov	r2, r3
 800b198:	460b      	mov	r3, r1
 800b19a:	71fb      	strb	r3, [r7, #7]
 800b19c:	4613      	mov	r3, r2
 800b19e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b1a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d11a      	bne.n	800b1e6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1b0:	88bb      	ldrh	r3, [r7, #4]
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	089b      	lsrs	r3, r3, #2
 800b1b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	61bb      	str	r3, [r7, #24]
 800b1bc:	e00f      	b.n	800b1de <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	031a      	lsls	r2, r3, #12
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d3eb      	bcc.n	800b1be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3724      	adds	r7, #36	; 0x24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b089      	sub	sp, #36	; 0x24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b20a:	88fb      	ldrh	r3, [r7, #6]
 800b20c:	3303      	adds	r3, #3
 800b20e:	089b      	lsrs	r3, r3, #2
 800b210:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b212:	2300      	movs	r3, #0
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e00b      	b.n	800b230 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	601a      	str	r2, [r3, #0]
    pDest++;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3304      	adds	r3, #4
 800b228:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	3301      	adds	r3, #1
 800b22e:	61bb      	str	r3, [r7, #24]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	429a      	cmp	r2, r3
 800b236:	d3ef      	bcc.n	800b218 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b238:	69fb      	ldr	r3, [r7, #28]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3724      	adds	r7, #36	; 0x24
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b246:	b480      	push	{r7}
 800b248:	b085      	sub	sp, #20
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	785b      	ldrb	r3, [r3, #1]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d12c      	bne.n	800b2bc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	db12      	blt.n	800b29a <USB_EPSetStall+0x54>
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00f      	beq.n	800b29a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b298:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	015a      	lsls	r2, r3, #5
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	0151      	lsls	r1, r2, #5
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	440a      	add	r2, r1
 800b2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2b8:	6013      	str	r3, [r2, #0]
 800b2ba:	e02b      	b.n	800b314 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	db12      	blt.n	800b2f4 <USB_EPSetStall+0xae>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00f      	beq.n	800b2f4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	0151      	lsls	r1, r2, #5
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	440a      	add	r2, r1
 800b2ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2f2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	0151      	lsls	r1, r2, #5
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	440a      	add	r2, r1
 800b30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b30e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d128      	bne.n	800b390 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	0151      	lsls	r1, r2, #5
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	440a      	add	r2, r1
 800b354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	78db      	ldrb	r3, [r3, #3]
 800b362:	2b03      	cmp	r3, #3
 800b364:	d003      	beq.n	800b36e <USB_EPClearStall+0x4c>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	78db      	ldrb	r3, [r3, #3]
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d138      	bne.n	800b3e0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	e027      	b.n	800b3e0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	0151      	lsls	r1, r2, #5
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	440a      	add	r2, r1
 800b3a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	78db      	ldrb	r3, [r3, #3]
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d003      	beq.n	800b3c0 <USB_EPClearStall+0x9e>
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	78db      	ldrb	r3, [r3, #3]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d10f      	bne.n	800b3e0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3de:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b40c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b410:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b422:	68f9      	ldr	r1, [r7, #12]
 800b424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b428:	4313      	orrs	r3, r2
 800b42a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b454:	f023 0302 	bic.w	r3, r3, #2
 800b458:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b45a:	2003      	movs	r0, #3
 800b45c:	f7fb f906 	bl	800666c <HAL_Delay>

  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b484:	f043 0302 	orr.w	r3, r3, #2
 800b488:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b48a:	2003      	movs	r0, #3
 800b48c:	f7fb f8ee 	bl	800666c <HAL_Delay>

  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b085      	sub	sp, #20
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	0c1b      	lsrs	r3, r3, #16
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	4013      	ands	r3, r2
 800b516:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	b29b      	uxth	r3, r3
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	4013      	ands	r3, r2
 800b554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b556:	68bb      	ldr	r3, [r7, #8]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b586:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	f003 030f 	and.w	r3, r3, #15
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
 800b594:	01db      	lsls	r3, r3, #7
 800b596:	b2db      	uxtb	r3, r3
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b5fa:	f023 0307 	bic.w	r3, r3, #7
 800b5fe:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f003 0306 	and.w	r3, r3, #6
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d109      	bne.n	800b624 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b61e:	f043 0303 	orr.w	r3, r3, #3
 800b622:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b636:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	460b      	mov	r3, r1
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	333c      	adds	r3, #60	; 0x3c
 800b65e:	3304      	adds	r3, #4
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	4a26      	ldr	r2, [pc, #152]	; (800b700 <USB_EP0_OutStart+0xb8>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d90a      	bls.n	800b682 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b67c:	d101      	bne.n	800b682 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	e037      	b.n	800b6f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b688:	461a      	mov	r2, r3
 800b68a:	2300      	movs	r3, #0
 800b68c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b69c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6b0:	f043 0318 	orr.w	r3, r3, #24
 800b6b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b6c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d10f      	bne.n	800b6f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b6ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	4f54300a 	.word	0x4f54300a

0800b704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4a13      	ldr	r2, [pc, #76]	; (800b768 <USB_CoreReset+0x64>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d901      	bls.n	800b722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e01b      	b.n	800b75a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	daf2      	bge.n	800b710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f043 0201 	orr.w	r2, r3, #1
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4a09      	ldr	r2, [pc, #36]	; (800b768 <USB_CoreReset+0x64>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d901      	bls.n	800b74c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e006      	b.n	800b75a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b01      	cmp	r3, #1
 800b756:	d0f0      	beq.n	800b73a <USB_CoreReset+0x36>

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	00030d40 	.word	0x00030d40

0800b76c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7c1b      	ldrb	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d115      	bne.n	800b7b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b784:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b788:	2202      	movs	r2, #2
 800b78a:	2181      	movs	r1, #129	; 0x81
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f004 fe5a 	bl	8010446 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b79c:	2202      	movs	r2, #2
 800b79e:	2101      	movs	r1, #1
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f004 fe50 	bl	8010446 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b7ae:	e012      	b.n	800b7d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7b0:	2340      	movs	r3, #64	; 0x40
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	2181      	movs	r1, #129	; 0x81
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f004 fe45 	bl	8010446 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7c2:	2340      	movs	r3, #64	; 0x40
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f004 fe3c 	bl	8010446 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7d6:	2308      	movs	r3, #8
 800b7d8:	2203      	movs	r2, #3
 800b7da:	2182      	movs	r1, #130	; 0x82
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f004 fe32 	bl	8010446 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b7e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b7ec:	f004 ffa8 	bl	8010740 <malloc>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b804:	2301      	movs	r3, #1
 800b806:	73fb      	strb	r3, [r7, #15]
 800b808:	e026      	b.n	800b858 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b810:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	7c1b      	ldrb	r3, [r3, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d109      	bne.n	800b848 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b83a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b83e:	2101      	movs	r1, #1
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f004 fef1 	bl	8010628 <USBD_LL_PrepareReceive>
 800b846:	e007      	b.n	800b858 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b84e:	2340      	movs	r3, #64	; 0x40
 800b850:	2101      	movs	r1, #1
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f004 fee8 	bl	8010628 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b872:	2181      	movs	r1, #129	; 0x81
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f004 fe0c 	bl	8010492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b880:	2101      	movs	r1, #1
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f004 fe05 	bl	8010492 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b890:	2182      	movs	r1, #130	; 0x82
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f004 fdfd 	bl	8010492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00e      	beq.n	800b8c6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f004 ff49 	bl	8010750 <free>
    pdev->pClassData = NULL;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d039      	beq.n	800b96e <USBD_CDC_Setup+0x9e>
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d17c      	bne.n	800b9f8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	88db      	ldrh	r3, [r3, #6]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d029      	beq.n	800b95a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	b25b      	sxtb	r3, r3
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	da11      	bge.n	800b934 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b91c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	88d2      	ldrh	r2, [r2, #6]
 800b922:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b924:	6939      	ldr	r1, [r7, #16]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	88db      	ldrh	r3, [r3, #6]
 800b92a:	461a      	mov	r2, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f001 f9c9 	bl	800ccc4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b932:	e068      	b.n	800ba06 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	785a      	ldrb	r2, [r3, #1]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	88db      	ldrh	r3, [r3, #6]
 800b942:	b2da      	uxtb	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b94a:	6939      	ldr	r1, [r7, #16]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	88db      	ldrh	r3, [r3, #6]
 800b950:	461a      	mov	r2, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 f9e4 	bl	800cd20 <USBD_CtlPrepareRx>
    break;
 800b958:	e055      	b.n	800ba06 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	7850      	ldrb	r0, [r2, #1]
 800b966:	2200      	movs	r2, #0
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	4798      	blx	r3
    break;
 800b96c:	e04b      	b.n	800ba06 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	785b      	ldrb	r3, [r3, #1]
 800b972:	2b0a      	cmp	r3, #10
 800b974:	d017      	beq.n	800b9a6 <USBD_CDC_Setup+0xd6>
 800b976:	2b0b      	cmp	r3, #11
 800b978:	d029      	beq.n	800b9ce <USBD_CDC_Setup+0xfe>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d133      	bne.n	800b9e6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b984:	2b03      	cmp	r3, #3
 800b986:	d107      	bne.n	800b998 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b988:	f107 030c 	add.w	r3, r7, #12
 800b98c:	2202      	movs	r2, #2
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 f997 	bl	800ccc4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b996:	e02e      	b.n	800b9f6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 f927 	bl	800cbee <USBD_CtlError>
			  ret = USBD_FAIL;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9a4:	e027      	b.n	800b9f6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d107      	bne.n	800b9c0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b9b0:	f107 030f 	add.w	r3, r7, #15
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f001 f983 	bl	800ccc4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b9be:	e01a      	b.n	800b9f6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 f913 	bl	800cbee <USBD_CtlError>
			  ret = USBD_FAIL;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b9cc:	e013      	b.n	800b9f6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d00d      	beq.n	800b9f4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f001 f907 	bl	800cbee <USBD_CtlError>
			  ret = USBD_FAIL;
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b9e4:	e006      	b.n	800b9f4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f001 f900 	bl	800cbee <USBD_CtlError>
      ret = USBD_FAIL;
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f2:	e000      	b.n	800b9f6 <USBD_CDC_Setup+0x126>
      break;
 800b9f4:	bf00      	nop
    }
    break;
 800b9f6:	e006      	b.n	800ba06 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f001 f8f7 	bl	800cbee <USBD_CtlError>
    ret = USBD_FAIL;
 800ba00:	2302      	movs	r3, #2
 800ba02:	75fb      	strb	r3, [r7, #23]
    break;
 800ba04:	bf00      	nop
  }

  return ret;
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ba22:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba2a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d03a      	beq.n	800baac <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	331c      	adds	r3, #28
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d029      	beq.n	800baa0 <USBD_CDC_DataIn+0x90>
 800ba4c:	78fa      	ldrb	r2, [r7, #3]
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	331c      	adds	r3, #28
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	78f9      	ldrb	r1, [r7, #3]
 800ba60:	68b8      	ldr	r0, [r7, #8]
 800ba62:	460b      	mov	r3, r1
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	1a5b      	subs	r3, r3, r1
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4403      	add	r3, r0
 800ba6c:	3344      	adds	r3, #68	; 0x44
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba74:	fb03 f301 	mul.w	r3, r3, r1
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d110      	bne.n	800baa0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ba7e:	78fa      	ldrb	r2, [r7, #3]
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	440b      	add	r3, r1
 800ba8c:	331c      	adds	r3, #28
 800ba8e:	2200      	movs	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800ba92:	78f9      	ldrb	r1, [r7, #3]
 800ba94:	2300      	movs	r3, #0
 800ba96:	2200      	movs	r2, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f004 fda2 	bl	80105e2 <USBD_LL_Transmit>
 800ba9e:	e003      	b.n	800baa8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e000      	b.n	800baae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800baac:	2302      	movs	r3, #2
  }
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	460b      	mov	r3, r1
 800bac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f004 fdcd 	bl	801066e <USBD_LL_GetRxDataSize>
 800bad4:	4602      	mov	r2, r0
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00d      	beq.n	800bb02 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bafa:	4611      	mov	r1, r2
 800bafc:	4798      	blx	r3

    return USBD_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e000      	b.n	800bb04 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bb02:	2302      	movs	r3, #2
  }
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb1a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d015      	beq.n	800bb52 <USBD_CDC_EP0_RxReady+0x46>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb2c:	2bff      	cmp	r3, #255	; 0xff
 800bb2e:	d010      	beq.n	800bb52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bb3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb46:	b292      	uxth	r2, r2
 800bb48:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	22ff      	movs	r2, #255	; 0xff
 800bb4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2243      	movs	r2, #67	; 0x43
 800bb68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bb6a:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	20000d48 	.word	0x20000d48

0800bb7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2243      	movs	r2, #67	; 0x43
 800bb88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bb8a:	4b03      	ldr	r3, [pc, #12]	; (800bb98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	20000d04 	.word	0x20000d04

0800bb9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2243      	movs	r2, #67	; 0x43
 800bba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000d8c 	.word	0x20000d8c

0800bbbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	220a      	movs	r2, #10
 800bbc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bbca:	4b03      	ldr	r3, [pc, #12]	; (800bbd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	20000cc0 	.word	0x20000cc0

0800bbdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b087      	sub	sp, #28
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	4613      	mov	r3, r2
 800bc16:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc1e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc28:	88fa      	ldrh	r2, [r7, #6]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc4e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc74:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d01c      	beq.n	800bcba <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d115      	bne.n	800bcb6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	2181      	movs	r1, #129	; 0x81
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f004 fc98 	bl	80105e2 <USBD_LL_Transmit>

      return USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e002      	b.n	800bcbc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bcba:	2302      	movs	r3, #2
  }
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d017      	beq.n	800bd0e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	7c1b      	ldrb	r3, [r3, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d109      	bne.n	800bcfa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f004 fc98 	bl	8010628 <USBD_LL_PrepareReceive>
 800bcf8:	e007      	b.n	800bd0a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd00:	2340      	movs	r3, #64	; 0x40
 800bd02:	2101      	movs	r1, #1
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f004 fc8f 	bl	8010628 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e000      	b.n	800bd10 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bd0e:	2302      	movs	r3, #2
  }
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e01a      	b.n	800bd66 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	79fa      	ldrb	r2, [r7, #7]
 800bd5c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f004 fb0a 	bl	8010378 <USBD_LL_Init>

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b085      	sub	sp, #20
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d006      	beq.n	800bd90 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]
 800bd8e:	e001      	b.n	800bd94 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bd90:	2302      	movs	r3, #2
 800bd92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f004 fb30 	bl	8010410 <USBD_LL_Start>

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800bddc:	2302      	movs	r3, #2
 800bdde:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00c      	beq.n	800be04 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800be04:	7bfb      	ldrb	r3, [r7, #15]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	78fa      	ldrb	r2, [r7, #3]
 800be24:	4611      	mov	r1, r2
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
  return USBD_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fe94 	bl	800cb74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800be68:	f003 031f 	and.w	r3, r3, #31
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d00c      	beq.n	800be8a <USBD_LL_SetupStage+0x56>
 800be70:	2b01      	cmp	r3, #1
 800be72:	d302      	bcc.n	800be7a <USBD_LL_SetupStage+0x46>
 800be74:	2b02      	cmp	r3, #2
 800be76:	d010      	beq.n	800be9a <USBD_LL_SetupStage+0x66>
 800be78:	e017      	b.n	800beaa <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa04 	bl	800c290 <USBD_StdDevReq>
    break;
 800be88:	e01a      	b.n	800bec0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fa66 	bl	800c364 <USBD_StdItfReq>
    break;
 800be98:	e012      	b.n	800bec0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 faa4 	bl	800c3f0 <USBD_StdEPReq>
    break;
 800bea8:	e00a      	b.n	800bec0 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800beb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f004 fb09 	bl	80104d0 <USBD_LL_StallEP>
    break;
 800bebe:	bf00      	nop
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	460b      	mov	r3, r1
 800bed4:	607a      	str	r2, [r7, #4]
 800bed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d14b      	bne.n	800bf76 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bee4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800beec:	2b03      	cmp	r3, #3
 800beee:	d134      	bne.n	800bf5a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	68da      	ldr	r2, [r3, #12]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d919      	bls.n	800bf30 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	1ad2      	subs	r2, r2, r3
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d203      	bcs.n	800bf1e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	e002      	b.n	800bf24 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 ff17 	bl	800cd5c <USBD_CtlContinueRx>
 800bf2e:	e038      	b.n	800bfa2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d105      	bne.n	800bf52 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 ff14 	bl	800cd80 <USBD_CtlSendStatus>
 800bf58:	e023      	b.n	800bfa2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bf60:	2b05      	cmp	r3, #5
 800bf62:	d11e      	bne.n	800bfa2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f004 faae 	bl	80104d0 <USBD_LL_StallEP>
 800bf74:	e015      	b.n	800bfa2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00d      	beq.n	800bf9e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d108      	bne.n	800bf9e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	7afa      	ldrb	r2, [r7, #11]
 800bf96:	4611      	mov	r1, r2
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	4798      	blx	r3
 800bf9c:	e001      	b.n	800bfa2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e000      	b.n	800bfa4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d17f      	bne.n	800c0c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3314      	adds	r3, #20
 800bfc4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d15c      	bne.n	800c08a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d915      	bls.n	800c008 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	1ad2      	subs	r2, r2, r3
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	461a      	mov	r2, r3
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 fe81 	bl	800ccfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bffa:	2300      	movs	r3, #0
 800bffc:	2200      	movs	r2, #0
 800bffe:	2100      	movs	r1, #0
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f004 fb11 	bl	8010628 <USBD_LL_PrepareReceive>
 800c006:	e04e      	b.n	800c0a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	6912      	ldr	r2, [r2, #16]
 800c010:	fbb3 f1f2 	udiv	r1, r3, r2
 800c014:	fb02 f201 	mul.w	r2, r2, r1
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d11c      	bne.n	800c058 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	689a      	ldr	r2, [r3, #8]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c026:	429a      	cmp	r2, r3
 800c028:	d316      	bcc.n	800c058 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	689a      	ldr	r2, [r3, #8]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c034:	429a      	cmp	r2, r3
 800c036:	d20f      	bcs.n	800c058 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 fe5d 	bl	800ccfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c04a:	2300      	movs	r3, #0
 800c04c:	2200      	movs	r2, #0
 800c04e:	2100      	movs	r1, #0
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f004 fae9 	bl	8010628 <USBD_LL_PrepareReceive>
 800c056:	e026      	b.n	800c0a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00a      	beq.n	800c07a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d105      	bne.n	800c07a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c07a:	2180      	movs	r1, #128	; 0x80
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f004 fa27 	bl	80104d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 fe8f 	bl	800cda6 <USBD_CtlReceiveStatus>
 800c088:	e00d      	b.n	800c0a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c090:	2b04      	cmp	r3, #4
 800c092:	d004      	beq.n	800c09e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c09e:	2180      	movs	r1, #128	; 0x80
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f004 fa15 	bl	80104d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d11d      	bne.n	800c0ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7ff fe82 	bl	800bdba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c0be:	e015      	b.n	800c0ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00d      	beq.n	800c0e8 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d108      	bne.n	800c0e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	7afa      	ldrb	r2, [r7, #11]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	4798      	blx	r3
 800c0e6:	e001      	b.n	800c0ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	e000      	b.n	800c0ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0fe:	2340      	movs	r3, #64	; 0x40
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f004 f99e 	bl	8010446 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2240      	movs	r2, #64	; 0x40
 800c116:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c11a:	2340      	movs	r3, #64	; 0x40
 800c11c:	2200      	movs	r2, #0
 800c11e:	2180      	movs	r1, #128	; 0x80
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f004 f990 	bl	8010446 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2240      	movs	r2, #64	; 0x40
 800c130:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	6852      	ldr	r2, [r2, #4]
 800c166:	b2d2      	uxtb	r2, r2
 800c168:	4611      	mov	r1, r2
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	4798      	blx	r3
  }

  return USBD_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	78fa      	ldrb	r2, [r7, #3]
 800c188:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d10b      	bne.n	800c20e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d005      	beq.n	800c20e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	370c      	adds	r7, #12
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	6852      	ldr	r2, [r2, #4]
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	4611      	mov	r1, r2
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	4798      	blx	r3

  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	d004      	beq.n	800c2b4 <USBD_StdDevReq+0x24>
 800c2aa:	2b40      	cmp	r3, #64	; 0x40
 800c2ac:	d002      	beq.n	800c2b4 <USBD_StdDevReq+0x24>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d008      	beq.n	800c2c4 <USBD_StdDevReq+0x34>
 800c2b2:	e04c      	b.n	800c34e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	4798      	blx	r3
    break;
 800c2c2:	e049      	b.n	800c358 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	2b09      	cmp	r3, #9
 800c2ca:	d83a      	bhi.n	800c342 <USBD_StdDevReq+0xb2>
 800c2cc:	a201      	add	r2, pc, #4	; (adr r2, 800c2d4 <USBD_StdDevReq+0x44>)
 800c2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d2:	bf00      	nop
 800c2d4:	0800c325 	.word	0x0800c325
 800c2d8:	0800c339 	.word	0x0800c339
 800c2dc:	0800c343 	.word	0x0800c343
 800c2e0:	0800c32f 	.word	0x0800c32f
 800c2e4:	0800c343 	.word	0x0800c343
 800c2e8:	0800c307 	.word	0x0800c307
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c343 	.word	0x0800c343
 800c2f4:	0800c31b 	.word	0x0800c31b
 800c2f8:	0800c311 	.word	0x0800c311
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9d2 	bl	800c6a8 <USBD_GetDescriptor>
      break;
 800c304:	e022      	b.n	800c34c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fac7 	bl	800c89c <USBD_SetAddress>
      break;
 800c30e:	e01d      	b.n	800c34c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fb04 	bl	800c920 <USBD_SetConfig>
      break;
 800c318:	e018      	b.n	800c34c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fb8d 	bl	800ca3c <USBD_GetConfig>
      break;
 800c322:	e013      	b.n	800c34c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fbbc 	bl	800caa4 <USBD_GetStatus>
      break;
 800c32c:	e00e      	b.n	800c34c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fbea 	bl	800cb0a <USBD_SetFeature>
      break;
 800c336:	e009      	b.n	800c34c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fbf9 	bl	800cb32 <USBD_ClrFeature>
      break;
 800c340:	e004      	b.n	800c34c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fc52 	bl	800cbee <USBD_CtlError>
      break;
 800c34a:	bf00      	nop
    }
    break;
 800c34c:	e004      	b.n	800c358 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fc4c 	bl	800cbee <USBD_CtlError>
    break;
 800c356:	bf00      	nop
  }

  return ret;
 800c358:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop

0800c364 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	d003      	beq.n	800c386 <USBD_StdItfReq+0x22>
 800c37e:	2b40      	cmp	r3, #64	; 0x40
 800c380:	d001      	beq.n	800c386 <USBD_StdItfReq+0x22>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d12a      	bne.n	800c3dc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d81d      	bhi.n	800c3ce <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	889b      	ldrh	r3, [r3, #4]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d813      	bhi.n	800c3c4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	88db      	ldrh	r3, [r3, #6]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d110      	bne.n	800c3d8 <USBD_StdItfReq+0x74>
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fcdf 	bl	800cd80 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c3c2:	e009      	b.n	800c3d8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fc11 	bl	800cbee <USBD_CtlError>
      break;
 800c3cc:	e004      	b.n	800c3d8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc0c 	bl	800cbee <USBD_CtlError>
      break;
 800c3d6:	e000      	b.n	800c3da <USBD_StdItfReq+0x76>
      break;
 800c3d8:	bf00      	nop
    }
    break;
 800c3da:	e004      	b.n	800c3e6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fc05 	bl	800cbee <USBD_CtlError>
    break;
 800c3e4:	bf00      	nop
  }

  return USBD_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	889b      	ldrh	r3, [r3, #4]
 800c402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	d004      	beq.n	800c41a <USBD_StdEPReq+0x2a>
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d002      	beq.n	800c41a <USBD_StdEPReq+0x2a>
 800c414:	2b00      	cmp	r3, #0
 800c416:	d008      	beq.n	800c42a <USBD_StdEPReq+0x3a>
 800c418:	e13b      	b.n	800c692 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	4798      	blx	r3
    break;
 800c428:	e138      	b.n	800c69c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c432:	2b20      	cmp	r3, #32
 800c434:	d10a      	bne.n	800c44c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	4798      	blx	r3
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	e128      	b.n	800c69e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	785b      	ldrb	r3, [r3, #1]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d03e      	beq.n	800c4d2 <USBD_StdEPReq+0xe2>
 800c454:	2b03      	cmp	r3, #3
 800c456:	d002      	beq.n	800c45e <USBD_StdEPReq+0x6e>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d070      	beq.n	800c53e <USBD_StdEPReq+0x14e>
 800c45c:	e113      	b.n	800c686 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c464:	2b02      	cmp	r3, #2
 800c466:	d002      	beq.n	800c46e <USBD_StdEPReq+0x7e>
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d015      	beq.n	800c498 <USBD_StdEPReq+0xa8>
 800c46c:	e02b      	b.n	800c4c6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00c      	beq.n	800c48e <USBD_StdEPReq+0x9e>
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b80      	cmp	r3, #128	; 0x80
 800c478:	d009      	beq.n	800c48e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f004 f826 	bl	80104d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c484:	2180      	movs	r1, #128	; 0x80
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f004 f822 	bl	80104d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c48c:	e020      	b.n	800c4d0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fbac 	bl	800cbee <USBD_CtlError>
        break;
 800c496:	e01b      	b.n	800c4d0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	885b      	ldrh	r3, [r3, #2]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10e      	bne.n	800c4be <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <USBD_StdEPReq+0xce>
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	2b80      	cmp	r3, #128	; 0x80
 800c4aa:	d008      	beq.n	800c4be <USBD_StdEPReq+0xce>
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	88db      	ldrh	r3, [r3, #6]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d104      	bne.n	800c4be <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f004 f809 	bl	80104d0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fc5e 	bl	800cd80 <USBD_CtlSendStatus>

        break;
 800c4c4:	e004      	b.n	800c4d0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fb90 	bl	800cbee <USBD_CtlError>
        break;
 800c4ce:	bf00      	nop
      }
      break;
 800c4d0:	e0de      	b.n	800c690 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d002      	beq.n	800c4e2 <USBD_StdEPReq+0xf2>
 800c4dc:	2b03      	cmp	r3, #3
 800c4de:	d015      	beq.n	800c50c <USBD_StdEPReq+0x11c>
 800c4e0:	e026      	b.n	800c530 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00c      	beq.n	800c502 <USBD_StdEPReq+0x112>
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	2b80      	cmp	r3, #128	; 0x80
 800c4ec:	d009      	beq.n	800c502 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f003 ffec 	bl	80104d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c4f8:	2180      	movs	r1, #128	; 0x80
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f003 ffe8 	bl	80104d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c500:	e01c      	b.n	800c53c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fb72 	bl	800cbee <USBD_CtlError>
        break;
 800c50a:	e017      	b.n	800c53c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	885b      	ldrh	r3, [r3, #2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d112      	bne.n	800c53a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d004      	beq.n	800c528 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f003 fff3 	bl	801050e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fc29 	bl	800cd80 <USBD_CtlSendStatus>
        }
        break;
 800c52e:	e004      	b.n	800c53a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fb5b 	bl	800cbee <USBD_CtlError>
        break;
 800c538:	e000      	b.n	800c53c <USBD_StdEPReq+0x14c>
        break;
 800c53a:	bf00      	nop
      }
      break;
 800c53c:	e0a8      	b.n	800c690 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c544:	2b02      	cmp	r3, #2
 800c546:	d002      	beq.n	800c54e <USBD_StdEPReq+0x15e>
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d031      	beq.n	800c5b0 <USBD_StdEPReq+0x1c0>
 800c54c:	e095      	b.n	800c67a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d007      	beq.n	800c564 <USBD_StdEPReq+0x174>
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b80      	cmp	r3, #128	; 0x80
 800c558:	d004      	beq.n	800c564 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fb46 	bl	800cbee <USBD_CtlError>
          break;
 800c562:	e08f      	b.n	800c684 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	da0b      	bge.n	800c584 <USBD_StdEPReq+0x194>
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c572:	4613      	mov	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	3310      	adds	r3, #16
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	4413      	add	r3, r2
 800c580:	3304      	adds	r3, #4
 800c582:	e00a      	b.n	800c59a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c58a:	4613      	mov	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4413      	add	r3, r2
 800c59a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fb8b 	bl	800ccc4 <USBD_CtlSendData>
          break;
 800c5ae:	e069      	b.n	800c684 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c5b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	da11      	bge.n	800c5dc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	f003 020f 	and.w	r2, r3, #15
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	440b      	add	r3, r1
 800c5ca:	3318      	adds	r3, #24
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d117      	bne.n	800c602 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fb0a 	bl	800cbee <USBD_CtlError>
            break;
 800c5da:	e053      	b.n	800c684 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
 800c5de:	f003 020f 	and.w	r2, r3, #15
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	440b      	add	r3, r1
 800c5ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 faf7 	bl	800cbee <USBD_CtlError>
            break;
 800c600:	e040      	b.n	800c684 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c606:	2b00      	cmp	r3, #0
 800c608:	da0b      	bge.n	800c622 <USBD_StdEPReq+0x232>
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c610:	4613      	mov	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	3310      	adds	r3, #16
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	3304      	adds	r3, #4
 800c620:	e00a      	b.n	800c638 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	4413      	add	r3, r2
 800c638:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <USBD_StdEPReq+0x256>
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	d103      	bne.n	800c64e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	e00e      	b.n	800c66c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c64e:	7bbb      	ldrb	r3, [r7, #14]
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f003 ff7a 	bl	801054c <USBD_LL_IsStallEP>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	2201      	movs	r2, #1
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	e002      	b.n	800c66c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2202      	movs	r2, #2
 800c670:	4619      	mov	r1, r3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fb26 	bl	800ccc4 <USBD_CtlSendData>
          break;
 800c678:	e004      	b.n	800c684 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fab6 	bl	800cbee <USBD_CtlError>
        break;
 800c682:	bf00      	nop
      }
      break;
 800c684:	e004      	b.n	800c690 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fab0 	bl	800cbee <USBD_CtlError>
      break;
 800c68e:	bf00      	nop
    }
    break;
 800c690:	e004      	b.n	800c69c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 faaa 	bl	800cbee <USBD_CtlError>
    break;
 800c69a:	bf00      	nop
  }

  return ret;
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	0a1b      	lsrs	r3, r3, #8
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	2b06      	cmp	r3, #6
 800c6be:	f200 80c9 	bhi.w	800c854 <USBD_GetDescriptor+0x1ac>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <USBD_GetDescriptor+0x20>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c6e5 	.word	0x0800c6e5
 800c6cc:	0800c6fd 	.word	0x0800c6fd
 800c6d0:	0800c73d 	.word	0x0800c73d
 800c6d4:	0800c855 	.word	0x0800c855
 800c6d8:	0800c855 	.word	0x0800c855
 800c6dc:	0800c801 	.word	0x0800c801
 800c6e0:	0800c827 	.word	0x0800c827
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 010a 	add.w	r1, r7, #10
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
    break;
 800c6fa:	e0b0      	b.n	800c85e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7c1b      	ldrb	r3, [r3, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70c:	f107 020a 	add.w	r2, r7, #10
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	2202      	movs	r2, #2
 800c71c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c71e:	e09e      	b.n	800c85e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	f107 020a 	add.w	r2, r7, #10
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
    break;
 800c73a:	e090      	b.n	800c85e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b05      	cmp	r3, #5
 800c744:	d856      	bhi.n	800c7f4 <USBD_GetDescriptor+0x14c>
 800c746:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <USBD_GetDescriptor+0xa4>)
 800c748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74c:	0800c765 	.word	0x0800c765
 800c750:	0800c77d 	.word	0x0800c77d
 800c754:	0800c795 	.word	0x0800c795
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c7dd 	.word	0x0800c7dd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7c12      	ldrb	r2, [r2, #16]
 800c770:	f107 010a 	add.w	r1, r7, #10
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
 800c778:	60f8      	str	r0, [r7, #12]
      break;
 800c77a:	e040      	b.n	800c7fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	7c12      	ldrb	r2, [r2, #16]
 800c788:	f107 010a 	add.w	r1, r7, #10
 800c78c:	4610      	mov	r0, r2
 800c78e:	4798      	blx	r3
 800c790:	60f8      	str	r0, [r7, #12]
      break;
 800c792:	e034      	b.n	800c7fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	7c12      	ldrb	r2, [r2, #16]
 800c7a0:	f107 010a 	add.w	r1, r7, #10
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	60f8      	str	r0, [r7, #12]
      break;
 800c7aa:	e028      	b.n	800c7fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	7c12      	ldrb	r2, [r2, #16]
 800c7b8:	f107 010a 	add.w	r1, r7, #10
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
      break;
 800c7c2:	e01c      	b.n	800c7fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 010a 	add.w	r1, r7, #10
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
      break;
 800c7da:	e010      	b.n	800c7fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7c12      	ldrb	r2, [r2, #16]
 800c7e8:	f107 010a 	add.w	r1, r7, #10
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
      break;
 800c7f2:	e004      	b.n	800c7fe <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9f9 	bl	800cbee <USBD_CtlError>
      return;
 800c7fc:	e04b      	b.n	800c896 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800c7fe:	e02e      	b.n	800c85e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7c1b      	ldrb	r3, [r3, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c810:	f107 020a 	add.w	r2, r7, #10
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
      break;
 800c81a:	e020      	b.n	800c85e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f9e5 	bl	800cbee <USBD_CtlError>
      return;
 800c824:	e037      	b.n	800c896 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7c1b      	ldrb	r3, [r3, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10d      	bne.n	800c84a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	f107 020a 	add.w	r2, r7, #10
 800c83a:	4610      	mov	r0, r2
 800c83c:	4798      	blx	r3
 800c83e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	2207      	movs	r2, #7
 800c846:	701a      	strb	r2, [r3, #0]
      break;
 800c848:	e009      	b.n	800c85e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f9ce 	bl	800cbee <USBD_CtlError>
      return;
 800c852:	e020      	b.n	800c896 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f9c9 	bl	800cbee <USBD_CtlError>
    return;
 800c85c:	e01b      	b.n	800c896 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d011      	beq.n	800c888 <USBD_GetDescriptor+0x1e0>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	88db      	ldrh	r3, [r3, #6]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00d      	beq.n	800c888 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	88da      	ldrh	r2, [r3, #6]
 800c870:	897b      	ldrh	r3, [r7, #10]
 800c872:	4293      	cmp	r3, r2
 800c874:	bf28      	it	cs
 800c876:	4613      	movcs	r3, r2
 800c878:	b29b      	uxth	r3, r3
 800c87a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c87c:	897b      	ldrh	r3, [r7, #10]
 800c87e:	461a      	mov	r2, r3
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fa1e 	bl	800ccc4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	88db      	ldrh	r3, [r3, #6]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fa75 	bl	800cd80 <USBD_CtlSendStatus>
  }
}
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	889b      	ldrh	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d130      	bne.n	800c910 <USBD_SetAddress+0x74>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	88db      	ldrh	r3, [r3, #6]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d12c      	bne.n	800c910 <USBD_SetAddress+0x74>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c8bc:	d828      	bhi.n	800c910 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	885b      	ldrh	r3, [r3, #2]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d104      	bne.n	800c8de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f989 	bl	800cbee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8dc:	e01c      	b.n	800c918 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7bfa      	ldrb	r2, [r7, #15]
 800c8e2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f003 fe5a 	bl	80105a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fa45 	bl	800cd80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c904:	e008      	b.n	800c918 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c90e:	e003      	b.n	800c918 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f96b 	bl	800cbee <USBD_CtlError>
  }
}
 800c918:	bf00      	nop
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	885b      	ldrh	r3, [r3, #2]
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	4b41      	ldr	r3, [pc, #260]	; (800ca38 <USBD_SetConfig+0x118>)
 800c932:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c934:	4b40      	ldr	r3, [pc, #256]	; (800ca38 <USBD_SetConfig+0x118>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d904      	bls.n	800c946 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f955 	bl	800cbee <USBD_CtlError>
 800c944:	e075      	b.n	800ca32 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d002      	beq.n	800c956 <USBD_SetConfig+0x36>
 800c950:	2b03      	cmp	r3, #3
 800c952:	d023      	beq.n	800c99c <USBD_SetConfig+0x7c>
 800c954:	e062      	b.n	800ca1c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c956:	4b38      	ldr	r3, [pc, #224]	; (800ca38 <USBD_SetConfig+0x118>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d01a      	beq.n	800c994 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c95e:	4b36      	ldr	r3, [pc, #216]	; (800ca38 <USBD_SetConfig+0x118>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2203      	movs	r2, #3
 800c96c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c970:	4b31      	ldr	r3, [pc, #196]	; (800ca38 <USBD_SetConfig+0x118>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff fa2a 	bl	800bdd0 <USBD_SetClassConfig>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d104      	bne.n	800c98c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f932 	bl	800cbee <USBD_CtlError>
          return;
 800c98a:	e052      	b.n	800ca32 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f9f7 	bl	800cd80 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c992:	e04e      	b.n	800ca32 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f9f3 	bl	800cd80 <USBD_CtlSendStatus>
      break;
 800c99a:	e04a      	b.n	800ca32 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c99c:	4b26      	ldr	r3, [pc, #152]	; (800ca38 <USBD_SetConfig+0x118>)
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d112      	bne.n	800c9ca <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800c9ac:	4b22      	ldr	r3, [pc, #136]	; (800ca38 <USBD_SetConfig+0x118>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800c9b6:	4b20      	ldr	r3, [pc, #128]	; (800ca38 <USBD_SetConfig+0x118>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fa26 	bl	800be0e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f9dc 	bl	800cd80 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c9c8:	e033      	b.n	800ca32 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800c9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ca38 <USBD_SetConfig+0x118>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d01d      	beq.n	800ca14 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fa14 	bl	800be0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9e6:	4b14      	ldr	r3, [pc, #80]	; (800ca38 <USBD_SetConfig+0x118>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c9f0:	4b11      	ldr	r3, [pc, #68]	; (800ca38 <USBD_SetConfig+0x118>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff f9ea 	bl	800bdd0 <USBD_SetClassConfig>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d104      	bne.n	800ca0c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f8f2 	bl	800cbee <USBD_CtlError>
          return;
 800ca0a:	e012      	b.n	800ca32 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f9b7 	bl	800cd80 <USBD_CtlSendStatus>
      break;
 800ca12:	e00e      	b.n	800ca32 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f9b3 	bl	800cd80 <USBD_CtlSendStatus>
      break;
 800ca1a:	e00a      	b.n	800ca32 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f8e5 	bl	800cbee <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ca24:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <USBD_SetConfig+0x118>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff f9ef 	bl	800be0e <USBD_ClrClassConfig>
      break;
 800ca30:	bf00      	nop
    }
  }
}
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	2000147c 	.word	0x2000147c

0800ca3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	88db      	ldrh	r3, [r3, #6]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d004      	beq.n	800ca58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f8cc 	bl	800cbee <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ca56:	e021      	b.n	800ca9c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	db17      	blt.n	800ca92 <USBD_GetConfig+0x56>
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	dd02      	ble.n	800ca6c <USBD_GetConfig+0x30>
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d00b      	beq.n	800ca82 <USBD_GetConfig+0x46>
 800ca6a:	e012      	b.n	800ca92 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	3308      	adds	r3, #8
 800ca76:	2201      	movs	r2, #1
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f922 	bl	800ccc4 <USBD_CtlSendData>
      break;
 800ca80:	e00c      	b.n	800ca9c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3304      	adds	r3, #4
 800ca86:	2201      	movs	r2, #1
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f91a 	bl	800ccc4 <USBD_CtlSendData>
      break;
 800ca90:	e004      	b.n	800ca9c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f8aa 	bl	800cbee <USBD_CtlError>
      break;
 800ca9a:	bf00      	nop
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cab4:	3b01      	subs	r3, #1
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d81e      	bhi.n	800caf8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	88db      	ldrh	r3, [r3, #6]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d004      	beq.n	800cacc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f892 	bl	800cbee <USBD_CtlError>
      break;
 800caca:	e01a      	b.n	800cb02 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	f043 0202 	orr.w	r2, r3, #2
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	330c      	adds	r3, #12
 800caec:	2202      	movs	r2, #2
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f8e7 	bl	800ccc4 <USBD_CtlSendData>
    break;
 800caf6:	e004      	b.n	800cb02 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f877 	bl	800cbee <USBD_CtlError>
    break;
 800cb00:	bf00      	nop
  }
}
 800cb02:	bf00      	nop
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	885b      	ldrh	r3, [r3, #2]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d106      	bne.n	800cb2a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f92b 	bl	800cd80 <USBD_CtlSendStatus>
  }

}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b082      	sub	sp, #8
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb42:	3b01      	subs	r3, #1
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d80b      	bhi.n	800cb60 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	885b      	ldrh	r3, [r3, #2]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d10c      	bne.n	800cb6a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f911 	bl	800cd80 <USBD_CtlSendStatus>
    }
    break;
 800cb5e:	e004      	b.n	800cb6a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f843 	bl	800cbee <USBD_CtlError>
    break;
 800cb68:	e000      	b.n	800cb6c <USBD_ClrFeature+0x3a>
    break;
 800cb6a:	bf00      	nop
  }
}
 800cb6c:	bf00      	nop
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	785a      	ldrb	r2, [r3, #1]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	3302      	adds	r3, #2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	3303      	adds	r3, #3
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	021b      	lsls	r3, r3, #8
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	4413      	add	r3, r2
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	3304      	adds	r3, #4
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	3305      	adds	r3, #5
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	4413      	add	r3, r2
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	3306      	adds	r3, #6
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	021b      	lsls	r3, r3, #8
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	4413      	add	r3, r2
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	80da      	strh	r2, [r3, #6]

}
 800cbe2:	bf00      	nop
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800cbf8:	2180      	movs	r1, #128	; 0x80
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f003 fc68 	bl	80104d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cc00:	2100      	movs	r1, #0
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f003 fc64 	bl	80104d0 <USBD_LL_StallEP>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d032      	beq.n	800cc8c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 f834 	bl	800cc94 <USBD_GetLen>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	3301      	adds	r3, #1
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	75fa      	strb	r2, [r7, #23]
 800cc40:	461a      	mov	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	4413      	add	r3, r2
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	7812      	ldrb	r2, [r2, #0]
 800cc4a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	75fa      	strb	r2, [r7, #23]
 800cc52:	461a      	mov	r2, r3
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4413      	add	r3, r2
 800cc58:	2203      	movs	r2, #3
 800cc5a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cc5c:	e012      	b.n	800cc84 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	60fa      	str	r2, [r7, #12]
 800cc64:	7dfa      	ldrb	r2, [r7, #23]
 800cc66:	1c51      	adds	r1, r2, #1
 800cc68:	75f9      	strb	r1, [r7, #23]
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	440a      	add	r2, r1
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	75fa      	strb	r2, [r7, #23]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	4413      	add	r3, r2
 800cc80:	2200      	movs	r2, #0
 800cc82:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e8      	bne.n	800cc5e <USBD_GetString+0x4e>
    }
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800cca0:	e005      	b.n	800ccae <USBD_GetLen+0x1a>
    {
        len++;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	3301      	adds	r3, #1
 800cca6:	73fb      	strb	r3, [r7, #15]
        buf++;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1f5      	bne.n	800cca2 <USBD_GetLen+0xe>
    }

    return len;
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800ccda:	88fa      	ldrh	r2, [r7, #6]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cce0:	88fa      	ldrh	r2, [r7, #6]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	2100      	movs	r1, #0
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f003 fc78 	bl	80105e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd0a:	88fb      	ldrh	r3, [r7, #6]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	2100      	movs	r1, #0
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f003 fc66 	bl	80105e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2203      	movs	r2, #3
 800cd32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800cd36:	88fa      	ldrh	r2, [r7, #6]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800cd3e:	88fa      	ldrh	r2, [r7, #6]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cd46:	88fb      	ldrh	r3, [r7, #6]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f003 fc6b 	bl	8010628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4613      	mov	r3, r2
 800cd68:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	2100      	movs	r1, #0
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f003 fc59 	bl	8010628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2204      	movs	r2, #4
 800cd8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd90:	2300      	movs	r3, #0
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f003 fc23 	bl	80105e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2205      	movs	r2, #5
 800cdb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f003 fc33 	bl	8010628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cdda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdde:	2b84      	cmp	r3, #132	; 0x84
 800cde0:	d005      	beq.n	800cdee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cde2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	4413      	add	r3, r2
 800cdea:	3303      	adds	r3, #3
 800cdec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cdee:	68fb      	ldr	r3, [r7, #12]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce02:	f3ef 8305 	mrs	r3, IPSR
 800ce06:	607b      	str	r3, [r7, #4]
  return(result);
 800ce08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	bf14      	ite	ne
 800ce0e:	2301      	movne	r3, #1
 800ce10:	2300      	moveq	r3, #0
 800ce12:	b2db      	uxtb	r3, r3
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ce24:	f001 fcca 	bl	800e7bc <vTaskStartScheduler>
  
  return osOK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ce2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce30:	b089      	sub	sp, #36	; 0x24
 800ce32:	af04      	add	r7, sp, #16
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d020      	beq.n	800ce82 <osThreadCreate+0x54>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d01c      	beq.n	800ce82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685c      	ldr	r4, [r3, #4]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681d      	ldr	r5, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	691e      	ldr	r6, [r3, #16]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff ffb6 	bl	800cdcc <makeFreeRtosPriority>
 800ce60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce6a:	9202      	str	r2, [sp, #8]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	9100      	str	r1, [sp, #0]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	4632      	mov	r2, r6
 800ce74:	4629      	mov	r1, r5
 800ce76:	4620      	mov	r0, r4
 800ce78:	f001 fae5 	bl	800e446 <xTaskCreateStatic>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	e01c      	b.n	800cebc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685c      	ldr	r4, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce8e:	b29e      	uxth	r6, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff ff98 	bl	800cdcc <makeFreeRtosPriority>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	f107 030c 	add.w	r3, r7, #12
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	9200      	str	r2, [sp, #0]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4620      	mov	r0, r4
 800ceae:	f001 fb23 	bl	800e4f8 <xTaskCreate>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d001      	beq.n	800cebc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e000      	b.n	800cebe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cebc:	68fb      	ldr	r3, [r7, #12]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cec6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <osDelay+0x16>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	e000      	b.n	800cede <osDelay+0x18>
 800cedc:	2301      	movs	r3, #1
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 fc38 	bl	800e754 <vTaskDelay>
  
  return osOK;
 800cee4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d007      	beq.n	800cf0e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4619      	mov	r1, r3
 800cf04:	2001      	movs	r0, #1
 800cf06:	f000 fce1 	bl	800d8cc <xQueueCreateMutexStatic>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	e003      	b.n	800cf16 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cf0e:	2001      	movs	r0, #1
 800cf10:	f000 fcc4 	bl	800d89c <xQueueCreateMutex>
 800cf14:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <osMutexWait+0x18>
    return osErrorParameter;
 800cf34:	2380      	movs	r3, #128	; 0x80
 800cf36:	e03a      	b.n	800cfae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf42:	d103      	bne.n	800cf4c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	e009      	b.n	800cf60 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d006      	beq.n	800cf60 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <osMutexWait+0x40>
      ticks = 1;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cf60:	f7ff ff4c 	bl	800cdfc <inHandlerMode>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d017      	beq.n	800cf9a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	461a      	mov	r2, r3
 800cf70:	2100      	movs	r1, #0
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f001 f8c2 	bl	800e0fc <xQueueReceiveFromISR>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d001      	beq.n	800cf82 <osMutexWait+0x62>
      return osErrorOS;
 800cf7e:	23ff      	movs	r3, #255	; 0xff
 800cf80:	e015      	b.n	800cfae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d011      	beq.n	800cfac <osMutexWait+0x8c>
 800cf88:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <osMutexWait+0x98>)
 800cf8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	e008      	b.n	800cfac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 ffa5 	bl	800deec <xQueueSemaphoreTake>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d001      	beq.n	800cfac <osMutexWait+0x8c>
    return osErrorOS;
 800cfa8:	23ff      	movs	r3, #255	; 0xff
 800cfaa:	e000      	b.n	800cfae <osMutexWait+0x8e>
  }
  
  return osOK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cfcc:	f7ff ff16 	bl	800cdfc <inHandlerMode>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d016      	beq.n	800d004 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fe1f 	bl	800dc20 <xQueueGiveFromISR>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d001      	beq.n	800cfec <osMutexRelease+0x30>
      return osErrorOS;
 800cfe8:	23ff      	movs	r3, #255	; 0xff
 800cfea:	e017      	b.n	800d01c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d013      	beq.n	800d01a <osMutexRelease+0x5e>
 800cff2:	4b0c      	ldr	r3, [pc, #48]	; (800d024 <osMutexRelease+0x68>)
 800cff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	e00a      	b.n	800d01a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d004:	2300      	movs	r3, #0
 800d006:	2200      	movs	r2, #0
 800d008:	2100      	movs	r1, #0
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fc7a 	bl	800d904 <xQueueGenericSend>
 800d010:	4603      	mov	r3, r0
 800d012:	2b01      	cmp	r3, #1
 800d014:	d001      	beq.n	800d01a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d016:	23ff      	movs	r3, #255	; 0xff
 800d018:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d01a:	68fb      	ldr	r3, [r7, #12]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	e000ed04 	.word	0xe000ed04

0800d028 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	3303      	adds	r3, #3
 800d036:	f023 0303 	bic.w	r3, r3, #3
 800d03a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800d03c:	2014      	movs	r0, #20
 800d03e:	f002 fc3f 	bl	800f8c0 <pvPortMalloc>
 800d042:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d046      	beq.n	800d0d8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	2200      	movs	r2, #0
 800d05c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f002 fc2c 	bl	800f8c0 <pvPortMalloc>
 800d068:	4602      	mov	r2, r0
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d02b      	beq.n	800d0ce <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	fb02 f303 	mul.w	r3, r2, r3
 800d080:	4618      	mov	r0, r3
 800d082:	f002 fc1d 	bl	800f8c0 <pvPortMalloc>
 800d086:	4602      	mov	r2, r0
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d011      	beq.n	800d0b8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800d094:	2300      	movs	r3, #0
 800d096:	613b      	str	r3, [r7, #16]
 800d098:	e008      	b.n	800d0ac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d3f1      	bcc.n	800d09a <osPoolCreate+0x72>
 800d0b6:	e00f      	b.n	800d0d8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f002 fcc1 	bl	800fa44 <vPortFree>
        vPortFree(thePool);
 800d0c2:	6978      	ldr	r0, [r7, #20]
 800d0c4:	f002 fcbe 	bl	800fa44 <vPortFree>
        thePool = NULL;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	617b      	str	r3, [r7, #20]
 800d0cc:	e004      	b.n	800d0d8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800d0ce:	6978      	ldr	r0, [r7, #20]
 800d0d0:	f002 fcb8 	bl	800fa44 <vPortFree>
      thePool = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b08a      	sub	sp, #40	; 0x28
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800d0f2:	f7ff fe83 	bl	800cdfc <inHandlerMode>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00e      	beq.n	800d11a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	617a      	str	r2, [r7, #20]
 800d112:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d114:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800d116:	627b      	str	r3, [r7, #36]	; 0x24
 800d118:	e001      	b.n	800d11e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800d11a:	f002 fab7 	bl	800f68c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800d11e:	2300      	movs	r3, #0
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	e029      	b.n	800d178 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	69fa      	ldr	r2, [r7, #28]
 800d12a:	4413      	add	r3, r2
 800d12c:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	69ba      	ldr	r2, [r7, #24]
 800d134:	429a      	cmp	r2, r3
 800d136:	d301      	bcc.n	800d13c <osPoolAlloc+0x5a>
      index = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	4413      	add	r3, r2
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d113      	bne.n	800d172 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	4413      	add	r3, r2
 800d152:	2201      	movs	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4619      	mov	r1, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	69ba      	ldr	r2, [r7, #24]
 800d162:	fb02 f303 	mul.w	r3, r2, r3
 800d166:	440b      	add	r3, r1
 800d168:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	69ba      	ldr	r2, [r7, #24]
 800d16e:	611a      	str	r2, [r3, #16]
      break;
 800d170:	e007      	b.n	800d182 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	3301      	adds	r3, #1
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	69fa      	ldr	r2, [r7, #28]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d3d0      	bcc.n	800d124 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800d182:	f7ff fe3b 	bl	800cdfc <inHandlerMode>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d005      	beq.n	800d198 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	e001      	b.n	800d19c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800d198:	f002 faa6 	bl	800f6e8 <vPortExitCritical>
  }
  
  return p;
 800d19c:	6a3b      	ldr	r3, [r7, #32]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3728      	adds	r7, #40	; 0x28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b085      	sub	sp, #20
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <osPoolFree+0x14>
    return osErrorParameter;
 800d1b6:	2380      	movs	r3, #128	; 0x80
 800d1b8:	e030      	b.n	800d21c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <osPoolFree+0x1e>
    return osErrorParameter;
 800d1c0:	2380      	movs	r3, #128	; 0x80
 800d1c2:	e02b      	b.n	800d21c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d201      	bcs.n	800d1d2 <osPoolFree+0x2c>
    return osErrorParameter;
 800d1ce:	2380      	movs	r3, #128	; 0x80
 800d1d0:	e024      	b.n	800d21c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	6812      	ldr	r2, [r2, #0]
 800d1d8:	1a9b      	subs	r3, r3, r2
 800d1da:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68da      	ldr	r2, [r3, #12]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1e6:	fb02 f201 	mul.w	r2, r2, r1
 800d1ea:	1a9b      	subs	r3, r3, r2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <osPoolFree+0x4e>
    return osErrorParameter;
 800d1f0:	2380      	movs	r3, #128	; 0x80
 800d1f2:	e013      	b.n	800d21c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	429a      	cmp	r2, r3
 800d208:	d301      	bcc.n	800d20e <osPoolFree+0x68>
    return osErrorParameter;
 800d20a:	2380      	movs	r3, #128	; 0x80
 800d20c:	e006      	b.n	800d21c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4413      	add	r3, r2
 800d216:	2200      	movs	r2, #0
 800d218:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	613b      	str	r3, [r7, #16]
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689c      	ldr	r4, [r3, #8]
 800d246:	200c      	movs	r0, #12
 800d248:	f002 fb3a 	bl	800f8c0 <pvPortMalloc>
 800d24c:	4603      	mov	r3, r0
 800d24e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <osMailCreate+0x36>
    return NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e038      	b.n	800d2d0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	681c      	ldr	r4, [r3, #0]
 800d272:	2200      	movs	r2, #0
 800d274:	2104      	movs	r1, #4
 800d276:	f000 fa9b 	bl	800d7b0 <xQueueGenericCreate>
 800d27a:	4603      	mov	r3, r0
 800d27c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d107      	bne.n	800d29a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	f002 fbd7 	bl	800fa44 <vPortFree>
    return NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	e01a      	b.n	800d2d0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	681c      	ldr	r4, [r3, #0]
 800d2a0:	f107 030c 	add.w	r3, r7, #12
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff febf 	bl	800d028 <osPoolCreate>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d107      	bne.n	800d2ca <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f002 fbbf 	bl	800fa44 <vPortFree>
    return NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e002      	b.n	800d2d0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	371c      	adds	r7, #28
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd90      	pop	{r4, r7, pc}

0800d2d8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d101      	bne.n	800d2ec <osMailAlloc+0x14>
    return NULL;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	e006      	b.n	800d2fa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fef6 	bl	800d0e2 <osPoolAlloc>
 800d2f6:	60f8      	str	r0, [r7, #12]
  
  return p;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <osMailPut+0x14>
    return osErrorParameter;
 800d314:	2380      	movs	r3, #128	; 0x80
 800d316:	e02c      	b.n	800d372 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800d31c:	f7ff fd6e 	bl	800cdfc <inHandlerMode>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d018      	beq.n	800d358 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6858      	ldr	r0, [r3, #4]
 800d32a:	f107 020c 	add.w	r2, r7, #12
 800d32e:	4639      	mov	r1, r7
 800d330:	2300      	movs	r3, #0
 800d332:	f000 fbe1 	bl	800daf8 <xQueueGenericSendFromISR>
 800d336:	4603      	mov	r3, r0
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d001      	beq.n	800d340 <osMailPut+0x3c>
      return osErrorOS;
 800d33c:	23ff      	movs	r3, #255	; 0xff
 800d33e:	e018      	b.n	800d372 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d014      	beq.n	800d370 <osMailPut+0x6c>
 800d346:	4b0d      	ldr	r3, [pc, #52]	; (800d37c <osMailPut+0x78>)
 800d348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	e00b      	b.n	800d370 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6858      	ldr	r0, [r3, #4]
 800d35c:	4639      	mov	r1, r7
 800d35e:	2300      	movs	r3, #0
 800d360:	2200      	movs	r2, #0
 800d362:	f000 facf 	bl	800d904 <xQueueGenericSend>
 800d366:	4603      	mov	r3, r0
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d001      	beq.n	800d370 <osMailPut+0x6c>
      return osErrorOS;
 800d36c:	23ff      	movs	r3, #255	; 0xff
 800d36e:	e000      	b.n	800d372 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	e000ed04 	.word	0xe000ed04

0800d380 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b08b      	sub	sp, #44	; 0x2c
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10a      	bne.n	800d3ac <osMailGet+0x2c>
    event.status = osErrorParameter;
 800d396:	2380      	movs	r3, #128	; 0x80
 800d398:	617b      	str	r3, [r7, #20]
    return event;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	461c      	mov	r4, r3
 800d39e:	f107 0314 	add.w	r3, r7, #20
 800d3a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3aa:	e056      	b.n	800d45a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ba:	d103      	bne.n	800d3c4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800d3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3c2:	e009      	b.n	800d3d8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d006      	beq.n	800d3d8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <osMailGet+0x58>
      ticks = 1;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d3d8:	f7ff fd10 	bl	800cdfc <inHandlerMode>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d01d      	beq.n	800d41e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	6858      	ldr	r0, [r3, #4]
 800d3e6:	f107 0220 	add.w	r2, r7, #32
 800d3ea:	f107 0314 	add.w	r3, r7, #20
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f000 fe83 	bl	800e0fc <xQueueReceiveFromISR>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d102      	bne.n	800d402 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800d3fc:	2320      	movs	r3, #32
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	e001      	b.n	800d406 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800d402:	2300      	movs	r3, #0
 800d404:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01e      	beq.n	800d44a <osMailGet+0xca>
 800d40c:	4b15      	ldr	r3, [pc, #84]	; (800d464 <osMailGet+0xe4>)
 800d40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	e015      	b.n	800d44a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	6858      	ldr	r0, [r3, #4]
 800d422:	f107 0314 	add.w	r3, r7, #20
 800d426:	3304      	adds	r3, #4
 800d428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42a:	4619      	mov	r1, r3
 800d42c:	f000 fc82 	bl	800dd34 <xQueueReceive>
 800d430:	4603      	mov	r3, r0
 800d432:	2b01      	cmp	r3, #1
 800d434:	d102      	bne.n	800d43c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800d436:	2320      	movs	r3, #32
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e006      	b.n	800d44a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <osMailGet+0xc6>
 800d442:	2300      	movs	r3, #0
 800d444:	e000      	b.n	800d448 <osMailGet+0xc8>
 800d446:	2340      	movs	r3, #64	; 0x40
 800d448:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	461c      	mov	r4, r3
 800d44e:	f107 0314 	add.w	r3, r7, #20
 800d452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	372c      	adds	r7, #44	; 0x2c
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd90      	pop	{r4, r7, pc}
 800d462:	bf00      	nop
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <osMailFree+0x14>
    return osErrorParameter;
 800d478:	2380      	movs	r3, #128	; 0x80
 800d47a:	e006      	b.n	800d48a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fe8f 	bl	800d1a6 <osPoolFree>
 800d488:	4603      	mov	r3, r0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d492:	b480      	push	{r7}
 800d494:	b083      	sub	sp, #12
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f103 0208 	add.w	r2, r3, #8
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 0208 	add.w	r2, r3, #8
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f103 0208 	add.w	r2, r3, #8
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	689a      	ldr	r2, [r3, #8]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	683a      	ldr	r2, [r7, #0]
 800d516:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	601a      	str	r2, [r3, #0]
}
 800d528:	bf00      	nop
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54a:	d103      	bne.n	800d554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	e00c      	b.n	800d56e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	3308      	adds	r3, #8
 800d558:	60fb      	str	r3, [r7, #12]
 800d55a:	e002      	b.n	800d562 <vListInsert+0x2e>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d2f6      	bcs.n	800d55c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	601a      	str	r2, [r3, #0]
}
 800d59a:	bf00      	nop
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b085      	sub	sp, #20
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	6892      	ldr	r2, [r2, #8]
 800d5bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	6852      	ldr	r2, [r2, #4]
 800d5c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d103      	bne.n	800d5da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	689a      	ldr	r2, [r3, #8]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	1e5a      	subs	r2, r3, #1
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
	...

0800d5fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d109      	bne.n	800d624 <xQueueGenericReset+0x28>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	60bb      	str	r3, [r7, #8]
 800d622:	e7fe      	b.n	800d622 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d624:	f002 f832 	bl	800f68c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d630:	68f9      	ldr	r1, [r7, #12]
 800d632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d634:	fb01 f303 	mul.w	r3, r1, r3
 800d638:	441a      	add	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d654:	3b01      	subs	r3, #1
 800d656:	68f9      	ldr	r1, [r7, #12]
 800d658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d65a:	fb01 f303 	mul.w	r3, r1, r3
 800d65e:	441a      	add	r2, r3
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	22ff      	movs	r2, #255	; 0xff
 800d668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	22ff      	movs	r2, #255	; 0xff
 800d670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d114      	bne.n	800d6a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d01a      	beq.n	800d6b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	3310      	adds	r3, #16
 800d686:	4618      	mov	r0, r3
 800d688:	f001 fada 	bl	800ec40 <xTaskRemoveFromEventList>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d012      	beq.n	800d6b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d692:	4b0d      	ldr	r3, [pc, #52]	; (800d6c8 <xQueueGenericReset+0xcc>)
 800d694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	e009      	b.n	800d6b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3310      	adds	r3, #16
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fef2 	bl	800d492 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3324      	adds	r3, #36	; 0x24
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff feed 	bl	800d492 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6b8:	f002 f816 	bl	800f6e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6bc:	2301      	movs	r3, #1
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08e      	sub	sp, #56	; 0x38
 800d6d0:	af02      	add	r7, sp, #8
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d109      	bne.n	800d6f4 <xQueueGenericCreateStatic+0x28>
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6f2:	e7fe      	b.n	800d6f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d109      	bne.n	800d70e <xQueueGenericCreateStatic+0x42>
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	627b      	str	r3, [r7, #36]	; 0x24
 800d70c:	e7fe      	b.n	800d70c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <xQueueGenericCreateStatic+0x4e>
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <xQueueGenericCreateStatic+0x52>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e000      	b.n	800d720 <xQueueGenericCreateStatic+0x54>
 800d71e:	2300      	movs	r3, #0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d109      	bne.n	800d738 <xQueueGenericCreateStatic+0x6c>
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	623b      	str	r3, [r7, #32]
 800d736:	e7fe      	b.n	800d736 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <xQueueGenericCreateStatic+0x78>
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <xQueueGenericCreateStatic+0x7c>
 800d744:	2301      	movs	r3, #1
 800d746:	e000      	b.n	800d74a <xQueueGenericCreateStatic+0x7e>
 800d748:	2300      	movs	r3, #0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d109      	bne.n	800d762 <xQueueGenericCreateStatic+0x96>
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	61fb      	str	r3, [r7, #28]
 800d760:	e7fe      	b.n	800d760 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d762:	2348      	movs	r3, #72	; 0x48
 800d764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b48      	cmp	r3, #72	; 0x48
 800d76a:	d009      	beq.n	800d780 <xQueueGenericCreateStatic+0xb4>
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	61bb      	str	r3, [r7, #24]
 800d77e:	e7fe      	b.n	800d77e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00d      	beq.n	800d7a6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	68b9      	ldr	r1, [r7, #8]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f842 	bl	800d82a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3730      	adds	r7, #48	; 0x30
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08a      	sub	sp, #40	; 0x28
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d109      	bne.n	800d7d8 <xQueueGenericCreate+0x28>
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	613b      	str	r3, [r7, #16]
 800d7d6:	e7fe      	b.n	800d7d6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d102      	bne.n	800d7e4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]
 800d7e2:	e004      	b.n	800d7ee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	fb02 f303 	mul.w	r3, r2, r3
 800d7ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	3348      	adds	r3, #72	; 0x48
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f002 f864 	bl	800f8c0 <pvPortMalloc>
 800d7f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00f      	beq.n	800d820 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	3348      	adds	r3, #72	; 0x48
 800d804:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d80e:	79fa      	ldrb	r2, [r7, #7]
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	4613      	mov	r3, r2
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	68b9      	ldr	r1, [r7, #8]
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f000 f805 	bl	800d82a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d820:	69bb      	ldr	r3, [r7, #24]
	}
 800d822:	4618      	mov	r0, r3
 800d824:	3720      	adds	r7, #32
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	607a      	str	r2, [r7, #4]
 800d836:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d103      	bne.n	800d846 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	69ba      	ldr	r2, [r7, #24]
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	e002      	b.n	800d84c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d858:	2101      	movs	r1, #1
 800d85a:	69b8      	ldr	r0, [r7, #24]
 800d85c:	f7ff fece 	bl	800d5fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00e      	beq.n	800d894 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d888:	2300      	movs	r3, #0
 800d88a:	2200      	movs	r2, #0
 800d88c:	2100      	movs	r1, #0
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f838 	bl	800d904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	617b      	str	r3, [r7, #20]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	6939      	ldr	r1, [r7, #16]
 800d8b4:	6978      	ldr	r0, [r7, #20]
 800d8b6:	f7ff ff7b 	bl	800d7b0 <xQueueGenericCreate>
 800d8ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff ffd3 	bl	800d868 <prvInitialiseMutex>

		return pxNewQueue;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
	}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	6039      	str	r1, [r7, #0]
 800d8d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	617b      	str	r3, [r7, #20]
 800d8dc:	2300      	movs	r3, #0
 800d8de:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6939      	ldr	r1, [r7, #16]
 800d8ea:	6978      	ldr	r0, [r7, #20]
 800d8ec:	f7ff feee 	bl	800d6cc <xQueueGenericCreateStatic>
 800d8f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7ff ffb8 	bl	800d868 <prvInitialiseMutex>

		return pxNewQueue;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
	...

0800d904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08e      	sub	sp, #56	; 0x38
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d912:	2300      	movs	r3, #0
 800d914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d109      	bne.n	800d934 <xQueueGenericSend+0x30>
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	62bb      	str	r3, [r7, #40]	; 0x28
 800d932:	e7fe      	b.n	800d932 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <xQueueGenericSend+0x3e>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <xQueueGenericSend+0x42>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <xQueueGenericSend+0x44>
 800d946:	2300      	movs	r3, #0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d109      	bne.n	800d960 <xQueueGenericSend+0x5c>
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	627b      	str	r3, [r7, #36]	; 0x24
 800d95e:	e7fe      	b.n	800d95e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d103      	bne.n	800d96e <xQueueGenericSend+0x6a>
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d101      	bne.n	800d972 <xQueueGenericSend+0x6e>
 800d96e:	2301      	movs	r3, #1
 800d970:	e000      	b.n	800d974 <xQueueGenericSend+0x70>
 800d972:	2300      	movs	r3, #0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d109      	bne.n	800d98c <xQueueGenericSend+0x88>
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	623b      	str	r3, [r7, #32]
 800d98a:	e7fe      	b.n	800d98a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d98c:	f001 fb14 	bl	800efb8 <xTaskGetSchedulerState>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <xQueueGenericSend+0x98>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <xQueueGenericSend+0x9c>
 800d99c:	2301      	movs	r3, #1
 800d99e:	e000      	b.n	800d9a2 <xQueueGenericSend+0x9e>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d109      	bne.n	800d9ba <xQueueGenericSend+0xb6>
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	61fb      	str	r3, [r7, #28]
 800d9b8:	e7fe      	b.n	800d9b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ba:	f001 fe67 	bl	800f68c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d302      	bcc.n	800d9d0 <xQueueGenericSend+0xcc>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d129      	bne.n	800da24 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d6:	f000 fc26 	bl	800e226 <prvCopyDataToQueue>
 800d9da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d010      	beq.n	800da06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	3324      	adds	r3, #36	; 0x24
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f001 f929 	bl	800ec40 <xTaskRemoveFromEventList>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d013      	beq.n	800da1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9f4:	4b3f      	ldr	r3, [pc, #252]	; (800daf4 <xQueueGenericSend+0x1f0>)
 800d9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	e00a      	b.n	800da1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d007      	beq.n	800da1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da0c:	4b39      	ldr	r3, [pc, #228]	; (800daf4 <xQueueGenericSend+0x1f0>)
 800da0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da1c:	f001 fe64 	bl	800f6e8 <vPortExitCritical>
				return pdPASS;
 800da20:	2301      	movs	r3, #1
 800da22:	e063      	b.n	800daec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d103      	bne.n	800da32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da2a:	f001 fe5d 	bl	800f6e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	e05c      	b.n	800daec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da34:	2b00      	cmp	r3, #0
 800da36:	d106      	bne.n	800da46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da38:	f107 0314 	add.w	r3, r7, #20
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 f961 	bl	800ed04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da42:	2301      	movs	r3, #1
 800da44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da46:	f001 fe4f 	bl	800f6e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da4a:	f000 ff15 	bl	800e878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da4e:	f001 fe1d 	bl	800f68c <vPortEnterCritical>
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da58:	b25b      	sxtb	r3, r3
 800da5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5e:	d103      	bne.n	800da68 <xQueueGenericSend+0x164>
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da6e:	b25b      	sxtb	r3, r3
 800da70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da74:	d103      	bne.n	800da7e <xQueueGenericSend+0x17a>
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da7e:	f001 fe33 	bl	800f6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da82:	1d3a      	adds	r2, r7, #4
 800da84:	f107 0314 	add.w	r3, r7, #20
 800da88:	4611      	mov	r1, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	f001 f950 	bl	800ed30 <xTaskCheckForTimeOut>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d124      	bne.n	800dae0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da98:	f000 fcbd 	bl	800e416 <prvIsQueueFull>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d018      	beq.n	800dad4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	3310      	adds	r3, #16
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f001 f8a4 	bl	800ebf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dab2:	f000 fc48 	bl	800e346 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dab6:	f000 feed 	bl	800e894 <xTaskResumeAll>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f47f af7c 	bne.w	800d9ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800dac2:	4b0c      	ldr	r3, [pc, #48]	; (800daf4 <xQueueGenericSend+0x1f0>)
 800dac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	e772      	b.n	800d9ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dad6:	f000 fc36 	bl	800e346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dada:	f000 fedb 	bl	800e894 <xTaskResumeAll>
 800dade:	e76c      	b.n	800d9ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dae2:	f000 fc30 	bl	800e346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dae6:	f000 fed5 	bl	800e894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800daea:	2300      	movs	r3, #0
		}
	}
}
 800daec:	4618      	mov	r0, r3
 800daee:	3738      	adds	r7, #56	; 0x38
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	e000ed04 	.word	0xe000ed04

0800daf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08e      	sub	sp, #56	; 0x38
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d109      	bne.n	800db24 <xQueueGenericSendFromISR+0x2c>
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
 800db22:	e7fe      	b.n	800db22 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d103      	bne.n	800db32 <xQueueGenericSendFromISR+0x3a>
 800db2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <xQueueGenericSendFromISR+0x3e>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <xQueueGenericSendFromISR+0x40>
 800db36:	2300      	movs	r3, #0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d109      	bne.n	800db50 <xQueueGenericSendFromISR+0x58>
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	623b      	str	r3, [r7, #32]
 800db4e:	e7fe      	b.n	800db4e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2b02      	cmp	r3, #2
 800db54:	d103      	bne.n	800db5e <xQueueGenericSendFromISR+0x66>
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d101      	bne.n	800db62 <xQueueGenericSendFromISR+0x6a>
 800db5e:	2301      	movs	r3, #1
 800db60:	e000      	b.n	800db64 <xQueueGenericSendFromISR+0x6c>
 800db62:	2300      	movs	r3, #0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <xQueueGenericSendFromISR+0x84>
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	e7fe      	b.n	800db7a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db7c:	f001 fe62 	bl	800f844 <vPortValidateInterruptPriority>
	__asm volatile
 800db80:	f3ef 8211 	mrs	r2, BASEPRI
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	61ba      	str	r2, [r7, #24]
 800db96:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d302      	bcc.n	800dbae <xQueueGenericSendFromISR+0xb6>
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d12c      	bne.n	800dc08 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbbe:	f000 fb32 	bl	800e226 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbca:	d112      	bne.n	800dbf2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d016      	beq.n	800dc02 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	3324      	adds	r3, #36	; 0x24
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f001 f831 	bl	800ec40 <xTaskRemoveFromEventList>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00e      	beq.n	800dc02 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00b      	beq.n	800dc02 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	e007      	b.n	800dc02 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	b25a      	sxtb	r2, r3
 800dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc02:	2301      	movs	r3, #1
 800dc04:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dc06:	e001      	b.n	800dc0c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3738      	adds	r7, #56	; 0x38
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b08e      	sub	sp, #56	; 0x38
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d109      	bne.n	800dc48 <xQueueGiveFromISR+0x28>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	623b      	str	r3, [r7, #32]
 800dc46:	e7fe      	b.n	800dc46 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d009      	beq.n	800dc64 <xQueueGiveFromISR+0x44>
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	61fb      	str	r3, [r7, #28]
 800dc62:	e7fe      	b.n	800dc62 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d103      	bne.n	800dc74 <xQueueGiveFromISR+0x54>
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d101      	bne.n	800dc78 <xQueueGiveFromISR+0x58>
 800dc74:	2301      	movs	r3, #1
 800dc76:	e000      	b.n	800dc7a <xQueueGiveFromISR+0x5a>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <xQueueGiveFromISR+0x72>
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	61bb      	str	r3, [r7, #24]
 800dc90:	e7fe      	b.n	800dc90 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc92:	f001 fdd7 	bl	800f844 <vPortValidateInterruptPriority>
	__asm volatile
 800dc96:	f3ef 8211 	mrs	r2, BASEPRI
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	617a      	str	r2, [r7, #20]
 800dcac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dcae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d22b      	bcs.n	800dd1a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	1c5a      	adds	r2, r3, #1
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcdc:	d112      	bne.n	800dd04 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d016      	beq.n	800dd14 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	3324      	adds	r3, #36	; 0x24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 ffa8 	bl	800ec40 <xTaskRemoveFromEventList>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00e      	beq.n	800dd14 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	e007      	b.n	800dd14 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd08:	3301      	adds	r3, #1
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	b25a      	sxtb	r2, r3
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dd14:	2301      	movs	r3, #1
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
 800dd18:	e001      	b.n	800dd1e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3738      	adds	r7, #56	; 0x38
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b08c      	sub	sp, #48	; 0x30
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd40:	2300      	movs	r3, #0
 800dd42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d109      	bne.n	800dd62 <xQueueReceive+0x2e>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	623b      	str	r3, [r7, #32]
 800dd60:	e7fe      	b.n	800dd60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d103      	bne.n	800dd70 <xQueueReceive+0x3c>
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <xQueueReceive+0x40>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e000      	b.n	800dd76 <xQueueReceive+0x42>
 800dd74:	2300      	movs	r3, #0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d109      	bne.n	800dd8e <xQueueReceive+0x5a>
 800dd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	61fb      	str	r3, [r7, #28]
 800dd8c:	e7fe      	b.n	800dd8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd8e:	f001 f913 	bl	800efb8 <xTaskGetSchedulerState>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <xQueueReceive+0x6a>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <xQueueReceive+0x6e>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e000      	b.n	800dda4 <xQueueReceive+0x70>
 800dda2:	2300      	movs	r3, #0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d109      	bne.n	800ddbc <xQueueReceive+0x88>
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	61bb      	str	r3, [r7, #24]
 800ddba:	e7fe      	b.n	800ddba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddbc:	f001 fc66 	bl	800f68c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01f      	beq.n	800de0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd0:	f000 fa93 	bl	800e2fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	1e5a      	subs	r2, r3, #1
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00f      	beq.n	800de04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	3310      	adds	r3, #16
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 ff29 	bl	800ec40 <xTaskRemoveFromEventList>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d007      	beq.n	800de04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddf4:	4b3c      	ldr	r3, [pc, #240]	; (800dee8 <xQueueReceive+0x1b4>)
 800ddf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de04:	f001 fc70 	bl	800f6e8 <vPortExitCritical>
				return pdPASS;
 800de08:	2301      	movs	r3, #1
 800de0a:	e069      	b.n	800dee0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d103      	bne.n	800de1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de12:	f001 fc69 	bl	800f6e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de16:	2300      	movs	r3, #0
 800de18:	e062      	b.n	800dee0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de20:	f107 0310 	add.w	r3, r7, #16
 800de24:	4618      	mov	r0, r3
 800de26:	f000 ff6d 	bl	800ed04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de2a:	2301      	movs	r3, #1
 800de2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de2e:	f001 fc5b 	bl	800f6e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de32:	f000 fd21 	bl	800e878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de36:	f001 fc29 	bl	800f68c <vPortEnterCritical>
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de40:	b25b      	sxtb	r3, r3
 800de42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de46:	d103      	bne.n	800de50 <xQueueReceive+0x11c>
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de56:	b25b      	sxtb	r3, r3
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5c:	d103      	bne.n	800de66 <xQueueReceive+0x132>
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de66:	f001 fc3f 	bl	800f6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de6a:	1d3a      	adds	r2, r7, #4
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f000 ff5c 	bl	800ed30 <xTaskCheckForTimeOut>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d123      	bne.n	800dec6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de80:	f000 fab3 	bl	800e3ea <prvIsQueueEmpty>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d017      	beq.n	800deba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	3324      	adds	r3, #36	; 0x24
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f000 feb0 	bl	800ebf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de9a:	f000 fa54 	bl	800e346 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de9e:	f000 fcf9 	bl	800e894 <xTaskResumeAll>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d189      	bne.n	800ddbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800dea8:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <xQueueReceive+0x1b4>)
 800deaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	e780      	b.n	800ddbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800deba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800debc:	f000 fa43 	bl	800e346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dec0:	f000 fce8 	bl	800e894 <xTaskResumeAll>
 800dec4:	e77a      	b.n	800ddbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dec8:	f000 fa3d 	bl	800e346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800decc:	f000 fce2 	bl	800e894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ded0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ded2:	f000 fa8a 	bl	800e3ea <prvIsQueueEmpty>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f43f af6f 	beq.w	800ddbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dede:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3730      	adds	r7, #48	; 0x30
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08e      	sub	sp, #56	; 0x38
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800def6:	2300      	movs	r3, #0
 800def8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800defe:	2300      	movs	r3, #0
 800df00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df04:	2b00      	cmp	r3, #0
 800df06:	d109      	bne.n	800df1c <xQueueSemaphoreTake+0x30>
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	623b      	str	r3, [r7, #32]
 800df1a:	e7fe      	b.n	800df1a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df20:	2b00      	cmp	r3, #0
 800df22:	d009      	beq.n	800df38 <xQueueSemaphoreTake+0x4c>
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	61fb      	str	r3, [r7, #28]
 800df36:	e7fe      	b.n	800df36 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df38:	f001 f83e 	bl	800efb8 <xTaskGetSchedulerState>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d102      	bne.n	800df48 <xQueueSemaphoreTake+0x5c>
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <xQueueSemaphoreTake+0x60>
 800df48:	2301      	movs	r3, #1
 800df4a:	e000      	b.n	800df4e <xQueueSemaphoreTake+0x62>
 800df4c:	2300      	movs	r3, #0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <xQueueSemaphoreTake+0x7a>
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	61bb      	str	r3, [r7, #24]
 800df64:	e7fe      	b.n	800df64 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800df66:	f001 fb91 	bl	800f68c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df72:	2b00      	cmp	r3, #0
 800df74:	d024      	beq.n	800dfc0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df78:	1e5a      	subs	r2, r3, #1
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d104      	bne.n	800df90 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800df86:	f001 f9dd 	bl	800f344 <pvTaskIncrementMutexHeldCount>
 800df8a:	4602      	mov	r2, r0
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00f      	beq.n	800dfb8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	3310      	adds	r3, #16
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fe4f 	bl	800ec40 <xTaskRemoveFromEventList>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d007      	beq.n	800dfb8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfa8:	4b53      	ldr	r3, [pc, #332]	; (800e0f8 <xQueueSemaphoreTake+0x20c>)
 800dfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dfb8:	f001 fb96 	bl	800f6e8 <vPortExitCritical>
				return pdPASS;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e096      	b.n	800e0ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d110      	bne.n	800dfe8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d009      	beq.n	800dfe0 <xQueueSemaphoreTake+0xf4>
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	617b      	str	r3, [r7, #20]
 800dfde:	e7fe      	b.n	800dfde <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dfe0:	f001 fb82 	bl	800f6e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e082      	b.n	800e0ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfee:	f107 030c 	add.w	r3, r7, #12
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 fe86 	bl	800ed04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dffc:	f001 fb74 	bl	800f6e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e000:	f000 fc3a 	bl	800e878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e004:	f001 fb42 	bl	800f68c <vPortEnterCritical>
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e00e:	b25b      	sxtb	r3, r3
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e014:	d103      	bne.n	800e01e <xQueueSemaphoreTake+0x132>
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e024:	b25b      	sxtb	r3, r3
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02a:	d103      	bne.n	800e034 <xQueueSemaphoreTake+0x148>
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e034:	f001 fb58 	bl	800f6e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e038:	463a      	mov	r2, r7
 800e03a:	f107 030c 	add.w	r3, r7, #12
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fe75 	bl	800ed30 <xTaskCheckForTimeOut>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d132      	bne.n	800e0b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e04e:	f000 f9cc 	bl	800e3ea <prvIsQueueEmpty>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d026      	beq.n	800e0a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e060:	f001 fb14 	bl	800f68c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 ffc3 	bl	800eff4 <xTaskPriorityInherit>
 800e06e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e070:	f001 fb3a 	bl	800f6e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	3324      	adds	r3, #36	; 0x24
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 fdbb 	bl	800ebf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e084:	f000 f95f 	bl	800e346 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e088:	f000 fc04 	bl	800e894 <xTaskResumeAll>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f47f af69 	bne.w	800df66 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e094:	4b18      	ldr	r3, [pc, #96]	; (800e0f8 <xQueueSemaphoreTake+0x20c>)
 800e096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	e75f      	b.n	800df66 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0a8:	f000 f94d 	bl	800e346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0ac:	f000 fbf2 	bl	800e894 <xTaskResumeAll>
 800e0b0:	e759      	b.n	800df66 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e0b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0b4:	f000 f947 	bl	800e346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0b8:	f000 fbec 	bl	800e894 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0be:	f000 f994 	bl	800e3ea <prvIsQueueEmpty>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f43f af4e 	beq.w	800df66 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00d      	beq.n	800e0ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e0d0:	f001 fadc 	bl	800f68c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e0d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0d6:	f000 f88e 	bl	800e1f6 <prvGetDisinheritPriorityAfterTimeout>
 800e0da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f001 f890 	bl	800f208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e0e8:	f001 fafe 	bl	800f6e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3738      	adds	r7, #56	; 0x38
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	e000ed04 	.word	0xe000ed04

0800e0fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08e      	sub	sp, #56	; 0x38
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d109      	bne.n	800e126 <xQueueReceiveFromISR+0x2a>
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	623b      	str	r3, [r7, #32]
 800e124:	e7fe      	b.n	800e124 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d103      	bne.n	800e134 <xQueueReceiveFromISR+0x38>
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <xQueueReceiveFromISR+0x3c>
 800e134:	2301      	movs	r3, #1
 800e136:	e000      	b.n	800e13a <xQueueReceiveFromISR+0x3e>
 800e138:	2300      	movs	r3, #0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d109      	bne.n	800e152 <xQueueReceiveFromISR+0x56>
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	61fb      	str	r3, [r7, #28]
 800e150:	e7fe      	b.n	800e150 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e152:	f001 fb77 	bl	800f844 <vPortValidateInterruptPriority>
	__asm volatile
 800e156:	f3ef 8211 	mrs	r2, BASEPRI
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	61ba      	str	r2, [r7, #24]
 800e16c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e16e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d02f      	beq.n	800e1de <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e18c:	f000 f8b5 	bl	800e2fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	1e5a      	subs	r2, r3, #1
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d112      	bne.n	800e1c8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d016      	beq.n	800e1d8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	3310      	adds	r3, #16
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fd46 	bl	800ec40 <xTaskRemoveFromEventList>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00e      	beq.n	800e1d8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	e007      	b.n	800e1d8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	b25a      	sxtb	r2, r3
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	637b      	str	r3, [r7, #52]	; 0x34
 800e1dc:	e001      	b.n	800e1e2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3738      	adds	r7, #56	; 0x38
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b085      	sub	sp, #20
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e202:	2b00      	cmp	r3, #0
 800e204:	d006      	beq.n	800e214 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f1c3 0307 	rsb	r3, r3, #7
 800e210:	60fb      	str	r3, [r7, #12]
 800e212:	e001      	b.n	800e218 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e214:	2300      	movs	r3, #0
 800e216:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e218:	68fb      	ldr	r3, [r7, #12]
	}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b086      	sub	sp, #24
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	60f8      	str	r0, [r7, #12]
 800e22e:	60b9      	str	r1, [r7, #8]
 800e230:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e23a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10d      	bne.n	800e260 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d14d      	bne.n	800e2e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	4618      	mov	r0, r3
 800e252:	f000 ff55 	bl	800f100 <xTaskPriorityDisinherit>
 800e256:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	605a      	str	r2, [r3, #4]
 800e25e:	e043      	b.n	800e2e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d119      	bne.n	800e29a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6898      	ldr	r0, [r3, #8]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26e:	461a      	mov	r2, r3
 800e270:	68b9      	ldr	r1, [r7, #8]
 800e272:	f002 fa75 	bl	8010760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689a      	ldr	r2, [r3, #8]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27e:	441a      	add	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	689a      	ldr	r2, [r3, #8]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d32b      	bcc.n	800e2e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	609a      	str	r2, [r3, #8]
 800e298:	e026      	b.n	800e2e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	68d8      	ldr	r0, [r3, #12]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	68b9      	ldr	r1, [r7, #8]
 800e2a6:	f002 fa5b 	bl	8010760 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	68da      	ldr	r2, [r3, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b2:	425b      	negs	r3, r3
 800e2b4:	441a      	add	r2, r3
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	68da      	ldr	r2, [r3, #12]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d207      	bcs.n	800e2d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ce:	425b      	negs	r3, r3
 800e2d0:	441a      	add	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d105      	bne.n	800e2e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e2f0:	697b      	ldr	r3, [r7, #20]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d018      	beq.n	800e33e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	68da      	ldr	r2, [r3, #12]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e314:	441a      	add	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	68da      	ldr	r2, [r3, #12]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	429a      	cmp	r2, r3
 800e324:	d303      	bcc.n	800e32e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68d9      	ldr	r1, [r3, #12]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e336:	461a      	mov	r2, r3
 800e338:	6838      	ldr	r0, [r7, #0]
 800e33a:	f002 fa11 	bl	8010760 <memcpy>
	}
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b084      	sub	sp, #16
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e34e:	f001 f99d 	bl	800f68c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e358:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e35a:	e011      	b.n	800e380 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	2b00      	cmp	r3, #0
 800e362:	d012      	beq.n	800e38a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3324      	adds	r3, #36	; 0x24
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 fc69 	bl	800ec40 <xTaskRemoveFromEventList>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d001      	beq.n	800e378 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e374:	f000 fd3c 	bl	800edf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e378:	7bfb      	ldrb	r3, [r7, #15]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e384:	2b00      	cmp	r3, #0
 800e386:	dce9      	bgt.n	800e35c <prvUnlockQueue+0x16>
 800e388:	e000      	b.n	800e38c <prvUnlockQueue+0x46>
					break;
 800e38a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	22ff      	movs	r2, #255	; 0xff
 800e390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e394:	f001 f9a8 	bl	800f6e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e398:	f001 f978 	bl	800f68c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3a4:	e011      	b.n	800e3ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d012      	beq.n	800e3d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3310      	adds	r3, #16
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 fc44 	bl	800ec40 <xTaskRemoveFromEventList>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3be:	f000 fd17 	bl	800edf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	dce9      	bgt.n	800e3a6 <prvUnlockQueue+0x60>
 800e3d2:	e000      	b.n	800e3d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e3d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	22ff      	movs	r2, #255	; 0xff
 800e3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e3de:	f001 f983 	bl	800f6e8 <vPortExitCritical>
}
 800e3e2:	bf00      	nop
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3f2:	f001 f94b 	bl	800f68c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e3fe:	2301      	movs	r3, #1
 800e400:	60fb      	str	r3, [r7, #12]
 800e402:	e001      	b.n	800e408 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e404:	2300      	movs	r3, #0
 800e406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e408:	f001 f96e 	bl	800f6e8 <vPortExitCritical>

	return xReturn;
 800e40c:	68fb      	ldr	r3, [r7, #12]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e41e:	f001 f935 	bl	800f68c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d102      	bne.n	800e434 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e42e:	2301      	movs	r3, #1
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	e001      	b.n	800e438 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e438:	f001 f956 	bl	800f6e8 <vPortExitCritical>

	return xReturn;
 800e43c:	68fb      	ldr	r3, [r7, #12]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e446:	b580      	push	{r7, lr}
 800e448:	b08e      	sub	sp, #56	; 0x38
 800e44a:	af04      	add	r7, sp, #16
 800e44c:	60f8      	str	r0, [r7, #12]
 800e44e:	60b9      	str	r1, [r7, #8]
 800e450:	607a      	str	r2, [r7, #4]
 800e452:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e456:	2b00      	cmp	r3, #0
 800e458:	d109      	bne.n	800e46e <xTaskCreateStatic+0x28>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	623b      	str	r3, [r7, #32]
 800e46c:	e7fe      	b.n	800e46c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	2b00      	cmp	r3, #0
 800e472:	d109      	bne.n	800e488 <xTaskCreateStatic+0x42>
 800e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	61fb      	str	r3, [r7, #28]
 800e486:	e7fe      	b.n	800e486 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e488:	2354      	movs	r3, #84	; 0x54
 800e48a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	2b54      	cmp	r3, #84	; 0x54
 800e490:	d009      	beq.n	800e4a6 <xTaskCreateStatic+0x60>
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	61bb      	str	r3, [r7, #24]
 800e4a4:	e7fe      	b.n	800e4a4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01e      	beq.n	800e4ea <xTaskCreateStatic+0xa4>
 800e4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d01b      	beq.n	800e4ea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	2202      	movs	r2, #2
 800e4c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	9302      	str	r3, [sp, #8]
 800e4cc:	f107 0314 	add.w	r3, r7, #20
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 f850 	bl	800e582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4e4:	f000 f8cc 	bl	800e680 <prvAddNewTaskToReadyList>
 800e4e8:	e001      	b.n	800e4ee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4ee:	697b      	ldr	r3, [r7, #20]
	}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3728      	adds	r7, #40	; 0x28
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08c      	sub	sp, #48	; 0x30
 800e4fc:	af04      	add	r7, sp, #16
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	603b      	str	r3, [r7, #0]
 800e504:	4613      	mov	r3, r2
 800e506:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e508:	88fb      	ldrh	r3, [r7, #6]
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f001 f9d7 	bl	800f8c0 <pvPortMalloc>
 800e512:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00e      	beq.n	800e538 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e51a:	2054      	movs	r0, #84	; 0x54
 800e51c:	f001 f9d0 	bl	800f8c0 <pvPortMalloc>
 800e520:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	631a      	str	r2, [r3, #48]	; 0x30
 800e52e:	e005      	b.n	800e53c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	f001 fa87 	bl	800fa44 <vPortFree>
 800e536:	e001      	b.n	800e53c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d017      	beq.n	800e572 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e54a:	88fa      	ldrh	r2, [r7, #6]
 800e54c:	2300      	movs	r3, #0
 800e54e:	9303      	str	r3, [sp, #12]
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	68b9      	ldr	r1, [r7, #8]
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 f80e 	bl	800e582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e566:	69f8      	ldr	r0, [r7, #28]
 800e568:	f000 f88a 	bl	800e680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e56c:	2301      	movs	r3, #1
 800e56e:	61bb      	str	r3, [r7, #24]
 800e570:	e002      	b.n	800e578 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e572:	f04f 33ff 	mov.w	r3, #4294967295
 800e576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e578:	69bb      	ldr	r3, [r7, #24]
	}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3720      	adds	r7, #32
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b088      	sub	sp, #32
 800e586:	af00      	add	r7, sp, #0
 800e588:	60f8      	str	r0, [r7, #12]
 800e58a:	60b9      	str	r1, [r7, #8]
 800e58c:	607a      	str	r2, [r7, #4]
 800e58e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e59a:	3b01      	subs	r3, #1
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	f023 0307 	bic.w	r3, r3, #7
 800e5a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	f003 0307 	and.w	r3, r3, #7
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d009      	beq.n	800e5c8 <prvInitialiseNewTask+0x46>
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	617b      	str	r3, [r7, #20]
 800e5c6:	e7fe      	b.n	800e5c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	e012      	b.n	800e5f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	7819      	ldrb	r1, [r3, #0]
 800e5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	4413      	add	r3, r2
 800e5dc:	3334      	adds	r3, #52	; 0x34
 800e5de:	460a      	mov	r2, r1
 800e5e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d006      	beq.n	800e5fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	61fb      	str	r3, [r7, #28]
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	2b0f      	cmp	r3, #15
 800e5f8:	d9e9      	bls.n	800e5ce <prvInitialiseNewTask+0x4c>
 800e5fa:	e000      	b.n	800e5fe <prvInitialiseNewTask+0x7c>
		{
			break;
 800e5fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	2200      	movs	r2, #0
 800e602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	2b06      	cmp	r3, #6
 800e60a:	d901      	bls.n	800e610 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e60c:	2306      	movs	r3, #6
 800e60e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e61a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	2200      	movs	r2, #0
 800e620:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	3304      	adds	r3, #4
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe ff53 	bl	800d4d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62e:	3318      	adds	r3, #24
 800e630:	4618      	mov	r0, r3
 800e632:	f7fe ff4e 	bl	800d4d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e63a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	f1c3 0207 	rsb	r2, r3, #7
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e64a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	2200      	movs	r2, #0
 800e650:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	68f9      	ldr	r1, [r7, #12]
 800e65e:	69b8      	ldr	r0, [r7, #24]
 800e660:	f000 feea 	bl	800f438 <pxPortInitialiseStack>
 800e664:	4602      	mov	r2, r0
 800e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e668:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e676:	bf00      	nop
 800e678:	3720      	adds	r7, #32
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e688:	f001 f800 	bl	800f68c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e68c:	4b2a      	ldr	r3, [pc, #168]	; (800e738 <prvAddNewTaskToReadyList+0xb8>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3301      	adds	r3, #1
 800e692:	4a29      	ldr	r2, [pc, #164]	; (800e738 <prvAddNewTaskToReadyList+0xb8>)
 800e694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e696:	4b29      	ldr	r3, [pc, #164]	; (800e73c <prvAddNewTaskToReadyList+0xbc>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d109      	bne.n	800e6b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e69e:	4a27      	ldr	r2, [pc, #156]	; (800e73c <prvAddNewTaskToReadyList+0xbc>)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6a4:	4b24      	ldr	r3, [pc, #144]	; (800e738 <prvAddNewTaskToReadyList+0xb8>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d110      	bne.n	800e6ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6ac:	f000 fbc4 	bl	800ee38 <prvInitialiseTaskLists>
 800e6b0:	e00d      	b.n	800e6ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6b2:	4b23      	ldr	r3, [pc, #140]	; (800e740 <prvAddNewTaskToReadyList+0xc0>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6ba:	4b20      	ldr	r3, [pc, #128]	; (800e73c <prvAddNewTaskToReadyList+0xbc>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d802      	bhi.n	800e6ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6c8:	4a1c      	ldr	r2, [pc, #112]	; (800e73c <prvAddNewTaskToReadyList+0xbc>)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6ce:	4b1d      	ldr	r3, [pc, #116]	; (800e744 <prvAddNewTaskToReadyList+0xc4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	4a1b      	ldr	r2, [pc, #108]	; (800e744 <prvAddNewTaskToReadyList+0xc4>)
 800e6d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	2201      	movs	r2, #1
 800e6de:	409a      	lsls	r2, r3
 800e6e0:	4b19      	ldr	r3, [pc, #100]	; (800e748 <prvAddNewTaskToReadyList+0xc8>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	4a18      	ldr	r2, [pc, #96]	; (800e748 <prvAddNewTaskToReadyList+0xc8>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4a15      	ldr	r2, [pc, #84]	; (800e74c <prvAddNewTaskToReadyList+0xcc>)
 800e6f8:	441a      	add	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fe fef3 	bl	800d4ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e706:	f000 ffef 	bl	800f6e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e70a:	4b0d      	ldr	r3, [pc, #52]	; (800e740 <prvAddNewTaskToReadyList+0xc0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00e      	beq.n	800e730 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e712:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <prvAddNewTaskToReadyList+0xbc>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d207      	bcs.n	800e730 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e720:	4b0b      	ldr	r3, [pc, #44]	; (800e750 <prvAddNewTaskToReadyList+0xd0>)
 800e722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20001580 	.word	0x20001580
 800e73c:	20001480 	.word	0x20001480
 800e740:	2000158c 	.word	0x2000158c
 800e744:	2000159c 	.word	0x2000159c
 800e748:	20001588 	.word	0x20001588
 800e74c:	20001484 	.word	0x20001484
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d016      	beq.n	800e794 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e766:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <vTaskDelay+0x60>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d009      	beq.n	800e782 <vTaskDelay+0x2e>
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	60bb      	str	r3, [r7, #8]
 800e780:	e7fe      	b.n	800e780 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e782:	f000 f879 	bl	800e878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e786:	2100      	movs	r1, #0
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fdef 	bl	800f36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e78e:	f000 f881 	bl	800e894 <xTaskResumeAll>
 800e792:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d107      	bne.n	800e7aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e79a:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <vTaskDelay+0x64>)
 800e79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7a0:	601a      	str	r2, [r3, #0]
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	200015a8 	.word	0x200015a8
 800e7b8:	e000ed04 	.word	0xe000ed04

0800e7bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08a      	sub	sp, #40	; 0x28
 800e7c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7ca:	463a      	mov	r2, r7
 800e7cc:	1d39      	adds	r1, r7, #4
 800e7ce:	f107 0308 	add.w	r3, r7, #8
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f3 fb36 	bl	8001e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68ba      	ldr	r2, [r7, #8]
 800e7de:	9202      	str	r2, [sp, #8]
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	460a      	mov	r2, r1
 800e7ea:	491d      	ldr	r1, [pc, #116]	; (800e860 <vTaskStartScheduler+0xa4>)
 800e7ec:	481d      	ldr	r0, [pc, #116]	; (800e864 <vTaskStartScheduler+0xa8>)
 800e7ee:	f7ff fe2a 	bl	800e446 <xTaskCreateStatic>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	4b1c      	ldr	r3, [pc, #112]	; (800e868 <vTaskStartScheduler+0xac>)
 800e7f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7f8:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <vTaskStartScheduler+0xac>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e800:	2301      	movs	r3, #1
 800e802:	617b      	str	r3, [r7, #20]
 800e804:	e001      	b.n	800e80a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e806:	2300      	movs	r3, #0
 800e808:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d115      	bne.n	800e83c <vTaskStartScheduler+0x80>
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e822:	4b12      	ldr	r3, [pc, #72]	; (800e86c <vTaskStartScheduler+0xb0>)
 800e824:	f04f 32ff 	mov.w	r2, #4294967295
 800e828:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e82a:	4b11      	ldr	r3, [pc, #68]	; (800e870 <vTaskStartScheduler+0xb4>)
 800e82c:	2201      	movs	r2, #1
 800e82e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e830:	4b10      	ldr	r3, [pc, #64]	; (800e874 <vTaskStartScheduler+0xb8>)
 800e832:	2200      	movs	r2, #0
 800e834:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e836:	f000 fe8b 	bl	800f550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e83a:	e00d      	b.n	800e858 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e842:	d109      	bne.n	800e858 <vTaskStartScheduler+0x9c>
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	f383 8811 	msr	BASEPRI, r3
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f3bf 8f4f 	dsb	sy
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	e7fe      	b.n	800e856 <vTaskStartScheduler+0x9a>
}
 800e858:	bf00      	nop
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	08015e94 	.word	0x08015e94
 800e864:	0800ee09 	.word	0x0800ee09
 800e868:	200015a4 	.word	0x200015a4
 800e86c:	200015a0 	.word	0x200015a0
 800e870:	2000158c 	.word	0x2000158c
 800e874:	20001584 	.word	0x20001584

0800e878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e87c:	4b04      	ldr	r3, [pc, #16]	; (800e890 <vTaskSuspendAll+0x18>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3301      	adds	r3, #1
 800e882:	4a03      	ldr	r2, [pc, #12]	; (800e890 <vTaskSuspendAll+0x18>)
 800e884:	6013      	str	r3, [r2, #0]
}
 800e886:	bf00      	nop
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	200015a8 	.word	0x200015a8

0800e894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e8a2:	4b41      	ldr	r3, [pc, #260]	; (800e9a8 <xTaskResumeAll+0x114>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d109      	bne.n	800e8be <xTaskResumeAll+0x2a>
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	603b      	str	r3, [r7, #0]
 800e8bc:	e7fe      	b.n	800e8bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8be:	f000 fee5 	bl	800f68c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8c2:	4b39      	ldr	r3, [pc, #228]	; (800e9a8 <xTaskResumeAll+0x114>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	4a37      	ldr	r2, [pc, #220]	; (800e9a8 <xTaskResumeAll+0x114>)
 800e8ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8cc:	4b36      	ldr	r3, [pc, #216]	; (800e9a8 <xTaskResumeAll+0x114>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d161      	bne.n	800e998 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8d4:	4b35      	ldr	r3, [pc, #212]	; (800e9ac <xTaskResumeAll+0x118>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d05d      	beq.n	800e998 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8dc:	e02e      	b.n	800e93c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e8de:	4b34      	ldr	r3, [pc, #208]	; (800e9b0 <xTaskResumeAll+0x11c>)
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3318      	adds	r3, #24
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fe5b 	bl	800d5a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fe56 	bl	800d5a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fe:	2201      	movs	r2, #1
 800e900:	409a      	lsls	r2, r3
 800e902:	4b2c      	ldr	r3, [pc, #176]	; (800e9b4 <xTaskResumeAll+0x120>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4313      	orrs	r3, r2
 800e908:	4a2a      	ldr	r2, [pc, #168]	; (800e9b4 <xTaskResumeAll+0x120>)
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4a27      	ldr	r2, [pc, #156]	; (800e9b8 <xTaskResumeAll+0x124>)
 800e91a:	441a      	add	r2, r3
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7fe fde2 	bl	800d4ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92c:	4b23      	ldr	r3, [pc, #140]	; (800e9bc <xTaskResumeAll+0x128>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	429a      	cmp	r2, r3
 800e934:	d302      	bcc.n	800e93c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800e936:	4b22      	ldr	r3, [pc, #136]	; (800e9c0 <xTaskResumeAll+0x12c>)
 800e938:	2201      	movs	r2, #1
 800e93a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e93c:	4b1c      	ldr	r3, [pc, #112]	; (800e9b0 <xTaskResumeAll+0x11c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1cc      	bne.n	800e8de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e94a:	f000 fb0f 	bl	800ef6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e94e:	4b1d      	ldr	r3, [pc, #116]	; (800e9c4 <xTaskResumeAll+0x130>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d010      	beq.n	800e97c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e95a:	f000 f837 	bl	800e9cc <xTaskIncrementTick>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800e964:	4b16      	ldr	r3, [pc, #88]	; (800e9c0 <xTaskResumeAll+0x12c>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1f1      	bne.n	800e95a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800e976:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <xTaskResumeAll+0x130>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e97c:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <xTaskResumeAll+0x12c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e984:	2301      	movs	r3, #1
 800e986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e988:	4b0f      	ldr	r3, [pc, #60]	; (800e9c8 <xTaskResumeAll+0x134>)
 800e98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e98e:	601a      	str	r2, [r3, #0]
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e998:	f000 fea6 	bl	800f6e8 <vPortExitCritical>

	return xAlreadyYielded;
 800e99c:	68bb      	ldr	r3, [r7, #8]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200015a8 	.word	0x200015a8
 800e9ac:	20001580 	.word	0x20001580
 800e9b0:	20001540 	.word	0x20001540
 800e9b4:	20001588 	.word	0x20001588
 800e9b8:	20001484 	.word	0x20001484
 800e9bc:	20001480 	.word	0x20001480
 800e9c0:	20001594 	.word	0x20001594
 800e9c4:	20001590 	.word	0x20001590
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9d6:	4b50      	ldr	r3, [pc, #320]	; (800eb18 <xTaskIncrementTick+0x14c>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f040 808c 	bne.w	800eaf8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9e0:	4b4e      	ldr	r3, [pc, #312]	; (800eb1c <xTaskIncrementTick+0x150>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9e8:	4a4c      	ldr	r2, [pc, #304]	; (800eb1c <xTaskIncrementTick+0x150>)
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d11f      	bne.n	800ea34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9f4:	4b4a      	ldr	r3, [pc, #296]	; (800eb20 <xTaskIncrementTick+0x154>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <xTaskIncrementTick+0x46>
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	e7fe      	b.n	800ea10 <xTaskIncrementTick+0x44>
 800ea12:	4b43      	ldr	r3, [pc, #268]	; (800eb20 <xTaskIncrementTick+0x154>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60fb      	str	r3, [r7, #12]
 800ea18:	4b42      	ldr	r3, [pc, #264]	; (800eb24 <xTaskIncrementTick+0x158>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a40      	ldr	r2, [pc, #256]	; (800eb20 <xTaskIncrementTick+0x154>)
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	4a40      	ldr	r2, [pc, #256]	; (800eb24 <xTaskIncrementTick+0x158>)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	4b40      	ldr	r3, [pc, #256]	; (800eb28 <xTaskIncrementTick+0x15c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	4a3e      	ldr	r2, [pc, #248]	; (800eb28 <xTaskIncrementTick+0x15c>)
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	f000 fa9c 	bl	800ef6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea34:	4b3d      	ldr	r3, [pc, #244]	; (800eb2c <xTaskIncrementTick+0x160>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	693a      	ldr	r2, [r7, #16]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d34d      	bcc.n	800eada <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea3e:	4b38      	ldr	r3, [pc, #224]	; (800eb20 <xTaskIncrementTick+0x154>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d101      	bne.n	800ea4c <xTaskIncrementTick+0x80>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e000      	b.n	800ea4e <xTaskIncrementTick+0x82>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d004      	beq.n	800ea5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea52:	4b36      	ldr	r3, [pc, #216]	; (800eb2c <xTaskIncrementTick+0x160>)
 800ea54:	f04f 32ff 	mov.w	r2, #4294967295
 800ea58:	601a      	str	r2, [r3, #0]
					break;
 800ea5a:	e03e      	b.n	800eada <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea5c:	4b30      	ldr	r3, [pc, #192]	; (800eb20 <xTaskIncrementTick+0x154>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d203      	bcs.n	800ea7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea74:	4a2d      	ldr	r2, [pc, #180]	; (800eb2c <xTaskIncrementTick+0x160>)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6013      	str	r3, [r2, #0]
						break;
 800ea7a:	e02e      	b.n	800eada <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe fd90 	bl	800d5a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d004      	beq.n	800ea98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	3318      	adds	r3, #24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fd87 	bl	800d5a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	409a      	lsls	r2, r3
 800eaa0:	4b23      	ldr	r3, [pc, #140]	; (800eb30 <xTaskIncrementTick+0x164>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	4a22      	ldr	r2, [pc, #136]	; (800eb30 <xTaskIncrementTick+0x164>)
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4a1f      	ldr	r2, [pc, #124]	; (800eb34 <xTaskIncrementTick+0x168>)
 800eab8:	441a      	add	r2, r3
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fe fd13 	bl	800d4ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4b1b      	ldr	r3, [pc, #108]	; (800eb38 <xTaskIncrementTick+0x16c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d3b4      	bcc.n	800ea3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ead4:	2301      	movs	r3, #1
 800ead6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ead8:	e7b1      	b.n	800ea3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eada:	4b17      	ldr	r3, [pc, #92]	; (800eb38 <xTaskIncrementTick+0x16c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae0:	4914      	ldr	r1, [pc, #80]	; (800eb34 <xTaskIncrementTick+0x168>)
 800eae2:	4613      	mov	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4413      	add	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	440b      	add	r3, r1
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d907      	bls.n	800eb02 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	617b      	str	r3, [r7, #20]
 800eaf6:	e004      	b.n	800eb02 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eaf8:	4b10      	ldr	r3, [pc, #64]	; (800eb3c <xTaskIncrementTick+0x170>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3301      	adds	r3, #1
 800eafe:	4a0f      	ldr	r2, [pc, #60]	; (800eb3c <xTaskIncrementTick+0x170>)
 800eb00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb02:	4b0f      	ldr	r3, [pc, #60]	; (800eb40 <xTaskIncrementTick+0x174>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d001      	beq.n	800eb0e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb0e:	697b      	ldr	r3, [r7, #20]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	200015a8 	.word	0x200015a8
 800eb1c:	20001584 	.word	0x20001584
 800eb20:	20001538 	.word	0x20001538
 800eb24:	2000153c 	.word	0x2000153c
 800eb28:	20001598 	.word	0x20001598
 800eb2c:	200015a0 	.word	0x200015a0
 800eb30:	20001588 	.word	0x20001588
 800eb34:	20001484 	.word	0x20001484
 800eb38:	20001480 	.word	0x20001480
 800eb3c:	20001590 	.word	0x20001590
 800eb40:	20001594 	.word	0x20001594

0800eb44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb4a:	4b26      	ldr	r3, [pc, #152]	; (800ebe4 <vTaskSwitchContext+0xa0>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb52:	4b25      	ldr	r3, [pc, #148]	; (800ebe8 <vTaskSwitchContext+0xa4>)
 800eb54:	2201      	movs	r2, #1
 800eb56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb58:	e03e      	b.n	800ebd8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800eb5a:	4b23      	ldr	r3, [pc, #140]	; (800ebe8 <vTaskSwitchContext+0xa4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800eb60:	4b22      	ldr	r3, [pc, #136]	; (800ebec <vTaskSwitchContext+0xa8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	fab3 f383 	clz	r3, r3
 800eb6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eb6e:	7afb      	ldrb	r3, [r7, #11]
 800eb70:	f1c3 031f 	rsb	r3, r3, #31
 800eb74:	617b      	str	r3, [r7, #20]
 800eb76:	491e      	ldr	r1, [pc, #120]	; (800ebf0 <vTaskSwitchContext+0xac>)
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	440b      	add	r3, r1
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d109      	bne.n	800eb9e <vTaskSwitchContext+0x5a>
	__asm volatile
 800eb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8e:	f383 8811 	msr	BASEPRI, r3
 800eb92:	f3bf 8f6f 	isb	sy
 800eb96:	f3bf 8f4f 	dsb	sy
 800eb9a:	607b      	str	r3, [r7, #4]
 800eb9c:	e7fe      	b.n	800eb9c <vTaskSwitchContext+0x58>
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	4613      	mov	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4a11      	ldr	r2, [pc, #68]	; (800ebf0 <vTaskSwitchContext+0xac>)
 800ebaa:	4413      	add	r3, r2
 800ebac:	613b      	str	r3, [r7, #16]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	605a      	str	r2, [r3, #4]
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d104      	bne.n	800ebce <vTaskSwitchContext+0x8a>
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	685a      	ldr	r2, [r3, #4]
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	605a      	str	r2, [r3, #4]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	4a07      	ldr	r2, [pc, #28]	; (800ebf4 <vTaskSwitchContext+0xb0>)
 800ebd6:	6013      	str	r3, [r2, #0]
}
 800ebd8:	bf00      	nop
 800ebda:	371c      	adds	r7, #28
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	200015a8 	.word	0x200015a8
 800ebe8:	20001594 	.word	0x20001594
 800ebec:	20001588 	.word	0x20001588
 800ebf0:	20001484 	.word	0x20001484
 800ebf4:	20001480 	.word	0x20001480

0800ebf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d109      	bne.n	800ec1c <vTaskPlaceOnEventList+0x24>
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60fb      	str	r3, [r7, #12]
 800ec1a:	e7fe      	b.n	800ec1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec1c:	4b07      	ldr	r3, [pc, #28]	; (800ec3c <vTaskPlaceOnEventList+0x44>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3318      	adds	r3, #24
 800ec22:	4619      	mov	r1, r3
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7fe fc85 	bl	800d534 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	6838      	ldr	r0, [r7, #0]
 800ec2e:	f000 fb9d 	bl	800f36c <prvAddCurrentTaskToDelayedList>
}
 800ec32:	bf00      	nop
 800ec34:	3710      	adds	r7, #16
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20001480 	.word	0x20001480

0800ec40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d109      	bne.n	800ec6a <xTaskRemoveFromEventList+0x2a>
 800ec56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e7fe      	b.n	800ec68 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	3318      	adds	r3, #24
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fc99 	bl	800d5a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec74:	4b1d      	ldr	r3, [pc, #116]	; (800ecec <xTaskRemoveFromEventList+0xac>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d11c      	bne.n	800ecb6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe fc90 	bl	800d5a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	409a      	lsls	r2, r3
 800ec8e:	4b18      	ldr	r3, [pc, #96]	; (800ecf0 <xTaskRemoveFromEventList+0xb0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	4a16      	ldr	r2, [pc, #88]	; (800ecf0 <xTaskRemoveFromEventList+0xb0>)
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	4413      	add	r3, r2
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4a13      	ldr	r2, [pc, #76]	; (800ecf4 <xTaskRemoveFromEventList+0xb4>)
 800eca6:	441a      	add	r2, r3
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4619      	mov	r1, r3
 800ecae:	4610      	mov	r0, r2
 800ecb0:	f7fe fc1c 	bl	800d4ec <vListInsertEnd>
 800ecb4:	e005      	b.n	800ecc2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	3318      	adds	r3, #24
 800ecba:	4619      	mov	r1, r3
 800ecbc:	480e      	ldr	r0, [pc, #56]	; (800ecf8 <xTaskRemoveFromEventList+0xb8>)
 800ecbe:	f7fe fc15 	bl	800d4ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <xTaskRemoveFromEventList+0xbc>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d905      	bls.n	800ecdc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	; (800ed00 <xTaskRemoveFromEventList+0xc0>)
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	e001      	b.n	800ece0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ece0:	697b      	ldr	r3, [r7, #20]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3718      	adds	r7, #24
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	200015a8 	.word	0x200015a8
 800ecf0:	20001588 	.word	0x20001588
 800ecf4:	20001484 	.word	0x20001484
 800ecf8:	20001540 	.word	0x20001540
 800ecfc:	20001480 	.word	0x20001480
 800ed00:	20001594 	.word	0x20001594

0800ed04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed0c:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <vTaskInternalSetTimeOutState+0x24>)
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed14:	4b05      	ldr	r3, [pc, #20]	; (800ed2c <vTaskInternalSetTimeOutState+0x28>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	605a      	str	r2, [r3, #4]
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	20001598 	.word	0x20001598
 800ed2c:	20001584 	.word	0x20001584

0800ed30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b088      	sub	sp, #32
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d109      	bne.n	800ed54 <xTaskCheckForTimeOut+0x24>
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	613b      	str	r3, [r7, #16]
 800ed52:	e7fe      	b.n	800ed52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d109      	bne.n	800ed6e <xTaskCheckForTimeOut+0x3e>
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	e7fe      	b.n	800ed6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ed6e:	f000 fc8d 	bl	800f68c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed72:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <xTaskCheckForTimeOut+0xb8>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8a:	d102      	bne.n	800ed92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61fb      	str	r3, [r7, #28]
 800ed90:	e023      	b.n	800edda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	4b15      	ldr	r3, [pc, #84]	; (800edec <xTaskCheckForTimeOut+0xbc>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d007      	beq.n	800edae <xTaskCheckForTimeOut+0x7e>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	69ba      	ldr	r2, [r7, #24]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d302      	bcc.n	800edae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eda8:	2301      	movs	r3, #1
 800edaa:	61fb      	str	r3, [r7, #28]
 800edac:	e015      	b.n	800edda <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d20b      	bcs.n	800edd0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	1ad2      	subs	r2, r2, r3
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff ff9d 	bl	800ed04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800edca:	2300      	movs	r3, #0
 800edcc:	61fb      	str	r3, [r7, #28]
 800edce:	e004      	b.n	800edda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800edd6:	2301      	movs	r3, #1
 800edd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800edda:	f000 fc85 	bl	800f6e8 <vPortExitCritical>

	return xReturn;
 800edde:	69fb      	ldr	r3, [r7, #28]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3720      	adds	r7, #32
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20001584 	.word	0x20001584
 800edec:	20001598 	.word	0x20001598

0800edf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800edf0:	b480      	push	{r7}
 800edf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800edf4:	4b03      	ldr	r3, [pc, #12]	; (800ee04 <vTaskMissedYield+0x14>)
 800edf6:	2201      	movs	r2, #1
 800edf8:	601a      	str	r2, [r3, #0]
}
 800edfa:	bf00      	nop
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr
 800ee04:	20001594 	.word	0x20001594

0800ee08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee10:	f000 f852 	bl	800eeb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee14:	4b06      	ldr	r3, [pc, #24]	; (800ee30 <prvIdleTask+0x28>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d9f9      	bls.n	800ee10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee1c:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <prvIdleTask+0x2c>)
 800ee1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee2c:	e7f0      	b.n	800ee10 <prvIdleTask+0x8>
 800ee2e:	bf00      	nop
 800ee30:	20001484 	.word	0x20001484
 800ee34:	e000ed04 	.word	0xe000ed04

0800ee38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee3e:	2300      	movs	r3, #0
 800ee40:	607b      	str	r3, [r7, #4]
 800ee42:	e00c      	b.n	800ee5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	4613      	mov	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4a12      	ldr	r2, [pc, #72]	; (800ee98 <prvInitialiseTaskLists+0x60>)
 800ee50:	4413      	add	r3, r2
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fb1d 	bl	800d492 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	607b      	str	r3, [r7, #4]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2b06      	cmp	r3, #6
 800ee62:	d9ef      	bls.n	800ee44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee64:	480d      	ldr	r0, [pc, #52]	; (800ee9c <prvInitialiseTaskLists+0x64>)
 800ee66:	f7fe fb14 	bl	800d492 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee6a:	480d      	ldr	r0, [pc, #52]	; (800eea0 <prvInitialiseTaskLists+0x68>)
 800ee6c:	f7fe fb11 	bl	800d492 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ee70:	480c      	ldr	r0, [pc, #48]	; (800eea4 <prvInitialiseTaskLists+0x6c>)
 800ee72:	f7fe fb0e 	bl	800d492 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ee76:	480c      	ldr	r0, [pc, #48]	; (800eea8 <prvInitialiseTaskLists+0x70>)
 800ee78:	f7fe fb0b 	bl	800d492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ee7c:	480b      	ldr	r0, [pc, #44]	; (800eeac <prvInitialiseTaskLists+0x74>)
 800ee7e:	f7fe fb08 	bl	800d492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ee82:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <prvInitialiseTaskLists+0x78>)
 800ee84:	4a05      	ldr	r2, [pc, #20]	; (800ee9c <prvInitialiseTaskLists+0x64>)
 800ee86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <prvInitialiseTaskLists+0x7c>)
 800ee8a:	4a05      	ldr	r2, [pc, #20]	; (800eea0 <prvInitialiseTaskLists+0x68>)
 800ee8c:	601a      	str	r2, [r3, #0]
}
 800ee8e:	bf00      	nop
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20001484 	.word	0x20001484
 800ee9c:	20001510 	.word	0x20001510
 800eea0:	20001524 	.word	0x20001524
 800eea4:	20001540 	.word	0x20001540
 800eea8:	20001554 	.word	0x20001554
 800eeac:	2000156c 	.word	0x2000156c
 800eeb0:	20001538 	.word	0x20001538
 800eeb4:	2000153c 	.word	0x2000153c

0800eeb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eebe:	e019      	b.n	800eef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eec0:	f000 fbe4 	bl	800f68c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800eec4:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <prvCheckTasksWaitingTermination+0x4c>)
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3304      	adds	r3, #4
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fb68 	bl	800d5a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eed6:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <prvCheckTasksWaitingTermination+0x50>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	4a0a      	ldr	r2, [pc, #40]	; (800ef08 <prvCheckTasksWaitingTermination+0x50>)
 800eede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eee0:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <prvCheckTasksWaitingTermination+0x54>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3b01      	subs	r3, #1
 800eee6:	4a09      	ldr	r2, [pc, #36]	; (800ef0c <prvCheckTasksWaitingTermination+0x54>)
 800eee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eeea:	f000 fbfd 	bl	800f6e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 f80e 	bl	800ef10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eef4:	4b05      	ldr	r3, [pc, #20]	; (800ef0c <prvCheckTasksWaitingTermination+0x54>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1e1      	bne.n	800eec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	20001554 	.word	0x20001554
 800ef08:	20001580 	.word	0x20001580
 800ef0c:	20001568 	.word	0x20001568

0800ef10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d108      	bne.n	800ef34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 fd8c 	bl	800fa44 <vPortFree>
				vPortFree( pxTCB );
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fd89 	bl	800fa44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef32:	e017      	b.n	800ef64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d103      	bne.n	800ef46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fd80 	bl	800fa44 <vPortFree>
	}
 800ef44:	e00e      	b.n	800ef64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d009      	beq.n	800ef64 <prvDeleteTCB+0x54>
 800ef50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef54:	f383 8811 	msr	BASEPRI, r3
 800ef58:	f3bf 8f6f 	isb	sy
 800ef5c:	f3bf 8f4f 	dsb	sy
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	e7fe      	b.n	800ef62 <prvDeleteTCB+0x52>
	}
 800ef64:	bf00      	nop
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef72:	4b0f      	ldr	r3, [pc, #60]	; (800efb0 <prvResetNextTaskUnblockTime+0x44>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d101      	bne.n	800ef80 <prvResetNextTaskUnblockTime+0x14>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e000      	b.n	800ef82 <prvResetNextTaskUnblockTime+0x16>
 800ef80:	2300      	movs	r3, #0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d004      	beq.n	800ef90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef86:	4b0b      	ldr	r3, [pc, #44]	; (800efb4 <prvResetNextTaskUnblockTime+0x48>)
 800ef88:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef8e:	e008      	b.n	800efa2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ef90:	4b07      	ldr	r3, [pc, #28]	; (800efb0 <prvResetNextTaskUnblockTime+0x44>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	4a05      	ldr	r2, [pc, #20]	; (800efb4 <prvResetNextTaskUnblockTime+0x48>)
 800efa0:	6013      	str	r3, [r2, #0]
}
 800efa2:	bf00      	nop
 800efa4:	370c      	adds	r7, #12
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	20001538 	.word	0x20001538
 800efb4:	200015a0 	.word	0x200015a0

0800efb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800efbe:	4b0b      	ldr	r3, [pc, #44]	; (800efec <xTaskGetSchedulerState+0x34>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d102      	bne.n	800efcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800efc6:	2301      	movs	r3, #1
 800efc8:	607b      	str	r3, [r7, #4]
 800efca:	e008      	b.n	800efde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efcc:	4b08      	ldr	r3, [pc, #32]	; (800eff0 <xTaskGetSchedulerState+0x38>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d102      	bne.n	800efda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800efd4:	2302      	movs	r3, #2
 800efd6:	607b      	str	r3, [r7, #4]
 800efd8:	e001      	b.n	800efde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800efda:	2300      	movs	r3, #0
 800efdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800efde:	687b      	ldr	r3, [r7, #4]
	}
 800efe0:	4618      	mov	r0, r3
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	2000158c 	.word	0x2000158c
 800eff0:	200015a8 	.word	0x200015a8

0800eff4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f000:	2300      	movs	r3, #0
 800f002:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d06e      	beq.n	800f0e8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f00e:	4b39      	ldr	r3, [pc, #228]	; (800f0f4 <xTaskPriorityInherit+0x100>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f014:	429a      	cmp	r2, r3
 800f016:	d25e      	bcs.n	800f0d6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	db06      	blt.n	800f02e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f020:	4b34      	ldr	r3, [pc, #208]	; (800f0f4 <xTaskPriorityInherit+0x100>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f026:	f1c3 0207 	rsb	r2, r3, #7
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	6959      	ldr	r1, [r3, #20]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f036:	4613      	mov	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4413      	add	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4a2e      	ldr	r2, [pc, #184]	; (800f0f8 <xTaskPriorityInherit+0x104>)
 800f040:	4413      	add	r3, r2
 800f042:	4299      	cmp	r1, r3
 800f044:	d101      	bne.n	800f04a <xTaskPriorityInherit+0x56>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <xTaskPriorityInherit+0x58>
 800f04a:	2300      	movs	r3, #0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d03a      	beq.n	800f0c6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3304      	adds	r3, #4
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe faa6 	bl	800d5a6 <uxListRemove>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d115      	bne.n	800f08c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f064:	4924      	ldr	r1, [pc, #144]	; (800f0f8 <xTaskPriorityInherit+0x104>)
 800f066:	4613      	mov	r3, r2
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4413      	add	r3, r2
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	440b      	add	r3, r1
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10a      	bne.n	800f08c <xTaskPriorityInherit+0x98>
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	2201      	movs	r2, #1
 800f07c:	fa02 f303 	lsl.w	r3, r2, r3
 800f080:	43da      	mvns	r2, r3
 800f082:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <xTaskPriorityInherit+0x108>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4013      	ands	r3, r2
 800f088:	4a1c      	ldr	r2, [pc, #112]	; (800f0fc <xTaskPriorityInherit+0x108>)
 800f08a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f08c:	4b19      	ldr	r3, [pc, #100]	; (800f0f4 <xTaskPriorityInherit+0x100>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	2201      	movs	r2, #1
 800f09c:	409a      	lsls	r2, r3
 800f09e:	4b17      	ldr	r3, [pc, #92]	; (800f0fc <xTaskPriorityInherit+0x108>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	4a15      	ldr	r2, [pc, #84]	; (800f0fc <xTaskPriorityInherit+0x108>)
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	4413      	add	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4a10      	ldr	r2, [pc, #64]	; (800f0f8 <xTaskPriorityInherit+0x104>)
 800f0b6:	441a      	add	r2, r3
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	4619      	mov	r1, r3
 800f0be:	4610      	mov	r0, r2
 800f0c0:	f7fe fa14 	bl	800d4ec <vListInsertEnd>
 800f0c4:	e004      	b.n	800f0d0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0c6:	4b0b      	ldr	r3, [pc, #44]	; (800f0f4 <xTaskPriorityInherit+0x100>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	60fb      	str	r3, [r7, #12]
 800f0d4:	e008      	b.n	800f0e8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0da:	4b06      	ldr	r3, [pc, #24]	; (800f0f4 <xTaskPriorityInherit+0x100>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d201      	bcs.n	800f0e8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
	}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20001480 	.word	0x20001480
 800f0f8:	20001484 	.word	0x20001484
 800f0fc:	20001588 	.word	0x20001588

0800f100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f10c:	2300      	movs	r3, #0
 800f10e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d06c      	beq.n	800f1f0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f116:	4b39      	ldr	r3, [pc, #228]	; (800f1fc <xTaskPriorityDisinherit+0xfc>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d009      	beq.n	800f134 <xTaskPriorityDisinherit+0x34>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	e7fe      	b.n	800f132 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d109      	bne.n	800f150 <xTaskPriorityDisinherit+0x50>
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	60bb      	str	r3, [r7, #8]
 800f14e:	e7fe      	b.n	800f14e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f154:	1e5a      	subs	r2, r3, #1
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f162:	429a      	cmp	r2, r3
 800f164:	d044      	beq.n	800f1f0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d140      	bne.n	800f1f0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	3304      	adds	r3, #4
 800f172:	4618      	mov	r0, r3
 800f174:	f7fe fa17 	bl	800d5a6 <uxListRemove>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d115      	bne.n	800f1aa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f182:	491f      	ldr	r1, [pc, #124]	; (800f200 <xTaskPriorityDisinherit+0x100>)
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	440b      	add	r3, r1
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10a      	bne.n	800f1aa <xTaskPriorityDisinherit+0xaa>
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	2201      	movs	r2, #1
 800f19a:	fa02 f303 	lsl.w	r3, r2, r3
 800f19e:	43da      	mvns	r2, r3
 800f1a0:	4b18      	ldr	r3, [pc, #96]	; (800f204 <xTaskPriorityDisinherit+0x104>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	4a17      	ldr	r2, [pc, #92]	; (800f204 <xTaskPriorityDisinherit+0x104>)
 800f1a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b6:	f1c3 0207 	rsb	r2, r3, #7
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	409a      	lsls	r2, r3
 800f1c6:	4b0f      	ldr	r3, [pc, #60]	; (800f204 <xTaskPriorityDisinherit+0x104>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	4a0d      	ldr	r2, [pc, #52]	; (800f204 <xTaskPriorityDisinherit+0x104>)
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4a08      	ldr	r2, [pc, #32]	; (800f200 <xTaskPriorityDisinherit+0x100>)
 800f1de:	441a      	add	r2, r3
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7fe f980 	bl	800d4ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1f0:	697b      	ldr	r3, [r7, #20]
	}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20001480 	.word	0x20001480
 800f200:	20001484 	.word	0x20001484
 800f204:	20001588 	.word	0x20001588

0800f208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f216:	2301      	movs	r3, #1
 800f218:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 8086 	beq.w	800f32e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f226:	2b00      	cmp	r3, #0
 800f228:	d109      	bne.n	800f23e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800f22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	e7fe      	b.n	800f23c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f242:	683a      	ldr	r2, [r7, #0]
 800f244:	429a      	cmp	r2, r3
 800f246:	d902      	bls.n	800f24e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	e002      	b.n	800f254 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f252:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f258:	69fa      	ldr	r2, [r7, #28]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d067      	beq.n	800f32e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	429a      	cmp	r2, r3
 800f266:	d162      	bne.n	800f32e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f268:	4b33      	ldr	r3, [pc, #204]	; (800f338 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	69ba      	ldr	r2, [r7, #24]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d109      	bne.n	800f286 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	60bb      	str	r3, [r7, #8]
 800f284:	e7fe      	b.n	800f284 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	69fa      	ldr	r2, [r7, #28]
 800f290:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	699b      	ldr	r3, [r3, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	db04      	blt.n	800f2a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	f1c3 0207 	rsb	r2, r3, #7
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	6959      	ldr	r1, [r3, #20]
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4a22      	ldr	r2, [pc, #136]	; (800f33c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f2b4:	4413      	add	r3, r2
 800f2b6:	4299      	cmp	r1, r3
 800f2b8:	d101      	bne.n	800f2be <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e000      	b.n	800f2c0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d034      	beq.n	800f32e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe f96c 	bl	800d5a6 <uxListRemove>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d115      	bne.n	800f300 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d8:	4918      	ldr	r1, [pc, #96]	; (800f33c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10a      	bne.n	800f300 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f4:	43da      	mvns	r2, r3
 800f2f6:	4b12      	ldr	r3, [pc, #72]	; (800f340 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	4a10      	ldr	r2, [pc, #64]	; (800f340 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f2fe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f304:	2201      	movs	r2, #1
 800f306:	409a      	lsls	r2, r3
 800f308:	4b0d      	ldr	r3, [pc, #52]	; (800f340 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	4a0c      	ldr	r2, [pc, #48]	; (800f340 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f310:	6013      	str	r3, [r2, #0]
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	4a07      	ldr	r2, [pc, #28]	; (800f33c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f320:	441a      	add	r2, r3
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	3304      	adds	r3, #4
 800f326:	4619      	mov	r1, r3
 800f328:	4610      	mov	r0, r2
 800f32a:	f7fe f8df 	bl	800d4ec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f32e:	bf00      	nop
 800f330:	3720      	adds	r7, #32
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20001480 	.word	0x20001480
 800f33c:	20001484 	.word	0x20001484
 800f340:	20001588 	.word	0x20001588

0800f344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800f344:	b480      	push	{r7}
 800f346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f348:	4b07      	ldr	r3, [pc, #28]	; (800f368 <pvTaskIncrementMutexHeldCount+0x24>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f350:	4b05      	ldr	r3, [pc, #20]	; (800f368 <pvTaskIncrementMutexHeldCount+0x24>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f356:	3201      	adds	r2, #1
 800f358:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f35a:	4b03      	ldr	r3, [pc, #12]	; (800f368 <pvTaskIncrementMutexHeldCount+0x24>)
 800f35c:	681b      	ldr	r3, [r3, #0]
	}
 800f35e:	4618      	mov	r0, r3
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	20001480 	.word	0x20001480

0800f36c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f376:	4b29      	ldr	r3, [pc, #164]	; (800f41c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f37c:	4b28      	ldr	r3, [pc, #160]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3304      	adds	r3, #4
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe f90f 	bl	800d5a6 <uxListRemove>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10b      	bne.n	800f3a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800f38e:	4b24      	ldr	r3, [pc, #144]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f394:	2201      	movs	r2, #1
 800f396:	fa02 f303 	lsl.w	r3, r2, r3
 800f39a:	43da      	mvns	r2, r3
 800f39c:	4b21      	ldr	r3, [pc, #132]	; (800f424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	4a20      	ldr	r2, [pc, #128]	; (800f424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f3a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ac:	d10a      	bne.n	800f3c4 <prvAddCurrentTaskToDelayedList+0x58>
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d007      	beq.n	800f3c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3b4:	4b1a      	ldr	r3, [pc, #104]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	481a      	ldr	r0, [pc, #104]	; (800f428 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f3be:	f7fe f895 	bl	800d4ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3c2:	e026      	b.n	800f412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3cc:	4b14      	ldr	r3, [pc, #80]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d209      	bcs.n	800f3f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3dc:	4b13      	ldr	r3, [pc, #76]	; (800f42c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	4b0f      	ldr	r3, [pc, #60]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	f7fe f8a3 	bl	800d534 <vListInsert>
}
 800f3ee:	e010      	b.n	800f412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3f0:	4b0f      	ldr	r3, [pc, #60]	; (800f430 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	4b0a      	ldr	r3, [pc, #40]	; (800f420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7fe f899 	bl	800d534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f402:	4b0c      	ldr	r3, [pc, #48]	; (800f434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d202      	bcs.n	800f412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f40c:	4a09      	ldr	r2, [pc, #36]	; (800f434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6013      	str	r3, [r2, #0]
}
 800f412:	bf00      	nop
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	20001584 	.word	0x20001584
 800f420:	20001480 	.word	0x20001480
 800f424:	20001588 	.word	0x20001588
 800f428:	2000156c 	.word	0x2000156c
 800f42c:	2000153c 	.word	0x2000153c
 800f430:	20001538 	.word	0x20001538
 800f434:	200015a0 	.word	0x200015a0

0800f438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	3b04      	subs	r3, #4
 800f448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3b04      	subs	r3, #4
 800f456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f023 0201 	bic.w	r2, r3, #1
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3b04      	subs	r3, #4
 800f466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f468:	4a0c      	ldr	r2, [pc, #48]	; (800f49c <pxPortInitialiseStack+0x64>)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3b14      	subs	r3, #20
 800f472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3b04      	subs	r3, #4
 800f47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f06f 0202 	mvn.w	r2, #2
 800f486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	3b20      	subs	r3, #32
 800f48c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f48e:	68fb      	ldr	r3, [r7, #12]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	0800f4a1 	.word	0x0800f4a1

0800f4a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4aa:	4b11      	ldr	r3, [pc, #68]	; (800f4f0 <prvTaskExitError+0x50>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b2:	d009      	beq.n	800f4c8 <prvTaskExitError+0x28>
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	e7fe      	b.n	800f4c6 <prvTaskExitError+0x26>
 800f4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4da:	bf00      	nop
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0fc      	beq.n	800f4dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f4e2:	bf00      	nop
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	20000dd0 	.word	0x20000dd0
	...

0800f500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <pxCurrentTCBConst2>)
 800f502:	6819      	ldr	r1, [r3, #0]
 800f504:	6808      	ldr	r0, [r1, #0]
 800f506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50a:	f380 8809 	msr	PSP, r0
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f04f 0000 	mov.w	r0, #0
 800f516:	f380 8811 	msr	BASEPRI, r0
 800f51a:	4770      	bx	lr
 800f51c:	f3af 8000 	nop.w

0800f520 <pxCurrentTCBConst2>:
 800f520:	20001480 	.word	0x20001480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop

0800f528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f528:	4808      	ldr	r0, [pc, #32]	; (800f54c <prvPortStartFirstTask+0x24>)
 800f52a:	6800      	ldr	r0, [r0, #0]
 800f52c:	6800      	ldr	r0, [r0, #0]
 800f52e:	f380 8808 	msr	MSP, r0
 800f532:	f04f 0000 	mov.w	r0, #0
 800f536:	f380 8814 	msr	CONTROL, r0
 800f53a:	b662      	cpsie	i
 800f53c:	b661      	cpsie	f
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	df00      	svc	0
 800f548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f54a:	bf00      	nop
 800f54c:	e000ed08 	.word	0xe000ed08

0800f550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f556:	4b44      	ldr	r3, [pc, #272]	; (800f668 <xPortStartScheduler+0x118>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a44      	ldr	r2, [pc, #272]	; (800f66c <xPortStartScheduler+0x11c>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d109      	bne.n	800f574 <xPortStartScheduler+0x24>
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
 800f572:	e7fe      	b.n	800f572 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f574:	4b3c      	ldr	r3, [pc, #240]	; (800f668 <xPortStartScheduler+0x118>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a3d      	ldr	r2, [pc, #244]	; (800f670 <xPortStartScheduler+0x120>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d109      	bne.n	800f592 <xPortStartScheduler+0x42>
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60fb      	str	r3, [r7, #12]
 800f590:	e7fe      	b.n	800f590 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f592:	4b38      	ldr	r3, [pc, #224]	; (800f674 <xPortStartScheduler+0x124>)
 800f594:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	22ff      	movs	r2, #255	; 0xff
 800f5a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5ac:	78fb      	ldrb	r3, [r7, #3]
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5b4:	b2da      	uxtb	r2, r3
 800f5b6:	4b30      	ldr	r3, [pc, #192]	; (800f678 <xPortStartScheduler+0x128>)
 800f5b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5ba:	4b30      	ldr	r3, [pc, #192]	; (800f67c <xPortStartScheduler+0x12c>)
 800f5bc:	2207      	movs	r2, #7
 800f5be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5c0:	e009      	b.n	800f5d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f5c2:	4b2e      	ldr	r3, [pc, #184]	; (800f67c <xPortStartScheduler+0x12c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4a2c      	ldr	r2, [pc, #176]	; (800f67c <xPortStartScheduler+0x12c>)
 800f5ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5cc:	78fb      	ldrb	r3, [r7, #3]
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5d6:	78fb      	ldrb	r3, [r7, #3]
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5de:	2b80      	cmp	r3, #128	; 0x80
 800f5e0:	d0ef      	beq.n	800f5c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f5e2:	4b26      	ldr	r3, [pc, #152]	; (800f67c <xPortStartScheduler+0x12c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f1c3 0307 	rsb	r3, r3, #7
 800f5ea:	2b04      	cmp	r3, #4
 800f5ec:	d009      	beq.n	800f602 <xPortStartScheduler+0xb2>
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60bb      	str	r3, [r7, #8]
 800f600:	e7fe      	b.n	800f600 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f602:	4b1e      	ldr	r3, [pc, #120]	; (800f67c <xPortStartScheduler+0x12c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	021b      	lsls	r3, r3, #8
 800f608:	4a1c      	ldr	r2, [pc, #112]	; (800f67c <xPortStartScheduler+0x12c>)
 800f60a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f60c:	4b1b      	ldr	r3, [pc, #108]	; (800f67c <xPortStartScheduler+0x12c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f614:	4a19      	ldr	r2, [pc, #100]	; (800f67c <xPortStartScheduler+0x12c>)
 800f616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f620:	4b17      	ldr	r3, [pc, #92]	; (800f680 <xPortStartScheduler+0x130>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a16      	ldr	r2, [pc, #88]	; (800f680 <xPortStartScheduler+0x130>)
 800f626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f62a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f62c:	4b14      	ldr	r3, [pc, #80]	; (800f680 <xPortStartScheduler+0x130>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a13      	ldr	r2, [pc, #76]	; (800f680 <xPortStartScheduler+0x130>)
 800f632:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f638:	f000 f8d6 	bl	800f7e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f63c:	4b11      	ldr	r3, [pc, #68]	; (800f684 <xPortStartScheduler+0x134>)
 800f63e:	2200      	movs	r2, #0
 800f640:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f642:	f000 f8f5 	bl	800f830 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f646:	4b10      	ldr	r3, [pc, #64]	; (800f688 <xPortStartScheduler+0x138>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a0f      	ldr	r2, [pc, #60]	; (800f688 <xPortStartScheduler+0x138>)
 800f64c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f650:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f652:	f7ff ff69 	bl	800f528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f656:	f7ff fa75 	bl	800eb44 <vTaskSwitchContext>
	prvTaskExitError();
 800f65a:	f7ff ff21 	bl	800f4a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	e000ed00 	.word	0xe000ed00
 800f66c:	410fc271 	.word	0x410fc271
 800f670:	410fc270 	.word	0x410fc270
 800f674:	e000e400 	.word	0xe000e400
 800f678:	200015ac 	.word	0x200015ac
 800f67c:	200015b0 	.word	0x200015b0
 800f680:	e000ed20 	.word	0xe000ed20
 800f684:	20000dd0 	.word	0x20000dd0
 800f688:	e000ef34 	.word	0xe000ef34

0800f68c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f696:	f383 8811 	msr	BASEPRI, r3
 800f69a:	f3bf 8f6f 	isb	sy
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6a4:	4b0e      	ldr	r3, [pc, #56]	; (800f6e0 <vPortEnterCritical+0x54>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	4a0d      	ldr	r2, [pc, #52]	; (800f6e0 <vPortEnterCritical+0x54>)
 800f6ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6ae:	4b0c      	ldr	r3, [pc, #48]	; (800f6e0 <vPortEnterCritical+0x54>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d10e      	bne.n	800f6d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6b6:	4b0b      	ldr	r3, [pc, #44]	; (800f6e4 <vPortEnterCritical+0x58>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d009      	beq.n	800f6d4 <vPortEnterCritical+0x48>
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	603b      	str	r3, [r7, #0]
 800f6d2:	e7fe      	b.n	800f6d2 <vPortEnterCritical+0x46>
	}
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	20000dd0 	.word	0x20000dd0
 800f6e4:	e000ed04 	.word	0xe000ed04

0800f6e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f6ee:	4b11      	ldr	r3, [pc, #68]	; (800f734 <vPortExitCritical+0x4c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d109      	bne.n	800f70a <vPortExitCritical+0x22>
 800f6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fa:	f383 8811 	msr	BASEPRI, r3
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	607b      	str	r3, [r7, #4]
 800f708:	e7fe      	b.n	800f708 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f70a:	4b0a      	ldr	r3, [pc, #40]	; (800f734 <vPortExitCritical+0x4c>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	3b01      	subs	r3, #1
 800f710:	4a08      	ldr	r2, [pc, #32]	; (800f734 <vPortExitCritical+0x4c>)
 800f712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f714:	4b07      	ldr	r3, [pc, #28]	; (800f734 <vPortExitCritical+0x4c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d104      	bne.n	800f726 <vPortExitCritical+0x3e>
 800f71c:	2300      	movs	r3, #0
 800f71e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f726:	bf00      	nop
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	20000dd0 	.word	0x20000dd0
	...

0800f740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f740:	f3ef 8009 	mrs	r0, PSP
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	4b15      	ldr	r3, [pc, #84]	; (800f7a0 <pxCurrentTCBConst>)
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	f01e 0f10 	tst.w	lr, #16
 800f750:	bf08      	it	eq
 800f752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75a:	6010      	str	r0, [r2, #0]
 800f75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f764:	f380 8811 	msr	BASEPRI, r0
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f7ff f9e8 	bl	800eb44 <vTaskSwitchContext>
 800f774:	f04f 0000 	mov.w	r0, #0
 800f778:	f380 8811 	msr	BASEPRI, r0
 800f77c:	bc09      	pop	{r0, r3}
 800f77e:	6819      	ldr	r1, [r3, #0]
 800f780:	6808      	ldr	r0, [r1, #0]
 800f782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f786:	f01e 0f10 	tst.w	lr, #16
 800f78a:	bf08      	it	eq
 800f78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f790:	f380 8809 	msr	PSP, r0
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop
 800f79c:	f3af 8000 	nop.w

0800f7a0 <pxCurrentTCBConst>:
 800f7a0:	20001480 	.word	0x20001480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop

0800f7a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7c0:	f7ff f904 	bl	800e9cc <xTaskIncrementTick>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7ca:	4b06      	ldr	r3, [pc, #24]	; (800f7e4 <SysTick_Handler+0x3c>)
 800f7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d0:	601a      	str	r2, [r3, #0]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	e000ed04 	.word	0xe000ed04

0800f7e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f7ec:	4b0b      	ldr	r3, [pc, #44]	; (800f81c <vPortSetupTimerInterrupt+0x34>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f7f2:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <vPortSetupTimerInterrupt+0x38>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f7f8:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <vPortSetupTimerInterrupt+0x3c>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a0a      	ldr	r2, [pc, #40]	; (800f828 <vPortSetupTimerInterrupt+0x40>)
 800f7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f802:	099b      	lsrs	r3, r3, #6
 800f804:	4a09      	ldr	r2, [pc, #36]	; (800f82c <vPortSetupTimerInterrupt+0x44>)
 800f806:	3b01      	subs	r3, #1
 800f808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f80a:	4b04      	ldr	r3, [pc, #16]	; (800f81c <vPortSetupTimerInterrupt+0x34>)
 800f80c:	2207      	movs	r2, #7
 800f80e:	601a      	str	r2, [r3, #0]
}
 800f810:	bf00      	nop
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	e000e010 	.word	0xe000e010
 800f820:	e000e018 	.word	0xe000e018
 800f824:	20000cb4 	.word	0x20000cb4
 800f828:	10624dd3 	.word	0x10624dd3
 800f82c:	e000e014 	.word	0xe000e014

0800f830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f840 <vPortEnableVFP+0x10>
 800f834:	6801      	ldr	r1, [r0, #0]
 800f836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f83a:	6001      	str	r1, [r0, #0]
 800f83c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f83e:	bf00      	nop
 800f840:	e000ed88 	.word	0xe000ed88

0800f844 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f84a:	f3ef 8305 	mrs	r3, IPSR
 800f84e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2b0f      	cmp	r3, #15
 800f854:	d913      	bls.n	800f87e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f856:	4a16      	ldr	r2, [pc, #88]	; (800f8b0 <vPortValidateInterruptPriority+0x6c>)
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	4413      	add	r3, r2
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f860:	4b14      	ldr	r3, [pc, #80]	; (800f8b4 <vPortValidateInterruptPriority+0x70>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	7afa      	ldrb	r2, [r7, #11]
 800f866:	429a      	cmp	r2, r3
 800f868:	d209      	bcs.n	800f87e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	607b      	str	r3, [r7, #4]
 800f87c:	e7fe      	b.n	800f87c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f87e:	4b0e      	ldr	r3, [pc, #56]	; (800f8b8 <vPortValidateInterruptPriority+0x74>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f886:	4b0d      	ldr	r3, [pc, #52]	; (800f8bc <vPortValidateInterruptPriority+0x78>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d909      	bls.n	800f8a2 <vPortValidateInterruptPriority+0x5e>
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	603b      	str	r3, [r7, #0]
 800f8a0:	e7fe      	b.n	800f8a0 <vPortValidateInterruptPriority+0x5c>
	}
 800f8a2:	bf00      	nop
 800f8a4:	3714      	adds	r7, #20
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	e000e3f0 	.word	0xe000e3f0
 800f8b4:	200015ac 	.word	0x200015ac
 800f8b8:	e000ed0c 	.word	0xe000ed0c
 800f8bc:	200015b0 	.word	0x200015b0

0800f8c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b08a      	sub	sp, #40	; 0x28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f8cc:	f7fe ffd4 	bl	800e878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f8d0:	4b57      	ldr	r3, [pc, #348]	; (800fa30 <pvPortMalloc+0x170>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d101      	bne.n	800f8dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f8d8:	f000 f90c 	bl	800faf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f8dc:	4b55      	ldr	r3, [pc, #340]	; (800fa34 <pvPortMalloc+0x174>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4013      	ands	r3, r2
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f040 808c 	bne.w	800fa02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d01c      	beq.n	800f92a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f8f0:	2208      	movs	r2, #8
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f003 0307 	and.w	r3, r3, #7
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d013      	beq.n	800f92a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f023 0307 	bic.w	r3, r3, #7
 800f908:	3308      	adds	r3, #8
 800f90a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f003 0307 	and.w	r3, r3, #7
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <pvPortMalloc+0x6a>
 800f916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	e7fe      	b.n	800f928 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d068      	beq.n	800fa02 <pvPortMalloc+0x142>
 800f930:	4b41      	ldr	r3, [pc, #260]	; (800fa38 <pvPortMalloc+0x178>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	429a      	cmp	r2, r3
 800f938:	d863      	bhi.n	800fa02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f93a:	4b40      	ldr	r3, [pc, #256]	; (800fa3c <pvPortMalloc+0x17c>)
 800f93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f93e:	4b3f      	ldr	r3, [pc, #252]	; (800fa3c <pvPortMalloc+0x17c>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f944:	e004      	b.n	800f950 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	429a      	cmp	r2, r3
 800f958:	d903      	bls.n	800f962 <pvPortMalloc+0xa2>
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1f1      	bne.n	800f946 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f962:	4b33      	ldr	r3, [pc, #204]	; (800fa30 <pvPortMalloc+0x170>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f968:	429a      	cmp	r2, r3
 800f96a:	d04a      	beq.n	800fa02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2208      	movs	r2, #8
 800f972:	4413      	add	r3, r2
 800f974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	1ad2      	subs	r2, r2, r3
 800f986:	2308      	movs	r3, #8
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d91e      	bls.n	800f9cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4413      	add	r3, r2
 800f994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	f003 0307 	and.w	r3, r3, #7
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d009      	beq.n	800f9b4 <pvPortMalloc+0xf4>
 800f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	613b      	str	r3, [r7, #16]
 800f9b2:	e7fe      	b.n	800f9b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	685a      	ldr	r2, [r3, #4]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	1ad2      	subs	r2, r2, r3
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9c6:	69b8      	ldr	r0, [r7, #24]
 800f9c8:	f000 f8f6 	bl	800fbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9cc:	4b1a      	ldr	r3, [pc, #104]	; (800fa38 <pvPortMalloc+0x178>)
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	4a18      	ldr	r2, [pc, #96]	; (800fa38 <pvPortMalloc+0x178>)
 800f9d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9da:	4b17      	ldr	r3, [pc, #92]	; (800fa38 <pvPortMalloc+0x178>)
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	4b18      	ldr	r3, [pc, #96]	; (800fa40 <pvPortMalloc+0x180>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d203      	bcs.n	800f9ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <pvPortMalloc+0x178>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a15      	ldr	r2, [pc, #84]	; (800fa40 <pvPortMalloc+0x180>)
 800f9ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	4b10      	ldr	r3, [pc, #64]	; (800fa34 <pvPortMalloc+0x174>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	431a      	orrs	r2, r3
 800f9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fe:	2200      	movs	r2, #0
 800fa00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa02:	f7fe ff47 	bl	800e894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d009      	beq.n	800fa24 <pvPortMalloc+0x164>
 800fa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	60fb      	str	r3, [r7, #12]
 800fa22:	e7fe      	b.n	800fa22 <pvPortMalloc+0x162>
	return pvReturn;
 800fa24:	69fb      	ldr	r3, [r7, #28]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3728      	adds	r7, #40	; 0x28
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	200051bc 	.word	0x200051bc
 800fa34:	200051c8 	.word	0x200051c8
 800fa38:	200051c0 	.word	0x200051c0
 800fa3c:	200051b4 	.word	0x200051b4
 800fa40:	200051c4 	.word	0x200051c4

0800fa44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b086      	sub	sp, #24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d046      	beq.n	800fae4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fa56:	2308      	movs	r3, #8
 800fa58:	425b      	negs	r3, r3
 800fa5a:	697a      	ldr	r2, [r7, #20]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	4b20      	ldr	r3, [pc, #128]	; (800faec <vPortFree+0xa8>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d109      	bne.n	800fa86 <vPortFree+0x42>
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	60fb      	str	r3, [r7, #12]
 800fa84:	e7fe      	b.n	800fa84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d009      	beq.n	800faa2 <vPortFree+0x5e>
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	60bb      	str	r3, [r7, #8]
 800faa0:	e7fe      	b.n	800faa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	4b11      	ldr	r3, [pc, #68]	; (800faec <vPortFree+0xa8>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4013      	ands	r3, r2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d019      	beq.n	800fae4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d115      	bne.n	800fae4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	4b0b      	ldr	r3, [pc, #44]	; (800faec <vPortFree+0xa8>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	43db      	mvns	r3, r3
 800fac2:	401a      	ands	r2, r3
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fac8:	f7fe fed6 	bl	800e878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	685a      	ldr	r2, [r3, #4]
 800fad0:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <vPortFree+0xac>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4413      	add	r3, r2
 800fad6:	4a06      	ldr	r2, [pc, #24]	; (800faf0 <vPortFree+0xac>)
 800fad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fada:	6938      	ldr	r0, [r7, #16]
 800fadc:	f000 f86c 	bl	800fbb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fae0:	f7fe fed8 	bl	800e894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fae4:	bf00      	nop
 800fae6:	3718      	adds	r7, #24
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	200051c8 	.word	0x200051c8
 800faf0:	200051c0 	.word	0x200051c0

0800faf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800faf4:	b480      	push	{r7}
 800faf6:	b085      	sub	sp, #20
 800faf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb00:	4b27      	ldr	r3, [pc, #156]	; (800fba0 <prvHeapInit+0xac>)
 800fb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f003 0307 	and.w	r3, r3, #7
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3307      	adds	r3, #7
 800fb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f023 0307 	bic.w	r3, r3, #7
 800fb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	4a1f      	ldr	r2, [pc, #124]	; (800fba0 <prvHeapInit+0xac>)
 800fb24:	4413      	add	r3, r2
 800fb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb2c:	4a1d      	ldr	r2, [pc, #116]	; (800fba4 <prvHeapInit+0xb0>)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb32:	4b1c      	ldr	r3, [pc, #112]	; (800fba4 <prvHeapInit+0xb0>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	68ba      	ldr	r2, [r7, #8]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fb40:	2208      	movs	r2, #8
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f023 0307 	bic.w	r3, r3, #7
 800fb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	4a15      	ldr	r2, [pc, #84]	; (800fba8 <prvHeapInit+0xb4>)
 800fb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fb56:	4b14      	ldr	r3, [pc, #80]	; (800fba8 <prvHeapInit+0xb4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb5e:	4b12      	ldr	r3, [pc, #72]	; (800fba8 <prvHeapInit+0xb4>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	1ad2      	subs	r2, r2, r3
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb74:	4b0c      	ldr	r3, [pc, #48]	; (800fba8 <prvHeapInit+0xb4>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	4a0a      	ldr	r2, [pc, #40]	; (800fbac <prvHeapInit+0xb8>)
 800fb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	4a09      	ldr	r2, [pc, #36]	; (800fbb0 <prvHeapInit+0xbc>)
 800fb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb8c:	4b09      	ldr	r3, [pc, #36]	; (800fbb4 <prvHeapInit+0xc0>)
 800fb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb92:	601a      	str	r2, [r3, #0]
}
 800fb94:	bf00      	nop
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	200015b4 	.word	0x200015b4
 800fba4:	200051b4 	.word	0x200051b4
 800fba8:	200051bc 	.word	0x200051bc
 800fbac:	200051c4 	.word	0x200051c4
 800fbb0:	200051c0 	.word	0x200051c0
 800fbb4:	200051c8 	.word	0x200051c8

0800fbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fbc0:	4b28      	ldr	r3, [pc, #160]	; (800fc64 <prvInsertBlockIntoFreeList+0xac>)
 800fbc2:	60fb      	str	r3, [r7, #12]
 800fbc4:	e002      	b.n	800fbcc <prvInsertBlockIntoFreeList+0x14>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60fb      	str	r3, [r7, #12]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d8f7      	bhi.n	800fbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d108      	bne.n	800fbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	441a      	add	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	68ba      	ldr	r2, [r7, #8]
 800fc04:	441a      	add	r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d118      	bne.n	800fc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <prvInsertBlockIntoFreeList+0xb0>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d00d      	beq.n	800fc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	441a      	add	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	e008      	b.n	800fc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc36:	4b0c      	ldr	r3, [pc, #48]	; (800fc68 <prvInsertBlockIntoFreeList+0xb0>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	e003      	b.n	800fc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d002      	beq.n	800fc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc56:	bf00      	nop
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	200051b4 	.word	0x200051b4
 800fc68:	200051bc 	.word	0x200051bc

0800fc6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fc70:	2200      	movs	r2, #0
 800fc72:	4912      	ldr	r1, [pc, #72]	; (800fcbc <MX_USB_DEVICE_Init+0x50>)
 800fc74:	4812      	ldr	r0, [pc, #72]	; (800fcc0 <MX_USB_DEVICE_Init+0x54>)
 800fc76:	f7fc f84f 	bl	800bd18 <USBD_Init>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fc80:	f7f3 f818 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fc84:	490f      	ldr	r1, [pc, #60]	; (800fcc4 <MX_USB_DEVICE_Init+0x58>)
 800fc86:	480e      	ldr	r0, [pc, #56]	; (800fcc0 <MX_USB_DEVICE_Init+0x54>)
 800fc88:	f7fc f871 	bl	800bd6e <USBD_RegisterClass>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fc92:	f7f3 f80f 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fc96:	490c      	ldr	r1, [pc, #48]	; (800fcc8 <MX_USB_DEVICE_Init+0x5c>)
 800fc98:	4809      	ldr	r0, [pc, #36]	; (800fcc0 <MX_USB_DEVICE_Init+0x54>)
 800fc9a:	f7fb ff9f 	bl	800bbdc <USBD_CDC_RegisterInterface>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d001      	beq.n	800fca8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fca4:	f7f3 f806 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fca8:	4805      	ldr	r0, [pc, #20]	; (800fcc0 <MX_USB_DEVICE_Init+0x54>)
 800fcaa:	f7fc f87a 	bl	800bda2 <USBD_Start>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d001      	beq.n	800fcb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fcb4:	f7f2 fffe 	bl	8002cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fcb8:	bf00      	nop
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	20000de4 	.word	0x20000de4
 800fcc0:	200058d4 	.word	0x200058d4
 800fcc4:	20000ccc 	.word	0x20000ccc
 800fcc8:	20000dd4 	.word	0x20000dd4

0800fccc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4905      	ldr	r1, [pc, #20]	; (800fce8 <CDC_Init_FS+0x1c>)
 800fcd4:	4805      	ldr	r0, [pc, #20]	; (800fcec <CDC_Init_FS+0x20>)
 800fcd6:	f7fb ff98 	bl	800bc0a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fcda:	4905      	ldr	r1, [pc, #20]	; (800fcf0 <CDC_Init_FS+0x24>)
 800fcdc:	4803      	ldr	r0, [pc, #12]	; (800fcec <CDC_Init_FS+0x20>)
 800fcde:	f7fb ffae 	bl	800bc3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fce2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	20005d70 	.word	0x20005d70
 800fcec:	200058d4 	.word	0x200058d4
 800fcf0:	20005b70 	.word	0x20005b70

0800fcf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fcf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	6039      	str	r1, [r7, #0]
 800fd0e:	71fb      	strb	r3, [r7, #7]
 800fd10:	4613      	mov	r3, r2
 800fd12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd14:	79fb      	ldrb	r3, [r7, #7]
 800fd16:	2b23      	cmp	r3, #35	; 0x23
 800fd18:	f200 808c 	bhi.w	800fe34 <CDC_Control_FS+0x130>
 800fd1c:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <CDC_Control_FS+0x20>)
 800fd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd22:	bf00      	nop
 800fd24:	0800fe35 	.word	0x0800fe35
 800fd28:	0800fe35 	.word	0x0800fe35
 800fd2c:	0800fe35 	.word	0x0800fe35
 800fd30:	0800fe35 	.word	0x0800fe35
 800fd34:	0800fe35 	.word	0x0800fe35
 800fd38:	0800fe35 	.word	0x0800fe35
 800fd3c:	0800fe35 	.word	0x0800fe35
 800fd40:	0800fe35 	.word	0x0800fe35
 800fd44:	0800fe35 	.word	0x0800fe35
 800fd48:	0800fe35 	.word	0x0800fe35
 800fd4c:	0800fe35 	.word	0x0800fe35
 800fd50:	0800fe35 	.word	0x0800fe35
 800fd54:	0800fe35 	.word	0x0800fe35
 800fd58:	0800fe35 	.word	0x0800fe35
 800fd5c:	0800fe35 	.word	0x0800fe35
 800fd60:	0800fe35 	.word	0x0800fe35
 800fd64:	0800fe35 	.word	0x0800fe35
 800fd68:	0800fe35 	.word	0x0800fe35
 800fd6c:	0800fe35 	.word	0x0800fe35
 800fd70:	0800fe35 	.word	0x0800fe35
 800fd74:	0800fe35 	.word	0x0800fe35
 800fd78:	0800fe35 	.word	0x0800fe35
 800fd7c:	0800fe35 	.word	0x0800fe35
 800fd80:	0800fe35 	.word	0x0800fe35
 800fd84:	0800fe35 	.word	0x0800fe35
 800fd88:	0800fe35 	.word	0x0800fe35
 800fd8c:	0800fe35 	.word	0x0800fe35
 800fd90:	0800fe35 	.word	0x0800fe35
 800fd94:	0800fe35 	.word	0x0800fe35
 800fd98:	0800fe35 	.word	0x0800fe35
 800fd9c:	0800fe35 	.word	0x0800fe35
 800fda0:	0800fe35 	.word	0x0800fe35
 800fda4:	0800fdb5 	.word	0x0800fdb5
 800fda8:	0800fdef 	.word	0x0800fdef
 800fdac:	0800fe35 	.word	0x0800fe35
 800fdb0:	0800fe35 	.word	0x0800fe35
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	781a      	ldrb	r2, [r3, #0]
 800fdb8:	4b22      	ldr	r3, [pc, #136]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	785a      	ldrb	r2, [r3, #1]
 800fdc0:	4b20      	ldr	r3, [pc, #128]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdc2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	789a      	ldrb	r2, [r3, #2]
 800fdc8:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	78da      	ldrb	r2, [r3, #3]
 800fdd0:	4b1c      	ldr	r3, [pc, #112]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdd2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	791a      	ldrb	r2, [r3, #4]
 800fdd8:	4b1a      	ldr	r3, [pc, #104]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdda:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	795a      	ldrb	r2, [r3, #5]
 800fde0:	4b18      	ldr	r3, [pc, #96]	; (800fe44 <CDC_Control_FS+0x140>)
 800fde2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	799a      	ldrb	r2, [r3, #6]
 800fde8:	4b16      	ldr	r3, [pc, #88]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdea:	719a      	strb	r2, [r3, #6]
    	break;
 800fdec:	e023      	b.n	800fe36 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 800fdee:	4b15      	ldr	r3, [pc, #84]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdf0:	781a      	ldrb	r2, [r3, #0]
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	4a12      	ldr	r2, [pc, #72]	; (800fe44 <CDC_Control_FS+0x140>)
 800fdfc:	7852      	ldrb	r2, [r2, #1]
 800fdfe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	3302      	adds	r3, #2
 800fe04:	4a0f      	ldr	r2, [pc, #60]	; (800fe44 <CDC_Control_FS+0x140>)
 800fe06:	7892      	ldrb	r2, [r2, #2]
 800fe08:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	3303      	adds	r3, #3
 800fe0e:	4a0d      	ldr	r2, [pc, #52]	; (800fe44 <CDC_Control_FS+0x140>)
 800fe10:	78d2      	ldrb	r2, [r2, #3]
 800fe12:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	3304      	adds	r3, #4
 800fe18:	4a0a      	ldr	r2, [pc, #40]	; (800fe44 <CDC_Control_FS+0x140>)
 800fe1a:	7912      	ldrb	r2, [r2, #4]
 800fe1c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	3305      	adds	r3, #5
 800fe22:	4a08      	ldr	r2, [pc, #32]	; (800fe44 <CDC_Control_FS+0x140>)
 800fe24:	7952      	ldrb	r2, [r2, #5]
 800fe26:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	3306      	adds	r3, #6
 800fe2c:	4a05      	ldr	r2, [pc, #20]	; (800fe44 <CDC_Control_FS+0x140>)
 800fe2e:	7992      	ldrb	r2, [r2, #6]
 800fe30:	701a      	strb	r2, [r3, #0]
    break;
 800fe32:	e000      	b.n	800fe36 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe34:	bf00      	nop
  }

  return (USBD_OK);
 800fe36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	20005f70 	.word	0x20005f70

0800fe48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	461a      	mov	r2, r3
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4807      	ldr	r0, [pc, #28]	; (800fe7c <CDC_Receive_FS+0x34>)
 800fe5e:	f7f2 ffa0 	bl	8002da2 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	4806      	ldr	r0, [pc, #24]	; (800fe80 <CDC_Receive_FS+0x38>)
 800fe66:	f7fb feea 	bl	800bc3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe6a:	4805      	ldr	r0, [pc, #20]	; (800fe80 <CDC_Receive_FS+0x38>)
 800fe6c:	f7fb ff2a 	bl	800bcc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20000054 	.word	0x20000054
 800fe80:	200058d4 	.word	0x200058d4

0800fe84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe94:	4b0d      	ldr	r3, [pc, #52]	; (800fecc <CDC_Transmit_FS+0x48>)
 800fe96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d001      	beq.n	800feaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e00b      	b.n	800fec2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800feaa:	887b      	ldrh	r3, [r7, #2]
 800feac:	461a      	mov	r2, r3
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	4806      	ldr	r0, [pc, #24]	; (800fecc <CDC_Transmit_FS+0x48>)
 800feb2:	f7fb feaa 	bl	800bc0a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800feb6:	4805      	ldr	r0, [pc, #20]	; (800fecc <CDC_Transmit_FS+0x48>)
 800feb8:	f7fb fed5 	bl	800bc66 <USBD_CDC_TransmitPacket>
 800febc:	4603      	mov	r3, r0
 800febe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	200058d4 	.word	0x200058d4

0800fed0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2212      	movs	r2, #18
 800fee0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fee2:	4b03      	ldr	r3, [pc, #12]	; (800fef0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	20000e00 	.word	0x20000e00

0800fef4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	4603      	mov	r3, r0
 800fefc:	6039      	str	r1, [r7, #0]
 800fefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2204      	movs	r2, #4
 800ff04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff06:	4b03      	ldr	r3, [pc, #12]	; (800ff14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	20000e14 	.word	0x20000e14

0800ff18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6039      	str	r1, [r7, #0]
 800ff22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff24:	79fb      	ldrb	r3, [r7, #7]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d105      	bne.n	800ff36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff2a:	683a      	ldr	r2, [r7, #0]
 800ff2c:	4907      	ldr	r1, [pc, #28]	; (800ff4c <USBD_FS_ProductStrDescriptor+0x34>)
 800ff2e:	4808      	ldr	r0, [pc, #32]	; (800ff50 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff30:	f7fc fe6e 	bl	800cc10 <USBD_GetString>
 800ff34:	e004      	b.n	800ff40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	4904      	ldr	r1, [pc, #16]	; (800ff4c <USBD_FS_ProductStrDescriptor+0x34>)
 800ff3a:	4805      	ldr	r0, [pc, #20]	; (800ff50 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff3c:	f7fc fe68 	bl	800cc10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff40:	4b02      	ldr	r3, [pc, #8]	; (800ff4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20005f78 	.word	0x20005f78
 800ff50:	08015e9c 	.word	0x08015e9c

0800ff54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	6039      	str	r1, [r7, #0]
 800ff5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	4904      	ldr	r1, [pc, #16]	; (800ff74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff64:	4804      	ldr	r0, [pc, #16]	; (800ff78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff66:	f7fc fe53 	bl	800cc10 <USBD_GetString>
  return USBD_StrDesc;
 800ff6a:	4b02      	ldr	r3, [pc, #8]	; (800ff74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20005f78 	.word	0x20005f78
 800ff78:	08015eb4 	.word	0x08015eb4

0800ff7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	6039      	str	r1, [r7, #0]
 800ff86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	221a      	movs	r2, #26
 800ff8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff8e:	f000 f843 	bl	8010018 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ff92:	4b02      	ldr	r3, [pc, #8]	; (800ff9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20000e18 	.word	0x20000e18

0800ffa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	4907      	ldr	r1, [pc, #28]	; (800ffd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ffb6:	4808      	ldr	r0, [pc, #32]	; (800ffd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ffb8:	f7fc fe2a 	bl	800cc10 <USBD_GetString>
 800ffbc:	e004      	b.n	800ffc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4904      	ldr	r1, [pc, #16]	; (800ffd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ffc2:	4805      	ldr	r0, [pc, #20]	; (800ffd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ffc4:	f7fc fe24 	bl	800cc10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffc8:	4b02      	ldr	r3, [pc, #8]	; (800ffd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20005f78 	.word	0x20005f78
 800ffd8:	08015ec8 	.word	0x08015ec8

0800ffdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d105      	bne.n	800fffa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	4907      	ldr	r1, [pc, #28]	; (8010010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fff2:	4808      	ldr	r0, [pc, #32]	; (8010014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fff4:	f7fc fe0c 	bl	800cc10 <USBD_GetString>
 800fff8:	e004      	b.n	8010004 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	4904      	ldr	r1, [pc, #16]	; (8010010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fffe:	4805      	ldr	r0, [pc, #20]	; (8010014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010000:	f7fc fe06 	bl	800cc10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010004:	4b02      	ldr	r3, [pc, #8]	; (8010010 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	20005f78 	.word	0x20005f78
 8010014:	08015ed4 	.word	0x08015ed4

08010018 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801001e:	4b0f      	ldr	r3, [pc, #60]	; (801005c <Get_SerialNum+0x44>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010024:	4b0e      	ldr	r3, [pc, #56]	; (8010060 <Get_SerialNum+0x48>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801002a:	4b0e      	ldr	r3, [pc, #56]	; (8010064 <Get_SerialNum+0x4c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d009      	beq.n	8010052 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801003e:	2208      	movs	r2, #8
 8010040:	4909      	ldr	r1, [pc, #36]	; (8010068 <Get_SerialNum+0x50>)
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f000 f814 	bl	8010070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010048:	2204      	movs	r2, #4
 801004a:	4908      	ldr	r1, [pc, #32]	; (801006c <Get_SerialNum+0x54>)
 801004c:	68b8      	ldr	r0, [r7, #8]
 801004e:	f000 f80f 	bl	8010070 <IntToUnicode>
  }
}
 8010052:	bf00      	nop
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	1fff7a10 	.word	0x1fff7a10
 8010060:	1fff7a14 	.word	0x1fff7a14
 8010064:	1fff7a18 	.word	0x1fff7a18
 8010068:	20000e1a 	.word	0x20000e1a
 801006c:	20000e2a 	.word	0x20000e2a

08010070 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010070:	b480      	push	{r7}
 8010072:	b087      	sub	sp, #28
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	4613      	mov	r3, r2
 801007c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010082:	2300      	movs	r3, #0
 8010084:	75fb      	strb	r3, [r7, #23]
 8010086:	e027      	b.n	80100d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	0f1b      	lsrs	r3, r3, #28
 801008c:	2b09      	cmp	r3, #9
 801008e:	d80b      	bhi.n	80100a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	0f1b      	lsrs	r3, r3, #28
 8010094:	b2da      	uxtb	r2, r3
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	4619      	mov	r1, r3
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	440b      	add	r3, r1
 80100a0:	3230      	adds	r2, #48	; 0x30
 80100a2:	b2d2      	uxtb	r2, r2
 80100a4:	701a      	strb	r2, [r3, #0]
 80100a6:	e00a      	b.n	80100be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	0f1b      	lsrs	r3, r3, #28
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4619      	mov	r1, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	440b      	add	r3, r1
 80100b8:	3237      	adds	r2, #55	; 0x37
 80100ba:	b2d2      	uxtb	r2, r2
 80100bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	011b      	lsls	r3, r3, #4
 80100c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	3301      	adds	r3, #1
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	4413      	add	r3, r2
 80100ce:	2200      	movs	r2, #0
 80100d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	3301      	adds	r3, #1
 80100d6:	75fb      	strb	r3, [r7, #23]
 80100d8:	7dfa      	ldrb	r2, [r7, #23]
 80100da:	79fb      	ldrb	r3, [r7, #7]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d3d3      	bcc.n	8010088 <IntToUnicode+0x18>
  }
}
 80100e0:	bf00      	nop
 80100e2:	371c      	adds	r7, #28
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08a      	sub	sp, #40	; 0x28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100f4:	f107 0314 	add.w	r3, r7, #20
 80100f8:	2200      	movs	r2, #0
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	605a      	str	r2, [r3, #4]
 80100fe:	609a      	str	r2, [r3, #8]
 8010100:	60da      	str	r2, [r3, #12]
 8010102:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801010c:	d13a      	bne.n	8010184 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801010e:	2300      	movs	r3, #0
 8010110:	613b      	str	r3, [r7, #16]
 8010112:	4b1e      	ldr	r3, [pc, #120]	; (801018c <HAL_PCD_MspInit+0xa0>)
 8010114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010116:	4a1d      	ldr	r2, [pc, #116]	; (801018c <HAL_PCD_MspInit+0xa0>)
 8010118:	f043 0301 	orr.w	r3, r3, #1
 801011c:	6313      	str	r3, [r2, #48]	; 0x30
 801011e:	4b1b      	ldr	r3, [pc, #108]	; (801018c <HAL_PCD_MspInit+0xa0>)
 8010120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010122:	f003 0301 	and.w	r3, r3, #1
 8010126:	613b      	str	r3, [r7, #16]
 8010128:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801012a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801012e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010130:	2302      	movs	r3, #2
 8010132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010134:	2300      	movs	r3, #0
 8010136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010138:	2303      	movs	r3, #3
 801013a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801013c:	230a      	movs	r3, #10
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010140:	f107 0314 	add.w	r3, r7, #20
 8010144:	4619      	mov	r1, r3
 8010146:	4812      	ldr	r0, [pc, #72]	; (8010190 <HAL_PCD_MspInit+0xa4>)
 8010148:	f7f6 ff32 	bl	8006fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801014c:	4b0f      	ldr	r3, [pc, #60]	; (801018c <HAL_PCD_MspInit+0xa0>)
 801014e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010150:	4a0e      	ldr	r2, [pc, #56]	; (801018c <HAL_PCD_MspInit+0xa0>)
 8010152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010156:	6353      	str	r3, [r2, #52]	; 0x34
 8010158:	2300      	movs	r3, #0
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	4b0b      	ldr	r3, [pc, #44]	; (801018c <HAL_PCD_MspInit+0xa0>)
 801015e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010160:	4a0a      	ldr	r2, [pc, #40]	; (801018c <HAL_PCD_MspInit+0xa0>)
 8010162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010166:	6453      	str	r3, [r2, #68]	; 0x44
 8010168:	4b08      	ldr	r3, [pc, #32]	; (801018c <HAL_PCD_MspInit+0xa0>)
 801016a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801016c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010174:	2200      	movs	r2, #0
 8010176:	2105      	movs	r1, #5
 8010178:	2043      	movs	r0, #67	; 0x43
 801017a:	f7f6 fb51 	bl	8006820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801017e:	2043      	movs	r0, #67	; 0x43
 8010180:	f7f6 fb6a 	bl	8006858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010184:	bf00      	nop
 8010186:	3728      	adds	r7, #40	; 0x28
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	40023800 	.word	0x40023800
 8010190:	40020000 	.word	0x40020000

08010194 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80101a8:	4619      	mov	r1, r3
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fb fe42 	bl	800be34 <USBD_LL_SetupStage>
}
 80101b0:	bf00      	nop
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80101ca:	78fa      	ldrb	r2, [r7, #3]
 80101cc:	6879      	ldr	r1, [r7, #4]
 80101ce:	4613      	mov	r3, r2
 80101d0:	00db      	lsls	r3, r3, #3
 80101d2:	1a9b      	subs	r3, r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	440b      	add	r3, r1
 80101d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	78fb      	ldrb	r3, [r7, #3]
 80101e0:	4619      	mov	r1, r3
 80101e2:	f7fb fe72 	bl	800beca <USBD_LL_DataOutStage>
}
 80101e6:	bf00      	nop
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b082      	sub	sp, #8
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
 80101f6:	460b      	mov	r3, r1
 80101f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010200:	78fa      	ldrb	r2, [r7, #3]
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	4613      	mov	r3, r2
 8010206:	00db      	lsls	r3, r3, #3
 8010208:	1a9b      	subs	r3, r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	440b      	add	r3, r1
 801020e:	3348      	adds	r3, #72	; 0x48
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	78fb      	ldrb	r3, [r7, #3]
 8010214:	4619      	mov	r1, r3
 8010216:	f7fb fec9 	bl	800bfac <USBD_LL_DataInStage>
}
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b082      	sub	sp, #8
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010230:	4618      	mov	r0, r3
 8010232:	f7fb ffd7 	bl	800c1e4 <USBD_LL_SOF>
}
 8010236:	bf00      	nop
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801023e:	b580      	push	{r7, lr}
 8010240:	b084      	sub	sp, #16
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010246:	2301      	movs	r3, #1
 8010248:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010252:	2300      	movs	r3, #0
 8010254:	73fb      	strb	r3, [r7, #15]
 8010256:	e008      	b.n	801026a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	2b02      	cmp	r3, #2
 801025e:	d102      	bne.n	8010266 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010260:	2301      	movs	r3, #1
 8010262:	73fb      	strb	r3, [r7, #15]
 8010264:	e001      	b.n	801026a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010266:	f7f2 fd25 	bl	8002cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010270:	7bfa      	ldrb	r2, [r7, #15]
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f7fb ff7f 	bl	800c178 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010280:	4618      	mov	r0, r3
 8010282:	f7fb ff38 	bl	800c0f6 <USBD_LL_Reset>
}
 8010286:	bf00      	nop
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fb ff7a 	bl	800c198 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	6812      	ldr	r2, [r2, #0]
 80102b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102b6:	f043 0301 	orr.w	r3, r3, #1
 80102ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6a1b      	ldr	r3, [r3, #32]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d005      	beq.n	80102d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102c4:	4b04      	ldr	r3, [pc, #16]	; (80102d8 <HAL_PCD_SuspendCallback+0x48>)
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	4a03      	ldr	r2, [pc, #12]	; (80102d8 <HAL_PCD_SuspendCallback+0x48>)
 80102ca:	f043 0306 	orr.w	r3, r3, #6
 80102ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80102d0:	bf00      	nop
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	e000ed00 	.word	0xe000ed00

080102dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fb ff69 	bl	800c1c2 <USBD_LL_Resume>
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	460b      	mov	r3, r1
 8010302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801030a:	78fa      	ldrb	r2, [r7, #3]
 801030c:	4611      	mov	r1, r2
 801030e:	4618      	mov	r0, r3
 8010310:	f7fb ff8f 	bl	800c232 <USBD_LL_IsoOUTIncomplete>
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	460b      	mov	r3, r1
 8010326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801032e:	78fa      	ldrb	r2, [r7, #3]
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f7fb ff70 	bl	800c218 <USBD_LL_IsoINIncomplete>
}
 8010338:	bf00      	nop
 801033a:	3708      	adds	r7, #8
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801034e:	4618      	mov	r0, r3
 8010350:	f7fb ff7c 	bl	800c24c <USBD_LL_DevConnected>
}
 8010354:	bf00      	nop
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801036a:	4618      	mov	r0, r3
 801036c:	f7fb ff79 	bl	800c262 <USBD_LL_DevDisconnected>
}
 8010370:	bf00      	nop
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d13c      	bne.n	8010402 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010388:	4a20      	ldr	r2, [pc, #128]	; (801040c <USBD_LL_Init+0x94>)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a1e      	ldr	r2, [pc, #120]	; (801040c <USBD_LL_Init+0x94>)
 8010394:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010398:	4b1c      	ldr	r3, [pc, #112]	; (801040c <USBD_LL_Init+0x94>)
 801039a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801039e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80103a0:	4b1a      	ldr	r3, [pc, #104]	; (801040c <USBD_LL_Init+0x94>)
 80103a2:	2204      	movs	r2, #4
 80103a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80103a6:	4b19      	ldr	r3, [pc, #100]	; (801040c <USBD_LL_Init+0x94>)
 80103a8:	2202      	movs	r2, #2
 80103aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103ac:	4b17      	ldr	r3, [pc, #92]	; (801040c <USBD_LL_Init+0x94>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80103b2:	4b16      	ldr	r3, [pc, #88]	; (801040c <USBD_LL_Init+0x94>)
 80103b4:	2202      	movs	r2, #2
 80103b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103b8:	4b14      	ldr	r3, [pc, #80]	; (801040c <USBD_LL_Init+0x94>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80103be:	4b13      	ldr	r3, [pc, #76]	; (801040c <USBD_LL_Init+0x94>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80103c4:	4b11      	ldr	r3, [pc, #68]	; (801040c <USBD_LL_Init+0x94>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80103ca:	4b10      	ldr	r3, [pc, #64]	; (801040c <USBD_LL_Init+0x94>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80103d0:	4b0e      	ldr	r3, [pc, #56]	; (801040c <USBD_LL_Init+0x94>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80103d6:	480d      	ldr	r0, [pc, #52]	; (801040c <USBD_LL_Init+0x94>)
 80103d8:	f7f6 ff84 	bl	80072e4 <HAL_PCD_Init>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d001      	beq.n	80103e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80103e2:	f7f2 fc67 	bl	8002cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80103e6:	2180      	movs	r1, #128	; 0x80
 80103e8:	4808      	ldr	r0, [pc, #32]	; (801040c <USBD_LL_Init+0x94>)
 80103ea:	f7f8 f8e8 	bl	80085be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80103ee:	2240      	movs	r2, #64	; 0x40
 80103f0:	2100      	movs	r1, #0
 80103f2:	4806      	ldr	r0, [pc, #24]	; (801040c <USBD_LL_Init+0x94>)
 80103f4:	f7f8 f89c 	bl	8008530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80103f8:	2280      	movs	r2, #128	; 0x80
 80103fa:	2101      	movs	r1, #1
 80103fc:	4803      	ldr	r0, [pc, #12]	; (801040c <USBD_LL_Init+0x94>)
 80103fe:	f7f8 f897 	bl	8008530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	20006178 	.word	0x20006178

08010410 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010426:	4618      	mov	r0, r3
 8010428:	f7f7 f879 	bl	800751e <HAL_PCD_Start>
 801042c:	4603      	mov	r3, r0
 801042e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8010430:	7bfb      	ldrb	r3, [r7, #15]
 8010432:	4618      	mov	r0, r3
 8010434:	f000 f92e 	bl	8010694 <USBD_Get_USB_Status>
 8010438:	4603      	mov	r3, r0
 801043a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801043c:	7bbb      	ldrb	r3, [r7, #14]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	4608      	mov	r0, r1
 8010450:	4611      	mov	r1, r2
 8010452:	461a      	mov	r2, r3
 8010454:	4603      	mov	r3, r0
 8010456:	70fb      	strb	r3, [r7, #3]
 8010458:	460b      	mov	r3, r1
 801045a:	70bb      	strb	r3, [r7, #2]
 801045c:	4613      	mov	r3, r2
 801045e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010460:	2300      	movs	r3, #0
 8010462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010464:	2300      	movs	r3, #0
 8010466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801046e:	78bb      	ldrb	r3, [r7, #2]
 8010470:	883a      	ldrh	r2, [r7, #0]
 8010472:	78f9      	ldrb	r1, [r7, #3]
 8010474:	f7f7 fc4e 	bl	8007d14 <HAL_PCD_EP_Open>
 8010478:	4603      	mov	r3, r0
 801047a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	4618      	mov	r0, r3
 8010480:	f000 f908 	bl	8010694 <USBD_Get_USB_Status>
 8010484:	4603      	mov	r3, r0
 8010486:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8010488:	7bbb      	ldrb	r3, [r7, #14]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b084      	sub	sp, #16
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	460b      	mov	r3, r1
 801049c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80104ac:	78fa      	ldrb	r2, [r7, #3]
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f7 fc97 	bl	8007de4 <HAL_PCD_EP_Close>
 80104b6:	4603      	mov	r3, r0
 80104b8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
 80104bc:	4618      	mov	r0, r3
 80104be:	f000 f8e9 	bl	8010694 <USBD_Get_USB_Status>
 80104c2:	4603      	mov	r3, r0
 80104c4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80104c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3710      	adds	r7, #16
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	460b      	mov	r3, r1
 80104da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80104ea:	78fa      	ldrb	r2, [r7, #3]
 80104ec:	4611      	mov	r1, r2
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7f7 fd6f 	bl	8007fd2 <HAL_PCD_EP_SetStall>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f000 f8ca 	bl	8010694 <USBD_Get_USB_Status>
 8010500:	4603      	mov	r3, r0
 8010502:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010504:	7bbb      	ldrb	r3, [r7, #14]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b084      	sub	sp, #16
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	460b      	mov	r3, r1
 8010518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801051e:	2300      	movs	r3, #0
 8010520:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010528:	78fa      	ldrb	r2, [r7, #3]
 801052a:	4611      	mov	r1, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7f7 fdb4 	bl	800809a <HAL_PCD_EP_ClrStall>
 8010532:	4603      	mov	r3, r0
 8010534:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	4618      	mov	r0, r3
 801053a:	f000 f8ab 	bl	8010694 <USBD_Get_USB_Status>
 801053e:	4603      	mov	r3, r0
 8010540:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8010542:	7bbb      	ldrb	r3, [r7, #14]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801055e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8010560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010564:	2b00      	cmp	r3, #0
 8010566:	da0b      	bge.n	8010580 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8010568:	78fb      	ldrb	r3, [r7, #3]
 801056a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	4613      	mov	r3, r2
 8010572:	00db      	lsls	r3, r3, #3
 8010574:	1a9b      	subs	r3, r3, r2
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	440b      	add	r3, r1
 801057a:	333e      	adds	r3, #62	; 0x3e
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	e00b      	b.n	8010598 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	4613      	mov	r3, r2
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	1a9b      	subs	r3, r3, r2
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	440b      	add	r3, r1
 8010592:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010596:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010598:	4618      	mov	r0, r3
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	460b      	mov	r3, r1
 80105ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b0:	2300      	movs	r3, #0
 80105b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80105be:	78fa      	ldrb	r2, [r7, #3]
 80105c0:	4611      	mov	r1, r2
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7f7 fb81 	bl	8007cca <HAL_PCD_SetAddress>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f000 f860 	bl	8010694 <USBD_Get_USB_Status>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80105d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b086      	sub	sp, #24
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	60f8      	str	r0, [r7, #12]
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	461a      	mov	r2, r3
 80105ee:	460b      	mov	r3, r1
 80105f0:	72fb      	strb	r3, [r7, #11]
 80105f2:	4613      	mov	r3, r2
 80105f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010604:	893b      	ldrh	r3, [r7, #8]
 8010606:	7af9      	ldrb	r1, [r7, #11]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	f7f7 fc98 	bl	8007f3e <HAL_PCD_EP_Transmit>
 801060e:	4603      	mov	r3, r0
 8010610:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 f83d 	bl	8010694 <USBD_Get_USB_Status>
 801061a:	4603      	mov	r3, r0
 801061c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801061e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3718      	adds	r7, #24
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b086      	sub	sp, #24
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	607a      	str	r2, [r7, #4]
 8010632:	461a      	mov	r2, r3
 8010634:	460b      	mov	r3, r1
 8010636:	72fb      	strb	r3, [r7, #11]
 8010638:	4613      	mov	r3, r2
 801063a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801063c:	2300      	movs	r3, #0
 801063e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801064a:	893b      	ldrh	r3, [r7, #8]
 801064c:	7af9      	ldrb	r1, [r7, #11]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	f7f7 fc12 	bl	8007e78 <HAL_PCD_EP_Receive>
 8010654:	4603      	mov	r3, r0
 8010656:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8010658:	7dfb      	ldrb	r3, [r7, #23]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 f81a 	bl	8010694 <USBD_Get_USB_Status>
 8010660:	4603      	mov	r3, r0
 8010662:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8010664:	7dbb      	ldrb	r3, [r7, #22]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010680:	78fa      	ldrb	r2, [r7, #3]
 8010682:	4611      	mov	r1, r2
 8010684:	4618      	mov	r0, r3
 8010686:	f7f7 fc42 	bl	8007f0e <HAL_PCD_EP_GetRxCount>
 801068a:	4603      	mov	r3, r0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106a2:	79fb      	ldrb	r3, [r7, #7]
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d817      	bhi.n	80106d8 <USBD_Get_USB_Status+0x44>
 80106a8:	a201      	add	r2, pc, #4	; (adr r2, 80106b0 <USBD_Get_USB_Status+0x1c>)
 80106aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ae:	bf00      	nop
 80106b0:	080106c1 	.word	0x080106c1
 80106b4:	080106c7 	.word	0x080106c7
 80106b8:	080106cd 	.word	0x080106cd
 80106bc:	080106d3 	.word	0x080106d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73fb      	strb	r3, [r7, #15]
    break;
 80106c4:	e00b      	b.n	80106de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106c6:	2302      	movs	r3, #2
 80106c8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ca:	e008      	b.n	80106de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106cc:	2301      	movs	r3, #1
 80106ce:	73fb      	strb	r3, [r7, #15]
    break;
 80106d0:	e005      	b.n	80106de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106d2:	2302      	movs	r3, #2
 80106d4:	73fb      	strb	r3, [r7, #15]
    break;
 80106d6:	e002      	b.n	80106de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80106d8:	2302      	movs	r3, #2
 80106da:	73fb      	strb	r3, [r7, #15]
    break;
 80106dc:	bf00      	nop
  }
  return usb_status;
 80106de:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3714      	adds	r7, #20
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <__errno>:
 80106ec:	4b01      	ldr	r3, [pc, #4]	; (80106f4 <__errno+0x8>)
 80106ee:	6818      	ldr	r0, [r3, #0]
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20000e34 	.word	0x20000e34

080106f8 <__libc_init_array>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	4e0d      	ldr	r6, [pc, #52]	; (8010730 <__libc_init_array+0x38>)
 80106fc:	4c0d      	ldr	r4, [pc, #52]	; (8010734 <__libc_init_array+0x3c>)
 80106fe:	1ba4      	subs	r4, r4, r6
 8010700:	10a4      	asrs	r4, r4, #2
 8010702:	2500      	movs	r5, #0
 8010704:	42a5      	cmp	r5, r4
 8010706:	d109      	bne.n	801071c <__libc_init_array+0x24>
 8010708:	4e0b      	ldr	r6, [pc, #44]	; (8010738 <__libc_init_array+0x40>)
 801070a:	4c0c      	ldr	r4, [pc, #48]	; (801073c <__libc_init_array+0x44>)
 801070c:	f005 f97e 	bl	8015a0c <_init>
 8010710:	1ba4      	subs	r4, r4, r6
 8010712:	10a4      	asrs	r4, r4, #2
 8010714:	2500      	movs	r5, #0
 8010716:	42a5      	cmp	r5, r4
 8010718:	d105      	bne.n	8010726 <__libc_init_array+0x2e>
 801071a:	bd70      	pop	{r4, r5, r6, pc}
 801071c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010720:	4798      	blx	r3
 8010722:	3501      	adds	r5, #1
 8010724:	e7ee      	b.n	8010704 <__libc_init_array+0xc>
 8010726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801072a:	4798      	blx	r3
 801072c:	3501      	adds	r5, #1
 801072e:	e7f2      	b.n	8010716 <__libc_init_array+0x1e>
 8010730:	0801663c 	.word	0x0801663c
 8010734:	0801663c 	.word	0x0801663c
 8010738:	0801663c 	.word	0x0801663c
 801073c:	08016640 	.word	0x08016640

08010740 <malloc>:
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <malloc+0xc>)
 8010742:	4601      	mov	r1, r0
 8010744:	6818      	ldr	r0, [r3, #0]
 8010746:	f000 b885 	b.w	8010854 <_malloc_r>
 801074a:	bf00      	nop
 801074c:	20000e34 	.word	0x20000e34

08010750 <free>:
 8010750:	4b02      	ldr	r3, [pc, #8]	; (801075c <free+0xc>)
 8010752:	4601      	mov	r1, r0
 8010754:	6818      	ldr	r0, [r3, #0]
 8010756:	f000 b82f 	b.w	80107b8 <_free_r>
 801075a:	bf00      	nop
 801075c:	20000e34 	.word	0x20000e34

08010760 <memcpy>:
 8010760:	b510      	push	{r4, lr}
 8010762:	1e43      	subs	r3, r0, #1
 8010764:	440a      	add	r2, r1
 8010766:	4291      	cmp	r1, r2
 8010768:	d100      	bne.n	801076c <memcpy+0xc>
 801076a:	bd10      	pop	{r4, pc}
 801076c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010774:	e7f7      	b.n	8010766 <memcpy+0x6>

08010776 <memmove>:
 8010776:	4288      	cmp	r0, r1
 8010778:	b510      	push	{r4, lr}
 801077a:	eb01 0302 	add.w	r3, r1, r2
 801077e:	d807      	bhi.n	8010790 <memmove+0x1a>
 8010780:	1e42      	subs	r2, r0, #1
 8010782:	4299      	cmp	r1, r3
 8010784:	d00a      	beq.n	801079c <memmove+0x26>
 8010786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801078a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801078e:	e7f8      	b.n	8010782 <memmove+0xc>
 8010790:	4283      	cmp	r3, r0
 8010792:	d9f5      	bls.n	8010780 <memmove+0xa>
 8010794:	1881      	adds	r1, r0, r2
 8010796:	1ad2      	subs	r2, r2, r3
 8010798:	42d3      	cmn	r3, r2
 801079a:	d100      	bne.n	801079e <memmove+0x28>
 801079c:	bd10      	pop	{r4, pc}
 801079e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80107a6:	e7f7      	b.n	8010798 <memmove+0x22>

080107a8 <memset>:
 80107a8:	4402      	add	r2, r0
 80107aa:	4603      	mov	r3, r0
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d100      	bne.n	80107b2 <memset+0xa>
 80107b0:	4770      	bx	lr
 80107b2:	f803 1b01 	strb.w	r1, [r3], #1
 80107b6:	e7f9      	b.n	80107ac <memset+0x4>

080107b8 <_free_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4605      	mov	r5, r0
 80107bc:	2900      	cmp	r1, #0
 80107be:	d045      	beq.n	801084c <_free_r+0x94>
 80107c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107c4:	1f0c      	subs	r4, r1, #4
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	bfb8      	it	lt
 80107ca:	18e4      	addlt	r4, r4, r3
 80107cc:	f002 ffce 	bl	801376c <__malloc_lock>
 80107d0:	4a1f      	ldr	r2, [pc, #124]	; (8010850 <_free_r+0x98>)
 80107d2:	6813      	ldr	r3, [r2, #0]
 80107d4:	4610      	mov	r0, r2
 80107d6:	b933      	cbnz	r3, 80107e6 <_free_r+0x2e>
 80107d8:	6063      	str	r3, [r4, #4]
 80107da:	6014      	str	r4, [r2, #0]
 80107dc:	4628      	mov	r0, r5
 80107de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107e2:	f002 bfc4 	b.w	801376e <__malloc_unlock>
 80107e6:	42a3      	cmp	r3, r4
 80107e8:	d90c      	bls.n	8010804 <_free_r+0x4c>
 80107ea:	6821      	ldr	r1, [r4, #0]
 80107ec:	1862      	adds	r2, r4, r1
 80107ee:	4293      	cmp	r3, r2
 80107f0:	bf04      	itt	eq
 80107f2:	681a      	ldreq	r2, [r3, #0]
 80107f4:	685b      	ldreq	r3, [r3, #4]
 80107f6:	6063      	str	r3, [r4, #4]
 80107f8:	bf04      	itt	eq
 80107fa:	1852      	addeq	r2, r2, r1
 80107fc:	6022      	streq	r2, [r4, #0]
 80107fe:	6004      	str	r4, [r0, #0]
 8010800:	e7ec      	b.n	80107dc <_free_r+0x24>
 8010802:	4613      	mov	r3, r2
 8010804:	685a      	ldr	r2, [r3, #4]
 8010806:	b10a      	cbz	r2, 801080c <_free_r+0x54>
 8010808:	42a2      	cmp	r2, r4
 801080a:	d9fa      	bls.n	8010802 <_free_r+0x4a>
 801080c:	6819      	ldr	r1, [r3, #0]
 801080e:	1858      	adds	r0, r3, r1
 8010810:	42a0      	cmp	r0, r4
 8010812:	d10b      	bne.n	801082c <_free_r+0x74>
 8010814:	6820      	ldr	r0, [r4, #0]
 8010816:	4401      	add	r1, r0
 8010818:	1858      	adds	r0, r3, r1
 801081a:	4282      	cmp	r2, r0
 801081c:	6019      	str	r1, [r3, #0]
 801081e:	d1dd      	bne.n	80107dc <_free_r+0x24>
 8010820:	6810      	ldr	r0, [r2, #0]
 8010822:	6852      	ldr	r2, [r2, #4]
 8010824:	605a      	str	r2, [r3, #4]
 8010826:	4401      	add	r1, r0
 8010828:	6019      	str	r1, [r3, #0]
 801082a:	e7d7      	b.n	80107dc <_free_r+0x24>
 801082c:	d902      	bls.n	8010834 <_free_r+0x7c>
 801082e:	230c      	movs	r3, #12
 8010830:	602b      	str	r3, [r5, #0]
 8010832:	e7d3      	b.n	80107dc <_free_r+0x24>
 8010834:	6820      	ldr	r0, [r4, #0]
 8010836:	1821      	adds	r1, r4, r0
 8010838:	428a      	cmp	r2, r1
 801083a:	bf04      	itt	eq
 801083c:	6811      	ldreq	r1, [r2, #0]
 801083e:	6852      	ldreq	r2, [r2, #4]
 8010840:	6062      	str	r2, [r4, #4]
 8010842:	bf04      	itt	eq
 8010844:	1809      	addeq	r1, r1, r0
 8010846:	6021      	streq	r1, [r4, #0]
 8010848:	605c      	str	r4, [r3, #4]
 801084a:	e7c7      	b.n	80107dc <_free_r+0x24>
 801084c:	bd38      	pop	{r3, r4, r5, pc}
 801084e:	bf00      	nop
 8010850:	200051cc 	.word	0x200051cc

08010854 <_malloc_r>:
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	1ccd      	adds	r5, r1, #3
 8010858:	f025 0503 	bic.w	r5, r5, #3
 801085c:	3508      	adds	r5, #8
 801085e:	2d0c      	cmp	r5, #12
 8010860:	bf38      	it	cc
 8010862:	250c      	movcc	r5, #12
 8010864:	2d00      	cmp	r5, #0
 8010866:	4606      	mov	r6, r0
 8010868:	db01      	blt.n	801086e <_malloc_r+0x1a>
 801086a:	42a9      	cmp	r1, r5
 801086c:	d903      	bls.n	8010876 <_malloc_r+0x22>
 801086e:	230c      	movs	r3, #12
 8010870:	6033      	str	r3, [r6, #0]
 8010872:	2000      	movs	r0, #0
 8010874:	bd70      	pop	{r4, r5, r6, pc}
 8010876:	f002 ff79 	bl	801376c <__malloc_lock>
 801087a:	4a21      	ldr	r2, [pc, #132]	; (8010900 <_malloc_r+0xac>)
 801087c:	6814      	ldr	r4, [r2, #0]
 801087e:	4621      	mov	r1, r4
 8010880:	b991      	cbnz	r1, 80108a8 <_malloc_r+0x54>
 8010882:	4c20      	ldr	r4, [pc, #128]	; (8010904 <_malloc_r+0xb0>)
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	b91b      	cbnz	r3, 8010890 <_malloc_r+0x3c>
 8010888:	4630      	mov	r0, r6
 801088a:	f000 fe7b 	bl	8011584 <_sbrk_r>
 801088e:	6020      	str	r0, [r4, #0]
 8010890:	4629      	mov	r1, r5
 8010892:	4630      	mov	r0, r6
 8010894:	f000 fe76 	bl	8011584 <_sbrk_r>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d124      	bne.n	80108e6 <_malloc_r+0x92>
 801089c:	230c      	movs	r3, #12
 801089e:	6033      	str	r3, [r6, #0]
 80108a0:	4630      	mov	r0, r6
 80108a2:	f002 ff64 	bl	801376e <__malloc_unlock>
 80108a6:	e7e4      	b.n	8010872 <_malloc_r+0x1e>
 80108a8:	680b      	ldr	r3, [r1, #0]
 80108aa:	1b5b      	subs	r3, r3, r5
 80108ac:	d418      	bmi.n	80108e0 <_malloc_r+0x8c>
 80108ae:	2b0b      	cmp	r3, #11
 80108b0:	d90f      	bls.n	80108d2 <_malloc_r+0x7e>
 80108b2:	600b      	str	r3, [r1, #0]
 80108b4:	50cd      	str	r5, [r1, r3]
 80108b6:	18cc      	adds	r4, r1, r3
 80108b8:	4630      	mov	r0, r6
 80108ba:	f002 ff58 	bl	801376e <__malloc_unlock>
 80108be:	f104 000b 	add.w	r0, r4, #11
 80108c2:	1d23      	adds	r3, r4, #4
 80108c4:	f020 0007 	bic.w	r0, r0, #7
 80108c8:	1ac3      	subs	r3, r0, r3
 80108ca:	d0d3      	beq.n	8010874 <_malloc_r+0x20>
 80108cc:	425a      	negs	r2, r3
 80108ce:	50e2      	str	r2, [r4, r3]
 80108d0:	e7d0      	b.n	8010874 <_malloc_r+0x20>
 80108d2:	428c      	cmp	r4, r1
 80108d4:	684b      	ldr	r3, [r1, #4]
 80108d6:	bf16      	itet	ne
 80108d8:	6063      	strne	r3, [r4, #4]
 80108da:	6013      	streq	r3, [r2, #0]
 80108dc:	460c      	movne	r4, r1
 80108de:	e7eb      	b.n	80108b8 <_malloc_r+0x64>
 80108e0:	460c      	mov	r4, r1
 80108e2:	6849      	ldr	r1, [r1, #4]
 80108e4:	e7cc      	b.n	8010880 <_malloc_r+0x2c>
 80108e6:	1cc4      	adds	r4, r0, #3
 80108e8:	f024 0403 	bic.w	r4, r4, #3
 80108ec:	42a0      	cmp	r0, r4
 80108ee:	d005      	beq.n	80108fc <_malloc_r+0xa8>
 80108f0:	1a21      	subs	r1, r4, r0
 80108f2:	4630      	mov	r0, r6
 80108f4:	f000 fe46 	bl	8011584 <_sbrk_r>
 80108f8:	3001      	adds	r0, #1
 80108fa:	d0cf      	beq.n	801089c <_malloc_r+0x48>
 80108fc:	6025      	str	r5, [r4, #0]
 80108fe:	e7db      	b.n	80108b8 <_malloc_r+0x64>
 8010900:	200051cc 	.word	0x200051cc
 8010904:	200051d0 	.word	0x200051d0

08010908 <__cvt>:
 8010908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801090c:	ec55 4b10 	vmov	r4, r5, d0
 8010910:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010916:	2d00      	cmp	r5, #0
 8010918:	460e      	mov	r6, r1
 801091a:	4691      	mov	r9, r2
 801091c:	4619      	mov	r1, r3
 801091e:	bfb8      	it	lt
 8010920:	4622      	movlt	r2, r4
 8010922:	462b      	mov	r3, r5
 8010924:	f027 0720 	bic.w	r7, r7, #32
 8010928:	bfbb      	ittet	lt
 801092a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801092e:	461d      	movlt	r5, r3
 8010930:	2300      	movge	r3, #0
 8010932:	232d      	movlt	r3, #45	; 0x2d
 8010934:	bfb8      	it	lt
 8010936:	4614      	movlt	r4, r2
 8010938:	2f46      	cmp	r7, #70	; 0x46
 801093a:	700b      	strb	r3, [r1, #0]
 801093c:	d004      	beq.n	8010948 <__cvt+0x40>
 801093e:	2f45      	cmp	r7, #69	; 0x45
 8010940:	d100      	bne.n	8010944 <__cvt+0x3c>
 8010942:	3601      	adds	r6, #1
 8010944:	2102      	movs	r1, #2
 8010946:	e000      	b.n	801094a <__cvt+0x42>
 8010948:	2103      	movs	r1, #3
 801094a:	ab03      	add	r3, sp, #12
 801094c:	9301      	str	r3, [sp, #4]
 801094e:	ab02      	add	r3, sp, #8
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	4632      	mov	r2, r6
 8010954:	4653      	mov	r3, sl
 8010956:	ec45 4b10 	vmov	d0, r4, r5
 801095a:	f001 fdf5 	bl	8012548 <_dtoa_r>
 801095e:	2f47      	cmp	r7, #71	; 0x47
 8010960:	4680      	mov	r8, r0
 8010962:	d102      	bne.n	801096a <__cvt+0x62>
 8010964:	f019 0f01 	tst.w	r9, #1
 8010968:	d026      	beq.n	80109b8 <__cvt+0xb0>
 801096a:	2f46      	cmp	r7, #70	; 0x46
 801096c:	eb08 0906 	add.w	r9, r8, r6
 8010970:	d111      	bne.n	8010996 <__cvt+0x8e>
 8010972:	f898 3000 	ldrb.w	r3, [r8]
 8010976:	2b30      	cmp	r3, #48	; 0x30
 8010978:	d10a      	bne.n	8010990 <__cvt+0x88>
 801097a:	2200      	movs	r2, #0
 801097c:	2300      	movs	r3, #0
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7f0 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010986:	b918      	cbnz	r0, 8010990 <__cvt+0x88>
 8010988:	f1c6 0601 	rsb	r6, r6, #1
 801098c:	f8ca 6000 	str.w	r6, [sl]
 8010990:	f8da 3000 	ldr.w	r3, [sl]
 8010994:	4499      	add	r9, r3
 8010996:	2200      	movs	r2, #0
 8010998:	2300      	movs	r3, #0
 801099a:	4620      	mov	r0, r4
 801099c:	4629      	mov	r1, r5
 801099e:	f7f0 f8a3 	bl	8000ae8 <__aeabi_dcmpeq>
 80109a2:	b938      	cbnz	r0, 80109b4 <__cvt+0xac>
 80109a4:	2230      	movs	r2, #48	; 0x30
 80109a6:	9b03      	ldr	r3, [sp, #12]
 80109a8:	454b      	cmp	r3, r9
 80109aa:	d205      	bcs.n	80109b8 <__cvt+0xb0>
 80109ac:	1c59      	adds	r1, r3, #1
 80109ae:	9103      	str	r1, [sp, #12]
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	e7f8      	b.n	80109a6 <__cvt+0x9e>
 80109b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80109b8:	9b03      	ldr	r3, [sp, #12]
 80109ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109bc:	eba3 0308 	sub.w	r3, r3, r8
 80109c0:	4640      	mov	r0, r8
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	b004      	add	sp, #16
 80109c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080109ca <__exponent>:
 80109ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109cc:	2900      	cmp	r1, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	bfba      	itte	lt
 80109d2:	4249      	neglt	r1, r1
 80109d4:	232d      	movlt	r3, #45	; 0x2d
 80109d6:	232b      	movge	r3, #43	; 0x2b
 80109d8:	2909      	cmp	r1, #9
 80109da:	f804 2b02 	strb.w	r2, [r4], #2
 80109de:	7043      	strb	r3, [r0, #1]
 80109e0:	dd20      	ble.n	8010a24 <__exponent+0x5a>
 80109e2:	f10d 0307 	add.w	r3, sp, #7
 80109e6:	461f      	mov	r7, r3
 80109e8:	260a      	movs	r6, #10
 80109ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80109ee:	fb06 1115 	mls	r1, r6, r5, r1
 80109f2:	3130      	adds	r1, #48	; 0x30
 80109f4:	2d09      	cmp	r5, #9
 80109f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80109fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80109fe:	4629      	mov	r1, r5
 8010a00:	dc09      	bgt.n	8010a16 <__exponent+0x4c>
 8010a02:	3130      	adds	r1, #48	; 0x30
 8010a04:	3b02      	subs	r3, #2
 8010a06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010a0a:	42bb      	cmp	r3, r7
 8010a0c:	4622      	mov	r2, r4
 8010a0e:	d304      	bcc.n	8010a1a <__exponent+0x50>
 8010a10:	1a10      	subs	r0, r2, r0
 8010a12:	b003      	add	sp, #12
 8010a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a16:	4613      	mov	r3, r2
 8010a18:	e7e7      	b.n	80109ea <__exponent+0x20>
 8010a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a1e:	f804 2b01 	strb.w	r2, [r4], #1
 8010a22:	e7f2      	b.n	8010a0a <__exponent+0x40>
 8010a24:	2330      	movs	r3, #48	; 0x30
 8010a26:	4419      	add	r1, r3
 8010a28:	7083      	strb	r3, [r0, #2]
 8010a2a:	1d02      	adds	r2, r0, #4
 8010a2c:	70c1      	strb	r1, [r0, #3]
 8010a2e:	e7ef      	b.n	8010a10 <__exponent+0x46>

08010a30 <_printf_float>:
 8010a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a34:	b08d      	sub	sp, #52	; 0x34
 8010a36:	460c      	mov	r4, r1
 8010a38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010a3c:	4616      	mov	r6, r2
 8010a3e:	461f      	mov	r7, r3
 8010a40:	4605      	mov	r5, r0
 8010a42:	f002 fe73 	bl	801372c <_localeconv_r>
 8010a46:	6803      	ldr	r3, [r0, #0]
 8010a48:	9304      	str	r3, [sp, #16]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ef fbca 	bl	80001e4 <strlen>
 8010a50:	2300      	movs	r3, #0
 8010a52:	930a      	str	r3, [sp, #40]	; 0x28
 8010a54:	f8d8 3000 	ldr.w	r3, [r8]
 8010a58:	9005      	str	r0, [sp, #20]
 8010a5a:	3307      	adds	r3, #7
 8010a5c:	f023 0307 	bic.w	r3, r3, #7
 8010a60:	f103 0208 	add.w	r2, r3, #8
 8010a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010a68:	f8d4 b000 	ldr.w	fp, [r4]
 8010a6c:	f8c8 2000 	str.w	r2, [r8]
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010a78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010a7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010a80:	9307      	str	r3, [sp, #28]
 8010a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a86:	f04f 32ff 	mov.w	r2, #4294967295
 8010a8a:	4ba7      	ldr	r3, [pc, #668]	; (8010d28 <_printf_float+0x2f8>)
 8010a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a90:	f7f0 f85c 	bl	8000b4c <__aeabi_dcmpun>
 8010a94:	bb70      	cbnz	r0, 8010af4 <_printf_float+0xc4>
 8010a96:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9a:	4ba3      	ldr	r3, [pc, #652]	; (8010d28 <_printf_float+0x2f8>)
 8010a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010aa0:	f7f0 f836 	bl	8000b10 <__aeabi_dcmple>
 8010aa4:	bb30      	cbnz	r0, 8010af4 <_printf_float+0xc4>
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	4640      	mov	r0, r8
 8010aac:	4649      	mov	r1, r9
 8010aae:	f7f0 f825 	bl	8000afc <__aeabi_dcmplt>
 8010ab2:	b110      	cbz	r0, 8010aba <_printf_float+0x8a>
 8010ab4:	232d      	movs	r3, #45	; 0x2d
 8010ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aba:	4a9c      	ldr	r2, [pc, #624]	; (8010d2c <_printf_float+0x2fc>)
 8010abc:	4b9c      	ldr	r3, [pc, #624]	; (8010d30 <_printf_float+0x300>)
 8010abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010ac2:	bf8c      	ite	hi
 8010ac4:	4690      	movhi	r8, r2
 8010ac6:	4698      	movls	r8, r3
 8010ac8:	2303      	movs	r3, #3
 8010aca:	f02b 0204 	bic.w	r2, fp, #4
 8010ace:	6123      	str	r3, [r4, #16]
 8010ad0:	6022      	str	r2, [r4, #0]
 8010ad2:	f04f 0900 	mov.w	r9, #0
 8010ad6:	9700      	str	r7, [sp, #0]
 8010ad8:	4633      	mov	r3, r6
 8010ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8010adc:	4621      	mov	r1, r4
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f000 f9e6 	bl	8010eb0 <_printf_common>
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	f040 808d 	bne.w	8010c04 <_printf_float+0x1d4>
 8010aea:	f04f 30ff 	mov.w	r0, #4294967295
 8010aee:	b00d      	add	sp, #52	; 0x34
 8010af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af4:	4642      	mov	r2, r8
 8010af6:	464b      	mov	r3, r9
 8010af8:	4640      	mov	r0, r8
 8010afa:	4649      	mov	r1, r9
 8010afc:	f7f0 f826 	bl	8000b4c <__aeabi_dcmpun>
 8010b00:	b110      	cbz	r0, 8010b08 <_printf_float+0xd8>
 8010b02:	4a8c      	ldr	r2, [pc, #560]	; (8010d34 <_printf_float+0x304>)
 8010b04:	4b8c      	ldr	r3, [pc, #560]	; (8010d38 <_printf_float+0x308>)
 8010b06:	e7da      	b.n	8010abe <_printf_float+0x8e>
 8010b08:	6861      	ldr	r1, [r4, #4]
 8010b0a:	1c4b      	adds	r3, r1, #1
 8010b0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010b10:	a80a      	add	r0, sp, #40	; 0x28
 8010b12:	d13e      	bne.n	8010b92 <_printf_float+0x162>
 8010b14:	2306      	movs	r3, #6
 8010b16:	6063      	str	r3, [r4, #4]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b1e:	ab09      	add	r3, sp, #36	; 0x24
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	ec49 8b10 	vmov	d0, r8, r9
 8010b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b2a:	6022      	str	r2, [r4, #0]
 8010b2c:	f8cd a004 	str.w	sl, [sp, #4]
 8010b30:	6861      	ldr	r1, [r4, #4]
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7ff fee8 	bl	8010908 <__cvt>
 8010b38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010b3c:	2b47      	cmp	r3, #71	; 0x47
 8010b3e:	4680      	mov	r8, r0
 8010b40:	d109      	bne.n	8010b56 <_printf_float+0x126>
 8010b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b44:	1cd8      	adds	r0, r3, #3
 8010b46:	db02      	blt.n	8010b4e <_printf_float+0x11e>
 8010b48:	6862      	ldr	r2, [r4, #4]
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	dd47      	ble.n	8010bde <_printf_float+0x1ae>
 8010b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b52:	fa5f fa8a 	uxtb.w	sl, sl
 8010b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b5c:	d824      	bhi.n	8010ba8 <_printf_float+0x178>
 8010b5e:	3901      	subs	r1, #1
 8010b60:	4652      	mov	r2, sl
 8010b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b66:	9109      	str	r1, [sp, #36]	; 0x24
 8010b68:	f7ff ff2f 	bl	80109ca <__exponent>
 8010b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b6e:	1813      	adds	r3, r2, r0
 8010b70:	2a01      	cmp	r2, #1
 8010b72:	4681      	mov	r9, r0
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	dc02      	bgt.n	8010b7e <_printf_float+0x14e>
 8010b78:	6822      	ldr	r2, [r4, #0]
 8010b7a:	07d1      	lsls	r1, r2, #31
 8010b7c:	d501      	bpl.n	8010b82 <_printf_float+0x152>
 8010b7e:	3301      	adds	r3, #1
 8010b80:	6123      	str	r3, [r4, #16]
 8010b82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d0a5      	beq.n	8010ad6 <_printf_float+0xa6>
 8010b8a:	232d      	movs	r3, #45	; 0x2d
 8010b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b90:	e7a1      	b.n	8010ad6 <_printf_float+0xa6>
 8010b92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010b96:	f000 8177 	beq.w	8010e88 <_printf_float+0x458>
 8010b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010b9e:	d1bb      	bne.n	8010b18 <_printf_float+0xe8>
 8010ba0:	2900      	cmp	r1, #0
 8010ba2:	d1b9      	bne.n	8010b18 <_printf_float+0xe8>
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e7b6      	b.n	8010b16 <_printf_float+0xe6>
 8010ba8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010bac:	d119      	bne.n	8010be2 <_printf_float+0x1b2>
 8010bae:	2900      	cmp	r1, #0
 8010bb0:	6863      	ldr	r3, [r4, #4]
 8010bb2:	dd0c      	ble.n	8010bce <_printf_float+0x19e>
 8010bb4:	6121      	str	r1, [r4, #16]
 8010bb6:	b913      	cbnz	r3, 8010bbe <_printf_float+0x18e>
 8010bb8:	6822      	ldr	r2, [r4, #0]
 8010bba:	07d2      	lsls	r2, r2, #31
 8010bbc:	d502      	bpl.n	8010bc4 <_printf_float+0x194>
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	440b      	add	r3, r1
 8010bc2:	6123      	str	r3, [r4, #16]
 8010bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8010bc8:	f04f 0900 	mov.w	r9, #0
 8010bcc:	e7d9      	b.n	8010b82 <_printf_float+0x152>
 8010bce:	b913      	cbnz	r3, 8010bd6 <_printf_float+0x1a6>
 8010bd0:	6822      	ldr	r2, [r4, #0]
 8010bd2:	07d0      	lsls	r0, r2, #31
 8010bd4:	d501      	bpl.n	8010bda <_printf_float+0x1aa>
 8010bd6:	3302      	adds	r3, #2
 8010bd8:	e7f3      	b.n	8010bc2 <_printf_float+0x192>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e7f1      	b.n	8010bc2 <_printf_float+0x192>
 8010bde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010be6:	4293      	cmp	r3, r2
 8010be8:	db05      	blt.n	8010bf6 <_printf_float+0x1c6>
 8010bea:	6822      	ldr	r2, [r4, #0]
 8010bec:	6123      	str	r3, [r4, #16]
 8010bee:	07d1      	lsls	r1, r2, #31
 8010bf0:	d5e8      	bpl.n	8010bc4 <_printf_float+0x194>
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	e7e5      	b.n	8010bc2 <_printf_float+0x192>
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	bfd4      	ite	le
 8010bfa:	f1c3 0302 	rsble	r3, r3, #2
 8010bfe:	2301      	movgt	r3, #1
 8010c00:	4413      	add	r3, r2
 8010c02:	e7de      	b.n	8010bc2 <_printf_float+0x192>
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	055a      	lsls	r2, r3, #21
 8010c08:	d407      	bmi.n	8010c1a <_printf_float+0x1ea>
 8010c0a:	6923      	ldr	r3, [r4, #16]
 8010c0c:	4642      	mov	r2, r8
 8010c0e:	4631      	mov	r1, r6
 8010c10:	4628      	mov	r0, r5
 8010c12:	47b8      	blx	r7
 8010c14:	3001      	adds	r0, #1
 8010c16:	d12b      	bne.n	8010c70 <_printf_float+0x240>
 8010c18:	e767      	b.n	8010aea <_printf_float+0xba>
 8010c1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010c1e:	f240 80dc 	bls.w	8010dda <_printf_float+0x3aa>
 8010c22:	2200      	movs	r2, #0
 8010c24:	2300      	movs	r3, #0
 8010c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c2a:	f7ef ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d033      	beq.n	8010c9a <_printf_float+0x26a>
 8010c32:	2301      	movs	r3, #1
 8010c34:	4a41      	ldr	r2, [pc, #260]	; (8010d3c <_printf_float+0x30c>)
 8010c36:	4631      	mov	r1, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	47b8      	blx	r7
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f43f af54 	beq.w	8010aea <_printf_float+0xba>
 8010c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c46:	429a      	cmp	r2, r3
 8010c48:	db02      	blt.n	8010c50 <_printf_float+0x220>
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	07d8      	lsls	r0, r3, #31
 8010c4e:	d50f      	bpl.n	8010c70 <_printf_float+0x240>
 8010c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c54:	4631      	mov	r1, r6
 8010c56:	4628      	mov	r0, r5
 8010c58:	47b8      	blx	r7
 8010c5a:	3001      	adds	r0, #1
 8010c5c:	f43f af45 	beq.w	8010aea <_printf_float+0xba>
 8010c60:	f04f 0800 	mov.w	r8, #0
 8010c64:	f104 091a 	add.w	r9, r4, #26
 8010c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	4543      	cmp	r3, r8
 8010c6e:	dc09      	bgt.n	8010c84 <_printf_float+0x254>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	079b      	lsls	r3, r3, #30
 8010c74:	f100 8103 	bmi.w	8010e7e <_printf_float+0x44e>
 8010c78:	68e0      	ldr	r0, [r4, #12]
 8010c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c7c:	4298      	cmp	r0, r3
 8010c7e:	bfb8      	it	lt
 8010c80:	4618      	movlt	r0, r3
 8010c82:	e734      	b.n	8010aee <_printf_float+0xbe>
 8010c84:	2301      	movs	r3, #1
 8010c86:	464a      	mov	r2, r9
 8010c88:	4631      	mov	r1, r6
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	47b8      	blx	r7
 8010c8e:	3001      	adds	r0, #1
 8010c90:	f43f af2b 	beq.w	8010aea <_printf_float+0xba>
 8010c94:	f108 0801 	add.w	r8, r8, #1
 8010c98:	e7e6      	b.n	8010c68 <_printf_float+0x238>
 8010c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	dc2b      	bgt.n	8010cf8 <_printf_float+0x2c8>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4a26      	ldr	r2, [pc, #152]	; (8010d3c <_printf_float+0x30c>)
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	47b8      	blx	r7
 8010caa:	3001      	adds	r0, #1
 8010cac:	f43f af1d 	beq.w	8010aea <_printf_float+0xba>
 8010cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cb2:	b923      	cbnz	r3, 8010cbe <_printf_float+0x28e>
 8010cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cb6:	b913      	cbnz	r3, 8010cbe <_printf_float+0x28e>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	07d9      	lsls	r1, r3, #31
 8010cbc:	d5d8      	bpl.n	8010c70 <_printf_float+0x240>
 8010cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cc2:	4631      	mov	r1, r6
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	47b8      	blx	r7
 8010cc8:	3001      	adds	r0, #1
 8010cca:	f43f af0e 	beq.w	8010aea <_printf_float+0xba>
 8010cce:	f04f 0900 	mov.w	r9, #0
 8010cd2:	f104 0a1a 	add.w	sl, r4, #26
 8010cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd8:	425b      	negs	r3, r3
 8010cda:	454b      	cmp	r3, r9
 8010cdc:	dc01      	bgt.n	8010ce2 <_printf_float+0x2b2>
 8010cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ce0:	e794      	b.n	8010c0c <_printf_float+0x1dc>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	4652      	mov	r2, sl
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	4628      	mov	r0, r5
 8010cea:	47b8      	blx	r7
 8010cec:	3001      	adds	r0, #1
 8010cee:	f43f aefc 	beq.w	8010aea <_printf_float+0xba>
 8010cf2:	f109 0901 	add.w	r9, r9, #1
 8010cf6:	e7ee      	b.n	8010cd6 <_printf_float+0x2a6>
 8010cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	bfa8      	it	ge
 8010d00:	461a      	movge	r2, r3
 8010d02:	2a00      	cmp	r2, #0
 8010d04:	4691      	mov	r9, r2
 8010d06:	dd07      	ble.n	8010d18 <_printf_float+0x2e8>
 8010d08:	4613      	mov	r3, r2
 8010d0a:	4631      	mov	r1, r6
 8010d0c:	4642      	mov	r2, r8
 8010d0e:	4628      	mov	r0, r5
 8010d10:	47b8      	blx	r7
 8010d12:	3001      	adds	r0, #1
 8010d14:	f43f aee9 	beq.w	8010aea <_printf_float+0xba>
 8010d18:	f104 031a 	add.w	r3, r4, #26
 8010d1c:	f04f 0b00 	mov.w	fp, #0
 8010d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d24:	9306      	str	r3, [sp, #24]
 8010d26:	e015      	b.n	8010d54 <_printf_float+0x324>
 8010d28:	7fefffff 	.word	0x7fefffff
 8010d2c:	08015f14 	.word	0x08015f14
 8010d30:	08015f10 	.word	0x08015f10
 8010d34:	08015f1c 	.word	0x08015f1c
 8010d38:	08015f18 	.word	0x08015f18
 8010d3c:	080160d3 	.word	0x080160d3
 8010d40:	2301      	movs	r3, #1
 8010d42:	9a06      	ldr	r2, [sp, #24]
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	47b8      	blx	r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	f43f aecd 	beq.w	8010aea <_printf_float+0xba>
 8010d50:	f10b 0b01 	add.w	fp, fp, #1
 8010d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010d58:	ebaa 0309 	sub.w	r3, sl, r9
 8010d5c:	455b      	cmp	r3, fp
 8010d5e:	dcef      	bgt.n	8010d40 <_printf_float+0x310>
 8010d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d64:	429a      	cmp	r2, r3
 8010d66:	44d0      	add	r8, sl
 8010d68:	db15      	blt.n	8010d96 <_printf_float+0x366>
 8010d6a:	6823      	ldr	r3, [r4, #0]
 8010d6c:	07da      	lsls	r2, r3, #31
 8010d6e:	d412      	bmi.n	8010d96 <_printf_float+0x366>
 8010d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d74:	eba3 020a 	sub.w	r2, r3, sl
 8010d78:	eba3 0a01 	sub.w	sl, r3, r1
 8010d7c:	4592      	cmp	sl, r2
 8010d7e:	bfa8      	it	ge
 8010d80:	4692      	movge	sl, r2
 8010d82:	f1ba 0f00 	cmp.w	sl, #0
 8010d86:	dc0e      	bgt.n	8010da6 <_printf_float+0x376>
 8010d88:	f04f 0800 	mov.w	r8, #0
 8010d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d90:	f104 091a 	add.w	r9, r4, #26
 8010d94:	e019      	b.n	8010dca <_printf_float+0x39a>
 8010d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	47b8      	blx	r7
 8010da0:	3001      	adds	r0, #1
 8010da2:	d1e5      	bne.n	8010d70 <_printf_float+0x340>
 8010da4:	e6a1      	b.n	8010aea <_printf_float+0xba>
 8010da6:	4653      	mov	r3, sl
 8010da8:	4642      	mov	r2, r8
 8010daa:	4631      	mov	r1, r6
 8010dac:	4628      	mov	r0, r5
 8010dae:	47b8      	blx	r7
 8010db0:	3001      	adds	r0, #1
 8010db2:	d1e9      	bne.n	8010d88 <_printf_float+0x358>
 8010db4:	e699      	b.n	8010aea <_printf_float+0xba>
 8010db6:	2301      	movs	r3, #1
 8010db8:	464a      	mov	r2, r9
 8010dba:	4631      	mov	r1, r6
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	47b8      	blx	r7
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	f43f ae92 	beq.w	8010aea <_printf_float+0xba>
 8010dc6:	f108 0801 	add.w	r8, r8, #1
 8010dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dce:	1a9b      	subs	r3, r3, r2
 8010dd0:	eba3 030a 	sub.w	r3, r3, sl
 8010dd4:	4543      	cmp	r3, r8
 8010dd6:	dcee      	bgt.n	8010db6 <_printf_float+0x386>
 8010dd8:	e74a      	b.n	8010c70 <_printf_float+0x240>
 8010dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ddc:	2a01      	cmp	r2, #1
 8010dde:	dc01      	bgt.n	8010de4 <_printf_float+0x3b4>
 8010de0:	07db      	lsls	r3, r3, #31
 8010de2:	d53a      	bpl.n	8010e5a <_printf_float+0x42a>
 8010de4:	2301      	movs	r3, #1
 8010de6:	4642      	mov	r2, r8
 8010de8:	4631      	mov	r1, r6
 8010dea:	4628      	mov	r0, r5
 8010dec:	47b8      	blx	r7
 8010dee:	3001      	adds	r0, #1
 8010df0:	f43f ae7b 	beq.w	8010aea <_printf_float+0xba>
 8010df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010df8:	4631      	mov	r1, r6
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	47b8      	blx	r7
 8010dfe:	3001      	adds	r0, #1
 8010e00:	f108 0801 	add.w	r8, r8, #1
 8010e04:	f43f ae71 	beq.w	8010aea <_printf_float+0xba>
 8010e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8010e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e14:	2300      	movs	r3, #0
 8010e16:	f7ef fe67 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e1a:	b9c8      	cbnz	r0, 8010e50 <_printf_float+0x420>
 8010e1c:	4653      	mov	r3, sl
 8010e1e:	4642      	mov	r2, r8
 8010e20:	4631      	mov	r1, r6
 8010e22:	4628      	mov	r0, r5
 8010e24:	47b8      	blx	r7
 8010e26:	3001      	adds	r0, #1
 8010e28:	d10e      	bne.n	8010e48 <_printf_float+0x418>
 8010e2a:	e65e      	b.n	8010aea <_printf_float+0xba>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	4652      	mov	r2, sl
 8010e30:	4631      	mov	r1, r6
 8010e32:	4628      	mov	r0, r5
 8010e34:	47b8      	blx	r7
 8010e36:	3001      	adds	r0, #1
 8010e38:	f43f ae57 	beq.w	8010aea <_printf_float+0xba>
 8010e3c:	f108 0801 	add.w	r8, r8, #1
 8010e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e42:	3b01      	subs	r3, #1
 8010e44:	4543      	cmp	r3, r8
 8010e46:	dcf1      	bgt.n	8010e2c <_printf_float+0x3fc>
 8010e48:	464b      	mov	r3, r9
 8010e4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e4e:	e6de      	b.n	8010c0e <_printf_float+0x1de>
 8010e50:	f04f 0800 	mov.w	r8, #0
 8010e54:	f104 0a1a 	add.w	sl, r4, #26
 8010e58:	e7f2      	b.n	8010e40 <_printf_float+0x410>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e7df      	b.n	8010e1e <_printf_float+0x3ee>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	464a      	mov	r2, r9
 8010e62:	4631      	mov	r1, r6
 8010e64:	4628      	mov	r0, r5
 8010e66:	47b8      	blx	r7
 8010e68:	3001      	adds	r0, #1
 8010e6a:	f43f ae3e 	beq.w	8010aea <_printf_float+0xba>
 8010e6e:	f108 0801 	add.w	r8, r8, #1
 8010e72:	68e3      	ldr	r3, [r4, #12]
 8010e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	4543      	cmp	r3, r8
 8010e7a:	dcf0      	bgt.n	8010e5e <_printf_float+0x42e>
 8010e7c:	e6fc      	b.n	8010c78 <_printf_float+0x248>
 8010e7e:	f04f 0800 	mov.w	r8, #0
 8010e82:	f104 0919 	add.w	r9, r4, #25
 8010e86:	e7f4      	b.n	8010e72 <_printf_float+0x442>
 8010e88:	2900      	cmp	r1, #0
 8010e8a:	f43f ae8b 	beq.w	8010ba4 <_printf_float+0x174>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010e94:	ab09      	add	r3, sp, #36	; 0x24
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	ec49 8b10 	vmov	d0, r8, r9
 8010e9c:	6022      	str	r2, [r4, #0]
 8010e9e:	f8cd a004 	str.w	sl, [sp, #4]
 8010ea2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f7ff fd2e 	bl	8010908 <__cvt>
 8010eac:	4680      	mov	r8, r0
 8010eae:	e648      	b.n	8010b42 <_printf_float+0x112>

08010eb0 <_printf_common>:
 8010eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb4:	4691      	mov	r9, r2
 8010eb6:	461f      	mov	r7, r3
 8010eb8:	688a      	ldr	r2, [r1, #8]
 8010eba:	690b      	ldr	r3, [r1, #16]
 8010ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	bfb8      	it	lt
 8010ec4:	4613      	movlt	r3, r2
 8010ec6:	f8c9 3000 	str.w	r3, [r9]
 8010eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ece:	4606      	mov	r6, r0
 8010ed0:	460c      	mov	r4, r1
 8010ed2:	b112      	cbz	r2, 8010eda <_printf_common+0x2a>
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	f8c9 3000 	str.w	r3, [r9]
 8010eda:	6823      	ldr	r3, [r4, #0]
 8010edc:	0699      	lsls	r1, r3, #26
 8010ede:	bf42      	ittt	mi
 8010ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010ee4:	3302      	addmi	r3, #2
 8010ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8010eea:	6825      	ldr	r5, [r4, #0]
 8010eec:	f015 0506 	ands.w	r5, r5, #6
 8010ef0:	d107      	bne.n	8010f02 <_printf_common+0x52>
 8010ef2:	f104 0a19 	add.w	sl, r4, #25
 8010ef6:	68e3      	ldr	r3, [r4, #12]
 8010ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8010efc:	1a9b      	subs	r3, r3, r2
 8010efe:	42ab      	cmp	r3, r5
 8010f00:	dc28      	bgt.n	8010f54 <_printf_common+0xa4>
 8010f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	3300      	adds	r3, #0
 8010f0a:	bf18      	it	ne
 8010f0c:	2301      	movne	r3, #1
 8010f0e:	0692      	lsls	r2, r2, #26
 8010f10:	d42d      	bmi.n	8010f6e <_printf_common+0xbe>
 8010f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f16:	4639      	mov	r1, r7
 8010f18:	4630      	mov	r0, r6
 8010f1a:	47c0      	blx	r8
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	d020      	beq.n	8010f62 <_printf_common+0xb2>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	68e5      	ldr	r5, [r4, #12]
 8010f24:	f8d9 2000 	ldr.w	r2, [r9]
 8010f28:	f003 0306 	and.w	r3, r3, #6
 8010f2c:	2b04      	cmp	r3, #4
 8010f2e:	bf08      	it	eq
 8010f30:	1aad      	subeq	r5, r5, r2
 8010f32:	68a3      	ldr	r3, [r4, #8]
 8010f34:	6922      	ldr	r2, [r4, #16]
 8010f36:	bf0c      	ite	eq
 8010f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f3c:	2500      	movne	r5, #0
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	bfc4      	itt	gt
 8010f42:	1a9b      	subgt	r3, r3, r2
 8010f44:	18ed      	addgt	r5, r5, r3
 8010f46:	f04f 0900 	mov.w	r9, #0
 8010f4a:	341a      	adds	r4, #26
 8010f4c:	454d      	cmp	r5, r9
 8010f4e:	d11a      	bne.n	8010f86 <_printf_common+0xd6>
 8010f50:	2000      	movs	r0, #0
 8010f52:	e008      	b.n	8010f66 <_printf_common+0xb6>
 8010f54:	2301      	movs	r3, #1
 8010f56:	4652      	mov	r2, sl
 8010f58:	4639      	mov	r1, r7
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	47c0      	blx	r8
 8010f5e:	3001      	adds	r0, #1
 8010f60:	d103      	bne.n	8010f6a <_printf_common+0xba>
 8010f62:	f04f 30ff 	mov.w	r0, #4294967295
 8010f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6a:	3501      	adds	r5, #1
 8010f6c:	e7c3      	b.n	8010ef6 <_printf_common+0x46>
 8010f6e:	18e1      	adds	r1, r4, r3
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	2030      	movs	r0, #48	; 0x30
 8010f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f78:	4422      	add	r2, r4
 8010f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f82:	3302      	adds	r3, #2
 8010f84:	e7c5      	b.n	8010f12 <_printf_common+0x62>
 8010f86:	2301      	movs	r3, #1
 8010f88:	4622      	mov	r2, r4
 8010f8a:	4639      	mov	r1, r7
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	47c0      	blx	r8
 8010f90:	3001      	adds	r0, #1
 8010f92:	d0e6      	beq.n	8010f62 <_printf_common+0xb2>
 8010f94:	f109 0901 	add.w	r9, r9, #1
 8010f98:	e7d8      	b.n	8010f4c <_printf_common+0x9c>
	...

08010f9c <_printf_i>:
 8010f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	7e09      	ldrb	r1, [r1, #24]
 8010fa8:	b085      	sub	sp, #20
 8010faa:	296e      	cmp	r1, #110	; 0x6e
 8010fac:	4617      	mov	r7, r2
 8010fae:	4606      	mov	r6, r0
 8010fb0:	4698      	mov	r8, r3
 8010fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fb4:	f000 80b3 	beq.w	801111e <_printf_i+0x182>
 8010fb8:	d822      	bhi.n	8011000 <_printf_i+0x64>
 8010fba:	2963      	cmp	r1, #99	; 0x63
 8010fbc:	d036      	beq.n	801102c <_printf_i+0x90>
 8010fbe:	d80a      	bhi.n	8010fd6 <_printf_i+0x3a>
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	f000 80b9 	beq.w	8011138 <_printf_i+0x19c>
 8010fc6:	2958      	cmp	r1, #88	; 0x58
 8010fc8:	f000 8083 	beq.w	80110d2 <_printf_i+0x136>
 8010fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010fd4:	e032      	b.n	801103c <_printf_i+0xa0>
 8010fd6:	2964      	cmp	r1, #100	; 0x64
 8010fd8:	d001      	beq.n	8010fde <_printf_i+0x42>
 8010fda:	2969      	cmp	r1, #105	; 0x69
 8010fdc:	d1f6      	bne.n	8010fcc <_printf_i+0x30>
 8010fde:	6820      	ldr	r0, [r4, #0]
 8010fe0:	6813      	ldr	r3, [r2, #0]
 8010fe2:	0605      	lsls	r5, r0, #24
 8010fe4:	f103 0104 	add.w	r1, r3, #4
 8010fe8:	d52a      	bpl.n	8011040 <_printf_i+0xa4>
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	6011      	str	r1, [r2, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	da03      	bge.n	8010ffa <_printf_i+0x5e>
 8010ff2:	222d      	movs	r2, #45	; 0x2d
 8010ff4:	425b      	negs	r3, r3
 8010ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010ffa:	486f      	ldr	r0, [pc, #444]	; (80111b8 <_printf_i+0x21c>)
 8010ffc:	220a      	movs	r2, #10
 8010ffe:	e039      	b.n	8011074 <_printf_i+0xd8>
 8011000:	2973      	cmp	r1, #115	; 0x73
 8011002:	f000 809d 	beq.w	8011140 <_printf_i+0x1a4>
 8011006:	d808      	bhi.n	801101a <_printf_i+0x7e>
 8011008:	296f      	cmp	r1, #111	; 0x6f
 801100a:	d020      	beq.n	801104e <_printf_i+0xb2>
 801100c:	2970      	cmp	r1, #112	; 0x70
 801100e:	d1dd      	bne.n	8010fcc <_printf_i+0x30>
 8011010:	6823      	ldr	r3, [r4, #0]
 8011012:	f043 0320 	orr.w	r3, r3, #32
 8011016:	6023      	str	r3, [r4, #0]
 8011018:	e003      	b.n	8011022 <_printf_i+0x86>
 801101a:	2975      	cmp	r1, #117	; 0x75
 801101c:	d017      	beq.n	801104e <_printf_i+0xb2>
 801101e:	2978      	cmp	r1, #120	; 0x78
 8011020:	d1d4      	bne.n	8010fcc <_printf_i+0x30>
 8011022:	2378      	movs	r3, #120	; 0x78
 8011024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011028:	4864      	ldr	r0, [pc, #400]	; (80111bc <_printf_i+0x220>)
 801102a:	e055      	b.n	80110d8 <_printf_i+0x13c>
 801102c:	6813      	ldr	r3, [r2, #0]
 801102e:	1d19      	adds	r1, r3, #4
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	6011      	str	r1, [r2, #0]
 8011034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801103c:	2301      	movs	r3, #1
 801103e:	e08c      	b.n	801115a <_printf_i+0x1be>
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	6011      	str	r1, [r2, #0]
 8011044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011048:	bf18      	it	ne
 801104a:	b21b      	sxthne	r3, r3
 801104c:	e7cf      	b.n	8010fee <_printf_i+0x52>
 801104e:	6813      	ldr	r3, [r2, #0]
 8011050:	6825      	ldr	r5, [r4, #0]
 8011052:	1d18      	adds	r0, r3, #4
 8011054:	6010      	str	r0, [r2, #0]
 8011056:	0628      	lsls	r0, r5, #24
 8011058:	d501      	bpl.n	801105e <_printf_i+0xc2>
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	e002      	b.n	8011064 <_printf_i+0xc8>
 801105e:	0668      	lsls	r0, r5, #25
 8011060:	d5fb      	bpl.n	801105a <_printf_i+0xbe>
 8011062:	881b      	ldrh	r3, [r3, #0]
 8011064:	4854      	ldr	r0, [pc, #336]	; (80111b8 <_printf_i+0x21c>)
 8011066:	296f      	cmp	r1, #111	; 0x6f
 8011068:	bf14      	ite	ne
 801106a:	220a      	movne	r2, #10
 801106c:	2208      	moveq	r2, #8
 801106e:	2100      	movs	r1, #0
 8011070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011074:	6865      	ldr	r5, [r4, #4]
 8011076:	60a5      	str	r5, [r4, #8]
 8011078:	2d00      	cmp	r5, #0
 801107a:	f2c0 8095 	blt.w	80111a8 <_printf_i+0x20c>
 801107e:	6821      	ldr	r1, [r4, #0]
 8011080:	f021 0104 	bic.w	r1, r1, #4
 8011084:	6021      	str	r1, [r4, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d13d      	bne.n	8011106 <_printf_i+0x16a>
 801108a:	2d00      	cmp	r5, #0
 801108c:	f040 808e 	bne.w	80111ac <_printf_i+0x210>
 8011090:	4665      	mov	r5, ip
 8011092:	2a08      	cmp	r2, #8
 8011094:	d10b      	bne.n	80110ae <_printf_i+0x112>
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	07db      	lsls	r3, r3, #31
 801109a:	d508      	bpl.n	80110ae <_printf_i+0x112>
 801109c:	6923      	ldr	r3, [r4, #16]
 801109e:	6862      	ldr	r2, [r4, #4]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	bfde      	ittt	le
 80110a4:	2330      	movle	r3, #48	; 0x30
 80110a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110ae:	ebac 0305 	sub.w	r3, ip, r5
 80110b2:	6123      	str	r3, [r4, #16]
 80110b4:	f8cd 8000 	str.w	r8, [sp]
 80110b8:	463b      	mov	r3, r7
 80110ba:	aa03      	add	r2, sp, #12
 80110bc:	4621      	mov	r1, r4
 80110be:	4630      	mov	r0, r6
 80110c0:	f7ff fef6 	bl	8010eb0 <_printf_common>
 80110c4:	3001      	adds	r0, #1
 80110c6:	d14d      	bne.n	8011164 <_printf_i+0x1c8>
 80110c8:	f04f 30ff 	mov.w	r0, #4294967295
 80110cc:	b005      	add	sp, #20
 80110ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110d2:	4839      	ldr	r0, [pc, #228]	; (80111b8 <_printf_i+0x21c>)
 80110d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80110d8:	6813      	ldr	r3, [r2, #0]
 80110da:	6821      	ldr	r1, [r4, #0]
 80110dc:	1d1d      	adds	r5, r3, #4
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6015      	str	r5, [r2, #0]
 80110e2:	060a      	lsls	r2, r1, #24
 80110e4:	d50b      	bpl.n	80110fe <_printf_i+0x162>
 80110e6:	07ca      	lsls	r2, r1, #31
 80110e8:	bf44      	itt	mi
 80110ea:	f041 0120 	orrmi.w	r1, r1, #32
 80110ee:	6021      	strmi	r1, [r4, #0]
 80110f0:	b91b      	cbnz	r3, 80110fa <_printf_i+0x15e>
 80110f2:	6822      	ldr	r2, [r4, #0]
 80110f4:	f022 0220 	bic.w	r2, r2, #32
 80110f8:	6022      	str	r2, [r4, #0]
 80110fa:	2210      	movs	r2, #16
 80110fc:	e7b7      	b.n	801106e <_printf_i+0xd2>
 80110fe:	064d      	lsls	r5, r1, #25
 8011100:	bf48      	it	mi
 8011102:	b29b      	uxthmi	r3, r3
 8011104:	e7ef      	b.n	80110e6 <_printf_i+0x14a>
 8011106:	4665      	mov	r5, ip
 8011108:	fbb3 f1f2 	udiv	r1, r3, r2
 801110c:	fb02 3311 	mls	r3, r2, r1, r3
 8011110:	5cc3      	ldrb	r3, [r0, r3]
 8011112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011116:	460b      	mov	r3, r1
 8011118:	2900      	cmp	r1, #0
 801111a:	d1f5      	bne.n	8011108 <_printf_i+0x16c>
 801111c:	e7b9      	b.n	8011092 <_printf_i+0xf6>
 801111e:	6813      	ldr	r3, [r2, #0]
 8011120:	6825      	ldr	r5, [r4, #0]
 8011122:	6961      	ldr	r1, [r4, #20]
 8011124:	1d18      	adds	r0, r3, #4
 8011126:	6010      	str	r0, [r2, #0]
 8011128:	0628      	lsls	r0, r5, #24
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	d501      	bpl.n	8011132 <_printf_i+0x196>
 801112e:	6019      	str	r1, [r3, #0]
 8011130:	e002      	b.n	8011138 <_printf_i+0x19c>
 8011132:	066a      	lsls	r2, r5, #25
 8011134:	d5fb      	bpl.n	801112e <_printf_i+0x192>
 8011136:	8019      	strh	r1, [r3, #0]
 8011138:	2300      	movs	r3, #0
 801113a:	6123      	str	r3, [r4, #16]
 801113c:	4665      	mov	r5, ip
 801113e:	e7b9      	b.n	80110b4 <_printf_i+0x118>
 8011140:	6813      	ldr	r3, [r2, #0]
 8011142:	1d19      	adds	r1, r3, #4
 8011144:	6011      	str	r1, [r2, #0]
 8011146:	681d      	ldr	r5, [r3, #0]
 8011148:	6862      	ldr	r2, [r4, #4]
 801114a:	2100      	movs	r1, #0
 801114c:	4628      	mov	r0, r5
 801114e:	f7ef f857 	bl	8000200 <memchr>
 8011152:	b108      	cbz	r0, 8011158 <_printf_i+0x1bc>
 8011154:	1b40      	subs	r0, r0, r5
 8011156:	6060      	str	r0, [r4, #4]
 8011158:	6863      	ldr	r3, [r4, #4]
 801115a:	6123      	str	r3, [r4, #16]
 801115c:	2300      	movs	r3, #0
 801115e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011162:	e7a7      	b.n	80110b4 <_printf_i+0x118>
 8011164:	6923      	ldr	r3, [r4, #16]
 8011166:	462a      	mov	r2, r5
 8011168:	4639      	mov	r1, r7
 801116a:	4630      	mov	r0, r6
 801116c:	47c0      	blx	r8
 801116e:	3001      	adds	r0, #1
 8011170:	d0aa      	beq.n	80110c8 <_printf_i+0x12c>
 8011172:	6823      	ldr	r3, [r4, #0]
 8011174:	079b      	lsls	r3, r3, #30
 8011176:	d413      	bmi.n	80111a0 <_printf_i+0x204>
 8011178:	68e0      	ldr	r0, [r4, #12]
 801117a:	9b03      	ldr	r3, [sp, #12]
 801117c:	4298      	cmp	r0, r3
 801117e:	bfb8      	it	lt
 8011180:	4618      	movlt	r0, r3
 8011182:	e7a3      	b.n	80110cc <_printf_i+0x130>
 8011184:	2301      	movs	r3, #1
 8011186:	464a      	mov	r2, r9
 8011188:	4639      	mov	r1, r7
 801118a:	4630      	mov	r0, r6
 801118c:	47c0      	blx	r8
 801118e:	3001      	adds	r0, #1
 8011190:	d09a      	beq.n	80110c8 <_printf_i+0x12c>
 8011192:	3501      	adds	r5, #1
 8011194:	68e3      	ldr	r3, [r4, #12]
 8011196:	9a03      	ldr	r2, [sp, #12]
 8011198:	1a9b      	subs	r3, r3, r2
 801119a:	42ab      	cmp	r3, r5
 801119c:	dcf2      	bgt.n	8011184 <_printf_i+0x1e8>
 801119e:	e7eb      	b.n	8011178 <_printf_i+0x1dc>
 80111a0:	2500      	movs	r5, #0
 80111a2:	f104 0919 	add.w	r9, r4, #25
 80111a6:	e7f5      	b.n	8011194 <_printf_i+0x1f8>
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1ac      	bne.n	8011106 <_printf_i+0x16a>
 80111ac:	7803      	ldrb	r3, [r0, #0]
 80111ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111b6:	e76c      	b.n	8011092 <_printf_i+0xf6>
 80111b8:	08015f20 	.word	0x08015f20
 80111bc:	08015f31 	.word	0x08015f31

080111c0 <_scanf_float>:
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	469a      	mov	sl, r3
 80111c6:	688b      	ldr	r3, [r1, #8]
 80111c8:	4616      	mov	r6, r2
 80111ca:	1e5a      	subs	r2, r3, #1
 80111cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80111d0:	b087      	sub	sp, #28
 80111d2:	bf83      	ittte	hi
 80111d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80111d8:	189b      	addhi	r3, r3, r2
 80111da:	9301      	strhi	r3, [sp, #4]
 80111dc:	2300      	movls	r3, #0
 80111de:	bf86      	itte	hi
 80111e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80111e4:	608b      	strhi	r3, [r1, #8]
 80111e6:	9301      	strls	r3, [sp, #4]
 80111e8:	680b      	ldr	r3, [r1, #0]
 80111ea:	4688      	mov	r8, r1
 80111ec:	f04f 0b00 	mov.w	fp, #0
 80111f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80111f4:	f848 3b1c 	str.w	r3, [r8], #28
 80111f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80111fc:	4607      	mov	r7, r0
 80111fe:	460c      	mov	r4, r1
 8011200:	4645      	mov	r5, r8
 8011202:	465a      	mov	r2, fp
 8011204:	46d9      	mov	r9, fp
 8011206:	f8cd b008 	str.w	fp, [sp, #8]
 801120a:	68a1      	ldr	r1, [r4, #8]
 801120c:	b181      	cbz	r1, 8011230 <_scanf_float+0x70>
 801120e:	6833      	ldr	r3, [r6, #0]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	2b49      	cmp	r3, #73	; 0x49
 8011214:	d071      	beq.n	80112fa <_scanf_float+0x13a>
 8011216:	d84d      	bhi.n	80112b4 <_scanf_float+0xf4>
 8011218:	2b39      	cmp	r3, #57	; 0x39
 801121a:	d840      	bhi.n	801129e <_scanf_float+0xde>
 801121c:	2b31      	cmp	r3, #49	; 0x31
 801121e:	f080 8088 	bcs.w	8011332 <_scanf_float+0x172>
 8011222:	2b2d      	cmp	r3, #45	; 0x2d
 8011224:	f000 8090 	beq.w	8011348 <_scanf_float+0x188>
 8011228:	d815      	bhi.n	8011256 <_scanf_float+0x96>
 801122a:	2b2b      	cmp	r3, #43	; 0x2b
 801122c:	f000 808c 	beq.w	8011348 <_scanf_float+0x188>
 8011230:	f1b9 0f00 	cmp.w	r9, #0
 8011234:	d003      	beq.n	801123e <_scanf_float+0x7e>
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801123c:	6023      	str	r3, [r4, #0]
 801123e:	3a01      	subs	r2, #1
 8011240:	2a01      	cmp	r2, #1
 8011242:	f200 80ea 	bhi.w	801141a <_scanf_float+0x25a>
 8011246:	4545      	cmp	r5, r8
 8011248:	f200 80dc 	bhi.w	8011404 <_scanf_float+0x244>
 801124c:	2601      	movs	r6, #1
 801124e:	4630      	mov	r0, r6
 8011250:	b007      	add	sp, #28
 8011252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011256:	2b2e      	cmp	r3, #46	; 0x2e
 8011258:	f000 809f 	beq.w	801139a <_scanf_float+0x1da>
 801125c:	2b30      	cmp	r3, #48	; 0x30
 801125e:	d1e7      	bne.n	8011230 <_scanf_float+0x70>
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011266:	d064      	beq.n	8011332 <_scanf_float+0x172>
 8011268:	9b01      	ldr	r3, [sp, #4]
 801126a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801126e:	6020      	str	r0, [r4, #0]
 8011270:	f109 0901 	add.w	r9, r9, #1
 8011274:	b11b      	cbz	r3, 801127e <_scanf_float+0xbe>
 8011276:	3b01      	subs	r3, #1
 8011278:	3101      	adds	r1, #1
 801127a:	9301      	str	r3, [sp, #4]
 801127c:	60a1      	str	r1, [r4, #8]
 801127e:	68a3      	ldr	r3, [r4, #8]
 8011280:	3b01      	subs	r3, #1
 8011282:	60a3      	str	r3, [r4, #8]
 8011284:	6923      	ldr	r3, [r4, #16]
 8011286:	3301      	adds	r3, #1
 8011288:	6123      	str	r3, [r4, #16]
 801128a:	6873      	ldr	r3, [r6, #4]
 801128c:	3b01      	subs	r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	6073      	str	r3, [r6, #4]
 8011292:	f340 80ac 	ble.w	80113ee <_scanf_float+0x22e>
 8011296:	6833      	ldr	r3, [r6, #0]
 8011298:	3301      	adds	r3, #1
 801129a:	6033      	str	r3, [r6, #0]
 801129c:	e7b5      	b.n	801120a <_scanf_float+0x4a>
 801129e:	2b45      	cmp	r3, #69	; 0x45
 80112a0:	f000 8085 	beq.w	80113ae <_scanf_float+0x1ee>
 80112a4:	2b46      	cmp	r3, #70	; 0x46
 80112a6:	d06a      	beq.n	801137e <_scanf_float+0x1be>
 80112a8:	2b41      	cmp	r3, #65	; 0x41
 80112aa:	d1c1      	bne.n	8011230 <_scanf_float+0x70>
 80112ac:	2a01      	cmp	r2, #1
 80112ae:	d1bf      	bne.n	8011230 <_scanf_float+0x70>
 80112b0:	2202      	movs	r2, #2
 80112b2:	e046      	b.n	8011342 <_scanf_float+0x182>
 80112b4:	2b65      	cmp	r3, #101	; 0x65
 80112b6:	d07a      	beq.n	80113ae <_scanf_float+0x1ee>
 80112b8:	d818      	bhi.n	80112ec <_scanf_float+0x12c>
 80112ba:	2b54      	cmp	r3, #84	; 0x54
 80112bc:	d066      	beq.n	801138c <_scanf_float+0x1cc>
 80112be:	d811      	bhi.n	80112e4 <_scanf_float+0x124>
 80112c0:	2b4e      	cmp	r3, #78	; 0x4e
 80112c2:	d1b5      	bne.n	8011230 <_scanf_float+0x70>
 80112c4:	2a00      	cmp	r2, #0
 80112c6:	d146      	bne.n	8011356 <_scanf_float+0x196>
 80112c8:	f1b9 0f00 	cmp.w	r9, #0
 80112cc:	d145      	bne.n	801135a <_scanf_float+0x19a>
 80112ce:	6821      	ldr	r1, [r4, #0]
 80112d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80112d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80112d8:	d13f      	bne.n	801135a <_scanf_float+0x19a>
 80112da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80112de:	6021      	str	r1, [r4, #0]
 80112e0:	2201      	movs	r2, #1
 80112e2:	e02e      	b.n	8011342 <_scanf_float+0x182>
 80112e4:	2b59      	cmp	r3, #89	; 0x59
 80112e6:	d01e      	beq.n	8011326 <_scanf_float+0x166>
 80112e8:	2b61      	cmp	r3, #97	; 0x61
 80112ea:	e7de      	b.n	80112aa <_scanf_float+0xea>
 80112ec:	2b6e      	cmp	r3, #110	; 0x6e
 80112ee:	d0e9      	beq.n	80112c4 <_scanf_float+0x104>
 80112f0:	d815      	bhi.n	801131e <_scanf_float+0x15e>
 80112f2:	2b66      	cmp	r3, #102	; 0x66
 80112f4:	d043      	beq.n	801137e <_scanf_float+0x1be>
 80112f6:	2b69      	cmp	r3, #105	; 0x69
 80112f8:	d19a      	bne.n	8011230 <_scanf_float+0x70>
 80112fa:	f1bb 0f00 	cmp.w	fp, #0
 80112fe:	d138      	bne.n	8011372 <_scanf_float+0x1b2>
 8011300:	f1b9 0f00 	cmp.w	r9, #0
 8011304:	d197      	bne.n	8011236 <_scanf_float+0x76>
 8011306:	6821      	ldr	r1, [r4, #0]
 8011308:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801130c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011310:	d195      	bne.n	801123e <_scanf_float+0x7e>
 8011312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011316:	6021      	str	r1, [r4, #0]
 8011318:	f04f 0b01 	mov.w	fp, #1
 801131c:	e011      	b.n	8011342 <_scanf_float+0x182>
 801131e:	2b74      	cmp	r3, #116	; 0x74
 8011320:	d034      	beq.n	801138c <_scanf_float+0x1cc>
 8011322:	2b79      	cmp	r3, #121	; 0x79
 8011324:	d184      	bne.n	8011230 <_scanf_float+0x70>
 8011326:	f1bb 0f07 	cmp.w	fp, #7
 801132a:	d181      	bne.n	8011230 <_scanf_float+0x70>
 801132c:	f04f 0b08 	mov.w	fp, #8
 8011330:	e007      	b.n	8011342 <_scanf_float+0x182>
 8011332:	eb12 0f0b 	cmn.w	r2, fp
 8011336:	f47f af7b 	bne.w	8011230 <_scanf_float+0x70>
 801133a:	6821      	ldr	r1, [r4, #0]
 801133c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011340:	6021      	str	r1, [r4, #0]
 8011342:	702b      	strb	r3, [r5, #0]
 8011344:	3501      	adds	r5, #1
 8011346:	e79a      	b.n	801127e <_scanf_float+0xbe>
 8011348:	6821      	ldr	r1, [r4, #0]
 801134a:	0608      	lsls	r0, r1, #24
 801134c:	f57f af70 	bpl.w	8011230 <_scanf_float+0x70>
 8011350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011354:	e7f4      	b.n	8011340 <_scanf_float+0x180>
 8011356:	2a02      	cmp	r2, #2
 8011358:	d047      	beq.n	80113ea <_scanf_float+0x22a>
 801135a:	f1bb 0f01 	cmp.w	fp, #1
 801135e:	d003      	beq.n	8011368 <_scanf_float+0x1a8>
 8011360:	f1bb 0f04 	cmp.w	fp, #4
 8011364:	f47f af64 	bne.w	8011230 <_scanf_float+0x70>
 8011368:	f10b 0b01 	add.w	fp, fp, #1
 801136c:	fa5f fb8b 	uxtb.w	fp, fp
 8011370:	e7e7      	b.n	8011342 <_scanf_float+0x182>
 8011372:	f1bb 0f03 	cmp.w	fp, #3
 8011376:	d0f7      	beq.n	8011368 <_scanf_float+0x1a8>
 8011378:	f1bb 0f05 	cmp.w	fp, #5
 801137c:	e7f2      	b.n	8011364 <_scanf_float+0x1a4>
 801137e:	f1bb 0f02 	cmp.w	fp, #2
 8011382:	f47f af55 	bne.w	8011230 <_scanf_float+0x70>
 8011386:	f04f 0b03 	mov.w	fp, #3
 801138a:	e7da      	b.n	8011342 <_scanf_float+0x182>
 801138c:	f1bb 0f06 	cmp.w	fp, #6
 8011390:	f47f af4e 	bne.w	8011230 <_scanf_float+0x70>
 8011394:	f04f 0b07 	mov.w	fp, #7
 8011398:	e7d3      	b.n	8011342 <_scanf_float+0x182>
 801139a:	6821      	ldr	r1, [r4, #0]
 801139c:	0588      	lsls	r0, r1, #22
 801139e:	f57f af47 	bpl.w	8011230 <_scanf_float+0x70>
 80113a2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80113a6:	6021      	str	r1, [r4, #0]
 80113a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80113ac:	e7c9      	b.n	8011342 <_scanf_float+0x182>
 80113ae:	6821      	ldr	r1, [r4, #0]
 80113b0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80113b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80113b8:	d006      	beq.n	80113c8 <_scanf_float+0x208>
 80113ba:	0548      	lsls	r0, r1, #21
 80113bc:	f57f af38 	bpl.w	8011230 <_scanf_float+0x70>
 80113c0:	f1b9 0f00 	cmp.w	r9, #0
 80113c4:	f43f af3b 	beq.w	801123e <_scanf_float+0x7e>
 80113c8:	0588      	lsls	r0, r1, #22
 80113ca:	bf58      	it	pl
 80113cc:	9802      	ldrpl	r0, [sp, #8]
 80113ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80113d2:	bf58      	it	pl
 80113d4:	eba9 0000 	subpl.w	r0, r9, r0
 80113d8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80113dc:	bf58      	it	pl
 80113de:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80113e2:	6021      	str	r1, [r4, #0]
 80113e4:	f04f 0900 	mov.w	r9, #0
 80113e8:	e7ab      	b.n	8011342 <_scanf_float+0x182>
 80113ea:	2203      	movs	r2, #3
 80113ec:	e7a9      	b.n	8011342 <_scanf_float+0x182>
 80113ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113f2:	9205      	str	r2, [sp, #20]
 80113f4:	4631      	mov	r1, r6
 80113f6:	4638      	mov	r0, r7
 80113f8:	4798      	blx	r3
 80113fa:	9a05      	ldr	r2, [sp, #20]
 80113fc:	2800      	cmp	r0, #0
 80113fe:	f43f af04 	beq.w	801120a <_scanf_float+0x4a>
 8011402:	e715      	b.n	8011230 <_scanf_float+0x70>
 8011404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801140c:	4632      	mov	r2, r6
 801140e:	4638      	mov	r0, r7
 8011410:	4798      	blx	r3
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	3b01      	subs	r3, #1
 8011416:	6123      	str	r3, [r4, #16]
 8011418:	e715      	b.n	8011246 <_scanf_float+0x86>
 801141a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801141e:	2b06      	cmp	r3, #6
 8011420:	d80a      	bhi.n	8011438 <_scanf_float+0x278>
 8011422:	f1bb 0f02 	cmp.w	fp, #2
 8011426:	d968      	bls.n	80114fa <_scanf_float+0x33a>
 8011428:	f1ab 0b03 	sub.w	fp, fp, #3
 801142c:	fa5f fb8b 	uxtb.w	fp, fp
 8011430:	eba5 0b0b 	sub.w	fp, r5, fp
 8011434:	455d      	cmp	r5, fp
 8011436:	d14b      	bne.n	80114d0 <_scanf_float+0x310>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	05da      	lsls	r2, r3, #23
 801143c:	d51f      	bpl.n	801147e <_scanf_float+0x2be>
 801143e:	055b      	lsls	r3, r3, #21
 8011440:	d468      	bmi.n	8011514 <_scanf_float+0x354>
 8011442:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011446:	6923      	ldr	r3, [r4, #16]
 8011448:	2965      	cmp	r1, #101	; 0x65
 801144a:	f103 33ff 	add.w	r3, r3, #4294967295
 801144e:	f105 3bff 	add.w	fp, r5, #4294967295
 8011452:	6123      	str	r3, [r4, #16]
 8011454:	d00d      	beq.n	8011472 <_scanf_float+0x2b2>
 8011456:	2945      	cmp	r1, #69	; 0x45
 8011458:	d00b      	beq.n	8011472 <_scanf_float+0x2b2>
 801145a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801145e:	4632      	mov	r2, r6
 8011460:	4638      	mov	r0, r7
 8011462:	4798      	blx	r3
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801146a:	3b01      	subs	r3, #1
 801146c:	f1a5 0b02 	sub.w	fp, r5, #2
 8011470:	6123      	str	r3, [r4, #16]
 8011472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011476:	4632      	mov	r2, r6
 8011478:	4638      	mov	r0, r7
 801147a:	4798      	blx	r3
 801147c:	465d      	mov	r5, fp
 801147e:	6826      	ldr	r6, [r4, #0]
 8011480:	f016 0610 	ands.w	r6, r6, #16
 8011484:	d17a      	bne.n	801157c <_scanf_float+0x3bc>
 8011486:	702e      	strb	r6, [r5, #0]
 8011488:	6823      	ldr	r3, [r4, #0]
 801148a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801148e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011492:	d142      	bne.n	801151a <_scanf_float+0x35a>
 8011494:	9b02      	ldr	r3, [sp, #8]
 8011496:	eba9 0303 	sub.w	r3, r9, r3
 801149a:	425a      	negs	r2, r3
 801149c:	2b00      	cmp	r3, #0
 801149e:	d149      	bne.n	8011534 <_scanf_float+0x374>
 80114a0:	2200      	movs	r2, #0
 80114a2:	4641      	mov	r1, r8
 80114a4:	4638      	mov	r0, r7
 80114a6:	f000 ff23 	bl	80122f0 <_strtod_r>
 80114aa:	6825      	ldr	r5, [r4, #0]
 80114ac:	f8da 3000 	ldr.w	r3, [sl]
 80114b0:	f015 0f02 	tst.w	r5, #2
 80114b4:	f103 0204 	add.w	r2, r3, #4
 80114b8:	ec59 8b10 	vmov	r8, r9, d0
 80114bc:	f8ca 2000 	str.w	r2, [sl]
 80114c0:	d043      	beq.n	801154a <_scanf_float+0x38a>
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	e9c3 8900 	strd	r8, r9, [r3]
 80114c8:	68e3      	ldr	r3, [r4, #12]
 80114ca:	3301      	adds	r3, #1
 80114cc:	60e3      	str	r3, [r4, #12]
 80114ce:	e6be      	b.n	801124e <_scanf_float+0x8e>
 80114d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80114d8:	4632      	mov	r2, r6
 80114da:	4638      	mov	r0, r7
 80114dc:	4798      	blx	r3
 80114de:	6923      	ldr	r3, [r4, #16]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	6123      	str	r3, [r4, #16]
 80114e4:	e7a6      	b.n	8011434 <_scanf_float+0x274>
 80114e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80114ee:	4632      	mov	r2, r6
 80114f0:	4638      	mov	r0, r7
 80114f2:	4798      	blx	r3
 80114f4:	6923      	ldr	r3, [r4, #16]
 80114f6:	3b01      	subs	r3, #1
 80114f8:	6123      	str	r3, [r4, #16]
 80114fa:	4545      	cmp	r5, r8
 80114fc:	d8f3      	bhi.n	80114e6 <_scanf_float+0x326>
 80114fe:	e6a5      	b.n	801124c <_scanf_float+0x8c>
 8011500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011508:	4632      	mov	r2, r6
 801150a:	4638      	mov	r0, r7
 801150c:	4798      	blx	r3
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	3b01      	subs	r3, #1
 8011512:	6123      	str	r3, [r4, #16]
 8011514:	4545      	cmp	r5, r8
 8011516:	d8f3      	bhi.n	8011500 <_scanf_float+0x340>
 8011518:	e698      	b.n	801124c <_scanf_float+0x8c>
 801151a:	9b03      	ldr	r3, [sp, #12]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d0bf      	beq.n	80114a0 <_scanf_float+0x2e0>
 8011520:	9904      	ldr	r1, [sp, #16]
 8011522:	230a      	movs	r3, #10
 8011524:	4632      	mov	r2, r6
 8011526:	3101      	adds	r1, #1
 8011528:	4638      	mov	r0, r7
 801152a:	f000 ff6d 	bl	8012408 <_strtol_r>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	9d04      	ldr	r5, [sp, #16]
 8011532:	1ac2      	subs	r2, r0, r3
 8011534:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011538:	429d      	cmp	r5, r3
 801153a:	bf28      	it	cs
 801153c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011540:	490f      	ldr	r1, [pc, #60]	; (8011580 <_scanf_float+0x3c0>)
 8011542:	4628      	mov	r0, r5
 8011544:	f000 f868 	bl	8011618 <siprintf>
 8011548:	e7aa      	b.n	80114a0 <_scanf_float+0x2e0>
 801154a:	f015 0504 	ands.w	r5, r5, #4
 801154e:	d1b8      	bne.n	80114c2 <_scanf_float+0x302>
 8011550:	681f      	ldr	r7, [r3, #0]
 8011552:	ee10 2a10 	vmov	r2, s0
 8011556:	464b      	mov	r3, r9
 8011558:	ee10 0a10 	vmov	r0, s0
 801155c:	4649      	mov	r1, r9
 801155e:	f7ef faf5 	bl	8000b4c <__aeabi_dcmpun>
 8011562:	b128      	cbz	r0, 8011570 <_scanf_float+0x3b0>
 8011564:	4628      	mov	r0, r5
 8011566:	f000 f81d 	bl	80115a4 <nanf>
 801156a:	ed87 0a00 	vstr	s0, [r7]
 801156e:	e7ab      	b.n	80114c8 <_scanf_float+0x308>
 8011570:	4640      	mov	r0, r8
 8011572:	4649      	mov	r1, r9
 8011574:	f7ef fb48 	bl	8000c08 <__aeabi_d2f>
 8011578:	6038      	str	r0, [r7, #0]
 801157a:	e7a5      	b.n	80114c8 <_scanf_float+0x308>
 801157c:	2600      	movs	r6, #0
 801157e:	e666      	b.n	801124e <_scanf_float+0x8e>
 8011580:	08015f42 	.word	0x08015f42

08011584 <_sbrk_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	4c06      	ldr	r4, [pc, #24]	; (80115a0 <_sbrk_r+0x1c>)
 8011588:	2300      	movs	r3, #0
 801158a:	4605      	mov	r5, r0
 801158c:	4608      	mov	r0, r1
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	f7f4 feea 	bl	8006368 <_sbrk>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_sbrk_r+0x1a>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	b103      	cbz	r3, 801159e <_sbrk_r+0x1a>
 801159c:	602b      	str	r3, [r5, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	20006580 	.word	0x20006580

080115a4 <nanf>:
 80115a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80115ac <nanf+0x8>
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	7fc00000 	.word	0x7fc00000

080115b0 <sniprintf>:
 80115b0:	b40c      	push	{r2, r3}
 80115b2:	b530      	push	{r4, r5, lr}
 80115b4:	4b17      	ldr	r3, [pc, #92]	; (8011614 <sniprintf+0x64>)
 80115b6:	1e0c      	subs	r4, r1, #0
 80115b8:	b09d      	sub	sp, #116	; 0x74
 80115ba:	681d      	ldr	r5, [r3, #0]
 80115bc:	da08      	bge.n	80115d0 <sniprintf+0x20>
 80115be:	238b      	movs	r3, #139	; 0x8b
 80115c0:	602b      	str	r3, [r5, #0]
 80115c2:	f04f 30ff 	mov.w	r0, #4294967295
 80115c6:	b01d      	add	sp, #116	; 0x74
 80115c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115cc:	b002      	add	sp, #8
 80115ce:	4770      	bx	lr
 80115d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80115d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80115d8:	bf14      	ite	ne
 80115da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80115de:	4623      	moveq	r3, r4
 80115e0:	9304      	str	r3, [sp, #16]
 80115e2:	9307      	str	r3, [sp, #28]
 80115e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115e8:	9002      	str	r0, [sp, #8]
 80115ea:	9006      	str	r0, [sp, #24]
 80115ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80115f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80115f2:	ab21      	add	r3, sp, #132	; 0x84
 80115f4:	a902      	add	r1, sp, #8
 80115f6:	4628      	mov	r0, r5
 80115f8:	9301      	str	r3, [sp, #4]
 80115fa:	f002 fd21 	bl	8014040 <_svfiprintf_r>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	bfbc      	itt	lt
 8011602:	238b      	movlt	r3, #139	; 0x8b
 8011604:	602b      	strlt	r3, [r5, #0]
 8011606:	2c00      	cmp	r4, #0
 8011608:	d0dd      	beq.n	80115c6 <sniprintf+0x16>
 801160a:	9b02      	ldr	r3, [sp, #8]
 801160c:	2200      	movs	r2, #0
 801160e:	701a      	strb	r2, [r3, #0]
 8011610:	e7d9      	b.n	80115c6 <sniprintf+0x16>
 8011612:	bf00      	nop
 8011614:	20000e34 	.word	0x20000e34

08011618 <siprintf>:
 8011618:	b40e      	push	{r1, r2, r3}
 801161a:	b500      	push	{lr}
 801161c:	b09c      	sub	sp, #112	; 0x70
 801161e:	ab1d      	add	r3, sp, #116	; 0x74
 8011620:	9002      	str	r0, [sp, #8]
 8011622:	9006      	str	r0, [sp, #24]
 8011624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011628:	4809      	ldr	r0, [pc, #36]	; (8011650 <siprintf+0x38>)
 801162a:	9107      	str	r1, [sp, #28]
 801162c:	9104      	str	r1, [sp, #16]
 801162e:	4909      	ldr	r1, [pc, #36]	; (8011654 <siprintf+0x3c>)
 8011630:	f853 2b04 	ldr.w	r2, [r3], #4
 8011634:	9105      	str	r1, [sp, #20]
 8011636:	6800      	ldr	r0, [r0, #0]
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	a902      	add	r1, sp, #8
 801163c:	f002 fd00 	bl	8014040 <_svfiprintf_r>
 8011640:	9b02      	ldr	r3, [sp, #8]
 8011642:	2200      	movs	r2, #0
 8011644:	701a      	strb	r2, [r3, #0]
 8011646:	b01c      	add	sp, #112	; 0x70
 8011648:	f85d eb04 	ldr.w	lr, [sp], #4
 801164c:	b003      	add	sp, #12
 801164e:	4770      	bx	lr
 8011650:	20000e34 	.word	0x20000e34
 8011654:	ffff0208 	.word	0xffff0208

08011658 <siscanf>:
 8011658:	b40e      	push	{r1, r2, r3}
 801165a:	b530      	push	{r4, r5, lr}
 801165c:	b09c      	sub	sp, #112	; 0x70
 801165e:	ac1f      	add	r4, sp, #124	; 0x7c
 8011660:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011664:	f854 5b04 	ldr.w	r5, [r4], #4
 8011668:	f8ad 2014 	strh.w	r2, [sp, #20]
 801166c:	9002      	str	r0, [sp, #8]
 801166e:	9006      	str	r0, [sp, #24]
 8011670:	f7ee fdb8 	bl	80001e4 <strlen>
 8011674:	4b0b      	ldr	r3, [pc, #44]	; (80116a4 <siscanf+0x4c>)
 8011676:	9003      	str	r0, [sp, #12]
 8011678:	9007      	str	r0, [sp, #28]
 801167a:	930b      	str	r3, [sp, #44]	; 0x2c
 801167c:	480a      	ldr	r0, [pc, #40]	; (80116a8 <siscanf+0x50>)
 801167e:	9401      	str	r4, [sp, #4]
 8011680:	2300      	movs	r3, #0
 8011682:	930f      	str	r3, [sp, #60]	; 0x3c
 8011684:	9314      	str	r3, [sp, #80]	; 0x50
 8011686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801168a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801168e:	462a      	mov	r2, r5
 8011690:	4623      	mov	r3, r4
 8011692:	a902      	add	r1, sp, #8
 8011694:	6800      	ldr	r0, [r0, #0]
 8011696:	f002 fe25 	bl	80142e4 <__ssvfiscanf_r>
 801169a:	b01c      	add	sp, #112	; 0x70
 801169c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116a0:	b003      	add	sp, #12
 80116a2:	4770      	bx	lr
 80116a4:	080116ad 	.word	0x080116ad
 80116a8:	20000e34 	.word	0x20000e34

080116ac <__seofread>:
 80116ac:	2000      	movs	r0, #0
 80116ae:	4770      	bx	lr

080116b0 <strcat>:
 80116b0:	b510      	push	{r4, lr}
 80116b2:	4603      	mov	r3, r0
 80116b4:	781a      	ldrb	r2, [r3, #0]
 80116b6:	1c5c      	adds	r4, r3, #1
 80116b8:	b93a      	cbnz	r2, 80116ca <strcat+0x1a>
 80116ba:	3b01      	subs	r3, #1
 80116bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116c4:	2a00      	cmp	r2, #0
 80116c6:	d1f9      	bne.n	80116bc <strcat+0xc>
 80116c8:	bd10      	pop	{r4, pc}
 80116ca:	4623      	mov	r3, r4
 80116cc:	e7f2      	b.n	80116b4 <strcat+0x4>

080116ce <sulp>:
 80116ce:	b570      	push	{r4, r5, r6, lr}
 80116d0:	4604      	mov	r4, r0
 80116d2:	460d      	mov	r5, r1
 80116d4:	ec45 4b10 	vmov	d0, r4, r5
 80116d8:	4616      	mov	r6, r2
 80116da:	f002 fb15 	bl	8013d08 <__ulp>
 80116de:	ec51 0b10 	vmov	r0, r1, d0
 80116e2:	b17e      	cbz	r6, 8011704 <sulp+0x36>
 80116e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80116e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd09      	ble.n	8011704 <sulp+0x36>
 80116f0:	051b      	lsls	r3, r3, #20
 80116f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80116f6:	2400      	movs	r4, #0
 80116f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80116fc:	4622      	mov	r2, r4
 80116fe:	462b      	mov	r3, r5
 8011700:	f7ee ff8a 	bl	8000618 <__aeabi_dmul>
 8011704:	bd70      	pop	{r4, r5, r6, pc}
	...

08011708 <_strtod_l>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	461f      	mov	r7, r3
 801170e:	b0a1      	sub	sp, #132	; 0x84
 8011710:	2300      	movs	r3, #0
 8011712:	4681      	mov	r9, r0
 8011714:	4638      	mov	r0, r7
 8011716:	460e      	mov	r6, r1
 8011718:	9217      	str	r2, [sp, #92]	; 0x5c
 801171a:	931c      	str	r3, [sp, #112]	; 0x70
 801171c:	f002 f804 	bl	8013728 <__localeconv_l>
 8011720:	4680      	mov	r8, r0
 8011722:	6800      	ldr	r0, [r0, #0]
 8011724:	f7ee fd5e 	bl	80001e4 <strlen>
 8011728:	f04f 0a00 	mov.w	sl, #0
 801172c:	4604      	mov	r4, r0
 801172e:	f04f 0b00 	mov.w	fp, #0
 8011732:	961b      	str	r6, [sp, #108]	; 0x6c
 8011734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	2a0d      	cmp	r2, #13
 801173a:	d832      	bhi.n	80117a2 <_strtod_l+0x9a>
 801173c:	2a09      	cmp	r2, #9
 801173e:	d236      	bcs.n	80117ae <_strtod_l+0xa6>
 8011740:	2a00      	cmp	r2, #0
 8011742:	d03e      	beq.n	80117c2 <_strtod_l+0xba>
 8011744:	2300      	movs	r3, #0
 8011746:	930d      	str	r3, [sp, #52]	; 0x34
 8011748:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801174a:	782b      	ldrb	r3, [r5, #0]
 801174c:	2b30      	cmp	r3, #48	; 0x30
 801174e:	f040 80ac 	bne.w	80118aa <_strtod_l+0x1a2>
 8011752:	786b      	ldrb	r3, [r5, #1]
 8011754:	2b58      	cmp	r3, #88	; 0x58
 8011756:	d001      	beq.n	801175c <_strtod_l+0x54>
 8011758:	2b78      	cmp	r3, #120	; 0x78
 801175a:	d167      	bne.n	801182c <_strtod_l+0x124>
 801175c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801175e:	9301      	str	r3, [sp, #4]
 8011760:	ab1c      	add	r3, sp, #112	; 0x70
 8011762:	9300      	str	r3, [sp, #0]
 8011764:	9702      	str	r7, [sp, #8]
 8011766:	ab1d      	add	r3, sp, #116	; 0x74
 8011768:	4a88      	ldr	r2, [pc, #544]	; (801198c <_strtod_l+0x284>)
 801176a:	a91b      	add	r1, sp, #108	; 0x6c
 801176c:	4648      	mov	r0, r9
 801176e:	f001 fcf2 	bl	8013156 <__gethex>
 8011772:	f010 0407 	ands.w	r4, r0, #7
 8011776:	4606      	mov	r6, r0
 8011778:	d005      	beq.n	8011786 <_strtod_l+0x7e>
 801177a:	2c06      	cmp	r4, #6
 801177c:	d12b      	bne.n	80117d6 <_strtod_l+0xce>
 801177e:	3501      	adds	r5, #1
 8011780:	2300      	movs	r3, #0
 8011782:	951b      	str	r5, [sp, #108]	; 0x6c
 8011784:	930d      	str	r3, [sp, #52]	; 0x34
 8011786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 859a 	bne.w	80122c2 <_strtod_l+0xbba>
 801178e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011790:	b1e3      	cbz	r3, 80117cc <_strtod_l+0xc4>
 8011792:	4652      	mov	r2, sl
 8011794:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011798:	ec43 2b10 	vmov	d0, r2, r3
 801179c:	b021      	add	sp, #132	; 0x84
 801179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a2:	2a2b      	cmp	r2, #43	; 0x2b
 80117a4:	d015      	beq.n	80117d2 <_strtod_l+0xca>
 80117a6:	2a2d      	cmp	r2, #45	; 0x2d
 80117a8:	d004      	beq.n	80117b4 <_strtod_l+0xac>
 80117aa:	2a20      	cmp	r2, #32
 80117ac:	d1ca      	bne.n	8011744 <_strtod_l+0x3c>
 80117ae:	3301      	adds	r3, #1
 80117b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80117b2:	e7bf      	b.n	8011734 <_strtod_l+0x2c>
 80117b4:	2201      	movs	r2, #1
 80117b6:	920d      	str	r2, [sp, #52]	; 0x34
 80117b8:	1c5a      	adds	r2, r3, #1
 80117ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80117bc:	785b      	ldrb	r3, [r3, #1]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1c2      	bne.n	8011748 <_strtod_l+0x40>
 80117c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f040 8579 	bne.w	80122be <_strtod_l+0xbb6>
 80117cc:	4652      	mov	r2, sl
 80117ce:	465b      	mov	r3, fp
 80117d0:	e7e2      	b.n	8011798 <_strtod_l+0x90>
 80117d2:	2200      	movs	r2, #0
 80117d4:	e7ef      	b.n	80117b6 <_strtod_l+0xae>
 80117d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80117d8:	b13a      	cbz	r2, 80117ea <_strtod_l+0xe2>
 80117da:	2135      	movs	r1, #53	; 0x35
 80117dc:	a81e      	add	r0, sp, #120	; 0x78
 80117de:	f002 fb8b 	bl	8013ef8 <__copybits>
 80117e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80117e4:	4648      	mov	r0, r9
 80117e6:	f001 fff7 	bl	80137d8 <_Bfree>
 80117ea:	3c01      	subs	r4, #1
 80117ec:	2c04      	cmp	r4, #4
 80117ee:	d806      	bhi.n	80117fe <_strtod_l+0xf6>
 80117f0:	e8df f004 	tbb	[pc, r4]
 80117f4:	1714030a 	.word	0x1714030a
 80117f8:	0a          	.byte	0x0a
 80117f9:	00          	.byte	0x00
 80117fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80117fe:	0730      	lsls	r0, r6, #28
 8011800:	d5c1      	bpl.n	8011786 <_strtod_l+0x7e>
 8011802:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011806:	e7be      	b.n	8011786 <_strtod_l+0x7e>
 8011808:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801180c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801180e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011812:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011816:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801181a:	e7f0      	b.n	80117fe <_strtod_l+0xf6>
 801181c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011990 <_strtod_l+0x288>
 8011820:	e7ed      	b.n	80117fe <_strtod_l+0xf6>
 8011822:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011826:	f04f 3aff 	mov.w	sl, #4294967295
 801182a:	e7e8      	b.n	80117fe <_strtod_l+0xf6>
 801182c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	921b      	str	r2, [sp, #108]	; 0x6c
 8011832:	785b      	ldrb	r3, [r3, #1]
 8011834:	2b30      	cmp	r3, #48	; 0x30
 8011836:	d0f9      	beq.n	801182c <_strtod_l+0x124>
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0a4      	beq.n	8011786 <_strtod_l+0x7e>
 801183c:	2301      	movs	r3, #1
 801183e:	2500      	movs	r5, #0
 8011840:	9306      	str	r3, [sp, #24]
 8011842:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011844:	9308      	str	r3, [sp, #32]
 8011846:	9507      	str	r5, [sp, #28]
 8011848:	9505      	str	r5, [sp, #20]
 801184a:	220a      	movs	r2, #10
 801184c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801184e:	7807      	ldrb	r7, [r0, #0]
 8011850:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011854:	b2d9      	uxtb	r1, r3
 8011856:	2909      	cmp	r1, #9
 8011858:	d929      	bls.n	80118ae <_strtod_l+0x1a6>
 801185a:	4622      	mov	r2, r4
 801185c:	f8d8 1000 	ldr.w	r1, [r8]
 8011860:	f003 f81a 	bl	8014898 <strncmp>
 8011864:	2800      	cmp	r0, #0
 8011866:	d031      	beq.n	80118cc <_strtod_l+0x1c4>
 8011868:	2000      	movs	r0, #0
 801186a:	9c05      	ldr	r4, [sp, #20]
 801186c:	9004      	str	r0, [sp, #16]
 801186e:	463b      	mov	r3, r7
 8011870:	4602      	mov	r2, r0
 8011872:	2b65      	cmp	r3, #101	; 0x65
 8011874:	d001      	beq.n	801187a <_strtod_l+0x172>
 8011876:	2b45      	cmp	r3, #69	; 0x45
 8011878:	d114      	bne.n	80118a4 <_strtod_l+0x19c>
 801187a:	b924      	cbnz	r4, 8011886 <_strtod_l+0x17e>
 801187c:	b910      	cbnz	r0, 8011884 <_strtod_l+0x17c>
 801187e:	9b06      	ldr	r3, [sp, #24]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d09e      	beq.n	80117c2 <_strtod_l+0xba>
 8011884:	2400      	movs	r4, #0
 8011886:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011888:	1c73      	adds	r3, r6, #1
 801188a:	931b      	str	r3, [sp, #108]	; 0x6c
 801188c:	7873      	ldrb	r3, [r6, #1]
 801188e:	2b2b      	cmp	r3, #43	; 0x2b
 8011890:	d078      	beq.n	8011984 <_strtod_l+0x27c>
 8011892:	2b2d      	cmp	r3, #45	; 0x2d
 8011894:	d070      	beq.n	8011978 <_strtod_l+0x270>
 8011896:	f04f 0c00 	mov.w	ip, #0
 801189a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801189e:	2f09      	cmp	r7, #9
 80118a0:	d97c      	bls.n	801199c <_strtod_l+0x294>
 80118a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80118a4:	f04f 0e00 	mov.w	lr, #0
 80118a8:	e09a      	b.n	80119e0 <_strtod_l+0x2d8>
 80118aa:	2300      	movs	r3, #0
 80118ac:	e7c7      	b.n	801183e <_strtod_l+0x136>
 80118ae:	9905      	ldr	r1, [sp, #20]
 80118b0:	2908      	cmp	r1, #8
 80118b2:	bfdd      	ittte	le
 80118b4:	9907      	ldrle	r1, [sp, #28]
 80118b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80118ba:	9307      	strle	r3, [sp, #28]
 80118bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80118c0:	9b05      	ldr	r3, [sp, #20]
 80118c2:	3001      	adds	r0, #1
 80118c4:	3301      	adds	r3, #1
 80118c6:	9305      	str	r3, [sp, #20]
 80118c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80118ca:	e7bf      	b.n	801184c <_strtod_l+0x144>
 80118cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ce:	191a      	adds	r2, r3, r4
 80118d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80118d2:	9a05      	ldr	r2, [sp, #20]
 80118d4:	5d1b      	ldrb	r3, [r3, r4]
 80118d6:	2a00      	cmp	r2, #0
 80118d8:	d037      	beq.n	801194a <_strtod_l+0x242>
 80118da:	9c05      	ldr	r4, [sp, #20]
 80118dc:	4602      	mov	r2, r0
 80118de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80118e2:	2909      	cmp	r1, #9
 80118e4:	d913      	bls.n	801190e <_strtod_l+0x206>
 80118e6:	2101      	movs	r1, #1
 80118e8:	9104      	str	r1, [sp, #16]
 80118ea:	e7c2      	b.n	8011872 <_strtod_l+0x16a>
 80118ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ee:	1c5a      	adds	r2, r3, #1
 80118f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	3001      	adds	r0, #1
 80118f6:	2b30      	cmp	r3, #48	; 0x30
 80118f8:	d0f8      	beq.n	80118ec <_strtod_l+0x1e4>
 80118fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80118fe:	2a08      	cmp	r2, #8
 8011900:	f200 84e4 	bhi.w	80122cc <_strtod_l+0xbc4>
 8011904:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011906:	9208      	str	r2, [sp, #32]
 8011908:	4602      	mov	r2, r0
 801190a:	2000      	movs	r0, #0
 801190c:	4604      	mov	r4, r0
 801190e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011912:	f100 0101 	add.w	r1, r0, #1
 8011916:	d012      	beq.n	801193e <_strtod_l+0x236>
 8011918:	440a      	add	r2, r1
 801191a:	eb00 0c04 	add.w	ip, r0, r4
 801191e:	4621      	mov	r1, r4
 8011920:	270a      	movs	r7, #10
 8011922:	458c      	cmp	ip, r1
 8011924:	d113      	bne.n	801194e <_strtod_l+0x246>
 8011926:	1821      	adds	r1, r4, r0
 8011928:	2908      	cmp	r1, #8
 801192a:	f104 0401 	add.w	r4, r4, #1
 801192e:	4404      	add	r4, r0
 8011930:	dc19      	bgt.n	8011966 <_strtod_l+0x25e>
 8011932:	9b07      	ldr	r3, [sp, #28]
 8011934:	210a      	movs	r1, #10
 8011936:	fb01 e303 	mla	r3, r1, r3, lr
 801193a:	9307      	str	r3, [sp, #28]
 801193c:	2100      	movs	r1, #0
 801193e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011940:	1c58      	adds	r0, r3, #1
 8011942:	901b      	str	r0, [sp, #108]	; 0x6c
 8011944:	785b      	ldrb	r3, [r3, #1]
 8011946:	4608      	mov	r0, r1
 8011948:	e7c9      	b.n	80118de <_strtod_l+0x1d6>
 801194a:	9805      	ldr	r0, [sp, #20]
 801194c:	e7d3      	b.n	80118f6 <_strtod_l+0x1ee>
 801194e:	2908      	cmp	r1, #8
 8011950:	f101 0101 	add.w	r1, r1, #1
 8011954:	dc03      	bgt.n	801195e <_strtod_l+0x256>
 8011956:	9b07      	ldr	r3, [sp, #28]
 8011958:	437b      	muls	r3, r7
 801195a:	9307      	str	r3, [sp, #28]
 801195c:	e7e1      	b.n	8011922 <_strtod_l+0x21a>
 801195e:	2910      	cmp	r1, #16
 8011960:	bfd8      	it	le
 8011962:	437d      	mulle	r5, r7
 8011964:	e7dd      	b.n	8011922 <_strtod_l+0x21a>
 8011966:	2c10      	cmp	r4, #16
 8011968:	bfdc      	itt	le
 801196a:	210a      	movle	r1, #10
 801196c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011970:	e7e4      	b.n	801193c <_strtod_l+0x234>
 8011972:	2301      	movs	r3, #1
 8011974:	9304      	str	r3, [sp, #16]
 8011976:	e781      	b.n	801187c <_strtod_l+0x174>
 8011978:	f04f 0c01 	mov.w	ip, #1
 801197c:	1cb3      	adds	r3, r6, #2
 801197e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011980:	78b3      	ldrb	r3, [r6, #2]
 8011982:	e78a      	b.n	801189a <_strtod_l+0x192>
 8011984:	f04f 0c00 	mov.w	ip, #0
 8011988:	e7f8      	b.n	801197c <_strtod_l+0x274>
 801198a:	bf00      	nop
 801198c:	08015f48 	.word	0x08015f48
 8011990:	7ff00000 	.word	0x7ff00000
 8011994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011996:	1c5f      	adds	r7, r3, #1
 8011998:	971b      	str	r7, [sp, #108]	; 0x6c
 801199a:	785b      	ldrb	r3, [r3, #1]
 801199c:	2b30      	cmp	r3, #48	; 0x30
 801199e:	d0f9      	beq.n	8011994 <_strtod_l+0x28c>
 80119a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80119a4:	2f08      	cmp	r7, #8
 80119a6:	f63f af7d 	bhi.w	80118a4 <_strtod_l+0x19c>
 80119aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80119ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119b0:	930a      	str	r3, [sp, #40]	; 0x28
 80119b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119b4:	1c5f      	adds	r7, r3, #1
 80119b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80119b8:	785b      	ldrb	r3, [r3, #1]
 80119ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80119be:	f1b8 0f09 	cmp.w	r8, #9
 80119c2:	d937      	bls.n	8011a34 <_strtod_l+0x32c>
 80119c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80119c6:	1a7f      	subs	r7, r7, r1
 80119c8:	2f08      	cmp	r7, #8
 80119ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80119ce:	dc37      	bgt.n	8011a40 <_strtod_l+0x338>
 80119d0:	45be      	cmp	lr, r7
 80119d2:	bfa8      	it	ge
 80119d4:	46be      	movge	lr, r7
 80119d6:	f1bc 0f00 	cmp.w	ip, #0
 80119da:	d001      	beq.n	80119e0 <_strtod_l+0x2d8>
 80119dc:	f1ce 0e00 	rsb	lr, lr, #0
 80119e0:	2c00      	cmp	r4, #0
 80119e2:	d151      	bne.n	8011a88 <_strtod_l+0x380>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	f47f aece 	bne.w	8011786 <_strtod_l+0x7e>
 80119ea:	9a06      	ldr	r2, [sp, #24]
 80119ec:	2a00      	cmp	r2, #0
 80119ee:	f47f aeca 	bne.w	8011786 <_strtod_l+0x7e>
 80119f2:	9a04      	ldr	r2, [sp, #16]
 80119f4:	2a00      	cmp	r2, #0
 80119f6:	f47f aee4 	bne.w	80117c2 <_strtod_l+0xba>
 80119fa:	2b4e      	cmp	r3, #78	; 0x4e
 80119fc:	d027      	beq.n	8011a4e <_strtod_l+0x346>
 80119fe:	dc21      	bgt.n	8011a44 <_strtod_l+0x33c>
 8011a00:	2b49      	cmp	r3, #73	; 0x49
 8011a02:	f47f aede 	bne.w	80117c2 <_strtod_l+0xba>
 8011a06:	49a0      	ldr	r1, [pc, #640]	; (8011c88 <_strtod_l+0x580>)
 8011a08:	a81b      	add	r0, sp, #108	; 0x6c
 8011a0a:	f001 fdd7 	bl	80135bc <__match>
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	f43f aed7 	beq.w	80117c2 <_strtod_l+0xba>
 8011a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a16:	499d      	ldr	r1, [pc, #628]	; (8011c8c <_strtod_l+0x584>)
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	a81b      	add	r0, sp, #108	; 0x6c
 8011a1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a1e:	f001 fdcd 	bl	80135bc <__match>
 8011a22:	b910      	cbnz	r0, 8011a2a <_strtod_l+0x322>
 8011a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a26:	3301      	adds	r3, #1
 8011a28:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011ca0 <_strtod_l+0x598>
 8011a2e:	f04f 0a00 	mov.w	sl, #0
 8011a32:	e6a8      	b.n	8011786 <_strtod_l+0x7e>
 8011a34:	210a      	movs	r1, #10
 8011a36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011a3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011a3e:	e7b8      	b.n	80119b2 <_strtod_l+0x2aa>
 8011a40:	46be      	mov	lr, r7
 8011a42:	e7c8      	b.n	80119d6 <_strtod_l+0x2ce>
 8011a44:	2b69      	cmp	r3, #105	; 0x69
 8011a46:	d0de      	beq.n	8011a06 <_strtod_l+0x2fe>
 8011a48:	2b6e      	cmp	r3, #110	; 0x6e
 8011a4a:	f47f aeba 	bne.w	80117c2 <_strtod_l+0xba>
 8011a4e:	4990      	ldr	r1, [pc, #576]	; (8011c90 <_strtod_l+0x588>)
 8011a50:	a81b      	add	r0, sp, #108	; 0x6c
 8011a52:	f001 fdb3 	bl	80135bc <__match>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f43f aeb3 	beq.w	80117c2 <_strtod_l+0xba>
 8011a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	2b28      	cmp	r3, #40	; 0x28
 8011a62:	d10e      	bne.n	8011a82 <_strtod_l+0x37a>
 8011a64:	aa1e      	add	r2, sp, #120	; 0x78
 8011a66:	498b      	ldr	r1, [pc, #556]	; (8011c94 <_strtod_l+0x58c>)
 8011a68:	a81b      	add	r0, sp, #108	; 0x6c
 8011a6a:	f001 fdbb 	bl	80135e4 <__hexnan>
 8011a6e:	2805      	cmp	r0, #5
 8011a70:	d107      	bne.n	8011a82 <_strtod_l+0x37a>
 8011a72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011a74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011a78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011a7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011a80:	e681      	b.n	8011786 <_strtod_l+0x7e>
 8011a82:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011ca8 <_strtod_l+0x5a0>
 8011a86:	e7d2      	b.n	8011a2e <_strtod_l+0x326>
 8011a88:	ebae 0302 	sub.w	r3, lr, r2
 8011a8c:	9306      	str	r3, [sp, #24]
 8011a8e:	9b05      	ldr	r3, [sp, #20]
 8011a90:	9807      	ldr	r0, [sp, #28]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	bf08      	it	eq
 8011a96:	4623      	moveq	r3, r4
 8011a98:	2c10      	cmp	r4, #16
 8011a9a:	9305      	str	r3, [sp, #20]
 8011a9c:	46a0      	mov	r8, r4
 8011a9e:	bfa8      	it	ge
 8011aa0:	f04f 0810 	movge.w	r8, #16
 8011aa4:	f7ee fd3e 	bl	8000524 <__aeabi_ui2d>
 8011aa8:	2c09      	cmp	r4, #9
 8011aaa:	4682      	mov	sl, r0
 8011aac:	468b      	mov	fp, r1
 8011aae:	dc13      	bgt.n	8011ad8 <_strtod_l+0x3d0>
 8011ab0:	9b06      	ldr	r3, [sp, #24]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f43f ae67 	beq.w	8011786 <_strtod_l+0x7e>
 8011ab8:	9b06      	ldr	r3, [sp, #24]
 8011aba:	dd7a      	ble.n	8011bb2 <_strtod_l+0x4aa>
 8011abc:	2b16      	cmp	r3, #22
 8011abe:	dc61      	bgt.n	8011b84 <_strtod_l+0x47c>
 8011ac0:	4a75      	ldr	r2, [pc, #468]	; (8011c98 <_strtod_l+0x590>)
 8011ac2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011ac6:	e9de 0100 	ldrd	r0, r1, [lr]
 8011aca:	4652      	mov	r2, sl
 8011acc:	465b      	mov	r3, fp
 8011ace:	f7ee fda3 	bl	8000618 <__aeabi_dmul>
 8011ad2:	4682      	mov	sl, r0
 8011ad4:	468b      	mov	fp, r1
 8011ad6:	e656      	b.n	8011786 <_strtod_l+0x7e>
 8011ad8:	4b6f      	ldr	r3, [pc, #444]	; (8011c98 <_strtod_l+0x590>)
 8011ada:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011ade:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011ae2:	f7ee fd99 	bl	8000618 <__aeabi_dmul>
 8011ae6:	4606      	mov	r6, r0
 8011ae8:	4628      	mov	r0, r5
 8011aea:	460f      	mov	r7, r1
 8011aec:	f7ee fd1a 	bl	8000524 <__aeabi_ui2d>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ee fbd8 	bl	80002ac <__adddf3>
 8011afc:	2c0f      	cmp	r4, #15
 8011afe:	4682      	mov	sl, r0
 8011b00:	468b      	mov	fp, r1
 8011b02:	ddd5      	ble.n	8011ab0 <_strtod_l+0x3a8>
 8011b04:	9b06      	ldr	r3, [sp, #24]
 8011b06:	eba4 0808 	sub.w	r8, r4, r8
 8011b0a:	4498      	add	r8, r3
 8011b0c:	f1b8 0f00 	cmp.w	r8, #0
 8011b10:	f340 8096 	ble.w	8011c40 <_strtod_l+0x538>
 8011b14:	f018 030f 	ands.w	r3, r8, #15
 8011b18:	d00a      	beq.n	8011b30 <_strtod_l+0x428>
 8011b1a:	495f      	ldr	r1, [pc, #380]	; (8011c98 <_strtod_l+0x590>)
 8011b1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b20:	4652      	mov	r2, sl
 8011b22:	465b      	mov	r3, fp
 8011b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b28:	f7ee fd76 	bl	8000618 <__aeabi_dmul>
 8011b2c:	4682      	mov	sl, r0
 8011b2e:	468b      	mov	fp, r1
 8011b30:	f038 080f 	bics.w	r8, r8, #15
 8011b34:	d073      	beq.n	8011c1e <_strtod_l+0x516>
 8011b36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b3a:	dd47      	ble.n	8011bcc <_strtod_l+0x4c4>
 8011b3c:	2400      	movs	r4, #0
 8011b3e:	46a0      	mov	r8, r4
 8011b40:	9407      	str	r4, [sp, #28]
 8011b42:	9405      	str	r4, [sp, #20]
 8011b44:	2322      	movs	r3, #34	; 0x22
 8011b46:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011ca0 <_strtod_l+0x598>
 8011b4a:	f8c9 3000 	str.w	r3, [r9]
 8011b4e:	f04f 0a00 	mov.w	sl, #0
 8011b52:	9b07      	ldr	r3, [sp, #28]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f43f ae16 	beq.w	8011786 <_strtod_l+0x7e>
 8011b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b5c:	4648      	mov	r0, r9
 8011b5e:	f001 fe3b 	bl	80137d8 <_Bfree>
 8011b62:	9905      	ldr	r1, [sp, #20]
 8011b64:	4648      	mov	r0, r9
 8011b66:	f001 fe37 	bl	80137d8 <_Bfree>
 8011b6a:	4641      	mov	r1, r8
 8011b6c:	4648      	mov	r0, r9
 8011b6e:	f001 fe33 	bl	80137d8 <_Bfree>
 8011b72:	9907      	ldr	r1, [sp, #28]
 8011b74:	4648      	mov	r0, r9
 8011b76:	f001 fe2f 	bl	80137d8 <_Bfree>
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	4648      	mov	r0, r9
 8011b7e:	f001 fe2b 	bl	80137d8 <_Bfree>
 8011b82:	e600      	b.n	8011786 <_strtod_l+0x7e>
 8011b84:	9a06      	ldr	r2, [sp, #24]
 8011b86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	dbba      	blt.n	8011b04 <_strtod_l+0x3fc>
 8011b8e:	4d42      	ldr	r5, [pc, #264]	; (8011c98 <_strtod_l+0x590>)
 8011b90:	f1c4 040f 	rsb	r4, r4, #15
 8011b94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011b98:	4652      	mov	r2, sl
 8011b9a:	465b      	mov	r3, fp
 8011b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ba0:	f7ee fd3a 	bl	8000618 <__aeabi_dmul>
 8011ba4:	9b06      	ldr	r3, [sp, #24]
 8011ba6:	1b1c      	subs	r4, r3, r4
 8011ba8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011bac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011bb0:	e78d      	b.n	8011ace <_strtod_l+0x3c6>
 8011bb2:	f113 0f16 	cmn.w	r3, #22
 8011bb6:	dba5      	blt.n	8011b04 <_strtod_l+0x3fc>
 8011bb8:	4a37      	ldr	r2, [pc, #220]	; (8011c98 <_strtod_l+0x590>)
 8011bba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011bbe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011bc2:	4650      	mov	r0, sl
 8011bc4:	4659      	mov	r1, fp
 8011bc6:	f7ee fe51 	bl	800086c <__aeabi_ddiv>
 8011bca:	e782      	b.n	8011ad2 <_strtod_l+0x3ca>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	4e33      	ldr	r6, [pc, #204]	; (8011c9c <_strtod_l+0x594>)
 8011bd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011bd4:	4650      	mov	r0, sl
 8011bd6:	4659      	mov	r1, fp
 8011bd8:	461d      	mov	r5, r3
 8011bda:	f1b8 0f01 	cmp.w	r8, #1
 8011bde:	dc21      	bgt.n	8011c24 <_strtod_l+0x51c>
 8011be0:	b10b      	cbz	r3, 8011be6 <_strtod_l+0x4de>
 8011be2:	4682      	mov	sl, r0
 8011be4:	468b      	mov	fp, r1
 8011be6:	4b2d      	ldr	r3, [pc, #180]	; (8011c9c <_strtod_l+0x594>)
 8011be8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011bec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011bf0:	4652      	mov	r2, sl
 8011bf2:	465b      	mov	r3, fp
 8011bf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011bf8:	f7ee fd0e 	bl	8000618 <__aeabi_dmul>
 8011bfc:	4b28      	ldr	r3, [pc, #160]	; (8011ca0 <_strtod_l+0x598>)
 8011bfe:	460a      	mov	r2, r1
 8011c00:	400b      	ands	r3, r1
 8011c02:	4928      	ldr	r1, [pc, #160]	; (8011ca4 <_strtod_l+0x59c>)
 8011c04:	428b      	cmp	r3, r1
 8011c06:	4682      	mov	sl, r0
 8011c08:	d898      	bhi.n	8011b3c <_strtod_l+0x434>
 8011c0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011c0e:	428b      	cmp	r3, r1
 8011c10:	bf86      	itte	hi
 8011c12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011cac <_strtod_l+0x5a4>
 8011c16:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011c1e:	2300      	movs	r3, #0
 8011c20:	9304      	str	r3, [sp, #16]
 8011c22:	e077      	b.n	8011d14 <_strtod_l+0x60c>
 8011c24:	f018 0f01 	tst.w	r8, #1
 8011c28:	d006      	beq.n	8011c38 <_strtod_l+0x530>
 8011c2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c32:	f7ee fcf1 	bl	8000618 <__aeabi_dmul>
 8011c36:	2301      	movs	r3, #1
 8011c38:	3501      	adds	r5, #1
 8011c3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c3e:	e7cc      	b.n	8011bda <_strtod_l+0x4d2>
 8011c40:	d0ed      	beq.n	8011c1e <_strtod_l+0x516>
 8011c42:	f1c8 0800 	rsb	r8, r8, #0
 8011c46:	f018 020f 	ands.w	r2, r8, #15
 8011c4a:	d00a      	beq.n	8011c62 <_strtod_l+0x55a>
 8011c4c:	4b12      	ldr	r3, [pc, #72]	; (8011c98 <_strtod_l+0x590>)
 8011c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c52:	4650      	mov	r0, sl
 8011c54:	4659      	mov	r1, fp
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	f7ee fe07 	bl	800086c <__aeabi_ddiv>
 8011c5e:	4682      	mov	sl, r0
 8011c60:	468b      	mov	fp, r1
 8011c62:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011c66:	d0da      	beq.n	8011c1e <_strtod_l+0x516>
 8011c68:	f1b8 0f1f 	cmp.w	r8, #31
 8011c6c:	dd20      	ble.n	8011cb0 <_strtod_l+0x5a8>
 8011c6e:	2400      	movs	r4, #0
 8011c70:	46a0      	mov	r8, r4
 8011c72:	9407      	str	r4, [sp, #28]
 8011c74:	9405      	str	r4, [sp, #20]
 8011c76:	2322      	movs	r3, #34	; 0x22
 8011c78:	f04f 0a00 	mov.w	sl, #0
 8011c7c:	f04f 0b00 	mov.w	fp, #0
 8011c80:	f8c9 3000 	str.w	r3, [r9]
 8011c84:	e765      	b.n	8011b52 <_strtod_l+0x44a>
 8011c86:	bf00      	nop
 8011c88:	08015f15 	.word	0x08015f15
 8011c8c:	08015f9b 	.word	0x08015f9b
 8011c90:	08015f1d 	.word	0x08015f1d
 8011c94:	08015f5c 	.word	0x08015f5c
 8011c98:	08015fd8 	.word	0x08015fd8
 8011c9c:	08015fb0 	.word	0x08015fb0
 8011ca0:	7ff00000 	.word	0x7ff00000
 8011ca4:	7ca00000 	.word	0x7ca00000
 8011ca8:	fff80000 	.word	0xfff80000
 8011cac:	7fefffff 	.word	0x7fefffff
 8011cb0:	f018 0310 	ands.w	r3, r8, #16
 8011cb4:	bf18      	it	ne
 8011cb6:	236a      	movne	r3, #106	; 0x6a
 8011cb8:	4da0      	ldr	r5, [pc, #640]	; (8011f3c <_strtod_l+0x834>)
 8011cba:	9304      	str	r3, [sp, #16]
 8011cbc:	4650      	mov	r0, sl
 8011cbe:	4659      	mov	r1, fp
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f1b8 0f00 	cmp.w	r8, #0
 8011cc6:	f300 810a 	bgt.w	8011ede <_strtod_l+0x7d6>
 8011cca:	b10b      	cbz	r3, 8011cd0 <_strtod_l+0x5c8>
 8011ccc:	4682      	mov	sl, r0
 8011cce:	468b      	mov	fp, r1
 8011cd0:	9b04      	ldr	r3, [sp, #16]
 8011cd2:	b1bb      	cbz	r3, 8011d04 <_strtod_l+0x5fc>
 8011cd4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011cd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	4659      	mov	r1, fp
 8011ce0:	dd10      	ble.n	8011d04 <_strtod_l+0x5fc>
 8011ce2:	2b1f      	cmp	r3, #31
 8011ce4:	f340 8107 	ble.w	8011ef6 <_strtod_l+0x7ee>
 8011ce8:	2b34      	cmp	r3, #52	; 0x34
 8011cea:	bfde      	ittt	le
 8011cec:	3b20      	suble	r3, #32
 8011cee:	f04f 32ff 	movle.w	r2, #4294967295
 8011cf2:	fa02 f303 	lslle.w	r3, r2, r3
 8011cf6:	f04f 0a00 	mov.w	sl, #0
 8011cfa:	bfcc      	ite	gt
 8011cfc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011d00:	ea03 0b01 	andle.w	fp, r3, r1
 8011d04:	2200      	movs	r2, #0
 8011d06:	2300      	movs	r3, #0
 8011d08:	4650      	mov	r0, sl
 8011d0a:	4659      	mov	r1, fp
 8011d0c:	f7ee feec 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d1ac      	bne.n	8011c6e <_strtod_l+0x566>
 8011d14:	9b07      	ldr	r3, [sp, #28]
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	9a05      	ldr	r2, [sp, #20]
 8011d1a:	9908      	ldr	r1, [sp, #32]
 8011d1c:	4623      	mov	r3, r4
 8011d1e:	4648      	mov	r0, r9
 8011d20:	f001 fdac 	bl	801387c <__s2b>
 8011d24:	9007      	str	r0, [sp, #28]
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f43f af08 	beq.w	8011b3c <_strtod_l+0x434>
 8011d2c:	9a06      	ldr	r2, [sp, #24]
 8011d2e:	9b06      	ldr	r3, [sp, #24]
 8011d30:	2a00      	cmp	r2, #0
 8011d32:	f1c3 0300 	rsb	r3, r3, #0
 8011d36:	bfa8      	it	ge
 8011d38:	2300      	movge	r3, #0
 8011d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8011d3c:	2400      	movs	r4, #0
 8011d3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d42:	9316      	str	r3, [sp, #88]	; 0x58
 8011d44:	46a0      	mov	r8, r4
 8011d46:	9b07      	ldr	r3, [sp, #28]
 8011d48:	4648      	mov	r0, r9
 8011d4a:	6859      	ldr	r1, [r3, #4]
 8011d4c:	f001 fd10 	bl	8013770 <_Balloc>
 8011d50:	9005      	str	r0, [sp, #20]
 8011d52:	2800      	cmp	r0, #0
 8011d54:	f43f aef6 	beq.w	8011b44 <_strtod_l+0x43c>
 8011d58:	9b07      	ldr	r3, [sp, #28]
 8011d5a:	691a      	ldr	r2, [r3, #16]
 8011d5c:	3202      	adds	r2, #2
 8011d5e:	f103 010c 	add.w	r1, r3, #12
 8011d62:	0092      	lsls	r2, r2, #2
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7fe fcfb 	bl	8010760 <memcpy>
 8011d6a:	aa1e      	add	r2, sp, #120	; 0x78
 8011d6c:	a91d      	add	r1, sp, #116	; 0x74
 8011d6e:	ec4b ab10 	vmov	d0, sl, fp
 8011d72:	4648      	mov	r0, r9
 8011d74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011d78:	f002 f83c 	bl	8013df4 <__d2b>
 8011d7c:	901c      	str	r0, [sp, #112]	; 0x70
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	f43f aee0 	beq.w	8011b44 <_strtod_l+0x43c>
 8011d84:	2101      	movs	r1, #1
 8011d86:	4648      	mov	r0, r9
 8011d88:	f001 fe04 	bl	8013994 <__i2b>
 8011d8c:	4680      	mov	r8, r0
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	f43f aed8 	beq.w	8011b44 <_strtod_l+0x43c>
 8011d94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011d96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011d98:	2e00      	cmp	r6, #0
 8011d9a:	bfab      	itete	ge
 8011d9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011d9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011da0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011da2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011da4:	bfac      	ite	ge
 8011da6:	18f7      	addge	r7, r6, r3
 8011da8:	1b9d      	sublt	r5, r3, r6
 8011daa:	9b04      	ldr	r3, [sp, #16]
 8011dac:	1af6      	subs	r6, r6, r3
 8011dae:	4416      	add	r6, r2
 8011db0:	4b63      	ldr	r3, [pc, #396]	; (8011f40 <_strtod_l+0x838>)
 8011db2:	3e01      	subs	r6, #1
 8011db4:	429e      	cmp	r6, r3
 8011db6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011dba:	f280 80af 	bge.w	8011f1c <_strtod_l+0x814>
 8011dbe:	1b9b      	subs	r3, r3, r6
 8011dc0:	2b1f      	cmp	r3, #31
 8011dc2:	eba2 0203 	sub.w	r2, r2, r3
 8011dc6:	f04f 0101 	mov.w	r1, #1
 8011dca:	f300 809b 	bgt.w	8011f04 <_strtod_l+0x7fc>
 8011dce:	fa01 f303 	lsl.w	r3, r1, r3
 8011dd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8011dd8:	18be      	adds	r6, r7, r2
 8011dda:	9b04      	ldr	r3, [sp, #16]
 8011ddc:	42b7      	cmp	r7, r6
 8011dde:	4415      	add	r5, r2
 8011de0:	441d      	add	r5, r3
 8011de2:	463b      	mov	r3, r7
 8011de4:	bfa8      	it	ge
 8011de6:	4633      	movge	r3, r6
 8011de8:	42ab      	cmp	r3, r5
 8011dea:	bfa8      	it	ge
 8011dec:	462b      	movge	r3, r5
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	bfc2      	ittt	gt
 8011df2:	1af6      	subgt	r6, r6, r3
 8011df4:	1aed      	subgt	r5, r5, r3
 8011df6:	1aff      	subgt	r7, r7, r3
 8011df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dfa:	b1bb      	cbz	r3, 8011e2c <_strtod_l+0x724>
 8011dfc:	4641      	mov	r1, r8
 8011dfe:	461a      	mov	r2, r3
 8011e00:	4648      	mov	r0, r9
 8011e02:	f001 fe67 	bl	8013ad4 <__pow5mult>
 8011e06:	4680      	mov	r8, r0
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	f43f ae9b 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e0e:	4601      	mov	r1, r0
 8011e10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011e12:	4648      	mov	r0, r9
 8011e14:	f001 fdc7 	bl	80139a6 <__multiply>
 8011e18:	900c      	str	r0, [sp, #48]	; 0x30
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	f43f ae92 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e22:	4648      	mov	r0, r9
 8011e24:	f001 fcd8 	bl	80137d8 <_Bfree>
 8011e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e2a:	931c      	str	r3, [sp, #112]	; 0x70
 8011e2c:	2e00      	cmp	r6, #0
 8011e2e:	dc7a      	bgt.n	8011f26 <_strtod_l+0x81e>
 8011e30:	9b06      	ldr	r3, [sp, #24]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dd08      	ble.n	8011e48 <_strtod_l+0x740>
 8011e36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011e38:	9905      	ldr	r1, [sp, #20]
 8011e3a:	4648      	mov	r0, r9
 8011e3c:	f001 fe4a 	bl	8013ad4 <__pow5mult>
 8011e40:	9005      	str	r0, [sp, #20]
 8011e42:	2800      	cmp	r0, #0
 8011e44:	f43f ae7e 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e48:	2d00      	cmp	r5, #0
 8011e4a:	dd08      	ble.n	8011e5e <_strtod_l+0x756>
 8011e4c:	462a      	mov	r2, r5
 8011e4e:	9905      	ldr	r1, [sp, #20]
 8011e50:	4648      	mov	r0, r9
 8011e52:	f001 fe8d 	bl	8013b70 <__lshift>
 8011e56:	9005      	str	r0, [sp, #20]
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	f43f ae73 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e5e:	2f00      	cmp	r7, #0
 8011e60:	dd08      	ble.n	8011e74 <_strtod_l+0x76c>
 8011e62:	4641      	mov	r1, r8
 8011e64:	463a      	mov	r2, r7
 8011e66:	4648      	mov	r0, r9
 8011e68:	f001 fe82 	bl	8013b70 <__lshift>
 8011e6c:	4680      	mov	r8, r0
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f43f ae68 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e74:	9a05      	ldr	r2, [sp, #20]
 8011e76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e78:	4648      	mov	r0, r9
 8011e7a:	f001 fee7 	bl	8013c4c <__mdiff>
 8011e7e:	4604      	mov	r4, r0
 8011e80:	2800      	cmp	r0, #0
 8011e82:	f43f ae5f 	beq.w	8011b44 <_strtod_l+0x43c>
 8011e86:	68c3      	ldr	r3, [r0, #12]
 8011e88:	930c      	str	r3, [sp, #48]	; 0x30
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	60c3      	str	r3, [r0, #12]
 8011e8e:	4641      	mov	r1, r8
 8011e90:	f001 fec2 	bl	8013c18 <__mcmp>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	da55      	bge.n	8011f44 <_strtod_l+0x83c>
 8011e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e9a:	b9e3      	cbnz	r3, 8011ed6 <_strtod_l+0x7ce>
 8011e9c:	f1ba 0f00 	cmp.w	sl, #0
 8011ea0:	d119      	bne.n	8011ed6 <_strtod_l+0x7ce>
 8011ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ea6:	b9b3      	cbnz	r3, 8011ed6 <_strtod_l+0x7ce>
 8011ea8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011eac:	0d1b      	lsrs	r3, r3, #20
 8011eae:	051b      	lsls	r3, r3, #20
 8011eb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011eb4:	d90f      	bls.n	8011ed6 <_strtod_l+0x7ce>
 8011eb6:	6963      	ldr	r3, [r4, #20]
 8011eb8:	b913      	cbnz	r3, 8011ec0 <_strtod_l+0x7b8>
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	dd0a      	ble.n	8011ed6 <_strtod_l+0x7ce>
 8011ec0:	4621      	mov	r1, r4
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	4648      	mov	r0, r9
 8011ec6:	f001 fe53 	bl	8013b70 <__lshift>
 8011eca:	4641      	mov	r1, r8
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f001 fea3 	bl	8013c18 <__mcmp>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	dc67      	bgt.n	8011fa6 <_strtod_l+0x89e>
 8011ed6:	9b04      	ldr	r3, [sp, #16]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d171      	bne.n	8011fc0 <_strtod_l+0x8b8>
 8011edc:	e63d      	b.n	8011b5a <_strtod_l+0x452>
 8011ede:	f018 0f01 	tst.w	r8, #1
 8011ee2:	d004      	beq.n	8011eee <_strtod_l+0x7e6>
 8011ee4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ee8:	f7ee fb96 	bl	8000618 <__aeabi_dmul>
 8011eec:	2301      	movs	r3, #1
 8011eee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011ef2:	3508      	adds	r5, #8
 8011ef4:	e6e5      	b.n	8011cc2 <_strtod_l+0x5ba>
 8011ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8011efa:	fa02 f303 	lsl.w	r3, r2, r3
 8011efe:	ea03 0a0a 	and.w	sl, r3, sl
 8011f02:	e6ff      	b.n	8011d04 <_strtod_l+0x5fc>
 8011f04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011f08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011f0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011f10:	36e2      	adds	r6, #226	; 0xe2
 8011f12:	fa01 f306 	lsl.w	r3, r1, r6
 8011f16:	930a      	str	r3, [sp, #40]	; 0x28
 8011f18:	910f      	str	r1, [sp, #60]	; 0x3c
 8011f1a:	e75d      	b.n	8011dd8 <_strtod_l+0x6d0>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8011f20:	2301      	movs	r3, #1
 8011f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f24:	e758      	b.n	8011dd8 <_strtod_l+0x6d0>
 8011f26:	4632      	mov	r2, r6
 8011f28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f2a:	4648      	mov	r0, r9
 8011f2c:	f001 fe20 	bl	8013b70 <__lshift>
 8011f30:	901c      	str	r0, [sp, #112]	; 0x70
 8011f32:	2800      	cmp	r0, #0
 8011f34:	f47f af7c 	bne.w	8011e30 <_strtod_l+0x728>
 8011f38:	e604      	b.n	8011b44 <_strtod_l+0x43c>
 8011f3a:	bf00      	nop
 8011f3c:	08015f70 	.word	0x08015f70
 8011f40:	fffffc02 	.word	0xfffffc02
 8011f44:	465d      	mov	r5, fp
 8011f46:	f040 8086 	bne.w	8012056 <_strtod_l+0x94e>
 8011f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f50:	b32a      	cbz	r2, 8011f9e <_strtod_l+0x896>
 8011f52:	4aaf      	ldr	r2, [pc, #700]	; (8012210 <_strtod_l+0xb08>)
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d153      	bne.n	8012000 <_strtod_l+0x8f8>
 8011f58:	9b04      	ldr	r3, [sp, #16]
 8011f5a:	4650      	mov	r0, sl
 8011f5c:	b1d3      	cbz	r3, 8011f94 <_strtod_l+0x88c>
 8011f5e:	4aad      	ldr	r2, [pc, #692]	; (8012214 <_strtod_l+0xb0c>)
 8011f60:	402a      	ands	r2, r5
 8011f62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011f66:	f04f 31ff 	mov.w	r1, #4294967295
 8011f6a:	d816      	bhi.n	8011f9a <_strtod_l+0x892>
 8011f6c:	0d12      	lsrs	r2, r2, #20
 8011f6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f72:	fa01 f303 	lsl.w	r3, r1, r3
 8011f76:	4298      	cmp	r0, r3
 8011f78:	d142      	bne.n	8012000 <_strtod_l+0x8f8>
 8011f7a:	4ba7      	ldr	r3, [pc, #668]	; (8012218 <_strtod_l+0xb10>)
 8011f7c:	429d      	cmp	r5, r3
 8011f7e:	d102      	bne.n	8011f86 <_strtod_l+0x87e>
 8011f80:	3001      	adds	r0, #1
 8011f82:	f43f addf 	beq.w	8011b44 <_strtod_l+0x43c>
 8011f86:	4ba3      	ldr	r3, [pc, #652]	; (8012214 <_strtod_l+0xb0c>)
 8011f88:	402b      	ands	r3, r5
 8011f8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f8e:	f04f 0a00 	mov.w	sl, #0
 8011f92:	e7a0      	b.n	8011ed6 <_strtod_l+0x7ce>
 8011f94:	f04f 33ff 	mov.w	r3, #4294967295
 8011f98:	e7ed      	b.n	8011f76 <_strtod_l+0x86e>
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	e7eb      	b.n	8011f76 <_strtod_l+0x86e>
 8011f9e:	bb7b      	cbnz	r3, 8012000 <_strtod_l+0x8f8>
 8011fa0:	f1ba 0f00 	cmp.w	sl, #0
 8011fa4:	d12c      	bne.n	8012000 <_strtod_l+0x8f8>
 8011fa6:	9904      	ldr	r1, [sp, #16]
 8011fa8:	4a9a      	ldr	r2, [pc, #616]	; (8012214 <_strtod_l+0xb0c>)
 8011faa:	465b      	mov	r3, fp
 8011fac:	b1f1      	cbz	r1, 8011fec <_strtod_l+0x8e4>
 8011fae:	ea02 010b 	and.w	r1, r2, fp
 8011fb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011fb6:	dc19      	bgt.n	8011fec <_strtod_l+0x8e4>
 8011fb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011fbc:	f77f ae5b 	ble.w	8011c76 <_strtod_l+0x56e>
 8011fc0:	4a96      	ldr	r2, [pc, #600]	; (801221c <_strtod_l+0xb14>)
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011fc8:	4650      	mov	r0, sl
 8011fca:	4659      	mov	r1, fp
 8011fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011fd0:	f7ee fb22 	bl	8000618 <__aeabi_dmul>
 8011fd4:	4682      	mov	sl, r0
 8011fd6:	468b      	mov	fp, r1
 8011fd8:	2900      	cmp	r1, #0
 8011fda:	f47f adbe 	bne.w	8011b5a <_strtod_l+0x452>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f47f adbb 	bne.w	8011b5a <_strtod_l+0x452>
 8011fe4:	2322      	movs	r3, #34	; 0x22
 8011fe6:	f8c9 3000 	str.w	r3, [r9]
 8011fea:	e5b6      	b.n	8011b5a <_strtod_l+0x452>
 8011fec:	4013      	ands	r3, r2
 8011fee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011ff2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011ff6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011ffa:	f04f 3aff 	mov.w	sl, #4294967295
 8011ffe:	e76a      	b.n	8011ed6 <_strtod_l+0x7ce>
 8012000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012002:	b193      	cbz	r3, 801202a <_strtod_l+0x922>
 8012004:	422b      	tst	r3, r5
 8012006:	f43f af66 	beq.w	8011ed6 <_strtod_l+0x7ce>
 801200a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801200c:	9a04      	ldr	r2, [sp, #16]
 801200e:	4650      	mov	r0, sl
 8012010:	4659      	mov	r1, fp
 8012012:	b173      	cbz	r3, 8012032 <_strtod_l+0x92a>
 8012014:	f7ff fb5b 	bl	80116ce <sulp>
 8012018:	4602      	mov	r2, r0
 801201a:	460b      	mov	r3, r1
 801201c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012020:	f7ee f944 	bl	80002ac <__adddf3>
 8012024:	4682      	mov	sl, r0
 8012026:	468b      	mov	fp, r1
 8012028:	e755      	b.n	8011ed6 <_strtod_l+0x7ce>
 801202a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801202c:	ea13 0f0a 	tst.w	r3, sl
 8012030:	e7e9      	b.n	8012006 <_strtod_l+0x8fe>
 8012032:	f7ff fb4c 	bl	80116ce <sulp>
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801203e:	f7ee f933 	bl	80002a8 <__aeabi_dsub>
 8012042:	2200      	movs	r2, #0
 8012044:	2300      	movs	r3, #0
 8012046:	4682      	mov	sl, r0
 8012048:	468b      	mov	fp, r1
 801204a:	f7ee fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801204e:	2800      	cmp	r0, #0
 8012050:	f47f ae11 	bne.w	8011c76 <_strtod_l+0x56e>
 8012054:	e73f      	b.n	8011ed6 <_strtod_l+0x7ce>
 8012056:	4641      	mov	r1, r8
 8012058:	4620      	mov	r0, r4
 801205a:	f001 ff1a 	bl	8013e92 <__ratio>
 801205e:	ec57 6b10 	vmov	r6, r7, d0
 8012062:	2200      	movs	r2, #0
 8012064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012068:	ee10 0a10 	vmov	r0, s0
 801206c:	4639      	mov	r1, r7
 801206e:	f7ee fd4f 	bl	8000b10 <__aeabi_dcmple>
 8012072:	2800      	cmp	r0, #0
 8012074:	d077      	beq.n	8012166 <_strtod_l+0xa5e>
 8012076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012078:	2b00      	cmp	r3, #0
 801207a:	d04a      	beq.n	8012112 <_strtod_l+0xa0a>
 801207c:	4b68      	ldr	r3, [pc, #416]	; (8012220 <_strtod_l+0xb18>)
 801207e:	2200      	movs	r2, #0
 8012080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012084:	4f66      	ldr	r7, [pc, #408]	; (8012220 <_strtod_l+0xb18>)
 8012086:	2600      	movs	r6, #0
 8012088:	4b62      	ldr	r3, [pc, #392]	; (8012214 <_strtod_l+0xb0c>)
 801208a:	402b      	ands	r3, r5
 801208c:	930f      	str	r3, [sp, #60]	; 0x3c
 801208e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012090:	4b64      	ldr	r3, [pc, #400]	; (8012224 <_strtod_l+0xb1c>)
 8012092:	429a      	cmp	r2, r3
 8012094:	f040 80ce 	bne.w	8012234 <_strtod_l+0xb2c>
 8012098:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801209c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80120a4:	ec4b ab10 	vmov	d0, sl, fp
 80120a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80120ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80120b0:	f001 fe2a 	bl	8013d08 <__ulp>
 80120b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120b8:	ec53 2b10 	vmov	r2, r3, d0
 80120bc:	f7ee faac 	bl	8000618 <__aeabi_dmul>
 80120c0:	4652      	mov	r2, sl
 80120c2:	465b      	mov	r3, fp
 80120c4:	f7ee f8f2 	bl	80002ac <__adddf3>
 80120c8:	460b      	mov	r3, r1
 80120ca:	4952      	ldr	r1, [pc, #328]	; (8012214 <_strtod_l+0xb0c>)
 80120cc:	4a56      	ldr	r2, [pc, #344]	; (8012228 <_strtod_l+0xb20>)
 80120ce:	4019      	ands	r1, r3
 80120d0:	4291      	cmp	r1, r2
 80120d2:	4682      	mov	sl, r0
 80120d4:	d95b      	bls.n	801218e <_strtod_l+0xa86>
 80120d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80120dc:	4293      	cmp	r3, r2
 80120de:	d103      	bne.n	80120e8 <_strtod_l+0x9e0>
 80120e0:	9b08      	ldr	r3, [sp, #32]
 80120e2:	3301      	adds	r3, #1
 80120e4:	f43f ad2e 	beq.w	8011b44 <_strtod_l+0x43c>
 80120e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012218 <_strtod_l+0xb10>
 80120ec:	f04f 3aff 	mov.w	sl, #4294967295
 80120f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120f2:	4648      	mov	r0, r9
 80120f4:	f001 fb70 	bl	80137d8 <_Bfree>
 80120f8:	9905      	ldr	r1, [sp, #20]
 80120fa:	4648      	mov	r0, r9
 80120fc:	f001 fb6c 	bl	80137d8 <_Bfree>
 8012100:	4641      	mov	r1, r8
 8012102:	4648      	mov	r0, r9
 8012104:	f001 fb68 	bl	80137d8 <_Bfree>
 8012108:	4621      	mov	r1, r4
 801210a:	4648      	mov	r0, r9
 801210c:	f001 fb64 	bl	80137d8 <_Bfree>
 8012110:	e619      	b.n	8011d46 <_strtod_l+0x63e>
 8012112:	f1ba 0f00 	cmp.w	sl, #0
 8012116:	d11a      	bne.n	801214e <_strtod_l+0xa46>
 8012118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801211c:	b9eb      	cbnz	r3, 801215a <_strtod_l+0xa52>
 801211e:	2200      	movs	r2, #0
 8012120:	4b3f      	ldr	r3, [pc, #252]	; (8012220 <_strtod_l+0xb18>)
 8012122:	4630      	mov	r0, r6
 8012124:	4639      	mov	r1, r7
 8012126:	f7ee fce9 	bl	8000afc <__aeabi_dcmplt>
 801212a:	b9c8      	cbnz	r0, 8012160 <_strtod_l+0xa58>
 801212c:	4630      	mov	r0, r6
 801212e:	4639      	mov	r1, r7
 8012130:	2200      	movs	r2, #0
 8012132:	4b3e      	ldr	r3, [pc, #248]	; (801222c <_strtod_l+0xb24>)
 8012134:	f7ee fa70 	bl	8000618 <__aeabi_dmul>
 8012138:	4606      	mov	r6, r0
 801213a:	460f      	mov	r7, r1
 801213c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012140:	9618      	str	r6, [sp, #96]	; 0x60
 8012142:	9319      	str	r3, [sp, #100]	; 0x64
 8012144:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012148:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801214c:	e79c      	b.n	8012088 <_strtod_l+0x980>
 801214e:	f1ba 0f01 	cmp.w	sl, #1
 8012152:	d102      	bne.n	801215a <_strtod_l+0xa52>
 8012154:	2d00      	cmp	r5, #0
 8012156:	f43f ad8e 	beq.w	8011c76 <_strtod_l+0x56e>
 801215a:	2200      	movs	r2, #0
 801215c:	4b34      	ldr	r3, [pc, #208]	; (8012230 <_strtod_l+0xb28>)
 801215e:	e78f      	b.n	8012080 <_strtod_l+0x978>
 8012160:	2600      	movs	r6, #0
 8012162:	4f32      	ldr	r7, [pc, #200]	; (801222c <_strtod_l+0xb24>)
 8012164:	e7ea      	b.n	801213c <_strtod_l+0xa34>
 8012166:	4b31      	ldr	r3, [pc, #196]	; (801222c <_strtod_l+0xb24>)
 8012168:	4630      	mov	r0, r6
 801216a:	4639      	mov	r1, r7
 801216c:	2200      	movs	r2, #0
 801216e:	f7ee fa53 	bl	8000618 <__aeabi_dmul>
 8012172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012174:	4606      	mov	r6, r0
 8012176:	460f      	mov	r7, r1
 8012178:	b933      	cbnz	r3, 8012188 <_strtod_l+0xa80>
 801217a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801217e:	9010      	str	r0, [sp, #64]	; 0x40
 8012180:	9311      	str	r3, [sp, #68]	; 0x44
 8012182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012186:	e7df      	b.n	8012148 <_strtod_l+0xa40>
 8012188:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801218c:	e7f9      	b.n	8012182 <_strtod_l+0xa7a>
 801218e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012192:	9b04      	ldr	r3, [sp, #16]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1ab      	bne.n	80120f0 <_strtod_l+0x9e8>
 8012198:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801219c:	0d1b      	lsrs	r3, r3, #20
 801219e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121a0:	051b      	lsls	r3, r3, #20
 80121a2:	429a      	cmp	r2, r3
 80121a4:	465d      	mov	r5, fp
 80121a6:	d1a3      	bne.n	80120f0 <_strtod_l+0x9e8>
 80121a8:	4639      	mov	r1, r7
 80121aa:	4630      	mov	r0, r6
 80121ac:	f7ee fce4 	bl	8000b78 <__aeabi_d2iz>
 80121b0:	f7ee f9c8 	bl	8000544 <__aeabi_i2d>
 80121b4:	460b      	mov	r3, r1
 80121b6:	4602      	mov	r2, r0
 80121b8:	4639      	mov	r1, r7
 80121ba:	4630      	mov	r0, r6
 80121bc:	f7ee f874 	bl	80002a8 <__aeabi_dsub>
 80121c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121c2:	4606      	mov	r6, r0
 80121c4:	460f      	mov	r7, r1
 80121c6:	b933      	cbnz	r3, 80121d6 <_strtod_l+0xace>
 80121c8:	f1ba 0f00 	cmp.w	sl, #0
 80121cc:	d103      	bne.n	80121d6 <_strtod_l+0xace>
 80121ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80121d2:	2d00      	cmp	r5, #0
 80121d4:	d06d      	beq.n	80122b2 <_strtod_l+0xbaa>
 80121d6:	a30a      	add	r3, pc, #40	; (adr r3, 8012200 <_strtod_l+0xaf8>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	4630      	mov	r0, r6
 80121de:	4639      	mov	r1, r7
 80121e0:	f7ee fc8c 	bl	8000afc <__aeabi_dcmplt>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	f47f acb8 	bne.w	8011b5a <_strtod_l+0x452>
 80121ea:	a307      	add	r3, pc, #28	; (adr r3, 8012208 <_strtod_l+0xb00>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	4630      	mov	r0, r6
 80121f2:	4639      	mov	r1, r7
 80121f4:	f7ee fca0 	bl	8000b38 <__aeabi_dcmpgt>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	f43f af79 	beq.w	80120f0 <_strtod_l+0x9e8>
 80121fe:	e4ac      	b.n	8011b5a <_strtod_l+0x452>
 8012200:	94a03595 	.word	0x94a03595
 8012204:	3fdfffff 	.word	0x3fdfffff
 8012208:	35afe535 	.word	0x35afe535
 801220c:	3fe00000 	.word	0x3fe00000
 8012210:	000fffff 	.word	0x000fffff
 8012214:	7ff00000 	.word	0x7ff00000
 8012218:	7fefffff 	.word	0x7fefffff
 801221c:	39500000 	.word	0x39500000
 8012220:	3ff00000 	.word	0x3ff00000
 8012224:	7fe00000 	.word	0x7fe00000
 8012228:	7c9fffff 	.word	0x7c9fffff
 801222c:	3fe00000 	.word	0x3fe00000
 8012230:	bff00000 	.word	0xbff00000
 8012234:	9b04      	ldr	r3, [sp, #16]
 8012236:	b333      	cbz	r3, 8012286 <_strtod_l+0xb7e>
 8012238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801223a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801223e:	d822      	bhi.n	8012286 <_strtod_l+0xb7e>
 8012240:	a327      	add	r3, pc, #156	; (adr r3, 80122e0 <_strtod_l+0xbd8>)
 8012242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012246:	4630      	mov	r0, r6
 8012248:	4639      	mov	r1, r7
 801224a:	f7ee fc61 	bl	8000b10 <__aeabi_dcmple>
 801224e:	b1a0      	cbz	r0, 801227a <_strtod_l+0xb72>
 8012250:	4639      	mov	r1, r7
 8012252:	4630      	mov	r0, r6
 8012254:	f7ee fcb8 	bl	8000bc8 <__aeabi_d2uiz>
 8012258:	2800      	cmp	r0, #0
 801225a:	bf08      	it	eq
 801225c:	2001      	moveq	r0, #1
 801225e:	f7ee f961 	bl	8000524 <__aeabi_ui2d>
 8012262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012264:	4606      	mov	r6, r0
 8012266:	460f      	mov	r7, r1
 8012268:	bb03      	cbnz	r3, 80122ac <_strtod_l+0xba4>
 801226a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801226e:	9012      	str	r0, [sp, #72]	; 0x48
 8012270:	9313      	str	r3, [sp, #76]	; 0x4c
 8012272:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012276:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801227a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801227c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801227e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012282:	1a9b      	subs	r3, r3, r2
 8012284:	930b      	str	r3, [sp, #44]	; 0x2c
 8012286:	ed9d 0b08 	vldr	d0, [sp, #32]
 801228a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801228e:	f001 fd3b 	bl	8013d08 <__ulp>
 8012292:	4650      	mov	r0, sl
 8012294:	ec53 2b10 	vmov	r2, r3, d0
 8012298:	4659      	mov	r1, fp
 801229a:	f7ee f9bd 	bl	8000618 <__aeabi_dmul>
 801229e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80122a2:	f7ee f803 	bl	80002ac <__adddf3>
 80122a6:	4682      	mov	sl, r0
 80122a8:	468b      	mov	fp, r1
 80122aa:	e772      	b.n	8012192 <_strtod_l+0xa8a>
 80122ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80122b0:	e7df      	b.n	8012272 <_strtod_l+0xb6a>
 80122b2:	a30d      	add	r3, pc, #52	; (adr r3, 80122e8 <_strtod_l+0xbe0>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	f7ee fc20 	bl	8000afc <__aeabi_dcmplt>
 80122bc:	e79c      	b.n	80121f8 <_strtod_l+0xaf0>
 80122be:	2300      	movs	r3, #0
 80122c0:	930d      	str	r3, [sp, #52]	; 0x34
 80122c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80122c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122c6:	6013      	str	r3, [r2, #0]
 80122c8:	f7ff ba61 	b.w	801178e <_strtod_l+0x86>
 80122cc:	2b65      	cmp	r3, #101	; 0x65
 80122ce:	f04f 0200 	mov.w	r2, #0
 80122d2:	f43f ab4e 	beq.w	8011972 <_strtod_l+0x26a>
 80122d6:	2101      	movs	r1, #1
 80122d8:	4614      	mov	r4, r2
 80122da:	9104      	str	r1, [sp, #16]
 80122dc:	f7ff bacb 	b.w	8011876 <_strtod_l+0x16e>
 80122e0:	ffc00000 	.word	0xffc00000
 80122e4:	41dfffff 	.word	0x41dfffff
 80122e8:	94a03595 	.word	0x94a03595
 80122ec:	3fcfffff 	.word	0x3fcfffff

080122f0 <_strtod_r>:
 80122f0:	4b05      	ldr	r3, [pc, #20]	; (8012308 <_strtod_r+0x18>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	b410      	push	{r4}
 80122f6:	6a1b      	ldr	r3, [r3, #32]
 80122f8:	4c04      	ldr	r4, [pc, #16]	; (801230c <_strtod_r+0x1c>)
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	bf08      	it	eq
 80122fe:	4623      	moveq	r3, r4
 8012300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012304:	f7ff ba00 	b.w	8011708 <_strtod_l>
 8012308:	20000e34 	.word	0x20000e34
 801230c:	20000e98 	.word	0x20000e98

08012310 <_strtol_l.isra.0>:
 8012310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012314:	4680      	mov	r8, r0
 8012316:	4689      	mov	r9, r1
 8012318:	4692      	mov	sl, r2
 801231a:	461e      	mov	r6, r3
 801231c:	460f      	mov	r7, r1
 801231e:	463d      	mov	r5, r7
 8012320:	9808      	ldr	r0, [sp, #32]
 8012322:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012326:	f001 f9ed 	bl	8013704 <__locale_ctype_ptr_l>
 801232a:	4420      	add	r0, r4
 801232c:	7843      	ldrb	r3, [r0, #1]
 801232e:	f013 0308 	ands.w	r3, r3, #8
 8012332:	d132      	bne.n	801239a <_strtol_l.isra.0+0x8a>
 8012334:	2c2d      	cmp	r4, #45	; 0x2d
 8012336:	d132      	bne.n	801239e <_strtol_l.isra.0+0x8e>
 8012338:	787c      	ldrb	r4, [r7, #1]
 801233a:	1cbd      	adds	r5, r7, #2
 801233c:	2201      	movs	r2, #1
 801233e:	2e00      	cmp	r6, #0
 8012340:	d05d      	beq.n	80123fe <_strtol_l.isra.0+0xee>
 8012342:	2e10      	cmp	r6, #16
 8012344:	d109      	bne.n	801235a <_strtol_l.isra.0+0x4a>
 8012346:	2c30      	cmp	r4, #48	; 0x30
 8012348:	d107      	bne.n	801235a <_strtol_l.isra.0+0x4a>
 801234a:	782b      	ldrb	r3, [r5, #0]
 801234c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012350:	2b58      	cmp	r3, #88	; 0x58
 8012352:	d14f      	bne.n	80123f4 <_strtol_l.isra.0+0xe4>
 8012354:	786c      	ldrb	r4, [r5, #1]
 8012356:	2610      	movs	r6, #16
 8012358:	3502      	adds	r5, #2
 801235a:	2a00      	cmp	r2, #0
 801235c:	bf14      	ite	ne
 801235e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012362:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012366:	2700      	movs	r7, #0
 8012368:	fbb1 fcf6 	udiv	ip, r1, r6
 801236c:	4638      	mov	r0, r7
 801236e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012372:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012376:	2b09      	cmp	r3, #9
 8012378:	d817      	bhi.n	80123aa <_strtol_l.isra.0+0x9a>
 801237a:	461c      	mov	r4, r3
 801237c:	42a6      	cmp	r6, r4
 801237e:	dd23      	ble.n	80123c8 <_strtol_l.isra.0+0xb8>
 8012380:	1c7b      	adds	r3, r7, #1
 8012382:	d007      	beq.n	8012394 <_strtol_l.isra.0+0x84>
 8012384:	4584      	cmp	ip, r0
 8012386:	d31c      	bcc.n	80123c2 <_strtol_l.isra.0+0xb2>
 8012388:	d101      	bne.n	801238e <_strtol_l.isra.0+0x7e>
 801238a:	45a6      	cmp	lr, r4
 801238c:	db19      	blt.n	80123c2 <_strtol_l.isra.0+0xb2>
 801238e:	fb00 4006 	mla	r0, r0, r6, r4
 8012392:	2701      	movs	r7, #1
 8012394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012398:	e7eb      	b.n	8012372 <_strtol_l.isra.0+0x62>
 801239a:	462f      	mov	r7, r5
 801239c:	e7bf      	b.n	801231e <_strtol_l.isra.0+0xe>
 801239e:	2c2b      	cmp	r4, #43	; 0x2b
 80123a0:	bf04      	itt	eq
 80123a2:	1cbd      	addeq	r5, r7, #2
 80123a4:	787c      	ldrbeq	r4, [r7, #1]
 80123a6:	461a      	mov	r2, r3
 80123a8:	e7c9      	b.n	801233e <_strtol_l.isra.0+0x2e>
 80123aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80123ae:	2b19      	cmp	r3, #25
 80123b0:	d801      	bhi.n	80123b6 <_strtol_l.isra.0+0xa6>
 80123b2:	3c37      	subs	r4, #55	; 0x37
 80123b4:	e7e2      	b.n	801237c <_strtol_l.isra.0+0x6c>
 80123b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80123ba:	2b19      	cmp	r3, #25
 80123bc:	d804      	bhi.n	80123c8 <_strtol_l.isra.0+0xb8>
 80123be:	3c57      	subs	r4, #87	; 0x57
 80123c0:	e7dc      	b.n	801237c <_strtol_l.isra.0+0x6c>
 80123c2:	f04f 37ff 	mov.w	r7, #4294967295
 80123c6:	e7e5      	b.n	8012394 <_strtol_l.isra.0+0x84>
 80123c8:	1c7b      	adds	r3, r7, #1
 80123ca:	d108      	bne.n	80123de <_strtol_l.isra.0+0xce>
 80123cc:	2322      	movs	r3, #34	; 0x22
 80123ce:	f8c8 3000 	str.w	r3, [r8]
 80123d2:	4608      	mov	r0, r1
 80123d4:	f1ba 0f00 	cmp.w	sl, #0
 80123d8:	d107      	bne.n	80123ea <_strtol_l.isra.0+0xda>
 80123da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123de:	b102      	cbz	r2, 80123e2 <_strtol_l.isra.0+0xd2>
 80123e0:	4240      	negs	r0, r0
 80123e2:	f1ba 0f00 	cmp.w	sl, #0
 80123e6:	d0f8      	beq.n	80123da <_strtol_l.isra.0+0xca>
 80123e8:	b10f      	cbz	r7, 80123ee <_strtol_l.isra.0+0xde>
 80123ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80123ee:	f8ca 9000 	str.w	r9, [sl]
 80123f2:	e7f2      	b.n	80123da <_strtol_l.isra.0+0xca>
 80123f4:	2430      	movs	r4, #48	; 0x30
 80123f6:	2e00      	cmp	r6, #0
 80123f8:	d1af      	bne.n	801235a <_strtol_l.isra.0+0x4a>
 80123fa:	2608      	movs	r6, #8
 80123fc:	e7ad      	b.n	801235a <_strtol_l.isra.0+0x4a>
 80123fe:	2c30      	cmp	r4, #48	; 0x30
 8012400:	d0a3      	beq.n	801234a <_strtol_l.isra.0+0x3a>
 8012402:	260a      	movs	r6, #10
 8012404:	e7a9      	b.n	801235a <_strtol_l.isra.0+0x4a>
	...

08012408 <_strtol_r>:
 8012408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801240a:	4c06      	ldr	r4, [pc, #24]	; (8012424 <_strtol_r+0x1c>)
 801240c:	4d06      	ldr	r5, [pc, #24]	; (8012428 <_strtol_r+0x20>)
 801240e:	6824      	ldr	r4, [r4, #0]
 8012410:	6a24      	ldr	r4, [r4, #32]
 8012412:	2c00      	cmp	r4, #0
 8012414:	bf08      	it	eq
 8012416:	462c      	moveq	r4, r5
 8012418:	9400      	str	r4, [sp, #0]
 801241a:	f7ff ff79 	bl	8012310 <_strtol_l.isra.0>
 801241e:	b003      	add	sp, #12
 8012420:	bd30      	pop	{r4, r5, pc}
 8012422:	bf00      	nop
 8012424:	20000e34 	.word	0x20000e34
 8012428:	20000e98 	.word	0x20000e98

0801242c <quorem>:
 801242c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012430:	6903      	ldr	r3, [r0, #16]
 8012432:	690c      	ldr	r4, [r1, #16]
 8012434:	42a3      	cmp	r3, r4
 8012436:	4680      	mov	r8, r0
 8012438:	f2c0 8082 	blt.w	8012540 <quorem+0x114>
 801243c:	3c01      	subs	r4, #1
 801243e:	f101 0714 	add.w	r7, r1, #20
 8012442:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012446:	f100 0614 	add.w	r6, r0, #20
 801244a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801244e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012452:	eb06 030c 	add.w	r3, r6, ip
 8012456:	3501      	adds	r5, #1
 8012458:	eb07 090c 	add.w	r9, r7, ip
 801245c:	9301      	str	r3, [sp, #4]
 801245e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012462:	b395      	cbz	r5, 80124ca <quorem+0x9e>
 8012464:	f04f 0a00 	mov.w	sl, #0
 8012468:	4638      	mov	r0, r7
 801246a:	46b6      	mov	lr, r6
 801246c:	46d3      	mov	fp, sl
 801246e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012472:	b293      	uxth	r3, r2
 8012474:	fb05 a303 	mla	r3, r5, r3, sl
 8012478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801247c:	b29b      	uxth	r3, r3
 801247e:	ebab 0303 	sub.w	r3, fp, r3
 8012482:	0c12      	lsrs	r2, r2, #16
 8012484:	f8de b000 	ldr.w	fp, [lr]
 8012488:	fb05 a202 	mla	r2, r5, r2, sl
 801248c:	fa13 f38b 	uxtah	r3, r3, fp
 8012490:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012494:	fa1f fb82 	uxth.w	fp, r2
 8012498:	f8de 2000 	ldr.w	r2, [lr]
 801249c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80124a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124aa:	4581      	cmp	r9, r0
 80124ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80124b0:	f84e 3b04 	str.w	r3, [lr], #4
 80124b4:	d2db      	bcs.n	801246e <quorem+0x42>
 80124b6:	f856 300c 	ldr.w	r3, [r6, ip]
 80124ba:	b933      	cbnz	r3, 80124ca <quorem+0x9e>
 80124bc:	9b01      	ldr	r3, [sp, #4]
 80124be:	3b04      	subs	r3, #4
 80124c0:	429e      	cmp	r6, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	d330      	bcc.n	8012528 <quorem+0xfc>
 80124c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80124ca:	4640      	mov	r0, r8
 80124cc:	f001 fba4 	bl	8013c18 <__mcmp>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	db25      	blt.n	8012520 <quorem+0xf4>
 80124d4:	3501      	adds	r5, #1
 80124d6:	4630      	mov	r0, r6
 80124d8:	f04f 0c00 	mov.w	ip, #0
 80124dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80124e0:	f8d0 e000 	ldr.w	lr, [r0]
 80124e4:	b293      	uxth	r3, r2
 80124e6:	ebac 0303 	sub.w	r3, ip, r3
 80124ea:	0c12      	lsrs	r2, r2, #16
 80124ec:	fa13 f38e 	uxtah	r3, r3, lr
 80124f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124fe:	45b9      	cmp	r9, r7
 8012500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012504:	f840 3b04 	str.w	r3, [r0], #4
 8012508:	d2e8      	bcs.n	80124dc <quorem+0xb0>
 801250a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801250e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012512:	b92a      	cbnz	r2, 8012520 <quorem+0xf4>
 8012514:	3b04      	subs	r3, #4
 8012516:	429e      	cmp	r6, r3
 8012518:	461a      	mov	r2, r3
 801251a:	d30b      	bcc.n	8012534 <quorem+0x108>
 801251c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012520:	4628      	mov	r0, r5
 8012522:	b003      	add	sp, #12
 8012524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012528:	6812      	ldr	r2, [r2, #0]
 801252a:	3b04      	subs	r3, #4
 801252c:	2a00      	cmp	r2, #0
 801252e:	d1ca      	bne.n	80124c6 <quorem+0x9a>
 8012530:	3c01      	subs	r4, #1
 8012532:	e7c5      	b.n	80124c0 <quorem+0x94>
 8012534:	6812      	ldr	r2, [r2, #0]
 8012536:	3b04      	subs	r3, #4
 8012538:	2a00      	cmp	r2, #0
 801253a:	d1ef      	bne.n	801251c <quorem+0xf0>
 801253c:	3c01      	subs	r4, #1
 801253e:	e7ea      	b.n	8012516 <quorem+0xea>
 8012540:	2000      	movs	r0, #0
 8012542:	e7ee      	b.n	8012522 <quorem+0xf6>
 8012544:	0000      	movs	r0, r0
	...

08012548 <_dtoa_r>:
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	ec57 6b10 	vmov	r6, r7, d0
 8012550:	b097      	sub	sp, #92	; 0x5c
 8012552:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012554:	9106      	str	r1, [sp, #24]
 8012556:	4604      	mov	r4, r0
 8012558:	920b      	str	r2, [sp, #44]	; 0x2c
 801255a:	9312      	str	r3, [sp, #72]	; 0x48
 801255c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012560:	e9cd 6700 	strd	r6, r7, [sp]
 8012564:	b93d      	cbnz	r5, 8012576 <_dtoa_r+0x2e>
 8012566:	2010      	movs	r0, #16
 8012568:	f7fe f8ea 	bl	8010740 <malloc>
 801256c:	6260      	str	r0, [r4, #36]	; 0x24
 801256e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012572:	6005      	str	r5, [r0, #0]
 8012574:	60c5      	str	r5, [r0, #12]
 8012576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012578:	6819      	ldr	r1, [r3, #0]
 801257a:	b151      	cbz	r1, 8012592 <_dtoa_r+0x4a>
 801257c:	685a      	ldr	r2, [r3, #4]
 801257e:	604a      	str	r2, [r1, #4]
 8012580:	2301      	movs	r3, #1
 8012582:	4093      	lsls	r3, r2
 8012584:	608b      	str	r3, [r1, #8]
 8012586:	4620      	mov	r0, r4
 8012588:	f001 f926 	bl	80137d8 <_Bfree>
 801258c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801258e:	2200      	movs	r2, #0
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	1e3b      	subs	r3, r7, #0
 8012594:	bfbb      	ittet	lt
 8012596:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801259a:	9301      	strlt	r3, [sp, #4]
 801259c:	2300      	movge	r3, #0
 801259e:	2201      	movlt	r2, #1
 80125a0:	bfac      	ite	ge
 80125a2:	f8c8 3000 	strge.w	r3, [r8]
 80125a6:	f8c8 2000 	strlt.w	r2, [r8]
 80125aa:	4baf      	ldr	r3, [pc, #700]	; (8012868 <_dtoa_r+0x320>)
 80125ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80125b0:	ea33 0308 	bics.w	r3, r3, r8
 80125b4:	d114      	bne.n	80125e0 <_dtoa_r+0x98>
 80125b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	9b00      	ldr	r3, [sp, #0]
 80125c0:	b923      	cbnz	r3, 80125cc <_dtoa_r+0x84>
 80125c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80125c6:	2800      	cmp	r0, #0
 80125c8:	f000 8542 	beq.w	8013050 <_dtoa_r+0xb08>
 80125cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801287c <_dtoa_r+0x334>
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f000 8544 	beq.w	8013060 <_dtoa_r+0xb18>
 80125d8:	f10b 0303 	add.w	r3, fp, #3
 80125dc:	f000 bd3e 	b.w	801305c <_dtoa_r+0xb14>
 80125e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80125e4:	2200      	movs	r2, #0
 80125e6:	2300      	movs	r3, #0
 80125e8:	4630      	mov	r0, r6
 80125ea:	4639      	mov	r1, r7
 80125ec:	f7ee fa7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80125f0:	4681      	mov	r9, r0
 80125f2:	b168      	cbz	r0, 8012610 <_dtoa_r+0xc8>
 80125f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125f6:	2301      	movs	r3, #1
 80125f8:	6013      	str	r3, [r2, #0]
 80125fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f000 8524 	beq.w	801304a <_dtoa_r+0xb02>
 8012602:	4b9a      	ldr	r3, [pc, #616]	; (801286c <_dtoa_r+0x324>)
 8012604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012606:	f103 3bff 	add.w	fp, r3, #4294967295
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	f000 bd28 	b.w	8013060 <_dtoa_r+0xb18>
 8012610:	aa14      	add	r2, sp, #80	; 0x50
 8012612:	a915      	add	r1, sp, #84	; 0x54
 8012614:	ec47 6b10 	vmov	d0, r6, r7
 8012618:	4620      	mov	r0, r4
 801261a:	f001 fbeb 	bl	8013df4 <__d2b>
 801261e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012622:	9004      	str	r0, [sp, #16]
 8012624:	2d00      	cmp	r5, #0
 8012626:	d07c      	beq.n	8012722 <_dtoa_r+0x1da>
 8012628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801262c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012630:	46b2      	mov	sl, r6
 8012632:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801263a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801263e:	2200      	movs	r2, #0
 8012640:	4b8b      	ldr	r3, [pc, #556]	; (8012870 <_dtoa_r+0x328>)
 8012642:	4650      	mov	r0, sl
 8012644:	4659      	mov	r1, fp
 8012646:	f7ed fe2f 	bl	80002a8 <__aeabi_dsub>
 801264a:	a381      	add	r3, pc, #516	; (adr r3, 8012850 <_dtoa_r+0x308>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	f7ed ffe2 	bl	8000618 <__aeabi_dmul>
 8012654:	a380      	add	r3, pc, #512	; (adr r3, 8012858 <_dtoa_r+0x310>)
 8012656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265a:	f7ed fe27 	bl	80002ac <__adddf3>
 801265e:	4606      	mov	r6, r0
 8012660:	4628      	mov	r0, r5
 8012662:	460f      	mov	r7, r1
 8012664:	f7ed ff6e 	bl	8000544 <__aeabi_i2d>
 8012668:	a37d      	add	r3, pc, #500	; (adr r3, 8012860 <_dtoa_r+0x318>)
 801266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266e:	f7ed ffd3 	bl	8000618 <__aeabi_dmul>
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ed fe17 	bl	80002ac <__adddf3>
 801267e:	4606      	mov	r6, r0
 8012680:	460f      	mov	r7, r1
 8012682:	f7ee fa79 	bl	8000b78 <__aeabi_d2iz>
 8012686:	2200      	movs	r2, #0
 8012688:	4682      	mov	sl, r0
 801268a:	2300      	movs	r3, #0
 801268c:	4630      	mov	r0, r6
 801268e:	4639      	mov	r1, r7
 8012690:	f7ee fa34 	bl	8000afc <__aeabi_dcmplt>
 8012694:	b148      	cbz	r0, 80126aa <_dtoa_r+0x162>
 8012696:	4650      	mov	r0, sl
 8012698:	f7ed ff54 	bl	8000544 <__aeabi_i2d>
 801269c:	4632      	mov	r2, r6
 801269e:	463b      	mov	r3, r7
 80126a0:	f7ee fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 80126a4:	b908      	cbnz	r0, 80126aa <_dtoa_r+0x162>
 80126a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126aa:	f1ba 0f16 	cmp.w	sl, #22
 80126ae:	d859      	bhi.n	8012764 <_dtoa_r+0x21c>
 80126b0:	4970      	ldr	r1, [pc, #448]	; (8012874 <_dtoa_r+0x32c>)
 80126b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80126b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126be:	f7ee fa3b 	bl	8000b38 <__aeabi_dcmpgt>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d050      	beq.n	8012768 <_dtoa_r+0x220>
 80126c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126ca:	2300      	movs	r3, #0
 80126cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80126ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126d0:	1b5d      	subs	r5, r3, r5
 80126d2:	f1b5 0801 	subs.w	r8, r5, #1
 80126d6:	bf49      	itett	mi
 80126d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80126dc:	2300      	movpl	r3, #0
 80126de:	9305      	strmi	r3, [sp, #20]
 80126e0:	f04f 0800 	movmi.w	r8, #0
 80126e4:	bf58      	it	pl
 80126e6:	9305      	strpl	r3, [sp, #20]
 80126e8:	f1ba 0f00 	cmp.w	sl, #0
 80126ec:	db3e      	blt.n	801276c <_dtoa_r+0x224>
 80126ee:	2300      	movs	r3, #0
 80126f0:	44d0      	add	r8, sl
 80126f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80126f6:	9307      	str	r3, [sp, #28]
 80126f8:	9b06      	ldr	r3, [sp, #24]
 80126fa:	2b09      	cmp	r3, #9
 80126fc:	f200 8090 	bhi.w	8012820 <_dtoa_r+0x2d8>
 8012700:	2b05      	cmp	r3, #5
 8012702:	bfc4      	itt	gt
 8012704:	3b04      	subgt	r3, #4
 8012706:	9306      	strgt	r3, [sp, #24]
 8012708:	9b06      	ldr	r3, [sp, #24]
 801270a:	f1a3 0302 	sub.w	r3, r3, #2
 801270e:	bfcc      	ite	gt
 8012710:	2500      	movgt	r5, #0
 8012712:	2501      	movle	r5, #1
 8012714:	2b03      	cmp	r3, #3
 8012716:	f200 808f 	bhi.w	8012838 <_dtoa_r+0x2f0>
 801271a:	e8df f003 	tbb	[pc, r3]
 801271e:	7f7d      	.short	0x7f7d
 8012720:	7131      	.short	0x7131
 8012722:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012726:	441d      	add	r5, r3
 8012728:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801272c:	2820      	cmp	r0, #32
 801272e:	dd13      	ble.n	8012758 <_dtoa_r+0x210>
 8012730:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012734:	9b00      	ldr	r3, [sp, #0]
 8012736:	fa08 f800 	lsl.w	r8, r8, r0
 801273a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801273e:	fa23 f000 	lsr.w	r0, r3, r0
 8012742:	ea48 0000 	orr.w	r0, r8, r0
 8012746:	f7ed feed 	bl	8000524 <__aeabi_ui2d>
 801274a:	2301      	movs	r3, #1
 801274c:	4682      	mov	sl, r0
 801274e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012752:	3d01      	subs	r5, #1
 8012754:	9313      	str	r3, [sp, #76]	; 0x4c
 8012756:	e772      	b.n	801263e <_dtoa_r+0xf6>
 8012758:	9b00      	ldr	r3, [sp, #0]
 801275a:	f1c0 0020 	rsb	r0, r0, #32
 801275e:	fa03 f000 	lsl.w	r0, r3, r0
 8012762:	e7f0      	b.n	8012746 <_dtoa_r+0x1fe>
 8012764:	2301      	movs	r3, #1
 8012766:	e7b1      	b.n	80126cc <_dtoa_r+0x184>
 8012768:	900f      	str	r0, [sp, #60]	; 0x3c
 801276a:	e7b0      	b.n	80126ce <_dtoa_r+0x186>
 801276c:	9b05      	ldr	r3, [sp, #20]
 801276e:	eba3 030a 	sub.w	r3, r3, sl
 8012772:	9305      	str	r3, [sp, #20]
 8012774:	f1ca 0300 	rsb	r3, sl, #0
 8012778:	9307      	str	r3, [sp, #28]
 801277a:	2300      	movs	r3, #0
 801277c:	930e      	str	r3, [sp, #56]	; 0x38
 801277e:	e7bb      	b.n	80126f8 <_dtoa_r+0x1b0>
 8012780:	2301      	movs	r3, #1
 8012782:	930a      	str	r3, [sp, #40]	; 0x28
 8012784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012786:	2b00      	cmp	r3, #0
 8012788:	dd59      	ble.n	801283e <_dtoa_r+0x2f6>
 801278a:	9302      	str	r3, [sp, #8]
 801278c:	4699      	mov	r9, r3
 801278e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012790:	2200      	movs	r2, #0
 8012792:	6072      	str	r2, [r6, #4]
 8012794:	2204      	movs	r2, #4
 8012796:	f102 0014 	add.w	r0, r2, #20
 801279a:	4298      	cmp	r0, r3
 801279c:	6871      	ldr	r1, [r6, #4]
 801279e:	d953      	bls.n	8012848 <_dtoa_r+0x300>
 80127a0:	4620      	mov	r0, r4
 80127a2:	f000 ffe5 	bl	8013770 <_Balloc>
 80127a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127a8:	6030      	str	r0, [r6, #0]
 80127aa:	f1b9 0f0e 	cmp.w	r9, #14
 80127ae:	f8d3 b000 	ldr.w	fp, [r3]
 80127b2:	f200 80e6 	bhi.w	8012982 <_dtoa_r+0x43a>
 80127b6:	2d00      	cmp	r5, #0
 80127b8:	f000 80e3 	beq.w	8012982 <_dtoa_r+0x43a>
 80127bc:	ed9d 7b00 	vldr	d7, [sp]
 80127c0:	f1ba 0f00 	cmp.w	sl, #0
 80127c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80127c8:	dd74      	ble.n	80128b4 <_dtoa_r+0x36c>
 80127ca:	4a2a      	ldr	r2, [pc, #168]	; (8012874 <_dtoa_r+0x32c>)
 80127cc:	f00a 030f 	and.w	r3, sl, #15
 80127d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127d4:	ed93 7b00 	vldr	d7, [r3]
 80127d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80127dc:	06f0      	lsls	r0, r6, #27
 80127de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80127e2:	d565      	bpl.n	80128b0 <_dtoa_r+0x368>
 80127e4:	4b24      	ldr	r3, [pc, #144]	; (8012878 <_dtoa_r+0x330>)
 80127e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80127ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127ee:	f7ee f83d 	bl	800086c <__aeabi_ddiv>
 80127f2:	e9cd 0100 	strd	r0, r1, [sp]
 80127f6:	f006 060f 	and.w	r6, r6, #15
 80127fa:	2503      	movs	r5, #3
 80127fc:	4f1e      	ldr	r7, [pc, #120]	; (8012878 <_dtoa_r+0x330>)
 80127fe:	e04c      	b.n	801289a <_dtoa_r+0x352>
 8012800:	2301      	movs	r3, #1
 8012802:	930a      	str	r3, [sp, #40]	; 0x28
 8012804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012806:	4453      	add	r3, sl
 8012808:	f103 0901 	add.w	r9, r3, #1
 801280c:	9302      	str	r3, [sp, #8]
 801280e:	464b      	mov	r3, r9
 8012810:	2b01      	cmp	r3, #1
 8012812:	bfb8      	it	lt
 8012814:	2301      	movlt	r3, #1
 8012816:	e7ba      	b.n	801278e <_dtoa_r+0x246>
 8012818:	2300      	movs	r3, #0
 801281a:	e7b2      	b.n	8012782 <_dtoa_r+0x23a>
 801281c:	2300      	movs	r3, #0
 801281e:	e7f0      	b.n	8012802 <_dtoa_r+0x2ba>
 8012820:	2501      	movs	r5, #1
 8012822:	2300      	movs	r3, #0
 8012824:	9306      	str	r3, [sp, #24]
 8012826:	950a      	str	r5, [sp, #40]	; 0x28
 8012828:	f04f 33ff 	mov.w	r3, #4294967295
 801282c:	9302      	str	r3, [sp, #8]
 801282e:	4699      	mov	r9, r3
 8012830:	2200      	movs	r2, #0
 8012832:	2312      	movs	r3, #18
 8012834:	920b      	str	r2, [sp, #44]	; 0x2c
 8012836:	e7aa      	b.n	801278e <_dtoa_r+0x246>
 8012838:	2301      	movs	r3, #1
 801283a:	930a      	str	r3, [sp, #40]	; 0x28
 801283c:	e7f4      	b.n	8012828 <_dtoa_r+0x2e0>
 801283e:	2301      	movs	r3, #1
 8012840:	9302      	str	r3, [sp, #8]
 8012842:	4699      	mov	r9, r3
 8012844:	461a      	mov	r2, r3
 8012846:	e7f5      	b.n	8012834 <_dtoa_r+0x2ec>
 8012848:	3101      	adds	r1, #1
 801284a:	6071      	str	r1, [r6, #4]
 801284c:	0052      	lsls	r2, r2, #1
 801284e:	e7a2      	b.n	8012796 <_dtoa_r+0x24e>
 8012850:	636f4361 	.word	0x636f4361
 8012854:	3fd287a7 	.word	0x3fd287a7
 8012858:	8b60c8b3 	.word	0x8b60c8b3
 801285c:	3fc68a28 	.word	0x3fc68a28
 8012860:	509f79fb 	.word	0x509f79fb
 8012864:	3fd34413 	.word	0x3fd34413
 8012868:	7ff00000 	.word	0x7ff00000
 801286c:	080160d4 	.word	0x080160d4
 8012870:	3ff80000 	.word	0x3ff80000
 8012874:	08015fd8 	.word	0x08015fd8
 8012878:	08015fb0 	.word	0x08015fb0
 801287c:	08015fa1 	.word	0x08015fa1
 8012880:	07f1      	lsls	r1, r6, #31
 8012882:	d508      	bpl.n	8012896 <_dtoa_r+0x34e>
 8012884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012888:	e9d7 2300 	ldrd	r2, r3, [r7]
 801288c:	f7ed fec4 	bl	8000618 <__aeabi_dmul>
 8012890:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012894:	3501      	adds	r5, #1
 8012896:	1076      	asrs	r6, r6, #1
 8012898:	3708      	adds	r7, #8
 801289a:	2e00      	cmp	r6, #0
 801289c:	d1f0      	bne.n	8012880 <_dtoa_r+0x338>
 801289e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128a6:	f7ed ffe1 	bl	800086c <__aeabi_ddiv>
 80128aa:	e9cd 0100 	strd	r0, r1, [sp]
 80128ae:	e01a      	b.n	80128e6 <_dtoa_r+0x39e>
 80128b0:	2502      	movs	r5, #2
 80128b2:	e7a3      	b.n	80127fc <_dtoa_r+0x2b4>
 80128b4:	f000 80a0 	beq.w	80129f8 <_dtoa_r+0x4b0>
 80128b8:	f1ca 0600 	rsb	r6, sl, #0
 80128bc:	4b9f      	ldr	r3, [pc, #636]	; (8012b3c <_dtoa_r+0x5f4>)
 80128be:	4fa0      	ldr	r7, [pc, #640]	; (8012b40 <_dtoa_r+0x5f8>)
 80128c0:	f006 020f 	and.w	r2, r6, #15
 80128c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80128d0:	f7ed fea2 	bl	8000618 <__aeabi_dmul>
 80128d4:	e9cd 0100 	strd	r0, r1, [sp]
 80128d8:	1136      	asrs	r6, r6, #4
 80128da:	2300      	movs	r3, #0
 80128dc:	2502      	movs	r5, #2
 80128de:	2e00      	cmp	r6, #0
 80128e0:	d17f      	bne.n	80129e2 <_dtoa_r+0x49a>
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1e1      	bne.n	80128aa <_dtoa_r+0x362>
 80128e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 8087 	beq.w	80129fc <_dtoa_r+0x4b4>
 80128ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80128f2:	2200      	movs	r2, #0
 80128f4:	4b93      	ldr	r3, [pc, #588]	; (8012b44 <_dtoa_r+0x5fc>)
 80128f6:	4630      	mov	r0, r6
 80128f8:	4639      	mov	r1, r7
 80128fa:	f7ee f8ff 	bl	8000afc <__aeabi_dcmplt>
 80128fe:	2800      	cmp	r0, #0
 8012900:	d07c      	beq.n	80129fc <_dtoa_r+0x4b4>
 8012902:	f1b9 0f00 	cmp.w	r9, #0
 8012906:	d079      	beq.n	80129fc <_dtoa_r+0x4b4>
 8012908:	9b02      	ldr	r3, [sp, #8]
 801290a:	2b00      	cmp	r3, #0
 801290c:	dd35      	ble.n	801297a <_dtoa_r+0x432>
 801290e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012912:	9308      	str	r3, [sp, #32]
 8012914:	4639      	mov	r1, r7
 8012916:	2200      	movs	r2, #0
 8012918:	4b8b      	ldr	r3, [pc, #556]	; (8012b48 <_dtoa_r+0x600>)
 801291a:	4630      	mov	r0, r6
 801291c:	f7ed fe7c 	bl	8000618 <__aeabi_dmul>
 8012920:	e9cd 0100 	strd	r0, r1, [sp]
 8012924:	9f02      	ldr	r7, [sp, #8]
 8012926:	3501      	adds	r5, #1
 8012928:	4628      	mov	r0, r5
 801292a:	f7ed fe0b 	bl	8000544 <__aeabi_i2d>
 801292e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012932:	f7ed fe71 	bl	8000618 <__aeabi_dmul>
 8012936:	2200      	movs	r2, #0
 8012938:	4b84      	ldr	r3, [pc, #528]	; (8012b4c <_dtoa_r+0x604>)
 801293a:	f7ed fcb7 	bl	80002ac <__adddf3>
 801293e:	4605      	mov	r5, r0
 8012940:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012944:	2f00      	cmp	r7, #0
 8012946:	d15d      	bne.n	8012a04 <_dtoa_r+0x4bc>
 8012948:	2200      	movs	r2, #0
 801294a:	4b81      	ldr	r3, [pc, #516]	; (8012b50 <_dtoa_r+0x608>)
 801294c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012950:	f7ed fcaa 	bl	80002a8 <__aeabi_dsub>
 8012954:	462a      	mov	r2, r5
 8012956:	4633      	mov	r3, r6
 8012958:	e9cd 0100 	strd	r0, r1, [sp]
 801295c:	f7ee f8ec 	bl	8000b38 <__aeabi_dcmpgt>
 8012960:	2800      	cmp	r0, #0
 8012962:	f040 8288 	bne.w	8012e76 <_dtoa_r+0x92e>
 8012966:	462a      	mov	r2, r5
 8012968:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801296c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012970:	f7ee f8c4 	bl	8000afc <__aeabi_dcmplt>
 8012974:	2800      	cmp	r0, #0
 8012976:	f040 827c 	bne.w	8012e72 <_dtoa_r+0x92a>
 801297a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801297e:	e9cd 2300 	strd	r2, r3, [sp]
 8012982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012984:	2b00      	cmp	r3, #0
 8012986:	f2c0 8150 	blt.w	8012c2a <_dtoa_r+0x6e2>
 801298a:	f1ba 0f0e 	cmp.w	sl, #14
 801298e:	f300 814c 	bgt.w	8012c2a <_dtoa_r+0x6e2>
 8012992:	4b6a      	ldr	r3, [pc, #424]	; (8012b3c <_dtoa_r+0x5f4>)
 8012994:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012998:	ed93 7b00 	vldr	d7, [r3]
 801299c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801299e:	2b00      	cmp	r3, #0
 80129a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129a4:	f280 80d8 	bge.w	8012b58 <_dtoa_r+0x610>
 80129a8:	f1b9 0f00 	cmp.w	r9, #0
 80129ac:	f300 80d4 	bgt.w	8012b58 <_dtoa_r+0x610>
 80129b0:	f040 825e 	bne.w	8012e70 <_dtoa_r+0x928>
 80129b4:	2200      	movs	r2, #0
 80129b6:	4b66      	ldr	r3, [pc, #408]	; (8012b50 <_dtoa_r+0x608>)
 80129b8:	ec51 0b17 	vmov	r0, r1, d7
 80129bc:	f7ed fe2c 	bl	8000618 <__aeabi_dmul>
 80129c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129c4:	f7ee f8ae 	bl	8000b24 <__aeabi_dcmpge>
 80129c8:	464f      	mov	r7, r9
 80129ca:	464e      	mov	r6, r9
 80129cc:	2800      	cmp	r0, #0
 80129ce:	f040 8234 	bne.w	8012e3a <_dtoa_r+0x8f2>
 80129d2:	2331      	movs	r3, #49	; 0x31
 80129d4:	f10b 0501 	add.w	r5, fp, #1
 80129d8:	f88b 3000 	strb.w	r3, [fp]
 80129dc:	f10a 0a01 	add.w	sl, sl, #1
 80129e0:	e22f      	b.n	8012e42 <_dtoa_r+0x8fa>
 80129e2:	07f2      	lsls	r2, r6, #31
 80129e4:	d505      	bpl.n	80129f2 <_dtoa_r+0x4aa>
 80129e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129ea:	f7ed fe15 	bl	8000618 <__aeabi_dmul>
 80129ee:	3501      	adds	r5, #1
 80129f0:	2301      	movs	r3, #1
 80129f2:	1076      	asrs	r6, r6, #1
 80129f4:	3708      	adds	r7, #8
 80129f6:	e772      	b.n	80128de <_dtoa_r+0x396>
 80129f8:	2502      	movs	r5, #2
 80129fa:	e774      	b.n	80128e6 <_dtoa_r+0x39e>
 80129fc:	f8cd a020 	str.w	sl, [sp, #32]
 8012a00:	464f      	mov	r7, r9
 8012a02:	e791      	b.n	8012928 <_dtoa_r+0x3e0>
 8012a04:	4b4d      	ldr	r3, [pc, #308]	; (8012b3c <_dtoa_r+0x5f4>)
 8012a06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d047      	beq.n	8012aa4 <_dtoa_r+0x55c>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	2000      	movs	r0, #0
 8012a1a:	494e      	ldr	r1, [pc, #312]	; (8012b54 <_dtoa_r+0x60c>)
 8012a1c:	f7ed ff26 	bl	800086c <__aeabi_ddiv>
 8012a20:	462a      	mov	r2, r5
 8012a22:	4633      	mov	r3, r6
 8012a24:	f7ed fc40 	bl	80002a8 <__aeabi_dsub>
 8012a28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a2c:	465d      	mov	r5, fp
 8012a2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a32:	f7ee f8a1 	bl	8000b78 <__aeabi_d2iz>
 8012a36:	4606      	mov	r6, r0
 8012a38:	f7ed fd84 	bl	8000544 <__aeabi_i2d>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a44:	f7ed fc30 	bl	80002a8 <__aeabi_dsub>
 8012a48:	3630      	adds	r6, #48	; 0x30
 8012a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8012a4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a52:	e9cd 0100 	strd	r0, r1, [sp]
 8012a56:	f7ee f851 	bl	8000afc <__aeabi_dcmplt>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d163      	bne.n	8012b26 <_dtoa_r+0x5de>
 8012a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a62:	2000      	movs	r0, #0
 8012a64:	4937      	ldr	r1, [pc, #220]	; (8012b44 <_dtoa_r+0x5fc>)
 8012a66:	f7ed fc1f 	bl	80002a8 <__aeabi_dsub>
 8012a6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a6e:	f7ee f845 	bl	8000afc <__aeabi_dcmplt>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	f040 80b7 	bne.w	8012be6 <_dtoa_r+0x69e>
 8012a78:	eba5 030b 	sub.w	r3, r5, fp
 8012a7c:	429f      	cmp	r7, r3
 8012a7e:	f77f af7c 	ble.w	801297a <_dtoa_r+0x432>
 8012a82:	2200      	movs	r2, #0
 8012a84:	4b30      	ldr	r3, [pc, #192]	; (8012b48 <_dtoa_r+0x600>)
 8012a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a8a:	f7ed fdc5 	bl	8000618 <__aeabi_dmul>
 8012a8e:	2200      	movs	r2, #0
 8012a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a94:	4b2c      	ldr	r3, [pc, #176]	; (8012b48 <_dtoa_r+0x600>)
 8012a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a9a:	f7ed fdbd 	bl	8000618 <__aeabi_dmul>
 8012a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8012aa2:	e7c4      	b.n	8012a2e <_dtoa_r+0x4e6>
 8012aa4:	462a      	mov	r2, r5
 8012aa6:	4633      	mov	r3, r6
 8012aa8:	f7ed fdb6 	bl	8000618 <__aeabi_dmul>
 8012aac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012ab0:	eb0b 0507 	add.w	r5, fp, r7
 8012ab4:	465e      	mov	r6, fp
 8012ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aba:	f7ee f85d 	bl	8000b78 <__aeabi_d2iz>
 8012abe:	4607      	mov	r7, r0
 8012ac0:	f7ed fd40 	bl	8000544 <__aeabi_i2d>
 8012ac4:	3730      	adds	r7, #48	; 0x30
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ace:	f7ed fbeb 	bl	80002a8 <__aeabi_dsub>
 8012ad2:	f806 7b01 	strb.w	r7, [r6], #1
 8012ad6:	42ae      	cmp	r6, r5
 8012ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8012adc:	f04f 0200 	mov.w	r2, #0
 8012ae0:	d126      	bne.n	8012b30 <_dtoa_r+0x5e8>
 8012ae2:	4b1c      	ldr	r3, [pc, #112]	; (8012b54 <_dtoa_r+0x60c>)
 8012ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012ae8:	f7ed fbe0 	bl	80002ac <__adddf3>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012af4:	f7ee f820 	bl	8000b38 <__aeabi_dcmpgt>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d174      	bne.n	8012be6 <_dtoa_r+0x69e>
 8012afc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012b00:	2000      	movs	r0, #0
 8012b02:	4914      	ldr	r1, [pc, #80]	; (8012b54 <_dtoa_r+0x60c>)
 8012b04:	f7ed fbd0 	bl	80002a8 <__aeabi_dsub>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b10:	f7ed fff4 	bl	8000afc <__aeabi_dcmplt>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	f43f af30 	beq.w	801297a <_dtoa_r+0x432>
 8012b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012b1e:	2b30      	cmp	r3, #48	; 0x30
 8012b20:	f105 32ff 	add.w	r2, r5, #4294967295
 8012b24:	d002      	beq.n	8012b2c <_dtoa_r+0x5e4>
 8012b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b2a:	e04a      	b.n	8012bc2 <_dtoa_r+0x67a>
 8012b2c:	4615      	mov	r5, r2
 8012b2e:	e7f4      	b.n	8012b1a <_dtoa_r+0x5d2>
 8012b30:	4b05      	ldr	r3, [pc, #20]	; (8012b48 <_dtoa_r+0x600>)
 8012b32:	f7ed fd71 	bl	8000618 <__aeabi_dmul>
 8012b36:	e9cd 0100 	strd	r0, r1, [sp]
 8012b3a:	e7bc      	b.n	8012ab6 <_dtoa_r+0x56e>
 8012b3c:	08015fd8 	.word	0x08015fd8
 8012b40:	08015fb0 	.word	0x08015fb0
 8012b44:	3ff00000 	.word	0x3ff00000
 8012b48:	40240000 	.word	0x40240000
 8012b4c:	401c0000 	.word	0x401c0000
 8012b50:	40140000 	.word	0x40140000
 8012b54:	3fe00000 	.word	0x3fe00000
 8012b58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b5c:	465d      	mov	r5, fp
 8012b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b62:	4630      	mov	r0, r6
 8012b64:	4639      	mov	r1, r7
 8012b66:	f7ed fe81 	bl	800086c <__aeabi_ddiv>
 8012b6a:	f7ee f805 	bl	8000b78 <__aeabi_d2iz>
 8012b6e:	4680      	mov	r8, r0
 8012b70:	f7ed fce8 	bl	8000544 <__aeabi_i2d>
 8012b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b78:	f7ed fd4e 	bl	8000618 <__aeabi_dmul>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	460b      	mov	r3, r1
 8012b80:	4630      	mov	r0, r6
 8012b82:	4639      	mov	r1, r7
 8012b84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012b88:	f7ed fb8e 	bl	80002a8 <__aeabi_dsub>
 8012b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8012b90:	eba5 060b 	sub.w	r6, r5, fp
 8012b94:	45b1      	cmp	r9, r6
 8012b96:	4602      	mov	r2, r0
 8012b98:	460b      	mov	r3, r1
 8012b9a:	d139      	bne.n	8012c10 <_dtoa_r+0x6c8>
 8012b9c:	f7ed fb86 	bl	80002ac <__adddf3>
 8012ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	460f      	mov	r7, r1
 8012ba8:	f7ed ffc6 	bl	8000b38 <__aeabi_dcmpgt>
 8012bac:	b9c8      	cbnz	r0, 8012be2 <_dtoa_r+0x69a>
 8012bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	f7ed ff97 	bl	8000ae8 <__aeabi_dcmpeq>
 8012bba:	b110      	cbz	r0, 8012bc2 <_dtoa_r+0x67a>
 8012bbc:	f018 0f01 	tst.w	r8, #1
 8012bc0:	d10f      	bne.n	8012be2 <_dtoa_r+0x69a>
 8012bc2:	9904      	ldr	r1, [sp, #16]
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f000 fe07 	bl	80137d8 <_Bfree>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012bce:	702b      	strb	r3, [r5, #0]
 8012bd0:	f10a 0301 	add.w	r3, sl, #1
 8012bd4:	6013      	str	r3, [r2, #0]
 8012bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f000 8241 	beq.w	8013060 <_dtoa_r+0xb18>
 8012bde:	601d      	str	r5, [r3, #0]
 8012be0:	e23e      	b.n	8013060 <_dtoa_r+0xb18>
 8012be2:	f8cd a020 	str.w	sl, [sp, #32]
 8012be6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012bea:	2a39      	cmp	r2, #57	; 0x39
 8012bec:	f105 33ff 	add.w	r3, r5, #4294967295
 8012bf0:	d108      	bne.n	8012c04 <_dtoa_r+0x6bc>
 8012bf2:	459b      	cmp	fp, r3
 8012bf4:	d10a      	bne.n	8012c0c <_dtoa_r+0x6c4>
 8012bf6:	9b08      	ldr	r3, [sp, #32]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	9308      	str	r3, [sp, #32]
 8012bfc:	2330      	movs	r3, #48	; 0x30
 8012bfe:	f88b 3000 	strb.w	r3, [fp]
 8012c02:	465b      	mov	r3, fp
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	3201      	adds	r2, #1
 8012c08:	701a      	strb	r2, [r3, #0]
 8012c0a:	e78c      	b.n	8012b26 <_dtoa_r+0x5de>
 8012c0c:	461d      	mov	r5, r3
 8012c0e:	e7ea      	b.n	8012be6 <_dtoa_r+0x69e>
 8012c10:	2200      	movs	r2, #0
 8012c12:	4b9b      	ldr	r3, [pc, #620]	; (8012e80 <_dtoa_r+0x938>)
 8012c14:	f7ed fd00 	bl	8000618 <__aeabi_dmul>
 8012c18:	2200      	movs	r2, #0
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	460f      	mov	r7, r1
 8012c20:	f7ed ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d09a      	beq.n	8012b5e <_dtoa_r+0x616>
 8012c28:	e7cb      	b.n	8012bc2 <_dtoa_r+0x67a>
 8012c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c2c:	2a00      	cmp	r2, #0
 8012c2e:	f000 808b 	beq.w	8012d48 <_dtoa_r+0x800>
 8012c32:	9a06      	ldr	r2, [sp, #24]
 8012c34:	2a01      	cmp	r2, #1
 8012c36:	dc6e      	bgt.n	8012d16 <_dtoa_r+0x7ce>
 8012c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012c3a:	2a00      	cmp	r2, #0
 8012c3c:	d067      	beq.n	8012d0e <_dtoa_r+0x7c6>
 8012c3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012c42:	9f07      	ldr	r7, [sp, #28]
 8012c44:	9d05      	ldr	r5, [sp, #20]
 8012c46:	9a05      	ldr	r2, [sp, #20]
 8012c48:	2101      	movs	r1, #1
 8012c4a:	441a      	add	r2, r3
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	9205      	str	r2, [sp, #20]
 8012c50:	4498      	add	r8, r3
 8012c52:	f000 fe9f 	bl	8013994 <__i2b>
 8012c56:	4606      	mov	r6, r0
 8012c58:	2d00      	cmp	r5, #0
 8012c5a:	dd0c      	ble.n	8012c76 <_dtoa_r+0x72e>
 8012c5c:	f1b8 0f00 	cmp.w	r8, #0
 8012c60:	dd09      	ble.n	8012c76 <_dtoa_r+0x72e>
 8012c62:	4545      	cmp	r5, r8
 8012c64:	9a05      	ldr	r2, [sp, #20]
 8012c66:	462b      	mov	r3, r5
 8012c68:	bfa8      	it	ge
 8012c6a:	4643      	movge	r3, r8
 8012c6c:	1ad2      	subs	r2, r2, r3
 8012c6e:	9205      	str	r2, [sp, #20]
 8012c70:	1aed      	subs	r5, r5, r3
 8012c72:	eba8 0803 	sub.w	r8, r8, r3
 8012c76:	9b07      	ldr	r3, [sp, #28]
 8012c78:	b1eb      	cbz	r3, 8012cb6 <_dtoa_r+0x76e>
 8012c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d067      	beq.n	8012d50 <_dtoa_r+0x808>
 8012c80:	b18f      	cbz	r7, 8012ca6 <_dtoa_r+0x75e>
 8012c82:	4631      	mov	r1, r6
 8012c84:	463a      	mov	r2, r7
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 ff24 	bl	8013ad4 <__pow5mult>
 8012c8c:	9a04      	ldr	r2, [sp, #16]
 8012c8e:	4601      	mov	r1, r0
 8012c90:	4606      	mov	r6, r0
 8012c92:	4620      	mov	r0, r4
 8012c94:	f000 fe87 	bl	80139a6 <__multiply>
 8012c98:	9904      	ldr	r1, [sp, #16]
 8012c9a:	9008      	str	r0, [sp, #32]
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f000 fd9b 	bl	80137d8 <_Bfree>
 8012ca2:	9b08      	ldr	r3, [sp, #32]
 8012ca4:	9304      	str	r3, [sp, #16]
 8012ca6:	9b07      	ldr	r3, [sp, #28]
 8012ca8:	1bda      	subs	r2, r3, r7
 8012caa:	d004      	beq.n	8012cb6 <_dtoa_r+0x76e>
 8012cac:	9904      	ldr	r1, [sp, #16]
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f000 ff10 	bl	8013ad4 <__pow5mult>
 8012cb4:	9004      	str	r0, [sp, #16]
 8012cb6:	2101      	movs	r1, #1
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f000 fe6b 	bl	8013994 <__i2b>
 8012cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cc0:	4607      	mov	r7, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	f000 81d0 	beq.w	8013068 <_dtoa_r+0xb20>
 8012cc8:	461a      	mov	r2, r3
 8012cca:	4601      	mov	r1, r0
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f000 ff01 	bl	8013ad4 <__pow5mult>
 8012cd2:	9b06      	ldr	r3, [sp, #24]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	4607      	mov	r7, r0
 8012cd8:	dc40      	bgt.n	8012d5c <_dtoa_r+0x814>
 8012cda:	9b00      	ldr	r3, [sp, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d139      	bne.n	8012d54 <_dtoa_r+0x80c>
 8012ce0:	9b01      	ldr	r3, [sp, #4]
 8012ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d136      	bne.n	8012d58 <_dtoa_r+0x810>
 8012cea:	9b01      	ldr	r3, [sp, #4]
 8012cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cf0:	0d1b      	lsrs	r3, r3, #20
 8012cf2:	051b      	lsls	r3, r3, #20
 8012cf4:	b12b      	cbz	r3, 8012d02 <_dtoa_r+0x7ba>
 8012cf6:	9b05      	ldr	r3, [sp, #20]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	9305      	str	r3, [sp, #20]
 8012cfc:	f108 0801 	add.w	r8, r8, #1
 8012d00:	2301      	movs	r3, #1
 8012d02:	9307      	str	r3, [sp, #28]
 8012d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d12a      	bne.n	8012d60 <_dtoa_r+0x818>
 8012d0a:	2001      	movs	r0, #1
 8012d0c:	e030      	b.n	8012d70 <_dtoa_r+0x828>
 8012d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d14:	e795      	b.n	8012c42 <_dtoa_r+0x6fa>
 8012d16:	9b07      	ldr	r3, [sp, #28]
 8012d18:	f109 37ff 	add.w	r7, r9, #4294967295
 8012d1c:	42bb      	cmp	r3, r7
 8012d1e:	bfbf      	itttt	lt
 8012d20:	9b07      	ldrlt	r3, [sp, #28]
 8012d22:	9707      	strlt	r7, [sp, #28]
 8012d24:	1afa      	sublt	r2, r7, r3
 8012d26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012d28:	bfbb      	ittet	lt
 8012d2a:	189b      	addlt	r3, r3, r2
 8012d2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012d2e:	1bdf      	subge	r7, r3, r7
 8012d30:	2700      	movlt	r7, #0
 8012d32:	f1b9 0f00 	cmp.w	r9, #0
 8012d36:	bfb5      	itete	lt
 8012d38:	9b05      	ldrlt	r3, [sp, #20]
 8012d3a:	9d05      	ldrge	r5, [sp, #20]
 8012d3c:	eba3 0509 	sublt.w	r5, r3, r9
 8012d40:	464b      	movge	r3, r9
 8012d42:	bfb8      	it	lt
 8012d44:	2300      	movlt	r3, #0
 8012d46:	e77e      	b.n	8012c46 <_dtoa_r+0x6fe>
 8012d48:	9f07      	ldr	r7, [sp, #28]
 8012d4a:	9d05      	ldr	r5, [sp, #20]
 8012d4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012d4e:	e783      	b.n	8012c58 <_dtoa_r+0x710>
 8012d50:	9a07      	ldr	r2, [sp, #28]
 8012d52:	e7ab      	b.n	8012cac <_dtoa_r+0x764>
 8012d54:	2300      	movs	r3, #0
 8012d56:	e7d4      	b.n	8012d02 <_dtoa_r+0x7ba>
 8012d58:	9b00      	ldr	r3, [sp, #0]
 8012d5a:	e7d2      	b.n	8012d02 <_dtoa_r+0x7ba>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	9307      	str	r3, [sp, #28]
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012d66:	6918      	ldr	r0, [r3, #16]
 8012d68:	f000 fdc6 	bl	80138f8 <__hi0bits>
 8012d6c:	f1c0 0020 	rsb	r0, r0, #32
 8012d70:	4440      	add	r0, r8
 8012d72:	f010 001f 	ands.w	r0, r0, #31
 8012d76:	d047      	beq.n	8012e08 <_dtoa_r+0x8c0>
 8012d78:	f1c0 0320 	rsb	r3, r0, #32
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	dd3b      	ble.n	8012df8 <_dtoa_r+0x8b0>
 8012d80:	9b05      	ldr	r3, [sp, #20]
 8012d82:	f1c0 001c 	rsb	r0, r0, #28
 8012d86:	4403      	add	r3, r0
 8012d88:	9305      	str	r3, [sp, #20]
 8012d8a:	4405      	add	r5, r0
 8012d8c:	4480      	add	r8, r0
 8012d8e:	9b05      	ldr	r3, [sp, #20]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dd05      	ble.n	8012da0 <_dtoa_r+0x858>
 8012d94:	461a      	mov	r2, r3
 8012d96:	9904      	ldr	r1, [sp, #16]
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 fee9 	bl	8013b70 <__lshift>
 8012d9e:	9004      	str	r0, [sp, #16]
 8012da0:	f1b8 0f00 	cmp.w	r8, #0
 8012da4:	dd05      	ble.n	8012db2 <_dtoa_r+0x86a>
 8012da6:	4639      	mov	r1, r7
 8012da8:	4642      	mov	r2, r8
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 fee0 	bl	8013b70 <__lshift>
 8012db0:	4607      	mov	r7, r0
 8012db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012db4:	b353      	cbz	r3, 8012e0c <_dtoa_r+0x8c4>
 8012db6:	4639      	mov	r1, r7
 8012db8:	9804      	ldr	r0, [sp, #16]
 8012dba:	f000 ff2d 	bl	8013c18 <__mcmp>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	da24      	bge.n	8012e0c <_dtoa_r+0x8c4>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	220a      	movs	r2, #10
 8012dc6:	9904      	ldr	r1, [sp, #16]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 fd1c 	bl	8013806 <__multadd>
 8012dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dd0:	9004      	str	r0, [sp, #16]
 8012dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 814d 	beq.w	8013076 <_dtoa_r+0xb2e>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	4631      	mov	r1, r6
 8012de0:	220a      	movs	r2, #10
 8012de2:	4620      	mov	r0, r4
 8012de4:	f000 fd0f 	bl	8013806 <__multadd>
 8012de8:	9b02      	ldr	r3, [sp, #8]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	4606      	mov	r6, r0
 8012dee:	dc4f      	bgt.n	8012e90 <_dtoa_r+0x948>
 8012df0:	9b06      	ldr	r3, [sp, #24]
 8012df2:	2b02      	cmp	r3, #2
 8012df4:	dd4c      	ble.n	8012e90 <_dtoa_r+0x948>
 8012df6:	e011      	b.n	8012e1c <_dtoa_r+0x8d4>
 8012df8:	d0c9      	beq.n	8012d8e <_dtoa_r+0x846>
 8012dfa:	9a05      	ldr	r2, [sp, #20]
 8012dfc:	331c      	adds	r3, #28
 8012dfe:	441a      	add	r2, r3
 8012e00:	9205      	str	r2, [sp, #20]
 8012e02:	441d      	add	r5, r3
 8012e04:	4498      	add	r8, r3
 8012e06:	e7c2      	b.n	8012d8e <_dtoa_r+0x846>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	e7f6      	b.n	8012dfa <_dtoa_r+0x8b2>
 8012e0c:	f1b9 0f00 	cmp.w	r9, #0
 8012e10:	dc38      	bgt.n	8012e84 <_dtoa_r+0x93c>
 8012e12:	9b06      	ldr	r3, [sp, #24]
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	dd35      	ble.n	8012e84 <_dtoa_r+0x93c>
 8012e18:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e1c:	9b02      	ldr	r3, [sp, #8]
 8012e1e:	b963      	cbnz	r3, 8012e3a <_dtoa_r+0x8f2>
 8012e20:	4639      	mov	r1, r7
 8012e22:	2205      	movs	r2, #5
 8012e24:	4620      	mov	r0, r4
 8012e26:	f000 fcee 	bl	8013806 <__multadd>
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	4607      	mov	r7, r0
 8012e2e:	9804      	ldr	r0, [sp, #16]
 8012e30:	f000 fef2 	bl	8013c18 <__mcmp>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	f73f adcc 	bgt.w	80129d2 <_dtoa_r+0x48a>
 8012e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e3c:	465d      	mov	r5, fp
 8012e3e:	ea6f 0a03 	mvn.w	sl, r3
 8012e42:	f04f 0900 	mov.w	r9, #0
 8012e46:	4639      	mov	r1, r7
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fcc5 	bl	80137d8 <_Bfree>
 8012e4e:	2e00      	cmp	r6, #0
 8012e50:	f43f aeb7 	beq.w	8012bc2 <_dtoa_r+0x67a>
 8012e54:	f1b9 0f00 	cmp.w	r9, #0
 8012e58:	d005      	beq.n	8012e66 <_dtoa_r+0x91e>
 8012e5a:	45b1      	cmp	r9, r6
 8012e5c:	d003      	beq.n	8012e66 <_dtoa_r+0x91e>
 8012e5e:	4649      	mov	r1, r9
 8012e60:	4620      	mov	r0, r4
 8012e62:	f000 fcb9 	bl	80137d8 <_Bfree>
 8012e66:	4631      	mov	r1, r6
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 fcb5 	bl	80137d8 <_Bfree>
 8012e6e:	e6a8      	b.n	8012bc2 <_dtoa_r+0x67a>
 8012e70:	2700      	movs	r7, #0
 8012e72:	463e      	mov	r6, r7
 8012e74:	e7e1      	b.n	8012e3a <_dtoa_r+0x8f2>
 8012e76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012e7a:	463e      	mov	r6, r7
 8012e7c:	e5a9      	b.n	80129d2 <_dtoa_r+0x48a>
 8012e7e:	bf00      	nop
 8012e80:	40240000 	.word	0x40240000
 8012e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e86:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	f000 80fa 	beq.w	8013084 <_dtoa_r+0xb3c>
 8012e90:	2d00      	cmp	r5, #0
 8012e92:	dd05      	ble.n	8012ea0 <_dtoa_r+0x958>
 8012e94:	4631      	mov	r1, r6
 8012e96:	462a      	mov	r2, r5
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 fe69 	bl	8013b70 <__lshift>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	9b07      	ldr	r3, [sp, #28]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d04c      	beq.n	8012f40 <_dtoa_r+0x9f8>
 8012ea6:	6871      	ldr	r1, [r6, #4]
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	f000 fc61 	bl	8013770 <_Balloc>
 8012eae:	6932      	ldr	r2, [r6, #16]
 8012eb0:	3202      	adds	r2, #2
 8012eb2:	4605      	mov	r5, r0
 8012eb4:	0092      	lsls	r2, r2, #2
 8012eb6:	f106 010c 	add.w	r1, r6, #12
 8012eba:	300c      	adds	r0, #12
 8012ebc:	f7fd fc50 	bl	8010760 <memcpy>
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f000 fe53 	bl	8013b70 <__lshift>
 8012eca:	9b00      	ldr	r3, [sp, #0]
 8012ecc:	f8cd b014 	str.w	fp, [sp, #20]
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	46b1      	mov	r9, r6
 8012ed6:	9307      	str	r3, [sp, #28]
 8012ed8:	4606      	mov	r6, r0
 8012eda:	4639      	mov	r1, r7
 8012edc:	9804      	ldr	r0, [sp, #16]
 8012ede:	f7ff faa5 	bl	801242c <quorem>
 8012ee2:	4649      	mov	r1, r9
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012eea:	9804      	ldr	r0, [sp, #16]
 8012eec:	f000 fe94 	bl	8013c18 <__mcmp>
 8012ef0:	4632      	mov	r2, r6
 8012ef2:	9000      	str	r0, [sp, #0]
 8012ef4:	4639      	mov	r1, r7
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f000 fea8 	bl	8013c4c <__mdiff>
 8012efc:	68c3      	ldr	r3, [r0, #12]
 8012efe:	4602      	mov	r2, r0
 8012f00:	bb03      	cbnz	r3, 8012f44 <_dtoa_r+0x9fc>
 8012f02:	4601      	mov	r1, r0
 8012f04:	9008      	str	r0, [sp, #32]
 8012f06:	9804      	ldr	r0, [sp, #16]
 8012f08:	f000 fe86 	bl	8013c18 <__mcmp>
 8012f0c:	9a08      	ldr	r2, [sp, #32]
 8012f0e:	4603      	mov	r3, r0
 8012f10:	4611      	mov	r1, r2
 8012f12:	4620      	mov	r0, r4
 8012f14:	9308      	str	r3, [sp, #32]
 8012f16:	f000 fc5f 	bl	80137d8 <_Bfree>
 8012f1a:	9b08      	ldr	r3, [sp, #32]
 8012f1c:	b9a3      	cbnz	r3, 8012f48 <_dtoa_r+0xa00>
 8012f1e:	9a06      	ldr	r2, [sp, #24]
 8012f20:	b992      	cbnz	r2, 8012f48 <_dtoa_r+0xa00>
 8012f22:	9a07      	ldr	r2, [sp, #28]
 8012f24:	b982      	cbnz	r2, 8012f48 <_dtoa_r+0xa00>
 8012f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f2a:	d029      	beq.n	8012f80 <_dtoa_r+0xa38>
 8012f2c:	9b00      	ldr	r3, [sp, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	dd01      	ble.n	8012f36 <_dtoa_r+0x9ee>
 8012f32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012f36:	9b05      	ldr	r3, [sp, #20]
 8012f38:	1c5d      	adds	r5, r3, #1
 8012f3a:	f883 8000 	strb.w	r8, [r3]
 8012f3e:	e782      	b.n	8012e46 <_dtoa_r+0x8fe>
 8012f40:	4630      	mov	r0, r6
 8012f42:	e7c2      	b.n	8012eca <_dtoa_r+0x982>
 8012f44:	2301      	movs	r3, #1
 8012f46:	e7e3      	b.n	8012f10 <_dtoa_r+0x9c8>
 8012f48:	9a00      	ldr	r2, [sp, #0]
 8012f4a:	2a00      	cmp	r2, #0
 8012f4c:	db04      	blt.n	8012f58 <_dtoa_r+0xa10>
 8012f4e:	d125      	bne.n	8012f9c <_dtoa_r+0xa54>
 8012f50:	9a06      	ldr	r2, [sp, #24]
 8012f52:	bb1a      	cbnz	r2, 8012f9c <_dtoa_r+0xa54>
 8012f54:	9a07      	ldr	r2, [sp, #28]
 8012f56:	bb0a      	cbnz	r2, 8012f9c <_dtoa_r+0xa54>
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	ddec      	ble.n	8012f36 <_dtoa_r+0x9ee>
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	9904      	ldr	r1, [sp, #16]
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 fe05 	bl	8013b70 <__lshift>
 8012f66:	4639      	mov	r1, r7
 8012f68:	9004      	str	r0, [sp, #16]
 8012f6a:	f000 fe55 	bl	8013c18 <__mcmp>
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	dc03      	bgt.n	8012f7a <_dtoa_r+0xa32>
 8012f72:	d1e0      	bne.n	8012f36 <_dtoa_r+0x9ee>
 8012f74:	f018 0f01 	tst.w	r8, #1
 8012f78:	d0dd      	beq.n	8012f36 <_dtoa_r+0x9ee>
 8012f7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f7e:	d1d8      	bne.n	8012f32 <_dtoa_r+0x9ea>
 8012f80:	9b05      	ldr	r3, [sp, #20]
 8012f82:	9a05      	ldr	r2, [sp, #20]
 8012f84:	1c5d      	adds	r5, r3, #1
 8012f86:	2339      	movs	r3, #57	; 0x39
 8012f88:	7013      	strb	r3, [r2, #0]
 8012f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f8e:	2b39      	cmp	r3, #57	; 0x39
 8012f90:	f105 32ff 	add.w	r2, r5, #4294967295
 8012f94:	d04f      	beq.n	8013036 <_dtoa_r+0xaee>
 8012f96:	3301      	adds	r3, #1
 8012f98:	7013      	strb	r3, [r2, #0]
 8012f9a:	e754      	b.n	8012e46 <_dtoa_r+0x8fe>
 8012f9c:	9a05      	ldr	r2, [sp, #20]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f102 0501 	add.w	r5, r2, #1
 8012fa4:	dd06      	ble.n	8012fb4 <_dtoa_r+0xa6c>
 8012fa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012faa:	d0e9      	beq.n	8012f80 <_dtoa_r+0xa38>
 8012fac:	f108 0801 	add.w	r8, r8, #1
 8012fb0:	9b05      	ldr	r3, [sp, #20]
 8012fb2:	e7c2      	b.n	8012f3a <_dtoa_r+0x9f2>
 8012fb4:	9a02      	ldr	r2, [sp, #8]
 8012fb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012fba:	eba5 030b 	sub.w	r3, r5, fp
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d021      	beq.n	8013006 <_dtoa_r+0xabe>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	220a      	movs	r2, #10
 8012fc6:	9904      	ldr	r1, [sp, #16]
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 fc1c 	bl	8013806 <__multadd>
 8012fce:	45b1      	cmp	r9, r6
 8012fd0:	9004      	str	r0, [sp, #16]
 8012fd2:	f04f 0300 	mov.w	r3, #0
 8012fd6:	f04f 020a 	mov.w	r2, #10
 8012fda:	4649      	mov	r1, r9
 8012fdc:	4620      	mov	r0, r4
 8012fde:	d105      	bne.n	8012fec <_dtoa_r+0xaa4>
 8012fe0:	f000 fc11 	bl	8013806 <__multadd>
 8012fe4:	4681      	mov	r9, r0
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	9505      	str	r5, [sp, #20]
 8012fea:	e776      	b.n	8012eda <_dtoa_r+0x992>
 8012fec:	f000 fc0b 	bl	8013806 <__multadd>
 8012ff0:	4631      	mov	r1, r6
 8012ff2:	4681      	mov	r9, r0
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	220a      	movs	r2, #10
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f000 fc04 	bl	8013806 <__multadd>
 8012ffe:	4606      	mov	r6, r0
 8013000:	e7f2      	b.n	8012fe8 <_dtoa_r+0xaa0>
 8013002:	f04f 0900 	mov.w	r9, #0
 8013006:	2201      	movs	r2, #1
 8013008:	9904      	ldr	r1, [sp, #16]
 801300a:	4620      	mov	r0, r4
 801300c:	f000 fdb0 	bl	8013b70 <__lshift>
 8013010:	4639      	mov	r1, r7
 8013012:	9004      	str	r0, [sp, #16]
 8013014:	f000 fe00 	bl	8013c18 <__mcmp>
 8013018:	2800      	cmp	r0, #0
 801301a:	dcb6      	bgt.n	8012f8a <_dtoa_r+0xa42>
 801301c:	d102      	bne.n	8013024 <_dtoa_r+0xadc>
 801301e:	f018 0f01 	tst.w	r8, #1
 8013022:	d1b2      	bne.n	8012f8a <_dtoa_r+0xa42>
 8013024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013028:	2b30      	cmp	r3, #48	; 0x30
 801302a:	f105 32ff 	add.w	r2, r5, #4294967295
 801302e:	f47f af0a 	bne.w	8012e46 <_dtoa_r+0x8fe>
 8013032:	4615      	mov	r5, r2
 8013034:	e7f6      	b.n	8013024 <_dtoa_r+0xadc>
 8013036:	4593      	cmp	fp, r2
 8013038:	d105      	bne.n	8013046 <_dtoa_r+0xafe>
 801303a:	2331      	movs	r3, #49	; 0x31
 801303c:	f10a 0a01 	add.w	sl, sl, #1
 8013040:	f88b 3000 	strb.w	r3, [fp]
 8013044:	e6ff      	b.n	8012e46 <_dtoa_r+0x8fe>
 8013046:	4615      	mov	r5, r2
 8013048:	e79f      	b.n	8012f8a <_dtoa_r+0xa42>
 801304a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80130b0 <_dtoa_r+0xb68>
 801304e:	e007      	b.n	8013060 <_dtoa_r+0xb18>
 8013050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013052:	f8df b060 	ldr.w	fp, [pc, #96]	; 80130b4 <_dtoa_r+0xb6c>
 8013056:	b11b      	cbz	r3, 8013060 <_dtoa_r+0xb18>
 8013058:	f10b 0308 	add.w	r3, fp, #8
 801305c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	4658      	mov	r0, fp
 8013062:	b017      	add	sp, #92	; 0x5c
 8013064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013068:	9b06      	ldr	r3, [sp, #24]
 801306a:	2b01      	cmp	r3, #1
 801306c:	f77f ae35 	ble.w	8012cda <_dtoa_r+0x792>
 8013070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013072:	9307      	str	r3, [sp, #28]
 8013074:	e649      	b.n	8012d0a <_dtoa_r+0x7c2>
 8013076:	9b02      	ldr	r3, [sp, #8]
 8013078:	2b00      	cmp	r3, #0
 801307a:	dc03      	bgt.n	8013084 <_dtoa_r+0xb3c>
 801307c:	9b06      	ldr	r3, [sp, #24]
 801307e:	2b02      	cmp	r3, #2
 8013080:	f73f aecc 	bgt.w	8012e1c <_dtoa_r+0x8d4>
 8013084:	465d      	mov	r5, fp
 8013086:	4639      	mov	r1, r7
 8013088:	9804      	ldr	r0, [sp, #16]
 801308a:	f7ff f9cf 	bl	801242c <quorem>
 801308e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013092:	f805 8b01 	strb.w	r8, [r5], #1
 8013096:	9a02      	ldr	r2, [sp, #8]
 8013098:	eba5 030b 	sub.w	r3, r5, fp
 801309c:	429a      	cmp	r2, r3
 801309e:	ddb0      	ble.n	8013002 <_dtoa_r+0xaba>
 80130a0:	2300      	movs	r3, #0
 80130a2:	220a      	movs	r2, #10
 80130a4:	9904      	ldr	r1, [sp, #16]
 80130a6:	4620      	mov	r0, r4
 80130a8:	f000 fbad 	bl	8013806 <__multadd>
 80130ac:	9004      	str	r0, [sp, #16]
 80130ae:	e7ea      	b.n	8013086 <_dtoa_r+0xb3e>
 80130b0:	080160d3 	.word	0x080160d3
 80130b4:	08015f98 	.word	0x08015f98

080130b8 <rshift>:
 80130b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ba:	6906      	ldr	r6, [r0, #16]
 80130bc:	114b      	asrs	r3, r1, #5
 80130be:	429e      	cmp	r6, r3
 80130c0:	f100 0414 	add.w	r4, r0, #20
 80130c4:	dd30      	ble.n	8013128 <rshift+0x70>
 80130c6:	f011 011f 	ands.w	r1, r1, #31
 80130ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80130ce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80130d2:	d108      	bne.n	80130e6 <rshift+0x2e>
 80130d4:	4621      	mov	r1, r4
 80130d6:	42b2      	cmp	r2, r6
 80130d8:	460b      	mov	r3, r1
 80130da:	d211      	bcs.n	8013100 <rshift+0x48>
 80130dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80130e0:	f841 3b04 	str.w	r3, [r1], #4
 80130e4:	e7f7      	b.n	80130d6 <rshift+0x1e>
 80130e6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80130ea:	f1c1 0c20 	rsb	ip, r1, #32
 80130ee:	40cd      	lsrs	r5, r1
 80130f0:	3204      	adds	r2, #4
 80130f2:	4623      	mov	r3, r4
 80130f4:	42b2      	cmp	r2, r6
 80130f6:	4617      	mov	r7, r2
 80130f8:	d30c      	bcc.n	8013114 <rshift+0x5c>
 80130fa:	601d      	str	r5, [r3, #0]
 80130fc:	b105      	cbz	r5, 8013100 <rshift+0x48>
 80130fe:	3304      	adds	r3, #4
 8013100:	1b1a      	subs	r2, r3, r4
 8013102:	42a3      	cmp	r3, r4
 8013104:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013108:	bf08      	it	eq
 801310a:	2300      	moveq	r3, #0
 801310c:	6102      	str	r2, [r0, #16]
 801310e:	bf08      	it	eq
 8013110:	6143      	streq	r3, [r0, #20]
 8013112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013114:	683f      	ldr	r7, [r7, #0]
 8013116:	fa07 f70c 	lsl.w	r7, r7, ip
 801311a:	433d      	orrs	r5, r7
 801311c:	f843 5b04 	str.w	r5, [r3], #4
 8013120:	f852 5b04 	ldr.w	r5, [r2], #4
 8013124:	40cd      	lsrs	r5, r1
 8013126:	e7e5      	b.n	80130f4 <rshift+0x3c>
 8013128:	4623      	mov	r3, r4
 801312a:	e7e9      	b.n	8013100 <rshift+0x48>

0801312c <__hexdig_fun>:
 801312c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013130:	2b09      	cmp	r3, #9
 8013132:	d802      	bhi.n	801313a <__hexdig_fun+0xe>
 8013134:	3820      	subs	r0, #32
 8013136:	b2c0      	uxtb	r0, r0
 8013138:	4770      	bx	lr
 801313a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801313e:	2b05      	cmp	r3, #5
 8013140:	d801      	bhi.n	8013146 <__hexdig_fun+0x1a>
 8013142:	3847      	subs	r0, #71	; 0x47
 8013144:	e7f7      	b.n	8013136 <__hexdig_fun+0xa>
 8013146:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801314a:	2b05      	cmp	r3, #5
 801314c:	d801      	bhi.n	8013152 <__hexdig_fun+0x26>
 801314e:	3827      	subs	r0, #39	; 0x27
 8013150:	e7f1      	b.n	8013136 <__hexdig_fun+0xa>
 8013152:	2000      	movs	r0, #0
 8013154:	4770      	bx	lr

08013156 <__gethex>:
 8013156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801315a:	b08b      	sub	sp, #44	; 0x2c
 801315c:	468a      	mov	sl, r1
 801315e:	9002      	str	r0, [sp, #8]
 8013160:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013162:	9306      	str	r3, [sp, #24]
 8013164:	4690      	mov	r8, r2
 8013166:	f000 fadf 	bl	8013728 <__localeconv_l>
 801316a:	6803      	ldr	r3, [r0, #0]
 801316c:	9303      	str	r3, [sp, #12]
 801316e:	4618      	mov	r0, r3
 8013170:	f7ed f838 	bl	80001e4 <strlen>
 8013174:	9b03      	ldr	r3, [sp, #12]
 8013176:	9001      	str	r0, [sp, #4]
 8013178:	4403      	add	r3, r0
 801317a:	f04f 0b00 	mov.w	fp, #0
 801317e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013182:	9307      	str	r3, [sp, #28]
 8013184:	f8da 3000 	ldr.w	r3, [sl]
 8013188:	3302      	adds	r3, #2
 801318a:	461f      	mov	r7, r3
 801318c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013190:	2830      	cmp	r0, #48	; 0x30
 8013192:	d06c      	beq.n	801326e <__gethex+0x118>
 8013194:	f7ff ffca 	bl	801312c <__hexdig_fun>
 8013198:	4604      	mov	r4, r0
 801319a:	2800      	cmp	r0, #0
 801319c:	d16a      	bne.n	8013274 <__gethex+0x11e>
 801319e:	9a01      	ldr	r2, [sp, #4]
 80131a0:	9903      	ldr	r1, [sp, #12]
 80131a2:	4638      	mov	r0, r7
 80131a4:	f001 fb78 	bl	8014898 <strncmp>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d166      	bne.n	801327a <__gethex+0x124>
 80131ac:	9b01      	ldr	r3, [sp, #4]
 80131ae:	5cf8      	ldrb	r0, [r7, r3]
 80131b0:	18fe      	adds	r6, r7, r3
 80131b2:	f7ff ffbb 	bl	801312c <__hexdig_fun>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d062      	beq.n	8013280 <__gethex+0x12a>
 80131ba:	4633      	mov	r3, r6
 80131bc:	7818      	ldrb	r0, [r3, #0]
 80131be:	2830      	cmp	r0, #48	; 0x30
 80131c0:	461f      	mov	r7, r3
 80131c2:	f103 0301 	add.w	r3, r3, #1
 80131c6:	d0f9      	beq.n	80131bc <__gethex+0x66>
 80131c8:	f7ff ffb0 	bl	801312c <__hexdig_fun>
 80131cc:	fab0 f580 	clz	r5, r0
 80131d0:	096d      	lsrs	r5, r5, #5
 80131d2:	4634      	mov	r4, r6
 80131d4:	f04f 0b01 	mov.w	fp, #1
 80131d8:	463a      	mov	r2, r7
 80131da:	4616      	mov	r6, r2
 80131dc:	3201      	adds	r2, #1
 80131de:	7830      	ldrb	r0, [r6, #0]
 80131e0:	f7ff ffa4 	bl	801312c <__hexdig_fun>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d1f8      	bne.n	80131da <__gethex+0x84>
 80131e8:	9a01      	ldr	r2, [sp, #4]
 80131ea:	9903      	ldr	r1, [sp, #12]
 80131ec:	4630      	mov	r0, r6
 80131ee:	f001 fb53 	bl	8014898 <strncmp>
 80131f2:	b950      	cbnz	r0, 801320a <__gethex+0xb4>
 80131f4:	b954      	cbnz	r4, 801320c <__gethex+0xb6>
 80131f6:	9b01      	ldr	r3, [sp, #4]
 80131f8:	18f4      	adds	r4, r6, r3
 80131fa:	4622      	mov	r2, r4
 80131fc:	4616      	mov	r6, r2
 80131fe:	3201      	adds	r2, #1
 8013200:	7830      	ldrb	r0, [r6, #0]
 8013202:	f7ff ff93 	bl	801312c <__hexdig_fun>
 8013206:	2800      	cmp	r0, #0
 8013208:	d1f8      	bne.n	80131fc <__gethex+0xa6>
 801320a:	b10c      	cbz	r4, 8013210 <__gethex+0xba>
 801320c:	1ba4      	subs	r4, r4, r6
 801320e:	00a4      	lsls	r4, r4, #2
 8013210:	7833      	ldrb	r3, [r6, #0]
 8013212:	2b50      	cmp	r3, #80	; 0x50
 8013214:	d001      	beq.n	801321a <__gethex+0xc4>
 8013216:	2b70      	cmp	r3, #112	; 0x70
 8013218:	d140      	bne.n	801329c <__gethex+0x146>
 801321a:	7873      	ldrb	r3, [r6, #1]
 801321c:	2b2b      	cmp	r3, #43	; 0x2b
 801321e:	d031      	beq.n	8013284 <__gethex+0x12e>
 8013220:	2b2d      	cmp	r3, #45	; 0x2d
 8013222:	d033      	beq.n	801328c <__gethex+0x136>
 8013224:	1c71      	adds	r1, r6, #1
 8013226:	f04f 0900 	mov.w	r9, #0
 801322a:	7808      	ldrb	r0, [r1, #0]
 801322c:	f7ff ff7e 	bl	801312c <__hexdig_fun>
 8013230:	1e43      	subs	r3, r0, #1
 8013232:	b2db      	uxtb	r3, r3
 8013234:	2b18      	cmp	r3, #24
 8013236:	d831      	bhi.n	801329c <__gethex+0x146>
 8013238:	f1a0 0210 	sub.w	r2, r0, #16
 801323c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013240:	f7ff ff74 	bl	801312c <__hexdig_fun>
 8013244:	1e43      	subs	r3, r0, #1
 8013246:	b2db      	uxtb	r3, r3
 8013248:	2b18      	cmp	r3, #24
 801324a:	d922      	bls.n	8013292 <__gethex+0x13c>
 801324c:	f1b9 0f00 	cmp.w	r9, #0
 8013250:	d000      	beq.n	8013254 <__gethex+0xfe>
 8013252:	4252      	negs	r2, r2
 8013254:	4414      	add	r4, r2
 8013256:	f8ca 1000 	str.w	r1, [sl]
 801325a:	b30d      	cbz	r5, 80132a0 <__gethex+0x14a>
 801325c:	f1bb 0f00 	cmp.w	fp, #0
 8013260:	bf0c      	ite	eq
 8013262:	2706      	moveq	r7, #6
 8013264:	2700      	movne	r7, #0
 8013266:	4638      	mov	r0, r7
 8013268:	b00b      	add	sp, #44	; 0x2c
 801326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326e:	f10b 0b01 	add.w	fp, fp, #1
 8013272:	e78a      	b.n	801318a <__gethex+0x34>
 8013274:	2500      	movs	r5, #0
 8013276:	462c      	mov	r4, r5
 8013278:	e7ae      	b.n	80131d8 <__gethex+0x82>
 801327a:	463e      	mov	r6, r7
 801327c:	2501      	movs	r5, #1
 801327e:	e7c7      	b.n	8013210 <__gethex+0xba>
 8013280:	4604      	mov	r4, r0
 8013282:	e7fb      	b.n	801327c <__gethex+0x126>
 8013284:	f04f 0900 	mov.w	r9, #0
 8013288:	1cb1      	adds	r1, r6, #2
 801328a:	e7ce      	b.n	801322a <__gethex+0xd4>
 801328c:	f04f 0901 	mov.w	r9, #1
 8013290:	e7fa      	b.n	8013288 <__gethex+0x132>
 8013292:	230a      	movs	r3, #10
 8013294:	fb03 0202 	mla	r2, r3, r2, r0
 8013298:	3a10      	subs	r2, #16
 801329a:	e7cf      	b.n	801323c <__gethex+0xe6>
 801329c:	4631      	mov	r1, r6
 801329e:	e7da      	b.n	8013256 <__gethex+0x100>
 80132a0:	1bf3      	subs	r3, r6, r7
 80132a2:	3b01      	subs	r3, #1
 80132a4:	4629      	mov	r1, r5
 80132a6:	2b07      	cmp	r3, #7
 80132a8:	dc49      	bgt.n	801333e <__gethex+0x1e8>
 80132aa:	9802      	ldr	r0, [sp, #8]
 80132ac:	f000 fa60 	bl	8013770 <_Balloc>
 80132b0:	9b01      	ldr	r3, [sp, #4]
 80132b2:	f100 0914 	add.w	r9, r0, #20
 80132b6:	f04f 0b00 	mov.w	fp, #0
 80132ba:	f1c3 0301 	rsb	r3, r3, #1
 80132be:	4605      	mov	r5, r0
 80132c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80132c4:	46da      	mov	sl, fp
 80132c6:	9308      	str	r3, [sp, #32]
 80132c8:	42b7      	cmp	r7, r6
 80132ca:	d33b      	bcc.n	8013344 <__gethex+0x1ee>
 80132cc:	9804      	ldr	r0, [sp, #16]
 80132ce:	f840 ab04 	str.w	sl, [r0], #4
 80132d2:	eba0 0009 	sub.w	r0, r0, r9
 80132d6:	1080      	asrs	r0, r0, #2
 80132d8:	6128      	str	r0, [r5, #16]
 80132da:	0147      	lsls	r7, r0, #5
 80132dc:	4650      	mov	r0, sl
 80132de:	f000 fb0b 	bl	80138f8 <__hi0bits>
 80132e2:	f8d8 6000 	ldr.w	r6, [r8]
 80132e6:	1a3f      	subs	r7, r7, r0
 80132e8:	42b7      	cmp	r7, r6
 80132ea:	dd64      	ble.n	80133b6 <__gethex+0x260>
 80132ec:	1bbf      	subs	r7, r7, r6
 80132ee:	4639      	mov	r1, r7
 80132f0:	4628      	mov	r0, r5
 80132f2:	f000 fe1b 	bl	8013f2c <__any_on>
 80132f6:	4682      	mov	sl, r0
 80132f8:	b178      	cbz	r0, 801331a <__gethex+0x1c4>
 80132fa:	1e7b      	subs	r3, r7, #1
 80132fc:	1159      	asrs	r1, r3, #5
 80132fe:	f003 021f 	and.w	r2, r3, #31
 8013302:	f04f 0a01 	mov.w	sl, #1
 8013306:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801330a:	fa0a f202 	lsl.w	r2, sl, r2
 801330e:	420a      	tst	r2, r1
 8013310:	d003      	beq.n	801331a <__gethex+0x1c4>
 8013312:	4553      	cmp	r3, sl
 8013314:	dc46      	bgt.n	80133a4 <__gethex+0x24e>
 8013316:	f04f 0a02 	mov.w	sl, #2
 801331a:	4639      	mov	r1, r7
 801331c:	4628      	mov	r0, r5
 801331e:	f7ff fecb 	bl	80130b8 <rshift>
 8013322:	443c      	add	r4, r7
 8013324:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013328:	42a3      	cmp	r3, r4
 801332a:	da52      	bge.n	80133d2 <__gethex+0x27c>
 801332c:	4629      	mov	r1, r5
 801332e:	9802      	ldr	r0, [sp, #8]
 8013330:	f000 fa52 	bl	80137d8 <_Bfree>
 8013334:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013336:	2300      	movs	r3, #0
 8013338:	6013      	str	r3, [r2, #0]
 801333a:	27a3      	movs	r7, #163	; 0xa3
 801333c:	e793      	b.n	8013266 <__gethex+0x110>
 801333e:	3101      	adds	r1, #1
 8013340:	105b      	asrs	r3, r3, #1
 8013342:	e7b0      	b.n	80132a6 <__gethex+0x150>
 8013344:	1e73      	subs	r3, r6, #1
 8013346:	9305      	str	r3, [sp, #20]
 8013348:	9a07      	ldr	r2, [sp, #28]
 801334a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801334e:	4293      	cmp	r3, r2
 8013350:	d018      	beq.n	8013384 <__gethex+0x22e>
 8013352:	f1bb 0f20 	cmp.w	fp, #32
 8013356:	d107      	bne.n	8013368 <__gethex+0x212>
 8013358:	9b04      	ldr	r3, [sp, #16]
 801335a:	f8c3 a000 	str.w	sl, [r3]
 801335e:	3304      	adds	r3, #4
 8013360:	f04f 0a00 	mov.w	sl, #0
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	46d3      	mov	fp, sl
 8013368:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801336c:	f7ff fede 	bl	801312c <__hexdig_fun>
 8013370:	f000 000f 	and.w	r0, r0, #15
 8013374:	fa00 f00b 	lsl.w	r0, r0, fp
 8013378:	ea4a 0a00 	orr.w	sl, sl, r0
 801337c:	f10b 0b04 	add.w	fp, fp, #4
 8013380:	9b05      	ldr	r3, [sp, #20]
 8013382:	e00d      	b.n	80133a0 <__gethex+0x24a>
 8013384:	9b05      	ldr	r3, [sp, #20]
 8013386:	9a08      	ldr	r2, [sp, #32]
 8013388:	4413      	add	r3, r2
 801338a:	42bb      	cmp	r3, r7
 801338c:	d3e1      	bcc.n	8013352 <__gethex+0x1fc>
 801338e:	4618      	mov	r0, r3
 8013390:	9a01      	ldr	r2, [sp, #4]
 8013392:	9903      	ldr	r1, [sp, #12]
 8013394:	9309      	str	r3, [sp, #36]	; 0x24
 8013396:	f001 fa7f 	bl	8014898 <strncmp>
 801339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339c:	2800      	cmp	r0, #0
 801339e:	d1d8      	bne.n	8013352 <__gethex+0x1fc>
 80133a0:	461e      	mov	r6, r3
 80133a2:	e791      	b.n	80132c8 <__gethex+0x172>
 80133a4:	1eb9      	subs	r1, r7, #2
 80133a6:	4628      	mov	r0, r5
 80133a8:	f000 fdc0 	bl	8013f2c <__any_on>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d0b2      	beq.n	8013316 <__gethex+0x1c0>
 80133b0:	f04f 0a03 	mov.w	sl, #3
 80133b4:	e7b1      	b.n	801331a <__gethex+0x1c4>
 80133b6:	da09      	bge.n	80133cc <__gethex+0x276>
 80133b8:	1bf7      	subs	r7, r6, r7
 80133ba:	4629      	mov	r1, r5
 80133bc:	463a      	mov	r2, r7
 80133be:	9802      	ldr	r0, [sp, #8]
 80133c0:	f000 fbd6 	bl	8013b70 <__lshift>
 80133c4:	1be4      	subs	r4, r4, r7
 80133c6:	4605      	mov	r5, r0
 80133c8:	f100 0914 	add.w	r9, r0, #20
 80133cc:	f04f 0a00 	mov.w	sl, #0
 80133d0:	e7a8      	b.n	8013324 <__gethex+0x1ce>
 80133d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80133d6:	42a0      	cmp	r0, r4
 80133d8:	dd6a      	ble.n	80134b0 <__gethex+0x35a>
 80133da:	1b04      	subs	r4, r0, r4
 80133dc:	42a6      	cmp	r6, r4
 80133de:	dc2e      	bgt.n	801343e <__gethex+0x2e8>
 80133e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	d022      	beq.n	801342e <__gethex+0x2d8>
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d024      	beq.n	8013436 <__gethex+0x2e0>
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d115      	bne.n	801341c <__gethex+0x2c6>
 80133f0:	42a6      	cmp	r6, r4
 80133f2:	d113      	bne.n	801341c <__gethex+0x2c6>
 80133f4:	2e01      	cmp	r6, #1
 80133f6:	dc0b      	bgt.n	8013410 <__gethex+0x2ba>
 80133f8:	9a06      	ldr	r2, [sp, #24]
 80133fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133fe:	6013      	str	r3, [r2, #0]
 8013400:	2301      	movs	r3, #1
 8013402:	612b      	str	r3, [r5, #16]
 8013404:	f8c9 3000 	str.w	r3, [r9]
 8013408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801340a:	2762      	movs	r7, #98	; 0x62
 801340c:	601d      	str	r5, [r3, #0]
 801340e:	e72a      	b.n	8013266 <__gethex+0x110>
 8013410:	1e71      	subs	r1, r6, #1
 8013412:	4628      	mov	r0, r5
 8013414:	f000 fd8a 	bl	8013f2c <__any_on>
 8013418:	2800      	cmp	r0, #0
 801341a:	d1ed      	bne.n	80133f8 <__gethex+0x2a2>
 801341c:	4629      	mov	r1, r5
 801341e:	9802      	ldr	r0, [sp, #8]
 8013420:	f000 f9da 	bl	80137d8 <_Bfree>
 8013424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013426:	2300      	movs	r3, #0
 8013428:	6013      	str	r3, [r2, #0]
 801342a:	2750      	movs	r7, #80	; 0x50
 801342c:	e71b      	b.n	8013266 <__gethex+0x110>
 801342e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013430:	2b00      	cmp	r3, #0
 8013432:	d0e1      	beq.n	80133f8 <__gethex+0x2a2>
 8013434:	e7f2      	b.n	801341c <__gethex+0x2c6>
 8013436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013438:	2b00      	cmp	r3, #0
 801343a:	d1dd      	bne.n	80133f8 <__gethex+0x2a2>
 801343c:	e7ee      	b.n	801341c <__gethex+0x2c6>
 801343e:	1e67      	subs	r7, r4, #1
 8013440:	f1ba 0f00 	cmp.w	sl, #0
 8013444:	d131      	bne.n	80134aa <__gethex+0x354>
 8013446:	b127      	cbz	r7, 8013452 <__gethex+0x2fc>
 8013448:	4639      	mov	r1, r7
 801344a:	4628      	mov	r0, r5
 801344c:	f000 fd6e 	bl	8013f2c <__any_on>
 8013450:	4682      	mov	sl, r0
 8013452:	117a      	asrs	r2, r7, #5
 8013454:	2301      	movs	r3, #1
 8013456:	f007 071f 	and.w	r7, r7, #31
 801345a:	fa03 f707 	lsl.w	r7, r3, r7
 801345e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013462:	4621      	mov	r1, r4
 8013464:	421f      	tst	r7, r3
 8013466:	4628      	mov	r0, r5
 8013468:	bf18      	it	ne
 801346a:	f04a 0a02 	orrne.w	sl, sl, #2
 801346e:	1b36      	subs	r6, r6, r4
 8013470:	f7ff fe22 	bl	80130b8 <rshift>
 8013474:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013478:	2702      	movs	r7, #2
 801347a:	f1ba 0f00 	cmp.w	sl, #0
 801347e:	d048      	beq.n	8013512 <__gethex+0x3bc>
 8013480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013484:	2b02      	cmp	r3, #2
 8013486:	d015      	beq.n	80134b4 <__gethex+0x35e>
 8013488:	2b03      	cmp	r3, #3
 801348a:	d017      	beq.n	80134bc <__gethex+0x366>
 801348c:	2b01      	cmp	r3, #1
 801348e:	d109      	bne.n	80134a4 <__gethex+0x34e>
 8013490:	f01a 0f02 	tst.w	sl, #2
 8013494:	d006      	beq.n	80134a4 <__gethex+0x34e>
 8013496:	f8d9 3000 	ldr.w	r3, [r9]
 801349a:	ea4a 0a03 	orr.w	sl, sl, r3
 801349e:	f01a 0f01 	tst.w	sl, #1
 80134a2:	d10e      	bne.n	80134c2 <__gethex+0x36c>
 80134a4:	f047 0710 	orr.w	r7, r7, #16
 80134a8:	e033      	b.n	8013512 <__gethex+0x3bc>
 80134aa:	f04f 0a01 	mov.w	sl, #1
 80134ae:	e7d0      	b.n	8013452 <__gethex+0x2fc>
 80134b0:	2701      	movs	r7, #1
 80134b2:	e7e2      	b.n	801347a <__gethex+0x324>
 80134b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134b6:	f1c3 0301 	rsb	r3, r3, #1
 80134ba:	9315      	str	r3, [sp, #84]	; 0x54
 80134bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0f0      	beq.n	80134a4 <__gethex+0x34e>
 80134c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80134c6:	f105 0314 	add.w	r3, r5, #20
 80134ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80134ce:	eb03 010a 	add.w	r1, r3, sl
 80134d2:	f04f 0c00 	mov.w	ip, #0
 80134d6:	4618      	mov	r0, r3
 80134d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80134dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80134e0:	d01c      	beq.n	801351c <__gethex+0x3c6>
 80134e2:	3201      	adds	r2, #1
 80134e4:	6002      	str	r2, [r0, #0]
 80134e6:	2f02      	cmp	r7, #2
 80134e8:	f105 0314 	add.w	r3, r5, #20
 80134ec:	d138      	bne.n	8013560 <__gethex+0x40a>
 80134ee:	f8d8 2000 	ldr.w	r2, [r8]
 80134f2:	3a01      	subs	r2, #1
 80134f4:	42b2      	cmp	r2, r6
 80134f6:	d10a      	bne.n	801350e <__gethex+0x3b8>
 80134f8:	1171      	asrs	r1, r6, #5
 80134fa:	2201      	movs	r2, #1
 80134fc:	f006 061f 	and.w	r6, r6, #31
 8013500:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013504:	fa02 f606 	lsl.w	r6, r2, r6
 8013508:	421e      	tst	r6, r3
 801350a:	bf18      	it	ne
 801350c:	4617      	movne	r7, r2
 801350e:	f047 0720 	orr.w	r7, r7, #32
 8013512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013514:	601d      	str	r5, [r3, #0]
 8013516:	9b06      	ldr	r3, [sp, #24]
 8013518:	601c      	str	r4, [r3, #0]
 801351a:	e6a4      	b.n	8013266 <__gethex+0x110>
 801351c:	4299      	cmp	r1, r3
 801351e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013522:	d8d8      	bhi.n	80134d6 <__gethex+0x380>
 8013524:	68ab      	ldr	r3, [r5, #8]
 8013526:	4599      	cmp	r9, r3
 8013528:	db12      	blt.n	8013550 <__gethex+0x3fa>
 801352a:	6869      	ldr	r1, [r5, #4]
 801352c:	9802      	ldr	r0, [sp, #8]
 801352e:	3101      	adds	r1, #1
 8013530:	f000 f91e 	bl	8013770 <_Balloc>
 8013534:	692a      	ldr	r2, [r5, #16]
 8013536:	3202      	adds	r2, #2
 8013538:	f105 010c 	add.w	r1, r5, #12
 801353c:	4683      	mov	fp, r0
 801353e:	0092      	lsls	r2, r2, #2
 8013540:	300c      	adds	r0, #12
 8013542:	f7fd f90d 	bl	8010760 <memcpy>
 8013546:	4629      	mov	r1, r5
 8013548:	9802      	ldr	r0, [sp, #8]
 801354a:	f000 f945 	bl	80137d8 <_Bfree>
 801354e:	465d      	mov	r5, fp
 8013550:	692b      	ldr	r3, [r5, #16]
 8013552:	1c5a      	adds	r2, r3, #1
 8013554:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013558:	612a      	str	r2, [r5, #16]
 801355a:	2201      	movs	r2, #1
 801355c:	615a      	str	r2, [r3, #20]
 801355e:	e7c2      	b.n	80134e6 <__gethex+0x390>
 8013560:	692a      	ldr	r2, [r5, #16]
 8013562:	454a      	cmp	r2, r9
 8013564:	dd0b      	ble.n	801357e <__gethex+0x428>
 8013566:	2101      	movs	r1, #1
 8013568:	4628      	mov	r0, r5
 801356a:	f7ff fda5 	bl	80130b8 <rshift>
 801356e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013572:	3401      	adds	r4, #1
 8013574:	42a3      	cmp	r3, r4
 8013576:	f6ff aed9 	blt.w	801332c <__gethex+0x1d6>
 801357a:	2701      	movs	r7, #1
 801357c:	e7c7      	b.n	801350e <__gethex+0x3b8>
 801357e:	f016 061f 	ands.w	r6, r6, #31
 8013582:	d0fa      	beq.n	801357a <__gethex+0x424>
 8013584:	449a      	add	sl, r3
 8013586:	f1c6 0620 	rsb	r6, r6, #32
 801358a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801358e:	f000 f9b3 	bl	80138f8 <__hi0bits>
 8013592:	42b0      	cmp	r0, r6
 8013594:	dbe7      	blt.n	8013566 <__gethex+0x410>
 8013596:	e7f0      	b.n	801357a <__gethex+0x424>

08013598 <L_shift>:
 8013598:	f1c2 0208 	rsb	r2, r2, #8
 801359c:	0092      	lsls	r2, r2, #2
 801359e:	b570      	push	{r4, r5, r6, lr}
 80135a0:	f1c2 0620 	rsb	r6, r2, #32
 80135a4:	6843      	ldr	r3, [r0, #4]
 80135a6:	6804      	ldr	r4, [r0, #0]
 80135a8:	fa03 f506 	lsl.w	r5, r3, r6
 80135ac:	432c      	orrs	r4, r5
 80135ae:	40d3      	lsrs	r3, r2
 80135b0:	6004      	str	r4, [r0, #0]
 80135b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80135b6:	4288      	cmp	r0, r1
 80135b8:	d3f4      	bcc.n	80135a4 <L_shift+0xc>
 80135ba:	bd70      	pop	{r4, r5, r6, pc}

080135bc <__match>:
 80135bc:	b530      	push	{r4, r5, lr}
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	3301      	adds	r3, #1
 80135c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135c6:	b914      	cbnz	r4, 80135ce <__match+0x12>
 80135c8:	6003      	str	r3, [r0, #0]
 80135ca:	2001      	movs	r0, #1
 80135cc:	bd30      	pop	{r4, r5, pc}
 80135ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80135d6:	2d19      	cmp	r5, #25
 80135d8:	bf98      	it	ls
 80135da:	3220      	addls	r2, #32
 80135dc:	42a2      	cmp	r2, r4
 80135de:	d0f0      	beq.n	80135c2 <__match+0x6>
 80135e0:	2000      	movs	r0, #0
 80135e2:	e7f3      	b.n	80135cc <__match+0x10>

080135e4 <__hexnan>:
 80135e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e8:	680b      	ldr	r3, [r1, #0]
 80135ea:	6801      	ldr	r1, [r0, #0]
 80135ec:	115f      	asrs	r7, r3, #5
 80135ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80135f2:	f013 031f 	ands.w	r3, r3, #31
 80135f6:	b087      	sub	sp, #28
 80135f8:	bf18      	it	ne
 80135fa:	3704      	addne	r7, #4
 80135fc:	2500      	movs	r5, #0
 80135fe:	1f3e      	subs	r6, r7, #4
 8013600:	4682      	mov	sl, r0
 8013602:	4690      	mov	r8, r2
 8013604:	9301      	str	r3, [sp, #4]
 8013606:	f847 5c04 	str.w	r5, [r7, #-4]
 801360a:	46b1      	mov	r9, r6
 801360c:	4634      	mov	r4, r6
 801360e:	9502      	str	r5, [sp, #8]
 8013610:	46ab      	mov	fp, r5
 8013612:	784a      	ldrb	r2, [r1, #1]
 8013614:	1c4b      	adds	r3, r1, #1
 8013616:	9303      	str	r3, [sp, #12]
 8013618:	b342      	cbz	r2, 801366c <__hexnan+0x88>
 801361a:	4610      	mov	r0, r2
 801361c:	9105      	str	r1, [sp, #20]
 801361e:	9204      	str	r2, [sp, #16]
 8013620:	f7ff fd84 	bl	801312c <__hexdig_fun>
 8013624:	2800      	cmp	r0, #0
 8013626:	d143      	bne.n	80136b0 <__hexnan+0xcc>
 8013628:	9a04      	ldr	r2, [sp, #16]
 801362a:	9905      	ldr	r1, [sp, #20]
 801362c:	2a20      	cmp	r2, #32
 801362e:	d818      	bhi.n	8013662 <__hexnan+0x7e>
 8013630:	9b02      	ldr	r3, [sp, #8]
 8013632:	459b      	cmp	fp, r3
 8013634:	dd13      	ble.n	801365e <__hexnan+0x7a>
 8013636:	454c      	cmp	r4, r9
 8013638:	d206      	bcs.n	8013648 <__hexnan+0x64>
 801363a:	2d07      	cmp	r5, #7
 801363c:	dc04      	bgt.n	8013648 <__hexnan+0x64>
 801363e:	462a      	mov	r2, r5
 8013640:	4649      	mov	r1, r9
 8013642:	4620      	mov	r0, r4
 8013644:	f7ff ffa8 	bl	8013598 <L_shift>
 8013648:	4544      	cmp	r4, r8
 801364a:	d944      	bls.n	80136d6 <__hexnan+0xf2>
 801364c:	2300      	movs	r3, #0
 801364e:	f1a4 0904 	sub.w	r9, r4, #4
 8013652:	f844 3c04 	str.w	r3, [r4, #-4]
 8013656:	f8cd b008 	str.w	fp, [sp, #8]
 801365a:	464c      	mov	r4, r9
 801365c:	461d      	mov	r5, r3
 801365e:	9903      	ldr	r1, [sp, #12]
 8013660:	e7d7      	b.n	8013612 <__hexnan+0x2e>
 8013662:	2a29      	cmp	r2, #41	; 0x29
 8013664:	d14a      	bne.n	80136fc <__hexnan+0x118>
 8013666:	3102      	adds	r1, #2
 8013668:	f8ca 1000 	str.w	r1, [sl]
 801366c:	f1bb 0f00 	cmp.w	fp, #0
 8013670:	d044      	beq.n	80136fc <__hexnan+0x118>
 8013672:	454c      	cmp	r4, r9
 8013674:	d206      	bcs.n	8013684 <__hexnan+0xa0>
 8013676:	2d07      	cmp	r5, #7
 8013678:	dc04      	bgt.n	8013684 <__hexnan+0xa0>
 801367a:	462a      	mov	r2, r5
 801367c:	4649      	mov	r1, r9
 801367e:	4620      	mov	r0, r4
 8013680:	f7ff ff8a 	bl	8013598 <L_shift>
 8013684:	4544      	cmp	r4, r8
 8013686:	d928      	bls.n	80136da <__hexnan+0xf6>
 8013688:	4643      	mov	r3, r8
 801368a:	f854 2b04 	ldr.w	r2, [r4], #4
 801368e:	f843 2b04 	str.w	r2, [r3], #4
 8013692:	42a6      	cmp	r6, r4
 8013694:	d2f9      	bcs.n	801368a <__hexnan+0xa6>
 8013696:	2200      	movs	r2, #0
 8013698:	f843 2b04 	str.w	r2, [r3], #4
 801369c:	429e      	cmp	r6, r3
 801369e:	d2fb      	bcs.n	8013698 <__hexnan+0xb4>
 80136a0:	6833      	ldr	r3, [r6, #0]
 80136a2:	b91b      	cbnz	r3, 80136ac <__hexnan+0xc8>
 80136a4:	4546      	cmp	r6, r8
 80136a6:	d127      	bne.n	80136f8 <__hexnan+0x114>
 80136a8:	2301      	movs	r3, #1
 80136aa:	6033      	str	r3, [r6, #0]
 80136ac:	2005      	movs	r0, #5
 80136ae:	e026      	b.n	80136fe <__hexnan+0x11a>
 80136b0:	3501      	adds	r5, #1
 80136b2:	2d08      	cmp	r5, #8
 80136b4:	f10b 0b01 	add.w	fp, fp, #1
 80136b8:	dd06      	ble.n	80136c8 <__hexnan+0xe4>
 80136ba:	4544      	cmp	r4, r8
 80136bc:	d9cf      	bls.n	801365e <__hexnan+0x7a>
 80136be:	2300      	movs	r3, #0
 80136c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80136c4:	2501      	movs	r5, #1
 80136c6:	3c04      	subs	r4, #4
 80136c8:	6822      	ldr	r2, [r4, #0]
 80136ca:	f000 000f 	and.w	r0, r0, #15
 80136ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80136d2:	6020      	str	r0, [r4, #0]
 80136d4:	e7c3      	b.n	801365e <__hexnan+0x7a>
 80136d6:	2508      	movs	r5, #8
 80136d8:	e7c1      	b.n	801365e <__hexnan+0x7a>
 80136da:	9b01      	ldr	r3, [sp, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d0df      	beq.n	80136a0 <__hexnan+0xbc>
 80136e0:	f04f 32ff 	mov.w	r2, #4294967295
 80136e4:	f1c3 0320 	rsb	r3, r3, #32
 80136e8:	fa22 f303 	lsr.w	r3, r2, r3
 80136ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80136f0:	401a      	ands	r2, r3
 80136f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80136f6:	e7d3      	b.n	80136a0 <__hexnan+0xbc>
 80136f8:	3e04      	subs	r6, #4
 80136fa:	e7d1      	b.n	80136a0 <__hexnan+0xbc>
 80136fc:	2004      	movs	r0, #4
 80136fe:	b007      	add	sp, #28
 8013700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013704 <__locale_ctype_ptr_l>:
 8013704:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013708:	4770      	bx	lr
	...

0801370c <__locale_ctype_ptr>:
 801370c:	4b04      	ldr	r3, [pc, #16]	; (8013720 <__locale_ctype_ptr+0x14>)
 801370e:	4a05      	ldr	r2, [pc, #20]	; (8013724 <__locale_ctype_ptr+0x18>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	6a1b      	ldr	r3, [r3, #32]
 8013714:	2b00      	cmp	r3, #0
 8013716:	bf08      	it	eq
 8013718:	4613      	moveq	r3, r2
 801371a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801371e:	4770      	bx	lr
 8013720:	20000e34 	.word	0x20000e34
 8013724:	20000e98 	.word	0x20000e98

08013728 <__localeconv_l>:
 8013728:	30f0      	adds	r0, #240	; 0xf0
 801372a:	4770      	bx	lr

0801372c <_localeconv_r>:
 801372c:	4b04      	ldr	r3, [pc, #16]	; (8013740 <_localeconv_r+0x14>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	6a18      	ldr	r0, [r3, #32]
 8013732:	4b04      	ldr	r3, [pc, #16]	; (8013744 <_localeconv_r+0x18>)
 8013734:	2800      	cmp	r0, #0
 8013736:	bf08      	it	eq
 8013738:	4618      	moveq	r0, r3
 801373a:	30f0      	adds	r0, #240	; 0xf0
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop
 8013740:	20000e34 	.word	0x20000e34
 8013744:	20000e98 	.word	0x20000e98

08013748 <__ascii_mbtowc>:
 8013748:	b082      	sub	sp, #8
 801374a:	b901      	cbnz	r1, 801374e <__ascii_mbtowc+0x6>
 801374c:	a901      	add	r1, sp, #4
 801374e:	b142      	cbz	r2, 8013762 <__ascii_mbtowc+0x1a>
 8013750:	b14b      	cbz	r3, 8013766 <__ascii_mbtowc+0x1e>
 8013752:	7813      	ldrb	r3, [r2, #0]
 8013754:	600b      	str	r3, [r1, #0]
 8013756:	7812      	ldrb	r2, [r2, #0]
 8013758:	1c10      	adds	r0, r2, #0
 801375a:	bf18      	it	ne
 801375c:	2001      	movne	r0, #1
 801375e:	b002      	add	sp, #8
 8013760:	4770      	bx	lr
 8013762:	4610      	mov	r0, r2
 8013764:	e7fb      	b.n	801375e <__ascii_mbtowc+0x16>
 8013766:	f06f 0001 	mvn.w	r0, #1
 801376a:	e7f8      	b.n	801375e <__ascii_mbtowc+0x16>

0801376c <__malloc_lock>:
 801376c:	4770      	bx	lr

0801376e <__malloc_unlock>:
 801376e:	4770      	bx	lr

08013770 <_Balloc>:
 8013770:	b570      	push	{r4, r5, r6, lr}
 8013772:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013774:	4604      	mov	r4, r0
 8013776:	460e      	mov	r6, r1
 8013778:	b93d      	cbnz	r5, 801378a <_Balloc+0x1a>
 801377a:	2010      	movs	r0, #16
 801377c:	f7fc ffe0 	bl	8010740 <malloc>
 8013780:	6260      	str	r0, [r4, #36]	; 0x24
 8013782:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013786:	6005      	str	r5, [r0, #0]
 8013788:	60c5      	str	r5, [r0, #12]
 801378a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801378c:	68eb      	ldr	r3, [r5, #12]
 801378e:	b183      	cbz	r3, 80137b2 <_Balloc+0x42>
 8013790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013798:	b9b8      	cbnz	r0, 80137ca <_Balloc+0x5a>
 801379a:	2101      	movs	r1, #1
 801379c:	fa01 f506 	lsl.w	r5, r1, r6
 80137a0:	1d6a      	adds	r2, r5, #5
 80137a2:	0092      	lsls	r2, r2, #2
 80137a4:	4620      	mov	r0, r4
 80137a6:	f000 fbe2 	bl	8013f6e <_calloc_r>
 80137aa:	b160      	cbz	r0, 80137c6 <_Balloc+0x56>
 80137ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80137b0:	e00e      	b.n	80137d0 <_Balloc+0x60>
 80137b2:	2221      	movs	r2, #33	; 0x21
 80137b4:	2104      	movs	r1, #4
 80137b6:	4620      	mov	r0, r4
 80137b8:	f000 fbd9 	bl	8013f6e <_calloc_r>
 80137bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137be:	60e8      	str	r0, [r5, #12]
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d1e4      	bne.n	8013790 <_Balloc+0x20>
 80137c6:	2000      	movs	r0, #0
 80137c8:	bd70      	pop	{r4, r5, r6, pc}
 80137ca:	6802      	ldr	r2, [r0, #0]
 80137cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80137d0:	2300      	movs	r3, #0
 80137d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137d6:	e7f7      	b.n	80137c8 <_Balloc+0x58>

080137d8 <_Bfree>:
 80137d8:	b570      	push	{r4, r5, r6, lr}
 80137da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80137dc:	4606      	mov	r6, r0
 80137de:	460d      	mov	r5, r1
 80137e0:	b93c      	cbnz	r4, 80137f2 <_Bfree+0x1a>
 80137e2:	2010      	movs	r0, #16
 80137e4:	f7fc ffac 	bl	8010740 <malloc>
 80137e8:	6270      	str	r0, [r6, #36]	; 0x24
 80137ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80137ee:	6004      	str	r4, [r0, #0]
 80137f0:	60c4      	str	r4, [r0, #12]
 80137f2:	b13d      	cbz	r5, 8013804 <_Bfree+0x2c>
 80137f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80137f6:	686a      	ldr	r2, [r5, #4]
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137fe:	6029      	str	r1, [r5, #0]
 8013800:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013804:	bd70      	pop	{r4, r5, r6, pc}

08013806 <__multadd>:
 8013806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380a:	690d      	ldr	r5, [r1, #16]
 801380c:	461f      	mov	r7, r3
 801380e:	4606      	mov	r6, r0
 8013810:	460c      	mov	r4, r1
 8013812:	f101 0c14 	add.w	ip, r1, #20
 8013816:	2300      	movs	r3, #0
 8013818:	f8dc 0000 	ldr.w	r0, [ip]
 801381c:	b281      	uxth	r1, r0
 801381e:	fb02 7101 	mla	r1, r2, r1, r7
 8013822:	0c0f      	lsrs	r7, r1, #16
 8013824:	0c00      	lsrs	r0, r0, #16
 8013826:	fb02 7000 	mla	r0, r2, r0, r7
 801382a:	b289      	uxth	r1, r1
 801382c:	3301      	adds	r3, #1
 801382e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013832:	429d      	cmp	r5, r3
 8013834:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013838:	f84c 1b04 	str.w	r1, [ip], #4
 801383c:	dcec      	bgt.n	8013818 <__multadd+0x12>
 801383e:	b1d7      	cbz	r7, 8013876 <__multadd+0x70>
 8013840:	68a3      	ldr	r3, [r4, #8]
 8013842:	42ab      	cmp	r3, r5
 8013844:	dc12      	bgt.n	801386c <__multadd+0x66>
 8013846:	6861      	ldr	r1, [r4, #4]
 8013848:	4630      	mov	r0, r6
 801384a:	3101      	adds	r1, #1
 801384c:	f7ff ff90 	bl	8013770 <_Balloc>
 8013850:	6922      	ldr	r2, [r4, #16]
 8013852:	3202      	adds	r2, #2
 8013854:	f104 010c 	add.w	r1, r4, #12
 8013858:	4680      	mov	r8, r0
 801385a:	0092      	lsls	r2, r2, #2
 801385c:	300c      	adds	r0, #12
 801385e:	f7fc ff7f 	bl	8010760 <memcpy>
 8013862:	4621      	mov	r1, r4
 8013864:	4630      	mov	r0, r6
 8013866:	f7ff ffb7 	bl	80137d8 <_Bfree>
 801386a:	4644      	mov	r4, r8
 801386c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013870:	3501      	adds	r5, #1
 8013872:	615f      	str	r7, [r3, #20]
 8013874:	6125      	str	r5, [r4, #16]
 8013876:	4620      	mov	r0, r4
 8013878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801387c <__s2b>:
 801387c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013880:	460c      	mov	r4, r1
 8013882:	4615      	mov	r5, r2
 8013884:	461f      	mov	r7, r3
 8013886:	2209      	movs	r2, #9
 8013888:	3308      	adds	r3, #8
 801388a:	4606      	mov	r6, r0
 801388c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013890:	2100      	movs	r1, #0
 8013892:	2201      	movs	r2, #1
 8013894:	429a      	cmp	r2, r3
 8013896:	db20      	blt.n	80138da <__s2b+0x5e>
 8013898:	4630      	mov	r0, r6
 801389a:	f7ff ff69 	bl	8013770 <_Balloc>
 801389e:	9b08      	ldr	r3, [sp, #32]
 80138a0:	6143      	str	r3, [r0, #20]
 80138a2:	2d09      	cmp	r5, #9
 80138a4:	f04f 0301 	mov.w	r3, #1
 80138a8:	6103      	str	r3, [r0, #16]
 80138aa:	dd19      	ble.n	80138e0 <__s2b+0x64>
 80138ac:	f104 0809 	add.w	r8, r4, #9
 80138b0:	46c1      	mov	r9, r8
 80138b2:	442c      	add	r4, r5
 80138b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80138b8:	4601      	mov	r1, r0
 80138ba:	3b30      	subs	r3, #48	; 0x30
 80138bc:	220a      	movs	r2, #10
 80138be:	4630      	mov	r0, r6
 80138c0:	f7ff ffa1 	bl	8013806 <__multadd>
 80138c4:	45a1      	cmp	r9, r4
 80138c6:	d1f5      	bne.n	80138b4 <__s2b+0x38>
 80138c8:	eb08 0405 	add.w	r4, r8, r5
 80138cc:	3c08      	subs	r4, #8
 80138ce:	1b2d      	subs	r5, r5, r4
 80138d0:	1963      	adds	r3, r4, r5
 80138d2:	42bb      	cmp	r3, r7
 80138d4:	db07      	blt.n	80138e6 <__s2b+0x6a>
 80138d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138da:	0052      	lsls	r2, r2, #1
 80138dc:	3101      	adds	r1, #1
 80138de:	e7d9      	b.n	8013894 <__s2b+0x18>
 80138e0:	340a      	adds	r4, #10
 80138e2:	2509      	movs	r5, #9
 80138e4:	e7f3      	b.n	80138ce <__s2b+0x52>
 80138e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138ea:	4601      	mov	r1, r0
 80138ec:	3b30      	subs	r3, #48	; 0x30
 80138ee:	220a      	movs	r2, #10
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff ff88 	bl	8013806 <__multadd>
 80138f6:	e7eb      	b.n	80138d0 <__s2b+0x54>

080138f8 <__hi0bits>:
 80138f8:	0c02      	lsrs	r2, r0, #16
 80138fa:	0412      	lsls	r2, r2, #16
 80138fc:	4603      	mov	r3, r0
 80138fe:	b9b2      	cbnz	r2, 801392e <__hi0bits+0x36>
 8013900:	0403      	lsls	r3, r0, #16
 8013902:	2010      	movs	r0, #16
 8013904:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013908:	bf04      	itt	eq
 801390a:	021b      	lsleq	r3, r3, #8
 801390c:	3008      	addeq	r0, #8
 801390e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013912:	bf04      	itt	eq
 8013914:	011b      	lsleq	r3, r3, #4
 8013916:	3004      	addeq	r0, #4
 8013918:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801391c:	bf04      	itt	eq
 801391e:	009b      	lsleq	r3, r3, #2
 8013920:	3002      	addeq	r0, #2
 8013922:	2b00      	cmp	r3, #0
 8013924:	db06      	blt.n	8013934 <__hi0bits+0x3c>
 8013926:	005b      	lsls	r3, r3, #1
 8013928:	d503      	bpl.n	8013932 <__hi0bits+0x3a>
 801392a:	3001      	adds	r0, #1
 801392c:	4770      	bx	lr
 801392e:	2000      	movs	r0, #0
 8013930:	e7e8      	b.n	8013904 <__hi0bits+0xc>
 8013932:	2020      	movs	r0, #32
 8013934:	4770      	bx	lr

08013936 <__lo0bits>:
 8013936:	6803      	ldr	r3, [r0, #0]
 8013938:	f013 0207 	ands.w	r2, r3, #7
 801393c:	4601      	mov	r1, r0
 801393e:	d00b      	beq.n	8013958 <__lo0bits+0x22>
 8013940:	07da      	lsls	r2, r3, #31
 8013942:	d423      	bmi.n	801398c <__lo0bits+0x56>
 8013944:	0798      	lsls	r0, r3, #30
 8013946:	bf49      	itett	mi
 8013948:	085b      	lsrmi	r3, r3, #1
 801394a:	089b      	lsrpl	r3, r3, #2
 801394c:	2001      	movmi	r0, #1
 801394e:	600b      	strmi	r3, [r1, #0]
 8013950:	bf5c      	itt	pl
 8013952:	600b      	strpl	r3, [r1, #0]
 8013954:	2002      	movpl	r0, #2
 8013956:	4770      	bx	lr
 8013958:	b298      	uxth	r0, r3
 801395a:	b9a8      	cbnz	r0, 8013988 <__lo0bits+0x52>
 801395c:	0c1b      	lsrs	r3, r3, #16
 801395e:	2010      	movs	r0, #16
 8013960:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013964:	bf04      	itt	eq
 8013966:	0a1b      	lsreq	r3, r3, #8
 8013968:	3008      	addeq	r0, #8
 801396a:	071a      	lsls	r2, r3, #28
 801396c:	bf04      	itt	eq
 801396e:	091b      	lsreq	r3, r3, #4
 8013970:	3004      	addeq	r0, #4
 8013972:	079a      	lsls	r2, r3, #30
 8013974:	bf04      	itt	eq
 8013976:	089b      	lsreq	r3, r3, #2
 8013978:	3002      	addeq	r0, #2
 801397a:	07da      	lsls	r2, r3, #31
 801397c:	d402      	bmi.n	8013984 <__lo0bits+0x4e>
 801397e:	085b      	lsrs	r3, r3, #1
 8013980:	d006      	beq.n	8013990 <__lo0bits+0x5a>
 8013982:	3001      	adds	r0, #1
 8013984:	600b      	str	r3, [r1, #0]
 8013986:	4770      	bx	lr
 8013988:	4610      	mov	r0, r2
 801398a:	e7e9      	b.n	8013960 <__lo0bits+0x2a>
 801398c:	2000      	movs	r0, #0
 801398e:	4770      	bx	lr
 8013990:	2020      	movs	r0, #32
 8013992:	4770      	bx	lr

08013994 <__i2b>:
 8013994:	b510      	push	{r4, lr}
 8013996:	460c      	mov	r4, r1
 8013998:	2101      	movs	r1, #1
 801399a:	f7ff fee9 	bl	8013770 <_Balloc>
 801399e:	2201      	movs	r2, #1
 80139a0:	6144      	str	r4, [r0, #20]
 80139a2:	6102      	str	r2, [r0, #16]
 80139a4:	bd10      	pop	{r4, pc}

080139a6 <__multiply>:
 80139a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139aa:	4614      	mov	r4, r2
 80139ac:	690a      	ldr	r2, [r1, #16]
 80139ae:	6923      	ldr	r3, [r4, #16]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	bfb8      	it	lt
 80139b4:	460b      	movlt	r3, r1
 80139b6:	4688      	mov	r8, r1
 80139b8:	bfbc      	itt	lt
 80139ba:	46a0      	movlt	r8, r4
 80139bc:	461c      	movlt	r4, r3
 80139be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80139c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80139c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80139ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80139ce:	eb07 0609 	add.w	r6, r7, r9
 80139d2:	42b3      	cmp	r3, r6
 80139d4:	bfb8      	it	lt
 80139d6:	3101      	addlt	r1, #1
 80139d8:	f7ff feca 	bl	8013770 <_Balloc>
 80139dc:	f100 0514 	add.w	r5, r0, #20
 80139e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80139e4:	462b      	mov	r3, r5
 80139e6:	2200      	movs	r2, #0
 80139e8:	4573      	cmp	r3, lr
 80139ea:	d316      	bcc.n	8013a1a <__multiply+0x74>
 80139ec:	f104 0214 	add.w	r2, r4, #20
 80139f0:	f108 0114 	add.w	r1, r8, #20
 80139f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80139f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	9b00      	ldr	r3, [sp, #0]
 8013a00:	9201      	str	r2, [sp, #4]
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d80c      	bhi.n	8013a20 <__multiply+0x7a>
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	dd03      	ble.n	8013a12 <__multiply+0x6c>
 8013a0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d05d      	beq.n	8013ace <__multiply+0x128>
 8013a12:	6106      	str	r6, [r0, #16]
 8013a14:	b003      	add	sp, #12
 8013a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1a:	f843 2b04 	str.w	r2, [r3], #4
 8013a1e:	e7e3      	b.n	80139e8 <__multiply+0x42>
 8013a20:	f8b2 b000 	ldrh.w	fp, [r2]
 8013a24:	f1bb 0f00 	cmp.w	fp, #0
 8013a28:	d023      	beq.n	8013a72 <__multiply+0xcc>
 8013a2a:	4689      	mov	r9, r1
 8013a2c:	46ac      	mov	ip, r5
 8013a2e:	f04f 0800 	mov.w	r8, #0
 8013a32:	f859 4b04 	ldr.w	r4, [r9], #4
 8013a36:	f8dc a000 	ldr.w	sl, [ip]
 8013a3a:	b2a3      	uxth	r3, r4
 8013a3c:	fa1f fa8a 	uxth.w	sl, sl
 8013a40:	fb0b a303 	mla	r3, fp, r3, sl
 8013a44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013a48:	f8dc 4000 	ldr.w	r4, [ip]
 8013a4c:	4443      	add	r3, r8
 8013a4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013a52:	fb0b 840a 	mla	r4, fp, sl, r8
 8013a56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013a5a:	46e2      	mov	sl, ip
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013a62:	454f      	cmp	r7, r9
 8013a64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013a68:	f84a 3b04 	str.w	r3, [sl], #4
 8013a6c:	d82b      	bhi.n	8013ac6 <__multiply+0x120>
 8013a6e:	f8cc 8004 	str.w	r8, [ip, #4]
 8013a72:	9b01      	ldr	r3, [sp, #4]
 8013a74:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013a78:	3204      	adds	r2, #4
 8013a7a:	f1ba 0f00 	cmp.w	sl, #0
 8013a7e:	d020      	beq.n	8013ac2 <__multiply+0x11c>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	4689      	mov	r9, r1
 8013a84:	46a8      	mov	r8, r5
 8013a86:	f04f 0b00 	mov.w	fp, #0
 8013a8a:	f8b9 c000 	ldrh.w	ip, [r9]
 8013a8e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013a92:	fb0a 440c 	mla	r4, sl, ip, r4
 8013a96:	445c      	add	r4, fp
 8013a98:	46c4      	mov	ip, r8
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8013aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8013aa8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013aac:	0c1b      	lsrs	r3, r3, #16
 8013aae:	fb0a b303 	mla	r3, sl, r3, fp
 8013ab2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ab6:	454f      	cmp	r7, r9
 8013ab8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013abc:	d805      	bhi.n	8013aca <__multiply+0x124>
 8013abe:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ac2:	3504      	adds	r5, #4
 8013ac4:	e79b      	b.n	80139fe <__multiply+0x58>
 8013ac6:	46d4      	mov	ip, sl
 8013ac8:	e7b3      	b.n	8013a32 <__multiply+0x8c>
 8013aca:	46e0      	mov	r8, ip
 8013acc:	e7dd      	b.n	8013a8a <__multiply+0xe4>
 8013ace:	3e01      	subs	r6, #1
 8013ad0:	e799      	b.n	8013a06 <__multiply+0x60>
	...

08013ad4 <__pow5mult>:
 8013ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ad8:	4615      	mov	r5, r2
 8013ada:	f012 0203 	ands.w	r2, r2, #3
 8013ade:	4606      	mov	r6, r0
 8013ae0:	460f      	mov	r7, r1
 8013ae2:	d007      	beq.n	8013af4 <__pow5mult+0x20>
 8013ae4:	3a01      	subs	r2, #1
 8013ae6:	4c21      	ldr	r4, [pc, #132]	; (8013b6c <__pow5mult+0x98>)
 8013ae8:	2300      	movs	r3, #0
 8013aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013aee:	f7ff fe8a 	bl	8013806 <__multadd>
 8013af2:	4607      	mov	r7, r0
 8013af4:	10ad      	asrs	r5, r5, #2
 8013af6:	d035      	beq.n	8013b64 <__pow5mult+0x90>
 8013af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013afa:	b93c      	cbnz	r4, 8013b0c <__pow5mult+0x38>
 8013afc:	2010      	movs	r0, #16
 8013afe:	f7fc fe1f 	bl	8010740 <malloc>
 8013b02:	6270      	str	r0, [r6, #36]	; 0x24
 8013b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b08:	6004      	str	r4, [r0, #0]
 8013b0a:	60c4      	str	r4, [r0, #12]
 8013b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b14:	b94c      	cbnz	r4, 8013b2a <__pow5mult+0x56>
 8013b16:	f240 2171 	movw	r1, #625	; 0x271
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f7ff ff3a 	bl	8013994 <__i2b>
 8013b20:	2300      	movs	r3, #0
 8013b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b26:	4604      	mov	r4, r0
 8013b28:	6003      	str	r3, [r0, #0]
 8013b2a:	f04f 0800 	mov.w	r8, #0
 8013b2e:	07eb      	lsls	r3, r5, #31
 8013b30:	d50a      	bpl.n	8013b48 <__pow5mult+0x74>
 8013b32:	4639      	mov	r1, r7
 8013b34:	4622      	mov	r2, r4
 8013b36:	4630      	mov	r0, r6
 8013b38:	f7ff ff35 	bl	80139a6 <__multiply>
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	4681      	mov	r9, r0
 8013b40:	4630      	mov	r0, r6
 8013b42:	f7ff fe49 	bl	80137d8 <_Bfree>
 8013b46:	464f      	mov	r7, r9
 8013b48:	106d      	asrs	r5, r5, #1
 8013b4a:	d00b      	beq.n	8013b64 <__pow5mult+0x90>
 8013b4c:	6820      	ldr	r0, [r4, #0]
 8013b4e:	b938      	cbnz	r0, 8013b60 <__pow5mult+0x8c>
 8013b50:	4622      	mov	r2, r4
 8013b52:	4621      	mov	r1, r4
 8013b54:	4630      	mov	r0, r6
 8013b56:	f7ff ff26 	bl	80139a6 <__multiply>
 8013b5a:	6020      	str	r0, [r4, #0]
 8013b5c:	f8c0 8000 	str.w	r8, [r0]
 8013b60:	4604      	mov	r4, r0
 8013b62:	e7e4      	b.n	8013b2e <__pow5mult+0x5a>
 8013b64:	4638      	mov	r0, r7
 8013b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b6a:	bf00      	nop
 8013b6c:	080160a0 	.word	0x080160a0

08013b70 <__lshift>:
 8013b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b74:	460c      	mov	r4, r1
 8013b76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b7a:	6923      	ldr	r3, [r4, #16]
 8013b7c:	6849      	ldr	r1, [r1, #4]
 8013b7e:	eb0a 0903 	add.w	r9, sl, r3
 8013b82:	68a3      	ldr	r3, [r4, #8]
 8013b84:	4607      	mov	r7, r0
 8013b86:	4616      	mov	r6, r2
 8013b88:	f109 0501 	add.w	r5, r9, #1
 8013b8c:	42ab      	cmp	r3, r5
 8013b8e:	db32      	blt.n	8013bf6 <__lshift+0x86>
 8013b90:	4638      	mov	r0, r7
 8013b92:	f7ff fded 	bl	8013770 <_Balloc>
 8013b96:	2300      	movs	r3, #0
 8013b98:	4680      	mov	r8, r0
 8013b9a:	f100 0114 	add.w	r1, r0, #20
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	4553      	cmp	r3, sl
 8013ba2:	db2b      	blt.n	8013bfc <__lshift+0x8c>
 8013ba4:	6920      	ldr	r0, [r4, #16]
 8013ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013baa:	f104 0314 	add.w	r3, r4, #20
 8013bae:	f016 021f 	ands.w	r2, r6, #31
 8013bb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013bb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013bba:	d025      	beq.n	8013c08 <__lshift+0x98>
 8013bbc:	f1c2 0e20 	rsb	lr, r2, #32
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	681e      	ldr	r6, [r3, #0]
 8013bc4:	468a      	mov	sl, r1
 8013bc6:	4096      	lsls	r6, r2
 8013bc8:	4330      	orrs	r0, r6
 8013bca:	f84a 0b04 	str.w	r0, [sl], #4
 8013bce:	f853 0b04 	ldr.w	r0, [r3], #4
 8013bd2:	459c      	cmp	ip, r3
 8013bd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8013bd8:	d814      	bhi.n	8013c04 <__lshift+0x94>
 8013bda:	6048      	str	r0, [r1, #4]
 8013bdc:	b108      	cbz	r0, 8013be2 <__lshift+0x72>
 8013bde:	f109 0502 	add.w	r5, r9, #2
 8013be2:	3d01      	subs	r5, #1
 8013be4:	4638      	mov	r0, r7
 8013be6:	f8c8 5010 	str.w	r5, [r8, #16]
 8013bea:	4621      	mov	r1, r4
 8013bec:	f7ff fdf4 	bl	80137d8 <_Bfree>
 8013bf0:	4640      	mov	r0, r8
 8013bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf6:	3101      	adds	r1, #1
 8013bf8:	005b      	lsls	r3, r3, #1
 8013bfa:	e7c7      	b.n	8013b8c <__lshift+0x1c>
 8013bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013c00:	3301      	adds	r3, #1
 8013c02:	e7cd      	b.n	8013ba0 <__lshift+0x30>
 8013c04:	4651      	mov	r1, sl
 8013c06:	e7dc      	b.n	8013bc2 <__lshift+0x52>
 8013c08:	3904      	subs	r1, #4
 8013c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c12:	459c      	cmp	ip, r3
 8013c14:	d8f9      	bhi.n	8013c0a <__lshift+0x9a>
 8013c16:	e7e4      	b.n	8013be2 <__lshift+0x72>

08013c18 <__mcmp>:
 8013c18:	6903      	ldr	r3, [r0, #16]
 8013c1a:	690a      	ldr	r2, [r1, #16]
 8013c1c:	1a9b      	subs	r3, r3, r2
 8013c1e:	b530      	push	{r4, r5, lr}
 8013c20:	d10c      	bne.n	8013c3c <__mcmp+0x24>
 8013c22:	0092      	lsls	r2, r2, #2
 8013c24:	3014      	adds	r0, #20
 8013c26:	3114      	adds	r1, #20
 8013c28:	1884      	adds	r4, r0, r2
 8013c2a:	4411      	add	r1, r2
 8013c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c34:	4295      	cmp	r5, r2
 8013c36:	d003      	beq.n	8013c40 <__mcmp+0x28>
 8013c38:	d305      	bcc.n	8013c46 <__mcmp+0x2e>
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	bd30      	pop	{r4, r5, pc}
 8013c40:	42a0      	cmp	r0, r4
 8013c42:	d3f3      	bcc.n	8013c2c <__mcmp+0x14>
 8013c44:	e7fa      	b.n	8013c3c <__mcmp+0x24>
 8013c46:	f04f 33ff 	mov.w	r3, #4294967295
 8013c4a:	e7f7      	b.n	8013c3c <__mcmp+0x24>

08013c4c <__mdiff>:
 8013c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c50:	460d      	mov	r5, r1
 8013c52:	4607      	mov	r7, r0
 8013c54:	4611      	mov	r1, r2
 8013c56:	4628      	mov	r0, r5
 8013c58:	4614      	mov	r4, r2
 8013c5a:	f7ff ffdd 	bl	8013c18 <__mcmp>
 8013c5e:	1e06      	subs	r6, r0, #0
 8013c60:	d108      	bne.n	8013c74 <__mdiff+0x28>
 8013c62:	4631      	mov	r1, r6
 8013c64:	4638      	mov	r0, r7
 8013c66:	f7ff fd83 	bl	8013770 <_Balloc>
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c74:	bfa4      	itt	ge
 8013c76:	4623      	movge	r3, r4
 8013c78:	462c      	movge	r4, r5
 8013c7a:	4638      	mov	r0, r7
 8013c7c:	6861      	ldr	r1, [r4, #4]
 8013c7e:	bfa6      	itte	ge
 8013c80:	461d      	movge	r5, r3
 8013c82:	2600      	movge	r6, #0
 8013c84:	2601      	movlt	r6, #1
 8013c86:	f7ff fd73 	bl	8013770 <_Balloc>
 8013c8a:	692b      	ldr	r3, [r5, #16]
 8013c8c:	60c6      	str	r6, [r0, #12]
 8013c8e:	6926      	ldr	r6, [r4, #16]
 8013c90:	f105 0914 	add.w	r9, r5, #20
 8013c94:	f104 0214 	add.w	r2, r4, #20
 8013c98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013c9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013ca0:	f100 0514 	add.w	r5, r0, #20
 8013ca4:	f04f 0e00 	mov.w	lr, #0
 8013ca8:	f852 ab04 	ldr.w	sl, [r2], #4
 8013cac:	f859 4b04 	ldr.w	r4, [r9], #4
 8013cb0:	fa1e f18a 	uxtah	r1, lr, sl
 8013cb4:	b2a3      	uxth	r3, r4
 8013cb6:	1ac9      	subs	r1, r1, r3
 8013cb8:	0c23      	lsrs	r3, r4, #16
 8013cba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013cbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013cc2:	b289      	uxth	r1, r1
 8013cc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013cc8:	45c8      	cmp	r8, r9
 8013cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013cce:	4694      	mov	ip, r2
 8013cd0:	f845 3b04 	str.w	r3, [r5], #4
 8013cd4:	d8e8      	bhi.n	8013ca8 <__mdiff+0x5c>
 8013cd6:	45bc      	cmp	ip, r7
 8013cd8:	d304      	bcc.n	8013ce4 <__mdiff+0x98>
 8013cda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013cde:	b183      	cbz	r3, 8013d02 <__mdiff+0xb6>
 8013ce0:	6106      	str	r6, [r0, #16]
 8013ce2:	e7c5      	b.n	8013c70 <__mdiff+0x24>
 8013ce4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013ce8:	fa1e f381 	uxtah	r3, lr, r1
 8013cec:	141a      	asrs	r2, r3, #16
 8013cee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013cfc:	f845 3b04 	str.w	r3, [r5], #4
 8013d00:	e7e9      	b.n	8013cd6 <__mdiff+0x8a>
 8013d02:	3e01      	subs	r6, #1
 8013d04:	e7e9      	b.n	8013cda <__mdiff+0x8e>
	...

08013d08 <__ulp>:
 8013d08:	4b12      	ldr	r3, [pc, #72]	; (8013d54 <__ulp+0x4c>)
 8013d0a:	ee10 2a90 	vmov	r2, s1
 8013d0e:	401a      	ands	r2, r3
 8013d10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	dd04      	ble.n	8013d22 <__ulp+0x1a>
 8013d18:	2000      	movs	r0, #0
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	ec41 0b10 	vmov	d0, r0, r1
 8013d20:	4770      	bx	lr
 8013d22:	425b      	negs	r3, r3
 8013d24:	151b      	asrs	r3, r3, #20
 8013d26:	2b13      	cmp	r3, #19
 8013d28:	f04f 0000 	mov.w	r0, #0
 8013d2c:	f04f 0100 	mov.w	r1, #0
 8013d30:	dc04      	bgt.n	8013d3c <__ulp+0x34>
 8013d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013d36:	fa42 f103 	asr.w	r1, r2, r3
 8013d3a:	e7ef      	b.n	8013d1c <__ulp+0x14>
 8013d3c:	3b14      	subs	r3, #20
 8013d3e:	2b1e      	cmp	r3, #30
 8013d40:	f04f 0201 	mov.w	r2, #1
 8013d44:	bfda      	itte	le
 8013d46:	f1c3 031f 	rsble	r3, r3, #31
 8013d4a:	fa02 f303 	lslle.w	r3, r2, r3
 8013d4e:	4613      	movgt	r3, r2
 8013d50:	4618      	mov	r0, r3
 8013d52:	e7e3      	b.n	8013d1c <__ulp+0x14>
 8013d54:	7ff00000 	.word	0x7ff00000

08013d58 <__b2d>:
 8013d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d5a:	6905      	ldr	r5, [r0, #16]
 8013d5c:	f100 0714 	add.w	r7, r0, #20
 8013d60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013d64:	1f2e      	subs	r6, r5, #4
 8013d66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f7ff fdc4 	bl	80138f8 <__hi0bits>
 8013d70:	f1c0 0320 	rsb	r3, r0, #32
 8013d74:	280a      	cmp	r0, #10
 8013d76:	600b      	str	r3, [r1, #0]
 8013d78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013df0 <__b2d+0x98>
 8013d7c:	dc14      	bgt.n	8013da8 <__b2d+0x50>
 8013d7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013d82:	fa24 f10e 	lsr.w	r1, r4, lr
 8013d86:	42b7      	cmp	r7, r6
 8013d88:	ea41 030c 	orr.w	r3, r1, ip
 8013d8c:	bf34      	ite	cc
 8013d8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013d92:	2100      	movcs	r1, #0
 8013d94:	3015      	adds	r0, #21
 8013d96:	fa04 f000 	lsl.w	r0, r4, r0
 8013d9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013d9e:	ea40 0201 	orr.w	r2, r0, r1
 8013da2:	ec43 2b10 	vmov	d0, r2, r3
 8013da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013da8:	42b7      	cmp	r7, r6
 8013daa:	bf3a      	itte	cc
 8013dac:	f1a5 0608 	subcc.w	r6, r5, #8
 8013db0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013db4:	2100      	movcs	r1, #0
 8013db6:	380b      	subs	r0, #11
 8013db8:	d015      	beq.n	8013de6 <__b2d+0x8e>
 8013dba:	4084      	lsls	r4, r0
 8013dbc:	f1c0 0520 	rsb	r5, r0, #32
 8013dc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013dc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013dc8:	42be      	cmp	r6, r7
 8013dca:	fa21 fc05 	lsr.w	ip, r1, r5
 8013dce:	ea44 030c 	orr.w	r3, r4, ip
 8013dd2:	bf8c      	ite	hi
 8013dd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013dd8:	2400      	movls	r4, #0
 8013dda:	fa01 f000 	lsl.w	r0, r1, r0
 8013dde:	40ec      	lsrs	r4, r5
 8013de0:	ea40 0204 	orr.w	r2, r0, r4
 8013de4:	e7dd      	b.n	8013da2 <__b2d+0x4a>
 8013de6:	ea44 030c 	orr.w	r3, r4, ip
 8013dea:	460a      	mov	r2, r1
 8013dec:	e7d9      	b.n	8013da2 <__b2d+0x4a>
 8013dee:	bf00      	nop
 8013df0:	3ff00000 	.word	0x3ff00000

08013df4 <__d2b>:
 8013df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013df8:	460e      	mov	r6, r1
 8013dfa:	2101      	movs	r1, #1
 8013dfc:	ec59 8b10 	vmov	r8, r9, d0
 8013e00:	4615      	mov	r5, r2
 8013e02:	f7ff fcb5 	bl	8013770 <_Balloc>
 8013e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013e0a:	4607      	mov	r7, r0
 8013e0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e10:	bb34      	cbnz	r4, 8013e60 <__d2b+0x6c>
 8013e12:	9301      	str	r3, [sp, #4]
 8013e14:	f1b8 0300 	subs.w	r3, r8, #0
 8013e18:	d027      	beq.n	8013e6a <__d2b+0x76>
 8013e1a:	a802      	add	r0, sp, #8
 8013e1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013e20:	f7ff fd89 	bl	8013936 <__lo0bits>
 8013e24:	9900      	ldr	r1, [sp, #0]
 8013e26:	b1f0      	cbz	r0, 8013e66 <__d2b+0x72>
 8013e28:	9a01      	ldr	r2, [sp, #4]
 8013e2a:	f1c0 0320 	rsb	r3, r0, #32
 8013e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8013e32:	430b      	orrs	r3, r1
 8013e34:	40c2      	lsrs	r2, r0
 8013e36:	617b      	str	r3, [r7, #20]
 8013e38:	9201      	str	r2, [sp, #4]
 8013e3a:	9b01      	ldr	r3, [sp, #4]
 8013e3c:	61bb      	str	r3, [r7, #24]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	bf14      	ite	ne
 8013e42:	2102      	movne	r1, #2
 8013e44:	2101      	moveq	r1, #1
 8013e46:	6139      	str	r1, [r7, #16]
 8013e48:	b1c4      	cbz	r4, 8013e7c <__d2b+0x88>
 8013e4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013e4e:	4404      	add	r4, r0
 8013e50:	6034      	str	r4, [r6, #0]
 8013e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013e56:	6028      	str	r0, [r5, #0]
 8013e58:	4638      	mov	r0, r7
 8013e5a:	b003      	add	sp, #12
 8013e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013e64:	e7d5      	b.n	8013e12 <__d2b+0x1e>
 8013e66:	6179      	str	r1, [r7, #20]
 8013e68:	e7e7      	b.n	8013e3a <__d2b+0x46>
 8013e6a:	a801      	add	r0, sp, #4
 8013e6c:	f7ff fd63 	bl	8013936 <__lo0bits>
 8013e70:	9b01      	ldr	r3, [sp, #4]
 8013e72:	617b      	str	r3, [r7, #20]
 8013e74:	2101      	movs	r1, #1
 8013e76:	6139      	str	r1, [r7, #16]
 8013e78:	3020      	adds	r0, #32
 8013e7a:	e7e5      	b.n	8013e48 <__d2b+0x54>
 8013e7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013e84:	6030      	str	r0, [r6, #0]
 8013e86:	6918      	ldr	r0, [r3, #16]
 8013e88:	f7ff fd36 	bl	80138f8 <__hi0bits>
 8013e8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013e90:	e7e1      	b.n	8013e56 <__d2b+0x62>

08013e92 <__ratio>:
 8013e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e96:	4688      	mov	r8, r1
 8013e98:	4669      	mov	r1, sp
 8013e9a:	4681      	mov	r9, r0
 8013e9c:	f7ff ff5c 	bl	8013d58 <__b2d>
 8013ea0:	a901      	add	r1, sp, #4
 8013ea2:	4640      	mov	r0, r8
 8013ea4:	ec57 6b10 	vmov	r6, r7, d0
 8013ea8:	f7ff ff56 	bl	8013d58 <__b2d>
 8013eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013eb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013eb4:	eba3 0c02 	sub.w	ip, r3, r2
 8013eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013ebc:	1a9b      	subs	r3, r3, r2
 8013ebe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013ec2:	ec5b ab10 	vmov	sl, fp, d0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	bfce      	itee	gt
 8013eca:	463a      	movgt	r2, r7
 8013ecc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ed0:	465a      	movle	r2, fp
 8013ed2:	4659      	mov	r1, fp
 8013ed4:	463d      	mov	r5, r7
 8013ed6:	bfd4      	ite	le
 8013ed8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013edc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	ee10 2a10 	vmov	r2, s0
 8013ee6:	460b      	mov	r3, r1
 8013ee8:	4629      	mov	r1, r5
 8013eea:	f7ec fcbf 	bl	800086c <__aeabi_ddiv>
 8013eee:	ec41 0b10 	vmov	d0, r0, r1
 8013ef2:	b003      	add	sp, #12
 8013ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ef8 <__copybits>:
 8013ef8:	3901      	subs	r1, #1
 8013efa:	b510      	push	{r4, lr}
 8013efc:	1149      	asrs	r1, r1, #5
 8013efe:	6914      	ldr	r4, [r2, #16]
 8013f00:	3101      	adds	r1, #1
 8013f02:	f102 0314 	add.w	r3, r2, #20
 8013f06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013f0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f0e:	42a3      	cmp	r3, r4
 8013f10:	4602      	mov	r2, r0
 8013f12:	d303      	bcc.n	8013f1c <__copybits+0x24>
 8013f14:	2300      	movs	r3, #0
 8013f16:	428a      	cmp	r2, r1
 8013f18:	d305      	bcc.n	8013f26 <__copybits+0x2e>
 8013f1a:	bd10      	pop	{r4, pc}
 8013f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f20:	f840 2b04 	str.w	r2, [r0], #4
 8013f24:	e7f3      	b.n	8013f0e <__copybits+0x16>
 8013f26:	f842 3b04 	str.w	r3, [r2], #4
 8013f2a:	e7f4      	b.n	8013f16 <__copybits+0x1e>

08013f2c <__any_on>:
 8013f2c:	f100 0214 	add.w	r2, r0, #20
 8013f30:	6900      	ldr	r0, [r0, #16]
 8013f32:	114b      	asrs	r3, r1, #5
 8013f34:	4298      	cmp	r0, r3
 8013f36:	b510      	push	{r4, lr}
 8013f38:	db11      	blt.n	8013f5e <__any_on+0x32>
 8013f3a:	dd0a      	ble.n	8013f52 <__any_on+0x26>
 8013f3c:	f011 011f 	ands.w	r1, r1, #31
 8013f40:	d007      	beq.n	8013f52 <__any_on+0x26>
 8013f42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013f46:	fa24 f001 	lsr.w	r0, r4, r1
 8013f4a:	fa00 f101 	lsl.w	r1, r0, r1
 8013f4e:	428c      	cmp	r4, r1
 8013f50:	d10b      	bne.n	8013f6a <__any_on+0x3e>
 8013f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d803      	bhi.n	8013f62 <__any_on+0x36>
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	bd10      	pop	{r4, pc}
 8013f5e:	4603      	mov	r3, r0
 8013f60:	e7f7      	b.n	8013f52 <__any_on+0x26>
 8013f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f66:	2900      	cmp	r1, #0
 8013f68:	d0f5      	beq.n	8013f56 <__any_on+0x2a>
 8013f6a:	2001      	movs	r0, #1
 8013f6c:	e7f6      	b.n	8013f5c <__any_on+0x30>

08013f6e <_calloc_r>:
 8013f6e:	b538      	push	{r3, r4, r5, lr}
 8013f70:	fb02 f401 	mul.w	r4, r2, r1
 8013f74:	4621      	mov	r1, r4
 8013f76:	f7fc fc6d 	bl	8010854 <_malloc_r>
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	b118      	cbz	r0, 8013f86 <_calloc_r+0x18>
 8013f7e:	4622      	mov	r2, r4
 8013f80:	2100      	movs	r1, #0
 8013f82:	f7fc fc11 	bl	80107a8 <memset>
 8013f86:	4628      	mov	r0, r5
 8013f88:	bd38      	pop	{r3, r4, r5, pc}

08013f8a <__ssputs_r>:
 8013f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f8e:	688e      	ldr	r6, [r1, #8]
 8013f90:	429e      	cmp	r6, r3
 8013f92:	4682      	mov	sl, r0
 8013f94:	460c      	mov	r4, r1
 8013f96:	4690      	mov	r8, r2
 8013f98:	4699      	mov	r9, r3
 8013f9a:	d837      	bhi.n	801400c <__ssputs_r+0x82>
 8013f9c:	898a      	ldrh	r2, [r1, #12]
 8013f9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013fa2:	d031      	beq.n	8014008 <__ssputs_r+0x7e>
 8013fa4:	6825      	ldr	r5, [r4, #0]
 8013fa6:	6909      	ldr	r1, [r1, #16]
 8013fa8:	1a6f      	subs	r7, r5, r1
 8013faa:	6965      	ldr	r5, [r4, #20]
 8013fac:	2302      	movs	r3, #2
 8013fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8013fb6:	f109 0301 	add.w	r3, r9, #1
 8013fba:	443b      	add	r3, r7
 8013fbc:	429d      	cmp	r5, r3
 8013fbe:	bf38      	it	cc
 8013fc0:	461d      	movcc	r5, r3
 8013fc2:	0553      	lsls	r3, r2, #21
 8013fc4:	d530      	bpl.n	8014028 <__ssputs_r+0x9e>
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	f7fc fc44 	bl	8010854 <_malloc_r>
 8013fcc:	4606      	mov	r6, r0
 8013fce:	b950      	cbnz	r0, 8013fe6 <__ssputs_r+0x5c>
 8013fd0:	230c      	movs	r3, #12
 8013fd2:	f8ca 3000 	str.w	r3, [sl]
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fdc:	81a3      	strh	r3, [r4, #12]
 8013fde:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe6:	463a      	mov	r2, r7
 8013fe8:	6921      	ldr	r1, [r4, #16]
 8013fea:	f7fc fbb9 	bl	8010760 <memcpy>
 8013fee:	89a3      	ldrh	r3, [r4, #12]
 8013ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ff8:	81a3      	strh	r3, [r4, #12]
 8013ffa:	6126      	str	r6, [r4, #16]
 8013ffc:	6165      	str	r5, [r4, #20]
 8013ffe:	443e      	add	r6, r7
 8014000:	1bed      	subs	r5, r5, r7
 8014002:	6026      	str	r6, [r4, #0]
 8014004:	60a5      	str	r5, [r4, #8]
 8014006:	464e      	mov	r6, r9
 8014008:	454e      	cmp	r6, r9
 801400a:	d900      	bls.n	801400e <__ssputs_r+0x84>
 801400c:	464e      	mov	r6, r9
 801400e:	4632      	mov	r2, r6
 8014010:	4641      	mov	r1, r8
 8014012:	6820      	ldr	r0, [r4, #0]
 8014014:	f7fc fbaf 	bl	8010776 <memmove>
 8014018:	68a3      	ldr	r3, [r4, #8]
 801401a:	1b9b      	subs	r3, r3, r6
 801401c:	60a3      	str	r3, [r4, #8]
 801401e:	6823      	ldr	r3, [r4, #0]
 8014020:	441e      	add	r6, r3
 8014022:	6026      	str	r6, [r4, #0]
 8014024:	2000      	movs	r0, #0
 8014026:	e7dc      	b.n	8013fe2 <__ssputs_r+0x58>
 8014028:	462a      	mov	r2, r5
 801402a:	f000 fd1a 	bl	8014a62 <_realloc_r>
 801402e:	4606      	mov	r6, r0
 8014030:	2800      	cmp	r0, #0
 8014032:	d1e2      	bne.n	8013ffa <__ssputs_r+0x70>
 8014034:	6921      	ldr	r1, [r4, #16]
 8014036:	4650      	mov	r0, sl
 8014038:	f7fc fbbe 	bl	80107b8 <_free_r>
 801403c:	e7c8      	b.n	8013fd0 <__ssputs_r+0x46>
	...

08014040 <_svfiprintf_r>:
 8014040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014044:	461d      	mov	r5, r3
 8014046:	898b      	ldrh	r3, [r1, #12]
 8014048:	061f      	lsls	r7, r3, #24
 801404a:	b09d      	sub	sp, #116	; 0x74
 801404c:	4680      	mov	r8, r0
 801404e:	460c      	mov	r4, r1
 8014050:	4616      	mov	r6, r2
 8014052:	d50f      	bpl.n	8014074 <_svfiprintf_r+0x34>
 8014054:	690b      	ldr	r3, [r1, #16]
 8014056:	b96b      	cbnz	r3, 8014074 <_svfiprintf_r+0x34>
 8014058:	2140      	movs	r1, #64	; 0x40
 801405a:	f7fc fbfb 	bl	8010854 <_malloc_r>
 801405e:	6020      	str	r0, [r4, #0]
 8014060:	6120      	str	r0, [r4, #16]
 8014062:	b928      	cbnz	r0, 8014070 <_svfiprintf_r+0x30>
 8014064:	230c      	movs	r3, #12
 8014066:	f8c8 3000 	str.w	r3, [r8]
 801406a:	f04f 30ff 	mov.w	r0, #4294967295
 801406e:	e0c8      	b.n	8014202 <_svfiprintf_r+0x1c2>
 8014070:	2340      	movs	r3, #64	; 0x40
 8014072:	6163      	str	r3, [r4, #20]
 8014074:	2300      	movs	r3, #0
 8014076:	9309      	str	r3, [sp, #36]	; 0x24
 8014078:	2320      	movs	r3, #32
 801407a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801407e:	2330      	movs	r3, #48	; 0x30
 8014080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014084:	9503      	str	r5, [sp, #12]
 8014086:	f04f 0b01 	mov.w	fp, #1
 801408a:	4637      	mov	r7, r6
 801408c:	463d      	mov	r5, r7
 801408e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014092:	b10b      	cbz	r3, 8014098 <_svfiprintf_r+0x58>
 8014094:	2b25      	cmp	r3, #37	; 0x25
 8014096:	d13e      	bne.n	8014116 <_svfiprintf_r+0xd6>
 8014098:	ebb7 0a06 	subs.w	sl, r7, r6
 801409c:	d00b      	beq.n	80140b6 <_svfiprintf_r+0x76>
 801409e:	4653      	mov	r3, sl
 80140a0:	4632      	mov	r2, r6
 80140a2:	4621      	mov	r1, r4
 80140a4:	4640      	mov	r0, r8
 80140a6:	f7ff ff70 	bl	8013f8a <__ssputs_r>
 80140aa:	3001      	adds	r0, #1
 80140ac:	f000 80a4 	beq.w	80141f8 <_svfiprintf_r+0x1b8>
 80140b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b2:	4453      	add	r3, sl
 80140b4:	9309      	str	r3, [sp, #36]	; 0x24
 80140b6:	783b      	ldrb	r3, [r7, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f000 809d 	beq.w	80141f8 <_svfiprintf_r+0x1b8>
 80140be:	2300      	movs	r3, #0
 80140c0:	f04f 32ff 	mov.w	r2, #4294967295
 80140c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	9307      	str	r3, [sp, #28]
 80140cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140d0:	931a      	str	r3, [sp, #104]	; 0x68
 80140d2:	462f      	mov	r7, r5
 80140d4:	2205      	movs	r2, #5
 80140d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80140da:	4850      	ldr	r0, [pc, #320]	; (801421c <_svfiprintf_r+0x1dc>)
 80140dc:	f7ec f890 	bl	8000200 <memchr>
 80140e0:	9b04      	ldr	r3, [sp, #16]
 80140e2:	b9d0      	cbnz	r0, 801411a <_svfiprintf_r+0xda>
 80140e4:	06d9      	lsls	r1, r3, #27
 80140e6:	bf44      	itt	mi
 80140e8:	2220      	movmi	r2, #32
 80140ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140ee:	071a      	lsls	r2, r3, #28
 80140f0:	bf44      	itt	mi
 80140f2:	222b      	movmi	r2, #43	; 0x2b
 80140f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140f8:	782a      	ldrb	r2, [r5, #0]
 80140fa:	2a2a      	cmp	r2, #42	; 0x2a
 80140fc:	d015      	beq.n	801412a <_svfiprintf_r+0xea>
 80140fe:	9a07      	ldr	r2, [sp, #28]
 8014100:	462f      	mov	r7, r5
 8014102:	2000      	movs	r0, #0
 8014104:	250a      	movs	r5, #10
 8014106:	4639      	mov	r1, r7
 8014108:	f811 3b01 	ldrb.w	r3, [r1], #1
 801410c:	3b30      	subs	r3, #48	; 0x30
 801410e:	2b09      	cmp	r3, #9
 8014110:	d94d      	bls.n	80141ae <_svfiprintf_r+0x16e>
 8014112:	b1b8      	cbz	r0, 8014144 <_svfiprintf_r+0x104>
 8014114:	e00f      	b.n	8014136 <_svfiprintf_r+0xf6>
 8014116:	462f      	mov	r7, r5
 8014118:	e7b8      	b.n	801408c <_svfiprintf_r+0x4c>
 801411a:	4a40      	ldr	r2, [pc, #256]	; (801421c <_svfiprintf_r+0x1dc>)
 801411c:	1a80      	subs	r0, r0, r2
 801411e:	fa0b f000 	lsl.w	r0, fp, r0
 8014122:	4318      	orrs	r0, r3
 8014124:	9004      	str	r0, [sp, #16]
 8014126:	463d      	mov	r5, r7
 8014128:	e7d3      	b.n	80140d2 <_svfiprintf_r+0x92>
 801412a:	9a03      	ldr	r2, [sp, #12]
 801412c:	1d11      	adds	r1, r2, #4
 801412e:	6812      	ldr	r2, [r2, #0]
 8014130:	9103      	str	r1, [sp, #12]
 8014132:	2a00      	cmp	r2, #0
 8014134:	db01      	blt.n	801413a <_svfiprintf_r+0xfa>
 8014136:	9207      	str	r2, [sp, #28]
 8014138:	e004      	b.n	8014144 <_svfiprintf_r+0x104>
 801413a:	4252      	negs	r2, r2
 801413c:	f043 0302 	orr.w	r3, r3, #2
 8014140:	9207      	str	r2, [sp, #28]
 8014142:	9304      	str	r3, [sp, #16]
 8014144:	783b      	ldrb	r3, [r7, #0]
 8014146:	2b2e      	cmp	r3, #46	; 0x2e
 8014148:	d10c      	bne.n	8014164 <_svfiprintf_r+0x124>
 801414a:	787b      	ldrb	r3, [r7, #1]
 801414c:	2b2a      	cmp	r3, #42	; 0x2a
 801414e:	d133      	bne.n	80141b8 <_svfiprintf_r+0x178>
 8014150:	9b03      	ldr	r3, [sp, #12]
 8014152:	1d1a      	adds	r2, r3, #4
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	9203      	str	r2, [sp, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	bfb8      	it	lt
 801415c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014160:	3702      	adds	r7, #2
 8014162:	9305      	str	r3, [sp, #20]
 8014164:	4d2e      	ldr	r5, [pc, #184]	; (8014220 <_svfiprintf_r+0x1e0>)
 8014166:	7839      	ldrb	r1, [r7, #0]
 8014168:	2203      	movs	r2, #3
 801416a:	4628      	mov	r0, r5
 801416c:	f7ec f848 	bl	8000200 <memchr>
 8014170:	b138      	cbz	r0, 8014182 <_svfiprintf_r+0x142>
 8014172:	2340      	movs	r3, #64	; 0x40
 8014174:	1b40      	subs	r0, r0, r5
 8014176:	fa03 f000 	lsl.w	r0, r3, r0
 801417a:	9b04      	ldr	r3, [sp, #16]
 801417c:	4303      	orrs	r3, r0
 801417e:	3701      	adds	r7, #1
 8014180:	9304      	str	r3, [sp, #16]
 8014182:	7839      	ldrb	r1, [r7, #0]
 8014184:	4827      	ldr	r0, [pc, #156]	; (8014224 <_svfiprintf_r+0x1e4>)
 8014186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801418a:	2206      	movs	r2, #6
 801418c:	1c7e      	adds	r6, r7, #1
 801418e:	f7ec f837 	bl	8000200 <memchr>
 8014192:	2800      	cmp	r0, #0
 8014194:	d038      	beq.n	8014208 <_svfiprintf_r+0x1c8>
 8014196:	4b24      	ldr	r3, [pc, #144]	; (8014228 <_svfiprintf_r+0x1e8>)
 8014198:	bb13      	cbnz	r3, 80141e0 <_svfiprintf_r+0x1a0>
 801419a:	9b03      	ldr	r3, [sp, #12]
 801419c:	3307      	adds	r3, #7
 801419e:	f023 0307 	bic.w	r3, r3, #7
 80141a2:	3308      	adds	r3, #8
 80141a4:	9303      	str	r3, [sp, #12]
 80141a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a8:	444b      	add	r3, r9
 80141aa:	9309      	str	r3, [sp, #36]	; 0x24
 80141ac:	e76d      	b.n	801408a <_svfiprintf_r+0x4a>
 80141ae:	fb05 3202 	mla	r2, r5, r2, r3
 80141b2:	2001      	movs	r0, #1
 80141b4:	460f      	mov	r7, r1
 80141b6:	e7a6      	b.n	8014106 <_svfiprintf_r+0xc6>
 80141b8:	2300      	movs	r3, #0
 80141ba:	3701      	adds	r7, #1
 80141bc:	9305      	str	r3, [sp, #20]
 80141be:	4619      	mov	r1, r3
 80141c0:	250a      	movs	r5, #10
 80141c2:	4638      	mov	r0, r7
 80141c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141c8:	3a30      	subs	r2, #48	; 0x30
 80141ca:	2a09      	cmp	r2, #9
 80141cc:	d903      	bls.n	80141d6 <_svfiprintf_r+0x196>
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d0c8      	beq.n	8014164 <_svfiprintf_r+0x124>
 80141d2:	9105      	str	r1, [sp, #20]
 80141d4:	e7c6      	b.n	8014164 <_svfiprintf_r+0x124>
 80141d6:	fb05 2101 	mla	r1, r5, r1, r2
 80141da:	2301      	movs	r3, #1
 80141dc:	4607      	mov	r7, r0
 80141de:	e7f0      	b.n	80141c2 <_svfiprintf_r+0x182>
 80141e0:	ab03      	add	r3, sp, #12
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	4622      	mov	r2, r4
 80141e6:	4b11      	ldr	r3, [pc, #68]	; (801422c <_svfiprintf_r+0x1ec>)
 80141e8:	a904      	add	r1, sp, #16
 80141ea:	4640      	mov	r0, r8
 80141ec:	f7fc fc20 	bl	8010a30 <_printf_float>
 80141f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80141f4:	4681      	mov	r9, r0
 80141f6:	d1d6      	bne.n	80141a6 <_svfiprintf_r+0x166>
 80141f8:	89a3      	ldrh	r3, [r4, #12]
 80141fa:	065b      	lsls	r3, r3, #25
 80141fc:	f53f af35 	bmi.w	801406a <_svfiprintf_r+0x2a>
 8014200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014202:	b01d      	add	sp, #116	; 0x74
 8014204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014208:	ab03      	add	r3, sp, #12
 801420a:	9300      	str	r3, [sp, #0]
 801420c:	4622      	mov	r2, r4
 801420e:	4b07      	ldr	r3, [pc, #28]	; (801422c <_svfiprintf_r+0x1ec>)
 8014210:	a904      	add	r1, sp, #16
 8014212:	4640      	mov	r0, r8
 8014214:	f7fc fec2 	bl	8010f9c <_printf_i>
 8014218:	e7ea      	b.n	80141f0 <_svfiprintf_r+0x1b0>
 801421a:	bf00      	nop
 801421c:	080160ac 	.word	0x080160ac
 8014220:	080160b2 	.word	0x080160b2
 8014224:	080160b6 	.word	0x080160b6
 8014228:	08010a31 	.word	0x08010a31
 801422c:	08013f8b 	.word	0x08013f8b

08014230 <_sungetc_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	1c4b      	adds	r3, r1, #1
 8014234:	4614      	mov	r4, r2
 8014236:	d103      	bne.n	8014240 <_sungetc_r+0x10>
 8014238:	f04f 35ff 	mov.w	r5, #4294967295
 801423c:	4628      	mov	r0, r5
 801423e:	bd38      	pop	{r3, r4, r5, pc}
 8014240:	8993      	ldrh	r3, [r2, #12]
 8014242:	f023 0320 	bic.w	r3, r3, #32
 8014246:	8193      	strh	r3, [r2, #12]
 8014248:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801424a:	6852      	ldr	r2, [r2, #4]
 801424c:	b2cd      	uxtb	r5, r1
 801424e:	b18b      	cbz	r3, 8014274 <_sungetc_r+0x44>
 8014250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014252:	4293      	cmp	r3, r2
 8014254:	dd08      	ble.n	8014268 <_sungetc_r+0x38>
 8014256:	6823      	ldr	r3, [r4, #0]
 8014258:	1e5a      	subs	r2, r3, #1
 801425a:	6022      	str	r2, [r4, #0]
 801425c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014260:	6863      	ldr	r3, [r4, #4]
 8014262:	3301      	adds	r3, #1
 8014264:	6063      	str	r3, [r4, #4]
 8014266:	e7e9      	b.n	801423c <_sungetc_r+0xc>
 8014268:	4621      	mov	r1, r4
 801426a:	f000 fbb3 	bl	80149d4 <__submore>
 801426e:	2800      	cmp	r0, #0
 8014270:	d0f1      	beq.n	8014256 <_sungetc_r+0x26>
 8014272:	e7e1      	b.n	8014238 <_sungetc_r+0x8>
 8014274:	6921      	ldr	r1, [r4, #16]
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	b151      	cbz	r1, 8014290 <_sungetc_r+0x60>
 801427a:	4299      	cmp	r1, r3
 801427c:	d208      	bcs.n	8014290 <_sungetc_r+0x60>
 801427e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014282:	42a9      	cmp	r1, r5
 8014284:	d104      	bne.n	8014290 <_sungetc_r+0x60>
 8014286:	3b01      	subs	r3, #1
 8014288:	3201      	adds	r2, #1
 801428a:	6023      	str	r3, [r4, #0]
 801428c:	6062      	str	r2, [r4, #4]
 801428e:	e7d5      	b.n	801423c <_sungetc_r+0xc>
 8014290:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014298:	6363      	str	r3, [r4, #52]	; 0x34
 801429a:	2303      	movs	r3, #3
 801429c:	63a3      	str	r3, [r4, #56]	; 0x38
 801429e:	4623      	mov	r3, r4
 80142a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80142a4:	6023      	str	r3, [r4, #0]
 80142a6:	2301      	movs	r3, #1
 80142a8:	e7dc      	b.n	8014264 <_sungetc_r+0x34>

080142aa <__ssrefill_r>:
 80142aa:	b510      	push	{r4, lr}
 80142ac:	460c      	mov	r4, r1
 80142ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80142b0:	b169      	cbz	r1, 80142ce <__ssrefill_r+0x24>
 80142b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142b6:	4299      	cmp	r1, r3
 80142b8:	d001      	beq.n	80142be <__ssrefill_r+0x14>
 80142ba:	f7fc fa7d 	bl	80107b8 <_free_r>
 80142be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142c0:	6063      	str	r3, [r4, #4]
 80142c2:	2000      	movs	r0, #0
 80142c4:	6360      	str	r0, [r4, #52]	; 0x34
 80142c6:	b113      	cbz	r3, 80142ce <__ssrefill_r+0x24>
 80142c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80142ca:	6023      	str	r3, [r4, #0]
 80142cc:	bd10      	pop	{r4, pc}
 80142ce:	6923      	ldr	r3, [r4, #16]
 80142d0:	6023      	str	r3, [r4, #0]
 80142d2:	2300      	movs	r3, #0
 80142d4:	6063      	str	r3, [r4, #4]
 80142d6:	89a3      	ldrh	r3, [r4, #12]
 80142d8:	f043 0320 	orr.w	r3, r3, #32
 80142dc:	81a3      	strh	r3, [r4, #12]
 80142de:	f04f 30ff 	mov.w	r0, #4294967295
 80142e2:	e7f3      	b.n	80142cc <__ssrefill_r+0x22>

080142e4 <__ssvfiscanf_r>:
 80142e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80142ec:	460c      	mov	r4, r1
 80142ee:	2100      	movs	r1, #0
 80142f0:	9144      	str	r1, [sp, #272]	; 0x110
 80142f2:	9145      	str	r1, [sp, #276]	; 0x114
 80142f4:	499f      	ldr	r1, [pc, #636]	; (8014574 <__ssvfiscanf_r+0x290>)
 80142f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80142f8:	f10d 0804 	add.w	r8, sp, #4
 80142fc:	499e      	ldr	r1, [pc, #632]	; (8014578 <__ssvfiscanf_r+0x294>)
 80142fe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801457c <__ssvfiscanf_r+0x298>
 8014302:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014306:	4606      	mov	r6, r0
 8014308:	4692      	mov	sl, r2
 801430a:	91a1      	str	r1, [sp, #644]	; 0x284
 801430c:	9300      	str	r3, [sp, #0]
 801430e:	270a      	movs	r7, #10
 8014310:	f89a 3000 	ldrb.w	r3, [sl]
 8014314:	2b00      	cmp	r3, #0
 8014316:	f000 812a 	beq.w	801456e <__ssvfiscanf_r+0x28a>
 801431a:	4655      	mov	r5, sl
 801431c:	f7ff f9f6 	bl	801370c <__locale_ctype_ptr>
 8014320:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014324:	4458      	add	r0, fp
 8014326:	7843      	ldrb	r3, [r0, #1]
 8014328:	f013 0308 	ands.w	r3, r3, #8
 801432c:	d01c      	beq.n	8014368 <__ssvfiscanf_r+0x84>
 801432e:	6863      	ldr	r3, [r4, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	dd12      	ble.n	801435a <__ssvfiscanf_r+0x76>
 8014334:	f7ff f9ea 	bl	801370c <__locale_ctype_ptr>
 8014338:	6823      	ldr	r3, [r4, #0]
 801433a:	781a      	ldrb	r2, [r3, #0]
 801433c:	4410      	add	r0, r2
 801433e:	7842      	ldrb	r2, [r0, #1]
 8014340:	0712      	lsls	r2, r2, #28
 8014342:	d401      	bmi.n	8014348 <__ssvfiscanf_r+0x64>
 8014344:	46aa      	mov	sl, r5
 8014346:	e7e3      	b.n	8014310 <__ssvfiscanf_r+0x2c>
 8014348:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801434a:	3201      	adds	r2, #1
 801434c:	9245      	str	r2, [sp, #276]	; 0x114
 801434e:	6862      	ldr	r2, [r4, #4]
 8014350:	3301      	adds	r3, #1
 8014352:	3a01      	subs	r2, #1
 8014354:	6062      	str	r2, [r4, #4]
 8014356:	6023      	str	r3, [r4, #0]
 8014358:	e7e9      	b.n	801432e <__ssvfiscanf_r+0x4a>
 801435a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801435c:	4621      	mov	r1, r4
 801435e:	4630      	mov	r0, r6
 8014360:	4798      	blx	r3
 8014362:	2800      	cmp	r0, #0
 8014364:	d0e6      	beq.n	8014334 <__ssvfiscanf_r+0x50>
 8014366:	e7ed      	b.n	8014344 <__ssvfiscanf_r+0x60>
 8014368:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801436c:	f040 8082 	bne.w	8014474 <__ssvfiscanf_r+0x190>
 8014370:	9343      	str	r3, [sp, #268]	; 0x10c
 8014372:	9341      	str	r3, [sp, #260]	; 0x104
 8014374:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014378:	2b2a      	cmp	r3, #42	; 0x2a
 801437a:	d103      	bne.n	8014384 <__ssvfiscanf_r+0xa0>
 801437c:	2310      	movs	r3, #16
 801437e:	9341      	str	r3, [sp, #260]	; 0x104
 8014380:	f10a 0502 	add.w	r5, sl, #2
 8014384:	46aa      	mov	sl, r5
 8014386:	f815 1b01 	ldrb.w	r1, [r5], #1
 801438a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801438e:	2a09      	cmp	r2, #9
 8014390:	d922      	bls.n	80143d8 <__ssvfiscanf_r+0xf4>
 8014392:	2203      	movs	r2, #3
 8014394:	4879      	ldr	r0, [pc, #484]	; (801457c <__ssvfiscanf_r+0x298>)
 8014396:	f7eb ff33 	bl	8000200 <memchr>
 801439a:	b138      	cbz	r0, 80143ac <__ssvfiscanf_r+0xc8>
 801439c:	eba0 0309 	sub.w	r3, r0, r9
 80143a0:	2001      	movs	r0, #1
 80143a2:	4098      	lsls	r0, r3
 80143a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80143a6:	4318      	orrs	r0, r3
 80143a8:	9041      	str	r0, [sp, #260]	; 0x104
 80143aa:	46aa      	mov	sl, r5
 80143ac:	f89a 3000 	ldrb.w	r3, [sl]
 80143b0:	2b67      	cmp	r3, #103	; 0x67
 80143b2:	f10a 0501 	add.w	r5, sl, #1
 80143b6:	d82b      	bhi.n	8014410 <__ssvfiscanf_r+0x12c>
 80143b8:	2b65      	cmp	r3, #101	; 0x65
 80143ba:	f080 809f 	bcs.w	80144fc <__ssvfiscanf_r+0x218>
 80143be:	2b47      	cmp	r3, #71	; 0x47
 80143c0:	d810      	bhi.n	80143e4 <__ssvfiscanf_r+0x100>
 80143c2:	2b45      	cmp	r3, #69	; 0x45
 80143c4:	f080 809a 	bcs.w	80144fc <__ssvfiscanf_r+0x218>
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d06c      	beq.n	80144a6 <__ssvfiscanf_r+0x1c2>
 80143cc:	2b25      	cmp	r3, #37	; 0x25
 80143ce:	d051      	beq.n	8014474 <__ssvfiscanf_r+0x190>
 80143d0:	2303      	movs	r3, #3
 80143d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80143d4:	9742      	str	r7, [sp, #264]	; 0x108
 80143d6:	e027      	b.n	8014428 <__ssvfiscanf_r+0x144>
 80143d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80143da:	fb07 1303 	mla	r3, r7, r3, r1
 80143de:	3b30      	subs	r3, #48	; 0x30
 80143e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80143e2:	e7cf      	b.n	8014384 <__ssvfiscanf_r+0xa0>
 80143e4:	2b5b      	cmp	r3, #91	; 0x5b
 80143e6:	d06a      	beq.n	80144be <__ssvfiscanf_r+0x1da>
 80143e8:	d80c      	bhi.n	8014404 <__ssvfiscanf_r+0x120>
 80143ea:	2b58      	cmp	r3, #88	; 0x58
 80143ec:	d1f0      	bne.n	80143d0 <__ssvfiscanf_r+0xec>
 80143ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80143f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143f4:	9241      	str	r2, [sp, #260]	; 0x104
 80143f6:	2210      	movs	r2, #16
 80143f8:	9242      	str	r2, [sp, #264]	; 0x108
 80143fa:	2b6e      	cmp	r3, #110	; 0x6e
 80143fc:	bf8c      	ite	hi
 80143fe:	2304      	movhi	r3, #4
 8014400:	2303      	movls	r3, #3
 8014402:	e010      	b.n	8014426 <__ssvfiscanf_r+0x142>
 8014404:	2b63      	cmp	r3, #99	; 0x63
 8014406:	d065      	beq.n	80144d4 <__ssvfiscanf_r+0x1f0>
 8014408:	2b64      	cmp	r3, #100	; 0x64
 801440a:	d1e1      	bne.n	80143d0 <__ssvfiscanf_r+0xec>
 801440c:	9742      	str	r7, [sp, #264]	; 0x108
 801440e:	e7f4      	b.n	80143fa <__ssvfiscanf_r+0x116>
 8014410:	2b70      	cmp	r3, #112	; 0x70
 8014412:	d04b      	beq.n	80144ac <__ssvfiscanf_r+0x1c8>
 8014414:	d826      	bhi.n	8014464 <__ssvfiscanf_r+0x180>
 8014416:	2b6e      	cmp	r3, #110	; 0x6e
 8014418:	d062      	beq.n	80144e0 <__ssvfiscanf_r+0x1fc>
 801441a:	d84c      	bhi.n	80144b6 <__ssvfiscanf_r+0x1d2>
 801441c:	2b69      	cmp	r3, #105	; 0x69
 801441e:	d1d7      	bne.n	80143d0 <__ssvfiscanf_r+0xec>
 8014420:	2300      	movs	r3, #0
 8014422:	9342      	str	r3, [sp, #264]	; 0x108
 8014424:	2303      	movs	r3, #3
 8014426:	9347      	str	r3, [sp, #284]	; 0x11c
 8014428:	6863      	ldr	r3, [r4, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	dd68      	ble.n	8014500 <__ssvfiscanf_r+0x21c>
 801442e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014430:	0659      	lsls	r1, r3, #25
 8014432:	d407      	bmi.n	8014444 <__ssvfiscanf_r+0x160>
 8014434:	f7ff f96a 	bl	801370c <__locale_ctype_ptr>
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	781a      	ldrb	r2, [r3, #0]
 801443c:	4410      	add	r0, r2
 801443e:	7842      	ldrb	r2, [r0, #1]
 8014440:	0712      	lsls	r2, r2, #28
 8014442:	d464      	bmi.n	801450e <__ssvfiscanf_r+0x22a>
 8014444:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014446:	2b02      	cmp	r3, #2
 8014448:	dc73      	bgt.n	8014532 <__ssvfiscanf_r+0x24e>
 801444a:	466b      	mov	r3, sp
 801444c:	4622      	mov	r2, r4
 801444e:	a941      	add	r1, sp, #260	; 0x104
 8014450:	4630      	mov	r0, r6
 8014452:	f000 f897 	bl	8014584 <_scanf_chars>
 8014456:	2801      	cmp	r0, #1
 8014458:	f000 8089 	beq.w	801456e <__ssvfiscanf_r+0x28a>
 801445c:	2802      	cmp	r0, #2
 801445e:	f47f af71 	bne.w	8014344 <__ssvfiscanf_r+0x60>
 8014462:	e01d      	b.n	80144a0 <__ssvfiscanf_r+0x1bc>
 8014464:	2b75      	cmp	r3, #117	; 0x75
 8014466:	d0d1      	beq.n	801440c <__ssvfiscanf_r+0x128>
 8014468:	2b78      	cmp	r3, #120	; 0x78
 801446a:	d0c0      	beq.n	80143ee <__ssvfiscanf_r+0x10a>
 801446c:	2b73      	cmp	r3, #115	; 0x73
 801446e:	d1af      	bne.n	80143d0 <__ssvfiscanf_r+0xec>
 8014470:	2302      	movs	r3, #2
 8014472:	e7d8      	b.n	8014426 <__ssvfiscanf_r+0x142>
 8014474:	6863      	ldr	r3, [r4, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	dd0c      	ble.n	8014494 <__ssvfiscanf_r+0x1b0>
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	781a      	ldrb	r2, [r3, #0]
 801447e:	455a      	cmp	r2, fp
 8014480:	d175      	bne.n	801456e <__ssvfiscanf_r+0x28a>
 8014482:	3301      	adds	r3, #1
 8014484:	6862      	ldr	r2, [r4, #4]
 8014486:	6023      	str	r3, [r4, #0]
 8014488:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801448a:	3a01      	subs	r2, #1
 801448c:	3301      	adds	r3, #1
 801448e:	6062      	str	r2, [r4, #4]
 8014490:	9345      	str	r3, [sp, #276]	; 0x114
 8014492:	e757      	b.n	8014344 <__ssvfiscanf_r+0x60>
 8014494:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014496:	4621      	mov	r1, r4
 8014498:	4630      	mov	r0, r6
 801449a:	4798      	blx	r3
 801449c:	2800      	cmp	r0, #0
 801449e:	d0ec      	beq.n	801447a <__ssvfiscanf_r+0x196>
 80144a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80144a2:	2800      	cmp	r0, #0
 80144a4:	d159      	bne.n	801455a <__ssvfiscanf_r+0x276>
 80144a6:	f04f 30ff 	mov.w	r0, #4294967295
 80144aa:	e05c      	b.n	8014566 <__ssvfiscanf_r+0x282>
 80144ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80144ae:	f042 0220 	orr.w	r2, r2, #32
 80144b2:	9241      	str	r2, [sp, #260]	; 0x104
 80144b4:	e79b      	b.n	80143ee <__ssvfiscanf_r+0x10a>
 80144b6:	2308      	movs	r3, #8
 80144b8:	9342      	str	r3, [sp, #264]	; 0x108
 80144ba:	2304      	movs	r3, #4
 80144bc:	e7b3      	b.n	8014426 <__ssvfiscanf_r+0x142>
 80144be:	4629      	mov	r1, r5
 80144c0:	4640      	mov	r0, r8
 80144c2:	f000 f9b7 	bl	8014834 <__sccl>
 80144c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80144c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144cc:	9341      	str	r3, [sp, #260]	; 0x104
 80144ce:	4605      	mov	r5, r0
 80144d0:	2301      	movs	r3, #1
 80144d2:	e7a8      	b.n	8014426 <__ssvfiscanf_r+0x142>
 80144d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80144d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144da:	9341      	str	r3, [sp, #260]	; 0x104
 80144dc:	2300      	movs	r3, #0
 80144de:	e7a2      	b.n	8014426 <__ssvfiscanf_r+0x142>
 80144e0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80144e2:	06c3      	lsls	r3, r0, #27
 80144e4:	f53f af2e 	bmi.w	8014344 <__ssvfiscanf_r+0x60>
 80144e8:	9b00      	ldr	r3, [sp, #0]
 80144ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80144ec:	1d19      	adds	r1, r3, #4
 80144ee:	9100      	str	r1, [sp, #0]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	07c0      	lsls	r0, r0, #31
 80144f4:	bf4c      	ite	mi
 80144f6:	801a      	strhmi	r2, [r3, #0]
 80144f8:	601a      	strpl	r2, [r3, #0]
 80144fa:	e723      	b.n	8014344 <__ssvfiscanf_r+0x60>
 80144fc:	2305      	movs	r3, #5
 80144fe:	e792      	b.n	8014426 <__ssvfiscanf_r+0x142>
 8014500:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014502:	4621      	mov	r1, r4
 8014504:	4630      	mov	r0, r6
 8014506:	4798      	blx	r3
 8014508:	2800      	cmp	r0, #0
 801450a:	d090      	beq.n	801442e <__ssvfiscanf_r+0x14a>
 801450c:	e7c8      	b.n	80144a0 <__ssvfiscanf_r+0x1bc>
 801450e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014510:	3201      	adds	r2, #1
 8014512:	9245      	str	r2, [sp, #276]	; 0x114
 8014514:	6862      	ldr	r2, [r4, #4]
 8014516:	3a01      	subs	r2, #1
 8014518:	2a00      	cmp	r2, #0
 801451a:	6062      	str	r2, [r4, #4]
 801451c:	dd02      	ble.n	8014524 <__ssvfiscanf_r+0x240>
 801451e:	3301      	adds	r3, #1
 8014520:	6023      	str	r3, [r4, #0]
 8014522:	e787      	b.n	8014434 <__ssvfiscanf_r+0x150>
 8014524:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014526:	4621      	mov	r1, r4
 8014528:	4630      	mov	r0, r6
 801452a:	4798      	blx	r3
 801452c:	2800      	cmp	r0, #0
 801452e:	d081      	beq.n	8014434 <__ssvfiscanf_r+0x150>
 8014530:	e7b6      	b.n	80144a0 <__ssvfiscanf_r+0x1bc>
 8014532:	2b04      	cmp	r3, #4
 8014534:	dc06      	bgt.n	8014544 <__ssvfiscanf_r+0x260>
 8014536:	466b      	mov	r3, sp
 8014538:	4622      	mov	r2, r4
 801453a:	a941      	add	r1, sp, #260	; 0x104
 801453c:	4630      	mov	r0, r6
 801453e:	f000 f885 	bl	801464c <_scanf_i>
 8014542:	e788      	b.n	8014456 <__ssvfiscanf_r+0x172>
 8014544:	4b0e      	ldr	r3, [pc, #56]	; (8014580 <__ssvfiscanf_r+0x29c>)
 8014546:	2b00      	cmp	r3, #0
 8014548:	f43f aefc 	beq.w	8014344 <__ssvfiscanf_r+0x60>
 801454c:	466b      	mov	r3, sp
 801454e:	4622      	mov	r2, r4
 8014550:	a941      	add	r1, sp, #260	; 0x104
 8014552:	4630      	mov	r0, r6
 8014554:	f7fc fe34 	bl	80111c0 <_scanf_float>
 8014558:	e77d      	b.n	8014456 <__ssvfiscanf_r+0x172>
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014560:	bf18      	it	ne
 8014562:	f04f 30ff 	movne.w	r0, #4294967295
 8014566:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014570:	e7f9      	b.n	8014566 <__ssvfiscanf_r+0x282>
 8014572:	bf00      	nop
 8014574:	08014231 	.word	0x08014231
 8014578:	080142ab 	.word	0x080142ab
 801457c:	080160b2 	.word	0x080160b2
 8014580:	080111c1 	.word	0x080111c1

08014584 <_scanf_chars>:
 8014584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014588:	4615      	mov	r5, r2
 801458a:	688a      	ldr	r2, [r1, #8]
 801458c:	4680      	mov	r8, r0
 801458e:	460c      	mov	r4, r1
 8014590:	b932      	cbnz	r2, 80145a0 <_scanf_chars+0x1c>
 8014592:	698a      	ldr	r2, [r1, #24]
 8014594:	2a00      	cmp	r2, #0
 8014596:	bf14      	ite	ne
 8014598:	f04f 32ff 	movne.w	r2, #4294967295
 801459c:	2201      	moveq	r2, #1
 801459e:	608a      	str	r2, [r1, #8]
 80145a0:	6822      	ldr	r2, [r4, #0]
 80145a2:	06d1      	lsls	r1, r2, #27
 80145a4:	bf5f      	itttt	pl
 80145a6:	681a      	ldrpl	r2, [r3, #0]
 80145a8:	1d11      	addpl	r1, r2, #4
 80145aa:	6019      	strpl	r1, [r3, #0]
 80145ac:	6817      	ldrpl	r7, [r2, #0]
 80145ae:	2600      	movs	r6, #0
 80145b0:	69a3      	ldr	r3, [r4, #24]
 80145b2:	b1db      	cbz	r3, 80145ec <_scanf_chars+0x68>
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d107      	bne.n	80145c8 <_scanf_chars+0x44>
 80145b8:	682b      	ldr	r3, [r5, #0]
 80145ba:	6962      	ldr	r2, [r4, #20]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	5cd3      	ldrb	r3, [r2, r3]
 80145c0:	b9a3      	cbnz	r3, 80145ec <_scanf_chars+0x68>
 80145c2:	2e00      	cmp	r6, #0
 80145c4:	d132      	bne.n	801462c <_scanf_chars+0xa8>
 80145c6:	e006      	b.n	80145d6 <_scanf_chars+0x52>
 80145c8:	2b02      	cmp	r3, #2
 80145ca:	d007      	beq.n	80145dc <_scanf_chars+0x58>
 80145cc:	2e00      	cmp	r6, #0
 80145ce:	d12d      	bne.n	801462c <_scanf_chars+0xa8>
 80145d0:	69a3      	ldr	r3, [r4, #24]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d12a      	bne.n	801462c <_scanf_chars+0xa8>
 80145d6:	2001      	movs	r0, #1
 80145d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145dc:	f7ff f896 	bl	801370c <__locale_ctype_ptr>
 80145e0:	682b      	ldr	r3, [r5, #0]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	4418      	add	r0, r3
 80145e6:	7843      	ldrb	r3, [r0, #1]
 80145e8:	071b      	lsls	r3, r3, #28
 80145ea:	d4ef      	bmi.n	80145cc <_scanf_chars+0x48>
 80145ec:	6823      	ldr	r3, [r4, #0]
 80145ee:	06da      	lsls	r2, r3, #27
 80145f0:	bf5e      	ittt	pl
 80145f2:	682b      	ldrpl	r3, [r5, #0]
 80145f4:	781b      	ldrbpl	r3, [r3, #0]
 80145f6:	703b      	strbpl	r3, [r7, #0]
 80145f8:	682a      	ldr	r2, [r5, #0]
 80145fa:	686b      	ldr	r3, [r5, #4]
 80145fc:	f102 0201 	add.w	r2, r2, #1
 8014600:	602a      	str	r2, [r5, #0]
 8014602:	68a2      	ldr	r2, [r4, #8]
 8014604:	f103 33ff 	add.w	r3, r3, #4294967295
 8014608:	f102 32ff 	add.w	r2, r2, #4294967295
 801460c:	606b      	str	r3, [r5, #4]
 801460e:	f106 0601 	add.w	r6, r6, #1
 8014612:	bf58      	it	pl
 8014614:	3701      	addpl	r7, #1
 8014616:	60a2      	str	r2, [r4, #8]
 8014618:	b142      	cbz	r2, 801462c <_scanf_chars+0xa8>
 801461a:	2b00      	cmp	r3, #0
 801461c:	dcc8      	bgt.n	80145b0 <_scanf_chars+0x2c>
 801461e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014622:	4629      	mov	r1, r5
 8014624:	4640      	mov	r0, r8
 8014626:	4798      	blx	r3
 8014628:	2800      	cmp	r0, #0
 801462a:	d0c1      	beq.n	80145b0 <_scanf_chars+0x2c>
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	f013 0310 	ands.w	r3, r3, #16
 8014632:	d105      	bne.n	8014640 <_scanf_chars+0xbc>
 8014634:	68e2      	ldr	r2, [r4, #12]
 8014636:	3201      	adds	r2, #1
 8014638:	60e2      	str	r2, [r4, #12]
 801463a:	69a2      	ldr	r2, [r4, #24]
 801463c:	b102      	cbz	r2, 8014640 <_scanf_chars+0xbc>
 801463e:	703b      	strb	r3, [r7, #0]
 8014640:	6923      	ldr	r3, [r4, #16]
 8014642:	441e      	add	r6, r3
 8014644:	6126      	str	r6, [r4, #16]
 8014646:	2000      	movs	r0, #0
 8014648:	e7c6      	b.n	80145d8 <_scanf_chars+0x54>
	...

0801464c <_scanf_i>:
 801464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014650:	469a      	mov	sl, r3
 8014652:	4b74      	ldr	r3, [pc, #464]	; (8014824 <_scanf_i+0x1d8>)
 8014654:	460c      	mov	r4, r1
 8014656:	4683      	mov	fp, r0
 8014658:	4616      	mov	r6, r2
 801465a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801465e:	b087      	sub	sp, #28
 8014660:	ab03      	add	r3, sp, #12
 8014662:	68a7      	ldr	r7, [r4, #8]
 8014664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014668:	4b6f      	ldr	r3, [pc, #444]	; (8014828 <_scanf_i+0x1dc>)
 801466a:	69a1      	ldr	r1, [r4, #24]
 801466c:	4a6f      	ldr	r2, [pc, #444]	; (801482c <_scanf_i+0x1e0>)
 801466e:	2903      	cmp	r1, #3
 8014670:	bf08      	it	eq
 8014672:	461a      	moveq	r2, r3
 8014674:	1e7b      	subs	r3, r7, #1
 8014676:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801467a:	bf84      	itt	hi
 801467c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014680:	60a3      	strhi	r3, [r4, #8]
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	9200      	str	r2, [sp, #0]
 8014686:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801468a:	bf88      	it	hi
 801468c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014690:	f104 091c 	add.w	r9, r4, #28
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	bf8c      	ite	hi
 8014698:	197f      	addhi	r7, r7, r5
 801469a:	2700      	movls	r7, #0
 801469c:	464b      	mov	r3, r9
 801469e:	f04f 0800 	mov.w	r8, #0
 80146a2:	9301      	str	r3, [sp, #4]
 80146a4:	6831      	ldr	r1, [r6, #0]
 80146a6:	ab03      	add	r3, sp, #12
 80146a8:	2202      	movs	r2, #2
 80146aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80146ae:	7809      	ldrb	r1, [r1, #0]
 80146b0:	f7eb fda6 	bl	8000200 <memchr>
 80146b4:	9b01      	ldr	r3, [sp, #4]
 80146b6:	b330      	cbz	r0, 8014706 <_scanf_i+0xba>
 80146b8:	f1b8 0f01 	cmp.w	r8, #1
 80146bc:	d15a      	bne.n	8014774 <_scanf_i+0x128>
 80146be:	6862      	ldr	r2, [r4, #4]
 80146c0:	b92a      	cbnz	r2, 80146ce <_scanf_i+0x82>
 80146c2:	6822      	ldr	r2, [r4, #0]
 80146c4:	2108      	movs	r1, #8
 80146c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80146ca:	6061      	str	r1, [r4, #4]
 80146cc:	6022      	str	r2, [r4, #0]
 80146ce:	6822      	ldr	r2, [r4, #0]
 80146d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80146d4:	6022      	str	r2, [r4, #0]
 80146d6:	68a2      	ldr	r2, [r4, #8]
 80146d8:	1e51      	subs	r1, r2, #1
 80146da:	60a1      	str	r1, [r4, #8]
 80146dc:	b19a      	cbz	r2, 8014706 <_scanf_i+0xba>
 80146de:	6832      	ldr	r2, [r6, #0]
 80146e0:	1c51      	adds	r1, r2, #1
 80146e2:	6031      	str	r1, [r6, #0]
 80146e4:	7812      	ldrb	r2, [r2, #0]
 80146e6:	701a      	strb	r2, [r3, #0]
 80146e8:	1c5d      	adds	r5, r3, #1
 80146ea:	6873      	ldr	r3, [r6, #4]
 80146ec:	3b01      	subs	r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	6073      	str	r3, [r6, #4]
 80146f2:	dc07      	bgt.n	8014704 <_scanf_i+0xb8>
 80146f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80146f8:	4631      	mov	r1, r6
 80146fa:	4658      	mov	r0, fp
 80146fc:	4798      	blx	r3
 80146fe:	2800      	cmp	r0, #0
 8014700:	f040 8086 	bne.w	8014810 <_scanf_i+0x1c4>
 8014704:	462b      	mov	r3, r5
 8014706:	f108 0801 	add.w	r8, r8, #1
 801470a:	f1b8 0f03 	cmp.w	r8, #3
 801470e:	d1c8      	bne.n	80146a2 <_scanf_i+0x56>
 8014710:	6862      	ldr	r2, [r4, #4]
 8014712:	b90a      	cbnz	r2, 8014718 <_scanf_i+0xcc>
 8014714:	220a      	movs	r2, #10
 8014716:	6062      	str	r2, [r4, #4]
 8014718:	6862      	ldr	r2, [r4, #4]
 801471a:	4945      	ldr	r1, [pc, #276]	; (8014830 <_scanf_i+0x1e4>)
 801471c:	6960      	ldr	r0, [r4, #20]
 801471e:	9301      	str	r3, [sp, #4]
 8014720:	1a89      	subs	r1, r1, r2
 8014722:	f000 f887 	bl	8014834 <__sccl>
 8014726:	9b01      	ldr	r3, [sp, #4]
 8014728:	f04f 0800 	mov.w	r8, #0
 801472c:	461d      	mov	r5, r3
 801472e:	68a3      	ldr	r3, [r4, #8]
 8014730:	6822      	ldr	r2, [r4, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d03a      	beq.n	80147ac <_scanf_i+0x160>
 8014736:	6831      	ldr	r1, [r6, #0]
 8014738:	6960      	ldr	r0, [r4, #20]
 801473a:	f891 c000 	ldrb.w	ip, [r1]
 801473e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014742:	2800      	cmp	r0, #0
 8014744:	d032      	beq.n	80147ac <_scanf_i+0x160>
 8014746:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801474a:	d121      	bne.n	8014790 <_scanf_i+0x144>
 801474c:	0510      	lsls	r0, r2, #20
 801474e:	d51f      	bpl.n	8014790 <_scanf_i+0x144>
 8014750:	f108 0801 	add.w	r8, r8, #1
 8014754:	b117      	cbz	r7, 801475c <_scanf_i+0x110>
 8014756:	3301      	adds	r3, #1
 8014758:	3f01      	subs	r7, #1
 801475a:	60a3      	str	r3, [r4, #8]
 801475c:	6873      	ldr	r3, [r6, #4]
 801475e:	3b01      	subs	r3, #1
 8014760:	2b00      	cmp	r3, #0
 8014762:	6073      	str	r3, [r6, #4]
 8014764:	dd1b      	ble.n	801479e <_scanf_i+0x152>
 8014766:	6833      	ldr	r3, [r6, #0]
 8014768:	3301      	adds	r3, #1
 801476a:	6033      	str	r3, [r6, #0]
 801476c:	68a3      	ldr	r3, [r4, #8]
 801476e:	3b01      	subs	r3, #1
 8014770:	60a3      	str	r3, [r4, #8]
 8014772:	e7dc      	b.n	801472e <_scanf_i+0xe2>
 8014774:	f1b8 0f02 	cmp.w	r8, #2
 8014778:	d1ad      	bne.n	80146d6 <_scanf_i+0x8a>
 801477a:	6822      	ldr	r2, [r4, #0]
 801477c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014780:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014784:	d1bf      	bne.n	8014706 <_scanf_i+0xba>
 8014786:	2110      	movs	r1, #16
 8014788:	6061      	str	r1, [r4, #4]
 801478a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801478e:	e7a1      	b.n	80146d4 <_scanf_i+0x88>
 8014790:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014794:	6022      	str	r2, [r4, #0]
 8014796:	780b      	ldrb	r3, [r1, #0]
 8014798:	702b      	strb	r3, [r5, #0]
 801479a:	3501      	adds	r5, #1
 801479c:	e7de      	b.n	801475c <_scanf_i+0x110>
 801479e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80147a2:	4631      	mov	r1, r6
 80147a4:	4658      	mov	r0, fp
 80147a6:	4798      	blx	r3
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d0df      	beq.n	801476c <_scanf_i+0x120>
 80147ac:	6823      	ldr	r3, [r4, #0]
 80147ae:	05d9      	lsls	r1, r3, #23
 80147b0:	d50c      	bpl.n	80147cc <_scanf_i+0x180>
 80147b2:	454d      	cmp	r5, r9
 80147b4:	d908      	bls.n	80147c8 <_scanf_i+0x17c>
 80147b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80147ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147be:	4632      	mov	r2, r6
 80147c0:	4658      	mov	r0, fp
 80147c2:	4798      	blx	r3
 80147c4:	1e6f      	subs	r7, r5, #1
 80147c6:	463d      	mov	r5, r7
 80147c8:	454d      	cmp	r5, r9
 80147ca:	d029      	beq.n	8014820 <_scanf_i+0x1d4>
 80147cc:	6822      	ldr	r2, [r4, #0]
 80147ce:	f012 0210 	ands.w	r2, r2, #16
 80147d2:	d113      	bne.n	80147fc <_scanf_i+0x1b0>
 80147d4:	702a      	strb	r2, [r5, #0]
 80147d6:	6863      	ldr	r3, [r4, #4]
 80147d8:	9e00      	ldr	r6, [sp, #0]
 80147da:	4649      	mov	r1, r9
 80147dc:	4658      	mov	r0, fp
 80147de:	47b0      	blx	r6
 80147e0:	f8da 3000 	ldr.w	r3, [sl]
 80147e4:	6821      	ldr	r1, [r4, #0]
 80147e6:	1d1a      	adds	r2, r3, #4
 80147e8:	f8ca 2000 	str.w	r2, [sl]
 80147ec:	f011 0f20 	tst.w	r1, #32
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	d010      	beq.n	8014816 <_scanf_i+0x1ca>
 80147f4:	6018      	str	r0, [r3, #0]
 80147f6:	68e3      	ldr	r3, [r4, #12]
 80147f8:	3301      	adds	r3, #1
 80147fa:	60e3      	str	r3, [r4, #12]
 80147fc:	eba5 0509 	sub.w	r5, r5, r9
 8014800:	44a8      	add	r8, r5
 8014802:	6925      	ldr	r5, [r4, #16]
 8014804:	4445      	add	r5, r8
 8014806:	6125      	str	r5, [r4, #16]
 8014808:	2000      	movs	r0, #0
 801480a:	b007      	add	sp, #28
 801480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014810:	f04f 0800 	mov.w	r8, #0
 8014814:	e7ca      	b.n	80147ac <_scanf_i+0x160>
 8014816:	07ca      	lsls	r2, r1, #31
 8014818:	bf4c      	ite	mi
 801481a:	8018      	strhmi	r0, [r3, #0]
 801481c:	6018      	strpl	r0, [r3, #0]
 801481e:	e7ea      	b.n	80147f6 <_scanf_i+0x1aa>
 8014820:	2001      	movs	r0, #1
 8014822:	e7f2      	b.n	801480a <_scanf_i+0x1be>
 8014824:	08015ee4 	.word	0x08015ee4
 8014828:	08012409 	.word	0x08012409
 801482c:	080149b1 	.word	0x080149b1
 8014830:	080160cd 	.word	0x080160cd

08014834 <__sccl>:
 8014834:	b570      	push	{r4, r5, r6, lr}
 8014836:	780b      	ldrb	r3, [r1, #0]
 8014838:	2b5e      	cmp	r3, #94	; 0x5e
 801483a:	bf13      	iteet	ne
 801483c:	1c4a      	addne	r2, r1, #1
 801483e:	1c8a      	addeq	r2, r1, #2
 8014840:	784b      	ldrbeq	r3, [r1, #1]
 8014842:	2100      	movne	r1, #0
 8014844:	bf08      	it	eq
 8014846:	2101      	moveq	r1, #1
 8014848:	1e44      	subs	r4, r0, #1
 801484a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801484e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8014852:	42ac      	cmp	r4, r5
 8014854:	d1fb      	bne.n	801484e <__sccl+0x1a>
 8014856:	b913      	cbnz	r3, 801485e <__sccl+0x2a>
 8014858:	3a01      	subs	r2, #1
 801485a:	4610      	mov	r0, r2
 801485c:	bd70      	pop	{r4, r5, r6, pc}
 801485e:	f081 0401 	eor.w	r4, r1, #1
 8014862:	54c4      	strb	r4, [r0, r3]
 8014864:	1c51      	adds	r1, r2, #1
 8014866:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801486a:	2d2d      	cmp	r5, #45	; 0x2d
 801486c:	f101 36ff 	add.w	r6, r1, #4294967295
 8014870:	460a      	mov	r2, r1
 8014872:	d006      	beq.n	8014882 <__sccl+0x4e>
 8014874:	2d5d      	cmp	r5, #93	; 0x5d
 8014876:	d0f0      	beq.n	801485a <__sccl+0x26>
 8014878:	b90d      	cbnz	r5, 801487e <__sccl+0x4a>
 801487a:	4632      	mov	r2, r6
 801487c:	e7ed      	b.n	801485a <__sccl+0x26>
 801487e:	462b      	mov	r3, r5
 8014880:	e7ef      	b.n	8014862 <__sccl+0x2e>
 8014882:	780e      	ldrb	r6, [r1, #0]
 8014884:	2e5d      	cmp	r6, #93	; 0x5d
 8014886:	d0fa      	beq.n	801487e <__sccl+0x4a>
 8014888:	42b3      	cmp	r3, r6
 801488a:	dcf8      	bgt.n	801487e <__sccl+0x4a>
 801488c:	3301      	adds	r3, #1
 801488e:	429e      	cmp	r6, r3
 8014890:	54c4      	strb	r4, [r0, r3]
 8014892:	dcfb      	bgt.n	801488c <__sccl+0x58>
 8014894:	3102      	adds	r1, #2
 8014896:	e7e6      	b.n	8014866 <__sccl+0x32>

08014898 <strncmp>:
 8014898:	b510      	push	{r4, lr}
 801489a:	b16a      	cbz	r2, 80148b8 <strncmp+0x20>
 801489c:	3901      	subs	r1, #1
 801489e:	1884      	adds	r4, r0, r2
 80148a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80148a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80148a8:	4293      	cmp	r3, r2
 80148aa:	d103      	bne.n	80148b4 <strncmp+0x1c>
 80148ac:	42a0      	cmp	r0, r4
 80148ae:	d001      	beq.n	80148b4 <strncmp+0x1c>
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d1f5      	bne.n	80148a0 <strncmp+0x8>
 80148b4:	1a98      	subs	r0, r3, r2
 80148b6:	bd10      	pop	{r4, pc}
 80148b8:	4610      	mov	r0, r2
 80148ba:	e7fc      	b.n	80148b6 <strncmp+0x1e>

080148bc <_strtoul_l.isra.0>:
 80148bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148c0:	4680      	mov	r8, r0
 80148c2:	4689      	mov	r9, r1
 80148c4:	4692      	mov	sl, r2
 80148c6:	461e      	mov	r6, r3
 80148c8:	460f      	mov	r7, r1
 80148ca:	463d      	mov	r5, r7
 80148cc:	9808      	ldr	r0, [sp, #32]
 80148ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148d2:	f7fe ff17 	bl	8013704 <__locale_ctype_ptr_l>
 80148d6:	4420      	add	r0, r4
 80148d8:	7843      	ldrb	r3, [r0, #1]
 80148da:	f013 0308 	ands.w	r3, r3, #8
 80148de:	d130      	bne.n	8014942 <_strtoul_l.isra.0+0x86>
 80148e0:	2c2d      	cmp	r4, #45	; 0x2d
 80148e2:	d130      	bne.n	8014946 <_strtoul_l.isra.0+0x8a>
 80148e4:	787c      	ldrb	r4, [r7, #1]
 80148e6:	1cbd      	adds	r5, r7, #2
 80148e8:	2101      	movs	r1, #1
 80148ea:	2e00      	cmp	r6, #0
 80148ec:	d05c      	beq.n	80149a8 <_strtoul_l.isra.0+0xec>
 80148ee:	2e10      	cmp	r6, #16
 80148f0:	d109      	bne.n	8014906 <_strtoul_l.isra.0+0x4a>
 80148f2:	2c30      	cmp	r4, #48	; 0x30
 80148f4:	d107      	bne.n	8014906 <_strtoul_l.isra.0+0x4a>
 80148f6:	782b      	ldrb	r3, [r5, #0]
 80148f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80148fc:	2b58      	cmp	r3, #88	; 0x58
 80148fe:	d14e      	bne.n	801499e <_strtoul_l.isra.0+0xe2>
 8014900:	786c      	ldrb	r4, [r5, #1]
 8014902:	2610      	movs	r6, #16
 8014904:	3502      	adds	r5, #2
 8014906:	f04f 32ff 	mov.w	r2, #4294967295
 801490a:	2300      	movs	r3, #0
 801490c:	fbb2 f2f6 	udiv	r2, r2, r6
 8014910:	fb06 fc02 	mul.w	ip, r6, r2
 8014914:	ea6f 0c0c 	mvn.w	ip, ip
 8014918:	4618      	mov	r0, r3
 801491a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801491e:	2f09      	cmp	r7, #9
 8014920:	d817      	bhi.n	8014952 <_strtoul_l.isra.0+0x96>
 8014922:	463c      	mov	r4, r7
 8014924:	42a6      	cmp	r6, r4
 8014926:	dd23      	ble.n	8014970 <_strtoul_l.isra.0+0xb4>
 8014928:	2b00      	cmp	r3, #0
 801492a:	db1e      	blt.n	801496a <_strtoul_l.isra.0+0xae>
 801492c:	4282      	cmp	r2, r0
 801492e:	d31c      	bcc.n	801496a <_strtoul_l.isra.0+0xae>
 8014930:	d101      	bne.n	8014936 <_strtoul_l.isra.0+0x7a>
 8014932:	45a4      	cmp	ip, r4
 8014934:	db19      	blt.n	801496a <_strtoul_l.isra.0+0xae>
 8014936:	fb00 4006 	mla	r0, r0, r6, r4
 801493a:	2301      	movs	r3, #1
 801493c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014940:	e7eb      	b.n	801491a <_strtoul_l.isra.0+0x5e>
 8014942:	462f      	mov	r7, r5
 8014944:	e7c1      	b.n	80148ca <_strtoul_l.isra.0+0xe>
 8014946:	2c2b      	cmp	r4, #43	; 0x2b
 8014948:	bf04      	itt	eq
 801494a:	1cbd      	addeq	r5, r7, #2
 801494c:	787c      	ldrbeq	r4, [r7, #1]
 801494e:	4619      	mov	r1, r3
 8014950:	e7cb      	b.n	80148ea <_strtoul_l.isra.0+0x2e>
 8014952:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014956:	2f19      	cmp	r7, #25
 8014958:	d801      	bhi.n	801495e <_strtoul_l.isra.0+0xa2>
 801495a:	3c37      	subs	r4, #55	; 0x37
 801495c:	e7e2      	b.n	8014924 <_strtoul_l.isra.0+0x68>
 801495e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014962:	2f19      	cmp	r7, #25
 8014964:	d804      	bhi.n	8014970 <_strtoul_l.isra.0+0xb4>
 8014966:	3c57      	subs	r4, #87	; 0x57
 8014968:	e7dc      	b.n	8014924 <_strtoul_l.isra.0+0x68>
 801496a:	f04f 33ff 	mov.w	r3, #4294967295
 801496e:	e7e5      	b.n	801493c <_strtoul_l.isra.0+0x80>
 8014970:	2b00      	cmp	r3, #0
 8014972:	da09      	bge.n	8014988 <_strtoul_l.isra.0+0xcc>
 8014974:	2322      	movs	r3, #34	; 0x22
 8014976:	f8c8 3000 	str.w	r3, [r8]
 801497a:	f04f 30ff 	mov.w	r0, #4294967295
 801497e:	f1ba 0f00 	cmp.w	sl, #0
 8014982:	d107      	bne.n	8014994 <_strtoul_l.isra.0+0xd8>
 8014984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014988:	b101      	cbz	r1, 801498c <_strtoul_l.isra.0+0xd0>
 801498a:	4240      	negs	r0, r0
 801498c:	f1ba 0f00 	cmp.w	sl, #0
 8014990:	d0f8      	beq.n	8014984 <_strtoul_l.isra.0+0xc8>
 8014992:	b10b      	cbz	r3, 8014998 <_strtoul_l.isra.0+0xdc>
 8014994:	f105 39ff 	add.w	r9, r5, #4294967295
 8014998:	f8ca 9000 	str.w	r9, [sl]
 801499c:	e7f2      	b.n	8014984 <_strtoul_l.isra.0+0xc8>
 801499e:	2430      	movs	r4, #48	; 0x30
 80149a0:	2e00      	cmp	r6, #0
 80149a2:	d1b0      	bne.n	8014906 <_strtoul_l.isra.0+0x4a>
 80149a4:	2608      	movs	r6, #8
 80149a6:	e7ae      	b.n	8014906 <_strtoul_l.isra.0+0x4a>
 80149a8:	2c30      	cmp	r4, #48	; 0x30
 80149aa:	d0a4      	beq.n	80148f6 <_strtoul_l.isra.0+0x3a>
 80149ac:	260a      	movs	r6, #10
 80149ae:	e7aa      	b.n	8014906 <_strtoul_l.isra.0+0x4a>

080149b0 <_strtoul_r>:
 80149b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149b2:	4c06      	ldr	r4, [pc, #24]	; (80149cc <_strtoul_r+0x1c>)
 80149b4:	4d06      	ldr	r5, [pc, #24]	; (80149d0 <_strtoul_r+0x20>)
 80149b6:	6824      	ldr	r4, [r4, #0]
 80149b8:	6a24      	ldr	r4, [r4, #32]
 80149ba:	2c00      	cmp	r4, #0
 80149bc:	bf08      	it	eq
 80149be:	462c      	moveq	r4, r5
 80149c0:	9400      	str	r4, [sp, #0]
 80149c2:	f7ff ff7b 	bl	80148bc <_strtoul_l.isra.0>
 80149c6:	b003      	add	sp, #12
 80149c8:	bd30      	pop	{r4, r5, pc}
 80149ca:	bf00      	nop
 80149cc:	20000e34 	.word	0x20000e34
 80149d0:	20000e98 	.word	0x20000e98

080149d4 <__submore>:
 80149d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d8:	460c      	mov	r4, r1
 80149da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80149dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149e0:	4299      	cmp	r1, r3
 80149e2:	d11d      	bne.n	8014a20 <__submore+0x4c>
 80149e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80149e8:	f7fb ff34 	bl	8010854 <_malloc_r>
 80149ec:	b918      	cbnz	r0, 80149f6 <__submore+0x22>
 80149ee:	f04f 30ff 	mov.w	r0, #4294967295
 80149f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80149fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014a00:	6360      	str	r0, [r4, #52]	; 0x34
 8014a02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014a06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014a0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014a0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014a12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014a16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014a1a:	6020      	str	r0, [r4, #0]
 8014a1c:	2000      	movs	r0, #0
 8014a1e:	e7e8      	b.n	80149f2 <__submore+0x1e>
 8014a20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014a22:	0077      	lsls	r7, r6, #1
 8014a24:	463a      	mov	r2, r7
 8014a26:	f000 f81c 	bl	8014a62 <_realloc_r>
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d0de      	beq.n	80149ee <__submore+0x1a>
 8014a30:	eb00 0806 	add.w	r8, r0, r6
 8014a34:	4601      	mov	r1, r0
 8014a36:	4632      	mov	r2, r6
 8014a38:	4640      	mov	r0, r8
 8014a3a:	f7fb fe91 	bl	8010760 <memcpy>
 8014a3e:	f8c4 8000 	str.w	r8, [r4]
 8014a42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014a46:	e7e9      	b.n	8014a1c <__submore+0x48>

08014a48 <__ascii_wctomb>:
 8014a48:	b149      	cbz	r1, 8014a5e <__ascii_wctomb+0x16>
 8014a4a:	2aff      	cmp	r2, #255	; 0xff
 8014a4c:	bf85      	ittet	hi
 8014a4e:	238a      	movhi	r3, #138	; 0x8a
 8014a50:	6003      	strhi	r3, [r0, #0]
 8014a52:	700a      	strbls	r2, [r1, #0]
 8014a54:	f04f 30ff 	movhi.w	r0, #4294967295
 8014a58:	bf98      	it	ls
 8014a5a:	2001      	movls	r0, #1
 8014a5c:	4770      	bx	lr
 8014a5e:	4608      	mov	r0, r1
 8014a60:	4770      	bx	lr

08014a62 <_realloc_r>:
 8014a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a64:	4607      	mov	r7, r0
 8014a66:	4614      	mov	r4, r2
 8014a68:	460e      	mov	r6, r1
 8014a6a:	b921      	cbnz	r1, 8014a76 <_realloc_r+0x14>
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a72:	f7fb beef 	b.w	8010854 <_malloc_r>
 8014a76:	b922      	cbnz	r2, 8014a82 <_realloc_r+0x20>
 8014a78:	f7fb fe9e 	bl	80107b8 <_free_r>
 8014a7c:	4625      	mov	r5, r4
 8014a7e:	4628      	mov	r0, r5
 8014a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a82:	f000 f814 	bl	8014aae <_malloc_usable_size_r>
 8014a86:	42a0      	cmp	r0, r4
 8014a88:	d20f      	bcs.n	8014aaa <_realloc_r+0x48>
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	4638      	mov	r0, r7
 8014a8e:	f7fb fee1 	bl	8010854 <_malloc_r>
 8014a92:	4605      	mov	r5, r0
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d0f2      	beq.n	8014a7e <_realloc_r+0x1c>
 8014a98:	4631      	mov	r1, r6
 8014a9a:	4622      	mov	r2, r4
 8014a9c:	f7fb fe60 	bl	8010760 <memcpy>
 8014aa0:	4631      	mov	r1, r6
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	f7fb fe88 	bl	80107b8 <_free_r>
 8014aa8:	e7e9      	b.n	8014a7e <_realloc_r+0x1c>
 8014aaa:	4635      	mov	r5, r6
 8014aac:	e7e7      	b.n	8014a7e <_realloc_r+0x1c>

08014aae <_malloc_usable_size_r>:
 8014aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ab2:	1f18      	subs	r0, r3, #4
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	bfbc      	itt	lt
 8014ab8:	580b      	ldrlt	r3, [r1, r0]
 8014aba:	18c0      	addlt	r0, r0, r3
 8014abc:	4770      	bx	lr
	...

08014ac0 <ceilf>:
 8014ac0:	ee10 3a10 	vmov	r3, s0
 8014ac4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014ac8:	0dca      	lsrs	r2, r1, #23
 8014aca:	3a7f      	subs	r2, #127	; 0x7f
 8014acc:	2a16      	cmp	r2, #22
 8014ace:	dc2a      	bgt.n	8014b26 <ceilf+0x66>
 8014ad0:	2a00      	cmp	r2, #0
 8014ad2:	da11      	bge.n	8014af8 <ceilf+0x38>
 8014ad4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014b38 <ceilf+0x78>
 8014ad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014adc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae4:	dd05      	ble.n	8014af2 <ceilf+0x32>
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	db23      	blt.n	8014b32 <ceilf+0x72>
 8014aea:	2900      	cmp	r1, #0
 8014aec:	bf18      	it	ne
 8014aee:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8014af2:	ee00 3a10 	vmov	s0, r3
 8014af6:	4770      	bx	lr
 8014af8:	4910      	ldr	r1, [pc, #64]	; (8014b3c <ceilf+0x7c>)
 8014afa:	4111      	asrs	r1, r2
 8014afc:	420b      	tst	r3, r1
 8014afe:	d0fa      	beq.n	8014af6 <ceilf+0x36>
 8014b00:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014b38 <ceilf+0x78>
 8014b04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b10:	ddef      	ble.n	8014af2 <ceilf+0x32>
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	bfc2      	ittt	gt
 8014b16:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8014b1a:	fa40 f202 	asrgt.w	r2, r0, r2
 8014b1e:	189b      	addgt	r3, r3, r2
 8014b20:	ea23 0301 	bic.w	r3, r3, r1
 8014b24:	e7e5      	b.n	8014af2 <ceilf+0x32>
 8014b26:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b2a:	d3e4      	bcc.n	8014af6 <ceilf+0x36>
 8014b2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b30:	4770      	bx	lr
 8014b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b36:	e7dc      	b.n	8014af2 <ceilf+0x32>
 8014b38:	7149f2ca 	.word	0x7149f2ca
 8014b3c:	007fffff 	.word	0x007fffff

08014b40 <cosf>:
 8014b40:	ee10 3a10 	vmov	r3, s0
 8014b44:	b507      	push	{r0, r1, r2, lr}
 8014b46:	4a1c      	ldr	r2, [pc, #112]	; (8014bb8 <cosf+0x78>)
 8014b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	dc04      	bgt.n	8014b5a <cosf+0x1a>
 8014b50:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8014bbc <cosf+0x7c>
 8014b54:	f000 faa6 	bl	80150a4 <__kernel_cosf>
 8014b58:	e004      	b.n	8014b64 <cosf+0x24>
 8014b5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b5e:	db04      	blt.n	8014b6a <cosf+0x2a>
 8014b60:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014b64:	b003      	add	sp, #12
 8014b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b6a:	4668      	mov	r0, sp
 8014b6c:	f000 f96a 	bl	8014e44 <__ieee754_rem_pio2f>
 8014b70:	f000 0003 	and.w	r0, r0, #3
 8014b74:	2801      	cmp	r0, #1
 8014b76:	d007      	beq.n	8014b88 <cosf+0x48>
 8014b78:	2802      	cmp	r0, #2
 8014b7a:	d00e      	beq.n	8014b9a <cosf+0x5a>
 8014b7c:	b9a0      	cbnz	r0, 8014ba8 <cosf+0x68>
 8014b7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b82:	ed9d 0a00 	vldr	s0, [sp]
 8014b86:	e7e5      	b.n	8014b54 <cosf+0x14>
 8014b88:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b8c:	ed9d 0a00 	vldr	s0, [sp]
 8014b90:	f000 fd68 	bl	8015664 <__kernel_sinf>
 8014b94:	eeb1 0a40 	vneg.f32	s0, s0
 8014b98:	e7e4      	b.n	8014b64 <cosf+0x24>
 8014b9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b9e:	ed9d 0a00 	vldr	s0, [sp]
 8014ba2:	f000 fa7f 	bl	80150a4 <__kernel_cosf>
 8014ba6:	e7f5      	b.n	8014b94 <cosf+0x54>
 8014ba8:	2001      	movs	r0, #1
 8014baa:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bae:	ed9d 0a00 	vldr	s0, [sp]
 8014bb2:	f000 fd57 	bl	8015664 <__kernel_sinf>
 8014bb6:	e7d5      	b.n	8014b64 <cosf+0x24>
 8014bb8:	3f490fd8 	.word	0x3f490fd8
 8014bbc:	00000000 	.word	0x00000000

08014bc0 <sinf>:
 8014bc0:	ee10 3a10 	vmov	r3, s0
 8014bc4:	b507      	push	{r0, r1, r2, lr}
 8014bc6:	4a1d      	ldr	r2, [pc, #116]	; (8014c3c <sinf+0x7c>)
 8014bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	dc05      	bgt.n	8014bdc <sinf+0x1c>
 8014bd0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8014c40 <sinf+0x80>
 8014bd4:	2000      	movs	r0, #0
 8014bd6:	f000 fd45 	bl	8015664 <__kernel_sinf>
 8014bda:	e004      	b.n	8014be6 <sinf+0x26>
 8014bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014be0:	db04      	blt.n	8014bec <sinf+0x2c>
 8014be2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014be6:	b003      	add	sp, #12
 8014be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bec:	4668      	mov	r0, sp
 8014bee:	f000 f929 	bl	8014e44 <__ieee754_rem_pio2f>
 8014bf2:	f000 0003 	and.w	r0, r0, #3
 8014bf6:	2801      	cmp	r0, #1
 8014bf8:	d008      	beq.n	8014c0c <sinf+0x4c>
 8014bfa:	2802      	cmp	r0, #2
 8014bfc:	d00d      	beq.n	8014c1a <sinf+0x5a>
 8014bfe:	b9b0      	cbnz	r0, 8014c2e <sinf+0x6e>
 8014c00:	2001      	movs	r0, #1
 8014c02:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c06:	ed9d 0a00 	vldr	s0, [sp]
 8014c0a:	e7e4      	b.n	8014bd6 <sinf+0x16>
 8014c0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c10:	ed9d 0a00 	vldr	s0, [sp]
 8014c14:	f000 fa46 	bl	80150a4 <__kernel_cosf>
 8014c18:	e7e5      	b.n	8014be6 <sinf+0x26>
 8014c1a:	2001      	movs	r0, #1
 8014c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c20:	ed9d 0a00 	vldr	s0, [sp]
 8014c24:	f000 fd1e 	bl	8015664 <__kernel_sinf>
 8014c28:	eeb1 0a40 	vneg.f32	s0, s0
 8014c2c:	e7db      	b.n	8014be6 <sinf+0x26>
 8014c2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c32:	ed9d 0a00 	vldr	s0, [sp]
 8014c36:	f000 fa35 	bl	80150a4 <__kernel_cosf>
 8014c3a:	e7f5      	b.n	8014c28 <sinf+0x68>
 8014c3c:	3f490fd8 	.word	0x3f490fd8
 8014c40:	00000000 	.word	0x00000000

08014c44 <atan2f>:
 8014c44:	f000 b850 	b.w	8014ce8 <__ieee754_atan2f>

08014c48 <sqrtf>:
 8014c48:	b510      	push	{r4, lr}
 8014c4a:	ed2d 8b02 	vpush	{d8}
 8014c4e:	b08a      	sub	sp, #40	; 0x28
 8014c50:	eeb0 8a40 	vmov.f32	s16, s0
 8014c54:	f000 fa22 	bl	801509c <__ieee754_sqrtf>
 8014c58:	4b21      	ldr	r3, [pc, #132]	; (8014ce0 <sqrtf+0x98>)
 8014c5a:	f993 4000 	ldrsb.w	r4, [r3]
 8014c5e:	1c63      	adds	r3, r4, #1
 8014c60:	d02c      	beq.n	8014cbc <sqrtf+0x74>
 8014c62:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6a:	d627      	bvs.n	8014cbc <sqrtf+0x74>
 8014c6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c74:	d522      	bpl.n	8014cbc <sqrtf+0x74>
 8014c76:	2301      	movs	r3, #1
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	4b1a      	ldr	r3, [pc, #104]	; (8014ce4 <sqrtf+0x9c>)
 8014c7c:	9301      	str	r3, [sp, #4]
 8014c7e:	ee18 0a10 	vmov	r0, s16
 8014c82:	2300      	movs	r3, #0
 8014c84:	9308      	str	r3, [sp, #32]
 8014c86:	f7eb fc6f 	bl	8000568 <__aeabi_f2d>
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c94:	2300      	movs	r3, #0
 8014c96:	b9ac      	cbnz	r4, 8014cc4 <sqrtf+0x7c>
 8014c98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c9c:	4668      	mov	r0, sp
 8014c9e:	f000 fd29 	bl	80156f4 <matherr>
 8014ca2:	b1b8      	cbz	r0, 8014cd4 <sqrtf+0x8c>
 8014ca4:	9b08      	ldr	r3, [sp, #32]
 8014ca6:	b11b      	cbz	r3, 8014cb0 <sqrtf+0x68>
 8014ca8:	f7fb fd20 	bl	80106ec <__errno>
 8014cac:	9b08      	ldr	r3, [sp, #32]
 8014cae:	6003      	str	r3, [r0, #0]
 8014cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014cb4:	f7eb ffa8 	bl	8000c08 <__aeabi_d2f>
 8014cb8:	ee00 0a10 	vmov	s0, r0
 8014cbc:	b00a      	add	sp, #40	; 0x28
 8014cbe:	ecbd 8b02 	vpop	{d8}
 8014cc2:	bd10      	pop	{r4, pc}
 8014cc4:	4610      	mov	r0, r2
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	f7eb fdd0 	bl	800086c <__aeabi_ddiv>
 8014ccc:	2c02      	cmp	r4, #2
 8014cce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014cd2:	d1e3      	bne.n	8014c9c <sqrtf+0x54>
 8014cd4:	f7fb fd0a 	bl	80106ec <__errno>
 8014cd8:	2321      	movs	r3, #33	; 0x21
 8014cda:	6003      	str	r3, [r0, #0]
 8014cdc:	e7e2      	b.n	8014ca4 <sqrtf+0x5c>
 8014cde:	bf00      	nop
 8014ce0:	20001004 	.word	0x20001004
 8014ce4:	0801623c 	.word	0x0801623c

08014ce8 <__ieee754_atan2f>:
 8014ce8:	ee10 2a90 	vmov	r2, s1
 8014cec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014cf0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014cf4:	b510      	push	{r4, lr}
 8014cf6:	eef0 7a40 	vmov.f32	s15, s0
 8014cfa:	dc06      	bgt.n	8014d0a <__ieee754_atan2f+0x22>
 8014cfc:	ee10 0a10 	vmov	r0, s0
 8014d00:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014d04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d08:	dd04      	ble.n	8014d14 <__ieee754_atan2f+0x2c>
 8014d0a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8014d12:	bd10      	pop	{r4, pc}
 8014d14:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014d18:	d103      	bne.n	8014d22 <__ieee754_atan2f+0x3a>
 8014d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1e:	f000 bceb 	b.w	80156f8 <atanf>
 8014d22:	1794      	asrs	r4, r2, #30
 8014d24:	f004 0402 	and.w	r4, r4, #2
 8014d28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014d2c:	b943      	cbnz	r3, 8014d40 <__ieee754_atan2f+0x58>
 8014d2e:	2c02      	cmp	r4, #2
 8014d30:	d06e      	beq.n	8014e10 <__ieee754_atan2f+0x128>
 8014d32:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014e18 <__ieee754_atan2f+0x130>
 8014d36:	2c03      	cmp	r4, #3
 8014d38:	bf08      	it	eq
 8014d3a:	eef0 7a47 	vmoveq.f32	s15, s14
 8014d3e:	e7e6      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014d40:	b941      	cbnz	r1, 8014d54 <__ieee754_atan2f+0x6c>
 8014d42:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014e1c <__ieee754_atan2f+0x134>
 8014d46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014e20 <__ieee754_atan2f+0x138>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	bfb8      	it	lt
 8014d4e:	eef0 7a47 	vmovlt.f32	s15, s14
 8014d52:	e7dc      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014d54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014d58:	d122      	bne.n	8014da0 <__ieee754_atan2f+0xb8>
 8014d5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d5e:	d112      	bne.n	8014d86 <__ieee754_atan2f+0x9e>
 8014d60:	2c02      	cmp	r4, #2
 8014d62:	d00a      	beq.n	8014d7a <__ieee754_atan2f+0x92>
 8014d64:	2c03      	cmp	r4, #3
 8014d66:	d00b      	beq.n	8014d80 <__ieee754_atan2f+0x98>
 8014d68:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014e24 <__ieee754_atan2f+0x13c>
 8014d6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8014e28 <__ieee754_atan2f+0x140>
 8014d70:	2c01      	cmp	r4, #1
 8014d72:	bf18      	it	ne
 8014d74:	eef0 7a47 	vmovne.f32	s15, s14
 8014d78:	e7c9      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014d7a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014e2c <__ieee754_atan2f+0x144>
 8014d7e:	e7c6      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014d80:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014e30 <__ieee754_atan2f+0x148>
 8014d84:	e7c3      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014d86:	2c02      	cmp	r4, #2
 8014d88:	d042      	beq.n	8014e10 <__ieee754_atan2f+0x128>
 8014d8a:	2c03      	cmp	r4, #3
 8014d8c:	d005      	beq.n	8014d9a <__ieee754_atan2f+0xb2>
 8014d8e:	2c01      	cmp	r4, #1
 8014d90:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014e34 <__ieee754_atan2f+0x14c>
 8014d94:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014e38 <__ieee754_atan2f+0x150>
 8014d98:	e7eb      	b.n	8014d72 <__ieee754_atan2f+0x8a>
 8014d9a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014e18 <__ieee754_atan2f+0x130>
 8014d9e:	e7b6      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014da0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014da4:	d0cd      	beq.n	8014d42 <__ieee754_atan2f+0x5a>
 8014da6:	1a5b      	subs	r3, r3, r1
 8014da8:	15db      	asrs	r3, r3, #23
 8014daa:	2b3c      	cmp	r3, #60	; 0x3c
 8014dac:	dc1a      	bgt.n	8014de4 <__ieee754_atan2f+0xfc>
 8014dae:	2a00      	cmp	r2, #0
 8014db0:	da01      	bge.n	8014db6 <__ieee754_atan2f+0xce>
 8014db2:	333c      	adds	r3, #60	; 0x3c
 8014db4:	db19      	blt.n	8014dea <__ieee754_atan2f+0x102>
 8014db6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014dba:	f000 fd71 	bl	80158a0 <fabsf>
 8014dbe:	f000 fc9b 	bl	80156f8 <atanf>
 8014dc2:	eef0 7a40 	vmov.f32	s15, s0
 8014dc6:	2c01      	cmp	r4, #1
 8014dc8:	d012      	beq.n	8014df0 <__ieee754_atan2f+0x108>
 8014dca:	2c02      	cmp	r4, #2
 8014dcc:	d017      	beq.n	8014dfe <__ieee754_atan2f+0x116>
 8014dce:	2c00      	cmp	r4, #0
 8014dd0:	d09d      	beq.n	8014d0e <__ieee754_atan2f+0x26>
 8014dd2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014e3c <__ieee754_atan2f+0x154>
 8014dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dda:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014e40 <__ieee754_atan2f+0x158>
 8014dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014de2:	e794      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014de4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e1c <__ieee754_atan2f+0x134>
 8014de8:	e7ed      	b.n	8014dc6 <__ieee754_atan2f+0xde>
 8014dea:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014e38 <__ieee754_atan2f+0x150>
 8014dee:	e7ea      	b.n	8014dc6 <__ieee754_atan2f+0xde>
 8014df0:	ee17 3a90 	vmov	r3, s15
 8014df4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014df8:	ee07 3a90 	vmov	s15, r3
 8014dfc:	e787      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014dfe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014e3c <__ieee754_atan2f+0x154>
 8014e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e06:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014e40 <__ieee754_atan2f+0x158>
 8014e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e0e:	e77e      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014e10:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014e40 <__ieee754_atan2f+0x158>
 8014e14:	e77b      	b.n	8014d0e <__ieee754_atan2f+0x26>
 8014e16:	bf00      	nop
 8014e18:	c0490fdb 	.word	0xc0490fdb
 8014e1c:	3fc90fdb 	.word	0x3fc90fdb
 8014e20:	bfc90fdb 	.word	0xbfc90fdb
 8014e24:	bf490fdb 	.word	0xbf490fdb
 8014e28:	3f490fdb 	.word	0x3f490fdb
 8014e2c:	4016cbe4 	.word	0x4016cbe4
 8014e30:	c016cbe4 	.word	0xc016cbe4
 8014e34:	80000000 	.word	0x80000000
 8014e38:	00000000 	.word	0x00000000
 8014e3c:	33bbbd2e 	.word	0x33bbbd2e
 8014e40:	40490fdb 	.word	0x40490fdb

08014e44 <__ieee754_rem_pio2f>:
 8014e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e46:	ee10 6a10 	vmov	r6, s0
 8014e4a:	4b86      	ldr	r3, [pc, #536]	; (8015064 <__ieee754_rem_pio2f+0x220>)
 8014e4c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8014e50:	429c      	cmp	r4, r3
 8014e52:	b087      	sub	sp, #28
 8014e54:	4605      	mov	r5, r0
 8014e56:	dc05      	bgt.n	8014e64 <__ieee754_rem_pio2f+0x20>
 8014e58:	2300      	movs	r3, #0
 8014e5a:	ed85 0a00 	vstr	s0, [r5]
 8014e5e:	6043      	str	r3, [r0, #4]
 8014e60:	2000      	movs	r0, #0
 8014e62:	e020      	b.n	8014ea6 <__ieee754_rem_pio2f+0x62>
 8014e64:	4b80      	ldr	r3, [pc, #512]	; (8015068 <__ieee754_rem_pio2f+0x224>)
 8014e66:	429c      	cmp	r4, r3
 8014e68:	dc38      	bgt.n	8014edc <__ieee754_rem_pio2f+0x98>
 8014e6a:	2e00      	cmp	r6, #0
 8014e6c:	f024 040f 	bic.w	r4, r4, #15
 8014e70:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801506c <__ieee754_rem_pio2f+0x228>
 8014e74:	4b7e      	ldr	r3, [pc, #504]	; (8015070 <__ieee754_rem_pio2f+0x22c>)
 8014e76:	dd18      	ble.n	8014eaa <__ieee754_rem_pio2f+0x66>
 8014e78:	429c      	cmp	r4, r3
 8014e7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014e7e:	bf09      	itett	eq
 8014e80:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8015074 <__ieee754_rem_pio2f+0x230>
 8014e84:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8015078 <__ieee754_rem_pio2f+0x234>
 8014e88:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014e8c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801507c <__ieee754_rem_pio2f+0x238>
 8014e90:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014e94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e98:	edc0 6a00 	vstr	s13, [r0]
 8014e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ea0:	edc0 7a01 	vstr	s15, [r0, #4]
 8014ea4:	2001      	movs	r0, #1
 8014ea6:	b007      	add	sp, #28
 8014ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eaa:	429c      	cmp	r4, r3
 8014eac:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014eb0:	bf09      	itett	eq
 8014eb2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8015074 <__ieee754_rem_pio2f+0x230>
 8014eb6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8015078 <__ieee754_rem_pio2f+0x234>
 8014eba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014ebe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801507c <__ieee754_rem_pio2f+0x238>
 8014ec2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014ec6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014eca:	edc0 6a00 	vstr	s13, [r0]
 8014ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ed2:	edc0 7a01 	vstr	s15, [r0, #4]
 8014ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eda:	e7e4      	b.n	8014ea6 <__ieee754_rem_pio2f+0x62>
 8014edc:	4b68      	ldr	r3, [pc, #416]	; (8015080 <__ieee754_rem_pio2f+0x23c>)
 8014ede:	429c      	cmp	r4, r3
 8014ee0:	dc71      	bgt.n	8014fc6 <__ieee754_rem_pio2f+0x182>
 8014ee2:	f000 fcdd 	bl	80158a0 <fabsf>
 8014ee6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015084 <__ieee754_rem_pio2f+0x240>
 8014eea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014eee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ef6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014efa:	ee17 0a90 	vmov	r0, s15
 8014efe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801506c <__ieee754_rem_pio2f+0x228>
 8014f02:	eeb1 7a46 	vneg.f32	s14, s12
 8014f06:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014f0a:	281f      	cmp	r0, #31
 8014f0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015078 <__ieee754_rem_pio2f+0x234>
 8014f10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014f14:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014f18:	ee16 3a90 	vmov	r3, s13
 8014f1c:	dc1c      	bgt.n	8014f58 <__ieee754_rem_pio2f+0x114>
 8014f1e:	1e47      	subs	r7, r0, #1
 8014f20:	4959      	ldr	r1, [pc, #356]	; (8015088 <__ieee754_rem_pio2f+0x244>)
 8014f22:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014f26:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8014f2a:	428a      	cmp	r2, r1
 8014f2c:	d014      	beq.n	8014f58 <__ieee754_rem_pio2f+0x114>
 8014f2e:	602b      	str	r3, [r5, #0]
 8014f30:	ed95 7a00 	vldr	s14, [r5]
 8014f34:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014f38:	2e00      	cmp	r6, #0
 8014f3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f3e:	ed85 0a01 	vstr	s0, [r5, #4]
 8014f42:	dab0      	bge.n	8014ea6 <__ieee754_rem_pio2f+0x62>
 8014f44:	eeb1 7a47 	vneg.f32	s14, s14
 8014f48:	eeb1 0a40 	vneg.f32	s0, s0
 8014f4c:	ed85 7a00 	vstr	s14, [r5]
 8014f50:	ed85 0a01 	vstr	s0, [r5, #4]
 8014f54:	4240      	negs	r0, r0
 8014f56:	e7a6      	b.n	8014ea6 <__ieee754_rem_pio2f+0x62>
 8014f58:	15e4      	asrs	r4, r4, #23
 8014f5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f5e:	1aa2      	subs	r2, r4, r2
 8014f60:	2a08      	cmp	r2, #8
 8014f62:	dde4      	ble.n	8014f2e <__ieee754_rem_pio2f+0xea>
 8014f64:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015074 <__ieee754_rem_pio2f+0x230>
 8014f68:	eef0 6a40 	vmov.f32	s13, s0
 8014f6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014f70:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014f74:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014f78:	eddf 7a40 	vldr	s15, [pc, #256]	; 801507c <__ieee754_rem_pio2f+0x238>
 8014f7c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8014f80:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8014f84:	eef0 7a40 	vmov.f32	s15, s0
 8014f88:	ee15 3a90 	vmov	r3, s11
 8014f8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f90:	1aa4      	subs	r4, r4, r2
 8014f92:	2c19      	cmp	r4, #25
 8014f94:	dc04      	bgt.n	8014fa0 <__ieee754_rem_pio2f+0x15c>
 8014f96:	edc5 5a00 	vstr	s11, [r5]
 8014f9a:	eeb0 0a66 	vmov.f32	s0, s13
 8014f9e:	e7c7      	b.n	8014f30 <__ieee754_rem_pio2f+0xec>
 8014fa0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801508c <__ieee754_rem_pio2f+0x248>
 8014fa4:	eeb0 0a66 	vmov.f32	s0, s13
 8014fa8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8014fac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014fb0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014fb4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015090 <__ieee754_rem_pio2f+0x24c>
 8014fb8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8014fbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014fc0:	ed85 7a00 	vstr	s14, [r5]
 8014fc4:	e7b4      	b.n	8014f30 <__ieee754_rem_pio2f+0xec>
 8014fc6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014fca:	db06      	blt.n	8014fda <__ieee754_rem_pio2f+0x196>
 8014fcc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014fd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8014fd4:	edc0 7a00 	vstr	s15, [r0]
 8014fd8:	e742      	b.n	8014e60 <__ieee754_rem_pio2f+0x1c>
 8014fda:	15e2      	asrs	r2, r4, #23
 8014fdc:	3a86      	subs	r2, #134	; 0x86
 8014fde:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014fe2:	ee07 3a90 	vmov	s15, r3
 8014fe6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014fea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015094 <__ieee754_rem_pio2f+0x250>
 8014fee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ff6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014ffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014ffe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015002:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801500a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801500e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015012:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801501a:	edcd 7a05 	vstr	s15, [sp, #20]
 801501e:	d11e      	bne.n	801505e <__ieee754_rem_pio2f+0x21a>
 8015020:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015028:	bf0c      	ite	eq
 801502a:	2301      	moveq	r3, #1
 801502c:	2302      	movne	r3, #2
 801502e:	491a      	ldr	r1, [pc, #104]	; (8015098 <__ieee754_rem_pio2f+0x254>)
 8015030:	9101      	str	r1, [sp, #4]
 8015032:	2102      	movs	r1, #2
 8015034:	9100      	str	r1, [sp, #0]
 8015036:	a803      	add	r0, sp, #12
 8015038:	4629      	mov	r1, r5
 801503a:	f000 f891 	bl	8015160 <__kernel_rem_pio2f>
 801503e:	2e00      	cmp	r6, #0
 8015040:	f6bf af31 	bge.w	8014ea6 <__ieee754_rem_pio2f+0x62>
 8015044:	edd5 7a00 	vldr	s15, [r5]
 8015048:	eef1 7a67 	vneg.f32	s15, s15
 801504c:	edc5 7a00 	vstr	s15, [r5]
 8015050:	edd5 7a01 	vldr	s15, [r5, #4]
 8015054:	eef1 7a67 	vneg.f32	s15, s15
 8015058:	edc5 7a01 	vstr	s15, [r5, #4]
 801505c:	e77a      	b.n	8014f54 <__ieee754_rem_pio2f+0x110>
 801505e:	2303      	movs	r3, #3
 8015060:	e7e5      	b.n	801502e <__ieee754_rem_pio2f+0x1ea>
 8015062:	bf00      	nop
 8015064:	3f490fd8 	.word	0x3f490fd8
 8015068:	4016cbe3 	.word	0x4016cbe3
 801506c:	3fc90f80 	.word	0x3fc90f80
 8015070:	3fc90fd0 	.word	0x3fc90fd0
 8015074:	37354400 	.word	0x37354400
 8015078:	37354443 	.word	0x37354443
 801507c:	2e85a308 	.word	0x2e85a308
 8015080:	43490f80 	.word	0x43490f80
 8015084:	3f22f984 	.word	0x3f22f984
 8015088:	08016244 	.word	0x08016244
 801508c:	2e85a300 	.word	0x2e85a300
 8015090:	248d3132 	.word	0x248d3132
 8015094:	43800000 	.word	0x43800000
 8015098:	080162c4 	.word	0x080162c4

0801509c <__ieee754_sqrtf>:
 801509c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80150a0:	4770      	bx	lr
	...

080150a4 <__kernel_cosf>:
 80150a4:	ee10 3a10 	vmov	r3, s0
 80150a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80150ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80150b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150b4:	da05      	bge.n	80150c2 <__kernel_cosf+0x1e>
 80150b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80150ba:	ee17 2a90 	vmov	r2, s15
 80150be:	2a00      	cmp	r2, #0
 80150c0:	d03b      	beq.n	801513a <__kernel_cosf+0x96>
 80150c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80150c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80150ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8015140 <__kernel_cosf+0x9c>
 80150ce:	4a1d      	ldr	r2, [pc, #116]	; (8015144 <__kernel_cosf+0xa0>)
 80150d0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80150d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8015148 <__kernel_cosf+0xa4>
 80150d8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80150dc:	4293      	cmp	r3, r2
 80150de:	eddf 5a1b 	vldr	s11, [pc, #108]	; 801514c <__kernel_cosf+0xa8>
 80150e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80150e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015150 <__kernel_cosf+0xac>
 80150ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 80150ee:	eddf 5a19 	vldr	s11, [pc, #100]	; 8015154 <__kernel_cosf+0xb0>
 80150f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80150f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015158 <__kernel_cosf+0xb4>
 80150fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 80150fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8015102:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015106:	eee6 0a07 	vfma.f32	s1, s12, s14
 801510a:	dc04      	bgt.n	8015116 <__kernel_cosf+0x72>
 801510c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8015110:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8015114:	4770      	bx	lr
 8015116:	4a11      	ldr	r2, [pc, #68]	; (801515c <__kernel_cosf+0xb8>)
 8015118:	4293      	cmp	r3, r2
 801511a:	bfda      	itte	le
 801511c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015120:	ee07 3a10 	vmovle	s14, r3
 8015124:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8015128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801512c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8015130:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015134:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015138:	4770      	bx	lr
 801513a:	eeb0 0a66 	vmov.f32	s0, s13
 801513e:	4770      	bx	lr
 8015140:	ad47d74e 	.word	0xad47d74e
 8015144:	3e999999 	.word	0x3e999999
 8015148:	310f74f6 	.word	0x310f74f6
 801514c:	b493f27c 	.word	0xb493f27c
 8015150:	37d00d01 	.word	0x37d00d01
 8015154:	bab60b61 	.word	0xbab60b61
 8015158:	3d2aaaab 	.word	0x3d2aaaab
 801515c:	3f480000 	.word	0x3f480000

08015160 <__kernel_rem_pio2f>:
 8015160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015164:	ed2d 8b04 	vpush	{d8-d9}
 8015168:	b0d7      	sub	sp, #348	; 0x15c
 801516a:	469b      	mov	fp, r3
 801516c:	460e      	mov	r6, r1
 801516e:	4bbe      	ldr	r3, [pc, #760]	; (8015468 <__kernel_rem_pio2f+0x308>)
 8015170:	9964      	ldr	r1, [sp, #400]	; 0x190
 8015172:	9002      	str	r0, [sp, #8]
 8015174:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8015178:	9865      	ldr	r0, [sp, #404]	; 0x194
 801517a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8015478 <__kernel_rem_pio2f+0x318>
 801517e:	1ed1      	subs	r1, r2, #3
 8015180:	2308      	movs	r3, #8
 8015182:	fb91 f1f3 	sdiv	r1, r1, r3
 8015186:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801518a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801518e:	1c4c      	adds	r4, r1, #1
 8015190:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8015194:	eba1 050a 	sub.w	r5, r1, sl
 8015198:	aa1a      	add	r2, sp, #104	; 0x68
 801519a:	eb09 070a 	add.w	r7, r9, sl
 801519e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80151a2:	4696      	mov	lr, r2
 80151a4:	2300      	movs	r3, #0
 80151a6:	42bb      	cmp	r3, r7
 80151a8:	dd0f      	ble.n	80151ca <__kernel_rem_pio2f+0x6a>
 80151aa:	af42      	add	r7, sp, #264	; 0x108
 80151ac:	2200      	movs	r2, #0
 80151ae:	454a      	cmp	r2, r9
 80151b0:	dc27      	bgt.n	8015202 <__kernel_rem_pio2f+0xa2>
 80151b2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80151b6:	eb0b 0302 	add.w	r3, fp, r2
 80151ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80151be:	9d02      	ldr	r5, [sp, #8]
 80151c0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8015478 <__kernel_rem_pio2f+0x318>
 80151c4:	f04f 0c00 	mov.w	ip, #0
 80151c8:	e015      	b.n	80151f6 <__kernel_rem_pio2f+0x96>
 80151ca:	42dd      	cmn	r5, r3
 80151cc:	bf5d      	ittte	pl
 80151ce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80151d2:	ee07 2a90 	vmovpl	s15, r2
 80151d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80151da:	eef0 7a47 	vmovmi.f32	s15, s14
 80151de:	ecee 7a01 	vstmia	lr!, {s15}
 80151e2:	3301      	adds	r3, #1
 80151e4:	e7df      	b.n	80151a6 <__kernel_rem_pio2f+0x46>
 80151e6:	ecf5 6a01 	vldmia	r5!, {s13}
 80151ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80151ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80151f2:	f10c 0c01 	add.w	ip, ip, #1
 80151f6:	45d4      	cmp	ip, sl
 80151f8:	ddf5      	ble.n	80151e6 <__kernel_rem_pio2f+0x86>
 80151fa:	ece7 7a01 	vstmia	r7!, {s15}
 80151fe:	3201      	adds	r2, #1
 8015200:	e7d5      	b.n	80151ae <__kernel_rem_pio2f+0x4e>
 8015202:	ab06      	add	r3, sp, #24
 8015204:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015208:	9304      	str	r3, [sp, #16]
 801520a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8015474 <__kernel_rem_pio2f+0x314>
 801520e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8015470 <__kernel_rem_pio2f+0x310>
 8015212:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8015216:	9303      	str	r3, [sp, #12]
 8015218:	464d      	mov	r5, r9
 801521a:	ab56      	add	r3, sp, #344	; 0x158
 801521c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8015220:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8015224:	3f01      	subs	r7, #1
 8015226:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801522a:	00bf      	lsls	r7, r7, #2
 801522c:	ab56      	add	r3, sp, #344	; 0x158
 801522e:	19da      	adds	r2, r3, r7
 8015230:	3a4c      	subs	r2, #76	; 0x4c
 8015232:	2300      	movs	r3, #0
 8015234:	1ae9      	subs	r1, r5, r3
 8015236:	2900      	cmp	r1, #0
 8015238:	dc4c      	bgt.n	80152d4 <__kernel_rem_pio2f+0x174>
 801523a:	4620      	mov	r0, r4
 801523c:	f000 fb7a 	bl	8015934 <scalbnf>
 8015240:	eeb0 8a40 	vmov.f32	s16, s0
 8015244:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015248:	ee28 0a00 	vmul.f32	s0, s16, s0
 801524c:	f000 fb30 	bl	80158b0 <floorf>
 8015250:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8015254:	eea0 8a67 	vfms.f32	s16, s0, s15
 8015258:	2c00      	cmp	r4, #0
 801525a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801525e:	edcd 7a01 	vstr	s15, [sp, #4]
 8015262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015266:	ee38 8a67 	vsub.f32	s16, s16, s15
 801526a:	dd48      	ble.n	80152fe <__kernel_rem_pio2f+0x19e>
 801526c:	1e69      	subs	r1, r5, #1
 801526e:	ab06      	add	r3, sp, #24
 8015270:	f1c4 0008 	rsb	r0, r4, #8
 8015274:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8015278:	9a01      	ldr	r2, [sp, #4]
 801527a:	fa4c f300 	asr.w	r3, ip, r0
 801527e:	441a      	add	r2, r3
 8015280:	4083      	lsls	r3, r0
 8015282:	9201      	str	r2, [sp, #4]
 8015284:	ebac 0203 	sub.w	r2, ip, r3
 8015288:	ab06      	add	r3, sp, #24
 801528a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801528e:	f1c4 0307 	rsb	r3, r4, #7
 8015292:	fa42 f803 	asr.w	r8, r2, r3
 8015296:	f1b8 0f00 	cmp.w	r8, #0
 801529a:	dd41      	ble.n	8015320 <__kernel_rem_pio2f+0x1c0>
 801529c:	9b01      	ldr	r3, [sp, #4]
 801529e:	2000      	movs	r0, #0
 80152a0:	3301      	adds	r3, #1
 80152a2:	9301      	str	r3, [sp, #4]
 80152a4:	4601      	mov	r1, r0
 80152a6:	4285      	cmp	r5, r0
 80152a8:	dc6d      	bgt.n	8015386 <__kernel_rem_pio2f+0x226>
 80152aa:	2c00      	cmp	r4, #0
 80152ac:	dd04      	ble.n	80152b8 <__kernel_rem_pio2f+0x158>
 80152ae:	2c01      	cmp	r4, #1
 80152b0:	d07e      	beq.n	80153b0 <__kernel_rem_pio2f+0x250>
 80152b2:	2c02      	cmp	r4, #2
 80152b4:	f000 8086 	beq.w	80153c4 <__kernel_rem_pio2f+0x264>
 80152b8:	f1b8 0f02 	cmp.w	r8, #2
 80152bc:	d130      	bne.n	8015320 <__kernel_rem_pio2f+0x1c0>
 80152be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80152c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80152c6:	b359      	cbz	r1, 8015320 <__kernel_rem_pio2f+0x1c0>
 80152c8:	4620      	mov	r0, r4
 80152ca:	f000 fb33 	bl	8015934 <scalbnf>
 80152ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80152d2:	e025      	b.n	8015320 <__kernel_rem_pio2f+0x1c0>
 80152d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80152d8:	a806      	add	r0, sp, #24
 80152da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80152e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80152ea:	ee10 1a10 	vmov	r1, s0
 80152ee:	ed32 0a01 	vldmdb	r2!, {s0}
 80152f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80152f6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80152fa:	3301      	adds	r3, #1
 80152fc:	e79a      	b.n	8015234 <__kernel_rem_pio2f+0xd4>
 80152fe:	d106      	bne.n	801530e <__kernel_rem_pio2f+0x1ae>
 8015300:	1e6b      	subs	r3, r5, #1
 8015302:	aa06      	add	r2, sp, #24
 8015304:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015308:	ea4f 2822 	mov.w	r8, r2, asr #8
 801530c:	e7c3      	b.n	8015296 <__kernel_rem_pio2f+0x136>
 801530e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015312:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531a:	da31      	bge.n	8015380 <__kernel_rem_pio2f+0x220>
 801531c:	f04f 0800 	mov.w	r8, #0
 8015320:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015328:	f040 80a8 	bne.w	801547c <__kernel_rem_pio2f+0x31c>
 801532c:	1e6b      	subs	r3, r5, #1
 801532e:	4618      	mov	r0, r3
 8015330:	2200      	movs	r2, #0
 8015332:	4548      	cmp	r0, r9
 8015334:	da4d      	bge.n	80153d2 <__kernel_rem_pio2f+0x272>
 8015336:	2a00      	cmp	r2, #0
 8015338:	f000 8087 	beq.w	801544a <__kernel_rem_pio2f+0x2ea>
 801533c:	aa06      	add	r2, sp, #24
 801533e:	3c08      	subs	r4, #8
 8015340:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015344:	2900      	cmp	r1, #0
 8015346:	f000 808d 	beq.w	8015464 <__kernel_rem_pio2f+0x304>
 801534a:	4620      	mov	r0, r4
 801534c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015350:	9302      	str	r3, [sp, #8]
 8015352:	f000 faef 	bl	8015934 <scalbnf>
 8015356:	9b02      	ldr	r3, [sp, #8]
 8015358:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015474 <__kernel_rem_pio2f+0x314>
 801535c:	0099      	lsls	r1, r3, #2
 801535e:	aa42      	add	r2, sp, #264	; 0x108
 8015360:	1850      	adds	r0, r2, r1
 8015362:	1d05      	adds	r5, r0, #4
 8015364:	461c      	mov	r4, r3
 8015366:	2c00      	cmp	r4, #0
 8015368:	f280 80b8 	bge.w	80154dc <__kernel_rem_pio2f+0x37c>
 801536c:	2500      	movs	r5, #0
 801536e:	1b5c      	subs	r4, r3, r5
 8015370:	2c00      	cmp	r4, #0
 8015372:	f2c0 80d8 	blt.w	8015526 <__kernel_rem_pio2f+0x3c6>
 8015376:	4f3d      	ldr	r7, [pc, #244]	; (801546c <__kernel_rem_pio2f+0x30c>)
 8015378:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8015478 <__kernel_rem_pio2f+0x318>
 801537c:	2400      	movs	r4, #0
 801537e:	e0c6      	b.n	801550e <__kernel_rem_pio2f+0x3ae>
 8015380:	f04f 0802 	mov.w	r8, #2
 8015384:	e78a      	b.n	801529c <__kernel_rem_pio2f+0x13c>
 8015386:	ab06      	add	r3, sp, #24
 8015388:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801538c:	b949      	cbnz	r1, 80153a2 <__kernel_rem_pio2f+0x242>
 801538e:	b12b      	cbz	r3, 801539c <__kernel_rem_pio2f+0x23c>
 8015390:	aa06      	add	r2, sp, #24
 8015392:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015396:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801539a:	2301      	movs	r3, #1
 801539c:	3001      	adds	r0, #1
 801539e:	4619      	mov	r1, r3
 80153a0:	e781      	b.n	80152a6 <__kernel_rem_pio2f+0x146>
 80153a2:	aa06      	add	r2, sp, #24
 80153a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80153a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80153ac:	460b      	mov	r3, r1
 80153ae:	e7f5      	b.n	801539c <__kernel_rem_pio2f+0x23c>
 80153b0:	1e68      	subs	r0, r5, #1
 80153b2:	ab06      	add	r3, sp, #24
 80153b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153bc:	aa06      	add	r2, sp, #24
 80153be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80153c2:	e779      	b.n	80152b8 <__kernel_rem_pio2f+0x158>
 80153c4:	1e68      	subs	r0, r5, #1
 80153c6:	ab06      	add	r3, sp, #24
 80153c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153d0:	e7f4      	b.n	80153bc <__kernel_rem_pio2f+0x25c>
 80153d2:	a906      	add	r1, sp, #24
 80153d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80153d8:	3801      	subs	r0, #1
 80153da:	430a      	orrs	r2, r1
 80153dc:	e7a9      	b.n	8015332 <__kernel_rem_pio2f+0x1d2>
 80153de:	f10c 0c01 	add.w	ip, ip, #1
 80153e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	d0f9      	beq.n	80153de <__kernel_rem_pio2f+0x27e>
 80153ea:	eb0b 0305 	add.w	r3, fp, r5
 80153ee:	aa1a      	add	r2, sp, #104	; 0x68
 80153f0:	009b      	lsls	r3, r3, #2
 80153f2:	1898      	adds	r0, r3, r2
 80153f4:	3004      	adds	r0, #4
 80153f6:	1c69      	adds	r1, r5, #1
 80153f8:	3704      	adds	r7, #4
 80153fa:	2200      	movs	r2, #0
 80153fc:	4465      	add	r5, ip
 80153fe:	9005      	str	r0, [sp, #20]
 8015400:	428d      	cmp	r5, r1
 8015402:	f6ff af0a 	blt.w	801521a <__kernel_rem_pio2f+0xba>
 8015406:	a81a      	add	r0, sp, #104	; 0x68
 8015408:	eb02 0c03 	add.w	ip, r2, r3
 801540c:	4484      	add	ip, r0
 801540e:	9803      	ldr	r0, [sp, #12]
 8015410:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015414:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015418:	9001      	str	r0, [sp, #4]
 801541a:	ee07 0a90 	vmov	s15, r0
 801541e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015422:	9805      	ldr	r0, [sp, #20]
 8015424:	edcc 7a00 	vstr	s15, [ip]
 8015428:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015478 <__kernel_rem_pio2f+0x318>
 801542c:	eb00 0802 	add.w	r8, r0, r2
 8015430:	f04f 0c00 	mov.w	ip, #0
 8015434:	45d4      	cmp	ip, sl
 8015436:	dd0c      	ble.n	8015452 <__kernel_rem_pio2f+0x2f2>
 8015438:	eb02 0c07 	add.w	ip, r2, r7
 801543c:	a842      	add	r0, sp, #264	; 0x108
 801543e:	4484      	add	ip, r0
 8015440:	edcc 7a01 	vstr	s15, [ip, #4]
 8015444:	3101      	adds	r1, #1
 8015446:	3204      	adds	r2, #4
 8015448:	e7da      	b.n	8015400 <__kernel_rem_pio2f+0x2a0>
 801544a:	9b04      	ldr	r3, [sp, #16]
 801544c:	f04f 0c01 	mov.w	ip, #1
 8015450:	e7c7      	b.n	80153e2 <__kernel_rem_pio2f+0x282>
 8015452:	ecfe 6a01 	vldmia	lr!, {s13}
 8015456:	ed38 7a01 	vldmdb	r8!, {s14}
 801545a:	f10c 0c01 	add.w	ip, ip, #1
 801545e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015462:	e7e7      	b.n	8015434 <__kernel_rem_pio2f+0x2d4>
 8015464:	3b01      	subs	r3, #1
 8015466:	e769      	b.n	801533c <__kernel_rem_pio2f+0x1dc>
 8015468:	08016608 	.word	0x08016608
 801546c:	080165dc 	.word	0x080165dc
 8015470:	43800000 	.word	0x43800000
 8015474:	3b800000 	.word	0x3b800000
 8015478:	00000000 	.word	0x00000000
 801547c:	4260      	negs	r0, r4
 801547e:	eeb0 0a48 	vmov.f32	s0, s16
 8015482:	f000 fa57 	bl	8015934 <scalbnf>
 8015486:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8015470 <__kernel_rem_pio2f+0x310>
 801548a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015492:	db1a      	blt.n	80154ca <__kernel_rem_pio2f+0x36a>
 8015494:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8015474 <__kernel_rem_pio2f+0x314>
 8015498:	ee60 7a27 	vmul.f32	s15, s0, s15
 801549c:	aa06      	add	r2, sp, #24
 801549e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154a2:	a906      	add	r1, sp, #24
 80154a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154a8:	3408      	adds	r4, #8
 80154aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80154ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80154b6:	ee10 3a10 	vmov	r3, s0
 80154ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80154be:	1c6b      	adds	r3, r5, #1
 80154c0:	ee17 2a90 	vmov	r2, s15
 80154c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80154c8:	e73f      	b.n	801534a <__kernel_rem_pio2f+0x1ea>
 80154ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80154ce:	aa06      	add	r2, sp, #24
 80154d0:	ee10 3a10 	vmov	r3, s0
 80154d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80154d8:	462b      	mov	r3, r5
 80154da:	e736      	b.n	801534a <__kernel_rem_pio2f+0x1ea>
 80154dc:	aa06      	add	r2, sp, #24
 80154de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80154e2:	9202      	str	r2, [sp, #8]
 80154e4:	ee07 2a90 	vmov	s15, r2
 80154e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154ec:	3c01      	subs	r4, #1
 80154ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80154f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80154f6:	ed65 7a01 	vstmdb	r5!, {s15}
 80154fa:	e734      	b.n	8015366 <__kernel_rem_pio2f+0x206>
 80154fc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8015500:	ecf7 6a01 	vldmia	r7!, {s13}
 8015504:	ed9c 7a00 	vldr	s14, [ip]
 8015508:	eee6 7a87 	vfma.f32	s15, s13, s14
 801550c:	3401      	adds	r4, #1
 801550e:	454c      	cmp	r4, r9
 8015510:	dc01      	bgt.n	8015516 <__kernel_rem_pio2f+0x3b6>
 8015512:	42a5      	cmp	r5, r4
 8015514:	daf2      	bge.n	80154fc <__kernel_rem_pio2f+0x39c>
 8015516:	aa56      	add	r2, sp, #344	; 0x158
 8015518:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 801551c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8015520:	3501      	adds	r5, #1
 8015522:	3804      	subs	r0, #4
 8015524:	e723      	b.n	801536e <__kernel_rem_pio2f+0x20e>
 8015526:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015528:	2a03      	cmp	r2, #3
 801552a:	d84d      	bhi.n	80155c8 <__kernel_rem_pio2f+0x468>
 801552c:	e8df f002 	tbb	[pc, r2]
 8015530:	021f1f3e 	.word	0x021f1f3e
 8015534:	aa56      	add	r2, sp, #344	; 0x158
 8015536:	4411      	add	r1, r2
 8015538:	399c      	subs	r1, #156	; 0x9c
 801553a:	4608      	mov	r0, r1
 801553c:	461c      	mov	r4, r3
 801553e:	2c00      	cmp	r4, #0
 8015540:	dc5f      	bgt.n	8015602 <__kernel_rem_pio2f+0x4a2>
 8015542:	4608      	mov	r0, r1
 8015544:	461c      	mov	r4, r3
 8015546:	2c01      	cmp	r4, #1
 8015548:	dc6b      	bgt.n	8015622 <__kernel_rem_pio2f+0x4c2>
 801554a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8015478 <__kernel_rem_pio2f+0x318>
 801554e:	2b01      	cmp	r3, #1
 8015550:	dc77      	bgt.n	8015642 <__kernel_rem_pio2f+0x4e2>
 8015552:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8015556:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801555a:	f1b8 0f00 	cmp.w	r8, #0
 801555e:	d176      	bne.n	801564e <__kernel_rem_pio2f+0x4ee>
 8015560:	edc6 6a00 	vstr	s13, [r6]
 8015564:	ed86 7a01 	vstr	s14, [r6, #4]
 8015568:	edc6 7a02 	vstr	s15, [r6, #8]
 801556c:	e02c      	b.n	80155c8 <__kernel_rem_pio2f+0x468>
 801556e:	aa56      	add	r2, sp, #344	; 0x158
 8015570:	4411      	add	r1, r2
 8015572:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8015478 <__kernel_rem_pio2f+0x318>
 8015576:	399c      	subs	r1, #156	; 0x9c
 8015578:	4618      	mov	r0, r3
 801557a:	2800      	cmp	r0, #0
 801557c:	da32      	bge.n	80155e4 <__kernel_rem_pio2f+0x484>
 801557e:	f1b8 0f00 	cmp.w	r8, #0
 8015582:	d035      	beq.n	80155f0 <__kernel_rem_pio2f+0x490>
 8015584:	eef1 7a47 	vneg.f32	s15, s14
 8015588:	edc6 7a00 	vstr	s15, [r6]
 801558c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8015590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015594:	a82f      	add	r0, sp, #188	; 0xbc
 8015596:	2101      	movs	r1, #1
 8015598:	428b      	cmp	r3, r1
 801559a:	da2c      	bge.n	80155f6 <__kernel_rem_pio2f+0x496>
 801559c:	f1b8 0f00 	cmp.w	r8, #0
 80155a0:	d001      	beq.n	80155a6 <__kernel_rem_pio2f+0x446>
 80155a2:	eef1 7a67 	vneg.f32	s15, s15
 80155a6:	edc6 7a01 	vstr	s15, [r6, #4]
 80155aa:	e00d      	b.n	80155c8 <__kernel_rem_pio2f+0x468>
 80155ac:	aa56      	add	r2, sp, #344	; 0x158
 80155ae:	4411      	add	r1, r2
 80155b0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8015478 <__kernel_rem_pio2f+0x318>
 80155b4:	399c      	subs	r1, #156	; 0x9c
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	da0e      	bge.n	80155d8 <__kernel_rem_pio2f+0x478>
 80155ba:	f1b8 0f00 	cmp.w	r8, #0
 80155be:	d001      	beq.n	80155c4 <__kernel_rem_pio2f+0x464>
 80155c0:	eef1 7a67 	vneg.f32	s15, s15
 80155c4:	edc6 7a00 	vstr	s15, [r6]
 80155c8:	9b01      	ldr	r3, [sp, #4]
 80155ca:	f003 0007 	and.w	r0, r3, #7
 80155ce:	b057      	add	sp, #348	; 0x15c
 80155d0:	ecbd 8b04 	vpop	{d8-d9}
 80155d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d8:	ed31 7a01 	vldmdb	r1!, {s14}
 80155dc:	3b01      	subs	r3, #1
 80155de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80155e2:	e7e8      	b.n	80155b6 <__kernel_rem_pio2f+0x456>
 80155e4:	ed71 7a01 	vldmdb	r1!, {s15}
 80155e8:	3801      	subs	r0, #1
 80155ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80155ee:	e7c4      	b.n	801557a <__kernel_rem_pio2f+0x41a>
 80155f0:	eef0 7a47 	vmov.f32	s15, s14
 80155f4:	e7c8      	b.n	8015588 <__kernel_rem_pio2f+0x428>
 80155f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80155fa:	3101      	adds	r1, #1
 80155fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015600:	e7ca      	b.n	8015598 <__kernel_rem_pio2f+0x438>
 8015602:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015606:	ed70 6a01 	vldmdb	r0!, {s13}
 801560a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801560e:	3c01      	subs	r4, #1
 8015610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015614:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801561c:	edc0 7a00 	vstr	s15, [r0]
 8015620:	e78d      	b.n	801553e <__kernel_rem_pio2f+0x3de>
 8015622:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015626:	ed70 6a01 	vldmdb	r0!, {s13}
 801562a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801562e:	3c01      	subs	r4, #1
 8015630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015634:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801563c:	edc0 7a00 	vstr	s15, [r0]
 8015640:	e781      	b.n	8015546 <__kernel_rem_pio2f+0x3e6>
 8015642:	ed31 7a01 	vldmdb	r1!, {s14}
 8015646:	3b01      	subs	r3, #1
 8015648:	ee77 7a87 	vadd.f32	s15, s15, s14
 801564c:	e77f      	b.n	801554e <__kernel_rem_pio2f+0x3ee>
 801564e:	eef1 6a66 	vneg.f32	s13, s13
 8015652:	eeb1 7a47 	vneg.f32	s14, s14
 8015656:	edc6 6a00 	vstr	s13, [r6]
 801565a:	ed86 7a01 	vstr	s14, [r6, #4]
 801565e:	eef1 7a67 	vneg.f32	s15, s15
 8015662:	e781      	b.n	8015568 <__kernel_rem_pio2f+0x408>

08015664 <__kernel_sinf>:
 8015664:	ee10 3a10 	vmov	r3, s0
 8015668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801566c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015670:	da04      	bge.n	801567c <__kernel_sinf+0x18>
 8015672:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015676:	ee17 3a90 	vmov	r3, s15
 801567a:	b35b      	cbz	r3, 80156d4 <__kernel_sinf+0x70>
 801567c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015680:	eddf 7a15 	vldr	s15, [pc, #84]	; 80156d8 <__kernel_sinf+0x74>
 8015684:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80156dc <__kernel_sinf+0x78>
 8015688:	eea7 6a27 	vfma.f32	s12, s14, s15
 801568c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80156e0 <__kernel_sinf+0x7c>
 8015690:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015694:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80156e4 <__kernel_sinf+0x80>
 8015698:	eea7 6a87 	vfma.f32	s12, s15, s14
 801569c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80156e8 <__kernel_sinf+0x84>
 80156a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80156a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80156a8:	b930      	cbnz	r0, 80156b8 <__kernel_sinf+0x54>
 80156aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80156ec <__kernel_sinf+0x88>
 80156ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80156b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80156b6:	4770      	bx	lr
 80156b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80156bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80156c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80156c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80156c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80156f0 <__kernel_sinf+0x8c>
 80156cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80156d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop
 80156d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80156dc:	b2d72f34 	.word	0xb2d72f34
 80156e0:	3638ef1b 	.word	0x3638ef1b
 80156e4:	b9500d01 	.word	0xb9500d01
 80156e8:	3c088889 	.word	0x3c088889
 80156ec:	be2aaaab 	.word	0xbe2aaaab
 80156f0:	3e2aaaab 	.word	0x3e2aaaab

080156f4 <matherr>:
 80156f4:	2000      	movs	r0, #0
 80156f6:	4770      	bx	lr

080156f8 <atanf>:
 80156f8:	b538      	push	{r3, r4, r5, lr}
 80156fa:	ee10 5a10 	vmov	r5, s0
 80156fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015702:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015706:	eef0 7a40 	vmov.f32	s15, s0
 801570a:	db10      	blt.n	801572e <atanf+0x36>
 801570c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015710:	dd04      	ble.n	801571c <atanf+0x24>
 8015712:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015716:	eeb0 0a67 	vmov.f32	s0, s15
 801571a:	bd38      	pop	{r3, r4, r5, pc}
 801571c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015854 <atanf+0x15c>
 8015720:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015858 <atanf+0x160>
 8015724:	2d00      	cmp	r5, #0
 8015726:	bfd8      	it	le
 8015728:	eef0 7a47 	vmovle.f32	s15, s14
 801572c:	e7f3      	b.n	8015716 <atanf+0x1e>
 801572e:	4b4b      	ldr	r3, [pc, #300]	; (801585c <atanf+0x164>)
 8015730:	429c      	cmp	r4, r3
 8015732:	dc10      	bgt.n	8015756 <atanf+0x5e>
 8015734:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015738:	da0a      	bge.n	8015750 <atanf+0x58>
 801573a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015860 <atanf+0x168>
 801573e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015746:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801574e:	dce2      	bgt.n	8015716 <atanf+0x1e>
 8015750:	f04f 33ff 	mov.w	r3, #4294967295
 8015754:	e013      	b.n	801577e <atanf+0x86>
 8015756:	f000 f8a3 	bl	80158a0 <fabsf>
 801575a:	4b42      	ldr	r3, [pc, #264]	; (8015864 <atanf+0x16c>)
 801575c:	429c      	cmp	r4, r3
 801575e:	dc4f      	bgt.n	8015800 <atanf+0x108>
 8015760:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015764:	429c      	cmp	r4, r3
 8015766:	dc41      	bgt.n	80157ec <atanf+0xf4>
 8015768:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801576c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015770:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015774:	2300      	movs	r3, #0
 8015776:	ee30 0a27 	vadd.f32	s0, s0, s15
 801577a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801577e:	1c5a      	adds	r2, r3, #1
 8015780:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015784:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015868 <atanf+0x170>
 8015788:	eddf 5a38 	vldr	s11, [pc, #224]	; 801586c <atanf+0x174>
 801578c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015870 <atanf+0x178>
 8015790:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015794:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015798:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015874 <atanf+0x17c>
 801579c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80157a0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015878 <atanf+0x180>
 80157a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80157a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801587c <atanf+0x184>
 80157ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80157b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015880 <atanf+0x188>
 80157b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80157b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015884 <atanf+0x18c>
 80157bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80157c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015888 <atanf+0x190>
 80157c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80157c8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801588c <atanf+0x194>
 80157cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80157d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015890 <atanf+0x198>
 80157d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80157d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80157dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80157e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157e4:	d121      	bne.n	801582a <atanf+0x132>
 80157e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157ea:	e794      	b.n	8015716 <atanf+0x1e>
 80157ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80157f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80157f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80157f8:	2301      	movs	r3, #1
 80157fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80157fe:	e7be      	b.n	801577e <atanf+0x86>
 8015800:	4b24      	ldr	r3, [pc, #144]	; (8015894 <atanf+0x19c>)
 8015802:	429c      	cmp	r4, r3
 8015804:	dc0b      	bgt.n	801581e <atanf+0x126>
 8015806:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801580a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801580e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015812:	2302      	movs	r3, #2
 8015814:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801581c:	e7af      	b.n	801577e <atanf+0x86>
 801581e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015826:	2303      	movs	r3, #3
 8015828:	e7a9      	b.n	801577e <atanf+0x86>
 801582a:	4a1b      	ldr	r2, [pc, #108]	; (8015898 <atanf+0x1a0>)
 801582c:	491b      	ldr	r1, [pc, #108]	; (801589c <atanf+0x1a4>)
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	441a      	add	r2, r3
 8015832:	440b      	add	r3, r1
 8015834:	edd3 6a00 	vldr	s13, [r3]
 8015838:	ee37 7a66 	vsub.f32	s14, s14, s13
 801583c:	2d00      	cmp	r5, #0
 801583e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015842:	ed92 7a00 	vldr	s14, [r2]
 8015846:	ee77 7a67 	vsub.f32	s15, s14, s15
 801584a:	bfb8      	it	lt
 801584c:	eef1 7a67 	vneglt.f32	s15, s15
 8015850:	e761      	b.n	8015716 <atanf+0x1e>
 8015852:	bf00      	nop
 8015854:	bfc90fdb 	.word	0xbfc90fdb
 8015858:	3fc90fdb 	.word	0x3fc90fdb
 801585c:	3edfffff 	.word	0x3edfffff
 8015860:	7149f2ca 	.word	0x7149f2ca
 8015864:	3f97ffff 	.word	0x3f97ffff
 8015868:	3c8569d7 	.word	0x3c8569d7
 801586c:	3d4bda59 	.word	0x3d4bda59
 8015870:	bd6ef16b 	.word	0xbd6ef16b
 8015874:	3d886b35 	.word	0x3d886b35
 8015878:	3dba2e6e 	.word	0x3dba2e6e
 801587c:	3e124925 	.word	0x3e124925
 8015880:	3eaaaaab 	.word	0x3eaaaaab
 8015884:	bd15a221 	.word	0xbd15a221
 8015888:	bd9d8795 	.word	0xbd9d8795
 801588c:	bde38e38 	.word	0xbde38e38
 8015890:	be4ccccd 	.word	0xbe4ccccd
 8015894:	401bffff 	.word	0x401bffff
 8015898:	08016614 	.word	0x08016614
 801589c:	08016624 	.word	0x08016624

080158a0 <fabsf>:
 80158a0:	ee10 3a10 	vmov	r3, s0
 80158a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158a8:	ee00 3a10 	vmov	s0, r3
 80158ac:	4770      	bx	lr
	...

080158b0 <floorf>:
 80158b0:	ee10 3a10 	vmov	r3, s0
 80158b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80158b8:	0dca      	lsrs	r2, r1, #23
 80158ba:	3a7f      	subs	r2, #127	; 0x7f
 80158bc:	2a16      	cmp	r2, #22
 80158be:	dc2a      	bgt.n	8015916 <floorf+0x66>
 80158c0:	2a00      	cmp	r2, #0
 80158c2:	da11      	bge.n	80158e8 <floorf+0x38>
 80158c4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015928 <floorf+0x78>
 80158c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80158cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80158d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d4:	dd05      	ble.n	80158e2 <floorf+0x32>
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	da23      	bge.n	8015922 <floorf+0x72>
 80158da:	4a14      	ldr	r2, [pc, #80]	; (801592c <floorf+0x7c>)
 80158dc:	2900      	cmp	r1, #0
 80158de:	bf18      	it	ne
 80158e0:	4613      	movne	r3, r2
 80158e2:	ee00 3a10 	vmov	s0, r3
 80158e6:	4770      	bx	lr
 80158e8:	4911      	ldr	r1, [pc, #68]	; (8015930 <floorf+0x80>)
 80158ea:	4111      	asrs	r1, r2
 80158ec:	420b      	tst	r3, r1
 80158ee:	d0fa      	beq.n	80158e6 <floorf+0x36>
 80158f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015928 <floorf+0x78>
 80158f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80158f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80158fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015900:	ddef      	ble.n	80158e2 <floorf+0x32>
 8015902:	2b00      	cmp	r3, #0
 8015904:	bfbe      	ittt	lt
 8015906:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801590a:	fa40 f202 	asrlt.w	r2, r0, r2
 801590e:	189b      	addlt	r3, r3, r2
 8015910:	ea23 0301 	bic.w	r3, r3, r1
 8015914:	e7e5      	b.n	80158e2 <floorf+0x32>
 8015916:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801591a:	d3e4      	bcc.n	80158e6 <floorf+0x36>
 801591c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015920:	4770      	bx	lr
 8015922:	2300      	movs	r3, #0
 8015924:	e7dd      	b.n	80158e2 <floorf+0x32>
 8015926:	bf00      	nop
 8015928:	7149f2ca 	.word	0x7149f2ca
 801592c:	bf800000 	.word	0xbf800000
 8015930:	007fffff 	.word	0x007fffff

08015934 <scalbnf>:
 8015934:	b508      	push	{r3, lr}
 8015936:	ee10 2a10 	vmov	r2, s0
 801593a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801593e:	ed2d 8b02 	vpush	{d8}
 8015942:	eef0 0a40 	vmov.f32	s1, s0
 8015946:	d004      	beq.n	8015952 <scalbnf+0x1e>
 8015948:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801594c:	d306      	bcc.n	801595c <scalbnf+0x28>
 801594e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8015952:	ecbd 8b02 	vpop	{d8}
 8015956:	eeb0 0a60 	vmov.f32	s0, s1
 801595a:	bd08      	pop	{r3, pc}
 801595c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015960:	d21c      	bcs.n	801599c <scalbnf+0x68>
 8015962:	4b1f      	ldr	r3, [pc, #124]	; (80159e0 <scalbnf+0xac>)
 8015964:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80159e4 <scalbnf+0xb0>
 8015968:	4298      	cmp	r0, r3
 801596a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801596e:	db10      	blt.n	8015992 <scalbnf+0x5e>
 8015970:	ee10 2a90 	vmov	r2, s1
 8015974:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8015978:	3b19      	subs	r3, #25
 801597a:	4403      	add	r3, r0
 801597c:	2bfe      	cmp	r3, #254	; 0xfe
 801597e:	dd0f      	ble.n	80159a0 <scalbnf+0x6c>
 8015980:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80159e8 <scalbnf+0xb4>
 8015984:	eeb0 0a48 	vmov.f32	s0, s16
 8015988:	f000 f834 	bl	80159f4 <copysignf>
 801598c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8015990:	e7df      	b.n	8015952 <scalbnf+0x1e>
 8015992:	eddf 7a16 	vldr	s15, [pc, #88]	; 80159ec <scalbnf+0xb8>
 8015996:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801599a:	e7da      	b.n	8015952 <scalbnf+0x1e>
 801599c:	0ddb      	lsrs	r3, r3, #23
 801599e:	e7ec      	b.n	801597a <scalbnf+0x46>
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	dd06      	ble.n	80159b2 <scalbnf+0x7e>
 80159a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80159a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80159ac:	ee00 3a90 	vmov	s1, r3
 80159b0:	e7cf      	b.n	8015952 <scalbnf+0x1e>
 80159b2:	f113 0f16 	cmn.w	r3, #22
 80159b6:	da06      	bge.n	80159c6 <scalbnf+0x92>
 80159b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80159bc:	4298      	cmp	r0, r3
 80159be:	dcdf      	bgt.n	8015980 <scalbnf+0x4c>
 80159c0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80159ec <scalbnf+0xb8>
 80159c4:	e7de      	b.n	8015984 <scalbnf+0x50>
 80159c6:	3319      	adds	r3, #25
 80159c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80159cc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80159d0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80159f0 <scalbnf+0xbc>
 80159d4:	ee07 3a10 	vmov	s14, r3
 80159d8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80159dc:	e7b9      	b.n	8015952 <scalbnf+0x1e>
 80159de:	bf00      	nop
 80159e0:	ffff3cb0 	.word	0xffff3cb0
 80159e4:	4c000000 	.word	0x4c000000
 80159e8:	7149f2ca 	.word	0x7149f2ca
 80159ec:	0da24260 	.word	0x0da24260
 80159f0:	33000000 	.word	0x33000000

080159f4 <copysignf>:
 80159f4:	ee10 3a10 	vmov	r3, s0
 80159f8:	ee10 2a90 	vmov	r2, s1
 80159fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015a04:	4313      	orrs	r3, r2
 8015a06:	ee00 3a10 	vmov	s0, r3
 8015a0a:	4770      	bx	lr

08015a0c <_init>:
 8015a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a0e:	bf00      	nop
 8015a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a12:	bc08      	pop	{r3}
 8015a14:	469e      	mov	lr, r3
 8015a16:	4770      	bx	lr

08015a18 <_fini>:
 8015a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a1a:	bf00      	nop
 8015a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a1e:	bc08      	pop	{r3}
 8015a20:	469e      	mov	lr, r3
 8015a22:	4770      	bx	lr
