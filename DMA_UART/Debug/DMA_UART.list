
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08017db0  08017db0  00027db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018808  08018808  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  08018808  08018808  00028808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018810  08018810  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018810  08018810  00028810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018814  08018814  00028814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  08018818  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b4c  20001008  08019820  00031008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006b54  08019820  00036b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b564  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d8f  00000000  00000000  0005c59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  00062330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c0  00000000  00000000  00063f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002921f  00000000  00000000  00065910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dad4  00000000  00000000  0008eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dba8c  00000000  00000000  000ac603  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018808f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088b0  00000000  00000000  0018810c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017d94 	.word	0x08017d94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	08017d94 	.word	0x08017d94

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f011 f8b2 	bl	8012128 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f011 ffff 	bl	8012fd8 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e23c      	b.n	8001480 <commandRead+0x4d8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e22c      	b.n	8001480 <commandRead+0x4d8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d120      	bne.n	800107e <commandRead+0xd6>
		if (3 == result) {
 800103c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001040:	2b03      	cmp	r3, #3
 8001042:	d112      	bne.n	800106a <commandRead+0xc2>
			result = sscanf( para, "%lf %lf",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001050:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001054:	4995      	ldr	r1, [pc, #596]	; (80012ac <commandRead+0x304>)
 8001056:	f011 ffbf 	bl	8012fd8 <siscanf>
 800105a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <commandRead+0xc6>
				return CMD_ERROR;
 8001066:	230b      	movs	r3, #11
 8001068:	e20a      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 800106a:	230b      	movs	r3, #11
 800106c:	e208      	b.n	8001480 <commandRead+0x4d8>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 800107a:	2302      	movs	r3, #2
 800107c:	e200      	b.n	8001480 <commandRead+0x4d8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107e:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a1 	bl	80001d0 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d151      	bne.n	8001138 <commandRead+0x190>
		if (3 == result) {
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001098:	2b03      	cmp	r3, #3
 800109a:	d149      	bne.n	8001130 <commandRead+0x188>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 0658 	add.w	r6, r3, #88	; 0x58
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	3268      	adds	r2, #104	; 0x68
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	31f8      	adds	r1, #248	; 0xf8
 80010b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010bc:	9004      	str	r0, [sp, #16]
 80010be:	f107 0047 	add.w	r0, r7, #71	; 0x47
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f011 ff81 	bl	8012fd8 <siscanf>
 80010d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d001      	beq.n	80010e6 <commandRead+0x13e>
				return CMD_ERROR;
 80010e2:	230b      	movs	r3, #11
 80010e4:	e1cc      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <commandRead+0x16a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001106:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001110:	e010      	b.n	8001134 <commandRead+0x18c>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001112:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <commandRead+0x184>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800112a:	e003      	b.n	8001134 <commandRead+0x18c>
			} else {
				return CMD_ERROR;
 800112c:	230b      	movs	r3, #11
 800112e:	e1a7      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001130:	230b      	movs	r3, #11
 8001132:	e1a5      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_LINE;
 8001134:	2303      	movs	r3, #3
 8001136:	e1a3      	b.n	8001480 <commandRead+0x4d8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <commandRead+0x300>)
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f844 	bl	80001d0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d15f      	bne.n	800120e <commandRead+0x266>
		if (3 == result) {
 800114e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001152:	2b03      	cmp	r3, #3
 8001154:	d157      	bne.n	8001206 <commandRead+0x25e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 0858 	add.w	r8, r3, #88	; 0x58
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3268      	adds	r2, #104	; 0x68
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	31b8      	adds	r1, #184	; 0xb8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	30c0      	adds	r0, #192	; 0xc0
 8001174:	687c      	ldr	r4, [r7, #4]
 8001176:	34c8      	adds	r4, #200	; 0xc8
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 8001178:	687d      	ldr	r5, [r7, #4]
 800117a:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 800117c:	687e      	ldr	r6, [r7, #4]
 800117e:	36f8      	adds	r6, #248	; 0xf8
 8001180:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8001184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800118e:	9307      	str	r3, [sp, #28]
 8001190:	9606      	str	r6, [sp, #24]
 8001192:	9505      	str	r5, [sp, #20]
 8001194:	9404      	str	r4, [sp, #16]
 8001196:	9003      	str	r0, [sp, #12]
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4643      	mov	r3, r8
 80011a2:	4672      	mov	r2, lr
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <commandRead+0x30c>)
 80011a6:	4660      	mov	r0, ip
 80011a8:	f011 ff16 	bl	8012fd8 <siscanf>
 80011ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	d001      	beq.n	80011bc <commandRead+0x214>
				return CMD_ERROR;
 80011b8:	230b      	movs	r3, #11
 80011ba:	e161      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80011e6:	e010      	b.n	800120a <commandRead+0x262>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <commandRead+0x25a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011f6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001200:	e003      	b.n	800120a <commandRead+0x262>
			} else {
				return CMD_ERROR;
 8001202:	230b      	movs	r3, #11
 8001204:	e13c      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001206:	230b      	movs	r3, #11
 8001208:	e13a      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_CIRCLE;
 800120a:	2304      	movs	r3, #4
 800120c:	e138      	b.n	8001480 <commandRead+0x4d8>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <commandRead+0x300>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15c      	bne.n	80012de <commandRead+0x336>
		if (3 == result) {
 8001224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001228:	2b03      	cmp	r3, #3
 800122a:	d154      	bne.n	80012d6 <commandRead+0x32e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3360      	adds	r3, #96	; 0x60
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3268      	adds	r2, #104	; 0x68
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	31f8      	adds	r1, #248	; 0xf8
 8001244:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001248:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124c:	9004      	str	r0, [sp, #16]
 800124e:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8001252:	9003      	str	r0, [sp, #12]
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4633      	mov	r3, r6
 800125c:	462a      	mov	r2, r5
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <commandRead+0x308>)
 8001260:	4620      	mov	r0, r4
 8001262:	f011 feb9 	bl	8012fd8 <siscanf>
 8001266:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800126a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800126e:	2b07      	cmp	r3, #7
 8001270:	d001      	beq.n	8001276 <commandRead+0x2ce>
				return CMD_ERROR;
 8001272:	230b      	movs	r3, #11
 8001274:	e104      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <commandRead+0x310>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001296:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80012a0:	e01b      	b.n	80012da <commandRead+0x332>
 80012a2:	bf00      	nop
 80012a4:	08017e40 	.word	0x08017e40
 80012a8:	20000000 	.word	0x20000000
 80012ac:	08017e4c 	.word	0x08017e4c
 80012b0:	08017e54 	.word	0x08017e54
 80012b4:	08017e70 	.word	0x08017e70
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80012b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <commandRead+0x32a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80012c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012d0:	e003      	b.n	80012da <commandRead+0x332>
			} else {
				return CMD_ERROR;
 80012d2:	230b      	movs	r3, #11
 80012d4:	e0d4      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 80012d6:	230b      	movs	r3, #11
 80012d8:	e0d2      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_JOINT;
 80012da:	2305      	movs	r3, #5
 80012dc:	e0d0      	b.n	8001480 <commandRead+0x4d8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <commandRead+0x4e4>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d14a      	bne.n	800138a <commandRead+0x3e2>
		if (3 == result) {
 80012f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d142      	bne.n	8001382 <commandRead+0x3da>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0418 	add.w	r4, r3, #24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	33f8      	adds	r3, #248	; 0xf8
 800130c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	f107 0217 	add.w	r2, r7, #23
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4623      	mov	r3, r4
 8001320:	460a      	mov	r2, r1
 8001322:	495b      	ldr	r1, [pc, #364]	; (8001490 <commandRead+0x4e8>)
 8001324:	f011 fe58 	bl	8012fd8 <siscanf>
 8001328:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001330:	2b05      	cmp	r3, #5
 8001332:	d001      	beq.n	8001338 <commandRead+0x390>
				return CMD_ERROR;
 8001334:	230b      	movs	r3, #11
 8001336:	e0a3      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <commandRead+0x3bc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001358:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001362:	e010      	b.n	8001386 <commandRead+0x3de>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <commandRead+0x3d6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001372:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800137c:	e003      	b.n	8001386 <commandRead+0x3de>
			} else {
				return CMD_ERROR;
 800137e:	230b      	movs	r3, #11
 8001380:	e07e      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001382:	230b      	movs	r3, #11
 8001384:	e07c      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_ROTATE_SINGLE;
 8001386:	2306      	movs	r3, #6
 8001388:	e07a      	b.n	8001480 <commandRead+0x4d8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <commandRead+0x4e4>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d112      	bne.n	80013c6 <commandRead+0x41e>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0210 	add.w	r2, r3, #16
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <commandRead+0x4ec>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f011 fe13 	bl	8012fd8 <siscanf>
 80013b2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 80013b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <commandRead+0x41a>
			return CMD_ERROR;
 80013be:	230b      	movs	r3, #11
 80013c0:	e05e      	b.n	8001480 <commandRead+0x4d8>
		}

		return CMD_OUTPUT;
 80013c2:	2307      	movs	r3, #7
 80013c4:	e05c      	b.n	8001480 <commandRead+0x4d8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <commandRead+0x4e4>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <commandRead+0x438>
		return CMD_READ_STATUS;
 80013dc:	2308      	movs	r3, #8
 80013de:	e04f      	b.n	8001480 <commandRead+0x4d8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <commandRead+0x4e4>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef0 	bl	80001d0 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <commandRead+0x452>
			return CMD_READ_POSITION;
 80013f6:	2309      	movs	r3, #9
 80013f8:	e042      	b.n	8001480 <commandRead+0x4d8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <commandRead+0x4e4>)
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe fee3 	bl	80001d0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d136      	bne.n	800147e <commandRead+0x4d6>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 8001410:	f107 0316 	add.w	r3, r7, #22
 8001414:	f107 0215 	add.w	r2, r7, #21
 8001418:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <commandRead+0x4f0>)
 800141e:	f011 fddb 	bl	8012fd8 <siscanf>
 8001422:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800142a:	2b02      	cmp	r3, #2
 800142c:	d001      	beq.n	8001432 <commandRead+0x48a>
			return CMD_ERROR;
 800142e:	230b      	movs	r3, #11
 8001430:	e026      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001432:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <commandRead+0x49a>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	721a      	strb	r2, [r3, #8]
 8001440:	e009      	b.n	8001456 <commandRead+0x4ae>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <commandRead+0x4aa>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	721a      	strb	r2, [r3, #8]
 8001450:	e001      	b.n	8001456 <commandRead+0x4ae>
		} else {
			return CMD_ERROR;
 8001452:	230b      	movs	r3, #11
 8001454:	e014      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <commandRead+0x4be>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	731a      	strb	r2, [r3, #12]
 8001464:	e009      	b.n	800147a <commandRead+0x4d2>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001466:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <commandRead+0x4ce>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	731a      	strb	r2, [r3, #12]
 8001474:	e001      	b.n	800147a <commandRead+0x4d2>
		} else {
			return CMD_ERROR;
 8001476:	230b      	movs	r3, #11
 8001478:	e002      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_SETTING;
 800147a:	230a      	movs	r3, #10
 800147c:	e000      	b.n	8001480 <commandRead+0x4d8>

	// Error command
	} else {
		return CMD_ERROR;
 800147e:	230b      	movs	r3, #11
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	37a8      	adds	r7, #168	; 0xa8
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	08017e9c 	.word	0x08017e9c
 8001494:	08017eb0 	.word	0x08017eb0
 8001498:	08017eb4 	.word	0x08017eb4

0800149c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 800149c:	b082      	sub	sp, #8
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b0b6      	sub	sp, #216	; 0xd8
 80014a2:	af18      	add	r7, sp, #96	; 0x60
 80014a4:	4601      	mov	r1, r0
 80014a6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014aa:	e880 000c 	stmia.w	r0, {r2, r3}
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	f200 80f2 	bhi.w	800169e <commandReply+0x202>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <commandReply+0x24>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	080014f1 	.word	0x080014f1
 80014d0:	080014f1 	.word	0x080014f1
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001597 	.word	0x08001597
 80014e8:	080015c5 	.word	0x080015c5
 80014ec:	0800167f 	.word	0x0800167f
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014f0:	2309      	movs	r3, #9
 80014f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80014f6:	e0e1      	b.n	80016bc <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10d      	bne.n	800151c <commandReply+0x80>
				scaraSetOutput(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f006 f833 	bl	800756c <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800150a:	4971      	ldr	r1, [pc, #452]	; (80016d0 <commandReply+0x234>)
 800150c:	461a      	mov	r2, r3
 800150e:	460b      	mov	r3, r1
 8001510:	cb03      	ldmia	r3!, {r0, r1}
 8001512:	6010      	str	r0, [r2, #0]
 8001514:	6051      	str	r1, [r2, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	8113      	strh	r3, [r2, #8]
 800151a:	e01e      	b.n	800155a <commandReply+0xbe>
			} else if (0 == duty_cmd.sub_para_int) {
 800151c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <commandReply+0xa8>
				scaraSetOutput(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f006 f821 	bl	800756c <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800152a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800152e:	4969      	ldr	r1, [pc, #420]	; (80016d4 <commandReply+0x238>)
 8001530:	461a      	mov	r2, r3
 8001532:	460b      	mov	r3, r1
 8001534:	cb03      	ldmia	r3!, {r0, r1}
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	6051      	str	r1, [r2, #4]
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	8111      	strh	r1, [r2, #8]
 8001540:	7293      	strb	r3, [r2, #10]
 8001542:	e00a      	b.n	800155a <commandReply+0xbe>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001544:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <commandReply+0x23c>)
 800154a:	461c      	mov	r4, r3
 800154c:	4613      	mov	r3, r2
 800154e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	6061      	str	r1, [r4, #4]
 8001554:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001556:	2307      	movs	r3, #7
 8001558:	e0b2      	b.n	80016c0 <commandReply+0x224>
			}
			ret = RPD_OK;
 800155a:	2308      	movs	r3, #8
 800155c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 8001560:	e0ac      	b.n	80016bc <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001562:	f006 f843 	bl	80075ec <scaraGetMode>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			current_state	 = scaraGetDutyState();
 800156c:	f006 f84a 	bl	8007604 <scaraGetDutyState>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001576:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <commandReply+0xf2>
 800157e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <commandReply+0xf2>
				ret = RPD_IDLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800158c:	e096      	b.n	80016bc <commandReply+0x220>
				ret = RPD_BUSY;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 8001594:	e092      	b.n	80016bc <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f806 	bl	80075ac <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80015a0:	4668      	mov	r0, sp
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2260      	movs	r2, #96	; 0x60
 80015a8:	4619      	mov	r1, r3
 80015aa:	f010 fd99 	bl	80120e0 <memcpy>
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	cb0c      	ldmia	r3, {r2, r3}
 80015b4:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80015b8:	f006 f86a 	bl	8007690 <scaraPosition2String>
			ret =  RPD_POSITION;
 80015bc:	2302      	movs	r3, #2
 80015be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 80015c2:	e07b      	b.n	80016bc <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80015c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 80015cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015d0:	4942      	ldr	r1, [pc, #264]	; (80016dc <commandReply+0x240>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	cb03      	ldmia	r3!, {r0, r1}
 80015d8:	6010      	str	r0, [r2, #0]
 80015da:	6051      	str	r1, [r2, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	8113      	strh	r3, [r2, #8]
 80015e0:	e017      	b.n	8001612 <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015e2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10a      	bne.n	8001600 <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <commandReply+0x244>)
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	cb03      	ldmia	r3!, {r0, r1}
 80015f6:	6010      	str	r0, [r2, #0]
 80015f8:	6051      	str	r1, [r2, #4]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	8113      	strh	r3, [r2, #8]
 80015fe:	e008      	b.n	8001612 <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <commandReply+0x248>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4619      	mov	r1, r3
 8001606:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800160a:	f011 fd11 	bl	8013030 <strcat>
			return RPD_ERROR;
 800160e:	2307      	movs	r3, #7
 8001610:	e056      	b.n	80016c0 <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001612:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 800161a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800161e:	f7fe fde1 	bl	80001e4 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800162a:	4413      	add	r3, r2
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <commandReply+0x24c>)
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	8892      	ldrh	r2, [r2, #4]
 8001634:	809a      	strh	r2, [r3, #4]
 8001636:	e01e      	b.n	8001676 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001638:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800163c:	2b01      	cmp	r3, #1
 800163e:	d111      	bne.n	8001664 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 8001640:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001644:	f7fe fdce 	bl	80001e4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001650:	4413      	add	r3, r2
 8001652:	4926      	ldr	r1, [pc, #152]	; (80016ec <commandReply+0x250>)
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	7213      	strb	r3, [r2, #8]
 8001662:	e008      	b.n	8001676 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <commandReply+0x248>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800166e:	f011 fcdf 	bl	8013030 <strcat>
			return RPD_ERROR;
 8001672:	2307      	movs	r3, #7
 8001674:	e024      	b.n	80016c0 <commandReply+0x224>
		}
		ret = RPD_OK;
 8001676:	2308      	movs	r3, #8
 8001678:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800167c:	e01e      	b.n	80016bc <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800167e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <commandReply+0x254>)
 8001684:	461d      	mov	r5, r3
 8001686:	4614      	mov	r4, r2
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	6028      	str	r0, [r5, #0]
 800168c:	6069      	str	r1, [r5, #4]
 800168e:	60aa      	str	r2, [r5, #8]
 8001690:	60eb      	str	r3, [r5, #12]
 8001692:	7823      	ldrb	r3, [r4, #0]
 8001694:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001696:	2307      	movs	r3, #7
 8001698:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800169c:	e00e      	b.n	80016bc <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800169e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <commandReply+0x254>)
 80016a4:	461d      	mov	r5, r3
 80016a6:	4614      	mov	r4, r2
 80016a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016aa:	6028      	str	r0, [r5, #0]
 80016ac:	6069      	str	r1, [r5, #4]
 80016ae:	60aa      	str	r2, [r5, #8]
 80016b0:	60eb      	str	r3, [r5, #12]
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return ret;
 80016bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3778      	adds	r7, #120	; 0x78
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ca:	b002      	add	sp, #8
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	08017ebc 	.word	0x08017ebc
 80016d4:	08017ec8 	.word	0x08017ec8
 80016d8:	08017ed4 	.word	0x08017ed4
 80016dc:	08017ee0 	.word	0x08017ee0
 80016e0:	08017eec 	.word	0x08017eec
 80016e4:	20000c80 	.word	0x20000c80
 80016e8:	08017ef8 	.word	0x08017ef8
 80016ec:	08017f00 	.word	0x08017f00
 80016f0:	08017f0c 	.word	0x08017f0c

080016f4 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d836      	bhi.n	8001778 <commandRespond+0x84>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <commandRespond+0x1c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001735 	.word	0x08001735
 8001714:	08001735 	.word	0x08001735
 8001718:	0800175b 	.word	0x0800175b
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800175b 	.word	0x0800175b
 8001724:	0800175b 	.word	0x0800175b
 8001728:	0800175b 	.word	0x0800175b
 800172c:	0800175b 	.word	0x0800175b
 8001730:	0800175b 	.word	0x0800175b
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001734:	f005 ff72 	bl	800761c <scaraIsScanLimit>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <commandRespond+0x94>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	7cfa      	ldrb	r2, [r7, #19]
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <commandRespond+0x98>)
 800174e:	2114      	movs	r1, #20
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f011 fbed 	bl	8012f30 <sniprintf>
 8001756:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001758:	e010      	b.n	800177c <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <commandRespond+0x94>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <commandRespond+0x9c>)
 800176c:	2191      	movs	r1, #145	; 0x91
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f011 fbde 	bl	8012f30 <sniprintf>
 8001774:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001776:	e001      	b.n	800177c <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 800177c:	697b      	ldr	r3, [r7, #20]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000002c 	.word	0x2000002c
 800178c:	08017f20 	.word	0x08017f20
 8001790:	08017f2c 	.word	0x08017f2c

08001794 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	; 0x58
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s\n", line, message);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	f107 0008 	add.w	r0, r7, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <LOG_REPORT+0x78>)
 80017ae:	213f      	movs	r1, #63	; 0x3f
 80017b0:	f011 fbbe 	bl	8012f30 <sniprintf>
 80017b4:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d101      	bne.n	80017c2 <LOG_REPORT+0x2e>
		return FALSE;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01f      	b.n	8001802 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <LOG_REPORT+0x7c>)
 80017cc:	f001 fe31 	bl	8003432 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <LOG_REPORT+0x80>)
 80017d2:	f006 fe83 	bl	80084dc <HAL_DMA_GetState>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <LOG_REPORT+0x4c>
		return TRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	e010      	b.n	8001802 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <LOG_REPORT+0x84>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <LOG_REPORT+0x7c>)
 80017e8:	f001 fe4b 	bl	8003482 <ringBuff_PopArray>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017f6:	461a      	mov	r2, r3
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <LOG_REPORT+0x84>)
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <LOG_REPORT+0x88>)
 80017fc:	f009 fa0e 	bl	800ac1c <HAL_UART_Transmit_DMA>
	return TRUE;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08017f38 	.word	0x08017f38
 8001810:	2000086c 	.word	0x2000086c
 8001814:	20005e40 	.word	0x20005e40
 8001818:	200051dc 	.word	0x200051dc
 800181c:	20005e00 	.word	0x20005e00

08001820 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d901      	bls.n	800183a <double2string+0x1a>
		precision = 6;
 8001836:	2306      	movs	r3, #6
 8001838:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001846:	f7ff f959 	bl	8000afc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <double2string+0x38>
		sign = -1;
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001856:	e002      	b.n	800185e <double2string+0x3e>
	} else {
		sign = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe6e 	bl	8000544 <__aeabi_i2d>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001880:	a307      	add	r3, pc, #28	; (adr r3, 80018a0 <double2string+0x80>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188a:	f7ff f955 	bl	8000b38 <__aeabi_dcmpgt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <double2string+0x88>
		return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e265      	b.n	8001d66 <double2string+0x546>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80018a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ac:	f7ff f964 	bl	8000b78 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4acf      	ldr	r2, [pc, #828]	; (8001bf0 <double2string+0x3d0>)
 80018b4:	fb82 1203 	smull	r1, r2, r2, r3
 80018b8:	1192      	asrs	r2, r2, #6
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f7ff f957 	bl	8000b78 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4ac9      	ldr	r2, [pc, #804]	; (8001bf4 <double2string+0x3d4>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7f3b      	ldrb	r3, [r7, #28]
 80018dc:	4619      	mov	r1, r3
 80018de:	0149      	lsls	r1, r1, #5
 80018e0:	1ac9      	subs	r1, r1, r3
 80018e2:	0089      	lsls	r1, r1, #2
 80018e4:	1acb      	subs	r3, r1, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7ff f940 	bl	8000b78 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4abf      	ldr	r2, [pc, #764]	; (8001bf8 <double2string+0x3d8>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1092      	asrs	r2, r2, #2
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7f7b      	ldrb	r3, [r7, #29]
 800190a:	4619      	mov	r1, r3
 800190c:	0149      	lsls	r1, r1, #5
 800190e:	1ac9      	subs	r1, r1, r3
 8001910:	0089      	lsls	r1, r1, #2
 8001912:	1acb      	subs	r3, r1, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	7f3b      	ldrb	r3, [r7, #28]
 800191a:	4618      	mov	r0, r3
 800191c:	0080      	lsls	r0, r0, #2
 800191e:	4418      	add	r0, r3
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	1ac3      	subs	r3, r0, r3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	440b      	add	r3, r1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001936:	f7ff f91f 	bl	8000b78 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7f7b      	ldrb	r3, [r7, #29]
 8001940:	4619      	mov	r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	4419      	add	r1, r3
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	4618      	mov	r0, r3
 8001952:	0040      	lsls	r0, r0, #1
 8001954:	4403      	add	r3, r0
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	440b      	add	r3, r1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7fbb      	ldrb	r3, [r7, #30]
 8001964:	4619      	mov	r1, r3
 8001966:	0149      	lsls	r1, r1, #5
 8001968:	1ac9      	subs	r1, r1, r3
 800196a:	0089      	lsls	r1, r1, #2
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001978:	7f3b      	ldrb	r3, [r7, #28]
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	fb03 f302 	mul.w	r3, r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f7fe fc87 	bl	80002a8 <__aeabi_dsub>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4625      	mov	r5, r4
 80019a0:	461c      	mov	r4, r3
 80019a2:	7f7b      	ldrb	r3, [r7, #29]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	fb03 f302 	mul.w	r3, r3, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc75 	bl	80002a8 <__aeabi_dsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb6 	bl	8000544 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc62 	bl	80002a8 <__aeabi_dsub>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4625      	mov	r5, r4
 80019ea:	461c      	mov	r4, r3
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda8 	bl	8000544 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc54 	bl	80002a8 <__aeabi_dsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <double2string+0x3dc>)
 8001a0e:	f7fe fe03 	bl	8000618 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1e:	f7ff f8ab 	bl	8000b78 <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <double2string+0x3d4>)
 8001a26:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2a:	1152      	asrs	r2, r2, #5
 8001a2c:	17db      	asrs	r3, r3, #31
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a38:	f7ff f89e 	bl	8000b78 <__aeabi_d2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <double2string+0x3d8>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1092      	asrs	r2, r2, #2
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7d3b      	ldrb	r3, [r7, #20]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	0149      	lsls	r1, r1, #5
 8001a52:	1ac9      	subs	r1, r1, r3
 8001a54:	0089      	lsls	r1, r1, #2
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a66:	f7ff f887 	bl	8000b78 <__aeabi_d2iz>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	4619      	mov	r1, r3
 8001a72:	0149      	lsls	r1, r1, #5
 8001a74:	1ac9      	subs	r1, r1, r3
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2d9      	uxtb	r1, r3
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	0080      	lsls	r0, r0, #2
 8001a84:	4418      	add	r0, r3
 8001a86:	00c0      	lsls	r0, r0, #3
 8001a88:	1ac3      	subs	r3, r0, r3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	440b      	add	r3, r1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	fb03 f302 	mul.w	r3, r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd4e 	bl	8000544 <__aeabi_i2d>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	f7fe fbf8 	bl	80002a8 <__aeabi_dsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd39 	bl	8000544 <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbe5 	bl	80002a8 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4625      	mov	r5, r4
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4618      	mov	r0, r3
 8001b00:	4621      	mov	r1, r4
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <double2string+0x3dc>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b18:	f7ff f82e 	bl	8000b78 <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <double2string+0x3d4>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1152      	asrs	r2, r2, #5
 8001b26:	17db      	asrs	r3, r3, #31
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001b2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b32:	f7ff f821 	bl	8000b78 <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <double2string+0x3d8>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	1ac9      	subs	r1, r1, r3
 8001b4e:	0089      	lsls	r1, r1, #2
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	f7ff f80a 	bl	8000b78 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7e3b      	ldrb	r3, [r7, #24]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	0149      	lsls	r1, r1, #5
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	0089      	lsls	r1, r1, #2
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	0080      	lsls	r0, r0, #2
 8001b7e:	4418      	add	r0, r3
 8001b80:	00c0      	lsls	r0, r0, #3
 8001b82:	1ac3      	subs	r3, r0, r3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	440b      	add	r3, r1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fb03 f302 	mul.w	r3, r3, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd0 	bl	8000544 <__aeabi_i2d>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bb0:	f7fe fb7a 	bl	80002a8 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4625      	mov	r5, r4
 8001bba:	461c      	mov	r4, r3
 8001bbc:	7e3b      	ldrb	r3, [r7, #24]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2364      	movs	r3, #100	; 0x64
 8001bc2:	fb03 f302 	mul.w	r3, r3, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcbc 	bl	8000544 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb68 	bl	80002a8 <__aeabi_dsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4625      	mov	r5, r4
 8001bde:	461c      	mov	r4, r3
 8001be0:	7e7b      	ldrb	r3, [r7, #25]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcae 	bl	8000544 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e008      	b.n	8001c00 <double2string+0x3e0>
 8001bee:	bf00      	nop
 8001bf0:	10624dd3 	.word	0x10624dd3
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	408f4000 	.word	0x408f4000
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb50 	bl	80002a8 <__aeabi_dsub>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <double2string+0x550>)
 8001c16:	f7fe ff85 	bl	8000b24 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <double2string+0x408>
		le[5]++;
 8001c20:	7e7b      	ldrb	r3, [r7, #25]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d107      	bne.n	8001c46 <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	222d      	movs	r2, #45	; 0x2d
 8001c44:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <double2string+0x554>)
 8001c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c50:	f7fe ff54 	bl	8000afc <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <double2string+0x44c>
		*(result + index++) = 0x30;
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e04b      	b.n	8001d04 <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001c72:	e027      	b.n	8001cc4 <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001c74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3230      	adds	r2, #48	; 0x30
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
				i++;
 8001ca6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001cb4:	e00a      	b.n	8001ccc <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001cb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	ddd3      	ble.n	8001c74 <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001ccc:	e016      	b.n	8001cfc <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001cce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3230      	adds	r2, #48	; 0x30
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	dde4      	ble.n	8001cce <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	222e      	movs	r2, #46	; 0x2e
 8001d12:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d1a:	e016      	b.n	8001d4a <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001d1c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d24:	4413      	add	r3, r2
 8001d26:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	440b      	add	r3, r1
 8001d36:	3230      	adds	r2, #48	; 0x30
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d3c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d4a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe3      	blt.n	8001d1c <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	return index;
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	3fe00000 	.word	0x3fe00000
 8001d74:	3ff00000 	.word	0x3ff00000

08001d78 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	466b      	mov	r3, sp
 8001d86:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <packPayload+0x1c>
		return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e056      	b.n	8001e42 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <packPayload+0x28>
		return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e050      	b.n	8001e42 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	00d4      	lsls	r4, r2, #3
 8001dc2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	00d4      	lsls	r4, r2, #3
 8001dda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4603      	mov	r3, r0
 8001de2:	3307      	adds	r3, #7
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dec:	466b      	mov	r3, sp
 8001dee:	3300      	adds	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	61ba      	str	r2, [r7, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2128      	movs	r1, #40	; 0x28
 8001e00:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e00b      	b.n	8001e20 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	61b9      	str	r1, [r7, #24]
 8001e14:	7811      	ldrb	r1, [r2, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbef      	blt.n	8001e08 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61ba      	str	r2, [r7, #24]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2129      	movs	r1, #41	; 0x29
 8001e32:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	f010 f95b 	bl	80120f6 <memmove>

	return out_lenght;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	46ad      	mov	sp, r5
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}

08001e4c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	466b      	mov	r3, sp
 8001e58:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	dc02      	bgt.n	8001e66 <unPackPayload+0x1a>
		return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e063      	b.n	8001f2e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b28      	cmp	r3, #40	; 0x28
 8001e6c:	d106      	bne.n	8001e7c <unPackPayload+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b29      	cmp	r3, #41	; 0x29
 8001e7a:	d002      	beq.n	8001e82 <unPackPayload+0x36>
		return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e055      	b.n	8001f2e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3b02      	subs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001e88:	6938      	ldr	r0, [r7, #16]
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	00d4      	lsls	r4, r2, #3
 8001ea0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ea4:	00cb      	lsls	r3, r1, #3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	00d4      	lsls	r4, r2, #3
 8001eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ebc:	00cb      	lsls	r3, r1, #3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eca:	466b      	mov	r3, sp
 8001ecc:	3300      	adds	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e017      	b.n	8001f0a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b28      	cmp	r3, #40	; 0x28
 8001ee4:	d00e      	beq.n	8001f04 <unPackPayload+0xb8>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d008      	beq.n	8001f04 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	6139      	str	r1, [r7, #16]
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbe2      	blt.n	8001eda <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f010 f904 	bl	8012128 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f010 f8e5 	bl	80120f6 <memmove>

	return out_lenght;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	46ad      	mov	sp, r5
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}

08001f38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f005 ffe0 	bl	8007f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f005 fff9 	bl	8007f5c <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20001024 	.word	0x20001024
 8001fa8:	20001078 	.word	0x20001078

08001fac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00c fc57 	bl	800e872 <osMutexCreate>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_FREERTOS_Init+0x90>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001fca:	2301      	movs	r3, #1
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fce:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00c fde3 	bl	800ebac <osMailCreate>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_FREERTOS_Init+0x94>)
 8001fea:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_FREERTOS_Init+0x98>)
 8001fee:	f107 041c 	add.w	r4, r7, #28
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00c fbd3 	bl	800e7b2 <osThreadCreate>
 800200c:	4602      	mov	r2, r0
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_FREERTOS_Init+0x9c>)
 8002010:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_FREERTOS_Init+0xa0>)
 8002014:	463c      	mov	r4, r7
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002024:	463b      	mov	r3, r7
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f00c fbc2 	bl	800e7b2 <osThreadCreate>
 800202e:	4602      	mov	r2, r0
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_FREERTOS_Init+0xa4>)
 8002032:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	; 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200052e0 	.word	0x200052e0
 8002040:	200052e4 	.word	0x200052e4
 8002044:	08017f54 	.word	0x08017f54
 8002048:	200052dc 	.word	0x200052dc
 800204c:	08017f80 	.word	0x08017f80
 8002050:	200052e8 	.word	0x200052e8
 8002054:	00000000 	.word	0x00000000

08002058 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800205e:	af3e      	add	r7, sp, #248	; 0xf8
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002064:	f00f fac2 	bl	80115ec <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	2110      	movs	r1, #16
 800206c:	48b6      	ldr	r0, [pc, #728]	; (8002348 <StartDefaultTask+0x2f0>)
 800206e:	f006 fcbb 	bl	80089e8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN StartDefaultTask */
  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
  // Robot variable
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002078:	21c4      	movs	r1, #196	; 0xc4
 800207a:	48b4      	ldr	r0, [pc, #720]	; (800234c <StartDefaultTask+0x2f4>)
 800207c:	f7ff fb8a 	bl	8001794 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  no_scan = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  no_duty = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
  no_duty_success	= 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
  no_duty_fail		= 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  current_mode	 = scaraGetMode();
 800209e:	f005 faa5 	bl	80075ec <scaraGetMode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
  current_state	 = scaraGetDutyState();
 80020a8:	f005 faac 	bl	8007604 <scaraGetDutyState>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 80020b2:	4aa7      	ldr	r2, [pc, #668]	; (8002350 <StartDefaultTask+0x2f8>)
 80020b4:	a4a0      	add	r4, pc, #640	; (adr r4, 8002338 <StartDefaultTask+0x2e0>)
 80020b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020ba:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	  positionNext.Theta2 = PI/3;
 80020be:	4aa4      	ldr	r2, [pc, #656]	; (8002350 <StartDefaultTask+0x2f8>)
 80020c0:	a49f      	add	r4, pc, #636	; (adr r4, 8002340 <StartDefaultTask+0x2e8>)
 80020c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020c6:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	  positionNext.D3 = 10;
 80020ca:	4aa1      	ldr	r2, [pc, #644]	; (8002350 <StartDefaultTask+0x2f8>)
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	4ca0      	ldr	r4, [pc, #640]	; (8002354 <StartDefaultTask+0x2fc>)
 80020d2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	  positionNext.Theta4 = 0;
 80020d6:	4a9e      	ldr	r2, [pc, #632]	; (8002350 <StartDefaultTask+0x2f8>)
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	  positionNext.t = 0;
 80020e4:	4a9a      	ldr	r2, [pc, #616]	; (8002350 <StartDefaultTask+0x2f8>)
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  kinematicForward(&positionNext);
 80020f2:	4897      	ldr	r0, [pc, #604]	; (8002350 <StartDefaultTask+0x2f8>)
 80020f4:	f000 fd64 	bl	8002bc0 <kinematicForward>
  /* Infinite loop */

  for(;;)
  {
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
	  respond_packed_lenght = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
	  infor_lenght			= 0;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
	  infor_packed_lenght	= 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
	  task_usb_lenght		= 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
	  usb_lenght			= 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800211c:	4a8e      	ldr	r2, [pc, #568]	; (8002358 <StartDefaultTask+0x300>)
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <StartDefaultTask+0x304>)
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	2368      	movs	r3, #104	; 0x68
 8002126:	461a      	mov	r2, r3
 8002128:	f00f ffda 	bl	80120e0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800212c:	4a8b      	ldr	r2, [pc, #556]	; (800235c <StartDefaultTask+0x304>)
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <StartDefaultTask+0x2f8>)
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	2368      	movs	r3, #104	; 0x68
 8002136:	461a      	mov	r2, r3
 8002138:	f00f ffd2 	bl	80120e0 <memcpy>
#endif

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <StartDefaultTask+0x308>)
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8002144:	2200      	movs	r2, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f00c fddc 	bl	800ed04 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800214c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002150:	2b20      	cmp	r3, #32
 8002152:	d11a      	bne.n	800218a <StartDefaultTask+0x132>
		   dataMail = ret_mail.value.p;
 8002154:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002158:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800215c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002160:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002164:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8002168:	4618      	mov	r0, r3
 800216a:	f00f ffb9 	bl	80120e0 <memcpy>
		   isNewDuty = TRUE;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002174:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <StartDefaultTask+0x308>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800217c:	4618      	mov	r0, r3
 800217e:	f00c fe35 	bl	800edec <osMailFree>
		   LOG_REPORT("Receive mail", __LINE__);
 8002182:	21f0      	movs	r1, #240	; 0xf0
 8002184:	4877      	ldr	r0, [pc, #476]	; (8002364 <StartDefaultTask+0x30c>)
 8002186:	f7ff fb05 	bl	8001794 <LOG_REPORT>
	  }
	  if(isNewDuty) {
 800218a:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80a9 	beq.w	80022e6 <StartDefaultTask+0x28e>
		  memset(respond, 0, 40);
 8002194:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002198:	2228      	movs	r2, #40	; 0x28
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f00f ffc3 	bl	8012128 <memset>
		  switch( duty_cmd.robot_mode) {
 80021a2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d01c      	beq.n	80021e6 <StartDefaultTask+0x18e>
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d04c      	beq.n	800224a <StartDefaultTask+0x1f2>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8090 	bne.w	80022d6 <StartDefaultTask+0x27e>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 80021b6:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80021ba:	3301      	adds	r3, #1
 80021bc:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
				  current_mode	 = SCARA_MODE_STOP;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
				  respond_lenght = commandRespond(RPD_OK,
 80021c6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <StartDefaultTask+0x310>)
 80021d2:	2008      	movs	r0, #8
 80021d4:	f7ff fa8e 	bl	80016f4 <commandRespond>
 80021d8:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80021dc:	21fd      	movs	r1, #253	; 0xfd
 80021de:	4863      	ldr	r0, [pc, #396]	; (800236c <StartDefaultTask+0x314>)
 80021e0:	f7ff fad8 	bl	8001794 <LOG_REPORT>
			  }
			  break;
 80021e4:	e07c      	b.n	80022e0 <StartDefaultTask+0x288>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021e6:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d11c      	bne.n	8002228 <StartDefaultTask+0x1d0>
 80021ee:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <StartDefaultTask+0x1d0>
					  no_scan++;
 80021f6:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80021fa:	3301      	adds	r3, #1
 80021fc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
					  current_mode = SCARA_MODE_SCAN;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
					  respond_lenght = commandRespond(RPD_OK,
 8002206:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002210:	4a57      	ldr	r2, [pc, #348]	; (8002370 <StartDefaultTask+0x318>)
 8002212:	2008      	movs	r0, #8
 8002214:	f7ff fa6e 	bl	80016f4 <commandRespond>
 8002218:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
							  	  	  	  	  	  	  duty_cmd.id_command,
													  "Start Scan",
													  (char *)respond);
					  LOG_REPORT("SCAN", __LINE__);
 800221c:	f240 1109 	movw	r1, #265	; 0x109
 8002220:	4854      	ldr	r0, [pc, #336]	; (8002374 <StartDefaultTask+0x31c>)
 8002222:	f7ff fab7 	bl	8001794 <LOG_REPORT>
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
				  }
			  }
			  break;
 8002226:	e05b      	b.n	80022e0 <StartDefaultTask+0x288>
					  respond_lenght = commandRespond(RPD_ERROR,
 8002228:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002232:	4a51      	ldr	r2, [pc, #324]	; (8002378 <StartDefaultTask+0x320>)
 8002234:	2007      	movs	r0, #7
 8002236:	f7ff fa5d 	bl	80016f4 <commandRespond>
 800223a:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
 800223e:	f240 110f 	movw	r1, #271	; 0x10f
 8002242:	484e      	ldr	r0, [pc, #312]	; (800237c <StartDefaultTask+0x324>)
 8002244:	f7ff faa6 	bl	8001794 <LOG_REPORT>
			  break;
 8002248:	e04a      	b.n	80022e0 <StartDefaultTask+0x288>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 800224a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800224e:	3301      	adds	r3, #1
 8002250:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002254:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 8002258:	2b02      	cmp	r3, #2
 800225a:	d125      	bne.n	80022a8 <StartDefaultTask+0x250>
 800225c:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <StartDefaultTask+0x250>
					  if (scaraIsScanLimit()) {
 8002264:	f005 f9da 	bl	800761c <scaraIsScanLimit>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <StartDefaultTask+0x224>
						  current_mode	 = SCARA_MODE_DUTY;
 800226e:	2302      	movs	r3, #2
 8002270:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
						  current_state	 = SCARA_DUTY_STATE_INIT;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
					  if (scaraIsScanLimit()) {
 800227a:	e02b      	b.n	80022d4 <StartDefaultTask+0x27c>
					  } else {
						  no_duty_fail++;
 800227c:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8002280:	3301      	adds	r3, #1
 8002282:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
						  respond_lenght = commandRespond(RPD_ERROR,
 8002286:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <StartDefaultTask+0x328>)
 8002292:	2007      	movs	r0, #7
 8002294:	f7ff fa2e 	bl	80016f4 <commandRespond>
 8002298:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 800229c:	f44f 7190 	mov.w	r1, #288	; 0x120
 80022a0:	4838      	ldr	r0, [pc, #224]	; (8002384 <StartDefaultTask+0x32c>)
 80022a2:	f7ff fa77 	bl	8001794 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 80022a6:	e015      	b.n	80022d4 <StartDefaultTask+0x27c>
					  }
				  } else {
					  no_duty_fail++;
 80022a8:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80022ac:	3301      	adds	r3, #1
 80022ae:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
					  respond_lenght	= commandRespond(RPD_ERROR,
 80022b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80022bc:	4a32      	ldr	r2, [pc, #200]	; (8002388 <StartDefaultTask+0x330>)
 80022be:	2007      	movs	r0, #7
 80022c0:	f7ff fa18 	bl	80016f4 <commandRespond>
 80022c4:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022c8:	f44f 7194 	mov.w	r1, #296	; 0x128
 80022cc:	482f      	ldr	r0, [pc, #188]	; (800238c <StartDefaultTask+0x334>)
 80022ce:	f7ff fa61 	bl	8001794 <LOG_REPORT>
				  }
			  }
			  break;
 80022d2:	e005      	b.n	80022e0 <StartDefaultTask+0x288>
 80022d4:	e004      	b.n	80022e0 <StartDefaultTask+0x288>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022d6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80022da:	482d      	ldr	r0, [pc, #180]	; (8002390 <StartDefaultTask+0x338>)
 80022dc:	f7ff fa5a 	bl	8001794 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 80022e6:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d00b      	beq.n	8002306 <StartDefaultTask+0x2ae>
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d010      	beq.n	8002314 <StartDefaultTask+0x2bc>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 814f 	bne.w	8002596 <StartDefaultTask+0x53e>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
			  current_state = SCARA_DUTY_STATE_READY;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
		  }
		  break;
 8002304:	e14d      	b.n	80025a2 <StartDefaultTask+0x54a>
	  case SCARA_MODE_SCAN:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002306:	2302      	movs	r3, #2
 8002308:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
			  current_state = SCARA_DUTY_STATE_READY;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
		  }
		  break;
 8002312:	e146      	b.n	80025a2 <StartDefaultTask+0x54a>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 8002314:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 8002318:	2b03      	cmp	r3, #3
 800231a:	f200 8135 	bhi.w	8002588 <StartDefaultTask+0x530>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <StartDefaultTask+0x2cc>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	08002395 	.word	0x08002395
 800232c:	08002473 	.word	0x08002473
 8002330:	08002525 	.word	0x08002525
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 8002334:	bf00      	nop
				  }
			  break;
 8002336:	e12d      	b.n	8002594 <StartDefaultTask+0x53c>
 8002338:	40000000 	.word	0x40000000
 800233c:	bff0c152 	.word	0xbff0c152
 8002340:	40000000 	.word	0x40000000
 8002344:	3ff0c152 	.word	0x3ff0c152
 8002348:	40020400 	.word	0x40020400
 800234c:	08017f9c 	.word	0x08017f9c
 8002350:	20005d58 	.word	0x20005d58
 8002354:	40240000 	.word	0x40240000
 8002358:	20005c88 	.word	0x20005c88
 800235c:	20005cf0 	.word	0x20005cf0
 8002360:	200052e4 	.word	0x200052e4
 8002364:	08017fbc 	.word	0x08017fbc
 8002368:	08017fcc 	.word	0x08017fcc
 800236c:	08017fd8 	.word	0x08017fd8
 8002370:	08017fe8 	.word	0x08017fe8
 8002374:	08017ff4 	.word	0x08017ff4
 8002378:	08017ffc 	.word	0x08017ffc
 800237c:	08018004 	.word	0x08018004
 8002380:	08018018 	.word	0x08018018
 8002384:	0801802c 	.word	0x0801802c
 8002388:	08018040 	.word	0x08018040
 800238c:	08018048 	.word	0x08018048
 8002390:	08018058 	.word	0x08018058
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status;
					  status = scaraInitDuty(duty_cmd);
 8002394:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 8002398:	4668      	mov	r0, sp
 800239a:	f104 0310 	add.w	r3, r4, #16
 800239e:	22f8      	movs	r2, #248	; 0xf8
 80023a0:	4619      	mov	r1, r3
 80023a2:	f00f fe9d 	bl	80120e0 <memcpy>
 80023a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023aa:	f001 f8e9 	bl	8003580 <scaraInitDuty>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 352a 	strb.w	r3, [r7, #1322]	; 0x52a
					  if ( SCARA_STATUS_OK == status) {
 80023b4:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13d      	bne.n	8002438 <StartDefaultTask+0x3e0>
						  no_duty_success++;
 80023bc:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80023c0:	3301      	adds	r3, #1
 80023c2:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
						  run_time			= 0;
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80023d8:	e9c2 3400 	strd	r3, r4, [r2]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 80023dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status],
 80023e6:	4ab2      	ldr	r2, [pc, #712]	; (80026b0 <StartDefaultTask+0x658>)
 80023e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 80023ec:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80023f0:	2008      	movs	r0, #8
 80023f2:	f7ff f97f 	bl	80016f4 <commandRespond>
 80023f6:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 80023fa:	4cae      	ldr	r4, [pc, #696]	; (80026b4 <StartDefaultTask+0x65c>)
 80023fc:	f507 7558 	add.w	r5, r7, #864	; 0x360
 8002400:	4668      	mov	r0, sp
 8002402:	f104 0308 	add.w	r3, r4, #8
 8002406:	2260      	movs	r2, #96	; 0x60
 8002408:	4619      	mov	r1, r3
 800240a:	f00f fe69 	bl	80120e0 <memcpy>
 800240e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002412:	4628      	mov	r0, r5
 8002414:	f005 f93c 	bl	8007690 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 8002418:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800241c:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8002420:	2100      	movs	r1, #0
 8002422:	2003      	movs	r0, #3
 8002424:	f7ff f966 	bl	80016f4 <commandRespond>
 8002428:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
		  	  	  	  	  	  	  	  	  	  	  	  	  	  0,
															  (char *)position,
															  (char *)infor);
						  LOG_REPORT("INIT SUCCESS", __LINE__);
 800242c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002430:	48a1      	ldr	r0, [pc, #644]	; (80026b8 <StartDefaultTask+0x660>)
 8002432:	f7ff f9af 	bl	8001794 <LOG_REPORT>
															  (char *)DETAIL_STATUS[status],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 8002436:	e0ad      	b.n	8002594 <StartDefaultTask+0x53c>
						  no_duty_fail++;
 8002438:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800243c:	3301      	adds	r3, #1
 800243e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
						  current_state 	= SCARA_DUTY_STATE_READY;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002448:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	f897 352a 	ldrb.w	r3, [r7, #1322]	; 0x52a
															  (char *)DETAIL_STATUS[status],
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <StartDefaultTask+0x658>)
 8002454:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002458:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800245c:	2007      	movs	r0, #7
 800245e:	f7ff f949 	bl	80016f4 <commandRespond>
 8002462:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
						  LOG_REPORT("INIT FAIL", __LINE__);
 8002466:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800246a:	4894      	ldr	r0, [pc, #592]	; (80026bc <StartDefaultTask+0x664>)
 800246c:	f7ff f992 	bl	8001794 <LOG_REPORT>
			  break;
 8002470:	e090      	b.n	8002594 <StartDefaultTask+0x53c>
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 8002472:	a38d      	add	r3, pc, #564	; (adr r3, 80026a8 <StartDefaultTask+0x650>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 800247c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002480:	f7fd ff14 	bl	80002ac <__adddf3>
 8002484:	4603      	mov	r3, r0
 8002486:	460c      	mov	r4, r1
 8002488:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800248c:	e9c2 3400 	strd	r3, r4, [r2]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 8002490:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8002494:	ed93 0b00 	vldr	d0, [r3]
 8002498:	f005 f8ce 	bl	8007638 <scaraIsFinish>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <StartDefaultTask+0x452>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80024a2:	2303      	movs	r3, #3
 80024a4:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 80024a8:	e074      	b.n	8002594 <StartDefaultTask+0x53c>
						  status = scaraFlowDuty(run_time);
 80024aa:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80024ae:	ed93 0b00 	vldr	d0, [r3]
 80024b2:	f003 fb17 	bl	8005ae4 <scaraFlowDuty>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 352b 	strb.w	r3, [r7, #1323]	; 0x52b
						  if ( SCARA_STATUS_OK == status) {
 80024bc:	f897 352b 	ldrb.w	r3, [r7, #1323]	; 0x52b
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d119      	bne.n	80024f8 <StartDefaultTask+0x4a0>
							  scaraPosition2String((char *)position, positionCurrent);
 80024c4:	4c7b      	ldr	r4, [pc, #492]	; (80026b4 <StartDefaultTask+0x65c>)
 80024c6:	f507 7558 	add.w	r5, r7, #864	; 0x360
 80024ca:	4668      	mov	r0, sp
 80024cc:	f104 0308 	add.w	r3, r4, #8
 80024d0:	2260      	movs	r2, #96	; 0x60
 80024d2:	4619      	mov	r1, r3
 80024d4:	f00f fe04 	bl	80120e0 <memcpy>
 80024d8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024dc:	4628      	mov	r0, r5
 80024de:	f005 f8d7 	bl	8007690 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 80024e2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80024e6:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80024ea:	2100      	movs	r1, #0
 80024ec:	2004      	movs	r0, #4
 80024ee:	f7ff f901 	bl	80016f4 <commandRespond>
 80024f2:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
			  break;
 80024f6:	e04d      	b.n	8002594 <StartDefaultTask+0x53c>
							  current_state = SCARA_DUTY_STATE_FINISH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
							  infor_lenght = commandRespond(RPD_STOP,
 80024fe:	f897 352b 	ldrb.w	r3, [r7, #1323]	; 0x52b
															(char *)DETAIL_STATUS[status],
 8002502:	4a6b      	ldr	r2, [pc, #428]	; (80026b0 <StartDefaultTask+0x658>)
 8002504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 8002508:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800250c:	2100      	movs	r1, #0
 800250e:	2006      	movs	r0, #6
 8002510:	f7ff f8f0 	bl	80016f4 <commandRespond>
 8002514:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
							  LOG_REPORT("STOP", __LINE__);
 8002518:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800251c:	4868      	ldr	r0, [pc, #416]	; (80026c0 <StartDefaultTask+0x668>)
 800251e:	f7ff f939 	bl	8001794 <LOG_REPORT>
			  break;
 8002522:	e037      	b.n	8002594 <StartDefaultTask+0x53c>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  current_state = SCARA_DUTY_STATE_READY;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3546 	strb.w	r3, [r7, #1350]	; 0x546
					  positionNext.t = 0;
 800252a:	4a66      	ldr	r2, [pc, #408]	; (80026c4 <StartDefaultTask+0x66c>)
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f04f 0400 	mov.w	r4, #0
 8002534:	e9c2 3406 	strd	r3, r4, [r2, #24]
					  positionNext.total_time = 0;
 8002538:	4a62      	ldr	r2, [pc, #392]	; (80026c4 <StartDefaultTask+0x66c>)
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f04f 0400 	mov.w	r4, #0
 8002542:	e9c2 3408 	strd	r3, r4, [r2, #32]
					  positionNext.q = 0;
 8002546:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <StartDefaultTask+0x66c>)
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	f04f 0400 	mov.w	r4, #0
 8002550:	e9c2 3400 	strd	r3, r4, [r2]
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 8002554:	4c57      	ldr	r4, [pc, #348]	; (80026b4 <StartDefaultTask+0x65c>)
 8002556:	f507 7558 	add.w	r5, r7, #864	; 0x360
 800255a:	4668      	mov	r0, sp
 800255c:	f104 0308 	add.w	r3, r4, #8
 8002560:	2260      	movs	r2, #96	; 0x60
 8002562:	4619      	mov	r1, r3
 8002564:	f00f fdbc 	bl	80120e0 <memcpy>
 8002568:	e894 000c 	ldmia.w	r4, {r2, r3}
 800256c:	4628      	mov	r0, r5
 800256e:	f005 f88f 	bl	8007690 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 8002572:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002576:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800257a:	2100      	movs	r1, #0
 800257c:	2005      	movs	r0, #5
 800257e:	f7ff f8b9 	bl	80016f4 <commandRespond>
 8002582:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 8002586:	e005      	b.n	8002594 <StartDefaultTask+0x53c>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002588:	f240 1199 	movw	r1, #409	; 0x199
 800258c:	484e      	ldr	r0, [pc, #312]	; (80026c8 <StartDefaultTask+0x670>)
 800258e:	f7ff f901 	bl	8001794 <LOG_REPORT>
					  while(1);
 8002592:	e7fe      	b.n	8002592 <StartDefaultTask+0x53a>
				  }
			  }

		  }
		  break;
 8002594:	e005      	b.n	80025a2 <StartDefaultTask+0x54a>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002596:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800259a:	484c      	ldr	r0, [pc, #304]	; (80026cc <StartDefaultTask+0x674>)
 800259c:	f7ff f8fa 	bl	8001794 <LOG_REPORT>
			  while(1);
 80025a0:	e7fe      	b.n	80025a0 <StartDefaultTask+0x548>
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <StartDefaultTask+0x678>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f04f 31ff 	mov.w	r1, #4294967295
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00c f97a 	bl	800e8a4 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 80025b0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80025b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b8:	4619      	mov	r1, r3
 80025ba:	4846      	ldr	r0, [pc, #280]	; (80026d4 <StartDefaultTask+0x67c>)
 80025bc:	f000 ff61 	bl	8003482 <ringBuff_PopArray>
 80025c0:	f8c7 0534 	str.w	r0, [r7, #1332]	; 0x534
	  osMutexRelease(usbTxMutexHandle);
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <StartDefaultTask+0x678>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f00c f9b9 	bl	800e940 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 80025ce:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dd13      	ble.n	80025fe <StartDefaultTask+0x5a6>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 80025d6:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80025da:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80025de:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fbc8 	bl	8001d78 <packPayload>
 80025e8:	f8c7 054c 	str.w	r0, [r7, #1356]	; 0x54c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 80025ec:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80025f0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00f fd71 	bl	80120e0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80025fe:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002602:	2b00      	cmp	r3, #0
 8002604:	dd0b      	ble.n	800261e <StartDefaultTask+0x5c6>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002606:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800260a:	f107 0208 	add.w	r2, r7, #8
 800260e:	4413      	add	r3, r2
 8002610:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8002614:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002618:	4618      	mov	r0, r3
 800261a:	f00f fd61 	bl	80120e0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 800261e:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8002622:	2b00      	cmp	r3, #0
 8002624:	dd19      	ble.n	800265a <StartDefaultTask+0x602>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002626:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800262a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800262e:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fba0 	bl	8001d78 <packPayload>
 8002638:	f8c7 0548 	str.w	r0, [r7, #1352]	; 0x548
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 800263c:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8002640:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002644:	4413      	add	r3, r2
 8002646:	f107 0208 	add.w	r2, r7, #8
 800264a:	4413      	add	r3, r2
 800264c:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 8002650:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8002654:	4618      	mov	r0, r3
 8002656:	f00f fd43 	bl	80120e0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 800265a:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 800265e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002662:	4413      	add	r3, r2
 8002664:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 8002668:	4413      	add	r3, r2
 800266a:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
	  // Send through USB
	  if (usb_lenght > 0) {
 800266e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002672:	2b00      	cmp	r3, #0
 8002674:	dd08      	ble.n	8002688 <StartDefaultTask+0x630>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002676:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800267a:	b29a      	uxth	r2, r3
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f00f f8be 	bl	8011804 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 8002688:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800268c:	4618      	mov	r0, r3
 800268e:	f004 ff9d 	bl	80075cc <scaraSetMode>
	  scaraSetDutyState(current_state);
 8002692:	f897 3546 	ldrb.w	r3, [r7, #1350]	; 0x546
 8002696:	4618      	mov	r0, r3
 8002698:	f004 ff78 	bl	800758c <scaraSetDutyState>

    osDelay(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f00c f8d4 	bl	800e84a <osDelay>
	  respond_lenght		= 0;
 80026a2:	e529      	b.n	80020f8 <StartDefaultTask+0xa0>
 80026a4:	f3af 8000 	nop.w
 80026a8:	40000000 	.word	0x40000000
 80026ac:	3f847ae1 	.word	0x3f847ae1
 80026b0:	20000c80 	.word	0x20000c80
 80026b4:	20005cf0 	.word	0x20005cf0
 80026b8:	0801806c 	.word	0x0801806c
 80026bc:	0801807c 	.word	0x0801807c
 80026c0:	08018088 	.word	0x08018088
 80026c4:	20005d58 	.word	0x20005d58
 80026c8:	08018090 	.word	0x08018090
 80026cc:	080180a0 	.word	0x080180a0
 80026d0:	200052e0 	.word	0x200052e0
 80026d4:	20000460 	.word	0x20000460

080026d8 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80026de:	af42      	add	r7, sp, #264	; 0x108
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	6018      	str	r0, [r3, #0]
	//uint8_t test_command1[60] = "(1 ROTA 3 0.785398 0.3 0 0.3)";
	//uint8_t test_command2[60] = "(456 OUTP 1)";

	//ringBuff_PushArray(&usb_rx_ringbuff, test_command1, strlen((char *)test_command1));
	//ringBuff_PushArray(&usb_rx_ringbuff, test_command2, strlen((char *)test_command2));
	no_duty	 = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	no_other = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80026f0:	2129      	movs	r1, #41	; 0x29
 80026f2:	4884      	ldr	r0, [pc, #528]	; (8002904 <Start_USB_RX_Task+0x22c>)
 80026f4:	f000 fee6 	bl	80034c4 <ringBuff_DistanceOf>
 80026f8:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
		  if ( -1 != distance ) {
 80026fc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d0f4      	beq.n	80026f0 <Start_USB_RX_Task+0x18>
 8002706:	466b      	mov	r3, sp
 8002708:	461e      	mov	r6, r3
			  LOG_REPORT("NEW PACKET", __LINE__);
 800270a:	f240 11ed 	movw	r1, #493	; 0x1ed
 800270e:	487e      	ldr	r0, [pc, #504]	; (8002908 <Start_USB_RX_Task+0x230>)
 8002710:	f7ff f840 	bl	8001794 <LOG_REPORT>
			  uint8_t temp[distance+1];
 8002714:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002718:	1c58      	adds	r0, r3, #1
 800271a:	1e43      	subs	r3, r0, #1
 800271c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8002720:	4603      	mov	r3, r0
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	00d4      	lsls	r4, r2, #3
 8002732:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002736:	00cb      	lsls	r3, r1, #3
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f04f 0400 	mov.w	r4, #0
 8002748:	00d4      	lsls	r4, r2, #3
 800274a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800274e:	00cb      	lsls	r3, r1, #3
 8002750:	4603      	mov	r3, r0
 8002752:	3307      	adds	r3, #7
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	ebad 0d03 	sub.w	sp, sp, r3
 800275c:	ab42      	add	r3, sp, #264	; 0x108
 800275e:	3300      	adds	r3, #0
 8002760:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002764:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002768:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800276c:	3301      	adds	r3, #1
 800276e:	461a      	mov	r2, r3
 8002770:	4864      	ldr	r0, [pc, #400]	; (8002904 <Start_USB_RX_Task+0x22c>)
 8002772:	f000 fe86 	bl	8003482 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002776:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800277a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800277e:	3301      	adds	r3, #1
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7ff fb62 	bl	8001e4c <unPackPayload>
 8002788:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
			  if( -1 == ret) {
 800278c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d105      	bne.n	80027a2 <Start_USB_RX_Task+0xca>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002796:	f240 11f3 	movw	r1, #499	; 0x1f3
 800279a:	485c      	ldr	r0, [pc, #368]	; (800290c <Start_USB_RX_Task+0x234>)
 800279c:	f7fe fffa 	bl	8001794 <LOG_REPORT>
 80027a0:	e0ae      	b.n	8002900 <Start_USB_RX_Task+0x228>
			  } else {
				  LOG_REPORT("UNPACK SUCCESS", __LINE__);
 80027a2:	f240 11f5 	movw	r1, #501	; 0x1f5
 80027a6:	485a      	ldr	r0, [pc, #360]	; (8002910 <Start_USB_RX_Task+0x238>)
 80027a8:	f7fe fff4 	bl	8001794 <LOG_REPORT>
				  LOG_REPORT((char*) temp, __LINE__);
 80027ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027b0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe ffed 	bl	8001794 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 80027ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027be:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80027c2:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fbee 	bl	8000fa8 <commandRead>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				  memset(detail, 0, sizeof(detail));
 80027d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027d6:	2287      	movs	r2, #135	; 0x87
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f00f fca4 	bl	8012128 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 80027e0:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 80027e4:	f897 52db 	ldrb.w	r5, [r7, #731]	; 0x2db
 80027e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027ec:	9340      	str	r3, [sp, #256]	; 0x100
 80027ee:	4668      	mov	r0, sp
 80027f0:	f104 0308 	add.w	r3, r4, #8
 80027f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f8:	4619      	mov	r1, r3
 80027fa:	f00f fc71 	bl	80120e0 <memcpy>
 80027fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe fe4a 	bl	800149c <commandReply>
 8002808:	4603      	mov	r3, r0
 800280a:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da

				  if ( RPD_DUTY == rpd_type) {
 800280e:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
 8002812:	2b09      	cmp	r3, #9
 8002814:	d131      	bne.n	800287a <Start_USB_RX_Task+0x1a2>
					  no_duty++;
 8002816:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800281a:	3301      	adds	r3, #1
 800281c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
					  // Wait allocate
					  while (dataMail == NULL) {
 8002826:	e008      	b.n	800283a <Start_USB_RX_Task+0x162>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <Start_USB_RX_Task+0x23c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	4618      	mov	r0, r3
 8002832:	f00c fa13 	bl	800ec5c <osMailAlloc>
 8002836:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
					  while (dataMail == NULL) {
 800283a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f2      	beq.n	8002828 <Start_USB_RX_Task+0x150>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002842:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002846:	f44f 7284 	mov.w	r2, #264	; 0x108
 800284a:	4619      	mov	r1, r3
 800284c:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 8002850:	f00f fc46 	bl	80120e0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <Start_USB_RX_Task+0x23c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 800285c:	4618      	mov	r0, r3
 800285e:	f00c fa13 	bl	800ec88 <osMailPut>
 8002862:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
					  if (osOK == result) {
 8002866:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800286a:	2b00      	cmp	r3, #0
 800286c:	d148      	bne.n	8002900 <Start_USB_RX_Task+0x228>
						  LOG_REPORT("DUTY SEND", __LINE__);
 800286e:	f240 2107 	movw	r1, #519	; 0x207
 8002872:	4829      	ldr	r0, [pc, #164]	; (8002918 <Start_USB_RX_Task+0x240>)
 8002874:	f7fe ff8e 	bl	8001794 <LOG_REPORT>
 8002878:	e042      	b.n	8002900 <Start_USB_RX_Task+0x228>
					  }

				  } else {
					  no_other++;
 800287a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800287e:	3301      	adds	r3, #1
 8002880:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
					  memset(respond, 0, sizeof(respond));
 8002884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002888:	2291      	movs	r2, #145	; 0x91
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f00f fc4b 	bl	8012128 <memset>
					  memset(message, 0, sizeof(message));
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	2296      	movs	r2, #150	; 0x96
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f00f fc44 	bl	8012128 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 80028a0:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80028a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80028ac:	f897 02da 	ldrb.w	r0, [r7, #730]	; 0x2da
 80028b0:	f7fe ff20 	bl	80016f4 <commandRespond>
 80028b4:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 80028b8:	f107 010c 	add.w	r1, r7, #12
 80028bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028c0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fa57 	bl	8001d78 <packPayload>
 80028ca:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <Start_USB_RX_Task+0x244>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 31ff 	mov.w	r1, #4294967295
 80028d6:	4618      	mov	r0, r3
 80028d8:	f00b ffe4 	bl	800e8a4 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80028e4:	4619      	mov	r1, r3
 80028e6:	480e      	ldr	r0, [pc, #56]	; (8002920 <Start_USB_RX_Task+0x248>)
 80028e8:	f000 fda3 	bl	8003432 <ringBuff_PushArray>
					  LOG_REPORT("ADD RINGBUFF", __LINE__);
 80028ec:	f240 2115 	movw	r1, #533	; 0x215
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <Start_USB_RX_Task+0x24c>)
 80028f2:	f7fe ff4f 	bl	8001794 <LOG_REPORT>
					  osMutexRelease(usbTxMutexHandle);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <Start_USB_RX_Task+0x244>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00c f820 	bl	800e940 <osMutexRelease>
 8002900:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002902:	e6f5      	b.n	80026f0 <Start_USB_RX_Task+0x18>
 8002904:	20000054 	.word	0x20000054
 8002908:	080180b0 	.word	0x080180b0
 800290c:	080180bc 	.word	0x080180bc
 8002910:	080180c8 	.word	0x080180c8
 8002914:	200052e4 	.word	0x200052e4
 8002918:	080180d8 	.word	0x080180d8
 800291c:	200052e0 	.word	0x200052e0
 8002920:	20000460 	.word	0x20000460
 8002924:	080180e4 	.word	0x080180e4

08002928 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002940:	4b26      	ldr	r3, [pc, #152]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002942:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002946:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <MX_FSMC_Init+0xb4>)
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <MX_FSMC_Init+0xb8>)
 800294c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002956:	2202      	movs	r2, #2
 8002958:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <MX_FSMC_Init+0xb4>)
 800295c:	2208      	movs	r2, #8
 800295e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002962:	2210      	movs	r2, #16
 8002964:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <MX_FSMC_Init+0xb4>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <MX_FSMC_Init+0xb4>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002980:	2200      	movs	r2, #0
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002986:	2200      	movs	r2, #0
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_FSMC_Init+0xb4>)
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_FSMC_Init+0xb4>)
 8002998:	2200      	movs	r2, #0
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_FSMC_Init+0xb4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80029a2:	230f      	movs	r3, #15
 80029a4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80029a6:	230f      	movs	r3, #15
 80029a8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80029aa:	23ff      	movs	r3, #255	; 0xff
 80029ac:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80029ae:	230f      	movs	r3, #15
 80029b0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80029b2:	2310      	movs	r3, #16
 80029b4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80029b6:	2311      	movs	r3, #17
 80029b8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_FSMC_Init+0xb4>)
 80029c6:	f006 f829 	bl	8008a1c <HAL_NOR_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80029d0:	f000 fcb8 	bl	8003344 <Error_Handler>
  }

}
 80029d4:	bf00      	nop
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200052ec 	.word	0x200052ec
 80029e0:	a0000104 	.word	0xa0000104

080029e4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_FSMC_MspInit+0xa8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d140      	bne.n	8002a82 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_FSMC_MspInit+0xa8>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_FSMC_MspInit+0xac>)
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_FSMC_MspInit+0xac>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6393      	str	r3, [r2, #56]	; 0x38
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_FSMC_MspInit+0xac>)
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002a22:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002a26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a34:	230c      	movs	r3, #12
 8002a36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4815      	ldr	r0, [pc, #84]	; (8002a94 <HAL_FSMC_MspInit+0xb0>)
 8002a3e:	f005 fe39 	bl	80086b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002a42:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002a46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a54:	230c      	movs	r3, #12
 8002a56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480e      	ldr	r0, [pc, #56]	; (8002a98 <HAL_FSMC_MspInit+0xb4>)
 8002a5e:	f005 fe29 	bl	80086b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a72:	230c      	movs	r3, #12
 8002a74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4808      	ldr	r0, [pc, #32]	; (8002a9c <HAL_FSMC_MspInit+0xb8>)
 8002a7c:	f005 fe1a 	bl	80086b4 <HAL_GPIO_Init>
 8002a80:	e000      	b.n	8002a84 <HAL_FSMC_MspInit+0xa0>
    return;
 8002a82:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20001478 	.word	0x20001478
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40020400 	.word	0x40020400

08002aa0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002aa8:	f7ff ff9c 	bl	80029e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUPPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002b5c:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <MX_GPIO_Init+0x104>)
 8002b5e:	f005 ff43 	bl	80089e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002b68:	4814      	ldr	r0, [pc, #80]	; (8002bbc <MX_GPIO_Init+0x108>)
 8002b6a:	f005 ff3d 	bl	80089e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUPPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002b6e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <MX_GPIO_Init+0x104>)
 8002b88:	f005 fd94 	bl	80086b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|PULSE_WRITE_Pin|STOP_Pin;
 8002b8c:	f44f 53c2 	mov.w	r3, #6208	; 0x1840
 8002b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_GPIO_Init+0x108>)
 8002ba6:	f005 fd85 	bl	80086b4 <HAL_GPIO_Init>

}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020400 	.word	0x40020400
 8002bbc:	40020c00 	.word	0x40020c00

08002bc0 <kinematicForward>:
 */

#include "kinematic.h"
#include "math.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc2:	b08b      	sub	sp, #44	; 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002bce:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd2:	eef0 0a67 	vmov.f32	s1, s15
 8002bd6:	f013 fcb3 	bl	8016540 <cos>
 8002bda:	ec51 0b10 	vmov	r0, r1, d0
 8002bde:	a38c      	add	r3, pc, #560	; (adr r3, 8002e10 <kinematicForward+0x250>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fd18 	bl	8000618 <__aeabi_dmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	461d      	mov	r5, r3
 8002bee:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb54 	bl	80002ac <__adddf3>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	ec44 3b17 	vmov	d7, r3, r4
 8002c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c10:	eef0 0a67 	vmov.f32	s1, s15
 8002c14:	f013 fc94 	bl	8016540 <cos>
 8002c18:	ec51 0b10 	vmov	r0, r1, d0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <kinematicForward+0x260>)
 8002c22:	f7fd fcf9 	bl	8000618 <__aeabi_dmul>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	4628      	mov	r0, r5
 8002c30:	4631      	mov	r1, r6
 8002c32:	f7fd fb3b 	bl	80002ac <__adddf3>
 8002c36:	4603      	mov	r3, r0
 8002c38:	460c      	mov	r4, r1
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	f7fd fb2d 	bl	80002ac <__adddf3>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	4618      	mov	r0, r3
 8002c58:	4621      	mov	r1, r4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	f7fd fb20 	bl	80002a8 <__aeabi_dsub>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	ec44 3b17 	vmov	d7, r3, r4
 8002c70:	eeb0 0a47 	vmov.f32	s0, s14
 8002c74:	eef0 0a67 	vmov.f32	s1, s15
 8002c78:	f013 fc62 	bl	8016540 <cos>
 8002c7c:	ec51 0b10 	vmov	r0, r1, d0
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <kinematicForward+0x264>)
 8002c86:	f7fd fcc7 	bl	8000618 <__aeabi_dmul>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	4628      	mov	r0, r5
 8002c94:	4631      	mov	r1, r6
 8002c96:	f7fd fb09 	bl	80002ac <__adddf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cac:	eef0 0a67 	vmov.f32	s1, s15
 8002cb0:	f013 fc8a 	bl	80165c8 <sin>
 8002cb4:	ec51 0b10 	vmov	r0, r1, d0
 8002cb8:	a355      	add	r3, pc, #340	; (adr r3, 8002e10 <kinematicForward+0x250>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fcab 	bl	8000618 <__aeabi_dmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4623      	mov	r3, r4
 8002cda:	f7fd fae7 	bl	80002ac <__adddf3>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	ec44 3b17 	vmov	d7, r3, r4
 8002ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cea:	eef0 0a67 	vmov.f32	s1, s15
 8002cee:	f013 fc6b 	bl	80165c8 <sin>
 8002cf2:	ec51 0b10 	vmov	r0, r1, d0
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <kinematicForward+0x260>)
 8002cfc:	f7fd fc8c 	bl	8000618 <__aeabi_dmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	461a      	mov	r2, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	4628      	mov	r0, r5
 8002d0a:	4631      	mov	r1, r6
 8002d0c:	f7fd face 	bl	80002ac <__adddf3>
 8002d10:	4603      	mov	r3, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	461d      	mov	r5, r3
 8002d16:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fac0 	bl	80002ac <__adddf3>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4618      	mov	r0, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	f7fd fab3 	bl	80002a8 <__aeabi_dsub>
 8002d42:	4603      	mov	r3, r0
 8002d44:	460c      	mov	r4, r1
 8002d46:	ec44 3b17 	vmov	d7, r3, r4
 8002d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4e:	eef0 0a67 	vmov.f32	s1, s15
 8002d52:	f013 fc39 	bl	80165c8 <sin>
 8002d56:	ec51 0b10 	vmov	r0, r1, d0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <kinematicForward+0x264>)
 8002d60:	f7fd fc5a 	bl	8000618 <__aeabi_dmul>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	4631      	mov	r1, r6
 8002d70:	f7fd fa9c 	bl	80002ac <__adddf3>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	a124      	add	r1, pc, #144	; (adr r1, 8002e18 <kinematicForward+0x258>)
 8002d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d8c:	f7fd fa8c 	bl	80002a8 <__aeabi_dsub>
 8002d90:	4603      	mov	r3, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	4618      	mov	r0, r3
 8002d96:	4621      	mov	r1, r4
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <kinematicForward+0x268>)
 8002d9e:	f7fd fa83 	bl	80002a8 <__aeabi_dsub>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002db6:	461a      	mov	r2, r3
 8002db8:	4623      	mov	r3, r4
 8002dba:	f7fd fa77 	bl	80002ac <__adddf3>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	f7fd fa6a 	bl	80002a8 <__aeabi_dsub>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002de2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pnt->y = y;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002dec:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pnt->z = z;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002df6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pnt->roll = roll;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e00:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return TRUE;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	372c      	adds	r7, #44	; 0x2c
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	00000000 	.word	0x00000000
 8002e14:	4068a000 	.word	0x4068a000
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	406a6000 	.word	0x406a6000
 8002e20:	40640000 	.word	0x40640000
 8002e24:	403e0000 	.word	0x403e0000
 8002e28:	40534000 	.word	0x40534000
 8002e2c:	00000000 	.word	0x00000000

08002e30 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8002e30:	b082      	sub	sp, #8
 8002e32:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e36:	b0a0      	sub	sp, #128	; 0x80
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002e40:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e4a:	a174      	add	r1, pc, #464	; (adr r1, 800301c <kinematicInverse+0x1ec>)
 8002e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e50:	f7fd fa2a 	bl	80002a8 <__aeabi_dsub>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002e68:	eeb0 0a47 	vmov.f32	s0, s14
 8002e6c:	eef0 0a67 	vmov.f32	s1, s15
 8002e70:	f013 fb66 	bl	8016540 <cos>
 8002e74:	ec51 0b10 	vmov	r0, r1, d0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <kinematicInverse+0x1e0>)
 8002e7e:	f7fd fbcb 	bl	8000618 <__aeabi_dmul>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4650      	mov	r0, sl
 8002e88:	4659      	mov	r1, fp
 8002e8a:	f7fd fa0d 	bl	80002a8 <__aeabi_dsub>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea6:	eef0 0a67 	vmov.f32	s1, s15
 8002eaa:	f013 fb8d 	bl	80165c8 <sin>
 8002eae:	ec51 0b10 	vmov	r0, r1, d0
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <kinematicInverse+0x1e0>)
 8002eb8:	f7fd fbae 	bl	8000618 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4650      	mov	r0, sl
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	f7fd f9f0 	bl	80002a8 <__aeabi_dsub>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8002ed0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ed4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ed8:	f7fd fb9e 	bl	8000618 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4692      	mov	sl, r2
 8002ee2:	469b      	mov	fp, r3
 8002ee4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ee8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eec:	f7fd fb94 	bl	8000618 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	f7fd f9d8 	bl	80002ac <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	a33e      	add	r3, pc, #248	; (adr r3, 8003000 <kinematicInverse+0x1d0>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd f9cd 	bl	80002a8 <__aeabi_dsub>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <kinematicInverse+0x1e4>)
 8002f1c:	f7fd f9c4 	bl	80002a8 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	a337      	add	r3, pc, #220	; (adr r3, 8003008 <kinematicInverse+0x1d8>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd fc9d 	bl	800086c <__aeabi_ddiv>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8002f3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f42:	f7fd fb69 	bl	8000618 <__aeabi_dmul>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	f04f 0000 	mov.w	r0, #0
 8002f4e:	4932      	ldr	r1, [pc, #200]	; (8003018 <kinematicInverse+0x1e8>)
 8002f50:	f7fd f9aa 	bl	80002a8 <__aeabi_dsub>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f68:	f7fd fdc8 	bl	8000afc <__aeabi_dcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <kinematicInverse+0x146>
		return FALSE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e149      	b.n	800320a <kinematicInverse+0x3da>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8002f76:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002f7a:	f013 fbaf 	bl	80166dc <sqrt>
 8002f7e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8002f8e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002f92:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002f96:	f013 fb9f 	bl	80166d8 <atan2>
 8002f9a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8002f9e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002fa2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002fa6:	f013 fb97 	bl	80166d8 <atan2>
 8002faa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8002fae:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002fb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fb6:	f7fd f977 	bl	80002a8 <__aeabi_dsub>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002fc4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002fc8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fcc:	f7fd f96c 	bl	80002a8 <__aeabi_dsub>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002fda:	4642      	mov	r2, r8
 8002fdc:	464b      	mov	r3, r9
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd fd95 	bl	8000b10 <__aeabi_dcmple>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <kinematicInverse+0x1f4>
		s2 		= s2_positive;
 8002fec:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ff0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8002ff4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ff8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002ffc:	e01a      	b.n	8003034 <kinematicInverse+0x204>
 8002ffe:	bf00      	nop
 8003000:	00000000 	.word	0x00000000
 8003004:	40e2f320 	.word	0x40e2f320
 8003008:	00000000 	.word	0x00000000
 800300c:	40eec800 	.word	0x40eec800
 8003010:	403e0000 	.word	0x403e0000
 8003014:	40d90000 	.word	0x40d90000
 8003018:	3ff00000 	.word	0x3ff00000
 800301c:	00000000 	.word	0x00000000
 8003020:	4060c000 	.word	0x4060c000
	} else {
		s2 		= s2_negative;
 8003024:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003028:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800302c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003030:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b79      	ldr	r3, [pc, #484]	; (8003220 <kinematicInverse+0x3f0>)
 800303a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800303e:	f7fd faeb 	bl	8000618 <__aeabi_dmul>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	a373      	add	r3, pc, #460	; (adr r3, 8003218 <kinematicInverse+0x3e8>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd f92c 	bl	80002ac <__adddf3>
 8003054:	4603      	mov	r3, r0
 8003056:	460c      	mov	r4, r1
 8003058:	4618      	mov	r0, r3
 800305a:	4621      	mov	r1, r4
 800305c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003060:	f7fd fada 	bl	8000618 <__aeabi_dmul>
 8003064:	4603      	mov	r3, r0
 8003066:	460c      	mov	r4, r1
 8003068:	4625      	mov	r5, r4
 800306a:	461c      	mov	r4, r3
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <kinematicInverse+0x3f0>)
 8003072:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003076:	f7fd facf 	bl	8000618 <__aeabi_dmul>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003086:	f7fd fac7 	bl	8000618 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd f909 	bl	80002a8 <__aeabi_dsub>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	4625      	mov	r5, r4
 800309c:	461c      	mov	r4, r3
 800309e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030a2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030a6:	f7fd fab7 	bl	8000618 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4690      	mov	r8, r2
 80030b0:	4699      	mov	r9, r3
 80030b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030ba:	f7fd faad 	bl	8000618 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	f7fd f8f1 	bl	80002ac <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd fbcb 	bl	800086c <__aeabi_ddiv>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <kinematicInverse+0x3f0>)
 80030e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030e8:	f7fd fa96 	bl	8000618 <__aeabi_dmul>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4618      	mov	r0, r3
 80030f2:	4621      	mov	r1, r4
 80030f4:	a348      	add	r3, pc, #288	; (adr r3, 8003218 <kinematicInverse+0x3e8>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f7fd f8d7 	bl	80002ac <__adddf3>
 80030fe:	4603      	mov	r3, r0
 8003100:	460c      	mov	r4, r1
 8003102:	4618      	mov	r0, r3
 8003104:	4621      	mov	r1, r4
 8003106:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800310a:	f7fd fa85 	bl	8000618 <__aeabi_dmul>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	4625      	mov	r5, r4
 8003114:	461c      	mov	r4, r3
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <kinematicInverse+0x3f0>)
 800311c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003120:	f7fd fa7a 	bl	8000618 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003130:	f7fd fa72 	bl	8000618 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4620      	mov	r0, r4
 800313a:	4629      	mov	r1, r5
 800313c:	f7fd f8b6 	bl	80002ac <__adddf3>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4625      	mov	r5, r4
 8003146:	461c      	mov	r4, r3
 8003148:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800314c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003150:	f7fd fa62 	bl	8000618 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4690      	mov	r8, r2
 800315a:	4699      	mov	r9, r3
 800315c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003160:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003164:	f7fd fa58 	bl	8000618 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4640      	mov	r0, r8
 800316e:	4649      	mov	r1, r9
 8003170:	f7fd f89c 	bl	80002ac <__adddf3>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f7fd fb76 	bl	800086c <__aeabi_ddiv>
 8003180:	4603      	mov	r3, r0
 8003182:	460c      	mov	r4, r1
 8003184:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003188:	ed97 1b06 	vldr	d1, [r7, #24]
 800318c:	ed97 0b08 	vldr	d0, [r7, #32]
 8003190:	f013 faa2 	bl	80166d8 <atan2>
 8003194:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003198:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800319c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031a0:	f7fd f884 	bl	80002ac <__adddf3>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd f877 	bl	80002a8 <__aeabi_dsub>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80031c2:	ed97 3b02 	vldr	d3, [r7, #8]
 80031c6:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80031ca:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80031ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80031d2:	f004 f8ad 	bl	8007330 <scaraCheckWorkSpace4>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <kinematicInverse+0x3b0>
		return FALSE; // Over workspace !!!
 80031dc:	2300      	movs	r3, #0
 80031de:	e014      	b.n	800320a <kinematicInverse+0x3da>
	}
	pnt->Theta1 = theta1;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031e6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->Theta2 = theta2;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80031f0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->D3		= d3;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031fa:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->Theta4 = theta4;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003204:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE; // All is well
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	3780      	adds	r7, #128	; 0x80
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b002      	add	sp, #8
 8003216:	4770      	bx	lr
 8003218:	00000000 	.word	0x00000000
 800321c:	4068a000 	.word	0x4068a000
 8003220:	40640000 	.word	0x40640000

08003224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003228:	f004 fd60 	bl	8007cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800322c:	f000 f80e 	bl	800324c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003230:	f7ff fc40 	bl	8002ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003234:	f7fe fe80 	bl	8001f38 <MX_DMA_Init>
  MX_UART4_Init();
 8003238:	f004 fc5a 	bl	8007af0 <MX_UART4_Init>
  MX_FSMC_Init();
 800323c:	f7ff fb74 	bl	8002928 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003240:	f7fe feb4 	bl	8001fac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003244:	f00b faae 	bl	800e7a4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003248:	e7fe      	b.n	8003248 <main+0x24>
	...

0800324c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b094      	sub	sp, #80	; 0x50
 8003250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003252:	f107 0320 	add.w	r3, r7, #32
 8003256:	2230      	movs	r2, #48	; 0x30
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f00e ff64 	bl	8012128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <SystemClock_Config+0xcc>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <SystemClock_Config+0xcc>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <SystemClock_Config+0xcc>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <SystemClock_Config+0xd0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a21      	ldr	r2, [pc, #132]	; (800331c <SystemClock_Config+0xd0>)
 8003296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <SystemClock_Config+0xd0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b2:	2302      	movs	r3, #2
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032bc:	2308      	movs	r3, #8
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032c6:	2302      	movs	r3, #2
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80032ca:	2307      	movs	r3, #7
 80032cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ce:	f107 0320 	add.w	r3, r7, #32
 80032d2:	4618      	mov	r0, r3
 80032d4:	f006 fd82 	bl	8009ddc <HAL_RCC_OscConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80032de:	f000 f831 	bl	8003344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032e2:	230f      	movs	r3, #15
 80032e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e6:	2302      	movs	r3, #2
 80032e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	2105      	movs	r1, #5
 8003300:	4618      	mov	r0, r3
 8003302:	f006 ffdb 	bl	800a2bc <HAL_RCC_ClockConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800330c:	f000 f81a 	bl	8003344 <Error_Handler>
  }
}
 8003310:	bf00      	nop
 8003312:	3750      	adds	r7, #80	; 0x50
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000

08003320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003332:	f004 fcfd 	bl	8007d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40001000 	.word	0x40001000

08003344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <ringBuff_PushChar+0x1a>
		return FALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	e024      	b.n	80033b6 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	78f9      	ldrb	r1, [r7, #3]
 8003376:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800337e:	3301      	adds	r3, #1
 8003380:	425a      	negs	r2, r3
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800338a:	bf58      	it	pl
 800338c:	4253      	negpl	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d103      	bne.n	80033ac <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80033b4:	2301      	movs	r3, #1
	}
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <ringBuff_PopChar+0x18>
		return FALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e025      	b.n	8003426 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	5cd2      	ldrb	r2, [r2, r3]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80033ee:	3301      	adds	r3, #1
 80033f0:	425a      	negs	r2, r3
 80033f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80033fa:	bf58      	it	pl
 80033fc:	4253      	negpl	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003410:	429a      	cmp	r2, r3
 8003412:	d103      	bne.n	800341c <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003424:	2301      	movs	r3, #1
	}
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800343e:	2300      	movs	r3, #0
 8003440:	82fb      	strh	r3, [r7, #22]
 8003442:	e011      	b.n	8003468 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003444:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff7e 	bl	8003352 <ringBuff_PushChar>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 800345c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003460:	b29b      	uxth	r3, r3
 8003462:	3301      	adds	r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	82fb      	strh	r3, [r7, #22]
 8003468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	dce8      	bgt.n	8003444 <ringBuff_PushArray+0x12>
 8003472:	e000      	b.n	8003476 <ringBuff_PushArray+0x44>
			break;
 8003474:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e00c      	b.n	80034ae <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff90 	bl	80033c2 <ringBuff_PopChar>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	dbee      	blt.n	8003494 <ringBuff_PopArray+0x12>
 80034b6:	e000      	b.n	80034ba <ringBuff_PopArray+0x38>
			break;
 80034b8:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80034ba:	697b      	ldr	r3, [r7, #20]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80034da:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e018      	b.n	800351e <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d101      	bne.n	80034fe <ringBuff_DistanceOf+0x3a>
					return distance;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	e037      	b.n	800356e <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	3301      	adds	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	425a      	negs	r2, r3
 8003510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003514:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003518:	bf58      	it	pl
 800351a:	4253      	negpl	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	dbe2      	blt.n	80034ec <ringBuff_DistanceOf+0x28>
 8003526:	e020      	b.n	800356a <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	429a      	cmp	r2, r3
 8003534:	d101      	bne.n	800353a <ringBuff_DistanceOf+0x76>
					return distance;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	e019      	b.n	800356e <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	3301      	adds	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3301      	adds	r3, #1
 8003544:	425a      	negs	r2, r3
 8003546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800354e:	bf58      	it	pl
 8003550:	4253      	negpl	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d1e3      	bne.n	8003528 <ringBuff_DistanceOf+0x64>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0de      	beq.n	8003528 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356e:	4618      	mov	r0, r3
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	0000      	movs	r0, r0
 800357c:	0000      	movs	r0, r0
	...

08003580 <scaraInitDuty>:
											 "Wrong Coordinate"
											};



SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8003580:	b084      	sub	sp, #16
 8003582:	b5b0      	push	{r4, r5, r7, lr}
 8003584:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8003588:	af4e      	add	r7, sp, #312	; 0x138
 800358a:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 800358e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8003592:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 82ba 	bne.w	8003b10 <scaraInitDuty+0x590>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800359c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035a0:	a3ab      	add	r3, pc, #684	; (adr r3, 8003850 <scaraInitDuty+0x2d0>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fd f837 	bl	8000618 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	4ba8      	ldr	r3, [pc, #672]	; (8003858 <scaraInitDuty+0x2d8>)
 80035b8:	f7fd f958 	bl	800086c <__aeabi_ddiv>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80035c4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d130      	bne.n	800362e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80035cc:	4ba3      	ldr	r3, [pc, #652]	; (800385c <scaraInitDuty+0x2dc>)
 80035ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80035d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80035d6:	f7fc fe69 	bl	80002ac <__adddf3>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4639      	mov	r1, r7
 80035e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80035e4:	4b9d      	ldr	r3, [pc, #628]	; (800385c <scaraInitDuty+0x2dc>)
 80035e6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80035ea:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80035ee:	f7fc fe5d 	bl	80002ac <__adddf3>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4639      	mov	r1, r7
 80035f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80035fc:	4b97      	ldr	r3, [pc, #604]	; (800385c <scaraInitDuty+0x2dc>)
 80035fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003602:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003606:	f7fc fe51 	bl	80002ac <__adddf3>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4639      	mov	r1, r7
 8003610:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8003614:	4b91      	ldr	r3, [pc, #580]	; (800385c <scaraInitDuty+0x2dc>)
 8003616:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800361a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800361e:	f7fc fe45 	bl	80002ac <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4639      	mov	r1, r7
 8003628:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800362c:	e01b      	b.n	8003666 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800362e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003632:	2b00      	cmp	r3, #0
 8003634:	d114      	bne.n	8003660 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8003636:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800363a:	4639      	mov	r1, r7
 800363c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= command.target_point.y;
 8003640:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003644:	4639      	mov	r1, r7
 8003646:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= command.target_point.z;
 800364a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800364e:	4639      	mov	r1, r7
 8003650:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= command.target_point.roll;
 8003654:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003658:	4639      	mov	r1, r7
 800365a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800365e:	e002      	b.n	8003666 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8003660:	230c      	movs	r3, #12
 8003662:	f001 b91e 	b.w	80048a2 <scaraInitDuty+0x1322>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8003666:	463b      	mov	r3, r7
 8003668:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800366c:	4b7b      	ldr	r3, [pc, #492]	; (800385c <scaraInitDuty+0x2dc>)
 800366e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003672:	f7fc fe19 	bl	80002a8 <__aeabi_dsub>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		dir_angle = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		if ( angle_s < 0) {
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003690:	f7fd fa34 	bl	8000afc <__aeabi_dcmplt>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <scaraInitDuty+0x120>
			dir_angle = -1;
 800369a:	23ff      	movs	r3, #255	; 0xff
 800369c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if ( fabs(angle_s) > PI) {
 80036a0:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80036a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80036ac:	a368      	add	r3, pc, #416	; (adr r3, 8003850 <scaraInitDuty+0x2d0>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fd fa3f 	bl	8000b38 <__aeabi_dcmpgt>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d021      	beq.n	8003704 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 80036c0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80036c4:	425b      	negs	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 80036cc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80036d0:	f7fd fa9a 	bl	8000c08 <__aeabi_d2f>
 80036d4:	ee07 0a90 	vmov	s15, r0
 80036d8:	eef0 7ae7 	vabs.f32	s15, s15
 80036dc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003860 <scaraInitDuty+0x2e0>
 80036e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e4:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	ee17 0a90 	vmov	r0, s15
 80036f8:	f7fc ff36 	bl	8000568 <__aeabi_f2d>
 80036fc:	4603      	mov	r3, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8003704:	4b57      	ldr	r3, [pc, #348]	; (8003864 <scaraInitDuty+0x2e4>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800370a:	4b54      	ldr	r3, [pc, #336]	; (800385c <scaraInitDuty+0x2dc>)
 800370c:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8003710:	4a54      	ldr	r2, [pc, #336]	; (8003864 <scaraInitDuty+0x2e4>)
 8003712:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8003716:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11f      	bne.n	800375e <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <scaraInitDuty+0x2e4>)
 8003720:	2200      	movs	r2, #0
 8003722:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8003724:	4c4d      	ldr	r4, [pc, #308]	; (800385c <scaraInitDuty+0x2dc>)
 8003726:	463b      	mov	r3, r7
 8003728:	a818      	add	r0, sp, #96	; 0x60
 800372a:	4619      	mov	r1, r3
 800372c:	2368      	movs	r3, #104	; 0x68
 800372e:	461a      	mov	r2, r3
 8003730:	f00e fcd6 	bl	80120e0 <memcpy>
 8003734:	4668      	mov	r0, sp
 8003736:	f104 0308 	add.w	r3, r4, #8
 800373a:	2260      	movs	r2, #96	; 0x60
 800373c:	4619      	mov	r1, r3
 800373e:	f00e fccf 	bl	80120e0 <memcpy>
 8003742:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003746:	4848      	ldr	r0, [pc, #288]	; (8003868 <scaraInitDuty+0x2e8>)
 8003748:	f001 f8bc 	bl	80048c4 <scaraInitLine>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			total_s = myDUTY.task.path.line.total_s;
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <scaraInitDuty+0x2e4>)
 8003754:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8003758:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 800375c:	e070      	b.n	8003840 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 800375e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8003762:	2b01      	cmp	r3, #1
 8003764:	d169      	bne.n	800383a <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003766:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800376a:	2b01      	cmp	r3, #1
 800376c:	d127      	bne.n	80037be <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <scaraInitDuty+0x2dc>)
 8003770:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003774:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8003778:	461a      	mov	r2, r3
 800377a:	4623      	mov	r3, r4
 800377c:	f7fc fd96 	bl	80002ac <__adddf3>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <scaraInitDuty+0x2dc>)
 800378a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800378e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8003792:	461a      	mov	r2, r3
 8003794:	4623      	mov	r3, r4
 8003796:	f7fc fd89 	bl	80002ac <__adddf3>
 800379a:	4603      	mov	r3, r0
 800379c:	460c      	mov	r4, r1
 800379e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <scaraInitDuty+0x2dc>)
 80037a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037a8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	f7fc fd7c 	bl	80002ac <__adddf3>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80037bc:	e013      	b.n	80037e6 <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80037be:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 80037c6:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80037ca:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= command.target_point.y;
 80037ce:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80037d2:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= command.target_point.z;
 80037d6:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80037da:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80037de:	e002      	b.n	80037e6 <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80037e0:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 80037e2:	f001 b85e 	b.w	80048a2 <scaraInitDuty+0x1322>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <scaraInitDuty+0x2e4>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 80037ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037f0:	4c1a      	ldr	r4, [pc, #104]	; (800385c <scaraInitDuty+0x2dc>)
 80037f2:	934c      	str	r3, [sp, #304]	; 0x130
 80037f4:	a832      	add	r0, sp, #200	; 0xc8
 80037f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037fa:	2268      	movs	r2, #104	; 0x68
 80037fc:	4619      	mov	r1, r3
 80037fe:	f00e fc6f 	bl	80120e0 <memcpy>
 8003802:	463b      	mov	r3, r7
 8003804:	a818      	add	r0, sp, #96	; 0x60
 8003806:	4619      	mov	r1, r3
 8003808:	2368      	movs	r3, #104	; 0x68
 800380a:	461a      	mov	r2, r3
 800380c:	f00e fc68 	bl	80120e0 <memcpy>
 8003810:	4668      	mov	r0, sp
 8003812:	f104 0308 	add.w	r3, r4, #8
 8003816:	2260      	movs	r2, #96	; 0x60
 8003818:	4619      	mov	r1, r3
 800381a:	f00e fc61 	bl	80120e0 <memcpy>
 800381e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003822:	4812      	ldr	r0, [pc, #72]	; (800386c <scaraInitDuty+0x2ec>)
 8003824:	f001 f914 	bl	8004a50 <scaraInitCircle>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <scaraInitDuty+0x2e4>)
 8003830:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8003834:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8003838:	e002      	b.n	8003840 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 800383a:	2303      	movs	r3, #3
 800383c:	f001 b831 	b.w	80048a2 <scaraInitDuty+0x1322>
		}

		if ( SCARA_STATUS_OK != status) {
 8003840:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <scaraInitDuty+0x2f0>
			return status;
 8003848:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800384c:	f001 b829 	b.w	80048a2 <scaraInitDuty+0x1322>
 8003850:	60000000 	.word	0x60000000
 8003854:	400921fb 	.word	0x400921fb
 8003858:	40668000 	.word	0x40668000
 800385c:	20005cf0 	.word	0x20005cf0
 8003860:	40c90fdb 	.word	0x40c90fdb
 8003864:	20005338 	.word	0x20005338
 8003868:	20005348 	.word	0x20005348
 800386c:	200053b8 	.word	0x200053b8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8003870:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 8094 	bne.w	80039a2 <scaraInitDuty+0x422>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800387a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800387e:	2b01      	cmp	r3, #1
 8003880:	d12d      	bne.n	80038de <scaraInitDuty+0x35e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8003882:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003886:	4a9d      	ldr	r2, [pc, #628]	; (8003afc <scaraInitDuty+0x57c>)
 8003888:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800388c:	4b9b      	ldr	r3, [pc, #620]	; (8003afc <scaraInitDuty+0x57c>)
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003894:	2201      	movs	r2, #1
 8003896:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800389a:	2104      	movs	r1, #4
 800389c:	4898      	ldr	r0, [pc, #608]	; (8003b00 <scaraInitDuty+0x580>)
 800389e:	f001 fa4f 	bl	8004d40 <scaraInitLSPB>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 80038a8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038ac:	4a93      	ldr	r2, [pc, #588]	; (8003afc <scaraInitDuty+0x57c>)
 80038ae:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80038b2:	4b92      	ldr	r3, [pc, #584]	; (8003afc <scaraInitDuty+0x57c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80038ba:	2201      	movs	r2, #1
 80038bc:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80038c0:	2105      	movs	r1, #5
 80038c2:	4890      	ldr	r0, [pc, #576]	; (8003b04 <scaraInitDuty+0x584>)
 80038c4:	f001 fa3c 	bl	8004d40 <scaraInitLSPB>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 80038ce:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038d2:	4a8a      	ldr	r2, [pc, #552]	; (8003afc <scaraInitDuty+0x57c>)
 80038d4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80038d8:	e9c2 3400 	strd	r3, r4, [r2]
 80038dc:	e0fd      	b.n	8003ada <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80038de:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d15a      	bne.n	800399c <scaraInitDuty+0x41c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <scaraInitDuty+0x57c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80038ee:	2200      	movs	r2, #0
 80038f0:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80038f4:	2104      	movs	r1, #4
 80038f6:	4882      	ldr	r0, [pc, #520]	; (8003b00 <scaraInitDuty+0x580>)
 80038f8:	f001 fa22 	bl	8004d40 <scaraInitLSPB>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003902:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <scaraInitDuty+0x57c>)
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800390a:	2200      	movs	r2, #0
 800390c:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003910:	2105      	movs	r1, #5
 8003912:	487c      	ldr	r0, [pc, #496]	; (8003b04 <scaraInitDuty+0x584>)
 8003914:	f001 fa14 	bl	8004d40 <scaraInitLSPB>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 800391e:	4b77      	ldr	r3, [pc, #476]	; (8003afc <scaraInitDuty+0x57c>)
 8003920:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <scaraInitDuty+0x57c>)
 8003926:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 800392a:	461a      	mov	r2, r3
 800392c:	4623      	mov	r3, r4
 800392e:	f7fd f903 	bl	8000b38 <__aeabi_dcmpgt>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d018      	beq.n	800396a <scaraInitDuty+0x3ea>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8003938:	4b70      	ldr	r3, [pc, #448]	; (8003afc <scaraInitDuty+0x57c>)
 800393a:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 800393e:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <scaraInitDuty+0x57c>)
 8003940:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003944:	2201      	movs	r2, #1
 8003946:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800394a:	2105      	movs	r1, #5
 800394c:	486d      	ldr	r0, [pc, #436]	; (8003b04 <scaraInitDuty+0x584>)
 800394e:	f001 f9f7 	bl	8004d40 <scaraInitLSPB>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <scaraInitDuty+0x57c>)
 800395a:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 800395e:	4a67      	ldr	r2, [pc, #412]	; (8003afc <scaraInitDuty+0x57c>)
 8003960:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003964:	e9c2 3400 	strd	r3, r4, [r2]
 8003968:	e0b7      	b.n	8003ada <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 800396a:	4b64      	ldr	r3, [pc, #400]	; (8003afc <scaraInitDuty+0x57c>)
 800396c:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8003970:	4a62      	ldr	r2, [pc, #392]	; (8003afc <scaraInitDuty+0x57c>)
 8003972:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003976:	2201      	movs	r2, #1
 8003978:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800397c:	2104      	movs	r1, #4
 800397e:	4860      	ldr	r0, [pc, #384]	; (8003b00 <scaraInitDuty+0x580>)
 8003980:	f001 f9de 	bl	8004d40 <scaraInitLSPB>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <scaraInitDuty+0x57c>)
 800398c:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8003990:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <scaraInitDuty+0x57c>)
 8003992:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003996:	e9c2 3400 	strd	r3, r4, [r2]
 800399a:	e09e      	b.n	8003ada <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 800399c:	2308      	movs	r3, #8
 800399e:	f000 bf80 	b.w	80048a2 <scaraInitDuty+0x1322>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80039a2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 8094 	bne.w	8003ad4 <scaraInitDuty+0x554>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80039ac:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d12d      	bne.n	8003a10 <scaraInitDuty+0x490>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80039b4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80039b8:	4a50      	ldr	r2, [pc, #320]	; (8003afc <scaraInitDuty+0x57c>)
 80039ba:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80039be:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <scaraInitDuty+0x57c>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80039c6:	2201      	movs	r2, #1
 80039c8:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80039cc:	2104      	movs	r1, #4
 80039ce:	484e      	ldr	r0, [pc, #312]	; (8003b08 <scaraInitDuty+0x588>)
 80039d0:	f001 fd46 	bl	8005460 <scaraInitScurve>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80039da:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80039de:	4a47      	ldr	r2, [pc, #284]	; (8003afc <scaraInitDuty+0x57c>)
 80039e0:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80039e4:	4b45      	ldr	r3, [pc, #276]	; (8003afc <scaraInitDuty+0x57c>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80039ec:	2201      	movs	r2, #1
 80039ee:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80039f2:	2105      	movs	r1, #5
 80039f4:	4845      	ldr	r0, [pc, #276]	; (8003b0c <scaraInitDuty+0x58c>)
 80039f6:	f001 fd33 	bl	8005460 <scaraInitScurve>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 8003a00:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a04:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <scaraInitDuty+0x57c>)
 8003a06:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003a0a:	e9c2 3400 	strd	r3, r4, [r2]
 8003a0e:	e064      	b.n	8003ada <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003a10:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15a      	bne.n	8003ace <scaraInitDuty+0x54e>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a18:	4b38      	ldr	r3, [pc, #224]	; (8003afc <scaraInitDuty+0x57c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003a20:	2200      	movs	r2, #0
 8003a22:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003a26:	2104      	movs	r1, #4
 8003a28:	4837      	ldr	r0, [pc, #220]	; (8003b08 <scaraInitDuty+0x588>)
 8003a2a:	f001 fd19 	bl	8005460 <scaraInitScurve>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a34:	4b31      	ldr	r3, [pc, #196]	; (8003afc <scaraInitDuty+0x57c>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003a42:	2105      	movs	r1, #5
 8003a44:	4831      	ldr	r0, [pc, #196]	; (8003b0c <scaraInitDuty+0x58c>)
 8003a46:	f001 fd0b 	bl	8005460 <scaraInitScurve>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <scaraInitDuty+0x57c>)
 8003a52:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <scaraInitDuty+0x57c>)
 8003a58:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f7fd f86a 	bl	8000b38 <__aeabi_dcmpgt>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <scaraInitDuty+0x51c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <scaraInitDuty+0x57c>)
 8003a6c:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003a70:	4a22      	ldr	r2, [pc, #136]	; (8003afc <scaraInitDuty+0x57c>)
 8003a72:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003a76:	2201      	movs	r2, #1
 8003a78:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003a7c:	2105      	movs	r1, #5
 8003a7e:	4823      	ldr	r0, [pc, #140]	; (8003b0c <scaraInitDuty+0x58c>)
 8003a80:	f001 fcee 	bl	8005460 <scaraInitScurve>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <scaraInitDuty+0x57c>)
 8003a8c:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <scaraInitDuty+0x57c>)
 8003a92:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003a96:	e9c2 3400 	strd	r3, r4, [r2]
 8003a9a:	e01e      	b.n	8003ada <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <scaraInitDuty+0x57c>)
 8003a9e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <scaraInitDuty+0x57c>)
 8003aa4:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003aae:	2104      	movs	r1, #4
 8003ab0:	4815      	ldr	r0, [pc, #84]	; (8003b08 <scaraInitDuty+0x588>)
 8003ab2:	f001 fcd5 	bl	8005460 <scaraInitScurve>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <scaraInitDuty+0x57c>)
 8003abe:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <scaraInitDuty+0x57c>)
 8003ac4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003ac8:	e9c2 3400 	strd	r3, r4, [r2]
 8003acc:	e005      	b.n	8003ada <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	f000 bee7 	b.w	80048a2 <scaraInitDuty+0x1322>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8003ad4:	2305      	movs	r3, #5
 8003ad6:	f000 bee4 	b.w	80048a2 <scaraInitDuty+0x1322>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8003ada:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <scaraInitDuty+0x56a>
			return status1;
 8003ae2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003ae6:	f000 bedc 	b.w	80048a2 <scaraInitDuty+0x1322>
		}
		if ( SCARA_STATUS_OK != status2) {
 8003aea:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 86b8 	beq.w	8004864 <scaraInitDuty+0x12e4>
			return status2;
 8003af4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003af8:	f000 bed3 	b.w	80048a2 <scaraInitDuty+0x1322>
 8003afc:	20005338 	.word	0x20005338
 8003b00:	20005450 	.word	0x20005450
 8003b04:	200055a8 	.word	0x200055a8
 8003b08:	200054d0 	.word	0x200054d0
 8003b0c:	20005628 	.word	0x20005628
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8003b10:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 86a3 	bne.w	8004860 <scaraInitDuty+0x12e0>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8003b1a:	4ba7      	ldr	r3, [pc, #668]	; (8003db8 <scaraInitDuty+0x838>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8003b20:	4ba6      	ldr	r3, [pc, #664]	; (8003dbc <scaraInitDuty+0x83c>)
 8003b22:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8003b26:	4aa4      	ldr	r2, [pc, #656]	; (8003db8 <scaraInitDuty+0x838>)
 8003b28:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8003b2c:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8003b30:	4ba2      	ldr	r3, [pc, #648]	; (8003dbc <scaraInitDuty+0x83c>)
 8003b32:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8003b36:	4aa0      	ldr	r2, [pc, #640]	; (8003db8 <scaraInitDuty+0x838>)
 8003b38:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8003b3c:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8003b40:	4b9e      	ldr	r3, [pc, #632]	; (8003dbc <scaraInitDuty+0x83c>)
 8003b42:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8003b46:	4a9c      	ldr	r2, [pc, #624]	; (8003db8 <scaraInitDuty+0x838>)
 8003b48:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8003b4c:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8003b50:	4b9a      	ldr	r3, [pc, #616]	; (8003dbc <scaraInitDuty+0x83c>)
 8003b52:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003b56:	4a98      	ldr	r2, [pc, #608]	; (8003db8 <scaraInitDuty+0x838>)
 8003b58:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8003b5c:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8003b60:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f040 836d 	bne.w	8004244 <scaraInitDuty+0xcc4>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8003b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	f200 814e 	bhi.w	8003e10 <scaraInitDuty+0x890>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <scaraInitDuty+0x5fc>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003c33 	.word	0x08003c33
 8003b84:	08003cd9 	.word	0x08003cd9
 8003b88:	08003d55 	.word	0x08003d55
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003b8c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003b90:	a387      	add	r3, pc, #540	; (adr r3, 8003db0 <scaraInitDuty+0x830>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fd3f 	bl	8000618 <__aeabi_dmul>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	4b86      	ldr	r3, [pc, #536]	; (8003dc0 <scaraInitDuty+0x840>)
 8003ba8:	f7fc fe60 	bl	800086c <__aeabi_ddiv>
 8003bac:	4603      	mov	r3, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003bb4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d113      	bne.n	8003be4 <scaraInitDuty+0x664>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <scaraInitDuty+0x838>)
 8003bbe:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8003bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4623      	mov	r3, r4
 8003bce:	f7fc fb6d 	bl	80002ac <__adddf3>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003bda:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003bde:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003be2:	e01a      	b.n	8003c1a <scaraInitDuty+0x69a>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003be4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d113      	bne.n	8003c14 <scaraInitDuty+0x694>
					abs_position = command.sub_para_double;
 8003bec:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003bf0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8003bf4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <scaraInitDuty+0x838>)
 8003bfa:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8003bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4623      	mov	r3, r4
 8003c06:	f7fc fb4f 	bl	80002a8 <__aeabi_dsub>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003c12:	e002      	b.n	8003c1a <scaraInitDuty+0x69a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003c14:	230c      	movs	r3, #12
 8003c16:	f000 be44 	b.w	80048a2 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8003c1a:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f003 fc0e 	bl	8007440 <scaraCheckWorkSpace1>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80f5 	beq.w	8003e16 <scaraInitDuty+0x896>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003c2c:	2307      	movs	r3, #7
 8003c2e:	f000 be38 	b.w	80048a2 <scaraInitDuty+0x1322>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003c32:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003c36:	a35e      	add	r3, pc, #376	; (adr r3, 8003db0 <scaraInitDuty+0x830>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fcec 	bl	8000618 <__aeabi_dmul>
 8003c40:	4603      	mov	r3, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	4618      	mov	r0, r3
 8003c46:	4621      	mov	r1, r4
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <scaraInitDuty+0x840>)
 8003c4e:	f7fc fe0d 	bl	800086c <__aeabi_ddiv>
 8003c52:	4603      	mov	r3, r0
 8003c54:	460c      	mov	r4, r1
 8003c56:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003c5a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d113      	bne.n	8003c8a <scaraInitDuty+0x70a>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8003c62:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <scaraInitDuty+0x838>)
 8003c64:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c70:	461a      	mov	r2, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	f7fc fb1a 	bl	80002ac <__adddf3>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003c80:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c84:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003c88:	e01a      	b.n	8003cc0 <scaraInitDuty+0x740>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003c8a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <scaraInitDuty+0x73a>
					abs_position = command.sub_para_double;
 8003c92:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c96:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8003c9a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003c9e:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <scaraInitDuty+0x838>)
 8003ca0:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc fafc 	bl	80002a8 <__aeabi_dsub>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003cb8:	e002      	b.n	8003cc0 <scaraInitDuty+0x740>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003cba:	230c      	movs	r3, #12
 8003cbc:	f000 bdf1 	b.w	80048a2 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8003cc0:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f003 fbbb 	bl	8007440 <scaraCheckWorkSpace1>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a4 	beq.w	8003e1a <scaraInitDuty+0x89a>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	f000 bde5 	b.w	80048a2 <scaraInitDuty+0x1322>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003cd8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d113      	bne.n	8003d08 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <scaraInitDuty+0x838>)
 8003ce2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cea:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	f7fc fadb 	bl	80002ac <__adddf3>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003cfe:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d02:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003d06:	e01a      	b.n	8003d3e <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003d08:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d113      	bne.n	8003d38 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8003d10:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d14:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8003d18:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003d1c:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <scaraInitDuty+0x838>)
 8003d1e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003d22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d26:	461a      	mov	r2, r3
 8003d28:	4623      	mov	r3, r4
 8003d2a:	f7fc fabd 	bl	80002a8 <__aeabi_dsub>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003d36:	e002      	b.n	8003d3e <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003d38:	230c      	movs	r3, #12
 8003d3a:	f000 bdb2 	b.w	80048a2 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8003d3e:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003d42:	2002      	movs	r0, #2
 8003d44:	f003 fb7c 	bl	8007440 <scaraCheckWorkSpace1>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d067      	beq.n	8003e1e <scaraInitDuty+0x89e>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003d4e:	2307      	movs	r3, #7
 8003d50:	f000 bda7 	b.w	80048a2 <scaraInitDuty+0x1322>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003d54:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003d58:	a315      	add	r3, pc, #84	; (adr r3, 8003db0 <scaraInitDuty+0x830>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fc5b 	bl	8000618 <__aeabi_dmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	4618      	mov	r0, r3
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <scaraInitDuty+0x840>)
 8003d70:	f7fc fd7c 	bl	800086c <__aeabi_ddiv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003d7c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d11f      	bne.n	8003dc4 <scaraInitDuty+0x844>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <scaraInitDuty+0x838>)
 8003d86:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d8e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d92:	461a      	mov	r2, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	f7fc fa89 	bl	80002ac <__adddf3>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003da2:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003da6:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003daa:	e026      	b.n	8003dfa <scaraInitDuty+0x87a>
 8003dac:	f3af 8000 	nop.w
 8003db0:	60000000 	.word	0x60000000
 8003db4:	400921fb 	.word	0x400921fb
 8003db8:	20005338 	.word	0x20005338
 8003dbc:	20005cf0 	.word	0x20005cf0
 8003dc0:	40668000 	.word	0x40668000
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003dc4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <scaraInitDuty+0x874>
					abs_position = command.sub_para_double;
 8003dcc:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003dd0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8003dd4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003dd8:	4bb5      	ldr	r3, [pc, #724]	; (80040b0 <scaraInitDuty+0xb30>)
 8003dda:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003de2:	461a      	mov	r2, r3
 8003de4:	4623      	mov	r3, r4
 8003de6:	f7fc fa5f 	bl	80002a8 <__aeabi_dsub>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003df2:	e002      	b.n	8003dfa <scaraInitDuty+0x87a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003df4:	230c      	movs	r3, #12
 8003df6:	f000 bd54 	b.w	80048a2 <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8003dfa:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003dfe:	2003      	movs	r0, #3
 8003e00:	f003 fb1e 	bl	8007440 <scaraCheckWorkSpace1>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <scaraInitDuty+0x8a2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	f000 bd49 	b.w	80048a2 <scaraInitDuty+0x1322>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8003e10:	230b      	movs	r3, #11
 8003e12:	f000 bd46 	b.w	80048a2 <scaraInitDuty+0x1322>
				break;
 8003e16:	bf00      	nop
 8003e18:	e004      	b.n	8003e24 <scaraInitDuty+0x8a4>
				break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <scaraInitDuty+0x8a4>
				break;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <scaraInitDuty+0x8a4>
				break;
 8003e22:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8003e24:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 80f5 	bne.w	8004018 <scaraInitDuty+0xa98>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003e2e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d17d      	bne.n	8003f32 <scaraInitDuty+0x9b2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003e3c:	e074      	b.n	8003f28 <scaraInitDuty+0x9a8>
						if ( i == command.sub_para_int) {
 8003e3e:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d131      	bne.n	8003eae <scaraInitDuty+0x92e>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003e4a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003e4e:	4a98      	ldr	r2, [pc, #608]	; (80040b0 <scaraInitDuty+0xb30>)
 8003e50:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003e62:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003e66:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003e6a:	4991      	ldr	r1, [pc, #580]	; (80040b0 <scaraInitDuty+0xb30>)
 8003e6c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003e70:	fb00 f202 	mul.w	r2, r0, r2
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003e7a:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003e7e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003e82:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003e8e:	4a88      	ldr	r2, [pc, #544]	; (80040b0 <scaraInitDuty+0xb30>)
 8003e90:	1898      	adds	r0, r3, r2
 8003e92:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003e96:	4a87      	ldr	r2, [pc, #540]	; (80040b4 <scaraInitDuty+0xb34>)
 8003e98:	5cd3      	ldrb	r3, [r2, r3]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f000 ff4d 	bl	8004d40 <scaraInitLSPB>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8003eac:	e030      	b.n	8003f10 <scaraInitDuty+0x990>
											s, DUTY_MODE_INIT_QVT);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003eae:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003eb2:	4a7f      	ldr	r2, [pc, #508]	; (80040b0 <scaraInitDuty+0xb30>)
 8003eb4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003ec6:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003eca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003ece:	4978      	ldr	r1, [pc, #480]	; (80040b0 <scaraInitDuty+0xb30>)
 8003ed0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003ed4:	fb00 f202 	mul.w	r2, r0, r2
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003ede:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003ee2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003ee6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003ef2:	4a6f      	ldr	r2, [pc, #444]	; (80040b0 <scaraInitDuty+0xb30>)
 8003ef4:	1898      	adds	r0, r3, r2
 8003ef6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003efa:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <scaraInitDuty+0xb34>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	2201      	movs	r2, #1
 8003f00:	ed9f 0b69 	vldr	d0, [pc, #420]	; 80040a8 <scaraInitDuty+0xb28>
 8003f04:	4619      	mov	r1, r3
 8003f06:	f000 ff1b 	bl	8004d40 <scaraInitLSPB>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											0, DUTY_MODE_INIT_QVT);
						}
						myDUTY.time_total = command.time_total;
 8003f10:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003f14:	4a66      	ldr	r2, [pc, #408]	; (80040b0 <scaraInitDuty+0xb30>)
 8003f16:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003f1a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8003f1e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f22:	3301      	adds	r3, #1
 8003f24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f28:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d986      	bls.n	8003e3e <scaraInitDuty+0x8be>
 8003f30:	e179      	b.n	8004226 <scaraInitDuty+0xca6>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003f32:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d16b      	bne.n	8004012 <scaraInitDuty+0xa92>
					for ( uint8_t i = 0; i < 4; i++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8003f40:	e062      	b.n	8004008 <scaraInitDuty+0xa88>
						if ( i == command.sub_para_int) {
 8003f42:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8003f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d134      	bne.n	8003fb8 <scaraInitDuty+0xa38>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003f4e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003f52:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <scaraInitDuty+0xb30>)
 8003f54:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003f66:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003f6a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003f76:	4a4e      	ldr	r2, [pc, #312]	; (80040b0 <scaraInitDuty+0xb30>)
 8003f78:	1898      	adds	r0, r3, r2
 8003f7a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003f7e:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <scaraInitDuty+0xb34>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	2200      	movs	r2, #0
 8003f84:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f000 fed9 	bl	8004d40 <scaraInitLSPB>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											s, DUTY_MODE_INIT_QVA);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003f94:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003f98:	4a45      	ldr	r2, [pc, #276]	; (80040b0 <scaraInitDuty+0xb30>)
 8003f9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fac:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <scaraInitDuty+0xb30>)
 8003fae:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003fb2:	e9c2 3400 	strd	r3, r4, [r2]
 8003fb6:	e022      	b.n	8003ffe <scaraInitDuty+0xa7e>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003fb8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fbc:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <scaraInitDuty+0xb30>)
 8003fbe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003fd0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fd4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003fe0:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <scaraInitDuty+0xb30>)
 8003fe2:	1898      	adds	r0, r3, r2
 8003fe4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fe8:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <scaraInitDuty+0xb34>)
 8003fea:	5cd3      	ldrb	r3, [r2, r3]
 8003fec:	2200      	movs	r2, #0
 8003fee:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80040a8 <scaraInitDuty+0xb28>
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f000 fea4 	bl	8004d40 <scaraInitLSPB>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					for ( uint8_t i = 0; i < 4; i++) {
 8003ffe:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004002:	3301      	adds	r3, #1
 8004004:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8004008:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800400c:	2b03      	cmp	r3, #3
 800400e:	d998      	bls.n	8003f42 <scaraInitDuty+0x9c2>
 8004010:	e109      	b.n	8004226 <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8004012:	2308      	movs	r3, #8
 8004014:	f000 bc45 	b.w	80048a2 <scaraInitDuty+0x1322>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8004018:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 8100 	bne.w	8004222 <scaraInitDuty+0xca2>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004022:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 8089 	bne.w	800413e <scaraInitDuty+0xbbe>
						for ( uint8_t i = 0; i < 4; i++) {
 800402c:	2300      	movs	r3, #0
 800402e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8004032:	e07e      	b.n	8004132 <scaraInitDuty+0xbb2>
							if ( i == command.sub_para_int) {
 8004034:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8004038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800403c:	429a      	cmp	r2, r3
 800403e:	d13b      	bne.n	80040b8 <scaraInitDuty+0xb38>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004040:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <scaraInitDuty+0xb30>)
 8004046:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8004058:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 800405c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004060:	4913      	ldr	r1, [pc, #76]	; (80040b0 <scaraInitDuty+0xb30>)
 8004062:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004066:	fb00 f202 	mul.w	r2, r0, r2
 800406a:	440a      	add	r2, r1
 800406c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004070:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004074:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004078:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004084:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <scaraInitDuty+0xb30>)
 8004086:	1898      	adds	r0, r3, r2
 8004088:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <scaraInitDuty+0xb34>)
 800408e:	5cd3      	ldrb	r3, [r2, r3]
 8004090:	2201      	movs	r2, #1
 8004092:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004096:	4619      	mov	r1, r3
 8004098:	f001 f9e2 	bl	8005460 <scaraInitScurve>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80040a2:	e03a      	b.n	800411a <scaraInitDuty+0xb9a>
 80040a4:	f3af 8000 	nop.w
	...
 80040b0:	20005338 	.word	0x20005338
 80040b4:	20000c7c 	.word	0x20000c7c
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80040b8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80040bc:	4aa4      	ldr	r2, [pc, #656]	; (8004350 <scaraInitDuty+0xdd0>)
 80040be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80040d0:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 80040d4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80040d8:	499d      	ldr	r1, [pc, #628]	; (8004350 <scaraInitDuty+0xdd0>)
 80040da:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80040de:	fb00 f202 	mul.w	r2, r0, r2
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80040e8:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80040ec:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80040f0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80040fc:	4a94      	ldr	r2, [pc, #592]	; (8004350 <scaraInitDuty+0xdd0>)
 80040fe:	1898      	adds	r0, r3, r2
 8004100:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004104:	4a93      	ldr	r2, [pc, #588]	; (8004354 <scaraInitDuty+0xdd4>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	2201      	movs	r2, #1
 800410a:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8004340 <scaraInitDuty+0xdc0>
 800410e:	4619      	mov	r1, r3
 8004110:	f001 f9a6 	bl	8005460 <scaraInitScurve>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT);
							}
							myDUTY.time_total = command.time_total;
 800411a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800411e:	4a8c      	ldr	r2, [pc, #560]	; (8004350 <scaraInitDuty+0xdd0>)
 8004120:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004124:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8004128:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800412c:	3301      	adds	r3, #1
 800412e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8004132:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004136:	2b03      	cmp	r3, #3
 8004138:	f67f af7c 	bls.w	8004034 <scaraInitDuty+0xab4>
 800413c:	e073      	b.n	8004226 <scaraInitDuty+0xca6>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800413e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004142:	2b00      	cmp	r3, #0
 8004144:	d16b      	bne.n	800421e <scaraInitDuty+0xc9e>
						for ( uint8_t i = 0; i < 4; i++) {
 8004146:	2300      	movs	r3, #0
 8004148:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 800414c:	e062      	b.n	8004214 <scaraInitDuty+0xc94>
							if ( i == command.sub_para_int) {
 800414e:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 8004152:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004156:	429a      	cmp	r2, r3
 8004158:	d134      	bne.n	80041c4 <scaraInitDuty+0xc44>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800415a:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800415e:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <scaraInitDuty+0xdd0>)
 8004160:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004172:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004176:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004182:	4a73      	ldr	r2, [pc, #460]	; (8004350 <scaraInitDuty+0xdd0>)
 8004184:	1898      	adds	r0, r3, r2
 8004186:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800418a:	4a72      	ldr	r2, [pc, #456]	; (8004354 <scaraInitDuty+0xdd4>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	2200      	movs	r2, #0
 8004190:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004194:	4619      	mov	r1, r3
 8004196:	f001 f963 	bl	8005460 <scaraInitScurve>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80041a0:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041a4:	4a6a      	ldr	r2, [pc, #424]	; (8004350 <scaraInitDuty+0xdd0>)
 80041a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80041b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041b8:	4a65      	ldr	r2, [pc, #404]	; (8004350 <scaraInitDuty+0xdd0>)
 80041ba:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80041be:	e9c2 3400 	strd	r3, r4, [r2]
 80041c2:	e022      	b.n	800420a <scaraInitDuty+0xc8a>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80041c4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041c8:	4a61      	ldr	r2, [pc, #388]	; (8004350 <scaraInitDuty+0xdd0>)
 80041ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80041dc:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041e0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <scaraInitDuty+0xdd0>)
 80041ee:	1898      	adds	r0, r3, r2
 80041f0:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041f4:	4a57      	ldr	r2, [pc, #348]	; (8004354 <scaraInitDuty+0xdd4>)
 80041f6:	5cd3      	ldrb	r3, [r2, r3]
 80041f8:	2200      	movs	r2, #0
 80041fa:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8004340 <scaraInitDuty+0xdc0>
 80041fe:	4619      	mov	r1, r3
 8004200:	f001 f92e 	bl	8005460 <scaraInitScurve>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						for ( uint8_t i = 0; i < 4; i++) {
 800420a:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800420e:	3301      	adds	r3, #1
 8004210:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8004214:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004218:	2b03      	cmp	r3, #3
 800421a:	d998      	bls.n	800414e <scaraInitDuty+0xbce>
 800421c:	e003      	b.n	8004226 <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 800421e:	2308      	movs	r3, #8
 8004220:	e33f      	b.n	80048a2 <scaraInitDuty+0x1322>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8004222:	2305      	movs	r3, #5
 8004224:	e33d      	b.n	80048a2 <scaraInitDuty+0x1322>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8004226:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <scaraInitDuty+0xcb4>
				return status1;
 800422e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004232:	e336      	b.n	80048a2 <scaraInitDuty+0x1322>
			}
			if ( SCARA_STATUS_OK != status2) {
 8004234:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8313 	beq.w	8004864 <scaraInitDuty+0x12e4>
				return status2;
 800423e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004242:	e32e      	b.n	80048a2 <scaraInitDuty+0x1322>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8004244:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 8307 	bne.w	800485c <scaraInitDuty+0x12dc>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 800424e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004252:	a33d      	add	r3, pc, #244	; (adr r3, 8004348 <scaraInitDuty+0xdc8>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fc f9de 	bl	8000618 <__aeabi_dmul>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	4618      	mov	r0, r3
 8004262:	4621      	mov	r1, r4
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <scaraInitDuty+0xdd8>)
 800426a:	f7fc faff 	bl	800086c <__aeabi_ddiv>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004276:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800427a:	2b01      	cmp	r3, #1
 800427c:	d134      	bne.n	80042e8 <scaraInitDuty+0xd68>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800427e:	4b37      	ldr	r3, [pc, #220]	; (800435c <scaraInitDuty+0xddc>)
 8004280:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004284:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	f7fc f80e 	bl	80002ac <__adddf3>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <scaraInitDuty+0xddc>)
 800429a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800429e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80042a2:	461a      	mov	r2, r3
 80042a4:	4623      	mov	r3, r4
 80042a6:	f7fc f801 	bl	80002ac <__adddf3>
 80042aa:	4603      	mov	r3, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <scaraInitDuty+0xddc>)
 80042b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80042b8:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	f7fb fff4 	bl	80002ac <__adddf3>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <scaraInitDuty+0xddc>)
 80042ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80042d2:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	f7fb ffe7 	bl	80002ac <__adddf3>
 80042de:	4603      	mov	r3, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80042e6:	e016      	b.n	8004316 <scaraInitDuty+0xd96>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80042e8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d110      	bne.n	8004312 <scaraInitDuty+0xd92>
				target_point.x 		= command.target_point.x;
 80042f0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80042f4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= command.target_point.y;
 80042f8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80042fc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= command.target_point.z;
 8004300:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8004304:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= command.target_point.roll;
 8004308:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800430c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8004310:	e001      	b.n	8004316 <scaraInitDuty+0xd96>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004312:	230c      	movs	r3, #12
 8004314:	e2c5      	b.n	80048a2 <scaraInitDuty+0x1322>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8004316:	4c11      	ldr	r4, [pc, #68]	; (800435c <scaraInitDuty+0xddc>)
 8004318:	f107 0568 	add.w	r5, r7, #104	; 0x68
 800431c:	4668      	mov	r0, sp
 800431e:	f104 0308 	add.w	r3, r4, #8
 8004322:	2260      	movs	r2, #96	; 0x60
 8004324:	4619      	mov	r1, r3
 8004326:	f00d fedb 	bl	80120e0 <memcpy>
 800432a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800432e:	4628      	mov	r0, r5
 8004330:	f7fe fd7e 	bl	8002e30 <kinematicInverse>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d112      	bne.n	8004360 <scaraInitDuty+0xde0>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800433a:	2307      	movs	r3, #7
 800433c:	e2b1      	b.n	80048a2 <scaraInitDuty+0x1322>
 800433e:	bf00      	nop
	...
 8004348:	60000000 	.word	0x60000000
 800434c:	400921fb 	.word	0x400921fb
 8004350:	20005338 	.word	0x20005338
 8004354:	20000c7c 	.word	0x20000c7c
 8004358:	40668000 	.word	0x40668000
 800435c:	20005cf0 	.word	0x20005cf0
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8004360:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004364:	4bb0      	ldr	r3, [pc, #704]	; (8004628 <scaraInitDuty+0x10a8>)
 8004366:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800436a:	461a      	mov	r2, r3
 800436c:	4623      	mov	r3, r4
 800436e:	f7fb ff9b 	bl	80002a8 <__aeabi_dsub>
 8004372:	4603      	mov	r3, r0
 8004374:	460c      	mov	r4, r1
 8004376:	463a      	mov	r2, r7
 8004378:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800437c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004380:	4ba9      	ldr	r3, [pc, #676]	; (8004628 <scaraInitDuty+0x10a8>)
 8004382:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fb ff8d 	bl	80002a8 <__aeabi_dsub>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	463a      	mov	r2, r7
 8004394:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8004398:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800439c:	4ba2      	ldr	r3, [pc, #648]	; (8004628 <scaraInitDuty+0x10a8>)
 800439e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80043a2:	461a      	mov	r2, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	f7fb ff7f 	bl	80002a8 <__aeabi_dsub>
 80043aa:	4603      	mov	r3, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	463a      	mov	r2, r7
 80043b0:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80043b4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043b8:	4b9b      	ldr	r3, [pc, #620]	; (8004628 <scaraInitDuty+0x10a8>)
 80043ba:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80043be:	461a      	mov	r2, r3
 80043c0:	4623      	mov	r3, r4
 80043c2:	f7fb ff71 	bl	80002a8 <__aeabi_dsub>
 80043c6:	4603      	mov	r3, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	463a      	mov	r2, r7
 80043cc:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80043d0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 811a 	bne.w	800460e <scaraInitDuty+0x108e>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80043da:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d14d      	bne.n	800447e <scaraInitDuty+0xefe>
					for ( uint8_t i = 0; i < 4; i++) {
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80043e8:	e03d      	b.n	8004466 <scaraInitDuty+0xee6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80043ea:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80043ee:	4a8f      	ldr	r2, [pc, #572]	; (800462c <scaraInitDuty+0x10ac>)
 80043f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8004402:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8004406:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800440a:	4988      	ldr	r1, [pc, #544]	; (800462c <scaraInitDuty+0x10ac>)
 800440c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004410:	fb00 f202 	mul.w	r2, r0, r2
 8004414:	440a      	add	r2, r1
 8004416:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 800441a:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800441e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004422:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800442e:	4a7f      	ldr	r2, [pc, #508]	; (800462c <scaraInitDuty+0x10ac>)
 8004430:	1898      	adds	r0, r3, r2
 8004432:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004436:	4a7e      	ldr	r2, [pc, #504]	; (8004630 <scaraInitDuty+0x10b0>)
 8004438:	5cd1      	ldrb	r1, [r2, r3]
 800443a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800443e:	463a      	mov	r2, r7
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	ed93 7b00 	vldr	d7, [r3]
 8004448:	2201      	movs	r2, #1
 800444a:	eeb0 0a47 	vmov.f32	s0, s14
 800444e:	eef0 0a67 	vmov.f32	s1, s15
 8004452:	f000 fc75 	bl	8004d40 <scaraInitLSPB>
 8004456:	4603      	mov	r3, r0
 8004458:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 800445c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004460:	3301      	adds	r3, #1
 8004462:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004466:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800446a:	2b03      	cmp	r3, #3
 800446c:	d9bd      	bls.n	80043ea <scaraInitDuty+0xe6a>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 800446e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004472:	4a6e      	ldr	r2, [pc, #440]	; (800462c <scaraInitDuty+0x10ac>)
 8004474:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004478:	e9c2 3400 	strd	r3, r4, [r2]
 800447c:	e1f2      	b.n	8004864 <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800447e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 80c1 	bne.w	800460a <scaraInitDuty+0x108a>
					for ( uint8_t i = 0; i < 4; i++) {
 8004488:	2300      	movs	r3, #0
 800448a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800448e:	e02f      	b.n	80044f0 <scaraInitDuty+0xf70>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004490:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004494:	4a65      	ldr	r2, [pc, #404]	; (800462c <scaraInitDuty+0x10ac>)
 8004496:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80044a8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044ac:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80044b8:	4a5c      	ldr	r2, [pc, #368]	; (800462c <scaraInitDuty+0x10ac>)
 80044ba:	1898      	adds	r0, r3, r2
 80044bc:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044c0:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <scaraInitDuty+0x10b0>)
 80044c2:	5cd1      	ldrb	r1, [r2, r3]
 80044c4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044c8:	463a      	mov	r2, r7
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	ed93 7b00 	vldr	d7, [r3]
 80044d2:	2200      	movs	r2, #0
 80044d4:	eeb0 0a47 	vmov.f32	s0, s14
 80044d8:	eef0 0a67 	vmov.f32	s1, s15
 80044dc:	f000 fc30 	bl	8004d40 <scaraInitLSPB>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80044e6:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044ea:	3301      	adds	r3, #1
 80044ec:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80044f0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d9cb      	bls.n	8004490 <scaraInitDuty+0xf10>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <scaraInitDuty+0x10ac>)
 80044fa:	f603 1248 	addw	r2, r3, #2376	; 0x948
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800450a:	2300      	movs	r3, #0
 800450c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8004510:	e02d      	b.n	800456e <scaraInitDuty+0xfee>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8004512:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004516:	4a45      	ldr	r2, [pc, #276]	; (800462c <scaraInitDuty+0x10ac>)
 8004518:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800452a:	4b40      	ldr	r3, [pc, #256]	; (800462c <scaraInitDuty+0x10ac>)
 800452c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004530:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004534:	461a      	mov	r2, r3
 8004536:	4623      	mov	r3, r4
 8004538:	f7fc fafe 	bl	8000b38 <__aeabi_dcmpgt>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <scaraInitDuty+0xfe4>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8004542:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004546:	4a39      	ldr	r2, [pc, #228]	; (800462c <scaraInitDuty+0x10ac>)
 8004548:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004556:	e9d3 3400 	ldrd	r3, r4, [r3]
 800455a:	4a34      	ldr	r2, [pc, #208]	; (800462c <scaraInitDuty+0x10ac>)
 800455c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004560:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8004564:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004568:	3301      	adds	r3, #1
 800456a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800456e:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004572:	2b03      	cmp	r3, #3
 8004574:	d9cd      	bls.n	8004512 <scaraInitDuty+0xf92>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8004576:	2300      	movs	r3, #0
 8004578:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 800457c:	e040      	b.n	8004600 <scaraInitDuty+0x1080>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800457e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004582:	4a2a      	ldr	r2, [pc, #168]	; (800462c <scaraInitDuty+0x10ac>)
 8004584:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8004596:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <scaraInitDuty+0x10ac>)
 800459c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80045a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045a4:	4921      	ldr	r1, [pc, #132]	; (800462c <scaraInitDuty+0x10ac>)
 80045a6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80045aa:	fb00 f202 	mul.w	r2, r0, r2
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80045b4:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80045b8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80045bc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <scaraInitDuty+0x10ac>)
 80045ca:	1898      	adds	r0, r3, r2
 80045cc:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <scaraInitDuty+0x10b0>)
 80045d2:	5cd1      	ldrb	r1, [r2, r3]
 80045d4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80045d8:	463a      	mov	r2, r7
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	ed93 7b00 	vldr	d7, [r3]
 80045e2:	2201      	movs	r2, #1
 80045e4:	eeb0 0a47 	vmov.f32	s0, s14
 80045e8:	eef0 0a67 	vmov.f32	s1, s15
 80045ec:	f000 fba8 	bl	8004d40 <scaraInitLSPB>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80045f6:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80045fa:	3301      	adds	r3, #1
 80045fc:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8004600:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004604:	2b03      	cmp	r3, #3
 8004606:	d9ba      	bls.n	800457e <scaraInitDuty+0xffe>
 8004608:	e12c      	b.n	8004864 <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800460a:	2308      	movs	r3, #8
 800460c:	e149      	b.n	80048a2 <scaraInitDuty+0x1322>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800460e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004612:	2b01      	cmp	r3, #1
 8004614:	f040 8120 	bne.w	8004858 <scaraInitDuty+0x12d8>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004618:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800461c:	2b01      	cmp	r3, #1
 800461e:	d153      	bne.n	80046c8 <scaraInitDuty+0x1148>
					for ( uint8_t i = 0; i < 4; i++) {
 8004620:	2300      	movs	r3, #0
 8004622:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004626:	e043      	b.n	80046b0 <scaraInitDuty+0x1130>
 8004628:	20005cf0 	.word	0x20005cf0
 800462c:	20005338 	.word	0x20005338
 8004630:	20000c7c 	.word	0x20000c7c
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004634:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004638:	4a9e      	ldr	r2, [pc, #632]	; (80048b4 <scaraInitDuty+0x1334>)
 800463a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800464c:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8004650:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004654:	4997      	ldr	r1, [pc, #604]	; (80048b4 <scaraInitDuty+0x1334>)
 8004656:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800465a:	fb00 f202 	mul.w	r2, r0, r2
 800465e:	440a      	add	r2, r1
 8004660:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004664:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8004668:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800466c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004670:	fb02 f303 	mul.w	r3, r2, r3
 8004674:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004678:	4a8e      	ldr	r2, [pc, #568]	; (80048b4 <scaraInitDuty+0x1334>)
 800467a:	1898      	adds	r0, r3, r2
 800467c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004680:	4a8d      	ldr	r2, [pc, #564]	; (80048b8 <scaraInitDuty+0x1338>)
 8004682:	5cd1      	ldrb	r1, [r2, r3]
 8004684:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004688:	463a      	mov	r2, r7
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	ed93 7b00 	vldr	d7, [r3]
 8004692:	2201      	movs	r2, #1
 8004694:	eeb0 0a47 	vmov.f32	s0, s14
 8004698:	eef0 0a67 	vmov.f32	s1, s15
 800469c:	f000 fee0 	bl	8005460 <scaraInitScurve>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80046a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046aa:	3301      	adds	r3, #1
 80046ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80046b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d9bd      	bls.n	8004634 <scaraInitDuty+0x10b4>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 80046b8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80046bc:	4a7d      	ldr	r2, [pc, #500]	; (80048b4 <scaraInitDuty+0x1334>)
 80046be:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80046c2:	e9c2 3400 	strd	r3, r4, [r2]
 80046c6:	e0cd      	b.n	8004864 <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80046c8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 80c1 	bne.w	8004854 <scaraInitDuty+0x12d4>
					for ( uint8_t i = 0; i < 4; i++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80046d8:	e02f      	b.n	800473a <scaraInitDuty+0x11ba>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80046da:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80046de:	4a75      	ldr	r2, [pc, #468]	; (80048b4 <scaraInitDuty+0x1334>)
 80046e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80046f2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80046f6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004702:	4a6c      	ldr	r2, [pc, #432]	; (80048b4 <scaraInitDuty+0x1334>)
 8004704:	1898      	adds	r0, r3, r2
 8004706:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800470a:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <scaraInitDuty+0x1338>)
 800470c:	5cd1      	ldrb	r1, [r2, r3]
 800470e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004712:	463a      	mov	r2, r7
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	ed93 7b00 	vldr	d7, [r3]
 800471c:	2200      	movs	r2, #0
 800471e:	eeb0 0a47 	vmov.f32	s0, s14
 8004722:	eef0 0a67 	vmov.f32	s1, s15
 8004726:	f000 fe9b 	bl	8005460 <scaraInitScurve>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004730:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004734:	3301      	adds	r3, #1
 8004736:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800473a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800473e:	2b03      	cmp	r3, #3
 8004740:	d9cb      	bls.n	80046da <scaraInitDuty+0x115a>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 8004742:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <scaraInitDuty+0x1334>)
 8004744:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8004754:	2300      	movs	r3, #0
 8004756:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800475a:	e02d      	b.n	80047b8 <scaraInitDuty+0x1238>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800475c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004760:	4a54      	ldr	r2, [pc, #336]	; (80048b4 <scaraInitDuty+0x1334>)
 8004762:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004774:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <scaraInitDuty+0x1334>)
 8004776:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800477a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477e:	461a      	mov	r2, r3
 8004780:	4623      	mov	r3, r4
 8004782:	f7fc f9d9 	bl	8000b38 <__aeabi_dcmpgt>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d010      	beq.n	80047ae <scaraInitDuty+0x122e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800478c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004790:	4a48      	ldr	r2, [pc, #288]	; (80048b4 <scaraInitDuty+0x1334>)
 8004792:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80047a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047a4:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <scaraInitDuty+0x1334>)
 80047a6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80047aa:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80047ae:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80047b2:	3301      	adds	r3, #1
 80047b4:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80047b8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d9cd      	bls.n	800475c <scaraInitDuty+0x11dc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80047c6:	e040      	b.n	800484a <scaraInitDuty+0x12ca>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80047c8:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80047cc:	4a39      	ldr	r2, [pc, #228]	; (80048b4 <scaraInitDuty+0x1334>)
 80047ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80047e0:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 80047e4:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <scaraInitDuty+0x1334>)
 80047e6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80047ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ee:	4931      	ldr	r1, [pc, #196]	; (80048b4 <scaraInitDuty+0x1334>)
 80047f0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80047f4:	fb00 f202 	mul.w	r2, r0, r2
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80047fe:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8004802:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004806:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004812:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <scaraInitDuty+0x1334>)
 8004814:	1898      	adds	r0, r3, r2
 8004816:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <scaraInitDuty+0x1338>)
 800481c:	5cd1      	ldrb	r1, [r2, r3]
 800481e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004822:	463a      	mov	r2, r7
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	ed93 7b00 	vldr	d7, [r3]
 800482c:	2201      	movs	r2, #1
 800482e:	eeb0 0a47 	vmov.f32	s0, s14
 8004832:	eef0 0a67 	vmov.f32	s1, s15
 8004836:	f000 fe13 	bl	8005460 <scaraInitScurve>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004840:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004844:	3301      	adds	r3, #1
 8004846:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800484a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800484e:	2b03      	cmp	r3, #3
 8004850:	d9ba      	bls.n	80047c8 <scaraInitDuty+0x1248>
 8004852:	e007      	b.n	8004864 <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8004854:	2308      	movs	r3, #8
 8004856:	e024      	b.n	80048a2 <scaraInitDuty+0x1322>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8004858:	2305      	movs	r3, #5
 800485a:	e022      	b.n	80048a2 <scaraInitDuty+0x1322>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 800485c:	2304      	movs	r3, #4
 800485e:	e020      	b.n	80048a2 <scaraInitDuty+0x1322>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8004860:	2302      	movs	r3, #2
 8004862:	e01e      	b.n	80048a2 <scaraInitDuty+0x1322>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8004864:	4a15      	ldr	r2, [pc, #84]	; (80048bc <scaraInitDuty+0x133c>)
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionCurrent.total_time = myDUTY.time_total;
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <scaraInitDuty+0x1334>)
 8004874:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800487c:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <scaraInitDuty+0x133c>)
 800487e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionNext.t = 0;
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <scaraInitDuty+0x1340>)
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionNext.total_time = myDUTY.time_total;
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <scaraInitDuty+0x1334>)
 8004892:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <scaraInitDuty+0x1340>)
 800489c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	return SCARA_STATUS_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80048ae:	b004      	add	sp, #16
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20005338 	.word	0x20005338
 80048b8:	20000c7c 	.word	0x20000c7c
 80048bc:	20005cf0 	.word	0x20005cf0
 80048c0:	20005d58 	.word	0x20005d58

080048c4 <scaraInitLine>:

SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80048c4:	b082      	sub	sp, #8
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c8:	b09b      	sub	sp, #108	; 0x6c
 80048ca:	af18      	add	r7, sp, #96	; 0x60
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	f107 0120 	add.w	r1, r7, #32
 80048d2:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80048d6:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80048da:	4668      	mov	r0, sp
 80048dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e0:	2260      	movs	r2, #96	; 0x60
 80048e2:	4619      	mov	r1, r3
 80048e4:	f00d fbfc 	bl	80120e0 <memcpy>
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	cb0c      	ldmia	r3, {r2, r3}
 80048ee:	4620      	mov	r0, r4
 80048f0:	f7fe fa9e 	bl	8002e30 <kinematicInverse>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80048fa:	2307      	movs	r3, #7
 80048fc:	e09e      	b.n	8004a3c <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 80048fe:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8004908:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8004912:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 800491c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8004926:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8004930:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 800493a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800493e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fb fcaf 	bl	80002a8 <__aeabi_dsub>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8004954:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004958:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800495c:	461a      	mov	r2, r3
 800495e:	4623      	mov	r3, r4
 8004960:	f7fb fca2 	bl	80002a8 <__aeabi_dsub>
 8004964:	4603      	mov	r3, r0
 8004966:	460c      	mov	r4, r1
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800496e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004972:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004976:	461a      	mov	r2, r3
 8004978:	4623      	mov	r3, r4
 800497a:	f7fb fc95 	bl	80002a8 <__aeabi_dsub>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004994:	461a      	mov	r2, r3
 8004996:	4623      	mov	r3, r4
 8004998:	f7fb fe3e 	bl	8000618 <__aeabi_dmul>
 800499c:	4603      	mov	r3, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	461d      	mov	r5, r3
 80049a2:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80049b0:	461a      	mov	r2, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	f7fb fe30 	bl	8000618 <__aeabi_dmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	461a      	mov	r2, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	4628      	mov	r0, r5
 80049c2:	4631      	mov	r1, r6
 80049c4:	f7fb fc72 	bl	80002ac <__adddf3>
 80049c8:	4603      	mov	r3, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	461d      	mov	r5, r3
 80049ce:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80049dc:	461a      	mov	r2, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	f7fb fe1a 	bl	8000618 <__aeabi_dmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80049e8:	461a      	mov	r2, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	4628      	mov	r0, r5
 80049ee:	4631      	mov	r1, r6
 80049f0:	f7fb fc5c 	bl	80002ac <__adddf3>
 80049f4:	4603      	mov	r3, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	ec44 3b17 	vmov	d7, r3, r4
 80049fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004a00:	eef0 0a67 	vmov.f32	s1, s15
 8004a04:	f011 fe6a 	bl	80166dc <sqrt>
 8004a08:	eeb0 7a40 	vmov.f32	s14, s0
 8004a0c:	eef0 7a60 	vmov.f32	s15, s1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004a46:	b002      	add	sp, #8
 8004a48:	4770      	bx	lr
 8004a4a:	0000      	movs	r0, r0
 8004a4c:	0000      	movs	r0, r0
	...

08004a50 <scaraInitCircle>:

SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8004a50:	b082      	sub	sp, #8
 8004a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a56:	b0ad      	sub	sp, #180	; 0xb4
 8004a58:	af18      	add	r7, sp, #96	; 0x60
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004a60:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8004a64:	f107 06d8 	add.w	r6, r7, #216	; 0xd8
 8004a68:	4668      	mov	r0, sp
 8004a6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a6e:	2260      	movs	r2, #96	; 0x60
 8004a70:	4619      	mov	r1, r3
 8004a72:	f00d fb35 	bl	80120e0 <memcpy>
 8004a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a7a:	cb0c      	ldmia	r3, {r2, r3}
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7fe f9d7 	bl	8002e30 <kinematicInverse>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	e146      	b.n	8004d1a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8004a8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d006      	beq.n	8004aa2 <scaraInitCircle+0x52>
 8004a94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d001      	beq.n	8004aa2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	e13b      	b.n	8004d1a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8004aa2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004aaa:	f7fb fbfd 	bl	80002a8 <__aeabi_dsub>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8004ab6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004aba:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004abe:	f7fb fbf3 	bl	80002a8 <__aeabi_dsub>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8004aca:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8004ace:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004ad2:	f7fb fbe9 	bl	80002a8 <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8004ade:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8004ae2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004ae6:	f7fb fbdf 	bl	80002a8 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8004af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004af6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004afa:	f7fb fd8d 	bl	8000618 <__aeabi_dmul>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004b0e:	f7fb fd83 	bl	8000618 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4640      	mov	r0, r8
 8004b18:	4649      	mov	r1, r9
 8004b1a:	f7fb fbc7 	bl	80002ac <__adddf3>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	ec43 2b17 	vmov	d7, r2, r3
 8004b26:	eeb0 0a47 	vmov.f32	s0, s14
 8004b2a:	eef0 0a67 	vmov.f32	s1, s15
 8004b2e:	f011 fdd5 	bl	80166dc <sqrt>
 8004b32:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8004b36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b3e:	f7fb fd6b 	bl	8000618 <__aeabi_dmul>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4690      	mov	r8, r2
 8004b48:	4699      	mov	r9, r3
 8004b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b52:	f7fb fd61 	bl	8000618 <__aeabi_dmul>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	f7fb fba5 	bl	80002ac <__adddf3>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	ec43 2b17 	vmov	d7, r2, r3
 8004b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6e:	eef0 0a67 	vmov.f32	s1, s15
 8004b72:	f011 fdb3 	bl	80166dc <sqrt>
 8004b76:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8004b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b82:	f7fb fb91 	bl	80002a8 <__aeabi_dsub>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	4b68      	ldr	r3, [pc, #416]	; (8004d38 <scaraInitCircle+0x2e8>)
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7fb ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	e0b8      	b.n	8004d1a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8004ba8:	a35f      	add	r3, pc, #380	; (adr r3, 8004d28 <scaraInitCircle+0x2d8>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bb2:	f7fb ffa3 	bl	8000afc <__aeabi_dcmplt>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <scaraInitCircle+0x180>
 8004bbc:	a35a      	add	r3, pc, #360	; (adr r3, 8004d28 <scaraInitCircle+0x2d8>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bc6:	f7fb ff99 	bl	8000afc <__aeabi_dcmplt>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	e0a2      	b.n	8004d1a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8004bd4:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8004bd8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8004bdc:	f011 fd7c 	bl	80166d8 <atan2>
 8004be0:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8004be4:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004be8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8004bec:	f011 fd74 	bl	80166d8 <atan2>
 8004bf0:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8004bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bfc:	f7fb fb54 	bl	80002a8 <__aeabi_dsub>
 8004c00:	4603      	mov	r3, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c14:	f7fb ff72 	bl	8000afc <__aeabi_dcmplt>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8004c1e:	a344      	add	r3, pc, #272	; (adr r3, 8004d30 <scaraInitCircle+0x2e0>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c28:	f7fb fb40 	bl	80002ac <__adddf3>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8004c34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	da0a      	bge.n	8004c52 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c40:	a13b      	add	r1, pc, #236	; (adr r1, 8004d30 <scaraInitCircle+0x2e0>)
 8004c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c46:	f7fb fb2f 	bl	80002a8 <__aeabi_dsub>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8004c52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c56:	b25a      	sxtb	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c62:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c6c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c76:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004c80:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8004c84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c88:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c8c:	f7fb fcc4 	bl	8000618 <__aeabi_dmul>
 8004c90:	4603      	mov	r3, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8004c9a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8004ca4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8004cae:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8004cb8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8004cc2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8004ccc:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8004cd6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8004ce0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8004cea:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3754      	adds	r7, #84	; 0x54
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d24:	b002      	add	sp, #8
 8004d26:	4770      	bx	lr
 8004d28:	9999999a 	.word	0x9999999a
 8004d2c:	3fb99999 	.word	0x3fb99999
 8004d30:	60000000 	.word	0x60000000
 8004d34:	401921fb 	.word	0x401921fb
 8004d38:	3ff00000 	.word	0x3ff00000
 8004d3c:	00000000 	.word	0x00000000

08004d40 <scaraInitLSPB>:

SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit) {
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	b0a9      	sub	sp, #164	; 0xa4
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	61f8      	str	r0, [r7, #28]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d50:	76fb      	strb	r3, [r7, #27]
 8004d52:	4613      	mov	r3, r2
 8004d54:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8004d56:	7efb      	ldrb	r3, [r7, #27]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d10a      	bne.n	8004d72 <scaraInitLSPB+0x32>
		 v_design = V_DESIGN_3D;
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	4c99      	ldr	r4, [pc, #612]	; (8004fc8 <scaraInitLSPB+0x288>)
 8004d62:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_3D;
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	4c98      	ldr	r4, [pc, #608]	; (8004fcc <scaraInitLSPB+0x28c>)
 8004d6c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004d70:	e047      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_ROLL == target) {
 8004d72:	7efb      	ldrb	r3, [r7, #27]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d10a      	bne.n	8004d8e <scaraInitLSPB+0x4e>
		 v_design = V_DESIGN_ROLL;
 8004d78:	a48b      	add	r4, pc, #556	; (adr r4, 8004fa8 <scaraInitLSPB+0x268>)
 8004d7a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004d7e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_ROLL;
 8004d82:	a48b      	add	r4, pc, #556	; (adr r4, 8004fb0 <scaraInitLSPB+0x270>)
 8004d84:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004d88:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004d8c:	e039      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J0 == target) {
 8004d8e:	7efb      	ldrb	r3, [r7, #27]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <scaraInitLSPB+0x6a>
		 v_design = V_DESIGN_J0;
 8004d94:	a484      	add	r4, pc, #528	; (adr r4, 8004fa8 <scaraInitLSPB+0x268>)
 8004d96:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004d9a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J0;
 8004d9e:	a484      	add	r4, pc, #528	; (adr r4, 8004fb0 <scaraInitLSPB+0x270>)
 8004da0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004da4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004da8:	e02b      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J1 == target) {
 8004daa:	7efb      	ldrb	r3, [r7, #27]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10a      	bne.n	8004dc6 <scaraInitLSPB+0x86>
		 v_design = V_DESIGN_J1;
 8004db0:	a47d      	add	r4, pc, #500	; (adr r4, 8004fa8 <scaraInitLSPB+0x268>)
 8004db2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004db6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J1;
 8004dba:	a47d      	add	r4, pc, #500	; (adr r4, 8004fb0 <scaraInitLSPB+0x270>)
 8004dbc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dc0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004dc4:	e01d      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J2 == target) {
 8004dc6:	7efb      	ldrb	r3, [r7, #27]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d10a      	bne.n	8004de2 <scaraInitLSPB+0xa2>
		 v_design = V_DESIGN_J2;
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	4c7d      	ldr	r4, [pc, #500]	; (8004fc8 <scaraInitLSPB+0x288>)
 8004dd2:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J2;
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	4c7c      	ldr	r4, [pc, #496]	; (8004fcc <scaraInitLSPB+0x28c>)
 8004ddc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004de0:	e00f      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J3 == target) {
 8004de2:	7efb      	ldrb	r3, [r7, #27]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d10a      	bne.n	8004dfe <scaraInitLSPB+0xbe>
		 v_design = V_DESIGN_J3;
 8004de8:	a46f      	add	r4, pc, #444	; (adr r4, 8004fa8 <scaraInitLSPB+0x268>)
 8004dea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dee:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J3;
 8004df2:	a46f      	add	r4, pc, #444	; (adr r4, 8004fb0 <scaraInitLSPB+0x270>)
 8004df4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004df8:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004dfc:	e001      	b.n	8004e02 <scaraInitLSPB+0xc2>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004dfe:	2306      	movs	r3, #6
 8004e00:	e31a      	b.n	8005438 <scaraInitLSPB+0x6f8>
	 }

	 q0 = 0;
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 q1 = total_s;
 8004e0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004e12:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 v0 = 0;
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	f04f 0400 	mov.w	r4, #0
 8004e1e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 v1 = 0;
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	f04f 0400 	mov.w	r4, #0
 8004e2a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	 if ( q0 <= q1) {
 8004e2e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004e32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e36:	f7fb fe6b 	bl	8000b10 <__aeabi_dcmple>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <scaraInitLSPB+0x108>
		 dir = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e46:	e00c      	b.n	8004e62 <scaraInitLSPB+0x122>
	 } else {
		 dir = -1;
 8004e48:	23ff      	movs	r3, #255	; 0xff
 8004e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		 q1 = -q1;
 8004e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8004e62:	7ebb      	ldrb	r3, [r7, #26]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 80bf 	bne.w	8004fe8 <scaraInitLSPB+0x2a8>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004e70:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 // Avoid division by 0
		 if (tf > 0.001) {
 8004e74:	a350      	add	r3, pc, #320	; (adr r3, 8004fb8 <scaraInitLSPB+0x278>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e7e:	f7fb fe5b 	bl	8000b38 <__aeabi_dcmpgt>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a3 	beq.w	8004fd0 <scaraInitLSPB+0x290>
			 v_lower 	= (q1 - q0) / tf;
 8004e8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e92:	f7fb fa09 	bl	80002a8 <__aeabi_dsub>
 8004e96:	4603      	mov	r3, r0
 8004e98:	460c      	mov	r4, r1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ea2:	f7fb fce3 	bl	800086c <__aeabi_ddiv>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			 v_upper 	= 2*(q1 - q0) / tf;
 8004eae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eb6:	f7fb f9f7 	bl	80002a8 <__aeabi_dsub>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	f7fb f9f1 	bl	80002ac <__adddf3>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ed6:	f7fb fcc9 	bl	800086c <__aeabi_ddiv>
 8004eda:	4603      	mov	r3, r0
 8004edc:	460c      	mov	r4, r1
 8004ede:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

			 if ( v_design < v_lower) {
 8004ee2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004eea:	f7fb fe07 	bl	8000afc <__aeabi_dcmplt>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <scaraInitLSPB+0x1b8>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8004ef4:	2309      	movs	r3, #9
 8004ef6:	e29f      	b.n	8005438 <scaraInitLSPB+0x6f8>
			 } else {
				 if ( v_upper <= v_design) {
 8004ef8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004efc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f00:	f7fb fe06 	bl	8000b10 <__aeabi_dcmple>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <scaraInitLSPB+0x1d2>
					 v_design = v_upper;
 8004f0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004f0e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8004f12:	a32b      	add	r3, pc, #172	; (adr r3, 8004fc0 <scaraInitLSPB+0x280>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f1c:	f7fb fe0c 	bl	8000b38 <__aeabi_dcmpgt>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01a      	beq.n	8004f5c <scaraInitLSPB+0x21c>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8004f26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f2e:	f7fb f9bb 	bl	80002a8 <__aeabi_dsub>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	4618      	mov	r0, r3
 8004f38:	4621      	mov	r1, r4
 8004f3a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004f3e:	f7fb fc95 	bl	800086c <__aeabi_ddiv>
 8004f42:	4603      	mov	r3, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	461a      	mov	r2, r3
 8004f48:	4623      	mov	r3, r4
 8004f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f4e:	f7fb f9ab 	bl	80002a8 <__aeabi_dsub>
 8004f52:	4603      	mov	r3, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8004f5a:	e00b      	b.n	8004f74 <scaraInitLSPB+0x234>
				 } else {
					 tc_upper = tf / 2;
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f68:	f7fb fc80 	bl	800086c <__aeabi_ddiv>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
				 }
				 a_upper	= v_design/tc_upper;
 8004f74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f7c:	f7fb fc76 	bl	800086c <__aeabi_ddiv>
 8004f80:	4603      	mov	r3, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
				 if ( a_upper > a_design) {
 8004f88:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f90:	f7fb fdd2 	bl	8000b38 <__aeabi_dcmpgt>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <scaraInitLSPB+0x25e>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e24c      	b.n	8005438 <scaraInitLSPB+0x6f8>
				 } else {
					 a_design = a_upper;
 8004f9e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004fa2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004fa6:	e01f      	b.n	8004fe8 <scaraInitLSPB+0x2a8>
 8004fa8:	80000000 	.word	0x80000000
 8004fac:	3fd41b2f 	.word	0x3fd41b2f
 8004fb0:	a0000000 	.word	0xa0000000
 8004fb4:	3fa015bf 	.word	0x3fa015bf
 8004fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004fbc:	3f50624d 	.word	0x3f50624d
 8004fc0:	9abcaf48 	.word	0x9abcaf48
 8004fc4:	3e7ad7f2 	.word	0x3e7ad7f2
 8004fc8:	40340000 	.word	0x40340000
 8004fcc:	40140000 	.word	0x40140000
				 }
			 }
		 } else {
			 v_design = 0;
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 0400 	mov.w	r4, #0
 8004fd8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 a_design = 0;
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8004fe8:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004ff4:	f7fb fda0 	bl	8000b38 <__aeabi_dcmpgt>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 819c 	beq.w	8005338 <scaraInitLSPB+0x5f8>
 8005000:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800500c:	f7fb fd94 	bl	8000b38 <__aeabi_dcmpgt>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8190 	beq.w	8005338 <scaraInitLSPB+0x5f8>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8005018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800501c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005020:	f7fb f942 	bl	80002a8 <__aeabi_dsub>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	461d      	mov	r5, r3
 800502a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800502e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005032:	4628      	mov	r0, r5
 8005034:	4631      	mov	r1, r6
 8005036:	f7fb faef 	bl	8000618 <__aeabi_dmul>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8005042:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005046:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800504a:	f7fb fae5 	bl	8000618 <__aeabi_dmul>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	e9c7 3400 	strd	r3, r4, [r7]
 8005056:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800505a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800505e:	f7fb fadb 	bl	8000618 <__aeabi_dmul>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	461d      	mov	r5, r3
 8005068:	4626      	mov	r6, r4
 800506a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800506e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005072:	f7fb fad1 	bl	8000618 <__aeabi_dmul>
 8005076:	4603      	mov	r3, r0
 8005078:	460c      	mov	r4, r1
 800507a:	461a      	mov	r2, r3
 800507c:	4623      	mov	r3, r4
 800507e:	4628      	mov	r0, r5
 8005080:	4631      	mov	r1, r6
 8005082:	f7fb f913 	bl	80002ac <__adddf3>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	4618      	mov	r0, r3
 800508c:	4621      	mov	r1, r4
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005096:	f7fb fbe9 	bl	800086c <__aeabi_ddiv>
 800509a:	4603      	mov	r3, r0
 800509c:	460c      	mov	r4, r1
 800509e:	461a      	mov	r2, r3
 80050a0:	4623      	mov	r3, r4
 80050a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050a6:	f7fb f8ff 	bl	80002a8 <__aeabi_dsub>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	461a      	mov	r2, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050b6:	f7fb fd2b 	bl	8000b10 <__aeabi_dcmple>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d075      	beq.n	80051ac <scaraInitLSPB+0x46c>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80050c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050c4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c8:	f7fb f8ee 	bl	80002a8 <__aeabi_dsub>
 80050cc:	4603      	mov	r3, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	469a      	mov	sl, r3
 80050d2:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80050d6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80050da:	4650      	mov	r0, sl
 80050dc:	4659      	mov	r1, fp
 80050de:	f7fb fa9b 	bl	8000618 <__aeabi_dmul>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	4625      	mov	r5, r4
 80050e8:	461c      	mov	r4, r3
 80050ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050f2:	f7fb fa91 	bl	8000618 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4690      	mov	r8, r2
 80050fc:	4699      	mov	r9, r3
 80050fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005102:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005106:	f7fb fa87 	bl	8000618 <__aeabi_dmul>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4640      	mov	r0, r8
 8005110:	4649      	mov	r1, r9
 8005112:	f7fb f8cb 	bl	80002ac <__adddf3>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005126:	f7fb fba1 	bl	800086c <__aeabi_ddiv>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb f8bb 	bl	80002ac <__adddf3>
 8005136:	4603      	mov	r3, r0
 8005138:	460c      	mov	r4, r1
 800513a:	ec44 3b17 	vmov	d7, r3, r4
 800513e:	eeb0 0a47 	vmov.f32	s0, s14
 8005142:	eef0 0a67 	vmov.f32	s1, s15
 8005146:	f011 fac9 	bl	80166dc <sqrt>
 800514a:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 800514e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005152:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005156:	f7fb f8a7 	bl	80002a8 <__aeabi_dsub>
 800515a:	4603      	mov	r3, r0
 800515c:	460c      	mov	r4, r1
 800515e:	4618      	mov	r0, r3
 8005160:	4621      	mov	r1, r4
 8005162:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005166:	f7fb fb81 	bl	800086c <__aeabi_ddiv>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 8005172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005176:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800517a:	f7fb f895 	bl	80002a8 <__aeabi_dsub>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	4618      	mov	r0, r3
 8005184:	4621      	mov	r1, r4
 8005186:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800518a:	f7fb fb6f 	bl	800086c <__aeabi_ddiv>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= ta + td;
 8005196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800519a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800519e:	f7fb f885 	bl	80002ac <__adddf3>
 80051a2:	4603      	mov	r3, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80051aa:	e0e3      	b.n	8005374 <scaraInitLSPB+0x634>
		 } else {
			 v_lim	= v_design;
 80051ac:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80051b0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 80051b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051bc:	f7fb f874 	bl	80002a8 <__aeabi_dsub>
 80051c0:	4603      	mov	r3, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4618      	mov	r0, r3
 80051c6:	4621      	mov	r1, r4
 80051c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80051cc:	f7fb fb4e 	bl	800086c <__aeabi_ddiv>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 80051d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051dc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051e0:	f7fb f862 	bl	80002a8 <__aeabi_dsub>
 80051e4:	4603      	mov	r3, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	4618      	mov	r0, r3
 80051ea:	4621      	mov	r1, r4
 80051ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80051f0:	f7fb fb3c 	bl	800086c <__aeabi_ddiv>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80051fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005200:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005204:	f7fb f850 	bl	80002a8 <__aeabi_dsub>
 8005208:	4603      	mov	r3, r0
 800520a:	460c      	mov	r4, r1
 800520c:	4698      	mov	r8, r3
 800520e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8005212:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb fb27 	bl	800086c <__aeabi_ddiv>
 800521e:	4603      	mov	r3, r0
 8005220:	460c      	mov	r4, r1
 8005222:	4625      	mov	r5, r4
 8005224:	461c      	mov	r4, r3
 8005226:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	f7fb f83d 	bl	80002ac <__adddf3>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800523a:	f7fb fb17 	bl	800086c <__aeabi_ddiv>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4690      	mov	r8, r2
 8005244:	4699      	mov	r9, r3
 8005246:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800524a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800524e:	f7fb fb0d 	bl	800086c <__aeabi_ddiv>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	f04f 0000 	mov.w	r0, #0
 800525a:	497d      	ldr	r1, [pc, #500]	; (8005450 <scaraInitLSPB+0x710>)
 800525c:	f7fb f824 	bl	80002a8 <__aeabi_dsub>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb f9d6 	bl	8000618 <__aeabi_dmul>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4690      	mov	r8, r2
 8005272:	4699      	mov	r9, r3
 8005274:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005278:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800527c:	f7fb faf6 	bl	800086c <__aeabi_ddiv>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	4971      	ldr	r1, [pc, #452]	; (8005450 <scaraInitLSPB+0x710>)
 800528a:	f7fb f80d 	bl	80002a8 <__aeabi_dsub>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb f9bf 	bl	8000618 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fb f803 	bl	80002ac <__adddf3>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	4625      	mov	r5, r4
 80052ac:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80052ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	f7fa fff9 	bl	80002ac <__adddf3>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80052c2:	f7fb fad3 	bl	800086c <__aeabi_ddiv>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4690      	mov	r8, r2
 80052cc:	4699      	mov	r9, r3
 80052ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80052d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052d6:	f7fb fac9 	bl	800086c <__aeabi_ddiv>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	495b      	ldr	r1, [pc, #364]	; (8005450 <scaraInitLSPB+0x710>)
 80052e4:	f7fa ffe0 	bl	80002a8 <__aeabi_dsub>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	f7fb f992 	bl	8000618 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4690      	mov	r8, r2
 80052fa:	4699      	mov	r9, r3
 80052fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005300:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005304:	f7fb fab2 	bl	800086c <__aeabi_ddiv>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	f04f 0000 	mov.w	r0, #0
 8005310:	494f      	ldr	r1, [pc, #316]	; (8005450 <scaraInitLSPB+0x710>)
 8005312:	f7fa ffc9 	bl	80002a8 <__aeabi_dsub>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fb f97b 	bl	8000618 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fa ffbf 	bl	80002ac <__adddf3>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8005336:	e01d      	b.n	8005374 <scaraInitLSPB+0x634>
		 }
	 } else {
		 v_lim	= 0;
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f04f 0400 	mov.w	r4, #0
 8005340:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 ta = tf/2;
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800534c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005350:	f7fb fa8c 	bl	800086c <__aeabi_ddiv>
 8005354:	4603      	mov	r3, r0
 8005356:	460c      	mov	r4, r1
 8005358:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 td = tf/2;
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005364:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005368:	f7fb fa80 	bl	800086c <__aeabi_ddiv>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8005374:	a334      	add	r3, pc, #208	; (adr r3, 8005448 <scaraInitLSPB+0x708>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800537e:	f7fb fa75 	bl	800086c <__aeabi_ddiv>
 8005382:	4603      	mov	r3, r0
 8005384:	460c      	mov	r4, r1
 8005386:	4618      	mov	r0, r3
 8005388:	4621      	mov	r1, r4
 800538a:	f7fb fc3d 	bl	8000c08 <__aeabi_d2f>
 800538e:	4603      	mov	r3, r0
 8005390:	ee00 3a10 	vmov	s0, r3
 8005394:	f011 f960 	bl	8016658 <ceilf>
 8005398:	eef0 7a40 	vmov.f32	s15, s0
 800539c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a0:	ee17 3a90 	vmov	r3, s15
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80053ac:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80053b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80053be:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80053c8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80053d2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80053dc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80053e6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80053f0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80053fa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005404:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800540e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	f7fa ff3e 	bl	80002a8 <__aeabi_dsub>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	37a4      	adds	r7, #164	; 0xa4
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	40000000 	.word	0x40000000
 800544c:	3f847ae1 	.word	0x3f847ae1
 8005450:	3ff00000 	.word	0x3ff00000
 8005454:	9abcaf48 	.word	0x9abcaf48
 8005458:	3e7ad7f2 	.word	0x3e7ad7f2
 800545c:	00000000 	.word	0x00000000

08005460 <scaraInitScurve>:

SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit) {
 8005460:	b5b0      	push	{r4, r5, r7, lr}
 8005462:	b0b6      	sub	sp, #216	; 0xd8
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	460b      	mov	r3, r1
 800546a:	ed87 0b00 	vstr	d0, [r7]
 800546e:	72fb      	strb	r3, [r7, #11]
 8005470:	4613      	mov	r3, r2
 8005472:	72bb      	strb	r3, [r7, #10]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8005474:	7afb      	ldrb	r3, [r7, #11]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d10a      	bne.n	8005490 <scaraInitScurve+0x30>
		 v_design = V_DESIGN_3D;
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	4c8a      	ldr	r4, [pc, #552]	; (80056a8 <scaraInitScurve+0x248>)
 8005480:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_3D;
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	4c88      	ldr	r4, [pc, #544]	; (80056ac <scaraInitScurve+0x24c>)
 800548a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800548e:	e047      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_ROLL == target) {
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d10a      	bne.n	80054ac <scaraInitScurve+0x4c>
		 v_design = V_DESIGN_ROLL;
 8005496:	a47e      	add	r4, pc, #504	; (adr r4, 8005690 <scaraInitScurve+0x230>)
 8005498:	e9d4 3400 	ldrd	r3, r4, [r4]
 800549c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_ROLL;
 80054a0:	a47d      	add	r4, pc, #500	; (adr r4, 8005698 <scaraInitScurve+0x238>)
 80054a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054a6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80054aa:	e039      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J0 == target) {
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <scaraInitScurve+0x68>
		 v_design = V_DESIGN_J0;
 80054b2:	a477      	add	r4, pc, #476	; (adr r4, 8005690 <scaraInitScurve+0x230>)
 80054b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054b8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J0;
 80054bc:	a476      	add	r4, pc, #472	; (adr r4, 8005698 <scaraInitScurve+0x238>)
 80054be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054c2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80054c6:	e02b      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J1 == target) {
 80054c8:	7afb      	ldrb	r3, [r7, #11]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10a      	bne.n	80054e4 <scaraInitScurve+0x84>
		 v_design = V_DESIGN_J1;
 80054ce:	a470      	add	r4, pc, #448	; (adr r4, 8005690 <scaraInitScurve+0x230>)
 80054d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054d4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J1;
 80054d8:	a46f      	add	r4, pc, #444	; (adr r4, 8005698 <scaraInitScurve+0x238>)
 80054da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054de:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80054e2:	e01d      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J2 == target) {
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d10a      	bne.n	8005500 <scaraInitScurve+0xa0>
		 v_design = V_DESIGN_J2;
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	4c6e      	ldr	r4, [pc, #440]	; (80056a8 <scaraInitScurve+0x248>)
 80054f0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J2;
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	4c6c      	ldr	r4, [pc, #432]	; (80056ac <scaraInitScurve+0x24c>)
 80054fa:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80054fe:	e00f      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J3 == target) {
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d10a      	bne.n	800551c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J3;
 8005506:	a462      	add	r4, pc, #392	; (adr r4, 8005690 <scaraInitScurve+0x230>)
 8005508:	e9d4 3400 	ldrd	r3, r4, [r4]
 800550c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J3;
 8005510:	a461      	add	r4, pc, #388	; (adr r4, 8005698 <scaraInitScurve+0x238>)
 8005512:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005516:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800551a:	e001      	b.n	8005520 <scaraInitScurve+0xc0>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800551c:	2306      	movs	r3, #6
 800551e:	e2d2      	b.n	8005ac6 <scaraInitScurve+0x666>
	 }

	 v0 = 0;
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f04f 0400 	mov.w	r4, #0
 8005528:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 v1 = 0;
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 q0 = 0;
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	f04f 0400 	mov.w	r4, #0
 8005540:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	 q1 = total_s;
 8005544:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005548:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	 if ( total_s < 0) {
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005558:	f7fb fad0 	bl	8000afc <__aeabi_dcmplt>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d015      	beq.n	800558e <scaraInitScurve+0x12e>
		 dir = -1;
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	4c52      	ldr	r4, [pc, #328]	; (80056b0 <scaraInitScurve+0x250>)
 8005568:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 q1 = -q1;
 800556c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800557c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		 total_s = -total_s;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e004      	b.n	8005598 <scaraInitScurve+0x138>
	 } else {
		 dir = 1;
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	4c48      	ldr	r4, [pc, #288]	; (80056b4 <scaraInitScurve+0x254>)
 8005594:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8005598:	7abb      	ldrb	r3, [r7, #10]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f040 809a 	bne.w	80056d4 <scaraInitScurve+0x274>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80055a6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 // Avoid division by 0
		 if (tf > 0.001) {
 80055aa:	a33d      	add	r3, pc, #244	; (adr r3, 80056a0 <scaraInitScurve+0x240>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055b4:	f7fb fac0 	bl	8000b38 <__aeabi_dcmpgt>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d07e      	beq.n	80056bc <scaraInitScurve+0x25c>
			 // Assume 4 phase
			 t_upper = tf / 4;
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <scaraInitScurve+0x258>)
 80055c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055c8:	f7fb f950 	bl	800086c <__aeabi_ddiv>
 80055cc:	4603      	mov	r3, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 v_upper = total_s / (2*t_upper);
 80055d4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	f7fa fe66 	bl	80002ac <__adddf3>
 80055e0:	4603      	mov	r3, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ec:	f7fb f93e 	bl	800086c <__aeabi_ddiv>
 80055f0:	4603      	mov	r3, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 80055f8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80055fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005600:	f7fb fa9a 	bl	8000b38 <__aeabi_dcmpgt>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d022      	beq.n	8005650 <scaraInitScurve+0x1f0>
				 t_upper = tf/2 - total_s/(2*v_design);
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005612:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005616:	f7fb f929 	bl	800086c <__aeabi_ddiv>
 800561a:	4603      	mov	r3, r0
 800561c:	460c      	mov	r4, r1
 800561e:	4625      	mov	r5, r4
 8005620:	461c      	mov	r4, r3
 8005622:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	f7fa fe3f 	bl	80002ac <__adddf3>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005636:	f7fb f919 	bl	800086c <__aeabi_ddiv>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fa fe31 	bl	80002a8 <__aeabi_dsub>
 8005646:	4603      	mov	r3, r0
 8005648:	460c      	mov	r4, r1
 800564a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800564e:	e003      	b.n	8005658 <scaraInitScurve+0x1f8>
			 } else {
				 v_design = v_upper;
 8005650:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005654:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 }
			 a_upper  = v_design / t_upper;
 8005658:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800565c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005660:	f7fb f904 	bl	800086c <__aeabi_ddiv>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			 if ( a_upper > a_design) {
 800566c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005670:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005674:	f7fb fa60 	bl	8000b38 <__aeabi_dcmpgt>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <scaraInitScurve+0x222>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 800567e:	230a      	movs	r3, #10
 8005680:	e221      	b.n	8005ac6 <scaraInitScurve+0x666>
			 } else {
				 a_design = a_upper;
 8005682:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005686:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800568a:	e023      	b.n	80056d4 <scaraInitScurve+0x274>
 800568c:	f3af 8000 	nop.w
 8005690:	80000000 	.word	0x80000000
 8005694:	3fd41b2f 	.word	0x3fd41b2f
 8005698:	a0000000 	.word	0xa0000000
 800569c:	3fa015bf 	.word	0x3fa015bf
 80056a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80056a4:	3f50624d 	.word	0x3f50624d
 80056a8:	40340000 	.word	0x40340000
 80056ac:	40140000 	.word	0x40140000
 80056b0:	bff00000 	.word	0xbff00000
 80056b4:	3ff00000 	.word	0x3ff00000
 80056b8:	40100000 	.word	0x40100000
			 }
		 } else {
			 v_design = 0;
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	f04f 0400 	mov.w	r4, #0
 80056c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 a_design = 0;
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80056d4:	a353      	add	r3, pc, #332	; (adr r3, 8005824 <scaraInitScurve+0x3c4>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056de:	f7fb fa2b 	bl	8000b38 <__aeabi_dcmpgt>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a5 	beq.w	8005834 <scaraInitScurve+0x3d4>
 80056ea:	a34e      	add	r3, pc, #312	; (adr r3, 8005824 <scaraInitScurve+0x3c4>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80056f4:	f7fb fa20 	bl	8000b38 <__aeabi_dcmpgt>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 809a 	beq.w	8005834 <scaraInitScurve+0x3d4>
		 no_phases = 5;
 8005700:	2305      	movs	r3, #5
 8005702:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = v_design/a_design;
 8005706:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800570a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800570e:	f7fb f8ad 	bl	800086c <__aeabi_ddiv>
 8005712:	4603      	mov	r3, r0
 8005714:	460c      	mov	r4, r1
 8005716:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 tc = total_s/v_design - 2*tm;
 800571a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800571e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005722:	f7fb f8a3 	bl	800086c <__aeabi_ddiv>
 8005726:	4603      	mov	r3, r0
 8005728:	460c      	mov	r4, r1
 800572a:	4625      	mov	r5, r4
 800572c:	461c      	mov	r4, r3
 800572e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	f7fa fdb9 	bl	80002ac <__adddf3>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fa fdb1 	bl	80002a8 <__aeabi_dsub>
 8005746:	4603      	mov	r3, r0
 8005748:	460c      	mov	r4, r1
 800574a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800575a:	f7fb f9cf 	bl	8000afc <__aeabi_dcmplt>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d022      	beq.n	80057aa <scaraInitScurve+0x34a>
			 tc = 0;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
			 no_phases = 4;
 8005770:	2304      	movs	r3, #4
 8005772:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			 tm = sqrt(total_s/(2*a_design));
 8005776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	f7fa fd95 	bl	80002ac <__adddf3>
 8005782:	4603      	mov	r3, r0
 8005784:	460c      	mov	r4, r1
 8005786:	461a      	mov	r2, r3
 8005788:	4623      	mov	r3, r4
 800578a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578e:	f7fb f86d 	bl	800086c <__aeabi_ddiv>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	ec44 3b17 	vmov	d7, r3, r4
 800579a:	eeb0 0a47 	vmov.f32	s0, s14
 800579e:	eef0 0a67 	vmov.f32	s1, s15
 80057a2:	f010 ff9b 	bl	80166dc <sqrt>
 80057a6:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
		 }
		 if (tm < 0.001) {
 80057aa:	a320      	add	r3, pc, #128	; (adr r3, 800582c <scaraInitScurve+0x3cc>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80057b4:	f7fb f9a2 	bl	8000afc <__aeabi_dcmplt>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <scaraInitScurve+0x36c>
			 j_max = 0;
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	f04f 0400 	mov.w	r4, #0
 80057c6:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 80057ca:	e009      	b.n	80057e0 <scaraInitScurve+0x380>
		 } else {
			 j_max = a_design/tm;
 80057cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80057d0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057d4:	f7fb f84a 	bl	800086c <__aeabi_ddiv>
 80057d8:	4603      	mov	r3, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 }
		 v_lim = a_design*tm;
 80057e0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80057e4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057e8:	f7fa ff16 	bl	8000618 <__aeabi_dmul>
 80057ec:	4603      	mov	r3, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tf    = 4*tm + tc;
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <scaraInitScurve+0x3c0>)
 80057fa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80057fe:	f7fa ff0b 	bl	8000618 <__aeabi_dmul>
 8005802:	4603      	mov	r3, r0
 8005804:	460c      	mov	r4, r1
 8005806:	461a      	mov	r2, r3
 8005808:	4623      	mov	r3, r4
 800580a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800580e:	f7fa fd4d 	bl	80002ac <__adddf3>
 8005812:	4603      	mov	r3, r0
 8005814:	460c      	mov	r4, r1
 8005816:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 800581a:	e02b      	b.n	8005874 <scaraInitScurve+0x414>
 800581c:	f3af 8000 	nop.w
 8005820:	40100000 	.word	0x40100000
 8005824:	9abcaf48 	.word	0x9abcaf48
 8005828:	3e7ad7f2 	.word	0x3e7ad7f2
 800582c:	d2f1a9fc 	.word	0xd2f1a9fc
 8005830:	3f50624d 	.word	0x3f50624d
	 } else {
		 j_max = 0;
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	f04f 0400 	mov.w	r4, #0
 800583c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 tc = 0;
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 no_phases = 4;
 800584c:	2304      	movs	r3, #4
 800584e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = tf / 4;
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	4ba0      	ldr	r3, [pc, #640]	; (8005ad8 <scaraInitScurve+0x678>)
 8005858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800585c:	f7fb f806 	bl	800086c <__aeabi_ddiv>
 8005860:	4603      	mov	r3, r0
 8005862:	460c      	mov	r4, r1
 8005864:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 v_lim = 0;
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8005874:	a396      	add	r3, pc, #600	; (adr r3, 8005ad0 <scaraInitScurve+0x670>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800587e:	f7fa fff5 	bl	800086c <__aeabi_ddiv>
 8005882:	4603      	mov	r3, r0
 8005884:	460c      	mov	r4, r1
 8005886:	ec44 3b17 	vmov	d7, r3, r4
 800588a:	eeb0 0a47 	vmov.f32	s0, s14
 800588e:	eef0 0a67 	vmov.f32	s1, s15
 8005892:	f010 fdd5 	bl	8016440 <ceil>
 8005896:	ec54 3b10 	vmov	r3, r4, d0
 800589a:	4618      	mov	r0, r3
 800589c:	4621      	mov	r1, r4
 800589e:	f7fb f993 	bl	8000bc8 <__aeabi_d2uiz>
 80058a2:	4603      	mov	r3, r0
 80058a4:	657b      	str	r3, [r7, #84]	; 0x54
	 v_1 = 0.5*j_max*tm*tm;
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	4b8c      	ldr	r3, [pc, #560]	; (8005adc <scaraInitScurve+0x67c>)
 80058ac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058b0:	f7fa feb2 	bl	8000618 <__aeabi_dmul>
 80058b4:	4603      	mov	r3, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4618      	mov	r0, r3
 80058ba:	4621      	mov	r1, r4
 80058bc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80058c0:	f7fa feaa 	bl	8000618 <__aeabi_dmul>
 80058c4:	4603      	mov	r3, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	461a      	mov	r2, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80058d0:	f7fa fea2 	bl	8000618 <__aeabi_dmul>
 80058d4:	4603      	mov	r3, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_1 = j_max*tm*tm*tm/6;
 80058dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80058e0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058e4:	f7fa fe98 	bl	8000618 <__aeabi_dmul>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4618      	mov	r0, r3
 80058ee:	4621      	mov	r1, r4
 80058f0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80058f4:	f7fa fe90 	bl	8000618 <__aeabi_dmul>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	4618      	mov	r0, r3
 80058fe:	4621      	mov	r1, r4
 8005900:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005904:	f7fa fe88 	bl	8000618 <__aeabi_dmul>
 8005908:	4603      	mov	r3, r0
 800590a:	460c      	mov	r4, r1
 800590c:	4618      	mov	r0, r3
 800590e:	4621      	mov	r1, r4
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	4b72      	ldr	r3, [pc, #456]	; (8005ae0 <scaraInitScurve+0x680>)
 8005916:	f7fa ffa9 	bl	800086c <__aeabi_ddiv>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_2 = j_max*tm*tm;
 8005922:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800592a:	f7fa fe75 	bl	8000618 <__aeabi_dmul>
 800592e:	4603      	mov	r3, r0
 8005930:	460c      	mov	r4, r1
 8005932:	461a      	mov	r2, r3
 8005934:	4623      	mov	r3, r4
 8005936:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800593a:	f7fa fe6d 	bl	8000618 <__aeabi_dmul>
 800593e:	4603      	mov	r3, r0
 8005940:	460c      	mov	r4, r1
 8005942:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_2 = v_2*tm;
 8005946:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800594a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800594e:	f7fa fe63 	bl	8000618 <__aeabi_dmul>
 8005952:	4603      	mov	r3, r0
 8005954:	460c      	mov	r4, r1
 8005956:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_3 = v_2;
 800595a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800595e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_3 = s_2 + v_2*tc;
 8005962:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800596a:	f7fa fe55 	bl	8000618 <__aeabi_dmul>
 800596e:	4603      	mov	r3, r0
 8005970:	460c      	mov	r4, r1
 8005972:	461a      	mov	r2, r3
 8005974:	4623      	mov	r3, r4
 8005976:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800597a:	f7fa fc97 	bl	80002ac <__adddf3>
 800597e:	4603      	mov	r3, r0
 8005980:	460c      	mov	r4, r1
 8005982:	e9c7 3408 	strd	r3, r4, [r7, #32]
	 v_4 = v_1;
 8005986:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800598a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	 s_4 = s_3 + s_2 - s_1;
 800598e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005992:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005996:	f7fa fc89 	bl	80002ac <__adddf3>
 800599a:	4603      	mov	r3, r0
 800599c:	460c      	mov	r4, r1
 800599e:	4618      	mov	r0, r3
 80059a0:	4621      	mov	r1, r4
 80059a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a6:	f7fa fc7f 	bl	80002a8 <__aeabi_dsub>
 80059aa:	4603      	mov	r3, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	e9c7 3404 	strd	r3, r4, [r7, #16]

	 scurve->Tc = tc;
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80059b8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80059c2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80059cc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80059d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80059e0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80059ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80059f4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80059fe:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005a08:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005a12:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005a1c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8005a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a2e:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a36:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8005a3a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a3e:	f7fb f89b 	bl	8000b78 <__aeabi_d2iz>
 8005a42:	4603      	mov	r3, r0
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	f04f 0400 	mov.w	r4, #0
 8005a54:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	f04f 0400 	mov.w	r4, #0
 8005a62:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005a7a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005a84:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005a8e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005a98:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005aa2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005aac:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005ab6:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005ac0:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	37d8      	adds	r7, #216	; 0xd8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40000000 	.word	0x40000000
 8005ad4:	3f847ae1 	.word	0x3f847ae1
 8005ad8:	40100000 	.word	0x40100000
 8005adc:	3fe00000 	.word	0x3fe00000
 8005ae0:	40180000 	.word	0x40180000

08005ae4 <scaraFlowDuty>:

SCARA_StatusTypeDef	scaraFlowDuty		(double time) {
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b0cc      	sub	sp, #304	; 0x130
 8005ae8:	af18      	add	r7, sp, #96	; 0x60
 8005aea:	ed87 0b00 	vstr	d0, [r7]
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8005aee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005af2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8005af6:	4ba1      	ldr	r3, [pc, #644]	; (8005d7c <scaraFlowDuty+0x298>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 80e2 	bne.w	8005cc4 <scaraFlowDuty+0x1e0>
		double s, angle, x, y, z;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b02:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11f      	bne.n	8005b4a <scaraFlowDuty+0x66>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8005b0a:	ed97 0b00 	vldr	d0, [r7]
 8005b0e:	489c      	ldr	r0, [pc, #624]	; (8005d80 <scaraFlowDuty+0x29c>)
 8005b10:	f000 fb7e 	bl	8006210 <scaraFlowLSPB>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8005b1a:	ed97 0b00 	vldr	d0, [r7]
 8005b1e:	4899      	ldr	r0, [pc, #612]	; (8005d84 <scaraFlowDuty+0x2a0>)
 8005b20:	f000 fb76 	bl	8006210 <scaraFlowLSPB>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8005b2a:	4b94      	ldr	r3, [pc, #592]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b2c:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8005b30:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8005b34:	4b91      	ldr	r3, [pc, #580]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b36:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005b3a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8005b3e:	4b8f      	ldr	r3, [pc, #572]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b40:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8005b44:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005b48:	e026      	b.n	8005b98 <scaraFlowDuty+0xb4>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8005b4a:	4b8c      	ldr	r3, [pc, #560]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d11f      	bne.n	8005b94 <scaraFlowDuty+0xb0>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8005b54:	ed97 0b00 	vldr	d0, [r7]
 8005b58:	488b      	ldr	r0, [pc, #556]	; (8005d88 <scaraFlowDuty+0x2a4>)
 8005b5a:	f000 fd05 	bl	8006568 <scaraFLowScurve>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8005b64:	ed97 0b00 	vldr	d0, [r7]
 8005b68:	4888      	ldr	r0, [pc, #544]	; (8005d8c <scaraFlowDuty+0x2a8>)
 8005b6a:	f000 fcfd 	bl	8006568 <scaraFLowScurve>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8005b74:	4b81      	ldr	r3, [pc, #516]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b76:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8005b7a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8005b7e:	4b7f      	ldr	r3, [pc, #508]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b80:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8005b84:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8005b88:	4b7c      	ldr	r3, [pc, #496]	; (8005d7c <scaraFlowDuty+0x298>)
 8005b8a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8005b8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005b92:	e001      	b.n	8005b98 <scaraFlowDuty+0xb4>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005b94:	2305      	movs	r3, #5
 8005b96:	e218      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}

		if ( SCARA_STATUS_OK != status1) {
 8005b98:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <scaraFlowDuty+0xc2>
			return status1;
 8005ba0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005ba4:	e211      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005ba6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <scaraFlowDuty+0xd0>
			return status2;
 8005bae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005bb2:	e20a      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8005bb4:	4b71      	ldr	r3, [pc, #452]	; (8005d7c <scaraFlowDuty+0x298>)
 8005bb6:	7a1b      	ldrb	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d117      	bne.n	8005bec <scaraFlowDuty+0x108>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8005bbc:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005bc0:	4873      	ldr	r0, [pc, #460]	; (8005d90 <scaraFlowDuty+0x2ac>)
 8005bc2:	f000 fa15 	bl	8005ff0 <scaraFlowLine>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.line.x_current;
 8005bcc:	4b6b      	ldr	r3, [pc, #428]	; (8005d7c <scaraFlowDuty+0x298>)
 8005bce:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005bd2:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.line.y_current;
 8005bd6:	4b69      	ldr	r3, [pc, #420]	; (8005d7c <scaraFlowDuty+0x298>)
 8005bd8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005bdc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.line.z_current;
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <scaraFlowDuty+0x298>)
 8005be2:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005be6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005bea:	e01d      	b.n	8005c28 <scaraFlowDuty+0x144>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8005bec:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <scaraFlowDuty+0x298>)
 8005bee:	7a1b      	ldrb	r3, [r3, #8]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d117      	bne.n	8005c24 <scaraFlowDuty+0x140>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8005bf4:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005bf8:	4866      	ldr	r0, [pc, #408]	; (8005d94 <scaraFlowDuty+0x2b0>)
 8005bfa:	f000 fa81 	bl	8006100 <scaraFlowCircle>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.circle.x_current;
 8005c04:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <scaraFlowDuty+0x298>)
 8005c06:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8005c0a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.circle.y_current;
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <scaraFlowDuty+0x298>)
 8005c10:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005c14:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.circle.z_current;
 8005c18:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <scaraFlowDuty+0x298>)
 8005c1a:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8005c1e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005c22:	e001      	b.n	8005c28 <scaraFlowDuty+0x144>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e1d0      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}

		positionCompute.x 		= x;
 8005c28:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005c2c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.y		= y;
 8005c30:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005c34:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		positionCompute.z 		= z;
 8005c38:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005c3c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8005c40:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <scaraFlowDuty+0x298>)
 8005c42:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8005c46:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fa fc7a 	bl	8000544 <__aeabi_i2d>
 8005c50:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8005c54:	f7fa fce0 	bl	8000618 <__aeabi_dmul>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fa fb24 	bl	80002ac <__adddf3>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		positionCompute.q		= s;
 8005c6c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005c70:	e9c7 3402 	strd	r3, r4, [r7, #8]
		positionCompute.total_time = myDUTY.time_total;
 8005c74:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <scaraFlowDuty+0x298>)
 8005c76:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c7e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005c82:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c86:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if ( FALSE == kinematicInverse(&positionCompute, positionCurrent)) {
 8005c8a:	4c43      	ldr	r4, [pc, #268]	; (8005d98 <scaraFlowDuty+0x2b4>)
 8005c8c:	f107 0508 	add.w	r5, r7, #8
 8005c90:	4668      	mov	r0, sp
 8005c92:	f104 0308 	add.w	r3, r4, #8
 8005c96:	2260      	movs	r2, #96	; 0x60
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f00c fa21 	bl	80120e0 <memcpy>
 8005c9e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f7fd f8c4 	bl	8002e30 <kinematicInverse>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <scaraFlowDuty+0x1ce>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005cae:	2307      	movs	r3, #7
 8005cb0:	e18b      	b.n	8005fca <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <scaraFlowDuty+0x2b8>)
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	2268      	movs	r2, #104	; 0x68
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f00c fa0f 	bl	80120e0 <memcpy>
 8005cc2:	e181      	b.n	8005fc8 <scaraFlowDuty+0x4e4>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <scaraFlowDuty+0x298>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f040 817b 	bne.w	8005fc4 <scaraFlowDuty+0x4e0>
		double s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <scaraFlowDuty+0x298>)
 8005cd0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d16b      	bne.n	8005db0 <scaraFlowDuty+0x2cc>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8005cd8:	ed97 0b00 	vldr	d0, [r7]
 8005cdc:	4830      	ldr	r0, [pc, #192]	; (8005da0 <scaraFlowDuty+0x2bc>)
 8005cde:	f000 fa97 	bl	8006210 <scaraFlowLSPB>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8005ce8:	ed97 0b00 	vldr	d0, [r7]
 8005cec:	482d      	ldr	r0, [pc, #180]	; (8005da4 <scaraFlowDuty+0x2c0>)
 8005cee:	f000 fa8f 	bl	8006210 <scaraFlowLSPB>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8005cf8:	ed97 0b00 	vldr	d0, [r7]
 8005cfc:	482a      	ldr	r0, [pc, #168]	; (8005da8 <scaraFlowDuty+0x2c4>)
 8005cfe:	f000 fa87 	bl	8006210 <scaraFlowLSPB>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8005d08:	ed97 0b00 	vldr	d0, [r7]
 8005d0c:	4827      	ldr	r0, [pc, #156]	; (8005dac <scaraFlowDuty+0x2c8>)
 8005d0e:	f000 fa7f 	bl	8006210 <scaraFlowLSPB>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d1a:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8005d1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d24:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8005d28:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d2e:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8005d32:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d38:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8005d3c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d42:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8005d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d4a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d50:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8005d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d58:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d5e:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8005d62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d66:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8005d6a:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <scaraFlowDuty+0x298>)
 8005d6c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8005d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d74:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005d78:	e072      	b.n	8005e60 <scaraFlowDuty+0x37c>
 8005d7a:	bf00      	nop
 8005d7c:	20005338 	.word	0x20005338
 8005d80:	20005450 	.word	0x20005450
 8005d84:	200055a8 	.word	0x200055a8
 8005d88:	200054d0 	.word	0x200054d0
 8005d8c:	20005628 	.word	0x20005628
 8005d90:	20005348 	.word	0x20005348
 8005d94:	200053b8 	.word	0x200053b8
 8005d98:	20005cf0 	.word	0x20005cf0
 8005d9c:	20005d58 	.word	0x20005d58
 8005da0:	20005708 	.word	0x20005708
 8005da4:	20005860 	.word	0x20005860
 8005da8:	200059b8 	.word	0x200059b8
 8005dac:	20005b10 	.word	0x20005b10

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8005db0:	4b88      	ldr	r3, [pc, #544]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005db2:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d150      	bne.n	8005e5c <scaraFlowDuty+0x378>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8005dba:	ed97 0b00 	vldr	d0, [r7]
 8005dbe:	4886      	ldr	r0, [pc, #536]	; (8005fd8 <scaraFlowDuty+0x4f4>)
 8005dc0:	f000 fbd2 	bl	8006568 <scaraFLowScurve>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8005dca:	ed97 0b00 	vldr	d0, [r7]
 8005dce:	4883      	ldr	r0, [pc, #524]	; (8005fdc <scaraFlowDuty+0x4f8>)
 8005dd0:	f000 fbca 	bl	8006568 <scaraFLowScurve>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8005dda:	ed97 0b00 	vldr	d0, [r7]
 8005dde:	4880      	ldr	r0, [pc, #512]	; (8005fe0 <scaraFlowDuty+0x4fc>)
 8005de0:	f000 fbc2 	bl	8006568 <scaraFLowScurve>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8005dea:	ed97 0b00 	vldr	d0, [r7]
 8005dee:	487d      	ldr	r0, [pc, #500]	; (8005fe4 <scaraFlowDuty+0x500>)
 8005df0:	f000 fbba 	bl	8006568 <scaraFLowScurve>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8005dfa:	4b76      	ldr	r3, [pc, #472]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005dfc:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8005e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8005e04:	4b73      	ldr	r3, [pc, #460]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e06:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8005e0a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8005e0e:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e10:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8005e14:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8005e18:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e1a:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8005e1e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8005e22:	4b6c      	ldr	r3, [pc, #432]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e24:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005e28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e2c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8005e30:	4b68      	ldr	r3, [pc, #416]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e32:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8005e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e3a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8005e3e:	4b65      	ldr	r3, [pc, #404]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e40:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8005e44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e48:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8005e4c:	4b61      	ldr	r3, [pc, #388]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e4e:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8005e52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e56:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005e5a:	e001      	b.n	8005e60 <scaraFlowDuty+0x37c>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005e5c:	2305      	movs	r3, #5
 8005e5e:	e0b4      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8005e60:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <scaraFlowDuty+0x38a>
			return status1;
 8005e68:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005e6c:	e0ad      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005e6e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <scaraFlowDuty+0x398>
			return status2;
 8005e76:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005e7a:	e0a6      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status3) {
 8005e7c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <scaraFlowDuty+0x3a6>
			return status3;
 8005e84:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005e88:	e09f      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8005e8a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <scaraFlowDuty+0x3b4>
			return status4;
 8005e92:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005e96:	e098      	b.n	8005fca <scaraFlowDuty+0x4e6>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8005e98:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005e9a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8005e9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ea2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fb4c 	bl	8000544 <__aeabi_i2d>
 8005eac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005eb0:	f7fa fbb2 	bl	8000618 <__aeabi_dmul>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7fa f9f6 	bl	80002ac <__adddf3>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8005ec8:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005eca:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005ece:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ed2:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fa fb34 	bl	8000544 <__aeabi_i2d>
 8005edc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005ee0:	f7fa fb9a 	bl	8000618 <__aeabi_dmul>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f9de 	bl	80002ac <__adddf3>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8005ef8:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005efa:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005efe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f02:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fb1c 	bl	8000544 <__aeabi_i2d>
 8005f0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005f10:	f7fa fb82 	bl	8000618 <__aeabi_dmul>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4620      	mov	r0, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7fa f9c6 	bl	80002ac <__adddf3>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8005f28:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005f2a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005f2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f32:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa fb04 	bl	8000544 <__aeabi_i2d>
 8005f3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005f40:	f7fa fb6a 	bl	8000618 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	f7fa f9ae 	bl	80002ac <__adddf3>
 8005f50:	4603      	mov	r3, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		positionCompute.total_time = myDUTY.time_total;
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <scaraFlowDuty+0x4f0>)
 8005f5a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005f5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f62:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005f66:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005f6a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8005f6e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f72:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8005f76:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8005f7a:	ed97 4b1a 	vldr	d4, [r7, #104]	; 0x68
 8005f7e:	eeb0 3a44 	vmov.f32	s6, s8
 8005f82:	eef0 3a64 	vmov.f32	s7, s9
 8005f86:	eeb0 2a45 	vmov.f32	s4, s10
 8005f8a:	eef0 2a65 	vmov.f32	s5, s11
 8005f8e:	eeb0 1a46 	vmov.f32	s2, s12
 8005f92:	eef0 1a66 	vmov.f32	s3, s13
 8005f96:	eeb0 0a47 	vmov.f32	s0, s14
 8005f9a:	eef0 0a67 	vmov.f32	s1, s15
 8005f9e:	f001 f9c7 	bl	8007330 <scaraCheckWorkSpace4>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <scaraFlowDuty+0x4c8>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005fa8:	2307      	movs	r3, #7
 8005faa:	e00e      	b.n	8005fca <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8005fac:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <scaraFlowDuty+0x504>)
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	2268      	movs	r2, #104	; 0x68
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f00c f892 	bl	80120e0 <memcpy>
		}
		kinematicForward(&positionNext);
 8005fbc:	480a      	ldr	r0, [pc, #40]	; (8005fe8 <scaraFlowDuty+0x504>)
 8005fbe:	f7fc fdff 	bl	8002bc0 <kinematicForward>
 8005fc2:	e001      	b.n	8005fc8 <scaraFlowDuty+0x4e4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e000      	b.n	8005fca <scaraFlowDuty+0x4e6>
	}

	return SCARA_STATUS_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	37d0      	adds	r7, #208	; 0xd0
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20005338 	.word	0x20005338
 8005fd8:	20005788 	.word	0x20005788
 8005fdc:	200058e0 	.word	0x200058e0
 8005fe0:	20005a38 	.word	0x20005a38
 8005fe4:	20005b90 	.word	0x20005b90
 8005fe8:	20005d58 	.word	0x20005d58
 8005fec:	00000000 	.word	0x00000000

08005ff0 <scaraFlowLine>:

SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006002:	a33d      	add	r3, pc, #244	; (adr r3, 80060f8 <scaraFlowLine+0x108>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa fd96 	bl	8000b38 <__aeabi_dcmpgt>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d05a      	beq.n	80060c8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800601e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006022:	f7fa faf9 	bl	8000618 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006034:	f7fa fc1a 	bl	800086c <__aeabi_ddiv>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa f934 	bl	80002ac <__adddf3>
 8006044:	4603      	mov	r3, r0
 8006046:	460c      	mov	r4, r1
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800605a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605e:	f7fa fadb 	bl	8000618 <__aeabi_dmul>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006070:	f7fa fbfc 	bl	800086c <__aeabi_ddiv>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4620      	mov	r0, r4
 800607a:	4629      	mov	r1, r5
 800607c:	f7fa f916 	bl	80002ac <__adddf3>
 8006080:	4603      	mov	r3, r0
 8006082:	460c      	mov	r4, r1
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609a:	f7fa fabd 	bl	8000618 <__aeabi_dmul>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80060ac:	f7fa fbde 	bl	800086c <__aeabi_ddiv>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f8f8 	bl	80002ac <__adddf3>
 80060bc:	4603      	mov	r3, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80060c6:	e011      	b.n	80060ec <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bdb0      	pop	{r4, r5, r7, pc}
 80060f6:	bf00      	nop
 80060f8:	47ae147b 	.word	0x47ae147b
 80060fc:	3f847ae1 	.word	0x3f847ae1

08006100 <scaraFlowCircle>:

SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8006100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006104:	b086      	sub	sp, #24
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006114:	461a      	mov	r2, r3
 8006116:	4623      	mov	r3, r4
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	f7fa fba6 	bl	800086c <__aeabi_ddiv>
 8006120:	4603      	mov	r3, r0
 8006122:	460c      	mov	r4, r1
 8006124:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f993 3000 	ldrsb.w	r3, [r3]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fa f9ff 	bl	8000544 <__aeabi_i2d>
 8006146:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800614a:	f7fa fa65 	bl	8000618 <__aeabi_dmul>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4650      	mov	r0, sl
 8006154:	4659      	mov	r1, fp
 8006156:	f7fa f8a9 	bl	80002ac <__adddf3>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	ec43 2b17 	vmov	d7, r2, r3
 8006162:	eeb0 0a47 	vmov.f32	s0, s14
 8006166:	eef0 0a67 	vmov.f32	s1, s15
 800616a:	f010 f9e9 	bl	8016540 <cos>
 800616e:	ec53 2b10 	vmov	r2, r3, d0
 8006172:	4640      	mov	r0, r8
 8006174:	4649      	mov	r1, r9
 8006176:	f7fa fa4f 	bl	8000618 <__aeabi_dmul>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa f893 	bl	80002ac <__adddf3>
 8006186:	4603      	mov	r3, r0
 8006188:	460c      	mov	r4, r1
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f993 3000 	ldrsb.w	r3, [r3]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fa f9cb 	bl	8000544 <__aeabi_i2d>
 80061ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061b2:	f7fa fa31 	bl	8000618 <__aeabi_dmul>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	f7fa f875 	bl	80002ac <__adddf3>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	ec43 2b17 	vmov	d7, r2, r3
 80061ca:	eeb0 0a47 	vmov.f32	s0, s14
 80061ce:	eef0 0a67 	vmov.f32	s1, s15
 80061d2:	f010 f9f9 	bl	80165c8 <sin>
 80061d6:	ec53 2b10 	vmov	r2, r3, d0
 80061da:	4640      	mov	r0, r8
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa fa1b 	bl	8000618 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa f85f 	bl	80002ac <__adddf3>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006210 <scaraFlowLSPB>:

SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8006210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006214:	b08b      	sub	sp, #44	; 0x2c
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006224:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800622e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8006238:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006248:	f7fa fc6c 	bl	8000b24 <__aeabi_dcmpge>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d05b      	beq.n	800630a <scaraFlowLSPB+0xfa>
 8006252:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800625a:	f7fa fc59 	bl	8000b10 <__aeabi_dcmple>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d052      	beq.n	800630a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800627c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006280:	f7fa f9ca 	bl	8000618 <__aeabi_dmul>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7fa f80e 	bl	80002ac <__adddf3>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80062a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062aa:	f7fa f9b5 	bl	8000618 <__aeabi_dmul>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 fff9 	bl	80002ac <__adddf3>
 80062ba:	4603      	mov	r3, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	4625      	mov	r5, r4
 80062c0:	461c      	mov	r4, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	4ba5      	ldr	r3, [pc, #660]	; (8006564 <scaraFlowLSPB+0x354>)
 80062ce:	f7fa f9a3 	bl	8000618 <__aeabi_dmul>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062de:	f7fa f99b 	bl	8000618 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ee:	f7fa f993 	bl	8000618 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7f9 ffd7 	bl	80002ac <__adddf3>
 80062fe:	4603      	mov	r3, r0
 8006300:	460c      	mov	r4, r1
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8006308:	e125      	b.n	8006556 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006312:	f7fa fbfd 	bl	8000b10 <__aeabi_dcmple>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05e      	beq.n	80063da <scaraFlowLSPB+0x1ca>
 800631c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006320:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006324:	f7f9 ffc0 	bl	80002a8 <__aeabi_dsub>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006330:	f7fa fbee 	bl	8000b10 <__aeabi_dcmple>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d04f      	beq.n	80063da <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006360:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006364:	f7fa f958 	bl	8000618 <__aeabi_dmul>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4610      	mov	r0, r2
 800636e:	4619      	mov	r1, r3
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006378:	f7fa fa78 	bl	800086c <__aeabi_ddiv>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4620      	mov	r0, r4
 8006382:	4629      	mov	r1, r5
 8006384:	f7f9 ff92 	bl	80002ac <__adddf3>
 8006388:	4603      	mov	r3, r0
 800638a:	460c      	mov	r4, r1
 800638c:	4698      	mov	r8, r3
 800638e:	46a1      	mov	r9, r4
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800639e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063a2:	f7fa fa63 	bl	800086c <__aeabi_ddiv>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ae:	f7f9 ff7b 	bl	80002a8 <__aeabi_dsub>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7fa f92d 	bl	8000618 <__aeabi_dmul>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	461a      	mov	r2, r3
 80063c4:	4623      	mov	r3, r4
 80063c6:	4640      	mov	r0, r8
 80063c8:	4649      	mov	r1, r9
 80063ca:	f7f9 ff6f 	bl	80002ac <__adddf3>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80063d8:	e0bd      	b.n	8006556 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 80063da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80063e2:	f7f9 ff61 	bl	80002a8 <__aeabi_dsub>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ee:	f7fa fb99 	bl	8000b24 <__aeabi_dcmpge>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 809a 	beq.w	800652e <scaraFlowLSPB+0x31e>
 80063fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006402:	f7fa fb85 	bl	8000b10 <__aeabi_dcmple>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8090 	beq.w	800652e <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006414:	4614      	mov	r4, r2
 8006416:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 800642c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006430:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006434:	f7f9 ff38 	bl	80002a8 <__aeabi_dsub>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4640      	mov	r0, r8
 800643e:	4649      	mov	r1, r9
 8006440:	f7fa f8ea 	bl	8000618 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	f7f9 ff2e 	bl	80002ac <__adddf3>
 8006450:	4603      	mov	r3, r0
 8006452:	460c      	mov	r4, r1
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8006466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800646e:	f7f9 ff1b 	bl	80002a8 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4640      	mov	r0, r8
 8006478:	4649      	mov	r1, r9
 800647a:	f7fa f8cd 	bl	8000618 <__aeabi_dmul>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7f9 ff0f 	bl	80002a8 <__aeabi_dsub>
 800648a:	4603      	mov	r3, r0
 800648c:	460c      	mov	r4, r1
 800648e:	461d      	mov	r5, r3
 8006490:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800649e:	461a      	mov	r2, r3
 80064a0:	4623      	mov	r3, r4
 80064a2:	f7f9 ff01 	bl	80002a8 <__aeabi_dsub>
 80064a6:	4603      	mov	r3, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4698      	mov	r8, r3
 80064ac:	46a1      	mov	r9, r4
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064b6:	f7f9 fef7 	bl	80002a8 <__aeabi_dsub>
 80064ba:	4603      	mov	r3, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	461a      	mov	r2, r3
 80064c0:	4623      	mov	r3, r4
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa f8a7 	bl	8000618 <__aeabi_dmul>
 80064ca:	4603      	mov	r3, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	4698      	mov	r8, r3
 80064d0:	46a1      	mov	r9, r4
 80064d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064da:	f7f9 fee5 	bl	80002a8 <__aeabi_dsub>
 80064de:	4603      	mov	r3, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	461a      	mov	r2, r3
 80064e4:	4623      	mov	r3, r4
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fa f895 	bl	8000618 <__aeabi_dmul>
 80064ee:	4603      	mov	r3, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	4698      	mov	r8, r3
 80064f4:	46a1      	mov	r9, r4
 80064f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	f7f9 fed5 	bl	80002ac <__adddf3>
 8006502:	4603      	mov	r3, r0
 8006504:	460c      	mov	r4, r1
 8006506:	461a      	mov	r2, r3
 8006508:	4623      	mov	r3, r4
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7fa f9ad 	bl	800086c <__aeabi_ddiv>
 8006512:	4603      	mov	r3, r0
 8006514:	460c      	mov	r4, r1
 8006516:	461a      	mov	r2, r3
 8006518:	4623      	mov	r3, r4
 800651a:	4628      	mov	r0, r5
 800651c:	4631      	mov	r1, r6
 800651e:	f7f9 fec3 	bl	80002a8 <__aeabi_dsub>
 8006522:	4603      	mov	r3, r0
 8006524:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800652c:	e013      	b.n	8006556 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	f04f 0400 	mov.w	r4, #0
 8006538:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	f04f 0400 	mov.w	r4, #0
 8006546:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	372c      	adds	r7, #44	; 0x2c
 800655c:	46bd      	mov	sp, r7
 800655e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006562:	bf00      	nop
 8006564:	3fe00000 	.word	0x3fe00000

08006568 <scaraFLowScurve>:

SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8006568:	b5b0      	push	{r4, r5, r7, lr}
 800656a:	b092      	sub	sp, #72	; 0x48
 800656c:	af00      	add	r7, sp, #0
 800656e:	6278      	str	r0, [r7, #36]	; 0x24
 8006570:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800657a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006584:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800658e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006598:	2b04      	cmp	r3, #4
 800659a:	f040 8321 	bne.w	8006be0 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065aa:	f7fa fabb 	bl	8000b24 <__aeabi_dcmpge>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d059      	beq.n	8006668 <scaraFLowScurve+0x100>
 80065b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065bc:	f7fa fa9e 	bl	8000afc <__aeabi_dcmplt>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d050      	beq.n	8006668 <scaraFLowScurve+0x100>
			 t = time;
 80065c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80065ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80065ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80065d6:	f7fa f81f 	bl	8000618 <__aeabi_dmul>
 80065da:	4603      	mov	r3, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	4b93      	ldr	r3, [pc, #588]	; (8006838 <scaraFLowScurve+0x2d0>)
 80065ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80065ee:	f7fa f813 	bl	8000618 <__aeabi_dmul>
 80065f2:	4603      	mov	r3, r0
 80065f4:	460c      	mov	r4, r1
 80065f6:	4618      	mov	r0, r3
 80065f8:	4621      	mov	r1, r4
 80065fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065fe:	f7fa f80b 	bl	8000618 <__aeabi_dmul>
 8006602:	4603      	mov	r3, r0
 8006604:	460c      	mov	r4, r1
 8006606:	4618      	mov	r0, r3
 8006608:	4621      	mov	r1, r4
 800660a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800660e:	f7fa f803 	bl	8000618 <__aeabi_dmul>
 8006612:	4603      	mov	r3, r0
 8006614:	460c      	mov	r4, r1
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800661c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006620:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006624:	f7f9 fff8 	bl	8000618 <__aeabi_dmul>
 8006628:	4603      	mov	r3, r0
 800662a:	460c      	mov	r4, r1
 800662c:	4618      	mov	r0, r3
 800662e:	4621      	mov	r1, r4
 8006630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006634:	f7f9 fff0 	bl	8000618 <__aeabi_dmul>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	4618      	mov	r0, r3
 800663e:	4621      	mov	r1, r4
 8006640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006644:	f7f9 ffe8 	bl	8000618 <__aeabi_dmul>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	4618      	mov	r0, r3
 800664e:	4621      	mov	r1, r4
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	4b79      	ldr	r3, [pc, #484]	; (800683c <scaraFLowScurve+0x2d4>)
 8006656:	f7fa f909 	bl	800086c <__aeabi_ddiv>
 800665a:	4603      	mov	r3, r0
 800665c:	460c      	mov	r4, r1
 800665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006660:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006664:	f000 be56 	b.w	8007314 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800666c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006670:	f7fa fa4e 	bl	8000b10 <__aeabi_dcmple>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80e2 	beq.w	8006840 <scaraFLowScurve+0x2d8>
 800667c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	f7f9 fe12 	bl	80002ac <__adddf3>
 8006688:	4603      	mov	r3, r0
 800668a:	460c      	mov	r4, r1
 800668c:	461a      	mov	r2, r3
 800668e:	4623      	mov	r3, r4
 8006690:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006694:	f7fa fa32 	bl	8000afc <__aeabi_dcmplt>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80d0 	beq.w	8006840 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 80066a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066a8:	f7f9 fdfe 	bl	80002a8 <__aeabi_dsub>
 80066ac:	4603      	mov	r3, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80066b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80066bc:	f7f9 ffac 	bl	8000618 <__aeabi_dmul>
 80066c0:	4603      	mov	r3, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4625      	mov	r5, r4
 80066c6:	461c      	mov	r4, r3
 80066c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80066d0:	f7f9 ffa2 	bl	8000618 <__aeabi_dmul>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4620      	mov	r0, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	f7f9 fde4 	bl	80002a8 <__aeabi_dsub>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80066f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80066f8:	f7f9 ff8e 	bl	8000618 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006708:	f7f9 ff86 	bl	8000618 <__aeabi_dmul>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4620      	mov	r0, r4
 8006712:	4629      	mov	r1, r5
 8006714:	f7f9 fdca 	bl	80002ac <__adddf3>
 8006718:	4603      	mov	r3, r0
 800671a:	460c      	mov	r4, r1
 800671c:	4625      	mov	r5, r4
 800671e:	461c      	mov	r4, r3
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	4b44      	ldr	r3, [pc, #272]	; (8006838 <scaraFLowScurve+0x2d0>)
 8006726:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800672a:	f7f9 ff75 	bl	8000618 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800673a:	f7f9 ff6d 	bl	8000618 <__aeabi_dmul>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800674a:	f7f9 ff65 	bl	8000618 <__aeabi_dmul>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	f7f9 fda7 	bl	80002a8 <__aeabi_dsub>
 800675a:	4603      	mov	r3, r0
 800675c:	460c      	mov	r4, r1
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006774:	f7f9 ff50 	bl	8000618 <__aeabi_dmul>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 fd94 	bl	80002ac <__adddf3>
 8006784:	4603      	mov	r3, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4625      	mov	r5, r4
 800678a:	461c      	mov	r4, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b29      	ldr	r3, [pc, #164]	; (8006838 <scaraFLowScurve+0x2d0>)
 8006792:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006796:	f7f9 ff3f 	bl	8000618 <__aeabi_dmul>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067a6:	f7f9 ff37 	bl	8000618 <__aeabi_dmul>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067b6:	f7f9 ff2f 	bl	8000618 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067c6:	f7f9 ff27 	bl	8000618 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd6b 	bl	80002ac <__adddf3>
 80067d6:	4603      	mov	r3, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	4625      	mov	r5, r4
 80067dc:	461c      	mov	r4, r3
 80067de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067e6:	f7f9 ff17 	bl	8000618 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f6:	f7f9 ff0f 	bl	8000618 <__aeabi_dmul>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006806:	f7f9 ff07 	bl	8000618 <__aeabi_dmul>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <scaraFLowScurve+0x2d4>)
 8006818:	f7fa f828 	bl	800086c <__aeabi_ddiv>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4620      	mov	r0, r4
 8006822:	4629      	mov	r1, r5
 8006824:	f7f9 fd40 	bl	80002a8 <__aeabi_dsub>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006832:	f000 bd6f 	b.w	8007314 <scaraFLowScurve+0xdac>
 8006836:	bf00      	nop
 8006838:	3fe00000 	.word	0x3fe00000
 800683c:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8006840:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	f7f9 fd30 	bl	80002ac <__adddf3>
 800684c:	4603      	mov	r3, r0
 800684e:	460c      	mov	r4, r1
 8006850:	461a      	mov	r2, r3
 8006852:	4623      	mov	r3, r4
 8006854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006858:	f7fa f964 	bl	8000b24 <__aeabi_dcmpge>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a2 	beq.w	80069a8 <scaraFLowScurve+0x440>
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	4b4c      	ldr	r3, [pc, #304]	; (800699c <scaraFLowScurve+0x434>)
 800686a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800686e:	f7f9 fed3 	bl	8000618 <__aeabi_dmul>
 8006872:	4603      	mov	r3, r0
 8006874:	460c      	mov	r4, r1
 8006876:	461a      	mov	r2, r3
 8006878:	4623      	mov	r3, r4
 800687a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800687e:	f7fa f93d 	bl	8000afc <__aeabi_dcmplt>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 808f 	beq.w	80069a8 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800688a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	f7f9 fd0b 	bl	80002ac <__adddf3>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	461a      	mov	r2, r3
 800689c:	4623      	mov	r3, r4
 800689e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068a2:	f7f9 fd01 	bl	80002a8 <__aeabi_dsub>
 80068a6:	4603      	mov	r3, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80068ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80068c2:	f7f9 fea9 	bl	8000618 <__aeabi_dmul>
 80068c6:	4603      	mov	r3, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068cc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <scaraFLowScurve+0x438>)
 80068dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80068e0:	f7f9 fe9a 	bl	8000618 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4610      	mov	r0, r2
 80068ea:	4619      	mov	r1, r3
 80068ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068f0:	f7f9 fe92 	bl	8000618 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006900:	f7f9 fe8a 	bl	8000618 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4620      	mov	r0, r4
 800690a:	4629      	mov	r1, r5
 800690c:	f7f9 fccc 	bl	80002a8 <__aeabi_dsub>
 8006910:	4603      	mov	r3, r0
 8006912:	460c      	mov	r4, r1
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8006926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800692a:	f7f9 fe75 	bl	8000618 <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fcb9 	bl	80002ac <__adddf3>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	4625      	mov	r5, r4
 8006940:	461c      	mov	r4, r3
 8006942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006946:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800694a:	f7f9 fe65 	bl	8000618 <__aeabi_dmul>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800695a:	f7f9 fe5d 	bl	8000618 <__aeabi_dmul>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800696a:	f7f9 fe55 	bl	8000618 <__aeabi_dmul>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <scaraFLowScurve+0x43c>)
 800697c:	f7f9 ff76 	bl	800086c <__aeabi_ddiv>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f7f9 fc8e 	bl	80002a8 <__aeabi_dsub>
 800698c:	4603      	mov	r3, r0
 800698e:	460c      	mov	r4, r1
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006996:	f000 bcbd 	b.w	8007314 <scaraFLowScurve+0xdac>
 800699a:	bf00      	nop
 800699c:	40080000 	.word	0x40080000
 80069a0:	3fe00000 	.word	0x3fe00000
 80069a4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	4b88      	ldr	r3, [pc, #544]	; (8006bd0 <scaraFLowScurve+0x668>)
 80069ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80069b2:	f7f9 fe31 	bl	8000618 <__aeabi_dmul>
 80069b6:	4603      	mov	r3, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	461a      	mov	r2, r3
 80069bc:	4623      	mov	r3, r4
 80069be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069c2:	f7fa f8af 	bl	8000b24 <__aeabi_dcmpge>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80ec 	beq.w	8006ba6 <scaraFLowScurve+0x63e>
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	4b80      	ldr	r3, [pc, #512]	; (8006bd4 <scaraFLowScurve+0x66c>)
 80069d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80069d8:	f7f9 fe1e 	bl	8000618 <__aeabi_dmul>
 80069dc:	4603      	mov	r3, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	461a      	mov	r2, r3
 80069e2:	4623      	mov	r3, r4
 80069e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069e8:	f7fa f888 	bl	8000afc <__aeabi_dcmplt>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80d9 	beq.w	8006ba6 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	4b75      	ldr	r3, [pc, #468]	; (8006bd0 <scaraFLowScurve+0x668>)
 80069fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80069fe:	f7f9 fe0b 	bl	8000618 <__aeabi_dmul>
 8006a02:	4603      	mov	r3, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	461a      	mov	r2, r3
 8006a08:	4623      	mov	r3, r4
 8006a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a0e:	f7f9 fc4b 	bl	80002a8 <__aeabi_dsub>
 8006a12:	4603      	mov	r3, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a2e:	f7f9 fdf3 	bl	8000618 <__aeabi_dmul>
 8006a32:	4603      	mov	r3, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	4625      	mov	r5, r4
 8006a38:	461c      	mov	r4, r3
 8006a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a42:	f7f9 fde9 	bl	8000618 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fc2d 	bl	80002ac <__adddf3>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8006a62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a6a:	f7f9 fdd5 	bl	8000618 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4610      	mov	r0, r2
 8006a74:	4619      	mov	r1, r3
 8006a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a7a:	f7f9 fdcd 	bl	8000618 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fc0f 	bl	80002a8 <__aeabi_dsub>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	4625      	mov	r5, r4
 8006a90:	461c      	mov	r4, r3
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	4b50      	ldr	r3, [pc, #320]	; (8006bd8 <scaraFLowScurve+0x670>)
 8006a98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a9c:	f7f9 fdbc 	bl	8000618 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aac:	f7f9 fdb4 	bl	8000618 <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006abc:	f7f9 fdac 	bl	8000618 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fbf0 	bl	80002ac <__adddf3>
 8006acc:	4603      	mov	r3, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ae6:	f7f9 fd97 	bl	8000618 <__aeabi_dmul>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fbdb 	bl	80002ac <__adddf3>
 8006af6:	4603      	mov	r3, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	4625      	mov	r5, r4
 8006afc:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <scaraFLowScurve+0x670>)
 8006b04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b08:	f7f9 fd86 	bl	8000618 <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b18:	f7f9 fd7e 	bl	8000618 <__aeabi_dmul>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4610      	mov	r0, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b28:	f7f9 fd76 	bl	8000618 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4610      	mov	r0, r2
 8006b32:	4619      	mov	r1, r3
 8006b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b38:	f7f9 fd6e 	bl	8000618 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4620      	mov	r0, r4
 8006b42:	4629      	mov	r1, r5
 8006b44:	f7f9 fbb0 	bl	80002a8 <__aeabi_dsub>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4625      	mov	r5, r4
 8006b4e:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8006b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b58:	f7f9 fd5e 	bl	8000618 <__aeabi_dmul>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4610      	mov	r0, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b68:	f7f9 fd56 	bl	8000618 <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4610      	mov	r0, r2
 8006b72:	4619      	mov	r1, r3
 8006b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b78:	f7f9 fd4e 	bl	8000618 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4610      	mov	r0, r2
 8006b82:	4619      	mov	r1, r3
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <scaraFLowScurve+0x674>)
 8006b8a:	f7f9 fe6f 	bl	800086c <__aeabi_ddiv>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fb89 	bl	80002ac <__adddf3>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8006b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006ba4:	e3b6      	b.n	8007314 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	f04f 0400 	mov.w	r4, #0
 8006bb0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 0400 	mov.w	r4, #0
 8006bbe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006bce:	e3a1      	b.n	8007314 <scaraFLowScurve+0xdac>
 8006bd0:	40080000 	.word	0x40080000
 8006bd4:	40100000 	.word	0x40100000
 8006bd8:	3fe00000 	.word	0x3fe00000
 8006bdc:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	f040 8392 	bne.w	8007310 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bf8:	f7f9 ff94 	bl	8000b24 <__aeabi_dcmpge>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d058      	beq.n	8006cb4 <scaraFLowScurve+0x74c>
 8006c02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c0a:	f7f9 ff77 	bl	8000afc <__aeabi_dcmplt>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d04f      	beq.n	8006cb4 <scaraFLowScurve+0x74c>
			 t = time;
 8006c14:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006c18:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8006c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006c24:	f7f9 fcf8 	bl	8000618 <__aeabi_dmul>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <scaraFLowScurve+0x914>)
 8006c38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006c3c:	f7f9 fcec 	bl	8000618 <__aeabi_dmul>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4618      	mov	r0, r3
 8006c46:	4621      	mov	r1, r4
 8006c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c4c:	f7f9 fce4 	bl	8000618 <__aeabi_dmul>
 8006c50:	4603      	mov	r3, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	4618      	mov	r0, r3
 8006c56:	4621      	mov	r1, r4
 8006c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c5c:	f7f9 fcdc 	bl	8000618 <__aeabi_dmul>
 8006c60:	4603      	mov	r3, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c66:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8006c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006c72:	f7f9 fcd1 	bl	8000618 <__aeabi_dmul>
 8006c76:	4603      	mov	r3, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c82:	f7f9 fcc9 	bl	8000618 <__aeabi_dmul>
 8006c86:	4603      	mov	r3, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c92:	f7f9 fcc1 	bl	8000618 <__aeabi_dmul>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	4b77      	ldr	r3, [pc, #476]	; (8006e80 <scaraFLowScurve+0x918>)
 8006ca4:	f7f9 fde2 	bl	800086c <__aeabi_ddiv>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cae:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006cb2:	e32f      	b.n	8007314 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006cbc:	f7f9 ff28 	bl	8000b10 <__aeabi_dcmple>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80de 	beq.w	8006e84 <scaraFLowScurve+0x91c>
 8006cc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	f7f9 faec 	bl	80002ac <__adddf3>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cdc:	f7f9 ff0e 	bl	8000afc <__aeabi_dcmplt>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80ce 	beq.w	8006e84 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8006ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cf0:	f7f9 fada 	bl	80002a8 <__aeabi_dsub>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8006cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d04:	f7f9 fc88 	bl	8000618 <__aeabi_dmul>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4625      	mov	r5, r4
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d18:	f7f9 fc7e 	bl	8000618 <__aeabi_dmul>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7f9 fac0 	bl	80002a8 <__aeabi_dsub>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8006d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d40:	f7f9 fc6a 	bl	8000618 <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d50:	f7f9 fc62 	bl	8000618 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f7f9 faa6 	bl	80002ac <__adddf3>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4625      	mov	r5, r4
 8006d66:	461c      	mov	r4, r3
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <scaraFLowScurve+0x914>)
 8006d6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d72:	f7f9 fc51 	bl	8000618 <__aeabi_dmul>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d82:	f7f9 fc49 	bl	8000618 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d92:	f7f9 fc41 	bl	8000618 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fa83 	bl	80002a8 <__aeabi_dsub>
 8006da2:	4603      	mov	r3, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dbc:	f7f9 fc2c 	bl	8000618 <__aeabi_dmul>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fa70 	bl	80002ac <__adddf3>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	4625      	mov	r5, r4
 8006dd2:	461c      	mov	r4, r3
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	4b28      	ldr	r3, [pc, #160]	; (8006e7c <scaraFLowScurve+0x914>)
 8006dda:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006dde:	f7f9 fc1b 	bl	8000618 <__aeabi_dmul>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dee:	f7f9 fc13 	bl	8000618 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dfe:	f7f9 fc0b 	bl	8000618 <__aeabi_dmul>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e0e:	f7f9 fc03 	bl	8000618 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fa47 	bl	80002ac <__adddf3>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	4625      	mov	r5, r4
 8006e24:	461c      	mov	r4, r3
 8006e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006e2e:	f7f9 fbf3 	bl	8000618 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4610      	mov	r0, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e3e:	f7f9 fbeb 	bl	8000618 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e4e:	f7f9 fbe3 	bl	8000618 <__aeabi_dmul>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <scaraFLowScurve+0x918>)
 8006e60:	f7f9 fd04 	bl	800086c <__aeabi_ddiv>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fa1c 	bl	80002a8 <__aeabi_dsub>
 8006e70:	4603      	mov	r3, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006e7a:	e24b      	b.n	8007314 <scaraFLowScurve+0xdac>
 8006e7c:	3fe00000 	.word	0x3fe00000
 8006e80:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8006e84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	f7f9 fa0e 	bl	80002ac <__adddf3>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e98:	f7f9 fe44 	bl	8000b24 <__aeabi_dcmpge>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04b      	beq.n	8006f3a <scaraFLowScurve+0x9d2>
 8006ea2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	f7f9 f9ff 	bl	80002ac <__adddf3>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eba:	f7f9 f9f7 	bl	80002ac <__adddf3>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ec6:	f7f9 fe19 	bl	8000afc <__aeabi_dcmplt>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d034      	beq.n	8006f3a <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8006ed0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	f7f9 f9e8 	bl	80002ac <__adddf3>
 8006edc:	4603      	mov	r3, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ee8:	f7f9 f9de 	bl	80002a8 <__aeabi_dsub>
 8006eec:	4603      	mov	r3, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8006ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f04f 0400 	mov.w	r4, #0
 8006efe:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8006f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f1e:	f7f9 fb7b 	bl	8000618 <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 f9bf 	bl	80002ac <__adddf3>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f34:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006f38:	e1ec      	b.n	8007314 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8006f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	f7f9 f9b3 	bl	80002ac <__adddf3>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f52:	f7f9 f9ab 	bl	80002ac <__adddf3>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f5e:	f7f9 fde1 	bl	8000b24 <__aeabi_dcmpge>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80af 	beq.w	80070c8 <scaraFLowScurve+0xb60>
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	4b53      	ldr	r3, [pc, #332]	; (80070bc <scaraFLowScurve+0xb54>)
 8006f70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f74:	f7f9 fb50 	bl	8000618 <__aeabi_dmul>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f84:	f7f9 f992 	bl	80002ac <__adddf3>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f90:	f7f9 fdb4 	bl	8000afc <__aeabi_dcmplt>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8096 	beq.w	80070c8 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8006f9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	f7f9 f982 	bl	80002ac <__adddf3>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4618      	mov	r0, r3
 8006fae:	4621      	mov	r1, r4
 8006fb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fb4:	f7f9 f97a 	bl	80002ac <__adddf3>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006fc4:	f7f9 f970 	bl	80002a8 <__aeabi_dsub>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fe4:	f7f9 fb18 	bl	8000618 <__aeabi_dmul>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fee:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	4b30      	ldr	r3, [pc, #192]	; (80070c0 <scaraFLowScurve+0xb58>)
 8006ffe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007002:	f7f9 fb09 	bl	8000618 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007012:	f7f9 fb01 	bl	8000618 <__aeabi_dmul>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007022:	f7f9 faf9 	bl	8000618 <__aeabi_dmul>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	f7f9 f93b 	bl	80002a8 <__aeabi_dsub>
 8007032:	4603      	mov	r3, r0
 8007034:	460c      	mov	r4, r1
 8007036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007038:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8007048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800704c:	f7f9 fae4 	bl	8000618 <__aeabi_dmul>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 f928 	bl	80002ac <__adddf3>
 800705c:	4603      	mov	r3, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4625      	mov	r5, r4
 8007062:	461c      	mov	r4, r3
 8007064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007068:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800706c:	f7f9 fad4 	bl	8000618 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4610      	mov	r0, r2
 8007076:	4619      	mov	r1, r3
 8007078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800707c:	f7f9 facc 	bl	8000618 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4610      	mov	r0, r2
 8007086:	4619      	mov	r1, r3
 8007088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800708c:	f7f9 fac4 	bl	8000618 <__aeabi_dmul>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <scaraFLowScurve+0xb5c>)
 800709e:	f7f9 fbe5 	bl	800086c <__aeabi_ddiv>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 f8fd 	bl	80002a8 <__aeabi_dsub>
 80070ae:	4603      	mov	r3, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80070b8:	e12c      	b.n	8007314 <scaraFLowScurve+0xdac>
 80070ba:	bf00      	nop
 80070bc:	40080000 	.word	0x40080000
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	4b94      	ldr	r3, [pc, #592]	; (8007320 <scaraFLowScurve+0xdb8>)
 80070ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80070d2:	f7f9 faa1 	bl	8000618 <__aeabi_dmul>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070e2:	f7f9 f8e3 	bl	80002ac <__adddf3>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070ee:	f7f9 fd19 	bl	8000b24 <__aeabi_dcmpge>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80f6 	beq.w	80072e6 <scaraFLowScurve+0xd7e>
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	4b89      	ldr	r3, [pc, #548]	; (8007324 <scaraFLowScurve+0xdbc>)
 8007100:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007104:	f7f9 fa88 	bl	8000618 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007114:	f7f9 f8ca 	bl	80002ac <__adddf3>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007120:	f7f9 fcec 	bl	8000afc <__aeabi_dcmplt>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80dd 	beq.w	80072e6 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <scaraFLowScurve+0xdb8>)
 8007132:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007136:	f7f9 fa6f 	bl	8000618 <__aeabi_dmul>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007146:	f7f9 f8b1 	bl	80002ac <__adddf3>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007152:	f7f9 f8a9 	bl	80002a8 <__aeabi_dsub>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800715e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007162:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007166:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fa53 	bl	8000618 <__aeabi_dmul>
 8007172:	4603      	mov	r3, r0
 8007174:	460c      	mov	r4, r1
 8007176:	4625      	mov	r5, r4
 8007178:	461c      	mov	r4, r3
 800717a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800717e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007182:	f7f9 fa49 	bl	8000618 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 f88d 	bl	80002ac <__adddf3>
 8007192:	4603      	mov	r3, r0
 8007194:	460c      	mov	r4, r1
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80071a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80071aa:	f7f9 fa35 	bl	8000618 <__aeabi_dmul>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ba:	f7f9 fa2d 	bl	8000618 <__aeabi_dmul>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f86f 	bl	80002a8 <__aeabi_dsub>
 80071ca:	4603      	mov	r3, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	4625      	mov	r5, r4
 80071d0:	461c      	mov	r4, r3
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	4b54      	ldr	r3, [pc, #336]	; (8007328 <scaraFLowScurve+0xdc0>)
 80071d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80071dc:	f7f9 fa1c 	bl	8000618 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ec:	f7f9 fa14 	bl	8000618 <__aeabi_dmul>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071fc:	f7f9 fa0c 	bl	8000618 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f850 	bl	80002ac <__adddf3>
 800720c:	4603      	mov	r3, r0
 800720e:	460c      	mov	r4, r1
 8007210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007212:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8007222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007226:	f7f9 f9f7 	bl	8000618 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 f83b 	bl	80002ac <__adddf3>
 8007236:	4603      	mov	r3, r0
 8007238:	460c      	mov	r4, r1
 800723a:	4625      	mov	r5, r4
 800723c:	461c      	mov	r4, r3
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <scaraFLowScurve+0xdc0>)
 8007244:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007248:	f7f9 f9e6 	bl	8000618 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007258:	f7f9 f9de 	bl	8000618 <__aeabi_dmul>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4610      	mov	r0, r2
 8007262:	4619      	mov	r1, r3
 8007264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007268:	f7f9 f9d6 	bl	8000618 <__aeabi_dmul>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007278:	f7f9 f9ce 	bl	8000618 <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f9 f810 	bl	80002a8 <__aeabi_dsub>
 8007288:	4603      	mov	r3, r0
 800728a:	460c      	mov	r4, r1
 800728c:	4625      	mov	r5, r4
 800728e:	461c      	mov	r4, r3
 8007290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007298:	f7f9 f9be 	bl	8000618 <__aeabi_dmul>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072a8:	f7f9 f9b6 	bl	8000618 <__aeabi_dmul>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4610      	mov	r0, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b8:	f7f9 f9ae 	bl	8000618 <__aeabi_dmul>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	4b18      	ldr	r3, [pc, #96]	; (800732c <scaraFLowScurve+0xdc4>)
 80072ca:	f7f9 facf 	bl	800086c <__aeabi_ddiv>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f8 ffe9 	bl	80002ac <__adddf3>
 80072da:	4603      	mov	r3, r0
 80072dc:	460c      	mov	r4, r1
 80072de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80072e4:	e016      	b.n	8007314 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80072e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	f04f 0400 	mov.w	r4, #0
 80072f0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 80072f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	f04f 0400 	mov.w	r4, #0
 80072fe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800730e:	e001      	b.n	8007314 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3748      	adds	r7, #72	; 0x48
 800731a:	46bd      	mov	sp, r7
 800731c:	bdb0      	pop	{r4, r5, r7, pc}
 800731e:	bf00      	nop
 8007320:	40080000 	.word	0x40080000
 8007324:	40100000 	.word	0x40100000
 8007328:	3fe00000 	.word	0x3fe00000
 800732c:	40180000 	.word	0x40180000

08007330 <scaraCheckWorkSpace4>:

SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	ed87 0b06 	vstr	d0, [r7, #24]
 800733a:	ed87 1b04 	vstr	d1, [r7, #16]
 800733e:	ed87 2b02 	vstr	d2, [r7, #8]
 8007342:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8007346:	a335      	add	r3, pc, #212	; (adr r3, 800741c <scaraCheckWorkSpace4+0xec>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007350:	f7f9 fbd4 	bl	8000afc <__aeabi_dcmplt>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <scaraCheckWorkSpace4+0x3e>
 800735a:	a332      	add	r3, pc, #200	; (adr r3, 8007424 <scaraCheckWorkSpace4+0xf4>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007364:	f7f9 fbe8 	bl	8000b38 <__aeabi_dcmpgt>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800736e:	2307      	movs	r3, #7
 8007370:	e043      	b.n	80073fa <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8007372:	a32e      	add	r3, pc, #184	; (adr r3, 800742c <scaraCheckWorkSpace4+0xfc>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800737c:	f7f9 fbbe 	bl	8000afc <__aeabi_dcmplt>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <scaraCheckWorkSpace4+0x6a>
 8007386:	a32b      	add	r3, pc, #172	; (adr r3, 8007434 <scaraCheckWorkSpace4+0x104>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007390:	f7f9 fbd2 	bl	8000b38 <__aeabi_dcmpgt>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800739a:	2307      	movs	r3, #7
 800739c:	e02d      	b.n	80073fa <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073aa:	f7f9 fba7 	bl	8000afc <__aeabi_dcmplt>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <scaraCheckWorkSpace4+0x98>
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <scaraCheckWorkSpace4+0xe8>)
 80073ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073be:	f7f9 fbbb 	bl	8000b38 <__aeabi_dcmpgt>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80073c8:	2307      	movs	r3, #7
 80073ca:	e016      	b.n	80073fa <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 80073cc:	a30e      	add	r3, pc, #56	; (adr r3, 8007408 <scaraCheckWorkSpace4+0xd8>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d6:	f7f9 fb91 	bl	8000afc <__aeabi_dcmplt>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <scaraCheckWorkSpace4+0xc4>
 80073e0:	a30b      	add	r3, pc, #44	; (adr r3, 8007410 <scaraCheckWorkSpace4+0xe0>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ea:	f7f9 fba5 	bl	8000b38 <__aeabi_dcmpgt>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80073f4:	2307      	movs	r3, #7
 80073f6:	e000      	b.n	80073fa <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	f3af 8000 	nop.w
 8007408:	60000000 	.word	0x60000000
 800740c:	c00921fb 	.word	0xc00921fb
 8007410:	60000000 	.word	0x60000000
 8007414:	400921fb 	.word	0x400921fb
 8007418:	40590000 	.word	0x40590000
 800741c:	60000000 	.word	0x60000000
 8007420:	bff921fb 	.word	0xbff921fb
 8007424:	60000000 	.word	0x60000000
 8007428:	3ff921fb 	.word	0x3ff921fb
 800742c:	80000000 	.word	0x80000000
 8007430:	c002d97c 	.word	0xc002d97c
 8007434:	80000000 	.word	0x80000000
 8007438:	4002d97c 	.word	0x4002d97c
 800743c:	00000000 	.word	0x00000000

08007440 <scaraCheckWorkSpace1>:

SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	ed87 0b00 	vstr	d0, [r7]
 800744c:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d117      	bne.n	8007484 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8007454:	a33d      	add	r3, pc, #244	; (adr r3, 800754c <scaraCheckWorkSpace1+0x10c>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800745e:	f7f9 fb61 	bl	8000b24 <__aeabi_dcmpge>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <scaraCheckWorkSpace1+0x40>
 8007468:	a33a      	add	r3, pc, #232	; (adr r3, 8007554 <scaraCheckWorkSpace1+0x114>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007472:	f7f9 fb4d 	bl	8000b10 <__aeabi_dcmple>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e054      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007480:	2307      	movs	r3, #7
 8007482:	e052      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d117      	bne.n	80074ba <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800748a:	a334      	add	r3, pc, #208	; (adr r3, 800755c <scaraCheckWorkSpace1+0x11c>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007494:	f7f9 fb46 	bl	8000b24 <__aeabi_dcmpge>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <scaraCheckWorkSpace1+0x76>
 800749e:	a331      	add	r3, pc, #196	; (adr r3, 8007564 <scaraCheckWorkSpace1+0x124>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a8:	f7f9 fb32 	bl	8000b10 <__aeabi_dcmple>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e039      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80074b6:	2307      	movs	r3, #7
 80074b8:	e037      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d118      	bne.n	80074f2 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074cc:	f7f9 fb2a 	bl	8000b24 <__aeabi_dcmpge>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <scaraCheckWorkSpace1+0xae>
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <scaraCheckWorkSpace1+0x108>)
 80074dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e0:	f7f9 fb16 	bl	8000b10 <__aeabi_dcmple>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e01d      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80074ee:	2307      	movs	r3, #7
 80074f0:	e01b      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d117      	bne.n	8007528 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 80074f8:	a30f      	add	r3, pc, #60	; (adr r3, 8007538 <scaraCheckWorkSpace1+0xf8>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007502:	f7f9 fb0f 	bl	8000b24 <__aeabi_dcmpge>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <scaraCheckWorkSpace1+0xe4>
 800750c:	a30c      	add	r3, pc, #48	; (adr r3, 8007540 <scaraCheckWorkSpace1+0x100>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	f7f9 fafb 	bl	8000b10 <__aeabi_dcmple>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	e002      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007524:	2307      	movs	r3, #7
 8007526:	e000      	b.n	800752a <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8007528:	2301      	movs	r3, #1
	}
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	f3af 8000 	nop.w
 8007538:	60000000 	.word	0x60000000
 800753c:	c00921fb 	.word	0xc00921fb
 8007540:	60000000 	.word	0x60000000
 8007544:	400921fb 	.word	0x400921fb
 8007548:	40590000 	.word	0x40590000
 800754c:	60000000 	.word	0x60000000
 8007550:	bff921fb 	.word	0xbff921fb
 8007554:	60000000 	.word	0x60000000
 8007558:	3ff921fb 	.word	0x3ff921fb
 800755c:	80000000 	.word	0x80000000
 8007560:	c002d97c 	.word	0xc002d97c
 8007564:	80000000 	.word	0x80000000
 8007568:	4002d97c 	.word	0x4002d97c

0800756c <scaraSetOutput>:

void				scaraSetScanFlag(void) {
	mySCARA.isScanLitmit = TRUE;
}

void				scaraSetOutput		(int8_t level) {
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8007576:	79fa      	ldrb	r2, [r7, #7]
 8007578:	4b03      	ldr	r3, [pc, #12]	; (8007588 <scaraSetOutput+0x1c>)
 800757a:	70da      	strb	r2, [r3, #3]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	20000c78 	.word	0x20000c78

0800758c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8007596:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <scaraSetDutyState+0x1c>)
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	7053      	strb	r3, [r2, #1]
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	20000c78 	.word	0x20000c78

080075ac <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80075b4:	2268      	movs	r2, #104	; 0x68
 80075b6:	4904      	ldr	r1, [pc, #16]	; (80075c8 <scaraGetPosition+0x1c>)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f00a fd91 	bl	80120e0 <memcpy>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20005cf0 	.word	0x20005cf0

080075cc <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 80075d6:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <scaraSetMode+0x1c>)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	7013      	strb	r3, [r2, #0]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	20000c78 	.word	0x20000c78

080075ec <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <scaraGetMode+0x14>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000c78 	.word	0x20000c78

08007604 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8007608:	4b03      	ldr	r3, [pc, #12]	; (8007618 <scaraGetDutyState+0x14>)
 800760a:	785b      	ldrb	r3, [r3, #1]
}
 800760c:	4618      	mov	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000c78 	.word	0x20000c78

0800761c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8007620:	4b03      	ldr	r3, [pc, #12]	; (8007630 <scaraIsScanLimit+0x14>)
 8007622:	789b      	ldrb	r3, [r3, #2]
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000c78 	.word	0x20000c78
 8007634:	00000000 	.word	0x00000000

08007638 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8007642:	4b11      	ldr	r3, [pc, #68]	; (8007688 <scaraIsFinish+0x50>)
 8007644:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800764c:	a30c      	add	r3, pc, #48	; (adr r3, 8007680 <scaraIsFinish+0x48>)
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 fe2b 	bl	80002ac <__adddf3>
 8007656:	4603      	mov	r3, r0
 8007658:	460c      	mov	r4, r1
 800765a:	461a      	mov	r2, r3
 800765c:	4623      	mov	r3, r4
 800765e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007662:	f7f9 fa69 	bl	8000b38 <__aeabi_dcmpgt>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <scaraIsFinish+0x38>
		return TRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8007670:	2300      	movs	r3, #0
	}
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bd90      	pop	{r4, r7, pc}
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w
 8007680:	eb851eb8 	.word	0xeb851eb8
 8007684:	3f9eb851 	.word	0x3f9eb851
 8007688:	20005338 	.word	0x20005338
 800768c:	00000000 	.word	0x00000000

08007690 <scaraPosition2String>:

int32_t					scaraPosition2String(char * result, SCARA_PositionTypeDef position) {
 8007690:	b082      	sub	sp, #8
 8007692:	b590      	push	{r4, r7, lr}
 8007694:	b0af      	sub	sp, #188	; 0xbc
 8007696:	af0a      	add	r7, sp, #40	; 0x28
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800769e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 80076a2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	4b7f      	ldr	r3, [pc, #508]	; (80078a8 <scaraPosition2String+0x218>)
 80076ac:	f7f8 ffb4 	bl	8000618 <__aeabi_dmul>
 80076b0:	4603      	mov	r3, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	4618      	mov	r0, r3
 80076b6:	4621      	mov	r1, r4
 80076b8:	a379      	add	r3, pc, #484	; (adr r3, 80078a0 <scaraPosition2String+0x210>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f7f9 f8d5 	bl	800086c <__aeabi_ddiv>
 80076c2:	4603      	mov	r3, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	ec44 3b17 	vmov	d7, r3, r4
 80076ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80076ce:	2106      	movs	r1, #6
 80076d0:	eeb0 0a47 	vmov.f32	s0, s14
 80076d4:	eef0 0a67 	vmov.f32	s1, s15
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fa f8a1 	bl	8001820 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 80076de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b70      	ldr	r3, [pc, #448]	; (80078a8 <scaraPosition2String+0x218>)
 80076e8:	f7f8 ff96 	bl	8000618 <__aeabi_dmul>
 80076ec:	4603      	mov	r3, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4618      	mov	r0, r3
 80076f2:	4621      	mov	r1, r4
 80076f4:	a36a      	add	r3, pc, #424	; (adr r3, 80078a0 <scaraPosition2String+0x210>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f9 f8b7 	bl	800086c <__aeabi_ddiv>
 80076fe:	4603      	mov	r3, r0
 8007700:	460c      	mov	r4, r1
 8007702:	ec44 3b17 	vmov	d7, r3, r4
 8007706:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800770a:	2106      	movs	r1, #6
 800770c:	eeb0 0a47 	vmov.f32	s0, s14
 8007710:	eef0 0a67 	vmov.f32	s1, s15
 8007714:	4618      	mov	r0, r3
 8007716:	f7fa f883 	bl	8001820 <double2string>
	double2string(d3, position.D3, 6);
 800771a:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800771e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007722:	2106      	movs	r1, #6
 8007724:	eeb0 0a47 	vmov.f32	s0, s14
 8007728:	eef0 0a67 	vmov.f32	s1, s15
 800772c:	4618      	mov	r0, r3
 800772e:	f7fa f877 	bl	8001820 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 8007732:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	4b5b      	ldr	r3, [pc, #364]	; (80078a8 <scaraPosition2String+0x218>)
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	4603      	mov	r3, r0
 8007742:	460c      	mov	r4, r1
 8007744:	4618      	mov	r0, r3
 8007746:	4621      	mov	r1, r4
 8007748:	a355      	add	r3, pc, #340	; (adr r3, 80078a0 <scaraPosition2String+0x210>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f9 f88d 	bl	800086c <__aeabi_ddiv>
 8007752:	4603      	mov	r3, r0
 8007754:	460c      	mov	r4, r1
 8007756:	ec44 3b17 	vmov	d7, r3, r4
 800775a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800775e:	2106      	movs	r1, #6
 8007760:	eeb0 0a47 	vmov.f32	s0, s14
 8007764:	eef0 0a67 	vmov.f32	s1, s15
 8007768:	4618      	mov	r0, r3
 800776a:	f7fa f859 	bl	8001820 <double2string>
	double2string(x, position.x, 6);
 800776e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8007772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007776:	2106      	movs	r1, #6
 8007778:	eeb0 0a47 	vmov.f32	s0, s14
 800777c:	eef0 0a67 	vmov.f32	s1, s15
 8007780:	4618      	mov	r0, r3
 8007782:	f7fa f84d 	bl	8001820 <double2string>
	double2string(y, position.y, 6);
 8007786:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800778a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800778e:	2106      	movs	r1, #6
 8007790:	eeb0 0a47 	vmov.f32	s0, s14
 8007794:	eef0 0a67 	vmov.f32	s1, s15
 8007798:	4618      	mov	r0, r3
 800779a:	f7fa f841 	bl	8001820 <double2string>
	double2string(z, position.z, 6);
 800779e:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80077a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80077a6:	2106      	movs	r1, #6
 80077a8:	eeb0 0a47 	vmov.f32	s0, s14
 80077ac:	eef0 0a67 	vmov.f32	s1, s15
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fa f835 	bl	8001820 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 80077b6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <scaraPosition2String+0x218>)
 80077c0:	f7f8 ff2a 	bl	8000618 <__aeabi_dmul>
 80077c4:	4603      	mov	r3, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	4618      	mov	r0, r3
 80077ca:	4621      	mov	r1, r4
 80077cc:	a334      	add	r3, pc, #208	; (adr r3, 80078a0 <scaraPosition2String+0x210>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f9 f84b 	bl	800086c <__aeabi_ddiv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	ec44 3b17 	vmov	d7, r3, r4
 80077de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077e2:	2106      	movs	r1, #6
 80077e4:	eeb0 0a47 	vmov.f32	s0, s14
 80077e8:	eef0 0a67 	vmov.f32	s1, s15
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fa f817 	bl	8001820 <double2string>
	double2string(lenght, position.q, 6);
 80077f2:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80077f6:	f107 0320 	add.w	r3, r7, #32
 80077fa:	2106      	movs	r1, #6
 80077fc:	eeb0 0a47 	vmov.f32	s0, s14
 8007800:	eef0 0a67 	vmov.f32	s1, s15
 8007804:	4618      	mov	r0, r3
 8007806:	f7fa f80b 	bl	8001820 <double2string>
	double2string(total_time, position.total_time, 4);
 800780a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	2104      	movs	r1, #4
 8007814:	eeb0 0a47 	vmov.f32	s0, s14
 8007818:	eef0 0a67 	vmov.f32	s1, s15
 800781c:	4618      	mov	r0, r3
 800781e:	f7f9 ffff 	bl	8001820 <double2string>
	double2string(time, position.t, 4);
 8007822:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	2104      	movs	r1, #4
 800782c:	eeb0 0a47 	vmov.f32	s0, s14
 8007830:	eef0 0a67 	vmov.f32	s1, s15
 8007834:	4618      	mov	r0, r3
 8007836:	f7f9 fff3 	bl	8001820 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 800783a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800783e:	f107 0314 	add.w	r3, r7, #20
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	f107 0308 	add.w	r3, r7, #8
 8007848:	9308      	str	r3, [sp, #32]
 800784a:	f107 0320 	add.w	r3, r7, #32
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007854:	9306      	str	r3, [sp, #24]
 8007856:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800786c:	9302      	str	r3, [sp, #8]
 800786e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	4a0b      	ldr	r2, [pc, #44]	; (80078ac <scaraPosition2String+0x21c>)
 800787e:	2190      	movs	r1, #144	; 0x90
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f00b fb55 	bl	8012f30 <sniprintf>
 8007886:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 800788a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800788e:	4618      	mov	r0, r3
 8007890:	3794      	adds	r7, #148	; 0x94
 8007892:	46bd      	mov	sp, r7
 8007894:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007898:	b002      	add	sp, #8
 800789a:	4770      	bx	lr
 800789c:	f3af 8000 	nop.w
 80078a0:	60000000 	.word	0x60000000
 80078a4:	400921fb 	.word	0x400921fb
 80078a8:	40668000 	.word	0x40668000
 80078ac:	080181d8 	.word	0x080181d8

080078b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <HAL_MspInit+0x54>)
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	4a11      	ldr	r2, [pc, #68]	; (8007904 <HAL_MspInit+0x54>)
 80078c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078c4:	6453      	str	r3, [r2, #68]	; 0x44
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <HAL_MspInit+0x54>)
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078d2:	2300      	movs	r3, #0
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <HAL_MspInit+0x54>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <HAL_MspInit+0x54>)
 80078dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6413      	str	r3, [r2, #64]	; 0x40
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <HAL_MspInit+0x54>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80078ee:	2200      	movs	r2, #0
 80078f0:	210f      	movs	r1, #15
 80078f2:	f06f 0001 	mvn.w	r0, #1
 80078f6:	f000 fb15 	bl	8007f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40023800 	.word	0x40023800

08007908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	; 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8007918:	2200      	movs	r2, #0
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	2036      	movs	r0, #54	; 0x36
 800791e:	f000 fb01 	bl	8007f24 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8007922:	2036      	movs	r0, #54	; 0x36
 8007924:	f000 fb1a 	bl	8007f5c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <HAL_InitTick+0xa4>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	4a1e      	ldr	r2, [pc, #120]	; (80079ac <HAL_InitTick+0xa4>)
 8007932:	f043 0310 	orr.w	r3, r3, #16
 8007936:	6413      	str	r3, [r2, #64]	; 0x40
 8007938:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <HAL_InitTick+0xa4>)
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007944:	f107 0210 	add.w	r2, r7, #16
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fea6 	bl	800a6a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007954:	f002 fe7c 	bl	800a650 <HAL_RCC_GetPCLK1Freq>
 8007958:	4603      	mov	r3, r0
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <HAL_InitTick+0xa8>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0c9b      	lsrs	r3, r3, #18
 8007968:	3b01      	subs	r3, #1
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <HAL_InitTick+0xac>)
 800796e:	4a12      	ldr	r2, [pc, #72]	; (80079b8 <HAL_InitTick+0xb0>)
 8007970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <HAL_InitTick+0xac>)
 8007974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007978:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800797a:	4a0e      	ldr	r2, [pc, #56]	; (80079b4 <HAL_InitTick+0xac>)
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <HAL_InitTick+0xac>)
 8007982:	2200      	movs	r2, #0
 8007984:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <HAL_InitTick+0xac>)
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <HAL_InitTick+0xac>)
 800798e:	f002 feb9 	bl	800a704 <HAL_TIM_Base_Init>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007998:	4806      	ldr	r0, [pc, #24]	; (80079b4 <HAL_InitTick+0xac>)
 800799a:	f002 fee8 	bl	800a76e <HAL_TIM_Base_Start_IT>
 800799e:	4603      	mov	r3, r0
 80079a0:	e000      	b.n	80079a4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40023800 	.word	0x40023800
 80079b0:	431bde83 	.word	0x431bde83
 80079b4:	20005dc0 	.word	0x20005dc0
 80079b8:	40001000 	.word	0x40001000

080079bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079c0:	bf00      	nop
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 80079d0:	2162      	movs	r1, #98	; 0x62
 80079d2:	4802      	ldr	r0, [pc, #8]	; (80079dc <HardFault_Handler+0x10>)
 80079d4:	f7f9 fede 	bl	8001794 <LOG_REPORT>
 80079d8:	e7fa      	b.n	80079d0 <HardFault_Handler+0x4>
 80079da:	bf00      	nop
 80079dc:	080181fc 	.word	0x080181fc

080079e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 80079e4:	2172      	movs	r1, #114	; 0x72
 80079e6:	4802      	ldr	r0, [pc, #8]	; (80079f0 <MemManage_Handler+0x10>)
 80079e8:	f7f9 fed4 	bl	8001794 <LOG_REPORT>
 80079ec:	e7fa      	b.n	80079e4 <MemManage_Handler+0x4>
 80079ee:	bf00      	nop
 80079f0:	08018214 	.word	0x08018214

080079f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 80079f8:	2182      	movs	r1, #130	; 0x82
 80079fa:	4802      	ldr	r0, [pc, #8]	; (8007a04 <BusFault_Handler+0x10>)
 80079fc:	f7f9 feca 	bl	8001794 <LOG_REPORT>
 8007a00:	e7fa      	b.n	80079f8 <BusFault_Handler+0x4>
 8007a02:	bf00      	nop
 8007a04:	08018228 	.word	0x08018228

08007a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a0c:	e7fe      	b.n	8007a0c <UsageFault_Handler+0x4>

08007a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8007a20:	4802      	ldr	r0, [pc, #8]	; (8007a2c <DMA1_Stream4_IRQHandler+0x10>)
 8007a22:	f000 fbd1 	bl	80081c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007a26:	bf00      	nop
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20005e40 	.word	0x20005e40

08007a30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007a34:	4802      	ldr	r0, [pc, #8]	; (8007a40 <UART4_IRQHandler+0x10>)
 8007a36:	f003 f95d 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007a3a:	bf00      	nop
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20005e00 	.word	0x20005e00

08007a44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007a48:	4802      	ldr	r0, [pc, #8]	; (8007a54 <TIM6_DAC_IRQHandler+0x10>)
 8007a4a:	f002 feb4 	bl	800a7b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007a4e:	bf00      	nop
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20005dc0 	.word	0x20005dc0

08007a58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007a5c:	4802      	ldr	r0, [pc, #8]	; (8007a68 <OTG_FS_IRQHandler+0x10>)
 8007a5e:	f001 f983 	bl	8008d68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007a62:	bf00      	nop
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20006748 	.word	0x20006748

08007a6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a74:	4b11      	ldr	r3, [pc, #68]	; (8007abc <_sbrk+0x50>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <_sbrk+0x16>
		heap_end = &end;
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <_sbrk+0x50>)
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <_sbrk+0x54>)
 8007a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a82:	4b0e      	ldr	r3, [pc, #56]	; (8007abc <_sbrk+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <_sbrk+0x50>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	466a      	mov	r2, sp
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d907      	bls.n	8007aa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a96:	f00a fae9 	bl	801206c <__errno>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa4:	e006      	b.n	8007ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <_sbrk+0x50>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	4a03      	ldr	r2, [pc, #12]	; (8007abc <_sbrk+0x50>)
 8007ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	2000147c 	.word	0x2000147c
 8007ac0:	20006b58 	.word	0x20006b58

08007ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ac8:	4b08      	ldr	r3, [pc, #32]	; (8007aec <SystemInit+0x28>)
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ace:	4a07      	ldr	r2, [pc, #28]	; (8007aec <SystemInit+0x28>)
 8007ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <SystemInit+0x28>)
 8007ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ade:	609a      	str	r2, [r3, #8]
#endif
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8007af4:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007af6:	4a12      	ldr	r2, [pc, #72]	; (8007b40 <MX_UART4_Init+0x50>)
 8007af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007b02:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b16:	220c      	movs	r2, #12
 8007b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b1a:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <MX_UART4_Init+0x4c>)
 8007b28:	f003 f82a 	bl	800ab80 <HAL_UART_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007b32:	f7fb fc07 	bl	8003344 <Error_Handler>
  }

}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20005e00 	.word	0x20005e00
 8007b40:	40004c00 	.word	0x40004c00

08007b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a34      	ldr	r2, [pc, #208]	; (8007c34 <HAL_UART_MspInit+0xf0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d161      	bne.n	8007c2a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	4b33      	ldr	r3, [pc, #204]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	4a32      	ldr	r2, [pc, #200]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b74:	6413      	str	r3, [r2, #64]	; 0x40
 8007b76:	4b30      	ldr	r3, [pc, #192]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	6313      	str	r3, [r2, #48]	; 0x30
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <HAL_UART_MspInit+0xf4>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007baa:	2303      	movs	r3, #3
 8007bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007bae:	2308      	movs	r3, #8
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4820      	ldr	r0, [pc, #128]	; (8007c3c <HAL_UART_MspInit+0xf8>)
 8007bba:	f000 fd7b 	bl	80086b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007bbe:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bc0:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <HAL_UART_MspInit+0x100>)
 8007bc2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007bc4:	4b1e      	ldr	r3, [pc, #120]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bca:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bcc:	4b1c      	ldr	r3, [pc, #112]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bce:	2240      	movs	r2, #64	; 0x40
 8007bd0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bd2:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007bd8:	4b19      	ldr	r3, [pc, #100]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bde:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007be0:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007bec:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007bf2:	4b13      	ldr	r3, [pc, #76]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007bfe:	4810      	ldr	r0, [pc, #64]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007c00:	f000 f9ba 	bl	8007f78 <HAL_DMA_Init>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8007c0a:	f7fb fb9b 	bl	8003344 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
 8007c14:	4a0a      	ldr	r2, [pc, #40]	; (8007c40 <HAL_UART_MspInit+0xfc>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2105      	movs	r1, #5
 8007c1e:	2034      	movs	r0, #52	; 0x34
 8007c20:	f000 f980 	bl	8007f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007c24:	2034      	movs	r0, #52	; 0x34
 8007c26:	f000 f999 	bl	8007f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40004c00 	.word	0x40004c00
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	40020000 	.word	0x40020000
 8007c40:	20005e40 	.word	0x20005e40
 8007c44:	40026070 	.word	0x40026070

08007c48 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0c      	ldr	r2, [pc, #48]	; (8007c88 <HAL_UART_TxCpltCallback+0x40>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d112      	bne.n	8007c80 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8007c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c5e:	490b      	ldr	r1, [pc, #44]	; (8007c8c <HAL_UART_TxCpltCallback+0x44>)
 8007c60:	480b      	ldr	r0, [pc, #44]	; (8007c90 <HAL_UART_TxCpltCallback+0x48>)
 8007c62:	f7fb fc0e 	bl	8003482 <ringBuff_PopArray>
 8007c66:	4603      	mov	r3, r0
 8007c68:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	461a      	mov	r2, r3
 8007c74:	4905      	ldr	r1, [pc, #20]	; (8007c8c <HAL_UART_TxCpltCallback+0x44>)
 8007c76:	4807      	ldr	r0, [pc, #28]	; (8007c94 <HAL_UART_TxCpltCallback+0x4c>)
 8007c78:	f002 ffd0 	bl	800ac1c <HAL_UART_Transmit_DMA>
 8007c7c:	e000      	b.n	8007c80 <HAL_UART_TxCpltCallback+0x38>
			return;
 8007c7e:	bf00      	nop
	}
}
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	40004c00 	.word	0x40004c00
 8007c8c:	200051dc 	.word	0x200051dc
 8007c90:	2000086c 	.word	0x2000086c
 8007c94:	20005e00 	.word	0x20005e00

08007c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c9e:	e003      	b.n	8007ca8 <LoopCopyDataInit>

08007ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007ca6:	3104      	adds	r1, #4

08007ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ca8:	480b      	ldr	r0, [pc, #44]	; (8007cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cb0:	d3f6      	bcc.n	8007ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8007cb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007cb4:	e002      	b.n	8007cbc <LoopFillZerobss>

08007cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007cb8:	f842 3b04 	str.w	r3, [r2], #4

08007cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007cc0:	d3f9      	bcc.n	8007cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007cc2:	f7ff feff 	bl	8007ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cc6:	f00a f9d7 	bl	8012078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007cca:	f7fb faab 	bl	8003224 <main>
  bx  lr    
 8007cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007cd4:	08018818 	.word	0x08018818
  ldr  r0, =_sdata
 8007cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007cdc:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 8007ce0:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 8007ce4:	20006b54 	.word	0x20006b54

08007ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ce8:	e7fe      	b.n	8007ce8 <ADC_IRQHandler>
	...

08007cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007cf0:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <HAL_Init+0x40>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a0d      	ldr	r2, [pc, #52]	; (8007d2c <HAL_Init+0x40>)
 8007cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_Init+0x40>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <HAL_Init+0x40>)
 8007d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d08:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <HAL_Init+0x40>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a07      	ldr	r2, [pc, #28]	; (8007d2c <HAL_Init+0x40>)
 8007d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d14:	2003      	movs	r0, #3
 8007d16:	f000 f8fa 	bl	8007f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	f7ff fdf4 	bl	8007908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d20:	f7ff fdc6 	bl	80078b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40023c00 	.word	0x40023c00

08007d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <HAL_IncTick+0x20>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_IncTick+0x24>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4413      	add	r3, r2
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <HAL_IncTick+0x24>)
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000cbc 	.word	0x20000cbc
 8007d54:	20005ea0 	.word	0x20005ea0

08007d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d5c:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <HAL_GetTick+0x14>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20005ea0 	.word	0x20005ea0

08007d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7ff ffee 	bl	8007d58 <HAL_GetTick>
 8007d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d005      	beq.n	8007d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_Delay+0x40>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d96:	bf00      	nop
 8007d98:	f7ff ffde 	bl	8007d58 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d8f7      	bhi.n	8007d98 <HAL_Delay+0x28>
  {
  }
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000cbc 	.word	0x20000cbc

08007db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <__NVIC_SetPriorityGrouping+0x44>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007de6:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <__NVIC_SetPriorityGrouping+0x44>)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	60d3      	str	r3, [r2, #12]
}
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	e000ed00 	.word	0xe000ed00

08007dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e00:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <__NVIC_GetPriorityGrouping+0x18>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	f003 0307 	and.w	r3, r3, #7
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	e000ed00 	.word	0xe000ed00

08007e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	db0b      	blt.n	8007e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	f003 021f 	and.w	r2, r3, #31
 8007e30:	4907      	ldr	r1, [pc, #28]	; (8007e50 <__NVIC_EnableIRQ+0x38>)
 8007e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	2001      	movs	r0, #1
 8007e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	e000e100 	.word	0xe000e100

08007e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	db0a      	blt.n	8007e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	490c      	ldr	r1, [pc, #48]	; (8007ea0 <__NVIC_SetPriority+0x4c>)
 8007e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e72:	0112      	lsls	r2, r2, #4
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	440b      	add	r3, r1
 8007e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e7c:	e00a      	b.n	8007e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <__NVIC_SetPriority+0x50>)
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	3b04      	subs	r3, #4
 8007e8c:	0112      	lsls	r2, r2, #4
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	440b      	add	r3, r1
 8007e92:	761a      	strb	r2, [r3, #24]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	e000e100 	.word	0xe000e100
 8007ea4:	e000ed00 	.word	0xe000ed00

08007ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	; 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f1c3 0307 	rsb	r3, r3, #7
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	bf28      	it	cs
 8007ec6:	2304      	movcs	r3, #4
 8007ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d902      	bls.n	8007ed8 <NVIC_EncodePriority+0x30>
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	3b03      	subs	r3, #3
 8007ed6:	e000      	b.n	8007eda <NVIC_EncodePriority+0x32>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	43da      	mvns	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	401a      	ands	r2, r3
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8007efa:	43d9      	mvns	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f00:	4313      	orrs	r3, r2
         );
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3724      	adds	r7, #36	; 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff ff4c 	bl	8007db4 <__NVIC_SetPriorityGrouping>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f36:	f7ff ff61 	bl	8007dfc <__NVIC_GetPriorityGrouping>
 8007f3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	f7ff ffb1 	bl	8007ea8 <NVIC_EncodePriority>
 8007f46:	4602      	mov	r2, r0
 8007f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff ff80 	bl	8007e54 <__NVIC_SetPriority>
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff ff54 	bl	8007e18 <__NVIC_EnableIRQ>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f84:	f7ff fee8 	bl	8007d58 <HAL_GetTick>
 8007f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e099      	b.n	80080c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fb4:	e00f      	b.n	8007fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fb6:	f7ff fecf 	bl	8007d58 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b05      	cmp	r3, #5
 8007fc2:	d908      	bls.n	8007fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e078      	b.n	80080c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e8      	bne.n	8007fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4b38      	ldr	r3, [pc, #224]	; (80080d0 <HAL_DMA_Init+0x158>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800800e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800801a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b04      	cmp	r3, #4
 800802e:	d107      	bne.n	8008040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	4313      	orrs	r3, r2
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0307 	bic.w	r3, r3, #7
 8008056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b04      	cmp	r3, #4
 8008068:	d117      	bne.n	800809a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00e      	beq.n	800809a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa9f 	bl	80085c0 <DMA_CheckFifoParam>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d008      	beq.n	800809a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2240      	movs	r2, #64	; 0x40
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008096:	2301      	movs	r3, #1
 8008098:	e016      	b.n	80080c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa56 	bl	8008554 <DMA_CalcBaseAndBitshift>
 80080a8:	4603      	mov	r3, r0
 80080aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	223f      	movs	r2, #63	; 0x3f
 80080b2:	409a      	lsls	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	f010803f 	.word	0xf010803f

080080d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_DMA_Start_IT+0x26>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e040      	b.n	800817c <HAL_DMA_Start_IT+0xa8>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d12f      	bne.n	800816e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 f9e8 	bl	80084f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	223f      	movs	r2, #63	; 0x3f
 800812e:	409a      	lsls	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0216 	orr.w	r2, r2, #22
 8008142:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0208 	orr.w	r2, r2, #8
 800815a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e005      	b.n	800817a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008176:	2302      	movs	r3, #2
 8008178:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d004      	beq.n	80081a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2280      	movs	r2, #128	; 0x80
 800819c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e00c      	b.n	80081bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2205      	movs	r2, #5
 80081a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0201 	bic.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081d4:	4b92      	ldr	r3, [pc, #584]	; (8008420 <HAL_DMA_IRQHandler+0x258>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a92      	ldr	r2, [pc, #584]	; (8008424 <HAL_DMA_IRQHandler+0x25c>)
 80081da:	fba2 2303 	umull	r2, r3, r2, r3
 80081de:	0a9b      	lsrs	r3, r3, #10
 80081e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f2:	2208      	movs	r2, #8
 80081f4:	409a      	lsls	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01a      	beq.n	8008234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0204 	bic.w	r2, r2, #4
 800821a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008220:	2208      	movs	r2, #8
 8008222:	409a      	lsls	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	f043 0201 	orr.w	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008238:	2201      	movs	r2, #1
 800823a:	409a      	lsls	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4013      	ands	r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d012      	beq.n	800826a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008256:	2201      	movs	r2, #1
 8008258:	409a      	lsls	r2, r3
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	f043 0202 	orr.w	r2, r3, #2
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826e:	2204      	movs	r2, #4
 8008270:	409a      	lsls	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4013      	ands	r3, r2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d012      	beq.n	80082a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828c:	2204      	movs	r2, #4
 800828e:	409a      	lsls	r2, r3
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	f043 0204 	orr.w	r2, r3, #4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a4:	2210      	movs	r2, #16
 80082a6:	409a      	lsls	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d043      	beq.n	8008338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d03c      	beq.n	8008338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c2:	2210      	movs	r2, #16
 80082c4:	409a      	lsls	r2, r3
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d018      	beq.n	800830a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d108      	bne.n	80082f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d024      	beq.n	8008338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
 80082f6:	e01f      	b.n	8008338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01b      	beq.n	8008338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	4798      	blx	r3
 8008308:	e016      	b.n	8008338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	d107      	bne.n	8008328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0208 	bic.w	r2, r2, #8
 8008326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833c:	2220      	movs	r2, #32
 800833e:	409a      	lsls	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 808e 	beq.w	8008466 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8086 	beq.w	8008466 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835e:	2220      	movs	r2, #32
 8008360:	409a      	lsls	r2, r3
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b05      	cmp	r3, #5
 8008370:	d136      	bne.n	80083e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0216 	bic.w	r2, r2, #22
 8008380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	2b00      	cmp	r3, #0
 8008398:	d103      	bne.n	80083a2 <HAL_DMA_IRQHandler+0x1da>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0208 	bic.w	r2, r2, #8
 80083b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b6:	223f      	movs	r2, #63	; 0x3f
 80083b8:	409a      	lsls	r2, r3
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d07d      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
        }
        return;
 80083de:	e078      	b.n	80084d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d01c      	beq.n	8008428 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d108      	bne.n	800840e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008400:	2b00      	cmp	r3, #0
 8008402:	d030      	beq.n	8008466 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
 800840c:	e02b      	b.n	8008466 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d027      	beq.n	8008466 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
 800841e:	e022      	b.n	8008466 <HAL_DMA_IRQHandler+0x29e>
 8008420:	20000cb4 	.word	0x20000cb4
 8008424:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10f      	bne.n	8008456 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0210 	bic.w	r2, r2, #16
 8008444:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846a:	2b00      	cmp	r3, #0
 800846c:	d032      	beq.n	80084d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d022      	beq.n	80084c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2205      	movs	r2, #5
 800847e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3301      	adds	r3, #1
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	429a      	cmp	r2, r3
 800849c:	d307      	bcc.n	80084ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f2      	bne.n	8008492 <HAL_DMA_IRQHandler+0x2ca>
 80084ac:	e000      	b.n	80084b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80084ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	e000      	b.n	80084d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80084d2:	bf00      	nop
    }
  }
}
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084ea:	b2db      	uxtb	r3, r3
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d108      	bne.n	8008538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008536:	e007      	b.n	8008548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	60da      	str	r2, [r3, #12]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	3b10      	subs	r3, #16
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <DMA_CalcBaseAndBitshift+0x64>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <DMA_CalcBaseAndBitshift+0x68>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d909      	bls.n	8008596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	659a      	str	r2, [r3, #88]	; 0x58
 8008594:	e007      	b.n	80085a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	aaaaaaab 	.word	0xaaaaaaab
 80085bc:	080182ac 	.word	0x080182ac

080085c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11f      	bne.n	800861a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d855      	bhi.n	800868c <DMA_CheckFifoParam+0xcc>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <DMA_CheckFifoParam+0x28>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	0800860b 	.word	0x0800860b
 80085f0:	080085f9 	.word	0x080085f9
 80085f4:	0800868d 	.word	0x0800868d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d045      	beq.n	8008690 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008608:	e042      	b.n	8008690 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008612:	d13f      	bne.n	8008694 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008618:	e03c      	b.n	8008694 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	d121      	bne.n	8008668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d836      	bhi.n	8008698 <DMA_CheckFifoParam+0xd8>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <DMA_CheckFifoParam+0x70>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008641 	.word	0x08008641
 8008634:	08008647 	.word	0x08008647
 8008638:	08008641 	.word	0x08008641
 800863c:	08008659 	.word	0x08008659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e02f      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d024      	beq.n	800869c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008656:	e021      	b.n	800869c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008660:	d11e      	bne.n	80086a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008666:	e01b      	b.n	80086a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d902      	bls.n	8008674 <DMA_CheckFifoParam+0xb4>
 800866e:	2b03      	cmp	r3, #3
 8008670:	d003      	beq.n	800867a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008672:	e018      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
      break;
 8008678:	e015      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e00b      	b.n	80086a4 <DMA_CheckFifoParam+0xe4>
      break;
 800868c:	bf00      	nop
 800868e:	e00a      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 8008690:	bf00      	nop
 8008692:	e008      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 8008694:	bf00      	nop
 8008696:	e006      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 8008698:	bf00      	nop
 800869a:	e004      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 800869c:	bf00      	nop
 800869e:	e002      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <DMA_CheckFifoParam+0xe6>
      break;
 80086a4:	bf00      	nop
    }
  } 
  
  return status; 
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b089      	sub	sp, #36	; 0x24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	e16b      	b.n	80089a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086d0:	2201      	movs	r2, #1
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4013      	ands	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	f040 815a 	bne.w	80089a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d00b      	beq.n	800870e <HAL_GPIO_Init+0x5a>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d007      	beq.n	800870e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008702:	2b11      	cmp	r3, #17
 8008704:	d003      	beq.n	800870e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b12      	cmp	r3, #18
 800870c:	d130      	bne.n	8008770 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	2203      	movs	r2, #3
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43db      	mvns	r3, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	4013      	ands	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	4313      	orrs	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008744:	2201      	movs	r2, #1
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	091b      	lsrs	r3, r3, #4
 800875a:	f003 0201 	and.w	r2, r3, #1
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	4313      	orrs	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	2203      	movs	r2, #3
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	fa02 f303 	lsl.w	r3, r2, r3
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	4313      	orrs	r3, r2
 8008798:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d003      	beq.n	80087b0 <HAL_GPIO_Init+0xfc>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b12      	cmp	r3, #18
 80087ae:	d123      	bne.n	80087f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	08da      	lsrs	r2, r3, #3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3208      	adds	r2, #8
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	220f      	movs	r2, #15
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	43db      	mvns	r3, r3
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4013      	ands	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	08da      	lsrs	r2, r3, #3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3208      	adds	r2, #8
 80087f2:	69b9      	ldr	r1, [r7, #24]
 80087f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	2203      	movs	r2, #3
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	43db      	mvns	r3, r3
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	4013      	ands	r3, r2
 800880e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f003 0203 	and.w	r2, r3, #3
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	4313      	orrs	r3, r2
 8008824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80b4 	beq.w	80089a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	4b5f      	ldr	r3, [pc, #380]	; (80089bc <HAL_GPIO_Init+0x308>)
 8008840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008842:	4a5e      	ldr	r2, [pc, #376]	; (80089bc <HAL_GPIO_Init+0x308>)
 8008844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008848:	6453      	str	r3, [r2, #68]	; 0x44
 800884a:	4b5c      	ldr	r3, [pc, #368]	; (80089bc <HAL_GPIO_Init+0x308>)
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008856:	4a5a      	ldr	r2, [pc, #360]	; (80089c0 <HAL_GPIO_Init+0x30c>)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	089b      	lsrs	r3, r3, #2
 800885c:	3302      	adds	r3, #2
 800885e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	220f      	movs	r2, #15
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	43db      	mvns	r3, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	4013      	ands	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a51      	ldr	r2, [pc, #324]	; (80089c4 <HAL_GPIO_Init+0x310>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d02b      	beq.n	80088da <HAL_GPIO_Init+0x226>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a50      	ldr	r2, [pc, #320]	; (80089c8 <HAL_GPIO_Init+0x314>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d025      	beq.n	80088d6 <HAL_GPIO_Init+0x222>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a4f      	ldr	r2, [pc, #316]	; (80089cc <HAL_GPIO_Init+0x318>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01f      	beq.n	80088d2 <HAL_GPIO_Init+0x21e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a4e      	ldr	r2, [pc, #312]	; (80089d0 <HAL_GPIO_Init+0x31c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d019      	beq.n	80088ce <HAL_GPIO_Init+0x21a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a4d      	ldr	r2, [pc, #308]	; (80089d4 <HAL_GPIO_Init+0x320>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <HAL_GPIO_Init+0x216>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a4c      	ldr	r2, [pc, #304]	; (80089d8 <HAL_GPIO_Init+0x324>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00d      	beq.n	80088c6 <HAL_GPIO_Init+0x212>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a4b      	ldr	r2, [pc, #300]	; (80089dc <HAL_GPIO_Init+0x328>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d007      	beq.n	80088c2 <HAL_GPIO_Init+0x20e>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a4a      	ldr	r2, [pc, #296]	; (80089e0 <HAL_GPIO_Init+0x32c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d101      	bne.n	80088be <HAL_GPIO_Init+0x20a>
 80088ba:	2307      	movs	r3, #7
 80088bc:	e00e      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088be:	2308      	movs	r3, #8
 80088c0:	e00c      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088c2:	2306      	movs	r3, #6
 80088c4:	e00a      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088c6:	2305      	movs	r3, #5
 80088c8:	e008      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088ca:	2304      	movs	r3, #4
 80088cc:	e006      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088ce:	2303      	movs	r3, #3
 80088d0:	e004      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e002      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <HAL_GPIO_Init+0x228>
 80088da:	2300      	movs	r3, #0
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	f002 0203 	and.w	r2, r2, #3
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	4093      	lsls	r3, r2
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ec:	4934      	ldr	r1, [pc, #208]	; (80089c0 <HAL_GPIO_Init+0x30c>)
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	3302      	adds	r3, #2
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088fa:	4b3a      	ldr	r3, [pc, #232]	; (80089e4 <HAL_GPIO_Init+0x330>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	43db      	mvns	r3, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4013      	ands	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800891e:	4a31      	ldr	r2, [pc, #196]	; (80089e4 <HAL_GPIO_Init+0x330>)
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008924:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <HAL_GPIO_Init+0x330>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	43db      	mvns	r3, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4013      	ands	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008948:	4a26      	ldr	r2, [pc, #152]	; (80089e4 <HAL_GPIO_Init+0x330>)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800894e:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <HAL_GPIO_Init+0x330>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	43db      	mvns	r3, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4013      	ands	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008972:	4a1c      	ldr	r2, [pc, #112]	; (80089e4 <HAL_GPIO_Init+0x330>)
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008978:	4b1a      	ldr	r3, [pc, #104]	; (80089e4 <HAL_GPIO_Init+0x330>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	43db      	mvns	r3, r3
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4013      	ands	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800899c:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <HAL_GPIO_Init+0x330>)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	f67f ae90 	bls.w	80086d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80089b0:	bf00      	nop
 80089b2:	3724      	adds	r7, #36	; 0x24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40013800 	.word	0x40013800
 80089c4:	40020000 	.word	0x40020000
 80089c8:	40020400 	.word	0x40020400
 80089cc:	40020800 	.word	0x40020800
 80089d0:	40020c00 	.word	0x40020c00
 80089d4:	40021000 	.word	0x40021000
 80089d8:	40021400 	.word	0x40021400
 80089dc:	40021800 	.word	0x40021800
 80089e0:	40021c00 	.word	0x40021c00
 80089e4:	40013c00 	.word	0x40013c00

080089e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	807b      	strh	r3, [r7, #2]
 80089f4:	4613      	mov	r3, r2
 80089f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089f8:	787b      	ldrb	r3, [r7, #1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089fe:	887a      	ldrh	r2, [r7, #2]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a04:	e003      	b.n	8008a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a06:	887b      	ldrh	r3, [r7, #2]
 8008a08:	041a      	lsls	r2, r3, #16
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	619a      	str	r2, [r3, #24]
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e043      	b.n	8008aba <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7fa f82a 	bl	8002aa0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3308      	adds	r3, #8
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f002 ff9e 	bl	800b998 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	461a      	mov	r2, r3
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	f002 ffe8 	bl	800ba3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6858      	ldr	r0, [r3, #4]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	f003 f81d 	bl	800bab8 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	6892      	ldr	r2, [r2, #8]
 8008a86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	6892      	ldr	r2, [r2, #8]
 8008a92:	f041 0101 	orr.w	r1, r1, #1
 8008a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8008aa2:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <HAL_NOR_Init+0xa8>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e002      	b.n	8008ab0 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <HAL_NOR_Init+0xa8>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20001480 	.word	0x20001480

08008ac8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	b08f      	sub	sp, #60	; 0x3c
 8008acc:	af0a      	add	r7, sp, #40	; 0x28
 8008ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e10f      	b.n	8008cfa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f008 ffb9 	bl	8011a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2203      	movs	r2, #3
 8008afe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f003 f922 	bl	800bd62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	687e      	ldr	r6, [r7, #4]
 8008b26:	466d      	mov	r5, sp
 8008b28:	f106 0410 	add.w	r4, r6, #16
 8008b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b38:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b3c:	1d33      	adds	r3, r6, #4
 8008b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b40:	6838      	ldr	r0, [r7, #0]
 8008b42:	f002 fff9 	bl	800bb38 <USB_CoreInit>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e0d0      	b.n	8008cfa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f003 f910 	bl	800bd84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
 8008b68:	e04a      	b.n	8008c00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b6a:	7bfa      	ldrb	r2, [r7, #15]
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	440b      	add	r3, r1
 8008b78:	333d      	adds	r3, #61	; 0x3d
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b7e:	7bfa      	ldrb	r2, [r7, #15]
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	333c      	adds	r3, #60	; 0x3c
 8008b8e:	7bfa      	ldrb	r2, [r7, #15]
 8008b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008b92:	7bfa      	ldrb	r2, [r7, #15]
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	b298      	uxth	r0, r3
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3342      	adds	r3, #66	; 0x42
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008baa:	7bfa      	ldrb	r2, [r7, #15]
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	333f      	adds	r3, #63	; 0x3f
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008bbe:	7bfa      	ldrb	r2, [r7, #15]
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	440b      	add	r3, r1
 8008bcc:	3344      	adds	r3, #68	; 0x44
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008bd2:	7bfa      	ldrb	r2, [r7, #15]
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	3348      	adds	r3, #72	; 0x48
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008be6:	7bfa      	ldrb	r2, [r7, #15]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3350      	adds	r3, #80	; 0x50
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
 8008c00:	7bfa      	ldrb	r2, [r7, #15]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3af      	bcc.n	8008b6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	e044      	b.n	8008c9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c10:	7bfa      	ldrb	r2, [r7, #15]
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c26:	7bfa      	ldrb	r2, [r7, #15]
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008c38:	7bfa      	ldrb	r2, [r7, #15]
 8008c3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008c3c:	7bfa      	ldrb	r2, [r7, #15]
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4613      	mov	r3, r2
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008c52:	7bfa      	ldrb	r2, [r7, #15]
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c68:	7bfa      	ldrb	r2, [r7, #15]
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	3301      	adds	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	7bfa      	ldrb	r2, [r7, #15]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d3b5      	bcc.n	8008c10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	687e      	ldr	r6, [r7, #4]
 8008cac:	466d      	mov	r5, sp
 8008cae:	f106 0410 	add.w	r4, r6, #16
 8008cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008cbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cc2:	1d33      	adds	r3, r6, #4
 8008cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cc6:	6838      	ldr	r0, [r7, #0]
 8008cc8:	f003 f886 	bl	800bdd8 <USB_DevInit>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e00d      	b.n	8008cfa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f004 f87b 	bl	800cdee <USB_DevDisconnect>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d101      	bne.n	8008d1e <HAL_PCD_Start+0x1c>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e020      	b.n	8008d60 <HAL_PCD_Start+0x5e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d109      	bne.n	8008d42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d005      	beq.n	8008d42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f004 f839 	bl	800cdbe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fff5 	bl	800bd40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b08d      	sub	sp, #52	; 0x34
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f004 f8e0 	bl	800cf44 <USB_GetMode>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f040 838e 	bne.w	80094a8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f004 f844 	bl	800ce1e <USB_ReadInterrupts>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8384 	beq.w	80094a6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f004 f83b 	bl	800ce1e <USB_ReadInterrupts>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d107      	bne.n	8008dc2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695a      	ldr	r2, [r3, #20]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f002 0202 	and.w	r2, r2, #2
 8008dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f004 f829 	bl	800ce1e <USB_ReadInterrupts>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dd6:	d17b      	bne.n	8008ed0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f004 f82f 	bl	800ce44 <USB_ReadDevAllOutEpInterrupt>
 8008de6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008de8:	e06f      	b.n	8008eca <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d064      	beq.n	8008ebe <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f004 f854 	bl	800ceac <USB_ReadDevOutEPInterrupt>
 8008e04:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2301      	movs	r3, #1
 8008e20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fe0d 	bl	8009a44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 ff0c 	bl	8009c54 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	461a      	mov	r2, r3
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d008      	beq.n	8008e6a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	461a      	mov	r2, r3
 8008e66:	2310      	movs	r3, #16
 8008e68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d015      	beq.n	8008ea0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d108      	bne.n	8008e8e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e86:	461a      	mov	r2, r3
 8008e88:	2101      	movs	r1, #1
 8008e8a:	f004 f89f 	bl	800cfcc <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2320      	movs	r3, #32
 8008e9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ebc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d18c      	bne.n	8008dea <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f003 ffa2 	bl	800ce1e <USB_ReadInterrupts>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ee4:	f040 80c4 	bne.w	8009070 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f003 ffc3 	bl	800ce78 <USB_ReadDevAllInEpInterrupt>
 8008ef2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008ef8:	e0b6      	b.n	8009068 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80ab 	beq.w	800905c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	b2d2      	uxtb	r2, r2
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f003 ffe9 	bl	800cee8 <USB_ReadDevInEPInterrupt>
 8008f16:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05b      	beq.n	8008fda <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	2201      	movs	r2, #1
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	43db      	mvns	r3, r3
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f42:	4013      	ands	r3, r2
 8008f44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	461a      	mov	r2, r3
 8008f54:	2301      	movs	r3, #1
 8008f56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d11b      	bne.n	8008f98 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3348      	adds	r3, #72	; 0x48
 8008f70:	6819      	ldr	r1, [r3, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4403      	add	r3, r0
 8008f80:	3344      	adds	r3, #68	; 0x44
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4419      	add	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4403      	add	r3, r0
 8008f94:	3348      	adds	r3, #72	; 0x48
 8008f96:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f008 fde5 	bl	8011b6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d116      	bne.n	8008fda <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d113      	bne.n	8008fda <HAL_PCD_IRQHandler+0x272>
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3350      	adds	r3, #80	; 0x50
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f003 fff9 	bl	800cfcc <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d008      	beq.n	8008ff6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	461a      	mov	r2, r3
 800900e:	2310      	movs	r3, #16
 8009010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	461a      	mov	r2, r3
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d008      	beq.n	800904a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	461a      	mov	r2, r3
 8009046:	2302      	movs	r3, #2
 8009048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fc67 	bl	800992a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	3301      	adds	r3, #1
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	085b      	lsrs	r3, r3, #1
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	f47f af45 	bne.w	8008efa <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f003 fed2 	bl	800ce1e <USB_ReadInterrupts>
 800907a:	4603      	mov	r3, r0
 800907c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009084:	d122      	bne.n	80090cc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d108      	bne.n	80090b6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fe88 	bl	8009dc4 <HAL_PCDEx_LPM_Callback>
 80090b4:	e002      	b.n	80090bc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f008 fdd0 	bl	8011c5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695a      	ldr	r2, [r3, #20]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80090ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f003 fea4 	bl	800ce1e <USB_ReadInterrupts>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e0:	d112      	bne.n	8009108 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d102      	bne.n	80090f8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f008 fd8c 	bl	8011c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	695a      	ldr	r2, [r3, #20]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009106:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f003 fe86 	bl	800ce1e <USB_ReadInterrupts>
 8009112:	4603      	mov	r3, r0
 8009114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911c:	f040 80a7 	bne.w	800926e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800912e:	f023 0301 	bic.w	r3, r3, #1
 8009132:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2110      	movs	r1, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f002 ffbe 	bl	800c0bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009140:	2300      	movs	r3, #0
 8009142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009144:	e036      	b.n	80091b4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009152:	461a      	mov	r2, r3
 8009154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009158:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009178:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	461a      	mov	r2, r3
 8009188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800918c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	3301      	adds	r3, #1
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3c3      	bcc.n	8009146 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80091d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d016      	beq.n	8009208 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ea:	f043 030b 	orr.w	r3, r3, #11
 80091ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009200:	f043 030b 	orr.w	r3, r3, #11
 8009204:	6453      	str	r3, [r2, #68]	; 0x44
 8009206:	e015      	b.n	8009234 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800921a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800921e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	69fa      	ldr	r2, [r7, #28]
 800922a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800922e:	f043 030b 	orr.w	r3, r3, #11
 8009232:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009242:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009246:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009258:	461a      	mov	r2, r3
 800925a:	f003 feb7 	bl	800cfcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695a      	ldr	r2, [r3, #20]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800926c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4618      	mov	r0, r3
 8009274:	f003 fdd3 	bl	800ce1e <USB_ReadInterrupts>
 8009278:	4603      	mov	r3, r0
 800927a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800927e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009282:	d124      	bne.n	80092ce <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f003 fe69 	bl	800cf60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f002 ff73 	bl	800c17e <USB_GetDevSpeed>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681c      	ldr	r4, [r3, #0]
 80092a4:	f001 f9c8 	bl	800a638 <HAL_RCC_GetHCLKFreq>
 80092a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	4620      	mov	r0, r4
 80092b4:	f002 fca2 	bl	800bbfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f008 fc80 	bl	8011bbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80092cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f003 fda3 	bl	800ce1e <USB_ReadInterrupts>
 80092d8:	4603      	mov	r3, r0
 80092da:	f003 0310 	and.w	r3, r3, #16
 80092de:	2b10      	cmp	r3, #16
 80092e0:	d161      	bne.n	80093a6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0210 	bic.w	r2, r2, #16
 80092f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f003 020f 	and.w	r2, r3, #15
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	3304      	adds	r3, #4
 8009310:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	0c5b      	lsrs	r3, r3, #17
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	2b02      	cmp	r3, #2
 800931c:	d124      	bne.n	8009368 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009324:	4013      	ands	r3, r2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d035      	beq.n	8009396 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	091b      	lsrs	r3, r3, #4
 8009332:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009338:	b29b      	uxth	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	6a38      	ldr	r0, [r7, #32]
 800933e:	f003 fc1b 	bl	800cb78 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800934e:	441a      	add	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	619a      	str	r2, [r3, #24]
 8009366:	e016      	b.n	8009396 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	0c5b      	lsrs	r3, r3, #17
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	2b06      	cmp	r3, #6
 8009372:	d110      	bne.n	8009396 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800937a:	2208      	movs	r2, #8
 800937c:	4619      	mov	r1, r3
 800937e:	6a38      	ldr	r0, [r7, #32]
 8009380:	f003 fbfa 	bl	800cb78 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	699a      	ldr	r2, [r3, #24]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	091b      	lsrs	r3, r3, #4
 800938c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009390:	441a      	add	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0210 	orr.w	r2, r2, #16
 80093a4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f003 fd37 	bl	800ce1e <USB_ReadInterrupts>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d10a      	bne.n	80093d0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f008 fbf1 	bl	8011ba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695a      	ldr	r2, [r3, #20]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f002 0208 	and.w	r2, r2, #8
 80093ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f003 fd22 	bl	800ce1e <USB_ReadInterrupts>
 80093da:	4603      	mov	r3, r0
 80093dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e4:	d10f      	bne.n	8009406 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f008 fc53 	bl	8011c9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f003 fd07 	bl	800ce1e <USB_ReadInterrupts>
 8009410:	4603      	mov	r3, r0
 8009412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800941a:	d10f      	bne.n	800943c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	b2db      	uxtb	r3, r3
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f008 fc26 	bl	8011c78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695a      	ldr	r2, [r3, #20]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800943a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f003 fcec 	bl	800ce1e <USB_ReadInterrupts>
 8009446:	4603      	mov	r3, r0
 8009448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800944c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009450:	d10a      	bne.n	8009468 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f008 fc34 	bl	8011cc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f003 fcd6 	bl	800ce1e <USB_ReadInterrupts>
 8009472:	4603      	mov	r3, r0
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b04      	cmp	r3, #4
 800947a:	d115      	bne.n	80094a8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f003 0304 	and.w	r3, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f008 fc24 	bl	8011cdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	605a      	str	r2, [r3, #4]
 80094a4:	e000      	b.n	80094a8 <HAL_PCD_IRQHandler+0x740>
      return;
 80094a6:	bf00      	nop
    }
  }
}
 80094a8:	3734      	adds	r7, #52	; 0x34
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd90      	pop	{r4, r7, pc}

080094ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_PCD_SetAddress+0x1a>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e013      	b.n	80094f0 <HAL_PCD_SetAddress+0x42>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	78fa      	ldrb	r2, [r7, #3]
 80094d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f003 fc46 	bl	800cd72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	461a      	mov	r2, r3
 8009506:	4603      	mov	r3, r0
 8009508:	70fb      	strb	r3, [r7, #3]
 800950a:	460b      	mov	r3, r1
 800950c:	803b      	strh	r3, [r7, #0]
 800950e:	4613      	mov	r3, r2
 8009510:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800951a:	2b00      	cmp	r3, #0
 800951c:	da0f      	bge.n	800953e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	f003 020f 	and.w	r2, r3, #15
 8009524:	4613      	mov	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	3338      	adds	r3, #56	; 0x38
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	3304      	adds	r3, #4
 8009534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	705a      	strb	r2, [r3, #1]
 800953c:	e00f      	b.n	800955e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	4613      	mov	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800956a:	883a      	ldrh	r2, [r7, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	78ba      	ldrb	r2, [r7, #2]
 8009574:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009588:	78bb      	ldrb	r3, [r7, #2]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d102      	bne.n	8009594 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_PCD_EP_Open+0xaa>
 800959e:	2302      	movs	r3, #2
 80095a0:	e00e      	b.n	80095c0 <HAL_PCD_EP_Open+0xc8>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 fe09 	bl	800c1c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80095be:	7afb      	ldrb	r3, [r7, #11]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80095d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0f      	bge.n	80095fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	f003 020f 	and.w	r2, r3, #15
 80095e2:	4613      	mov	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	3338      	adds	r3, #56	; 0x38
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	4413      	add	r3, r2
 80095f0:	3304      	adds	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	705a      	strb	r2, [r3, #1]
 80095fa:	e00f      	b.n	800961c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	4613      	mov	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	3304      	adds	r3, #4
 8009614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	b2da      	uxtb	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_PCD_EP_Close+0x6e>
 8009632:	2302      	movs	r3, #2
 8009634:	e00e      	b.n	8009654 <HAL_PCD_EP_Close+0x8c>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	4618      	mov	r0, r3
 8009646:	f002 fe47 	bl	800c2d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	460b      	mov	r3, r1
 800966a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	f003 020f 	and.w	r2, r3, #15
 8009672:	4613      	mov	r3, r2
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	3304      	adds	r3, #4
 8009684:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2200      	movs	r2, #0
 800969c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d102      	bne.n	80096b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	f003 f8ca 	bl	800c868 <USB_EP0StartXfer>
 80096d4:	e008      	b.n	80096e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	6979      	ldr	r1, [r7, #20]
 80096e4:	f002 fe7c 	bl	800c3e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	f003 020f 	and.w	r2, r3, #15
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	4613      	mov	r3, r2
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	440b      	add	r3, r1
 8009710:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009714:	681b      	ldr	r3, [r3, #0]
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
 800972e:	460b      	mov	r3, r1
 8009730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	f003 020f 	and.w	r2, r3, #15
 8009738:	4613      	mov	r3, r2
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	3338      	adds	r3, #56	; 0x38
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	3304      	adds	r3, #4
 8009748:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2201      	movs	r2, #1
 8009760:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	b2da      	uxtb	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d102      	bne.n	800977c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	f003 030f 	and.w	r3, r3, #15
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	f003 f868 	bl	800c868 <USB_EP0StartXfer>
 8009798:	e008      	b.n	80097ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	6979      	ldr	r1, [r7, #20]
 80097a8:	f002 fe1a 	bl	800c3e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	f003 020f 	and.w	r2, r3, #15
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d901      	bls.n	80097d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e050      	b.n	8009876 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0f      	bge.n	80097fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	f003 020f 	and.w	r2, r3, #15
 80097e2:	4613      	mov	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	3338      	adds	r3, #56	; 0x38
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2201      	movs	r2, #1
 80097f8:	705a      	strb	r2, [r3, #1]
 80097fa:	e00d      	b.n	8009818 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097fc:	78fa      	ldrb	r2, [r7, #3]
 80097fe:	4613      	mov	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	1a9b      	subs	r3, r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	3304      	adds	r3, #4
 8009810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	b2da      	uxtb	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009830:	2b01      	cmp	r3, #1
 8009832:	d101      	bne.n	8009838 <HAL_PCD_EP_SetStall+0x82>
 8009834:	2302      	movs	r3, #2
 8009836:	e01e      	b.n	8009876 <HAL_PCD_EP_SetStall+0xc0>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68f9      	ldr	r1, [r7, #12]
 8009846:	4618      	mov	r0, r3
 8009848:	f003 f9bf 	bl	800cbca <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	b2d9      	uxtb	r1, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009866:	461a      	mov	r2, r3
 8009868:	f003 fbb0 	bl	800cfcc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	f003 020f 	and.w	r2, r3, #15
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d901      	bls.n	800989c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e042      	b.n	8009922 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800989c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0f      	bge.n	80098c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	f003 020f 	and.w	r2, r3, #15
 80098aa:	4613      	mov	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	3338      	adds	r3, #56	; 0x38
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	4413      	add	r3, r2
 80098b8:	3304      	adds	r3, #4
 80098ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	705a      	strb	r2, [r3, #1]
 80098c2:	e00f      	b.n	80098e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	1a9b      	subs	r3, r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <HAL_PCD_EP_ClrStall+0x86>
 8009900:	2302      	movs	r3, #2
 8009902:	e00e      	b.n	8009922 <HAL_PCD_EP_ClrStall+0xa4>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68f9      	ldr	r1, [r7, #12]
 8009912:	4618      	mov	r0, r3
 8009914:	f003 f9c7 	bl	800cca6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b08a      	sub	sp, #40	; 0x28
 800992e:	af02      	add	r7, sp, #8
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	3338      	adds	r3, #56	; 0x38
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	699a      	ldr	r2, [r3, #24]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d901      	bls.n	8009962 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e06c      	b.n	8009a3c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	695a      	ldr	r2, [r3, #20]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	429a      	cmp	r2, r3
 8009976:	d902      	bls.n	800997e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3303      	adds	r3, #3
 8009982:	089b      	lsrs	r3, r3, #2
 8009984:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009986:	e02b      	b.n	80099e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	695a      	ldr	r2, [r3, #20]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	429a      	cmp	r2, r3
 800999c:	d902      	bls.n	80099a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	3303      	adds	r3, #3
 80099a8:	089b      	lsrs	r3, r3, #2
 80099aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68d9      	ldr	r1, [r3, #12]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4603      	mov	r3, r0
 80099c2:	6978      	ldr	r0, [r7, #20]
 80099c4:	f003 f8a3 	bl	800cb0e <USB_WritePacket>

    ep->xfer_buff  += len;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	441a      	add	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d809      	bhi.n	8009a0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d203      	bcs.n	8009a0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1be      	bne.n	8009988 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	695a      	ldr	r2, [r3, #20]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d811      	bhi.n	8009a3a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	43db      	mvns	r3, r3
 8009a30:	6939      	ldr	r1, [r7, #16]
 8009a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a36:	4013      	ands	r3, r2
 8009a38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	333c      	adds	r3, #60	; 0x3c
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	f040 80b3 	bne.w	8009be2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d028      	beq.n	8009ad8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4a70      	ldr	r2, [pc, #448]	; (8009c4c <PCD_EP_OutXfrComplete_int+0x208>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d90e      	bls.n	8009aac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aaa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f008 f831 	bl	8011b14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009abc:	461a      	mov	r2, r3
 8009abe:	2101      	movs	r1, #1
 8009ac0:	f003 fa84 	bl	800cfcc <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	6093      	str	r3, [r2, #8]
 8009ad6:	e0b3      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aee:	461a      	mov	r2, r3
 8009af0:	2320      	movs	r3, #32
 8009af2:	6093      	str	r3, [r2, #8]
 8009af4:	e0a4      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 809f 	bne.w	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4a51      	ldr	r2, [pc, #324]	; (8009c4c <PCD_EP_OutXfrComplete_int+0x208>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d90f      	bls.n	8009b2a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b20:	461a      	mov	r2, r3
 8009b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b26:	6093      	str	r3, [r2, #8]
 8009b28:	e08a      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b3c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	0159      	lsls	r1, r3, #5
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	440b      	add	r3, r1
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009b50:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	4613      	mov	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4403      	add	r3, r0
 8009b60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009b64:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	00db      	lsls	r3, r3, #3
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4403      	add	r3, r0
 8009b88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4419      	add	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4613      	mov	r3, r2
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4403      	add	r3, r0
 8009b9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ba2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f007 ffc4 	bl	8011b38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d144      	bne.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	440b      	add	r3, r1
 8009bc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d138      	bne.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2101      	movs	r1, #1
 8009bdc:	f003 f9f6 	bl	800cfcc <USB_EP0_OutStart>
 8009be0:	e02e      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a1a      	ldr	r2, [pc, #104]	; (8009c50 <PCD_EP_OutXfrComplete_int+0x20c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d124      	bne.n	8009c34 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c00:	461a      	mov	r2, r3
 8009c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c06:	6093      	str	r3, [r2, #8]
 8009c08:	e01a      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f003 0320 	and.w	r3, r3, #32
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	2320      	movs	r3, #32
 8009c24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f007 ff83 	bl	8011b38 <HAL_PCD_DataOutStageCallback>
 8009c32:	e005      	b.n	8009c40 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f007 ff7c 	bl	8011b38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	4f54300a 	.word	0x4f54300a
 8009c50:	4f54310a 	.word	0x4f54310a

08009c54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	333c      	adds	r3, #60	; 0x3c
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d113      	bne.n	8009cb2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d922      	bls.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01d      	beq.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca8:	461a      	mov	r2, r3
 8009caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cae:	6093      	str	r3, [r2, #8]
 8009cb0:	e012      	b.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4a16      	ldr	r2, [pc, #88]	; (8009d10 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10e      	bne.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d009      	beq.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f007 ff1b 	bl	8011b14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4a0a      	ldr	r2, [pc, #40]	; (8009d0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d90c      	bls.n	8009d00 <PCD_EP_OutSetupPacket_int+0xac>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d108      	bne.n	8009d00 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	f003 f966 	bl	800cfcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	4f54300a 	.word	0x4f54300a
 8009d10:	4f54310a 	.word	0x4f54310a

08009d14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	70fb      	strb	r3, [r7, #3]
 8009d20:	4613      	mov	r3, r2
 8009d22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d107      	bne.n	8009d42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009d32:	883b      	ldrh	r3, [r7, #0]
 8009d34:	0419      	lsls	r1, r3, #16
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8009d40:	e028      	b.n	8009d94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	0c1b      	lsrs	r3, r3, #16
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
 8009d54:	e00d      	b.n	8009d72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	3340      	adds	r3, #64	; 0x40
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	73fb      	strb	r3, [r7, #15]
 8009d72:	7bfa      	ldrb	r2, [r7, #15]
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d3ec      	bcc.n	8009d56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009d7c:	883b      	ldrh	r3, [r7, #0]
 8009d7e:	0418      	lsls	r0, r3, #16
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4302      	orrs	r2, r0
 8009d8c:	3340      	adds	r3, #64	; 0x40
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	887a      	ldrh	r2, [r7, #2]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e25b      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d075      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dfa:	4ba3      	ldr	r3, [pc, #652]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 030c 	and.w	r3, r3, #12
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d00c      	beq.n	8009e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e06:	4ba0      	ldr	r3, [pc, #640]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	d112      	bne.n	8009e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e12:	4b9d      	ldr	r3, [pc, #628]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e1e:	d10b      	bne.n	8009e38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e20:	4b99      	ldr	r3, [pc, #612]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d05b      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x108>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d157      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e236      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e40:	d106      	bne.n	8009e50 <HAL_RCC_OscConfig+0x74>
 8009e42:	4b91      	ldr	r3, [pc, #580]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a90      	ldr	r2, [pc, #576]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	e01d      	b.n	8009e8c <HAL_RCC_OscConfig+0xb0>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e58:	d10c      	bne.n	8009e74 <HAL_RCC_OscConfig+0x98>
 8009e5a:	4b8b      	ldr	r3, [pc, #556]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a8a      	ldr	r2, [pc, #552]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	4b88      	ldr	r3, [pc, #544]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a87      	ldr	r2, [pc, #540]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	e00b      	b.n	8009e8c <HAL_RCC_OscConfig+0xb0>
 8009e74:	4b84      	ldr	r3, [pc, #528]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a83      	ldr	r2, [pc, #524]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	4b81      	ldr	r3, [pc, #516]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a80      	ldr	r2, [pc, #512]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d013      	beq.n	8009ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e94:	f7fd ff60 	bl	8007d58 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e9c:	f7fd ff5c 	bl	8007d58 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b64      	cmp	r3, #100	; 0x64
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e1fb      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eae:	4b76      	ldr	r3, [pc, #472]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f0      	beq.n	8009e9c <HAL_RCC_OscConfig+0xc0>
 8009eba:	e014      	b.n	8009ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ebc:	f7fd ff4c 	bl	8007d58 <HAL_GetTick>
 8009ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ec4:	f7fd ff48 	bl	8007d58 <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	2b64      	cmp	r3, #100	; 0x64
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e1e7      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ed6:	4b6c      	ldr	r3, [pc, #432]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1f0      	bne.n	8009ec4 <HAL_RCC_OscConfig+0xe8>
 8009ee2:	e000      	b.n	8009ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d063      	beq.n	8009fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ef2:	4b65      	ldr	r3, [pc, #404]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 030c 	and.w	r3, r3, #12
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00b      	beq.n	8009f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009efe:	4b62      	ldr	r3, [pc, #392]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	d11c      	bne.n	8009f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f0a:	4b5f      	ldr	r3, [pc, #380]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d116      	bne.n	8009f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f16:	4b5c      	ldr	r3, [pc, #368]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_RCC_OscConfig+0x152>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d001      	beq.n	8009f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e1bb      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2e:	4b56      	ldr	r3, [pc, #344]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	4952      	ldr	r1, [pc, #328]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f42:	e03a      	b.n	8009fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d020      	beq.n	8009f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f4c:	4b4f      	ldr	r3, [pc, #316]	; (800a08c <HAL_RCC_OscConfig+0x2b0>)
 8009f4e:	2201      	movs	r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f52:	f7fd ff01 	bl	8007d58 <HAL_GetTick>
 8009f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f5a:	f7fd fefd 	bl	8007d58 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e19c      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f6c:	4b46      	ldr	r3, [pc, #280]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f0      	beq.n	8009f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f78:	4b43      	ldr	r3, [pc, #268]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	4940      	ldr	r1, [pc, #256]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	600b      	str	r3, [r1, #0]
 8009f8c:	e015      	b.n	8009fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f8e:	4b3f      	ldr	r3, [pc, #252]	; (800a08c <HAL_RCC_OscConfig+0x2b0>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f94:	f7fd fee0 	bl	8007d58 <HAL_GetTick>
 8009f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f9a:	e008      	b.n	8009fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f9c:	f7fd fedc 	bl	8007d58 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d901      	bls.n	8009fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e17b      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fae:	4b36      	ldr	r3, [pc, #216]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f0      	bne.n	8009f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d030      	beq.n	800a028 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d016      	beq.n	8009ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fce:	4b30      	ldr	r3, [pc, #192]	; (800a090 <HAL_RCC_OscConfig+0x2b4>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd4:	f7fd fec0 	bl	8007d58 <HAL_GetTick>
 8009fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fda:	e008      	b.n	8009fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fdc:	f7fd febc 	bl	8007d58 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e15b      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fee:	4b26      	ldr	r3, [pc, #152]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 8009ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0f0      	beq.n	8009fdc <HAL_RCC_OscConfig+0x200>
 8009ffa:	e015      	b.n	800a028 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ffc:	4b24      	ldr	r3, [pc, #144]	; (800a090 <HAL_RCC_OscConfig+0x2b4>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a002:	f7fd fea9 	bl	8007d58 <HAL_GetTick>
 800a006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a008:	e008      	b.n	800a01c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a00a:	f7fd fea5 	bl	8007d58 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d901      	bls.n	800a01c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e144      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a01c:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 800a01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1f0      	bne.n	800a00a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 80a0 	beq.w	800a176 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a03a:	4b13      	ldr	r3, [pc, #76]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10f      	bne.n	800a066 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	4a0e      	ldr	r2, [pc, #56]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 800a050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a054:	6413      	str	r3, [r2, #64]	; 0x40
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <HAL_RCC_OscConfig+0x2ac>)
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a05e:	60bb      	str	r3, [r7, #8]
 800a060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <HAL_RCC_OscConfig+0x2b8>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d121      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <HAL_RCC_OscConfig+0x2b8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a07      	ldr	r2, [pc, #28]	; (800a094 <HAL_RCC_OscConfig+0x2b8>)
 800a078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a07e:	f7fd fe6b 	bl	8007d58 <HAL_GetTick>
 800a082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a084:	e011      	b.n	800a0aa <HAL_RCC_OscConfig+0x2ce>
 800a086:	bf00      	nop
 800a088:	40023800 	.word	0x40023800
 800a08c:	42470000 	.word	0x42470000
 800a090:	42470e80 	.word	0x42470e80
 800a094:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a098:	f7fd fe5e 	bl	8007d58 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d901      	bls.n	800a0aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e0fd      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0aa:	4b81      	ldr	r3, [pc, #516]	; (800a2b0 <HAL_RCC_OscConfig+0x4d4>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f0      	beq.n	800a098 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d106      	bne.n	800a0cc <HAL_RCC_OscConfig+0x2f0>
 800a0be:	4b7d      	ldr	r3, [pc, #500]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c2:	4a7c      	ldr	r2, [pc, #496]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0c4:	f043 0301 	orr.w	r3, r3, #1
 800a0c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ca:	e01c      	b.n	800a106 <HAL_RCC_OscConfig+0x32a>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2b05      	cmp	r3, #5
 800a0d2:	d10c      	bne.n	800a0ee <HAL_RCC_OscConfig+0x312>
 800a0d4:	4b77      	ldr	r3, [pc, #476]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d8:	4a76      	ldr	r2, [pc, #472]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0da:	f043 0304 	orr.w	r3, r3, #4
 800a0de:	6713      	str	r3, [r2, #112]	; 0x70
 800a0e0:	4b74      	ldr	r3, [pc, #464]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e4:	4a73      	ldr	r2, [pc, #460]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ec:	e00b      	b.n	800a106 <HAL_RCC_OscConfig+0x32a>
 800a0ee:	4b71      	ldr	r3, [pc, #452]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	4a70      	ldr	r2, [pc, #448]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0f4:	f023 0301 	bic.w	r3, r3, #1
 800a0f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0fa:	4b6e      	ldr	r3, [pc, #440]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fe:	4a6d      	ldr	r2, [pc, #436]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a100:	f023 0304 	bic.w	r3, r3, #4
 800a104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d015      	beq.n	800a13a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10e:	f7fd fe23 	bl	8007d58 <HAL_GetTick>
 800a112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a114:	e00a      	b.n	800a12c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a116:	f7fd fe1f 	bl	8007d58 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	f241 3288 	movw	r2, #5000	; 0x1388
 800a124:	4293      	cmp	r3, r2
 800a126:	d901      	bls.n	800a12c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e0bc      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a12c:	4b61      	ldr	r3, [pc, #388]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0ee      	beq.n	800a116 <HAL_RCC_OscConfig+0x33a>
 800a138:	e014      	b.n	800a164 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a13a:	f7fd fe0d 	bl	8007d58 <HAL_GetTick>
 800a13e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a140:	e00a      	b.n	800a158 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a142:	f7fd fe09 	bl	8007d58 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a150:	4293      	cmp	r3, r2
 800a152:	d901      	bls.n	800a158 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e0a6      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a158:	4b56      	ldr	r3, [pc, #344]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1ee      	bne.n	800a142 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d105      	bne.n	800a176 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a16a:	4b52      	ldr	r3, [pc, #328]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	4a51      	ldr	r2, [pc, #324]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a174:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8092 	beq.w	800a2a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a180:	4b4c      	ldr	r3, [pc, #304]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f003 030c 	and.w	r3, r3, #12
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d05c      	beq.n	800a246 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d141      	bne.n	800a218 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a194:	4b48      	ldr	r3, [pc, #288]	; (800a2b8 <HAL_RCC_OscConfig+0x4dc>)
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a19a:	f7fd fddd 	bl	8007d58 <HAL_GetTick>
 800a19e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a0:	e008      	b.n	800a1b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1a2:	f7fd fdd9 	bl	8007d58 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d901      	bls.n	800a1b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e078      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b4:	4b3f      	ldr	r3, [pc, #252]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f0      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	019b      	lsls	r3, r3, #6
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d6:	085b      	lsrs	r3, r3, #1
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	061b      	lsls	r3, r3, #24
 800a1e4:	4933      	ldr	r1, [pc, #204]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1ea:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <HAL_RCC_OscConfig+0x4dc>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1f0:	f7fd fdb2 	bl	8007d58 <HAL_GetTick>
 800a1f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1f8:	f7fd fdae 	bl	8007d58 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e04d      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a20a:	4b2a      	ldr	r3, [pc, #168]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0f0      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x41c>
 800a216:	e045      	b.n	800a2a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a218:	4b27      	ldr	r3, [pc, #156]	; (800a2b8 <HAL_RCC_OscConfig+0x4dc>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a21e:	f7fd fd9b 	bl	8007d58 <HAL_GetTick>
 800a222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a224:	e008      	b.n	800a238 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a226:	f7fd fd97 	bl	8007d58 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e036      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f0      	bne.n	800a226 <HAL_RCC_OscConfig+0x44a>
 800a244:	e02e      	b.n	800a2a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e029      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a252:	4b18      	ldr	r3, [pc, #96]	; (800a2b4 <HAL_RCC_OscConfig+0x4d8>)
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	429a      	cmp	r2, r3
 800a264:	d11c      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a270:	429a      	cmp	r2, r3
 800a272:	d115      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a27a:	4013      	ands	r3, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a280:	4293      	cmp	r3, r2
 800a282:	d10d      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a28e:	429a      	cmp	r2, r3
 800a290:	d106      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d001      	beq.n	800a2a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	40007000 	.word	0x40007000
 800a2b4:	40023800 	.word	0x40023800
 800a2b8:	42470060 	.word	0x42470060

0800a2bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e0cc      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d0:	4b68      	ldr	r3, [pc, #416]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d90c      	bls.n	800a2f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2de:	4b65      	ldr	r3, [pc, #404]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2e6:	4b63      	ldr	r3, [pc, #396]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 030f 	and.w	r3, r3, #15
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d001      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0b8      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d020      	beq.n	800a346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a310:	4b59      	ldr	r3, [pc, #356]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4a58      	ldr	r2, [pc, #352]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a31a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a328:	4b53      	ldr	r3, [pc, #332]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	4a52      	ldr	r2, [pc, #328]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a32e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a334:	4b50      	ldr	r3, [pc, #320]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	494d      	ldr	r1, [pc, #308]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a342:	4313      	orrs	r3, r2
 800a344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d044      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d107      	bne.n	800a36a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a35a:	4b47      	ldr	r3, [pc, #284]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d119      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e07f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d003      	beq.n	800a37a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a376:	2b03      	cmp	r3, #3
 800a378:	d107      	bne.n	800a38a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a37a:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e06f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a38a:	4b3b      	ldr	r3, [pc, #236]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e067      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a39a:	4b37      	ldr	r3, [pc, #220]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f023 0203 	bic.w	r2, r3, #3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	4934      	ldr	r1, [pc, #208]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3ac:	f7fd fcd4 	bl	8007d58 <HAL_GetTick>
 800a3b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b2:	e00a      	b.n	800a3ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3b4:	f7fd fcd0 	bl	8007d58 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e04f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ca:	4b2b      	ldr	r3, [pc, #172]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 020c 	and.w	r2, r3, #12
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d1eb      	bne.n	800a3b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d20c      	bcs.n	800a404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ea:	4b22      	ldr	r3, [pc, #136]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3f2:	4b20      	ldr	r3, [pc, #128]	; (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 030f 	and.w	r3, r3, #15
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d001      	beq.n	800a404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e032      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d008      	beq.n	800a422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a410:	4b19      	ldr	r3, [pc, #100]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4916      	ldr	r1, [pc, #88]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a42e:	4b12      	ldr	r3, [pc, #72]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	490e      	ldr	r1, [pc, #56]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a442:	f000 f821 	bl	800a488 <HAL_RCC_GetSysClockFreq>
 800a446:	4601      	mov	r1, r0
 800a448:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	091b      	lsrs	r3, r3, #4
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <HAL_RCC_ClockConfig+0x1c0>)
 800a454:	5cd3      	ldrb	r3, [r2, r3]
 800a456:	fa21 f303 	lsr.w	r3, r1, r3
 800a45a:	4a09      	ldr	r2, [pc, #36]	; (800a480 <HAL_RCC_ClockConfig+0x1c4>)
 800a45c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <HAL_RCC_ClockConfig+0x1c8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f7fd fa50 	bl	8007908 <HAL_InitTick>

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	40023c00 	.word	0x40023c00
 800a478:	40023800 	.word	0x40023800
 800a47c:	08018294 	.word	0x08018294
 800a480:	20000cb4 	.word	0x20000cb4
 800a484:	20000cb8 	.word	0x20000cb8

0800a488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	2300      	movs	r3, #0
 800a498:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a49e:	4b63      	ldr	r3, [pc, #396]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 030c 	and.w	r3, r3, #12
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d007      	beq.n	800a4ba <HAL_RCC_GetSysClockFreq+0x32>
 800a4aa:	2b08      	cmp	r3, #8
 800a4ac:	d008      	beq.n	800a4c0 <HAL_RCC_GetSysClockFreq+0x38>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 80b4 	bne.w	800a61c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4b4:	4b5e      	ldr	r3, [pc, #376]	; (800a630 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a4b6:	60bb      	str	r3, [r7, #8]
       break;
 800a4b8:	e0b3      	b.n	800a622 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4ba:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a4bc:	60bb      	str	r3, [r7, #8]
      break;
 800a4be:	e0b0      	b.n	800a622 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4c0:	4b5a      	ldr	r3, [pc, #360]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4ca:	4b58      	ldr	r3, [pc, #352]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d04a      	beq.n	800a56c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4d6:	4b55      	ldr	r3, [pc, #340]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	099b      	lsrs	r3, r3, #6
 800a4dc:	f04f 0400 	mov.w	r4, #0
 800a4e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a4e4:	f04f 0200 	mov.w	r2, #0
 800a4e8:	ea03 0501 	and.w	r5, r3, r1
 800a4ec:	ea04 0602 	and.w	r6, r4, r2
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	f04f 0300 	mov.w	r3, #0
 800a4f8:	f04f 0400 	mov.w	r4, #0
 800a4fc:	0154      	lsls	r4, r2, #5
 800a4fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a502:	014b      	lsls	r3, r1, #5
 800a504:	4619      	mov	r1, r3
 800a506:	4622      	mov	r2, r4
 800a508:	1b49      	subs	r1, r1, r5
 800a50a:	eb62 0206 	sbc.w	r2, r2, r6
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	f04f 0400 	mov.w	r4, #0
 800a516:	0194      	lsls	r4, r2, #6
 800a518:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a51c:	018b      	lsls	r3, r1, #6
 800a51e:	1a5b      	subs	r3, r3, r1
 800a520:	eb64 0402 	sbc.w	r4, r4, r2
 800a524:	f04f 0100 	mov.w	r1, #0
 800a528:	f04f 0200 	mov.w	r2, #0
 800a52c:	00e2      	lsls	r2, r4, #3
 800a52e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a532:	00d9      	lsls	r1, r3, #3
 800a534:	460b      	mov	r3, r1
 800a536:	4614      	mov	r4, r2
 800a538:	195b      	adds	r3, r3, r5
 800a53a:	eb44 0406 	adc.w	r4, r4, r6
 800a53e:	f04f 0100 	mov.w	r1, #0
 800a542:	f04f 0200 	mov.w	r2, #0
 800a546:	0262      	lsls	r2, r4, #9
 800a548:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a54c:	0259      	lsls	r1, r3, #9
 800a54e:	460b      	mov	r3, r1
 800a550:	4614      	mov	r4, r2
 800a552:	4618      	mov	r0, r3
 800a554:	4621      	mov	r1, r4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f04f 0400 	mov.w	r4, #0
 800a55c:	461a      	mov	r2, r3
 800a55e:	4623      	mov	r3, r4
 800a560:	f7f6 fba2 	bl	8000ca8 <__aeabi_uldivmod>
 800a564:	4603      	mov	r3, r0
 800a566:	460c      	mov	r4, r1
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	e049      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a56c:	4b2f      	ldr	r3, [pc, #188]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	099b      	lsrs	r3, r3, #6
 800a572:	f04f 0400 	mov.w	r4, #0
 800a576:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	ea03 0501 	and.w	r5, r3, r1
 800a582:	ea04 0602 	and.w	r6, r4, r2
 800a586:	4629      	mov	r1, r5
 800a588:	4632      	mov	r2, r6
 800a58a:	f04f 0300 	mov.w	r3, #0
 800a58e:	f04f 0400 	mov.w	r4, #0
 800a592:	0154      	lsls	r4, r2, #5
 800a594:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a598:	014b      	lsls	r3, r1, #5
 800a59a:	4619      	mov	r1, r3
 800a59c:	4622      	mov	r2, r4
 800a59e:	1b49      	subs	r1, r1, r5
 800a5a0:	eb62 0206 	sbc.w	r2, r2, r6
 800a5a4:	f04f 0300 	mov.w	r3, #0
 800a5a8:	f04f 0400 	mov.w	r4, #0
 800a5ac:	0194      	lsls	r4, r2, #6
 800a5ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a5b2:	018b      	lsls	r3, r1, #6
 800a5b4:	1a5b      	subs	r3, r3, r1
 800a5b6:	eb64 0402 	sbc.w	r4, r4, r2
 800a5ba:	f04f 0100 	mov.w	r1, #0
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	00e2      	lsls	r2, r4, #3
 800a5c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a5c8:	00d9      	lsls	r1, r3, #3
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	195b      	adds	r3, r3, r5
 800a5d0:	eb44 0406 	adc.w	r4, r4, r6
 800a5d4:	f04f 0100 	mov.w	r1, #0
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	02a2      	lsls	r2, r4, #10
 800a5de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a5e2:	0299      	lsls	r1, r3, #10
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	f7f6 fb57 	bl	8000ca8 <__aeabi_uldivmod>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	3301      	adds	r3, #1
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	fbb2 f3f3 	udiv	r3, r2, r3
 800a618:	60bb      	str	r3, [r7, #8]
      break;
 800a61a:	e002      	b.n	800a622 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a61c:	4b04      	ldr	r3, [pc, #16]	; (800a630 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a61e:	60bb      	str	r3, [r7, #8]
      break;
 800a620:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a622:	68bb      	ldr	r3, [r7, #8]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a62c:	40023800 	.word	0x40023800
 800a630:	00f42400 	.word	0x00f42400
 800a634:	007a1200 	.word	0x007a1200

0800a638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a63c:	4b03      	ldr	r3, [pc, #12]	; (800a64c <HAL_RCC_GetHCLKFreq+0x14>)
 800a63e:	681b      	ldr	r3, [r3, #0]
}
 800a640:	4618      	mov	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000cb4 	.word	0x20000cb4

0800a650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a654:	f7ff fff0 	bl	800a638 <HAL_RCC_GetHCLKFreq>
 800a658:	4601      	mov	r1, r0
 800a65a:	4b05      	ldr	r3, [pc, #20]	; (800a670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	0a9b      	lsrs	r3, r3, #10
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	4a03      	ldr	r2, [pc, #12]	; (800a674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a666:	5cd3      	ldrb	r3, [r2, r3]
 800a668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	40023800 	.word	0x40023800
 800a674:	080182a4 	.word	0x080182a4

0800a678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a67c:	f7ff ffdc 	bl	800a638 <HAL_RCC_GetHCLKFreq>
 800a680:	4601      	mov	r1, r0
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	0b5b      	lsrs	r3, r3, #13
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	4a03      	ldr	r2, [pc, #12]	; (800a69c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a68e:	5cd3      	ldrb	r3, [r2, r3]
 800a690:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a694:	4618      	mov	r0, r3
 800a696:	bd80      	pop	{r7, pc}
 800a698:	40023800 	.word	0x40023800
 800a69c:	080182a4 	.word	0x080182a4

0800a6a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	220f      	movs	r2, #15
 800a6ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6b0:	4b12      	ldr	r3, [pc, #72]	; (800a6fc <HAL_RCC_GetClockConfig+0x5c>)
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f003 0203 	and.w	r2, r3, #3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <HAL_RCC_GetClockConfig+0x5c>)
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a6c8:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <HAL_RCC_GetClockConfig+0x5c>)
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a6d4:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <HAL_RCC_GetClockConfig+0x5c>)
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	08db      	lsrs	r3, r3, #3
 800a6da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6e2:	4b07      	ldr	r3, [pc, #28]	; (800a700 <HAL_RCC_GetClockConfig+0x60>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 020f 	and.w	r2, r3, #15
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	601a      	str	r2, [r3, #0]
}
 800a6ee:	bf00      	nop
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40023800 	.word	0x40023800
 800a700:	40023c00 	.word	0x40023c00

0800a704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e01d      	b.n	800a752 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f815 	bl	800a75a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f000 f968 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a76e:	b480      	push	{r7}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f042 0201 	orr.w	r2, r2, #1
 800a784:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b06      	cmp	r3, #6
 800a796:	d007      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d122      	bne.n	800a812 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d11b      	bne.n	800a812 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f06f 0202 	mvn.w	r2, #2
 800a7e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f8ee 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a7fe:	e005      	b.n	800a80c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f8e0 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8f1 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d122      	bne.n	800a866 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d11b      	bne.n	800a866 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0204 	mvn.w	r2, #4
 800a836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d003      	beq.n	800a854 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f8c4 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a852:	e005      	b.n	800a860 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f8b6 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f8c7 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b08      	cmp	r3, #8
 800a872:	d122      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f003 0308 	and.w	r3, r3, #8
 800a87e:	2b08      	cmp	r3, #8
 800a880:	d11b      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f06f 0208 	mvn.w	r2, #8
 800a88a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2204      	movs	r2, #4
 800a890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f89a 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a8a6:	e005      	b.n	800a8b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f88c 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f89d 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d122      	bne.n	800a90e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f003 0310 	and.w	r3, r3, #16
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d11b      	bne.n	800a90e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f06f 0210 	mvn.w	r2, #16
 800a8de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2208      	movs	r2, #8
 800a8e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f870 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a8fa:	e005      	b.n	800a908 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f862 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f873 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d10e      	bne.n	800a93a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b01      	cmp	r3, #1
 800a928:	d107      	bne.n	800a93a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f06f 0201 	mvn.w	r2, #1
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7f8 fcf3 	bl	8003320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a944:	2b80      	cmp	r3, #128	; 0x80
 800a946:	d10e      	bne.n	800a966 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a952:	2b80      	cmp	r3, #128	; 0x80
 800a954:	d107      	bne.n	800a966 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a95e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f903 	bl	800ab6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a970:	2b40      	cmp	r3, #64	; 0x40
 800a972:	d10e      	bne.n	800a992 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d107      	bne.n	800a992 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f838 	bl	800aa02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d10e      	bne.n	800a9be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d107      	bne.n	800a9be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f06f 0220 	mvn.w	r2, #32
 800a9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f8cd 	bl	800ab58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa0a:	bf00      	nop
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
	...

0800aa18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a40      	ldr	r2, [pc, #256]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d013      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa36:	d00f      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a3d      	ldr	r2, [pc, #244]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00b      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a3c      	ldr	r2, [pc, #240]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d007      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a3b      	ldr	r2, [pc, #236]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a3a      	ldr	r2, [pc, #232]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d108      	bne.n	800aa6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a2f      	ldr	r2, [pc, #188]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d02b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa78:	d027      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a2c      	ldr	r2, [pc, #176]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d023      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d01f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a2a      	ldr	r2, [pc, #168]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d01b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a29      	ldr	r2, [pc, #164]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d017      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a28      	ldr	r2, [pc, #160]	; (800ab40 <TIM_Base_SetConfig+0x128>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <TIM_Base_SetConfig+0x12c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <TIM_Base_SetConfig+0x130>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a25      	ldr	r2, [pc, #148]	; (800ab4c <TIM_Base_SetConfig+0x134>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d007      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <TIM_Base_SetConfig+0x138>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <TIM_Base_SetConfig+0x13c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d108      	bne.n	800aadc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0xf8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d103      	bne.n	800ab18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	615a      	str	r2, [r3, #20]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010000 	.word	0x40010000
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40014400 	.word	0x40014400
 800ab48:	40014800 	.word	0x40014800
 800ab4c:	40001800 	.word	0x40001800
 800ab50:	40001c00 	.word	0x40001c00
 800ab54:	40002000 	.word	0x40002000

0800ab58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e03f      	b.n	800ac12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7fc ffcc 	bl	8007b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2224      	movs	r2, #36	; 0x24
 800abb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fb6b 	bl	800b2a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	695a      	ldr	r2, [r3, #20]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2220      	movs	r2, #32
 800ac04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	4613      	mov	r3, r2
 800ac28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d153      	bne.n	800acde <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <HAL_UART_Transmit_DMA+0x26>
 800ac3c:	88fb      	ldrh	r3, [r7, #6]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e04c      	b.n	800ace0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_UART_Transmit_DMA+0x38>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e045      	b.n	800ace0 <HAL_UART_Transmit_DMA+0xc4>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	88fa      	ldrh	r2, [r7, #6]
 800ac66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	88fa      	ldrh	r2, [r7, #6]
 800ac6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2221      	movs	r2, #33	; 0x21
 800ac78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	4a19      	ldr	r2, [pc, #100]	; (800ace8 <HAL_UART_Transmit_DMA+0xcc>)
 800ac82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac88:	4a18      	ldr	r2, [pc, #96]	; (800acec <HAL_UART_Transmit_DMA+0xd0>)
 800ac8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac90:	4a17      	ldr	r2, [pc, #92]	; (800acf0 <HAL_UART_Transmit_DMA+0xd4>)
 800ac92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac98:	2200      	movs	r2, #0
 800ac9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	6819      	ldr	r1, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3304      	adds	r3, #4
 800acb0:	461a      	mov	r2, r3
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	f7fd fa0e 	bl	80080d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acc0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	695a      	ldr	r2, [r3, #20]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acd8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e000      	b.n	800ace0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800acde:	2302      	movs	r3, #2
  }
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	0800af31 	.word	0x0800af31
 800acec:	0800af83 	.word	0x0800af83
 800acf0:	0800af9f 	.word	0x0800af9f

0800acf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f003 030f 	and.w	r3, r3, #15
 800ad22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10d      	bne.n	800ad46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f003 0320 	and.w	r3, r3, #32
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d008      	beq.n	800ad46 <HAL_UART_IRQHandler+0x52>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f003 0320 	and.w	r3, r3, #32
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa2d 	bl	800b19e <UART_Receive_IT>
      return;
 800ad44:	e0d1      	b.n	800aeea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 80b0 	beq.w	800aeae <HAL_UART_IRQHandler+0x1ba>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d105      	bne.n	800ad64 <HAL_UART_IRQHandler+0x70>
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 80a5 	beq.w	800aeae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_UART_IRQHandler+0x90>
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7c:	f043 0201 	orr.w	r2, r3, #1
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <HAL_UART_IRQHandler+0xb0>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9c:	f043 0202 	orr.w	r2, r3, #2
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00a      	beq.n	800adc4 <HAL_UART_IRQHandler+0xd0>
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbc:	f043 0204 	orr.w	r2, r3, #4
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	f003 0308 	and.w	r3, r3, #8
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00f      	beq.n	800adee <HAL_UART_IRQHandler+0xfa>
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <HAL_UART_IRQHandler+0xee>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade6:	f043 0208 	orr.w	r2, r3, #8
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d078      	beq.n	800aee8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <HAL_UART_IRQHandler+0x11c>
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f9c7 	bl	800b19e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1a:	2b40      	cmp	r3, #64	; 0x40
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <HAL_UART_IRQHandler+0x144>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d031      	beq.n	800ae9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f910 	bl	800b05e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae48:	2b40      	cmp	r3, #64	; 0x40
 800ae4a:	d123      	bne.n	800ae94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695a      	ldr	r2, [r3, #20]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d013      	beq.n	800ae8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae68:	4a21      	ldr	r2, [pc, #132]	; (800aef0 <HAL_UART_IRQHandler+0x1fc>)
 800ae6a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fd f987 	bl	8008184 <HAL_DMA_Abort_IT>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d016      	beq.n	800aeaa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae86:	4610      	mov	r0, r2
 800ae88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8a:	e00e      	b.n	800aeaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 f845 	bl	800af1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae92:	e00a      	b.n	800aeaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f841 	bl	800af1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9a:	e006      	b.n	800aeaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f83d 	bl	800af1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800aea8:	e01e      	b.n	800aee8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeaa:	bf00      	nop
    return;
 800aeac:	e01c      	b.n	800aee8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f8fd 	bl	800b0c2 <UART_Transmit_IT>
    return;
 800aec8:	e00f      	b.n	800aeea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00a      	beq.n	800aeea <HAL_UART_IRQHandler+0x1f6>
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f945 	bl	800b16e <UART_EndTransmit_IT>
    return;
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <HAL_UART_IRQHandler+0x1f6>
    return;
 800aee8:	bf00      	nop
  }
}
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	0800b09b 	.word	0x0800b09b

0800aef4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d113      	bne.n	800af74 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af60:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af70:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af72:	e002      	b.n	800af7a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7fc fe67 	bl	8007c48 <HAL_UART_TxCpltCallback>
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff ffaf 	bl	800aef4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afba:	2b80      	cmp	r3, #128	; 0x80
 800afbc:	bf0c      	ite	eq
 800afbe:	2301      	moveq	r3, #1
 800afc0:	2300      	movne	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b21      	cmp	r3, #33	; 0x21
 800afd0:	d108      	bne.n	800afe4 <UART_DMAError+0x46>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d005      	beq.n	800afe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2200      	movs	r2, #0
 800afdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f000 f827 	bl	800b032 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	bf0c      	ite	eq
 800aff2:	2301      	moveq	r3, #1
 800aff4:	2300      	movne	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b22      	cmp	r3, #34	; 0x22
 800b004:	d108      	bne.n	800b018 <UART_DMAError+0x7a>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2200      	movs	r2, #0
 800b010:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b012:	68b8      	ldr	r0, [r7, #8]
 800b014:	f000 f823 	bl	800b05e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01c:	f043 0210 	orr.w	r2, r3, #16
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b024:	68b8      	ldr	r0, [r7, #8]
 800b026:	f7ff ff79 	bl	800af1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b048:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b074:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695a      	ldr	r2, [r3, #20]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 0201 	bic.w	r2, r2, #1
 800b084:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b08e:	bf00      	nop
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff ff31 	bl	800af1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b21      	cmp	r3, #33	; 0x21
 800b0d4:	d144      	bne.n	800b160 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	d11a      	bne.n	800b116 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	1c9a      	adds	r2, r3, #2
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	621a      	str	r2, [r3, #32]
 800b108:	e00e      	b.n	800b128 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	621a      	str	r2, [r3, #32]
 800b114:	e008      	b.n	800b128 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	1c59      	adds	r1, r3, #1
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6211      	str	r1, [r2, #32]
 800b120:	781a      	ldrb	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29b      	uxth	r3, r3
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4619      	mov	r1, r3
 800b136:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10f      	bne.n	800b15c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68da      	ldr	r2, [r3, #12]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b14a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68da      	ldr	r2, [r3, #12]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b15a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e000      	b.n	800b162 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b160:	2302      	movs	r3, #2
  }
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2220      	movs	r2, #32
 800b18a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7fc fd5a 	bl	8007c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b22      	cmp	r3, #34	; 0x22
 800b1b0:	d171      	bne.n	800b296 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ba:	d123      	bne.n	800b204 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10e      	bne.n	800b1e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	1c9a      	adds	r2, r3, #2
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	629a      	str	r2, [r3, #40]	; 0x28
 800b1e6:	e029      	b.n	800b23c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	629a      	str	r2, [r3, #40]	; 0x28
 800b202:	e01b      	b.n	800b23c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10a      	bne.n	800b222 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6858      	ldr	r0, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b216:	1c59      	adds	r1, r3, #1
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6291      	str	r1, [r2, #40]	; 0x28
 800b21c:	b2c2      	uxtb	r2, r0
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	e00c      	b.n	800b23c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	1c58      	adds	r0, r3, #1
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	6288      	str	r0, [r1, #40]	; 0x28
 800b234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b238:	b2d2      	uxtb	r2, r2
 800b23a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b29b      	uxth	r3, r3
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	4619      	mov	r1, r3
 800b24a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d120      	bne.n	800b292 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68da      	ldr	r2, [r3, #12]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0220 	bic.w	r2, r2, #32
 800b25e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b26e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	695a      	ldr	r2, [r3, #20]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 0201 	bic.w	r2, r2, #1
 800b27e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2220      	movs	r2, #32
 800b284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff fe3d 	bl	800af08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	e002      	b.n	800b298 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	e000      	b.n	800b298 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b296:	2302      	movs	r3, #2
  }
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b2e2:	f023 030c 	bic.w	r3, r3, #12
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	68f9      	ldr	r1, [r7, #12]
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699a      	ldr	r2, [r3, #24]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b30e:	f040 818b 	bne.w	800b628 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4ac1      	ldr	r2, [pc, #772]	; (800b61c <UART_SetConfig+0x37c>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d005      	beq.n	800b328 <UART_SetConfig+0x88>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4abf      	ldr	r2, [pc, #764]	; (800b620 <UART_SetConfig+0x380>)
 800b322:	4293      	cmp	r3, r2
 800b324:	f040 80bd 	bne.w	800b4a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b328:	f7ff f9a6 	bl	800a678 <HAL_RCC_GetPCLK2Freq>
 800b32c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	461d      	mov	r5, r3
 800b332:	f04f 0600 	mov.w	r6, #0
 800b336:	46a8      	mov	r8, r5
 800b338:	46b1      	mov	r9, r6
 800b33a:	eb18 0308 	adds.w	r3, r8, r8
 800b33e:	eb49 0409 	adc.w	r4, r9, r9
 800b342:	4698      	mov	r8, r3
 800b344:	46a1      	mov	r9, r4
 800b346:	eb18 0805 	adds.w	r8, r8, r5
 800b34a:	eb49 0906 	adc.w	r9, r9, r6
 800b34e:	f04f 0100 	mov.w	r1, #0
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b35a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b35e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b362:	4688      	mov	r8, r1
 800b364:	4691      	mov	r9, r2
 800b366:	eb18 0005 	adds.w	r0, r8, r5
 800b36a:	eb49 0106 	adc.w	r1, r9, r6
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	461d      	mov	r5, r3
 800b374:	f04f 0600 	mov.w	r6, #0
 800b378:	196b      	adds	r3, r5, r5
 800b37a:	eb46 0406 	adc.w	r4, r6, r6
 800b37e:	461a      	mov	r2, r3
 800b380:	4623      	mov	r3, r4
 800b382:	f7f5 fc91 	bl	8000ca8 <__aeabi_uldivmod>
 800b386:	4603      	mov	r3, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	461a      	mov	r2, r3
 800b38c:	4ba5      	ldr	r3, [pc, #660]	; (800b624 <UART_SetConfig+0x384>)
 800b38e:	fba3 2302 	umull	r2, r3, r3, r2
 800b392:	095b      	lsrs	r3, r3, #5
 800b394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	461d      	mov	r5, r3
 800b39c:	f04f 0600 	mov.w	r6, #0
 800b3a0:	46a9      	mov	r9, r5
 800b3a2:	46b2      	mov	sl, r6
 800b3a4:	eb19 0309 	adds.w	r3, r9, r9
 800b3a8:	eb4a 040a 	adc.w	r4, sl, sl
 800b3ac:	4699      	mov	r9, r3
 800b3ae:	46a2      	mov	sl, r4
 800b3b0:	eb19 0905 	adds.w	r9, r9, r5
 800b3b4:	eb4a 0a06 	adc.w	sl, sl, r6
 800b3b8:	f04f 0100 	mov.w	r1, #0
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3cc:	4689      	mov	r9, r1
 800b3ce:	4692      	mov	sl, r2
 800b3d0:	eb19 0005 	adds.w	r0, r9, r5
 800b3d4:	eb4a 0106 	adc.w	r1, sl, r6
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	461d      	mov	r5, r3
 800b3de:	f04f 0600 	mov.w	r6, #0
 800b3e2:	196b      	adds	r3, r5, r5
 800b3e4:	eb46 0406 	adc.w	r4, r6, r6
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4623      	mov	r3, r4
 800b3ec:	f7f5 fc5c 	bl	8000ca8 <__aeabi_uldivmod>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4b8b      	ldr	r3, [pc, #556]	; (800b624 <UART_SetConfig+0x384>)
 800b3f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3fc:	095b      	lsrs	r3, r3, #5
 800b3fe:	2164      	movs	r1, #100	; 0x64
 800b400:	fb01 f303 	mul.w	r3, r1, r3
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	3332      	adds	r3, #50	; 0x32
 800b40a:	4a86      	ldr	r2, [pc, #536]	; (800b624 <UART_SetConfig+0x384>)
 800b40c:	fba2 2303 	umull	r2, r3, r2, r3
 800b410:	095b      	lsrs	r3, r3, #5
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b418:	4498      	add	r8, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	461d      	mov	r5, r3
 800b41e:	f04f 0600 	mov.w	r6, #0
 800b422:	46a9      	mov	r9, r5
 800b424:	46b2      	mov	sl, r6
 800b426:	eb19 0309 	adds.w	r3, r9, r9
 800b42a:	eb4a 040a 	adc.w	r4, sl, sl
 800b42e:	4699      	mov	r9, r3
 800b430:	46a2      	mov	sl, r4
 800b432:	eb19 0905 	adds.w	r9, r9, r5
 800b436:	eb4a 0a06 	adc.w	sl, sl, r6
 800b43a:	f04f 0100 	mov.w	r1, #0
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b446:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b44a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b44e:	4689      	mov	r9, r1
 800b450:	4692      	mov	sl, r2
 800b452:	eb19 0005 	adds.w	r0, r9, r5
 800b456:	eb4a 0106 	adc.w	r1, sl, r6
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	461d      	mov	r5, r3
 800b460:	f04f 0600 	mov.w	r6, #0
 800b464:	196b      	adds	r3, r5, r5
 800b466:	eb46 0406 	adc.w	r4, r6, r6
 800b46a:	461a      	mov	r2, r3
 800b46c:	4623      	mov	r3, r4
 800b46e:	f7f5 fc1b 	bl	8000ca8 <__aeabi_uldivmod>
 800b472:	4603      	mov	r3, r0
 800b474:	460c      	mov	r4, r1
 800b476:	461a      	mov	r2, r3
 800b478:	4b6a      	ldr	r3, [pc, #424]	; (800b624 <UART_SetConfig+0x384>)
 800b47a:	fba3 1302 	umull	r1, r3, r3, r2
 800b47e:	095b      	lsrs	r3, r3, #5
 800b480:	2164      	movs	r1, #100	; 0x64
 800b482:	fb01 f303 	mul.w	r3, r1, r3
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	00db      	lsls	r3, r3, #3
 800b48a:	3332      	adds	r3, #50	; 0x32
 800b48c:	4a65      	ldr	r2, [pc, #404]	; (800b624 <UART_SetConfig+0x384>)
 800b48e:	fba2 2303 	umull	r2, r3, r2, r3
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	f003 0207 	and.w	r2, r3, #7
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4442      	add	r2, r8
 800b49e:	609a      	str	r2, [r3, #8]
 800b4a0:	e26f      	b.n	800b982 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4a2:	f7ff f8d5 	bl	800a650 <HAL_RCC_GetPCLK1Freq>
 800b4a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	f04f 0600 	mov.w	r6, #0
 800b4b0:	46a8      	mov	r8, r5
 800b4b2:	46b1      	mov	r9, r6
 800b4b4:	eb18 0308 	adds.w	r3, r8, r8
 800b4b8:	eb49 0409 	adc.w	r4, r9, r9
 800b4bc:	4698      	mov	r8, r3
 800b4be:	46a1      	mov	r9, r4
 800b4c0:	eb18 0805 	adds.w	r8, r8, r5
 800b4c4:	eb49 0906 	adc.w	r9, r9, r6
 800b4c8:	f04f 0100 	mov.w	r1, #0
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b4d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b4d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b4dc:	4688      	mov	r8, r1
 800b4de:	4691      	mov	r9, r2
 800b4e0:	eb18 0005 	adds.w	r0, r8, r5
 800b4e4:	eb49 0106 	adc.w	r1, r9, r6
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	461d      	mov	r5, r3
 800b4ee:	f04f 0600 	mov.w	r6, #0
 800b4f2:	196b      	adds	r3, r5, r5
 800b4f4:	eb46 0406 	adc.w	r4, r6, r6
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4623      	mov	r3, r4
 800b4fc:	f7f5 fbd4 	bl	8000ca8 <__aeabi_uldivmod>
 800b500:	4603      	mov	r3, r0
 800b502:	460c      	mov	r4, r1
 800b504:	461a      	mov	r2, r3
 800b506:	4b47      	ldr	r3, [pc, #284]	; (800b624 <UART_SetConfig+0x384>)
 800b508:	fba3 2302 	umull	r2, r3, r3, r2
 800b50c:	095b      	lsrs	r3, r3, #5
 800b50e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	461d      	mov	r5, r3
 800b516:	f04f 0600 	mov.w	r6, #0
 800b51a:	46a9      	mov	r9, r5
 800b51c:	46b2      	mov	sl, r6
 800b51e:	eb19 0309 	adds.w	r3, r9, r9
 800b522:	eb4a 040a 	adc.w	r4, sl, sl
 800b526:	4699      	mov	r9, r3
 800b528:	46a2      	mov	sl, r4
 800b52a:	eb19 0905 	adds.w	r9, r9, r5
 800b52e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b532:	f04f 0100 	mov.w	r1, #0
 800b536:	f04f 0200 	mov.w	r2, #0
 800b53a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b53e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b546:	4689      	mov	r9, r1
 800b548:	4692      	mov	sl, r2
 800b54a:	eb19 0005 	adds.w	r0, r9, r5
 800b54e:	eb4a 0106 	adc.w	r1, sl, r6
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	461d      	mov	r5, r3
 800b558:	f04f 0600 	mov.w	r6, #0
 800b55c:	196b      	adds	r3, r5, r5
 800b55e:	eb46 0406 	adc.w	r4, r6, r6
 800b562:	461a      	mov	r2, r3
 800b564:	4623      	mov	r3, r4
 800b566:	f7f5 fb9f 	bl	8000ca8 <__aeabi_uldivmod>
 800b56a:	4603      	mov	r3, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	461a      	mov	r2, r3
 800b570:	4b2c      	ldr	r3, [pc, #176]	; (800b624 <UART_SetConfig+0x384>)
 800b572:	fba3 1302 	umull	r1, r3, r3, r2
 800b576:	095b      	lsrs	r3, r3, #5
 800b578:	2164      	movs	r1, #100	; 0x64
 800b57a:	fb01 f303 	mul.w	r3, r1, r3
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	3332      	adds	r3, #50	; 0x32
 800b584:	4a27      	ldr	r2, [pc, #156]	; (800b624 <UART_SetConfig+0x384>)
 800b586:	fba2 2303 	umull	r2, r3, r2, r3
 800b58a:	095b      	lsrs	r3, r3, #5
 800b58c:	005b      	lsls	r3, r3, #1
 800b58e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b592:	4498      	add	r8, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	461d      	mov	r5, r3
 800b598:	f04f 0600 	mov.w	r6, #0
 800b59c:	46a9      	mov	r9, r5
 800b59e:	46b2      	mov	sl, r6
 800b5a0:	eb19 0309 	adds.w	r3, r9, r9
 800b5a4:	eb4a 040a 	adc.w	r4, sl, sl
 800b5a8:	4699      	mov	r9, r3
 800b5aa:	46a2      	mov	sl, r4
 800b5ac:	eb19 0905 	adds.w	r9, r9, r5
 800b5b0:	eb4a 0a06 	adc.w	sl, sl, r6
 800b5b4:	f04f 0100 	mov.w	r1, #0
 800b5b8:	f04f 0200 	mov.w	r2, #0
 800b5bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	4692      	mov	sl, r2
 800b5cc:	eb19 0005 	adds.w	r0, r9, r5
 800b5d0:	eb4a 0106 	adc.w	r1, sl, r6
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	461d      	mov	r5, r3
 800b5da:	f04f 0600 	mov.w	r6, #0
 800b5de:	196b      	adds	r3, r5, r5
 800b5e0:	eb46 0406 	adc.w	r4, r6, r6
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4623      	mov	r3, r4
 800b5e8:	f7f5 fb5e 	bl	8000ca8 <__aeabi_uldivmod>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <UART_SetConfig+0x384>)
 800b5f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b5f8:	095b      	lsrs	r3, r3, #5
 800b5fa:	2164      	movs	r1, #100	; 0x64
 800b5fc:	fb01 f303 	mul.w	r3, r1, r3
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	3332      	adds	r3, #50	; 0x32
 800b606:	4a07      	ldr	r2, [pc, #28]	; (800b624 <UART_SetConfig+0x384>)
 800b608:	fba2 2303 	umull	r2, r3, r2, r3
 800b60c:	095b      	lsrs	r3, r3, #5
 800b60e:	f003 0207 	and.w	r2, r3, #7
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4442      	add	r2, r8
 800b618:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b61a:	e1b2      	b.n	800b982 <UART_SetConfig+0x6e2>
 800b61c:	40011000 	.word	0x40011000
 800b620:	40011400 	.word	0x40011400
 800b624:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4ad7      	ldr	r2, [pc, #860]	; (800b98c <UART_SetConfig+0x6ec>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d005      	beq.n	800b63e <UART_SetConfig+0x39e>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4ad6      	ldr	r2, [pc, #856]	; (800b990 <UART_SetConfig+0x6f0>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	f040 80d1 	bne.w	800b7e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b63e:	f7ff f81b 	bl	800a678 <HAL_RCC_GetPCLK2Freq>
 800b642:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	469a      	mov	sl, r3
 800b648:	f04f 0b00 	mov.w	fp, #0
 800b64c:	46d0      	mov	r8, sl
 800b64e:	46d9      	mov	r9, fp
 800b650:	eb18 0308 	adds.w	r3, r8, r8
 800b654:	eb49 0409 	adc.w	r4, r9, r9
 800b658:	4698      	mov	r8, r3
 800b65a:	46a1      	mov	r9, r4
 800b65c:	eb18 080a 	adds.w	r8, r8, sl
 800b660:	eb49 090b 	adc.w	r9, r9, fp
 800b664:	f04f 0100 	mov.w	r1, #0
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b670:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b674:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b678:	4688      	mov	r8, r1
 800b67a:	4691      	mov	r9, r2
 800b67c:	eb1a 0508 	adds.w	r5, sl, r8
 800b680:	eb4b 0609 	adc.w	r6, fp, r9
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4619      	mov	r1, r3
 800b68a:	f04f 0200 	mov.w	r2, #0
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	f04f 0400 	mov.w	r4, #0
 800b696:	0094      	lsls	r4, r2, #2
 800b698:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b69c:	008b      	lsls	r3, r1, #2
 800b69e:	461a      	mov	r2, r3
 800b6a0:	4623      	mov	r3, r4
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	f7f5 faff 	bl	8000ca8 <__aeabi_uldivmod>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	4bb8      	ldr	r3, [pc, #736]	; (800b994 <UART_SetConfig+0x6f4>)
 800b6b2:	fba3 2302 	umull	r2, r3, r3, r2
 800b6b6:	095b      	lsrs	r3, r3, #5
 800b6b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	469b      	mov	fp, r3
 800b6c0:	f04f 0c00 	mov.w	ip, #0
 800b6c4:	46d9      	mov	r9, fp
 800b6c6:	46e2      	mov	sl, ip
 800b6c8:	eb19 0309 	adds.w	r3, r9, r9
 800b6cc:	eb4a 040a 	adc.w	r4, sl, sl
 800b6d0:	4699      	mov	r9, r3
 800b6d2:	46a2      	mov	sl, r4
 800b6d4:	eb19 090b 	adds.w	r9, r9, fp
 800b6d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b6dc:	f04f 0100 	mov.w	r1, #0
 800b6e0:	f04f 0200 	mov.w	r2, #0
 800b6e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6f0:	4689      	mov	r9, r1
 800b6f2:	4692      	mov	sl, r2
 800b6f4:	eb1b 0509 	adds.w	r5, fp, r9
 800b6f8:	eb4c 060a 	adc.w	r6, ip, sl
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	4619      	mov	r1, r3
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	f04f 0300 	mov.w	r3, #0
 800b70a:	f04f 0400 	mov.w	r4, #0
 800b70e:	0094      	lsls	r4, r2, #2
 800b710:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b714:	008b      	lsls	r3, r1, #2
 800b716:	461a      	mov	r2, r3
 800b718:	4623      	mov	r3, r4
 800b71a:	4628      	mov	r0, r5
 800b71c:	4631      	mov	r1, r6
 800b71e:	f7f5 fac3 	bl	8000ca8 <__aeabi_uldivmod>
 800b722:	4603      	mov	r3, r0
 800b724:	460c      	mov	r4, r1
 800b726:	461a      	mov	r2, r3
 800b728:	4b9a      	ldr	r3, [pc, #616]	; (800b994 <UART_SetConfig+0x6f4>)
 800b72a:	fba3 1302 	umull	r1, r3, r3, r2
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	2164      	movs	r1, #100	; 0x64
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	3332      	adds	r3, #50	; 0x32
 800b73c:	4a95      	ldr	r2, [pc, #596]	; (800b994 <UART_SetConfig+0x6f4>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	095b      	lsrs	r3, r3, #5
 800b744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b748:	4498      	add	r8, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	469b      	mov	fp, r3
 800b74e:	f04f 0c00 	mov.w	ip, #0
 800b752:	46d9      	mov	r9, fp
 800b754:	46e2      	mov	sl, ip
 800b756:	eb19 0309 	adds.w	r3, r9, r9
 800b75a:	eb4a 040a 	adc.w	r4, sl, sl
 800b75e:	4699      	mov	r9, r3
 800b760:	46a2      	mov	sl, r4
 800b762:	eb19 090b 	adds.w	r9, r9, fp
 800b766:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b76a:	f04f 0100 	mov.w	r1, #0
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b77a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b77e:	4689      	mov	r9, r1
 800b780:	4692      	mov	sl, r2
 800b782:	eb1b 0509 	adds.w	r5, fp, r9
 800b786:	eb4c 060a 	adc.w	r6, ip, sl
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	f04f 0200 	mov.w	r2, #0
 800b794:	f04f 0300 	mov.w	r3, #0
 800b798:	f04f 0400 	mov.w	r4, #0
 800b79c:	0094      	lsls	r4, r2, #2
 800b79e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7a2:	008b      	lsls	r3, r1, #2
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	f7f5 fa7c 	bl	8000ca8 <__aeabi_uldivmod>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b77      	ldr	r3, [pc, #476]	; (800b994 <UART_SetConfig+0x6f4>)
 800b7b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b7bc:	095b      	lsrs	r3, r3, #5
 800b7be:	2164      	movs	r1, #100	; 0x64
 800b7c0:	fb01 f303 	mul.w	r3, r1, r3
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	011b      	lsls	r3, r3, #4
 800b7c8:	3332      	adds	r3, #50	; 0x32
 800b7ca:	4a72      	ldr	r2, [pc, #456]	; (800b994 <UART_SetConfig+0x6f4>)
 800b7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d0:	095b      	lsrs	r3, r3, #5
 800b7d2:	f003 020f 	and.w	r2, r3, #15
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4442      	add	r2, r8
 800b7dc:	609a      	str	r2, [r3, #8]
 800b7de:	e0d0      	b.n	800b982 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b7e0:	f7fe ff36 	bl	800a650 <HAL_RCC_GetPCLK1Freq>
 800b7e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	469a      	mov	sl, r3
 800b7ea:	f04f 0b00 	mov.w	fp, #0
 800b7ee:	46d0      	mov	r8, sl
 800b7f0:	46d9      	mov	r9, fp
 800b7f2:	eb18 0308 	adds.w	r3, r8, r8
 800b7f6:	eb49 0409 	adc.w	r4, r9, r9
 800b7fa:	4698      	mov	r8, r3
 800b7fc:	46a1      	mov	r9, r4
 800b7fe:	eb18 080a 	adds.w	r8, r8, sl
 800b802:	eb49 090b 	adc.w	r9, r9, fp
 800b806:	f04f 0100 	mov.w	r1, #0
 800b80a:	f04f 0200 	mov.w	r2, #0
 800b80e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b812:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b816:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b81a:	4688      	mov	r8, r1
 800b81c:	4691      	mov	r9, r2
 800b81e:	eb1a 0508 	adds.w	r5, sl, r8
 800b822:	eb4b 0609 	adc.w	r6, fp, r9
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4619      	mov	r1, r3
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	f04f 0400 	mov.w	r4, #0
 800b838:	0094      	lsls	r4, r2, #2
 800b83a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b83e:	008b      	lsls	r3, r1, #2
 800b840:	461a      	mov	r2, r3
 800b842:	4623      	mov	r3, r4
 800b844:	4628      	mov	r0, r5
 800b846:	4631      	mov	r1, r6
 800b848:	f7f5 fa2e 	bl	8000ca8 <__aeabi_uldivmod>
 800b84c:	4603      	mov	r3, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	461a      	mov	r2, r3
 800b852:	4b50      	ldr	r3, [pc, #320]	; (800b994 <UART_SetConfig+0x6f4>)
 800b854:	fba3 2302 	umull	r2, r3, r3, r2
 800b858:	095b      	lsrs	r3, r3, #5
 800b85a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	469b      	mov	fp, r3
 800b862:	f04f 0c00 	mov.w	ip, #0
 800b866:	46d9      	mov	r9, fp
 800b868:	46e2      	mov	sl, ip
 800b86a:	eb19 0309 	adds.w	r3, r9, r9
 800b86e:	eb4a 040a 	adc.w	r4, sl, sl
 800b872:	4699      	mov	r9, r3
 800b874:	46a2      	mov	sl, r4
 800b876:	eb19 090b 	adds.w	r9, r9, fp
 800b87a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b87e:	f04f 0100 	mov.w	r1, #0
 800b882:	f04f 0200 	mov.w	r2, #0
 800b886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b88a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b88e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b892:	4689      	mov	r9, r1
 800b894:	4692      	mov	sl, r2
 800b896:	eb1b 0509 	adds.w	r5, fp, r9
 800b89a:	eb4c 060a 	adc.w	r6, ip, sl
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	f04f 0200 	mov.w	r2, #0
 800b8a8:	f04f 0300 	mov.w	r3, #0
 800b8ac:	f04f 0400 	mov.w	r4, #0
 800b8b0:	0094      	lsls	r4, r2, #2
 800b8b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b8b6:	008b      	lsls	r3, r1, #2
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4623      	mov	r3, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	4631      	mov	r1, r6
 800b8c0:	f7f5 f9f2 	bl	8000ca8 <__aeabi_uldivmod>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	4b32      	ldr	r3, [pc, #200]	; (800b994 <UART_SetConfig+0x6f4>)
 800b8cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b8d0:	095b      	lsrs	r3, r3, #5
 800b8d2:	2164      	movs	r1, #100	; 0x64
 800b8d4:	fb01 f303 	mul.w	r3, r1, r3
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	3332      	adds	r3, #50	; 0x32
 800b8de:	4a2d      	ldr	r2, [pc, #180]	; (800b994 <UART_SetConfig+0x6f4>)
 800b8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8ea:	4498      	add	r8, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	469b      	mov	fp, r3
 800b8f0:	f04f 0c00 	mov.w	ip, #0
 800b8f4:	46d9      	mov	r9, fp
 800b8f6:	46e2      	mov	sl, ip
 800b8f8:	eb19 0309 	adds.w	r3, r9, r9
 800b8fc:	eb4a 040a 	adc.w	r4, sl, sl
 800b900:	4699      	mov	r9, r3
 800b902:	46a2      	mov	sl, r4
 800b904:	eb19 090b 	adds.w	r9, r9, fp
 800b908:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b90c:	f04f 0100 	mov.w	r1, #0
 800b910:	f04f 0200 	mov.w	r2, #0
 800b914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b91c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b920:	4689      	mov	r9, r1
 800b922:	4692      	mov	sl, r2
 800b924:	eb1b 0509 	adds.w	r5, fp, r9
 800b928:	eb4c 060a 	adc.w	r6, ip, sl
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4619      	mov	r1, r3
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	f04f 0400 	mov.w	r4, #0
 800b93e:	0094      	lsls	r4, r2, #2
 800b940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b944:	008b      	lsls	r3, r1, #2
 800b946:	461a      	mov	r2, r3
 800b948:	4623      	mov	r3, r4
 800b94a:	4628      	mov	r0, r5
 800b94c:	4631      	mov	r1, r6
 800b94e:	f7f5 f9ab 	bl	8000ca8 <__aeabi_uldivmod>
 800b952:	4603      	mov	r3, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461a      	mov	r2, r3
 800b958:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <UART_SetConfig+0x6f4>)
 800b95a:	fba3 1302 	umull	r1, r3, r3, r2
 800b95e:	095b      	lsrs	r3, r3, #5
 800b960:	2164      	movs	r1, #100	; 0x64
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	3332      	adds	r3, #50	; 0x32
 800b96c:	4a09      	ldr	r2, [pc, #36]	; (800b994 <UART_SetConfig+0x6f4>)
 800b96e:	fba2 2303 	umull	r2, r3, r2, r3
 800b972:	095b      	lsrs	r3, r3, #5
 800b974:	f003 020f 	and.w	r2, r3, #15
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4442      	add	r2, r8
 800b97e:	609a      	str	r2, [r3, #8]
}
 800b980:	e7ff      	b.n	800b982 <UART_SetConfig+0x6e2>
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	40011000 	.word	0x40011000
 800b990:	40011400 	.word	0x40011400
 800b994:	51eb851f 	.word	0x51eb851f

0800b998 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4b20      	ldr	r3, [pc, #128]	; (800ba38 <FSMC_NORSRAM_Init+0xa0>)
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b9c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b9c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b9ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b9d4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800b9da:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800b9e0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b9e6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b9ec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b9f2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b9f8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800b9fe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ba04:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d103      	bne.n	800ba1c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	fff00080 	.word	0xfff00080

0800ba3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba56:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ba5e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba6a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ba72:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ba7a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba84:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	3b02      	subs	r3, #2
 800ba8c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba8e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba94:	4313      	orrs	r3, r2
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6979      	ldr	r1, [r7, #20]
 800baa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
	...

0800bab8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bad0:	d122      	bne.n	800bb18 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bada:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800badc:	697a      	ldr	r2, [r7, #20]
 800bade:	4b15      	ldr	r3, [pc, #84]	; (800bb34 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800baee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800baf6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bafe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb04:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	6979      	ldr	r1, [r7, #20]
 800bb12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb16:	e005      	b.n	800bb24 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bb20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	cff00000 	.word	0xcff00000

0800bb38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb38:	b084      	sub	sp, #16
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	f107 001c 	add.w	r0, r7, #28
 800bb46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d122      	bne.n	800bb96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bb64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d105      	bne.n	800bb8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 fa7c 	bl	800d088 <USB_CoreReset>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
 800bb94:	e01a      	b.n	800bbcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 fa70 	bl	800d088 <USB_CoreReset>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	639a      	str	r2, [r3, #56]	; 0x38
 800bbbe:	e005      	b.n	800bbcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d10b      	bne.n	800bbea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f043 0206 	orr.w	r2, r3, #6
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f043 0220 	orr.w	r2, r3, #32
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbf6:	b004      	add	sp, #16
 800bbf8:	4770      	bx	lr
	...

0800bbfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	4613      	mov	r3, r2
 800bc08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d165      	bne.n	800bcdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	4a41      	ldr	r2, [pc, #260]	; (800bd18 <USB_SetTurnaroundTime+0x11c>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d906      	bls.n	800bc26 <USB_SetTurnaroundTime+0x2a>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4a40      	ldr	r2, [pc, #256]	; (800bd1c <USB_SetTurnaroundTime+0x120>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d802      	bhi.n	800bc26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bc20:	230f      	movs	r3, #15
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	e062      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	4a3c      	ldr	r2, [pc, #240]	; (800bd1c <USB_SetTurnaroundTime+0x120>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d906      	bls.n	800bc3c <USB_SetTurnaroundTime+0x40>
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	4a3b      	ldr	r2, [pc, #236]	; (800bd20 <USB_SetTurnaroundTime+0x124>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d802      	bhi.n	800bc3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bc36:	230e      	movs	r3, #14
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e057      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	4a38      	ldr	r2, [pc, #224]	; (800bd20 <USB_SetTurnaroundTime+0x124>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d906      	bls.n	800bc52 <USB_SetTurnaroundTime+0x56>
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	4a37      	ldr	r2, [pc, #220]	; (800bd24 <USB_SetTurnaroundTime+0x128>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d802      	bhi.n	800bc52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bc4c:	230d      	movs	r3, #13
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e04c      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	4a33      	ldr	r2, [pc, #204]	; (800bd24 <USB_SetTurnaroundTime+0x128>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d906      	bls.n	800bc68 <USB_SetTurnaroundTime+0x6c>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	4a32      	ldr	r2, [pc, #200]	; (800bd28 <USB_SetTurnaroundTime+0x12c>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d802      	bhi.n	800bc68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bc62:	230c      	movs	r3, #12
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	e041      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4a2f      	ldr	r2, [pc, #188]	; (800bd28 <USB_SetTurnaroundTime+0x12c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d906      	bls.n	800bc7e <USB_SetTurnaroundTime+0x82>
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	4a2e      	ldr	r2, [pc, #184]	; (800bd2c <USB_SetTurnaroundTime+0x130>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d802      	bhi.n	800bc7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bc78:	230b      	movs	r3, #11
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e036      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <USB_SetTurnaroundTime+0x130>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d906      	bls.n	800bc94 <USB_SetTurnaroundTime+0x98>
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	4a29      	ldr	r2, [pc, #164]	; (800bd30 <USB_SetTurnaroundTime+0x134>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d802      	bhi.n	800bc94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bc8e:	230a      	movs	r3, #10
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	e02b      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4a26      	ldr	r2, [pc, #152]	; (800bd30 <USB_SetTurnaroundTime+0x134>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d906      	bls.n	800bcaa <USB_SetTurnaroundTime+0xae>
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	4a25      	ldr	r2, [pc, #148]	; (800bd34 <USB_SetTurnaroundTime+0x138>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d802      	bhi.n	800bcaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bca4:	2309      	movs	r3, #9
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e020      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	4a21      	ldr	r2, [pc, #132]	; (800bd34 <USB_SetTurnaroundTime+0x138>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d906      	bls.n	800bcc0 <USB_SetTurnaroundTime+0xc4>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	4a20      	ldr	r2, [pc, #128]	; (800bd38 <USB_SetTurnaroundTime+0x13c>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d802      	bhi.n	800bcc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bcba:	2308      	movs	r3, #8
 800bcbc:	617b      	str	r3, [r7, #20]
 800bcbe:	e015      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	4a1d      	ldr	r2, [pc, #116]	; (800bd38 <USB_SetTurnaroundTime+0x13c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d906      	bls.n	800bcd6 <USB_SetTurnaroundTime+0xda>
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	4a1c      	ldr	r2, [pc, #112]	; (800bd3c <USB_SetTurnaroundTime+0x140>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d802      	bhi.n	800bcd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bcd0:	2307      	movs	r3, #7
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e00a      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bcd6:	2306      	movs	r3, #6
 800bcd8:	617b      	str	r3, [r7, #20]
 800bcda:	e007      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bcdc:	79fb      	ldrb	r3, [r7, #7]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bce2:	2309      	movs	r3, #9
 800bce4:	617b      	str	r3, [r7, #20]
 800bce6:	e001      	b.n	800bcec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bce8:	2309      	movs	r3, #9
 800bcea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	029b      	lsls	r3, r3, #10
 800bd00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bd04:	431a      	orrs	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	371c      	adds	r7, #28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	00d8acbf 	.word	0x00d8acbf
 800bd1c:	00e4e1bf 	.word	0x00e4e1bf
 800bd20:	00f423ff 	.word	0x00f423ff
 800bd24:	0106737f 	.word	0x0106737f
 800bd28:	011a499f 	.word	0x011a499f
 800bd2c:	01312cff 	.word	0x01312cff
 800bd30:	014ca43f 	.word	0x014ca43f
 800bd34:	016e35ff 	.word	0x016e35ff
 800bd38:	01a6ab1f 	.word	0x01a6ab1f
 800bd3c:	01e847ff 	.word	0x01e847ff

0800bd40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f043 0201 	orr.w	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f023 0201 	bic.w	r2, r3, #1
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d106      	bne.n	800bdb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60da      	str	r2, [r3, #12]
 800bdae:	e00b      	b.n	800bdc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60da      	str	r2, [r3, #12]
 800bdc2:	e001      	b.n	800bdc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e003      	b.n	800bdd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bdc8:	2032      	movs	r0, #50	; 0x32
 800bdca:	f7fb ffd1 	bl	8007d70 <HAL_Delay>

  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdd8:	b084      	sub	sp, #16
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bde6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	613b      	str	r3, [r7, #16]
 800bdf6:	e009      	b.n	800be0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3340      	adds	r3, #64	; 0x40
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	2200      	movs	r2, #0
 800be04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	3301      	adds	r3, #1
 800be0a:	613b      	str	r3, [r7, #16]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2b0e      	cmp	r3, #14
 800be10:	d9f2      	bls.n	800bdf8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800be12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d112      	bne.n	800be3e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
 800be3c:	e00b      	b.n	800be56 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be5c:	461a      	mov	r2, r3
 800be5e:	2300      	movs	r3, #0
 800be60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be68:	4619      	mov	r1, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be70:	461a      	mov	r2, r3
 800be72:	680b      	ldr	r3, [r1, #0]
 800be74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d10c      	bne.n	800be96 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d104      	bne.n	800be8c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be82:	2100      	movs	r1, #0
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f961 	bl	800c14c <USB_SetDevSpeed>
 800be8a:	e008      	b.n	800be9e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be8c:	2101      	movs	r1, #1
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f95c 	bl	800c14c <USB_SetDevSpeed>
 800be94:	e003      	b.n	800be9e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be96:	2103      	movs	r1, #3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f957 	bl	800c14c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be9e:	2110      	movs	r1, #16
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f90b 	bl	800c0bc <USB_FlushTxFifo>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f929 	bl	800c108 <USB_FlushRxFifo>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec6:	461a      	mov	r2, r3
 800bec8:	2300      	movs	r3, #0
 800beca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed2:	461a      	mov	r2, r3
 800bed4:	2300      	movs	r3, #0
 800bed6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bede:	461a      	mov	r2, r3
 800bee0:	2300      	movs	r3, #0
 800bee2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bee4:	2300      	movs	r3, #0
 800bee6:	613b      	str	r3, [r7, #16]
 800bee8:	e043      	b.n	800bf72 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800befc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf00:	d118      	bne.n	800bf34 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf14:	461a      	mov	r2, r3
 800bf16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	e013      	b.n	800bf46 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	e008      	b.n	800bf46 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf40:	461a      	mov	r2, r3
 800bf42:	2300      	movs	r3, #0
 800bf44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf52:	461a      	mov	r2, r3
 800bf54:	2300      	movs	r3, #0
 800bf56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf64:	461a      	mov	r2, r3
 800bf66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d3b7      	bcc.n	800beea <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]
 800bf7e:	e043      	b.n	800c008 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf96:	d118      	bne.n	800bfca <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	e013      	b.n	800bfdc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	015a      	lsls	r2, r3, #5
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	e008      	b.n	800bfdc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	2300      	movs	r3, #0
 800bfda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe8:	461a      	mov	r2, r3
 800bfea:	2300      	movs	r3, #0
 800bfec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffa:	461a      	mov	r2, r3
 800bffc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c000:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	3301      	adds	r3, #1
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d3b7      	bcc.n	800bf80 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c01e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c022:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	2b01      	cmp	r3, #1
 800c028:	d111      	bne.n	800c04e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c030:	461a      	mov	r2, r3
 800c032:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <USB_DevInit+0x2dc>)
 800c034:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c048:	f043 0303 	orr.w	r3, r3, #3
 800c04c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c05a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f043 0210 	orr.w	r2, r3, #16
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <USB_DevInit+0x2e0>)
 800c074:	4313      	orrs	r3, r2
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	f043 0208 	orr.w	r2, r3, #8
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d107      	bne.n	800c0a2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c09a:	f043 0304 	orr.w	r3, r3, #4
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0ae:	b004      	add	sp, #16
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	00800100 	.word	0x00800100
 800c0b8:	803c3800 	.word	0x803c3800

0800c0bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	019b      	lsls	r3, r3, #6
 800c0ce:	f043 0220 	orr.w	r2, r3, #32
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4a09      	ldr	r2, [pc, #36]	; (800c104 <USB_FlushTxFifo+0x48>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d901      	bls.n	800c0e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e006      	b.n	800c0f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b20      	cmp	r3, #32
 800c0f2:	d0f0      	beq.n	800c0d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	00030d40 	.word	0x00030d40

0800c108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2210      	movs	r2, #16
 800c118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3301      	adds	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4a09      	ldr	r2, [pc, #36]	; (800c148 <USB_FlushRxFifo+0x40>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d901      	bls.n	800c12c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	e006      	b.n	800c13a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	f003 0310 	and.w	r3, r3, #16
 800c134:	2b10      	cmp	r3, #16
 800c136:	d0f0      	beq.n	800c11a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	00030d40 	.word	0x00030d40

0800c14c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c16c:	4313      	orrs	r3, r2
 800c16e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c17e:	b480      	push	{r7}
 800c180:	b087      	sub	sp, #28
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f003 0306 	and.w	r3, r3, #6
 800c196:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d102      	bne.n	800c1a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75fb      	strb	r3, [r7, #23]
 800c1a2:	e00a      	b.n	800c1ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d002      	beq.n	800c1b0 <USB_GetDevSpeed+0x32>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b06      	cmp	r3, #6
 800c1ae:	d102      	bne.n	800c1b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	75fb      	strb	r3, [r7, #23]
 800c1b4:	e001      	b.n	800c1ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c1b6:	230f      	movs	r3, #15
 800c1b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	371c      	adds	r7, #28
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	785b      	ldrb	r3, [r3, #1]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d13a      	bne.n	800c25a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ea:	69da      	ldr	r2, [r3, #28]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 030f 	and.w	r3, r3, #15
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	68f9      	ldr	r1, [r7, #12]
 800c1fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c202:	4313      	orrs	r3, r2
 800c204:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	015a      	lsls	r2, r3, #5
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	4413      	add	r3, r2
 800c20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d155      	bne.n	800c2c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	78db      	ldrb	r3, [r3, #3]
 800c236:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c238:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c240:	4313      	orrs	r3, r2
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	0151      	lsls	r1, r2, #5
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	440a      	add	r2, r1
 800c24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	e036      	b.n	800c2c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c260:	69da      	ldr	r2, [r3, #28]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	f003 030f 	and.w	r3, r3, #15
 800c26a:	2101      	movs	r1, #1
 800c26c:	fa01 f303 	lsl.w	r3, r1, r3
 800c270:	041b      	lsls	r3, r3, #16
 800c272:	68f9      	ldr	r1, [r7, #12]
 800c274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c278:	4313      	orrs	r3, r2
 800c27a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	015a      	lsls	r2, r3, #5
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4413      	add	r3, r2
 800c284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d11a      	bne.n	800c2c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	015a      	lsls	r2, r3, #5
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4413      	add	r3, r2
 800c29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	78db      	ldrb	r3, [r3, #3]
 800c2ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	0151      	lsls	r1, r2, #5
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	440a      	add	r2, r1
 800c2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
	...

0800c2d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	785b      	ldrb	r3, [r3, #1]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d135      	bne.n	800c360 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	f003 030f 	and.w	r3, r3, #15
 800c304:	2101      	movs	r1, #1
 800c306:	fa01 f303 	lsl.w	r3, r1, r3
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	43db      	mvns	r3, r3
 800c30e:	68f9      	ldr	r1, [r7, #12]
 800c310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c314:	4013      	ands	r3, r2
 800c316:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31e:	69da      	ldr	r2, [r3, #28]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	2101      	movs	r1, #1
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	b29b      	uxth	r3, r3
 800c330:	43db      	mvns	r3, r3
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c338:	4013      	ands	r3, r2
 800c33a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	0159      	lsls	r1, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	440b      	add	r3, r1
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	4619      	mov	r1, r3
 800c358:	4b1f      	ldr	r3, [pc, #124]	; (800c3d8 <USB_DeactivateEndpoint+0x100>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	600b      	str	r3, [r1, #0]
 800c35e:	e034      	b.n	800c3ca <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f003 030f 	and.w	r3, r3, #15
 800c370:	2101      	movs	r1, #1
 800c372:	fa01 f303 	lsl.w	r3, r1, r3
 800c376:	041b      	lsls	r3, r3, #16
 800c378:	43db      	mvns	r3, r3
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c380:	4013      	ands	r3, r2
 800c382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38a:	69da      	ldr	r2, [r3, #28]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	2101      	movs	r1, #1
 800c396:	fa01 f303 	lsl.w	r3, r1, r3
 800c39a:	041b      	lsls	r3, r3, #16
 800c39c:	43db      	mvns	r3, r3
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	0159      	lsls	r1, r3, #5
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	440b      	add	r3, r1
 800c3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <USB_DeactivateEndpoint+0x104>)
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	ec337800 	.word	0xec337800
 800c3dc:	eff37800 	.word	0xeff37800

0800c3e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	; 0x28
 800c3e4:	af02      	add	r7, sp, #8
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	785b      	ldrb	r3, [r3, #1]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	f040 815c 	bne.w	800c6ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d132      	bne.n	800c470 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	015a      	lsls	r2, r3, #5
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	4413      	add	r3, r2
 800c412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	0151      	lsls	r1, r2, #5
 800c41c:	69fa      	ldr	r2, [r7, #28]
 800c41e:	440a      	add	r2, r1
 800c420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c42c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	015a      	lsls	r2, r3, #5
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	4413      	add	r3, r2
 800c436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	69ba      	ldr	r2, [r7, #24]
 800c43e:	0151      	lsls	r1, r2, #5
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	440a      	add	r2, r1
 800c444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c44c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	015a      	lsls	r2, r3, #5
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	4413      	add	r3, r2
 800c456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	0151      	lsls	r1, r2, #5
 800c460:	69fa      	ldr	r2, [r7, #28]
 800c462:	440a      	add	r2, r1
 800c464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c468:	0cdb      	lsrs	r3, r3, #19
 800c46a:	04db      	lsls	r3, r3, #19
 800c46c:	6113      	str	r3, [r2, #16]
 800c46e:	e074      	b.n	800c55a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48a:	0cdb      	lsrs	r3, r3, #19
 800c48c:	04db      	lsls	r3, r3, #19
 800c48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	69ba      	ldr	r2, [r7, #24]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	69fa      	ldr	r2, [r7, #28]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c0:	691a      	ldr	r2, [r3, #16]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6959      	ldr	r1, [r3, #20]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	440b      	add	r3, r1
 800c4cc:	1e59      	subs	r1, r3, #1
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4d6:	04d9      	lsls	r1, r3, #19
 800c4d8:	4b9d      	ldr	r3, [pc, #628]	; (800c750 <USB_EPStartXfer+0x370>)
 800c4da:	400b      	ands	r3, r1
 800c4dc:	69b9      	ldr	r1, [r7, #24]
 800c4de:	0148      	lsls	r0, r1, #5
 800c4e0:	69f9      	ldr	r1, [r7, #28]
 800c4e2:	4401      	add	r1, r0
 800c4e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	691a      	ldr	r2, [r3, #16]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c502:	69b9      	ldr	r1, [r7, #24]
 800c504:	0148      	lsls	r0, r1, #5
 800c506:	69f9      	ldr	r1, [r7, #28]
 800c508:	4401      	add	r1, r0
 800c50a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c50e:	4313      	orrs	r3, r2
 800c510:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	78db      	ldrb	r3, [r3, #3]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d11f      	bne.n	800c55a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	0151      	lsls	r1, r2, #5
 800c52c:	69fa      	ldr	r2, [r7, #28]
 800c52e:	440a      	add	r2, r1
 800c530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c534:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c538:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	015a      	lsls	r2, r3, #5
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	0151      	lsls	r1, r2, #5
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	440a      	add	r2, r1
 800c550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c558:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d14b      	bne.n	800c5f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d009      	beq.n	800c57c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c574:	461a      	mov	r2, r3
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	78db      	ldrb	r3, [r3, #3]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d128      	bne.n	800c5d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c590:	2b00      	cmp	r3, #0
 800c592:	d110      	bne.n	800c5b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	0151      	lsls	r1, r2, #5
 800c5a6:	69fa      	ldr	r2, [r7, #28]
 800c5a8:	440a      	add	r2, r1
 800c5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	e00f      	b.n	800c5d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	0151      	lsls	r1, r2, #5
 800c5c8:	69fa      	ldr	r2, [r7, #28]
 800c5ca:	440a      	add	r2, r1
 800c5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	015a      	lsls	r2, r3, #5
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	4413      	add	r3, r2
 800c5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	0151      	lsls	r1, r2, #5
 800c5e8:	69fa      	ldr	r2, [r7, #28]
 800c5ea:	440a      	add	r2, r1
 800c5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	e12f      	b.n	800c858 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	69ba      	ldr	r2, [r7, #24]
 800c608:	0151      	lsls	r1, r2, #5
 800c60a:	69fa      	ldr	r2, [r7, #28]
 800c60c:	440a      	add	r2, r1
 800c60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c616:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	78db      	ldrb	r3, [r3, #3]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d015      	beq.n	800c64c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	f000 8117 	beq.w	800c858 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	2101      	movs	r1, #1
 800c63c:	fa01 f303 	lsl.w	r3, r1, r3
 800c640:	69f9      	ldr	r1, [r7, #28]
 800c642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c646:	4313      	orrs	r3, r2
 800c648:	634b      	str	r3, [r1, #52]	; 0x34
 800c64a:	e105      	b.n	800c858 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d110      	bne.n	800c67e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	4413      	add	r3, r2
 800c664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	0151      	lsls	r1, r2, #5
 800c66e:	69fa      	ldr	r2, [r7, #28]
 800c670:	440a      	add	r2, r1
 800c672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	e00f      	b.n	800c69e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	015a      	lsls	r2, r3, #5
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	4413      	add	r3, r2
 800c686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	0151      	lsls	r1, r2, #5
 800c690:	69fa      	ldr	r2, [r7, #28]
 800c692:	440a      	add	r2, r1
 800c694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c69c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	68d9      	ldr	r1, [r3, #12]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	781a      	ldrb	r2, [r3, #0]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	b298      	uxth	r0, r3
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 fa2b 	bl	800cb0e <USB_WritePacket>
 800c6b8:	e0ce      	b.n	800c858 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	69ba      	ldr	r2, [r7, #24]
 800c6ca:	0151      	lsls	r1, r2, #5
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	440a      	add	r2, r1
 800c6d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6d4:	0cdb      	lsrs	r3, r3, #19
 800c6d6:	04db      	lsls	r3, r3, #19
 800c6d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	015a      	lsls	r2, r3, #5
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	69ba      	ldr	r2, [r7, #24]
 800c6ea:	0151      	lsls	r1, r2, #5
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	440a      	add	r2, r1
 800c6f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d126      	bne.n	800c754 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c71c:	69b9      	ldr	r1, [r7, #24]
 800c71e:	0148      	lsls	r0, r1, #5
 800c720:	69f9      	ldr	r1, [r7, #28]
 800c722:	4401      	add	r1, r0
 800c724:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c728:	4313      	orrs	r3, r2
 800c72a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	4413      	add	r3, r2
 800c734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	0151      	lsls	r1, r2, #5
 800c73e:	69fa      	ldr	r2, [r7, #28]
 800c740:	440a      	add	r2, r1
 800c742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c74a:	6113      	str	r3, [r2, #16]
 800c74c:	e036      	b.n	800c7bc <USB_EPStartXfer+0x3dc>
 800c74e:	bf00      	nop
 800c750:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	695a      	ldr	r2, [r3, #20]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	4413      	add	r3, r2
 800c75e:	1e5a      	subs	r2, r3, #1
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	fbb2 f3f3 	udiv	r3, r2, r3
 800c768:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c776:	691a      	ldr	r2, [r3, #16]
 800c778:	8afb      	ldrh	r3, [r7, #22]
 800c77a:	04d9      	lsls	r1, r3, #19
 800c77c:	4b39      	ldr	r3, [pc, #228]	; (800c864 <USB_EPStartXfer+0x484>)
 800c77e:	400b      	ands	r3, r1
 800c780:	69b9      	ldr	r1, [r7, #24]
 800c782:	0148      	lsls	r0, r1, #5
 800c784:	69f9      	ldr	r1, [r7, #28]
 800c786:	4401      	add	r1, r0
 800c788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c78c:	4313      	orrs	r3, r2
 800c78e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	015a      	lsls	r2, r3, #5
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	4413      	add	r3, r2
 800c798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79c:	691a      	ldr	r2, [r3, #16]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	8af9      	ldrh	r1, [r7, #22]
 800c7a4:	fb01 f303 	mul.w	r3, r1, r3
 800c7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7ac:	69b9      	ldr	r1, [r7, #24]
 800c7ae:	0148      	lsls	r0, r1, #5
 800c7b0:	69f9      	ldr	r1, [r7, #28]
 800c7b2:	4401      	add	r1, r0
 800c7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d10d      	bne.n	800c7de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d009      	beq.n	800c7de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	68d9      	ldr	r1, [r3, #12]
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7da:	460a      	mov	r2, r1
 800c7dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	78db      	ldrb	r3, [r3, #3]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d128      	bne.n	800c838 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d110      	bne.n	800c818 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	015a      	lsls	r2, r3, #5
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	0151      	lsls	r1, r2, #5
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	440a      	add	r2, r1
 800c80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e00f      	b.n	800c838 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	0151      	lsls	r1, r2, #5
 800c82a:	69fa      	ldr	r2, [r7, #28]
 800c82c:	440a      	add	r2, r1
 800c82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c836:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	0151      	lsls	r1, r2, #5
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	440a      	add	r2, r1
 800c84e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3720      	adds	r7, #32
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	1ff80000 	.word	0x1ff80000

0800c868 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c868:	b480      	push	{r7}
 800c86a:	b087      	sub	sp, #28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	4613      	mov	r3, r2
 800c874:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	f040 80cd 	bne.w	800ca24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d132      	bne.n	800c8f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	0151      	lsls	r1, r2, #5
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	440a      	add	r2, r1
 800c8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	0151      	lsls	r1, r2, #5
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	440a      	add	r2, r1
 800c8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f0:	0cdb      	lsrs	r3, r3, #19
 800c8f2:	04db      	lsls	r3, r3, #19
 800c8f4:	6113      	str	r3, [r2, #16]
 800c8f6:	e04e      	b.n	800c996 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c912:	0cdb      	lsrs	r3, r3, #19
 800c914:	04db      	lsls	r3, r3, #19
 800c916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c932:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c936:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c93a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	695a      	ldr	r2, [r3, #20]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	429a      	cmp	r2, r3
 800c946:	d903      	bls.n	800c950 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	689a      	ldr	r2, [r3, #8]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	440a      	add	r2, r1
 800c966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c96a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c96e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c986:	6939      	ldr	r1, [r7, #16]
 800c988:	0148      	lsls	r0, r1, #5
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	4401      	add	r1, r0
 800c98e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c992:	4313      	orrs	r3, r2
 800c994:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d11e      	bne.n	800c9da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d009      	beq.n	800c9b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	015a      	lsls	r2, r3, #5
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	0151      	lsls	r1, r2, #5
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	440a      	add	r2, r1
 800c9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9d6:	6013      	str	r3, [r2, #0]
 800c9d8:	e092      	b.n	800cb00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	015a      	lsls	r2, r3, #5
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	0151      	lsls	r1, r2, #5
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	440a      	add	r2, r1
 800c9f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	695b      	ldr	r3, [r3, #20]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d07e      	beq.n	800cb00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	2101      	movs	r1, #1
 800ca14:	fa01 f303 	lsl.w	r3, r1, r3
 800ca18:	6979      	ldr	r1, [r7, #20]
 800ca1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	634b      	str	r3, [r1, #52]	; 0x34
 800ca22:	e06d      	b.n	800cb00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	0151      	lsls	r1, r2, #5
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	440a      	add	r2, r1
 800ca3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca3e:	0cdb      	lsrs	r3, r3, #19
 800ca40:	04db      	lsls	r3, r3, #19
 800ca42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	015a      	lsls	r2, r3, #5
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	0151      	lsls	r1, r2, #5
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	440a      	add	r2, r1
 800ca5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca66:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	0151      	lsls	r1, r2, #5
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	440a      	add	r2, r1
 800ca8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	015a      	lsls	r2, r3, #5
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa4:	691a      	ldr	r2, [r3, #16]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caae:	6939      	ldr	r1, [r7, #16]
 800cab0:	0148      	lsls	r0, r1, #5
 800cab2:	6979      	ldr	r1, [r7, #20]
 800cab4:	4401      	add	r1, r0
 800cab6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800caba:	4313      	orrs	r3, r2
 800cabc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d10d      	bne.n	800cae0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d009      	beq.n	800cae0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	68d9      	ldr	r1, [r3, #12]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cadc:	460a      	mov	r2, r1
 800cade:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	0151      	lsls	r1, r2, #5
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	440a      	add	r2, r1
 800caf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cafa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cafe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b089      	sub	sp, #36	; 0x24
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	4611      	mov	r1, r2
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	71fb      	strb	r3, [r7, #7]
 800cb20:	4613      	mov	r3, r2
 800cb22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cb2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d11a      	bne.n	800cb6a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb34:	88bb      	ldrh	r3, [r7, #4]
 800cb36:	3303      	adds	r3, #3
 800cb38:	089b      	lsrs	r3, r3, #2
 800cb3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	61bb      	str	r3, [r7, #24]
 800cb40:	e00f      	b.n	800cb62 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	031a      	lsls	r2, r3, #12
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb4e:	461a      	mov	r2, r3
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	69ba      	ldr	r2, [r7, #24]
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d3eb      	bcc.n	800cb42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3724      	adds	r7, #36	; 0x24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b089      	sub	sp, #36	; 0x24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	4613      	mov	r3, r2
 800cb84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cb8e:	88fb      	ldrh	r3, [r7, #6]
 800cb90:	3303      	adds	r3, #3
 800cb92:	089b      	lsrs	r3, r3, #2
 800cb94:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cb96:	2300      	movs	r3, #0
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	e00b      	b.n	800cbb4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	601a      	str	r2, [r3, #0]
    pDest++;
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	3304      	adds	r3, #4
 800cbac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d3ef      	bcc.n	800cb9c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3724      	adds	r7, #36	; 0x24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b085      	sub	sp, #20
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d12c      	bne.n	800cc40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	015a      	lsls	r2, r3, #5
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	4413      	add	r3, r2
 800cbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	db12      	blt.n	800cc1e <USB_EPSetStall+0x54>
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00f      	beq.n	800cc1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	0151      	lsls	r1, r2, #5
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	440a      	add	r2, r1
 800cc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	0151      	lsls	r1, r2, #5
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	440a      	add	r2, r1
 800cc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	e02b      	b.n	800cc98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	db12      	blt.n	800cc78 <USB_EPSetStall+0xae>
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00f      	beq.n	800cc78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	0151      	lsls	r1, r2, #5
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	440a      	add	r2, r1
 800cc6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	785b      	ldrb	r3, [r3, #1]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d128      	bne.n	800cd14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cce0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	78db      	ldrb	r3, [r3, #3]
 800cce6:	2b03      	cmp	r3, #3
 800cce8:	d003      	beq.n	800ccf2 <USB_EPClearStall+0x4c>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	78db      	ldrb	r3, [r3, #3]
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d138      	bne.n	800cd64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	0151      	lsls	r1, r2, #5
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	440a      	add	r2, r1
 800cd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	e027      	b.n	800cd64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	0151      	lsls	r1, r2, #5
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	440a      	add	r2, r1
 800cd2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	78db      	ldrb	r3, [r3, #3]
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d003      	beq.n	800cd44 <USB_EPClearStall+0x9e>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	78db      	ldrb	r3, [r3, #3]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d10f      	bne.n	800cd64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	78fb      	ldrb	r3, [r7, #3]
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cda6:	68f9      	ldr	r1, [r7, #12]
 800cda8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdac:	4313      	orrs	r3, r2
 800cdae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdd8:	f023 0302 	bic.w	r3, r3, #2
 800cddc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cdde:	2003      	movs	r0, #3
 800cde0:	f7fa ffc6 	bl	8007d70 <HAL_Delay>

  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce08:	f043 0302 	orr.w	r3, r3, #2
 800ce0c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ce0e:	2003      	movs	r0, #3
 800ce10:	f7fa ffae 	bl	8007d70 <HAL_Delay>

  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b085      	sub	sp, #20
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4013      	ands	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce36:	68fb      	ldr	r3, [r7, #12]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	4013      	ands	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	0c1b      	lsrs	r3, r3, #16
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce94:	69db      	ldr	r3, [r3, #28]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	4013      	ands	r3, r2
 800ce9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	b29b      	uxth	r3, r3
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	4013      	ands	r3, r2
 800ced8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ceda:	68bb      	ldr	r3, [r7, #8]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	f003 030f 	and.w	r3, r3, #15
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
 800cf18:	01db      	lsls	r3, r3, #7
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	4013      	ands	r3, r2
 800cf34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf36:	68bb      	ldr	r3, [r7, #8]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	371c      	adds	r7, #28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	f003 0301 	and.w	r3, r3, #1
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cf7e:	f023 0307 	bic.w	r3, r3, #7
 800cf82:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f003 0306 	and.w	r3, r3, #6
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d109      	bne.n	800cfa8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfa2:	f043 0303 	orr.w	r3, r3, #3
 800cfa6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
	...

0800cfcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	333c      	adds	r3, #60	; 0x3c
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	4a26      	ldr	r2, [pc, #152]	; (800d084 <USB_EP0_OutStart+0xb8>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d90a      	bls.n	800d006 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d000:	d101      	bne.n	800d006 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	e037      	b.n	800d076 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00c:	461a      	mov	r2, r3
 800d00e:	2300      	movs	r3, #0
 800d010:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d034:	f043 0318 	orr.w	r3, r3, #24
 800d038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d048:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d04c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d04e:	7afb      	ldrb	r3, [r7, #11]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d10f      	bne.n	800d074 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d05a:	461a      	mov	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d06e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	4f54300a 	.word	0x4f54300a

0800d088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3301      	adds	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4a13      	ldr	r2, [pc, #76]	; (800d0ec <USB_CoreReset+0x64>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d901      	bls.n	800d0a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e01b      	b.n	800d0de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	daf2      	bge.n	800d094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	f043 0201 	orr.w	r2, r3, #1
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	60fb      	str	r3, [r7, #12]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4a09      	ldr	r2, [pc, #36]	; (800d0ec <USB_CoreReset+0x64>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d901      	bls.n	800d0d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e006      	b.n	800d0de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d0f0      	beq.n	800d0be <USB_CoreReset+0x36>

  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	00030d40 	.word	0x00030d40

0800d0f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7c1b      	ldrb	r3, [r3, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d115      	bne.n	800d134 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d10c:	2202      	movs	r2, #2
 800d10e:	2181      	movs	r1, #129	; 0x81
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f004 fe58 	bl	8011dc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d120:	2202      	movs	r2, #2
 800d122:	2101      	movs	r1, #1
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f004 fe4e 	bl	8011dc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d132:	e012      	b.n	800d15a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	2202      	movs	r2, #2
 800d138:	2181      	movs	r1, #129	; 0x81
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f004 fe43 	bl	8011dc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d146:	2340      	movs	r3, #64	; 0x40
 800d148:	2202      	movs	r2, #2
 800d14a:	2101      	movs	r1, #1
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f004 fe3a 	bl	8011dc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d15a:	2308      	movs	r3, #8
 800d15c:	2203      	movs	r2, #3
 800d15e:	2182      	movs	r1, #130	; 0x82
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f004 fe30 	bl	8011dc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2201      	movs	r2, #1
 800d16a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d16c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d170:	f004 ffa6 	bl	80120c0 <malloc>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800d188:	2301      	movs	r3, #1
 800d18a:	73fb      	strb	r3, [r7, #15]
 800d18c:	e026      	b.n	800d1dc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d194:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7c1b      	ldrb	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d109      	bne.n	800d1cc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f004 feef 	bl	8011fa8 <USBD_LL_PrepareReceive>
 800d1ca:	e007      	b.n	800d1dc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1d2:	2340      	movs	r3, #64	; 0x40
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f004 fee6 	bl	8011fa8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d1f6:	2181      	movs	r1, #129	; 0x81
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f004 fe0a 	bl	8011e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d204:	2101      	movs	r1, #1
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f004 fe03 	bl	8011e12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d214:	2182      	movs	r1, #130	; 0x82
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f004 fdfb 	bl	8011e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00e      	beq.n	800d24a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d23c:	4618      	mov	r0, r3
 800d23e:	f004 ff47 	bl	80120d0 <free>
    pdev->pClassData = NULL;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d264:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d266:	2300      	movs	r3, #0
 800d268:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d039      	beq.n	800d2f2 <USBD_CDC_Setup+0x9e>
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d17c      	bne.n	800d37c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	88db      	ldrh	r3, [r3, #6]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d029      	beq.n	800d2de <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	da11      	bge.n	800d2b8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d2a0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	88d2      	ldrh	r2, [r2, #6]
 800d2a6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d2a8:	6939      	ldr	r1, [r7, #16]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	88db      	ldrh	r3, [r3, #6]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f001 f9c9 	bl	800e648 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d2b6:	e068      	b.n	800d38a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	785a      	ldrb	r2, [r3, #1]
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	88db      	ldrh	r3, [r3, #6]
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d2ce:	6939      	ldr	r1, [r7, #16]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	88db      	ldrh	r3, [r3, #6]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f001 f9e4 	bl	800e6a4 <USBD_CtlPrepareRx>
    break;
 800d2dc:	e055      	b.n	800d38a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	7850      	ldrb	r0, [r2, #1]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	4798      	blx	r3
    break;
 800d2f0:	e04b      	b.n	800d38a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	785b      	ldrb	r3, [r3, #1]
 800d2f6:	2b0a      	cmp	r3, #10
 800d2f8:	d017      	beq.n	800d32a <USBD_CDC_Setup+0xd6>
 800d2fa:	2b0b      	cmp	r3, #11
 800d2fc:	d029      	beq.n	800d352 <USBD_CDC_Setup+0xfe>
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d133      	bne.n	800d36a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d308:	2b03      	cmp	r3, #3
 800d30a:	d107      	bne.n	800d31c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d30c:	f107 030c 	add.w	r3, r7, #12
 800d310:	2202      	movs	r2, #2
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f001 f997 	bl	800e648 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d31a:	e02e      	b.n	800d37a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f001 f927 	bl	800e572 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d324:	2302      	movs	r3, #2
 800d326:	75fb      	strb	r3, [r7, #23]
      break;
 800d328:	e027      	b.n	800d37a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d330:	2b03      	cmp	r3, #3
 800d332:	d107      	bne.n	800d344 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d334:	f107 030f 	add.w	r3, r7, #15
 800d338:	2201      	movs	r2, #1
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f001 f983 	bl	800e648 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d342:	e01a      	b.n	800d37a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f001 f913 	bl	800e572 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d34c:	2302      	movs	r3, #2
 800d34e:	75fb      	strb	r3, [r7, #23]
      break;
 800d350:	e013      	b.n	800d37a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d358:	2b03      	cmp	r3, #3
 800d35a:	d00d      	beq.n	800d378 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f001 f907 	bl	800e572 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d364:	2302      	movs	r3, #2
 800d366:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d368:	e006      	b.n	800d378 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 f900 	bl	800e572 <USBD_CtlError>
      ret = USBD_FAIL;
 800d372:	2302      	movs	r3, #2
 800d374:	75fb      	strb	r3, [r7, #23]
      break;
 800d376:	e000      	b.n	800d37a <USBD_CDC_Setup+0x126>
      break;
 800d378:	bf00      	nop
    }
    break;
 800d37a:	e006      	b.n	800d38a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 f8f7 	bl	800e572 <USBD_CtlError>
    ret = USBD_FAIL;
 800d384:	2302      	movs	r3, #2
 800d386:	75fb      	strb	r3, [r7, #23]
    break;
 800d388:	bf00      	nop
  }

  return ret;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d3ae:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d03a      	beq.n	800d430 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d3ba:	78fa      	ldrb	r2, [r7, #3]
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	4413      	add	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	440b      	add	r3, r1
 800d3c8:	331c      	adds	r3, #28
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d029      	beq.n	800d424 <USBD_CDC_DataIn+0x90>
 800d3d0:	78fa      	ldrb	r2, [r7, #3]
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	440b      	add	r3, r1
 800d3de:	331c      	adds	r3, #28
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	78f9      	ldrb	r1, [r7, #3]
 800d3e4:	68b8      	ldr	r0, [r7, #8]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	1a5b      	subs	r3, r3, r1
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4403      	add	r3, r0
 800d3f0:	3344      	adds	r3, #68	; 0x44
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3f8:	fb03 f301 	mul.w	r3, r3, r1
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d110      	bne.n	800d424 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d402:	78fa      	ldrb	r2, [r7, #3]
 800d404:	6879      	ldr	r1, [r7, #4]
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	440b      	add	r3, r1
 800d410:	331c      	adds	r3, #28
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d416:	78f9      	ldrb	r1, [r7, #3]
 800d418:	2300      	movs	r3, #0
 800d41a:	2200      	movs	r2, #0
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f004 fda0 	bl	8011f62 <USBD_LL_Transmit>
 800d422:	e003      	b.n	800d42c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	e000      	b.n	800d432 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d430:	2302      	movs	r3, #2
  }
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d44c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d44e:	78fb      	ldrb	r3, [r7, #3]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f004 fdcb 	bl	8011fee <USBD_LL_GetRxDataSize>
 800d458:	4602      	mov	r2, r0
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00d      	beq.n	800d486 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d47e:	4611      	mov	r1, r2
 800d480:	4798      	blx	r3

    return USBD_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	e000      	b.n	800d488 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d486:	2302      	movs	r3, #2
  }
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d49e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d015      	beq.n	800d4d6 <USBD_CDC_EP0_RxReady+0x46>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d4b0:	2bff      	cmp	r3, #255	; 0xff
 800d4b2:	d010      	beq.n	800d4d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d4c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4ca:	b292      	uxth	r2, r2
 800d4cc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	22ff      	movs	r2, #255	; 0xff
 800d4d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2243      	movs	r2, #67	; 0x43
 800d4ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d4ee:	4b03      	ldr	r3, [pc, #12]	; (800d4fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	20000d48 	.word	0x20000d48

0800d500 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2243      	movs	r2, #67	; 0x43
 800d50c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d50e:	4b03      	ldr	r3, [pc, #12]	; (800d51c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	20000d04 	.word	0x20000d04

0800d520 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2243      	movs	r2, #67	; 0x43
 800d52c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d52e:	4b03      	ldr	r3, [pc, #12]	; (800d53c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20000d8c 	.word	0x20000d8c

0800d540 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	220a      	movs	r2, #10
 800d54c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d54e:	4b03      	ldr	r3, [pc, #12]	; (800d55c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20000cc0 	.word	0x20000cc0

0800d560 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d56a:	2302      	movs	r3, #2
 800d56c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d005      	beq.n	800d580 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d58e:	b480      	push	{r7}
 800d590:	b087      	sub	sp, #28
 800d592:	af00      	add	r7, sp, #0
 800d594:	60f8      	str	r0, [r7, #12]
 800d596:	60b9      	str	r1, [r7, #8]
 800d598:	4613      	mov	r3, r2
 800d59a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5a2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d5ac:	88fa      	ldrh	r2, [r7, #6]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5f8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d600:	2b00      	cmp	r3, #0
 800d602:	d01c      	beq.n	800d63e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d115      	bne.n	800d63a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	2181      	movs	r1, #129	; 0x81
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f004 fc96 	bl	8011f62 <USBD_LL_Transmit>

      return USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	e002      	b.n	800d640 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e000      	b.n	800d640 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d63e:	2302      	movs	r3, #2
  }
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d656:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d017      	beq.n	800d692 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7c1b      	ldrb	r3, [r3, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d109      	bne.n	800d67e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d670:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d674:	2101      	movs	r1, #1
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f004 fc96 	bl	8011fa8 <USBD_LL_PrepareReceive>
 800d67c:	e007      	b.n	800d68e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d684:	2340      	movs	r3, #64	; 0x40
 800d686:	2101      	movs	r1, #1
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f004 fc8d 	bl	8011fa8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	e000      	b.n	800d694 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d692:	2302      	movs	r3, #2
  }
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	e01a      	b.n	800d6ea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d003      	beq.n	800d6d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	79fa      	ldrb	r2, [r7, #7]
 800d6e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f004 fb08 	bl	8011cf8 <USBD_LL_Init>

  return USBD_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b085      	sub	sp, #20
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d006      	beq.n	800d714 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
 800d712:	e001      	b.n	800d718 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d714:	2302      	movs	r3, #2
 800d716:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d718:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f004 fb2e 	bl	8011d90 <USBD_LL_Start>

  return USBD_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d73e:	b480      	push	{r7}
 800d740:	b083      	sub	sp, #12
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d760:	2302      	movs	r3, #2
 800d762:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	4611      	mov	r1, r2
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	4798      	blx	r3
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d788:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	460b      	mov	r3, r1
 800d79c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	4798      	blx	r3
  return USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 fe94 	bl	800e4f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d7de:	461a      	mov	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d7ec:	f003 031f 	and.w	r3, r3, #31
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d00c      	beq.n	800d80e <USBD_LL_SetupStage+0x56>
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d302      	bcc.n	800d7fe <USBD_LL_SetupStage+0x46>
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d010      	beq.n	800d81e <USBD_LL_SetupStage+0x66>
 800d7fc:	e017      	b.n	800d82e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d804:	4619      	mov	r1, r3
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fa04 	bl	800dc14 <USBD_StdDevReq>
    break;
 800d80c:	e01a      	b.n	800d844 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fa66 	bl	800dce8 <USBD_StdItfReq>
    break;
 800d81c:	e012      	b.n	800d844 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 faa4 	bl	800dd74 <USBD_StdEPReq>
    break;
 800d82c:	e00a      	b.n	800d844 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d834:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f004 fb07 	bl	8011e50 <USBD_LL_StallEP>
    break;
 800d842:	bf00      	nop
  }

  return USBD_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b086      	sub	sp, #24
 800d852:	af00      	add	r7, sp, #0
 800d854:	60f8      	str	r0, [r7, #12]
 800d856:	460b      	mov	r3, r1
 800d858:	607a      	str	r2, [r7, #4]
 800d85a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d85c:	7afb      	ldrb	r3, [r7, #11]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d14b      	bne.n	800d8fa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d868:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d870:	2b03      	cmp	r3, #3
 800d872:	d134      	bne.n	800d8de <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d919      	bls.n	800d8b4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	1ad2      	subs	r2, r2, r3
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d896:	429a      	cmp	r2, r3
 800d898:	d203      	bcs.n	800d8a2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	e002      	b.n	800d8a8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	6879      	ldr	r1, [r7, #4]
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 ff17 	bl	800e6e0 <USBD_CtlContinueRx>
 800d8b2:	e038      	b.n	800d926 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d105      	bne.n	800d8d6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f000 ff14 	bl	800e704 <USBD_CtlSendStatus>
 800d8dc:	e023      	b.n	800d926 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d8e4:	2b05      	cmp	r3, #5
 800d8e6:	d11e      	bne.n	800d926 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f004 faac 	bl	8011e50 <USBD_LL_StallEP>
 800d8f8:	e015      	b.n	800d926 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00d      	beq.n	800d922 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d108      	bne.n	800d922 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	7afa      	ldrb	r2, [r7, #11]
 800d91a:	4611      	mov	r1, r2
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	4798      	blx	r3
 800d920:	e001      	b.n	800d926 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d922:	2302      	movs	r3, #2
 800d924:	e000      	b.n	800d928 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3718      	adds	r7, #24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	460b      	mov	r3, r1
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d93e:	7afb      	ldrb	r3, [r7, #11]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d17f      	bne.n	800da44 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3314      	adds	r3, #20
 800d948:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d950:	2b02      	cmp	r3, #2
 800d952:	d15c      	bne.n	800da0e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d915      	bls.n	800d98c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	1ad2      	subs	r2, r2, r3
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	b29b      	uxth	r3, r3
 800d974:	461a      	mov	r2, r3
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f000 fe81 	bl	800e680 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d97e:	2300      	movs	r3, #0
 800d980:	2200      	movs	r2, #0
 800d982:	2100      	movs	r1, #0
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f004 fb0f 	bl	8011fa8 <USBD_LL_PrepareReceive>
 800d98a:	e04e      	b.n	800da2a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	6912      	ldr	r2, [r2, #16]
 800d994:	fbb3 f1f2 	udiv	r1, r3, r2
 800d998:	fb02 f201 	mul.w	r2, r2, r1
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d11c      	bne.n	800d9dc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	689a      	ldr	r2, [r3, #8]
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d316      	bcc.n	800d9dc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	689a      	ldr	r2, [r3, #8]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d20f      	bcs.n	800d9dc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2100      	movs	r1, #0
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 fe5d 	bl	800e680 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f004 fae7 	bl	8011fa8 <USBD_LL_PrepareReceive>
 800d9da:	e026      	b.n	800da2a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00a      	beq.n	800d9fe <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d9ee:	2b03      	cmp	r3, #3
 800d9f0:	d105      	bne.n	800d9fe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d9fe:	2180      	movs	r1, #128	; 0x80
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f004 fa25 	bl	8011e50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f000 fe8f 	bl	800e72a <USBD_CtlReceiveStatus>
 800da0c:	e00d      	b.n	800da2a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800da14:	2b04      	cmp	r3, #4
 800da16:	d004      	beq.n	800da22 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d103      	bne.n	800da2a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800da22:	2180      	movs	r1, #128	; 0x80
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f004 fa13 	bl	8011e50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800da30:	2b01      	cmp	r3, #1
 800da32:	d11d      	bne.n	800da70 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff fe82 	bl	800d73e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800da42:	e015      	b.n	800da70 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00d      	beq.n	800da6c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800da56:	2b03      	cmp	r3, #3
 800da58:	d108      	bne.n	800da6c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	7afa      	ldrb	r2, [r7, #11]
 800da64:	4611      	mov	r1, r2
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	4798      	blx	r3
 800da6a:	e001      	b.n	800da70 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da6c:	2302      	movs	r3, #2
 800da6e:	e000      	b.n	800da72 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da82:	2340      	movs	r3, #64	; 0x40
 800da84:	2200      	movs	r2, #0
 800da86:	2100      	movs	r1, #0
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f004 f99c 	bl	8011dc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2240      	movs	r2, #64	; 0x40
 800da9a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da9e:	2340      	movs	r3, #64	; 0x40
 800daa0:	2200      	movs	r2, #0
 800daa2:	2180      	movs	r1, #128	; 0x80
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f004 f98e 	bl	8011dc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2201      	movs	r2, #1
 800daae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2240      	movs	r2, #64	; 0x40
 800dab4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d009      	beq.n	800daf2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6852      	ldr	r2, [r2, #4]
 800daea:	b2d2      	uxtb	r2, r2
 800daec:	4611      	mov	r1, r2
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	4798      	blx	r3
  }

  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	78fa      	ldrb	r2, [r7, #3]
 800db0c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2204      	movs	r2, #4
 800db34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800db46:	b480      	push	{r7}
 800db48:	b083      	sub	sp, #12
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800db76:	2b03      	cmp	r3, #3
 800db78:	d10b      	bne.n	800db92 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d005      	beq.n	800db92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db8c:	69db      	ldr	r3, [r3, #28]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	370c      	adds	r7, #12
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b083      	sub	sp, #12
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6852      	ldr	r2, [r2, #4]
 800dc02:	b2d2      	uxtb	r2, r2
 800dc04:	4611      	mov	r1, r2
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	4798      	blx	r3

  return USBD_OK;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc2a:	2b20      	cmp	r3, #32
 800dc2c:	d004      	beq.n	800dc38 <USBD_StdDevReq+0x24>
 800dc2e:	2b40      	cmp	r3, #64	; 0x40
 800dc30:	d002      	beq.n	800dc38 <USBD_StdDevReq+0x24>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d008      	beq.n	800dc48 <USBD_StdDevReq+0x34>
 800dc36:	e04c      	b.n	800dcd2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	4798      	blx	r3
    break;
 800dc46:	e049      	b.n	800dcdc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	785b      	ldrb	r3, [r3, #1]
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	d83a      	bhi.n	800dcc6 <USBD_StdDevReq+0xb2>
 800dc50:	a201      	add	r2, pc, #4	; (adr r2, 800dc58 <USBD_StdDevReq+0x44>)
 800dc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc56:	bf00      	nop
 800dc58:	0800dca9 	.word	0x0800dca9
 800dc5c:	0800dcbd 	.word	0x0800dcbd
 800dc60:	0800dcc7 	.word	0x0800dcc7
 800dc64:	0800dcb3 	.word	0x0800dcb3
 800dc68:	0800dcc7 	.word	0x0800dcc7
 800dc6c:	0800dc8b 	.word	0x0800dc8b
 800dc70:	0800dc81 	.word	0x0800dc81
 800dc74:	0800dcc7 	.word	0x0800dcc7
 800dc78:	0800dc9f 	.word	0x0800dc9f
 800dc7c:	0800dc95 	.word	0x0800dc95
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f9d2 	bl	800e02c <USBD_GetDescriptor>
      break;
 800dc88:	e022      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fac7 	bl	800e220 <USBD_SetAddress>
      break;
 800dc92:	e01d      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fb04 	bl	800e2a4 <USBD_SetConfig>
      break;
 800dc9c:	e018      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800dc9e:	6839      	ldr	r1, [r7, #0]
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fb8d 	bl	800e3c0 <USBD_GetConfig>
      break;
 800dca6:	e013      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fbbc 	bl	800e428 <USBD_GetStatus>
      break;
 800dcb0:	e00e      	b.n	800dcd0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fbea 	bl	800e48e <USBD_SetFeature>
      break;
 800dcba:	e009      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fbf9 	bl	800e4b6 <USBD_ClrFeature>
      break;
 800dcc4:	e004      	b.n	800dcd0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 fc52 	bl	800e572 <USBD_CtlError>
      break;
 800dcce:	bf00      	nop
    }
    break;
 800dcd0:	e004      	b.n	800dcdc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fc4c 	bl	800e572 <USBD_CtlError>
    break;
 800dcda:	bf00      	nop
  }

  return ret;
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop

0800dce8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcfe:	2b20      	cmp	r3, #32
 800dd00:	d003      	beq.n	800dd0a <USBD_StdItfReq+0x22>
 800dd02:	2b40      	cmp	r3, #64	; 0x40
 800dd04:	d001      	beq.n	800dd0a <USBD_StdItfReq+0x22>
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d12a      	bne.n	800dd60 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd10:	3b01      	subs	r3, #1
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d81d      	bhi.n	800dd52 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	889b      	ldrh	r3, [r3, #4]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d813      	bhi.n	800dd48 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	4798      	blx	r3
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	88db      	ldrh	r3, [r3, #6]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d110      	bne.n	800dd5c <USBD_StdItfReq+0x74>
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10d      	bne.n	800dd5c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fcdf 	bl	800e704 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dd46:	e009      	b.n	800dd5c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fc11 	bl	800e572 <USBD_CtlError>
      break;
 800dd50:	e004      	b.n	800dd5c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fc0c 	bl	800e572 <USBD_CtlError>
      break;
 800dd5a:	e000      	b.n	800dd5e <USBD_StdItfReq+0x76>
      break;
 800dd5c:	bf00      	nop
    }
    break;
 800dd5e:	e004      	b.n	800dd6a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fc05 	bl	800e572 <USBD_CtlError>
    break;
 800dd68:	bf00      	nop
  }

  return USBD_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	889b      	ldrh	r3, [r3, #4]
 800dd86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd90:	2b20      	cmp	r3, #32
 800dd92:	d004      	beq.n	800dd9e <USBD_StdEPReq+0x2a>
 800dd94:	2b40      	cmp	r3, #64	; 0x40
 800dd96:	d002      	beq.n	800dd9e <USBD_StdEPReq+0x2a>
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d008      	beq.n	800ddae <USBD_StdEPReq+0x3a>
 800dd9c:	e13b      	b.n	800e016 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	4798      	blx	r3
    break;
 800ddac:	e138      	b.n	800e020 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddb6:	2b20      	cmp	r3, #32
 800ddb8:	d10a      	bne.n	800ddd0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	4798      	blx	r3
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	e128      	b.n	800e022 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d03e      	beq.n	800de56 <USBD_StdEPReq+0xe2>
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d002      	beq.n	800dde2 <USBD_StdEPReq+0x6e>
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d070      	beq.n	800dec2 <USBD_StdEPReq+0x14e>
 800dde0:	e113      	b.n	800e00a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d002      	beq.n	800ddf2 <USBD_StdEPReq+0x7e>
 800ddec:	2b03      	cmp	r3, #3
 800ddee:	d015      	beq.n	800de1c <USBD_StdEPReq+0xa8>
 800ddf0:	e02b      	b.n	800de4a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddf2:	7bbb      	ldrb	r3, [r7, #14]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00c      	beq.n	800de12 <USBD_StdEPReq+0x9e>
 800ddf8:	7bbb      	ldrb	r3, [r7, #14]
 800ddfa:	2b80      	cmp	r3, #128	; 0x80
 800ddfc:	d009      	beq.n	800de12 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ddfe:	7bbb      	ldrb	r3, [r7, #14]
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f004 f824 	bl	8011e50 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800de08:	2180      	movs	r1, #128	; 0x80
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f004 f820 	bl	8011e50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de10:	e020      	b.n	800de54 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fbac 	bl	800e572 <USBD_CtlError>
        break;
 800de1a:	e01b      	b.n	800de54 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	885b      	ldrh	r3, [r3, #2]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10e      	bne.n	800de42 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00b      	beq.n	800de42 <USBD_StdEPReq+0xce>
 800de2a:	7bbb      	ldrb	r3, [r7, #14]
 800de2c:	2b80      	cmp	r3, #128	; 0x80
 800de2e:	d008      	beq.n	800de42 <USBD_StdEPReq+0xce>
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	88db      	ldrh	r3, [r3, #6]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d104      	bne.n	800de42 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800de38:	7bbb      	ldrb	r3, [r7, #14]
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f004 f807 	bl	8011e50 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fc5e 	bl	800e704 <USBD_CtlSendStatus>

        break;
 800de48:	e004      	b.n	800de54 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fb90 	bl	800e572 <USBD_CtlError>
        break;
 800de52:	bf00      	nop
      }
      break;
 800de54:	e0de      	b.n	800e014 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d002      	beq.n	800de66 <USBD_StdEPReq+0xf2>
 800de60:	2b03      	cmp	r3, #3
 800de62:	d015      	beq.n	800de90 <USBD_StdEPReq+0x11c>
 800de64:	e026      	b.n	800deb4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00c      	beq.n	800de86 <USBD_StdEPReq+0x112>
 800de6c:	7bbb      	ldrb	r3, [r7, #14]
 800de6e:	2b80      	cmp	r3, #128	; 0x80
 800de70:	d009      	beq.n	800de86 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800de72:	7bbb      	ldrb	r3, [r7, #14]
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f003 ffea 	bl	8011e50 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800de7c:	2180      	movs	r1, #128	; 0x80
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f003 ffe6 	bl	8011e50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de84:	e01c      	b.n	800dec0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fb72 	bl	800e572 <USBD_CtlError>
        break;
 800de8e:	e017      	b.n	800dec0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	885b      	ldrh	r3, [r3, #2]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d112      	bne.n	800debe <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	4619      	mov	r1, r3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f003 fff1 	bl	8011e8e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fc29 	bl	800e704 <USBD_CtlSendStatus>
        }
        break;
 800deb2:	e004      	b.n	800debe <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800deb4:	6839      	ldr	r1, [r7, #0]
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fb5b 	bl	800e572 <USBD_CtlError>
        break;
 800debc:	e000      	b.n	800dec0 <USBD_StdEPReq+0x14c>
        break;
 800debe:	bf00      	nop
      }
      break;
 800dec0:	e0a8      	b.n	800e014 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d002      	beq.n	800ded2 <USBD_StdEPReq+0x15e>
 800decc:	2b03      	cmp	r3, #3
 800dece:	d031      	beq.n	800df34 <USBD_StdEPReq+0x1c0>
 800ded0:	e095      	b.n	800dffe <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <USBD_StdEPReq+0x174>
 800ded8:	7bbb      	ldrb	r3, [r7, #14]
 800deda:	2b80      	cmp	r3, #128	; 0x80
 800dedc:	d004      	beq.n	800dee8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fb46 	bl	800e572 <USBD_CtlError>
          break;
 800dee6:	e08f      	b.n	800e008 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deec:	2b00      	cmp	r3, #0
 800deee:	da0b      	bge.n	800df08 <USBD_StdEPReq+0x194>
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800def6:	4613      	mov	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	3310      	adds	r3, #16
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	4413      	add	r3, r2
 800df04:	3304      	adds	r3, #4
 800df06:	e00a      	b.n	800df1e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df0e:	4613      	mov	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	4413      	add	r3, r2
 800df1e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2202      	movs	r2, #2
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fb8b 	bl	800e648 <USBD_CtlSendData>
          break;
 800df32:	e069      	b.n	800e008 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800df34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	da11      	bge.n	800df60 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	f003 020f 	and.w	r2, r3, #15
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	4613      	mov	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	440b      	add	r3, r1
 800df4e:	3318      	adds	r3, #24
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d117      	bne.n	800df86 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 fb0a 	bl	800e572 <USBD_CtlError>
            break;
 800df5e:	e053      	b.n	800e008 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	f003 020f 	and.w	r2, r3, #15
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4613      	mov	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	440b      	add	r3, r1
 800df72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d104      	bne.n	800df86 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800df7c:	6839      	ldr	r1, [r7, #0]
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 faf7 	bl	800e572 <USBD_CtlError>
            break;
 800df84:	e040      	b.n	800e008 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	da0b      	bge.n	800dfa6 <USBD_StdEPReq+0x232>
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
 800df90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	3310      	adds	r3, #16
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	e00a      	b.n	800dfbc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dfac:	4613      	mov	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4413      	add	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	4413      	add	r3, r2
 800dfbc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <USBD_StdEPReq+0x256>
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
 800dfc6:	2b80      	cmp	r3, #128	; 0x80
 800dfc8:	d103      	bne.n	800dfd2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	601a      	str	r2, [r3, #0]
 800dfd0:	e00e      	b.n	800dff0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f003 ff78 	bl	8011ecc <USBD_LL_IsStallEP>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	e002      	b.n	800dff0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2200      	movs	r2, #0
 800dfee:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2202      	movs	r2, #2
 800dff4:	4619      	mov	r1, r3
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 fb26 	bl	800e648 <USBD_CtlSendData>
          break;
 800dffc:	e004      	b.n	800e008 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fab6 	bl	800e572 <USBD_CtlError>
        break;
 800e006:	bf00      	nop
      }
      break;
 800e008:	e004      	b.n	800e014 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fab0 	bl	800e572 <USBD_CtlError>
      break;
 800e012:	bf00      	nop
    }
    break;
 800e014:	e004      	b.n	800e020 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 faaa 	bl	800e572 <USBD_CtlError>
    break;
 800e01e:	bf00      	nop
  }

  return ret;
 800e020:	7bfb      	ldrb	r3, [r7, #15]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
	...

0800e02c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	885b      	ldrh	r3, [r3, #2]
 800e03a:	0a1b      	lsrs	r3, r3, #8
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	3b01      	subs	r3, #1
 800e040:	2b06      	cmp	r3, #6
 800e042:	f200 80c9 	bhi.w	800e1d8 <USBD_GetDescriptor+0x1ac>
 800e046:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <USBD_GetDescriptor+0x20>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e069 	.word	0x0800e069
 800e050:	0800e081 	.word	0x0800e081
 800e054:	0800e0c1 	.word	0x0800e0c1
 800e058:	0800e1d9 	.word	0x0800e1d9
 800e05c:	0800e1d9 	.word	0x0800e1d9
 800e060:	0800e185 	.word	0x0800e185
 800e064:	0800e1ab 	.word	0x0800e1ab
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	7c12      	ldrb	r2, [r2, #16]
 800e074:	f107 010a 	add.w	r1, r7, #10
 800e078:	4610      	mov	r0, r2
 800e07a:	4798      	blx	r3
 800e07c:	60f8      	str	r0, [r7, #12]
    break;
 800e07e:	e0b0      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7c1b      	ldrb	r3, [r3, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10d      	bne.n	800e0a4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e090:	f107 020a 	add.w	r2, r7, #10
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3301      	adds	r3, #1
 800e09e:	2202      	movs	r2, #2
 800e0a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e0a2:	e09e      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ac:	f107 020a 	add.w	r2, r7, #10
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	4798      	blx	r3
 800e0b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	701a      	strb	r2, [r3, #0]
    break;
 800e0be:	e090      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	885b      	ldrh	r3, [r3, #2]
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b05      	cmp	r3, #5
 800e0c8:	d856      	bhi.n	800e178 <USBD_GetDescriptor+0x14c>
 800e0ca:	a201      	add	r2, pc, #4	; (adr r2, 800e0d0 <USBD_GetDescriptor+0xa4>)
 800e0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d0:	0800e0e9 	.word	0x0800e0e9
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	0800e119 	.word	0x0800e119
 800e0dc:	0800e131 	.word	0x0800e131
 800e0e0:	0800e149 	.word	0x0800e149
 800e0e4:	0800e161 	.word	0x0800e161
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	7c12      	ldrb	r2, [r2, #16]
 800e0f4:	f107 010a 	add.w	r1, r7, #10
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	4798      	blx	r3
 800e0fc:	60f8      	str	r0, [r7, #12]
      break;
 800e0fe:	e040      	b.n	800e182 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	7c12      	ldrb	r2, [r2, #16]
 800e10c:	f107 010a 	add.w	r1, r7, #10
 800e110:	4610      	mov	r0, r2
 800e112:	4798      	blx	r3
 800e114:	60f8      	str	r0, [r7, #12]
      break;
 800e116:	e034      	b.n	800e182 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	7c12      	ldrb	r2, [r2, #16]
 800e124:	f107 010a 	add.w	r1, r7, #10
 800e128:	4610      	mov	r0, r2
 800e12a:	4798      	blx	r3
 800e12c:	60f8      	str	r0, [r7, #12]
      break;
 800e12e:	e028      	b.n	800e182 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	7c12      	ldrb	r2, [r2, #16]
 800e13c:	f107 010a 	add.w	r1, r7, #10
 800e140:	4610      	mov	r0, r2
 800e142:	4798      	blx	r3
 800e144:	60f8      	str	r0, [r7, #12]
      break;
 800e146:	e01c      	b.n	800e182 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	7c12      	ldrb	r2, [r2, #16]
 800e154:	f107 010a 	add.w	r1, r7, #10
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
 800e15c:	60f8      	str	r0, [r7, #12]
      break;
 800e15e:	e010      	b.n	800e182 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	7c12      	ldrb	r2, [r2, #16]
 800e16c:	f107 010a 	add.w	r1, r7, #10
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	60f8      	str	r0, [r7, #12]
      break;
 800e176:	e004      	b.n	800e182 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f9f9 	bl	800e572 <USBD_CtlError>
      return;
 800e180:	e04b      	b.n	800e21a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e182:	e02e      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7c1b      	ldrb	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d109      	bne.n	800e1a0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e194:	f107 020a 	add.w	r2, r7, #10
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	60f8      	str	r0, [r7, #12]
      break;
 800e19e:	e020      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 f9e5 	bl	800e572 <USBD_CtlError>
      return;
 800e1a8:	e037      	b.n	800e21a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7c1b      	ldrb	r3, [r3, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10d      	bne.n	800e1ce <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	f107 020a 	add.w	r2, r7, #10
 800e1be:	4610      	mov	r0, r2
 800e1c0:	4798      	blx	r3
 800e1c2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	2207      	movs	r2, #7
 800e1ca:	701a      	strb	r2, [r3, #0]
      break;
 800e1cc:	e009      	b.n	800e1e2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f9ce 	bl	800e572 <USBD_CtlError>
      return;
 800e1d6:	e020      	b.n	800e21a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f9c9 	bl	800e572 <USBD_CtlError>
    return;
 800e1e0:	e01b      	b.n	800e21a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e1e2:	897b      	ldrh	r3, [r7, #10]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d011      	beq.n	800e20c <USBD_GetDescriptor+0x1e0>
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	88db      	ldrh	r3, [r3, #6]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00d      	beq.n	800e20c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	88da      	ldrh	r2, [r3, #6]
 800e1f4:	897b      	ldrh	r3, [r7, #10]
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	bf28      	it	cs
 800e1fa:	4613      	movcs	r3, r2
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e200:	897b      	ldrh	r3, [r7, #10]
 800e202:	461a      	mov	r2, r3
 800e204:	68f9      	ldr	r1, [r7, #12]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fa1e 	bl	800e648 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	88db      	ldrh	r3, [r3, #6]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fa75 	bl	800e704 <USBD_CtlSendStatus>
  }
}
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	889b      	ldrh	r3, [r3, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d130      	bne.n	800e294 <USBD_SetAddress+0x74>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	88db      	ldrh	r3, [r3, #6]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d12c      	bne.n	800e294 <USBD_SetAddress+0x74>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	885b      	ldrh	r3, [r3, #2]
 800e23e:	2b7f      	cmp	r3, #127	; 0x7f
 800e240:	d828      	bhi.n	800e294 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	885b      	ldrh	r3, [r3, #2]
 800e246:	b2db      	uxtb	r3, r3
 800e248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e24c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e254:	2b03      	cmp	r3, #3
 800e256:	d104      	bne.n	800e262 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e258:	6839      	ldr	r1, [r7, #0]
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f989 	bl	800e572 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e260:	e01c      	b.n	800e29c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	7bfa      	ldrb	r2, [r7, #15]
 800e266:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f003 fe58 	bl	8011f24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fa45 	bl	800e704 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2202      	movs	r2, #2
 800e284:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e288:	e008      	b.n	800e29c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e292:	e003      	b.n	800e29c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 f96b 	bl	800e572 <USBD_CtlError>
  }
}
 800e29c:	bf00      	nop
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	885b      	ldrh	r3, [r3, #2]
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	4b41      	ldr	r3, [pc, #260]	; (800e3bc <USBD_SetConfig+0x118>)
 800e2b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2b8:	4b40      	ldr	r3, [pc, #256]	; (800e3bc <USBD_SetConfig+0x118>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d904      	bls.n	800e2ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f955 	bl	800e572 <USBD_CtlError>
 800e2c8:	e075      	b.n	800e3b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d002      	beq.n	800e2da <USBD_SetConfig+0x36>
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d023      	beq.n	800e320 <USBD_SetConfig+0x7c>
 800e2d8:	e062      	b.n	800e3a0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e2da:	4b38      	ldr	r3, [pc, #224]	; (800e3bc <USBD_SetConfig+0x118>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d01a      	beq.n	800e318 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e2e2:	4b36      	ldr	r3, [pc, #216]	; (800e3bc <USBD_SetConfig+0x118>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2203      	movs	r2, #3
 800e2f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e2f4:	4b31      	ldr	r3, [pc, #196]	; (800e3bc <USBD_SetConfig+0x118>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff fa2a 	bl	800d754 <USBD_SetClassConfig>
 800e300:	4603      	mov	r3, r0
 800e302:	2b02      	cmp	r3, #2
 800e304:	d104      	bne.n	800e310 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f932 	bl	800e572 <USBD_CtlError>
          return;
 800e30e:	e052      	b.n	800e3b6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f9f7 	bl	800e704 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e316:	e04e      	b.n	800e3b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f9f3 	bl	800e704 <USBD_CtlSendStatus>
      break;
 800e31e:	e04a      	b.n	800e3b6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e320:	4b26      	ldr	r3, [pc, #152]	; (800e3bc <USBD_SetConfig+0x118>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d112      	bne.n	800e34e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2202      	movs	r2, #2
 800e32c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e330:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <USBD_SetConfig+0x118>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	461a      	mov	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e33a:	4b20      	ldr	r3, [pc, #128]	; (800e3bc <USBD_SetConfig+0x118>)
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff fa26 	bl	800d792 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f9dc 	bl	800e704 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e34c:	e033      	b.n	800e3b6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e34e:	4b1b      	ldr	r3, [pc, #108]	; (800e3bc <USBD_SetConfig+0x118>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d01d      	beq.n	800e398 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	b2db      	uxtb	r3, r3
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff fa14 	bl	800d792 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e36a:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <USBD_SetConfig+0x118>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e374:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <USBD_SetConfig+0x118>)
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff f9ea 	bl	800d754 <USBD_SetClassConfig>
 800e380:	4603      	mov	r3, r0
 800e382:	2b02      	cmp	r3, #2
 800e384:	d104      	bne.n	800e390 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f8f2 	bl	800e572 <USBD_CtlError>
          return;
 800e38e:	e012      	b.n	800e3b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f9b7 	bl	800e704 <USBD_CtlSendStatus>
      break;
 800e396:	e00e      	b.n	800e3b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f9b3 	bl	800e704 <USBD_CtlSendStatus>
      break;
 800e39e:	e00a      	b.n	800e3b6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8e5 	bl	800e572 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e3a8:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <USBD_SetConfig+0x118>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7ff f9ef 	bl	800d792 <USBD_ClrClassConfig>
      break;
 800e3b4:	bf00      	nop
    }
  }
}
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20001484 	.word	0x20001484

0800e3c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	88db      	ldrh	r3, [r3, #6]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d004      	beq.n	800e3dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f8cc 	bl	800e572 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e3da:	e021      	b.n	800e420 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	db17      	blt.n	800e416 <USBD_GetConfig+0x56>
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	dd02      	ble.n	800e3f0 <USBD_GetConfig+0x30>
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d00b      	beq.n	800e406 <USBD_GetConfig+0x46>
 800e3ee:	e012      	b.n	800e416 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f922 	bl	800e648 <USBD_CtlSendData>
      break;
 800e404:	e00c      	b.n	800e420 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	3304      	adds	r3, #4
 800e40a:	2201      	movs	r2, #1
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f91a 	bl	800e648 <USBD_CtlSendData>
      break;
 800e414:	e004      	b.n	800e420 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f8aa 	bl	800e572 <USBD_CtlError>
      break;
 800e41e:	bf00      	nop
}
 800e420:	bf00      	nop
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e438:	3b01      	subs	r3, #1
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d81e      	bhi.n	800e47c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	88db      	ldrh	r3, [r3, #6]
 800e442:	2b02      	cmp	r3, #2
 800e444:	d004      	beq.n	800e450 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f892 	bl	800e572 <USBD_CtlError>
      break;
 800e44e:	e01a      	b.n	800e486 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f043 0202 	orr.w	r2, r3, #2
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	330c      	adds	r3, #12
 800e470:	2202      	movs	r2, #2
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f8e7 	bl	800e648 <USBD_CtlSendData>
    break;
 800e47a:	e004      	b.n	800e486 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f877 	bl	800e572 <USBD_CtlError>
    break;
 800e484:	bf00      	nop
  }
}
 800e486:	bf00      	nop
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b082      	sub	sp, #8
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	885b      	ldrh	r3, [r3, #2]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d106      	bne.n	800e4ae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 f92b 	bl	800e704 <USBD_CtlSendStatus>
  }

}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d80b      	bhi.n	800e4e4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	885b      	ldrh	r3, [r3, #2]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d10c      	bne.n	800e4ee <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f911 	bl	800e704 <USBD_CtlSendStatus>
    }
    break;
 800e4e2:	e004      	b.n	800e4ee <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f843 	bl	800e572 <USBD_CtlError>
    break;
 800e4ec:	e000      	b.n	800e4f0 <USBD_ClrFeature+0x3a>
    break;
 800e4ee:	bf00      	nop
  }
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	781a      	ldrb	r2, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	785a      	ldrb	r2, [r3, #1]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	3302      	adds	r3, #2
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	3303      	adds	r3, #3
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	b29b      	uxth	r3, r3
 800e522:	021b      	lsls	r3, r3, #8
 800e524:	b29b      	uxth	r3, r3
 800e526:	4413      	add	r3, r2
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	3304      	adds	r3, #4
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	b29a      	uxth	r2, r3
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3305      	adds	r3, #5
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	021b      	lsls	r3, r3, #8
 800e540:	b29b      	uxth	r3, r3
 800e542:	4413      	add	r3, r2
 800e544:	b29a      	uxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	3306      	adds	r3, #6
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	b29a      	uxth	r2, r3
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	3307      	adds	r3, #7
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	b29b      	uxth	r3, r3
 800e55a:	021b      	lsls	r3, r3, #8
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	4413      	add	r3, r2
 800e560:	b29a      	uxth	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	80da      	strh	r2, [r3, #6]

}
 800e566:	bf00      	nop
 800e568:	370c      	adds	r7, #12
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b082      	sub	sp, #8
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e57c:	2180      	movs	r1, #128	; 0x80
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f003 fc66 	bl	8011e50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e584:	2100      	movs	r1, #0
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f003 fc62 	bl	8011e50 <USBD_LL_StallEP>
}
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d032      	beq.n	800e610 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f834 	bl	800e618 <USBD_GetLen>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	005b      	lsls	r3, r3, #1
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e5be:	7dfb      	ldrb	r3, [r7, #23]
 800e5c0:	1c5a      	adds	r2, r3, #1
 800e5c2:	75fa      	strb	r2, [r7, #23]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e5d0:	7dfb      	ldrb	r3, [r7, #23]
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	75fa      	strb	r2, [r7, #23]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	4413      	add	r3, r2
 800e5dc:	2203      	movs	r2, #3
 800e5de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e5e0:	e012      	b.n	800e608 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	60fa      	str	r2, [r7, #12]
 800e5e8:	7dfa      	ldrb	r2, [r7, #23]
 800e5ea:	1c51      	adds	r1, r2, #1
 800e5ec:	75f9      	strb	r1, [r7, #23]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	440a      	add	r2, r1
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	75fa      	strb	r2, [r7, #23]
 800e5fe:	461a      	mov	r2, r3
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	4413      	add	r3, r2
 800e604:	2200      	movs	r2, #0
 800e606:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1e8      	bne.n	800e5e2 <USBD_GetString+0x4e>
    }
  }
}
 800e610:	bf00      	nop
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e624:	e005      	b.n	800e632 <USBD_GetLen+0x1a>
    {
        len++;
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	3301      	adds	r3, #1
 800e62a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	3301      	adds	r3, #1
 800e630:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1f5      	bne.n	800e626 <USBD_GetLen+0xe>
    }

    return len;
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3714      	adds	r7, #20
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	4613      	mov	r3, r2
 800e654:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2202      	movs	r2, #2
 800e65a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e65e:	88fa      	ldrh	r2, [r7, #6]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e664:	88fa      	ldrh	r2, [r7, #6]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e66a:	88fb      	ldrh	r3, [r7, #6]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	2100      	movs	r1, #0
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f003 fc76 	bl	8011f62 <USBD_LL_Transmit>

  return USBD_OK;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	4613      	mov	r3, r2
 800e68c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e68e:	88fb      	ldrh	r3, [r7, #6]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	2100      	movs	r1, #0
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f003 fc64 	bl	8011f62 <USBD_LL_Transmit>

  return USBD_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2203      	movs	r2, #3
 800e6b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e6ba:	88fa      	ldrh	r2, [r7, #6]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e6c2:	88fa      	ldrh	r2, [r7, #6]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e6ca:	88fb      	ldrh	r3, [r7, #6]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f003 fc69 	bl	8011fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e6ee:	88fb      	ldrh	r3, [r7, #6]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f003 fc57 	bl	8011fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2204      	movs	r2, #4
 800e710:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e714:	2300      	movs	r3, #0
 800e716:	2200      	movs	r2, #0
 800e718:	2100      	movs	r1, #0
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f003 fc21 	bl	8011f62 <USBD_LL_Transmit>

  return USBD_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b082      	sub	sp, #8
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2205      	movs	r2, #5
 800e736:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e73a:	2300      	movs	r3, #0
 800e73c:	2200      	movs	r2, #0
 800e73e:	2100      	movs	r1, #0
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f003 fc31 	bl	8011fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e75a:	2300      	movs	r3, #0
 800e75c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e75e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e762:	2b84      	cmp	r3, #132	; 0x84
 800e764:	d005      	beq.n	800e772 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e766:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4413      	add	r3, r2
 800e76e:	3303      	adds	r3, #3
 800e770:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e772:	68fb      	ldr	r3, [r7, #12]
}
 800e774:	4618      	mov	r0, r3
 800e776:	3714      	adds	r7, #20
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e786:	f3ef 8305 	mrs	r3, IPSR
 800e78a:	607b      	str	r3, [r7, #4]
  return(result);
 800e78c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e78e:	2b00      	cmp	r3, #0
 800e790:	bf14      	ite	ne
 800e792:	2301      	movne	r3, #1
 800e794:	2300      	moveq	r3, #0
 800e796:	b2db      	uxtb	r3, r3
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e7a8:	f001 fcca 	bl	8010140 <vTaskStartScheduler>
  
  return osOK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7b4:	b089      	sub	sp, #36	; 0x24
 800e7b6:	af04      	add	r7, sp, #16
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d020      	beq.n	800e806 <osThreadCreate+0x54>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01c      	beq.n	800e806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685c      	ldr	r4, [r3, #4]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681d      	ldr	r5, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	691e      	ldr	r6, [r3, #16]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff ffb6 	bl	800e750 <makeFreeRtosPriority>
 800e7e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	695b      	ldr	r3, [r3, #20]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e7ee:	9202      	str	r2, [sp, #8]
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	9100      	str	r1, [sp, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	4632      	mov	r2, r6
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f001 fae5 	bl	800fdca <xTaskCreateStatic>
 800e800:	4603      	mov	r3, r0
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e01c      	b.n	800e840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685c      	ldr	r4, [r3, #4]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e812:	b29e      	uxth	r6, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff ff98 	bl	800e750 <makeFreeRtosPriority>
 800e820:	4602      	mov	r2, r0
 800e822:	f107 030c 	add.w	r3, r7, #12
 800e826:	9301      	str	r3, [sp, #4]
 800e828:	9200      	str	r2, [sp, #0]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	4632      	mov	r2, r6
 800e82e:	4629      	mov	r1, r5
 800e830:	4620      	mov	r0, r4
 800e832:	f001 fb23 	bl	800fe7c <xTaskCreate>
 800e836:	4603      	mov	r3, r0
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d001      	beq.n	800e840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e83c:	2300      	movs	r3, #0
 800e83e:	e000      	b.n	800e842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e840:	68fb      	ldr	r3, [r7, #12]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e84a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <osDelay+0x16>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	e000      	b.n	800e862 <osDelay+0x18>
 800e860:	2301      	movs	r3, #1
 800e862:	4618      	mov	r0, r3
 800e864:	f001 fc38 	bl	80100d8 <vTaskDelay>
  
  return osOK;
 800e868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b082      	sub	sp, #8
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d007      	beq.n	800e892 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	4619      	mov	r1, r3
 800e888:	2001      	movs	r0, #1
 800e88a:	f000 fce1 	bl	800f250 <xQueueCreateMutexStatic>
 800e88e:	4603      	mov	r3, r0
 800e890:	e003      	b.n	800e89a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800e892:	2001      	movs	r0, #1
 800e894:	f000 fcc4 	bl	800f220 <xQueueCreateMutex>
 800e898:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <osMutexWait+0x18>
    return osErrorParameter;
 800e8b8:	2380      	movs	r3, #128	; 0x80
 800e8ba:	e03a      	b.n	800e932 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c6:	d103      	bne.n	800e8d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800e8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8cc:	60fb      	str	r3, [r7, #12]
 800e8ce:	e009      	b.n	800e8e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d006      	beq.n	800e8e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <osMutexWait+0x40>
      ticks = 1;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e8e4:	f7ff ff4c 	bl	800e780 <inHandlerMode>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d017      	beq.n	800e91e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e8ee:	f107 0308 	add.w	r3, r7, #8
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f001 f8c2 	bl	800fa80 <xQueueReceiveFromISR>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d001      	beq.n	800e906 <osMutexWait+0x62>
      return osErrorOS;
 800e902:	23ff      	movs	r3, #255	; 0xff
 800e904:	e015      	b.n	800e932 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d011      	beq.n	800e930 <osMutexWait+0x8c>
 800e90c:	4b0b      	ldr	r3, [pc, #44]	; (800e93c <osMutexWait+0x98>)
 800e90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	f3bf 8f6f 	isb	sy
 800e91c:	e008      	b.n	800e930 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800e91e:	68f9      	ldr	r1, [r7, #12]
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 ffa5 	bl	800f870 <xQueueSemaphoreTake>
 800e926:	4603      	mov	r3, r0
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d001      	beq.n	800e930 <osMutexWait+0x8c>
    return osErrorOS;
 800e92c:	23ff      	movs	r3, #255	; 0xff
 800e92e:	e000      	b.n	800e932 <osMutexWait+0x8e>
  }
  
  return osOK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	e000ed04 	.word	0xe000ed04

0800e940 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e948:	2300      	movs	r3, #0
 800e94a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e94c:	2300      	movs	r3, #0
 800e94e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800e950:	f7ff ff16 	bl	800e780 <inHandlerMode>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d016      	beq.n	800e988 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e95a:	f107 0308 	add.w	r3, r7, #8
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 fe1f 	bl	800f5a4 <xQueueGiveFromISR>
 800e966:	4603      	mov	r3, r0
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d001      	beq.n	800e970 <osMutexRelease+0x30>
      return osErrorOS;
 800e96c:	23ff      	movs	r3, #255	; 0xff
 800e96e:	e017      	b.n	800e9a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d013      	beq.n	800e99e <osMutexRelease+0x5e>
 800e976:	4b0c      	ldr	r3, [pc, #48]	; (800e9a8 <osMutexRelease+0x68>)
 800e978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	e00a      	b.n	800e99e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e988:	2300      	movs	r3, #0
 800e98a:	2200      	movs	r2, #0
 800e98c:	2100      	movs	r1, #0
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fc7a 	bl	800f288 <xQueueGenericSend>
 800e994:	4603      	mov	r3, r0
 800e996:	2b01      	cmp	r3, #1
 800e998:	d001      	beq.n	800e99e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800e99a:	23ff      	movs	r3, #255	; 0xff
 800e99c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800e99e:	68fb      	ldr	r3, [r7, #12]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	e000ed04 	.word	0xe000ed04

0800e9ac <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b086      	sub	sp, #24
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	3303      	adds	r3, #3
 800e9ba:	f023 0303 	bic.w	r3, r3, #3
 800e9be:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800e9c0:	2014      	movs	r0, #20
 800e9c2:	f002 fc3d 	bl	8011240 <pvPortMalloc>
 800e9c6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d046      	beq.n	800ea5c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f002 fc2a 	bl	8011240 <pvPortMalloc>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d02b      	beq.n	800ea52 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	fb02 f303 	mul.w	r3, r2, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f002 fc1b 	bl	8011240 <pvPortMalloc>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d011      	beq.n	800ea3c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ea18:	2300      	movs	r3, #0
 800ea1a:	613b      	str	r3, [r7, #16]
 800ea1c:	e008      	b.n	800ea30 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	4413      	add	r3, r2
 800ea26:	2200      	movs	r2, #0
 800ea28:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	613b      	str	r3, [r7, #16]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	693a      	ldr	r2, [r7, #16]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d3f1      	bcc.n	800ea1e <osPoolCreate+0x72>
 800ea3a:	e00f      	b.n	800ea5c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f002 fcbf 	bl	80113c4 <vPortFree>
        vPortFree(thePool);
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f002 fcbc 	bl	80113c4 <vPortFree>
        thePool = NULL;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	e004      	b.n	800ea5c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800ea52:	6978      	ldr	r0, [r7, #20]
 800ea54:	f002 fcb6 	bl	80113c4 <vPortFree>
      thePool = NULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800ea5c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b08a      	sub	sp, #40	; 0x28
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800ea72:	2300      	movs	r3, #0
 800ea74:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800ea76:	f7ff fe83 	bl	800e780 <inHandlerMode>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00e      	beq.n	800ea9e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea80:	f3ef 8211 	mrs	r2, BASEPRI
 800ea84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	617a      	str	r2, [r7, #20]
 800ea96:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea98:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea9c:	e001      	b.n	800eaa2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800ea9e:	f002 fab5 	bl	801100c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	61fb      	str	r3, [r7, #28]
 800eaa6:	e029      	b.n	800eafc <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	69fa      	ldr	r2, [r7, #28]
 800eaae:	4413      	add	r3, r2
 800eab0:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d301      	bcc.n	800eac0 <osPoolAlloc+0x5a>
      index = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	4413      	add	r3, r2
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d113      	bne.n	800eaf6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	4413      	add	r3, r2
 800ead6:	2201      	movs	r2, #1
 800ead8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4619      	mov	r1, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	fb02 f303 	mul.w	r3, r2, r3
 800eaea:	440b      	add	r3, r1
 800eaec:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	69ba      	ldr	r2, [r7, #24]
 800eaf2:	611a      	str	r2, [r3, #16]
      break;
 800eaf4:	e007      	b.n	800eb06 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	69fa      	ldr	r2, [r7, #28]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d3d0      	bcc.n	800eaa8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800eb06:	f7ff fe3b 	bl	800e780 <inHandlerMode>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	e001      	b.n	800eb20 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800eb1c:	f002 faa4 	bl	8011068 <vPortExitCritical>
  }
  
  return p;
 800eb20:	6a3b      	ldr	r3, [r7, #32]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3728      	adds	r7, #40	; 0x28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800eb2a:	b480      	push	{r7}
 800eb2c:	b085      	sub	sp, #20
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <osPoolFree+0x14>
    return osErrorParameter;
 800eb3a:	2380      	movs	r3, #128	; 0x80
 800eb3c:	e030      	b.n	800eba0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <osPoolFree+0x1e>
    return osErrorParameter;
 800eb44:	2380      	movs	r3, #128	; 0x80
 800eb46:	e02b      	b.n	800eba0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d201      	bcs.n	800eb56 <osPoolFree+0x2c>
    return osErrorParameter;
 800eb52:	2380      	movs	r3, #128	; 0x80
 800eb54:	e024      	b.n	800eba0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	6812      	ldr	r2, [r2, #0]
 800eb5c:	1a9b      	subs	r3, r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68da      	ldr	r2, [r3, #12]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb6a:	fb02 f201 	mul.w	r2, r2, r1
 800eb6e:	1a9b      	subs	r3, r3, r2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <osPoolFree+0x4e>
    return osErrorParameter;
 800eb74:	2380      	movs	r3, #128	; 0x80
 800eb76:	e013      	b.n	800eba0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb82:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d301      	bcc.n	800eb92 <osPoolFree+0x68>
    return osErrorParameter;
 800eb8e:	2380      	movs	r3, #128	; 0x80
 800eb90:	e006      	b.n	800eba0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	4413      	add	r3, r2
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800ebac:	b590      	push	{r4, r7, lr}
 800ebae:	b087      	sub	sp, #28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	613b      	str	r3, [r7, #16]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	689c      	ldr	r4, [r3, #8]
 800ebca:	200c      	movs	r0, #12
 800ebcc:	f002 fb38 	bl	8011240 <pvPortMalloc>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <osMailCreate+0x36>
    return NULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e038      	b.n	800ec54 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6818      	ldr	r0, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	681c      	ldr	r4, [r3, #0]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	2104      	movs	r1, #4
 800ebfa:	f000 fa9b 	bl	800f134 <xQueueGenericCreate>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d107      	bne.n	800ec1e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f002 fbd5 	bl	80113c4 <vPortFree>
    return NULL;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e01a      	b.n	800ec54 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	681c      	ldr	r4, [r3, #0]
 800ec24:	f107 030c 	add.w	r3, r7, #12
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff febf 	bl	800e9ac <osPoolCreate>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d107      	bne.n	800ec4e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f002 fbbd 	bl	80113c4 <vPortFree>
    return NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e002      	b.n	800ec54 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd90      	pop	{r4, r7, pc}

0800ec5c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <osMailAlloc+0x14>
    return NULL;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	e006      	b.n	800ec7e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff fef6 	bl	800ea66 <osPoolAlloc>
 800ec7a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
	...

0800ec88 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <osMailPut+0x14>
    return osErrorParameter;
 800ec98:	2380      	movs	r3, #128	; 0x80
 800ec9a:	e02c      	b.n	800ecf6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800eca0:	f7ff fd6e 	bl	800e780 <inHandlerMode>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d018      	beq.n	800ecdc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6858      	ldr	r0, [r3, #4]
 800ecae:	f107 020c 	add.w	r2, r7, #12
 800ecb2:	4639      	mov	r1, r7
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f000 fbe1 	bl	800f47c <xQueueGenericSendFromISR>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d001      	beq.n	800ecc4 <osMailPut+0x3c>
      return osErrorOS;
 800ecc0:	23ff      	movs	r3, #255	; 0xff
 800ecc2:	e018      	b.n	800ecf6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d014      	beq.n	800ecf4 <osMailPut+0x6c>
 800ecca:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <osMailPut+0x78>)
 800eccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	e00b      	b.n	800ecf4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6858      	ldr	r0, [r3, #4]
 800ece0:	4639      	mov	r1, r7
 800ece2:	2300      	movs	r3, #0
 800ece4:	2200      	movs	r2, #0
 800ece6:	f000 facf 	bl	800f288 <xQueueGenericSend>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d001      	beq.n	800ecf4 <osMailPut+0x6c>
      return osErrorOS;
 800ecf0:	23ff      	movs	r3, #255	; 0xff
 800ecf2:	e000      	b.n	800ecf6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	e000ed04 	.word	0xe000ed04

0800ed04 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800ed04:	b590      	push	{r4, r7, lr}
 800ed06:	b08b      	sub	sp, #44	; 0x2c
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10a      	bne.n	800ed30 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800ed1a:	2380      	movs	r3, #128	; 0x80
 800ed1c:	617b      	str	r3, [r7, #20]
    return event;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	461c      	mov	r4, r3
 800ed22:	f107 0314 	add.w	r3, r7, #20
 800ed26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed2e:	e056      	b.n	800edde <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ed30:	2300      	movs	r3, #0
 800ed32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ed34:	2300      	movs	r3, #0
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3e:	d103      	bne.n	800ed48 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800ed40:	f04f 33ff 	mov.w	r3, #4294967295
 800ed44:	627b      	str	r3, [r7, #36]	; 0x24
 800ed46:	e009      	b.n	800ed5c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d006      	beq.n	800ed5c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d101      	bne.n	800ed5c <osMailGet+0x58>
      ticks = 1;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ed5c:	f7ff fd10 	bl	800e780 <inHandlerMode>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d01d      	beq.n	800eda2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6858      	ldr	r0, [r3, #4]
 800ed6a:	f107 0220 	add.w	r2, r7, #32
 800ed6e:	f107 0314 	add.w	r3, r7, #20
 800ed72:	3304      	adds	r3, #4
 800ed74:	4619      	mov	r1, r3
 800ed76:	f000 fe83 	bl	800fa80 <xQueueReceiveFromISR>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d102      	bne.n	800ed86 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800ed80:	2320      	movs	r3, #32
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e001      	b.n	800ed8a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01e      	beq.n	800edce <osMailGet+0xca>
 800ed90:	4b15      	ldr	r3, [pc, #84]	; (800ede8 <osMailGet+0xe4>)
 800ed92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	e015      	b.n	800edce <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6858      	ldr	r0, [r3, #4]
 800eda6:	f107 0314 	add.w	r3, r7, #20
 800edaa:	3304      	adds	r3, #4
 800edac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edae:	4619      	mov	r1, r3
 800edb0:	f000 fc82 	bl	800f6b8 <xQueueReceive>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d102      	bne.n	800edc0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800edba:	2320      	movs	r3, #32
 800edbc:	617b      	str	r3, [r7, #20]
 800edbe:	e006      	b.n	800edce <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d101      	bne.n	800edca <osMailGet+0xc6>
 800edc6:	2300      	movs	r3, #0
 800edc8:	e000      	b.n	800edcc <osMailGet+0xc8>
 800edca:	2340      	movs	r3, #64	; 0x40
 800edcc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	461c      	mov	r4, r3
 800edd2:	f107 0314 	add.w	r3, r7, #20
 800edd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	372c      	adds	r7, #44	; 0x2c
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd90      	pop	{r4, r7, pc}
 800ede6:	bf00      	nop
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d101      	bne.n	800ee00 <osMailFree+0x14>
    return osErrorParameter;
 800edfc:	2380      	movs	r3, #128	; 0x80
 800edfe:	e006      	b.n	800ee0e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fe8f 	bl	800eb2a <osPoolFree>
 800ee0c:	4603      	mov	r3, r0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee16:	b480      	push	{r7}
 800ee18:	b083      	sub	sp, #12
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f103 0208 	add.w	r2, r3, #8
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f103 0208 	add.w	r2, r3, #8
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f103 0208 	add.w	r2, r3, #8
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee70:	b480      	push	{r7}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	601a      	str	r2, [r3, #0]
}
 800eeac:	bf00      	nop
 800eeae:	3714      	adds	r7, #20
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eece:	d103      	bne.n	800eed8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	60fb      	str	r3, [r7, #12]
 800eed6:	e00c      	b.n	800eef2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3308      	adds	r3, #8
 800eedc:	60fb      	str	r3, [r7, #12]
 800eede:	e002      	b.n	800eee6 <vListInsert+0x2e>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d2f6      	bcs.n	800eee0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	601a      	str	r2, [r3, #0]
}
 800ef1e:	bf00      	nop
 800ef20:	3714      	adds	r7, #20
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	6892      	ldr	r2, [r2, #8]
 800ef40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	6852      	ldr	r2, [r2, #4]
 800ef4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d103      	bne.n	800ef5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	689a      	ldr	r2, [r3, #8]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	1e5a      	subs	r2, r3, #1
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3714      	adds	r7, #20
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
	...

0800ef80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <xQueueGenericReset+0x28>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	60bb      	str	r3, [r7, #8]
 800efa6:	e7fe      	b.n	800efa6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800efa8:	f002 f830 	bl	801100c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb4:	68f9      	ldr	r1, [r7, #12]
 800efb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800efb8:	fb01 f303 	mul.w	r3, r1, r3
 800efbc:	441a      	add	r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efd8:	3b01      	subs	r3, #1
 800efda:	68f9      	ldr	r1, [r7, #12]
 800efdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800efde:	fb01 f303 	mul.w	r3, r1, r3
 800efe2:	441a      	add	r2, r3
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	22ff      	movs	r2, #255	; 0xff
 800efec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	22ff      	movs	r2, #255	; 0xff
 800eff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d114      	bne.n	800f028 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d01a      	beq.n	800f03c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3310      	adds	r3, #16
 800f00a:	4618      	mov	r0, r3
 800f00c:	f001 fada 	bl	80105c4 <xTaskRemoveFromEventList>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d012      	beq.n	800f03c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f016:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <xQueueGenericReset+0xcc>)
 800f018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	e009      	b.n	800f03c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3310      	adds	r3, #16
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fef2 	bl	800ee16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3324      	adds	r3, #36	; 0x24
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff feed 	bl	800ee16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f03c:	f002 f814 	bl	8011068 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f040:	2301      	movs	r3, #1
}
 800f042:	4618      	mov	r0, r3
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	e000ed04 	.word	0xe000ed04

0800f050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08e      	sub	sp, #56	; 0x38
 800f054:	af02      	add	r7, sp, #8
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d109      	bne.n	800f078 <xQueueGenericCreateStatic+0x28>
 800f064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f068:	f383 8811 	msr	BASEPRI, r3
 800f06c:	f3bf 8f6f 	isb	sy
 800f070:	f3bf 8f4f 	dsb	sy
 800f074:	62bb      	str	r3, [r7, #40]	; 0x28
 800f076:	e7fe      	b.n	800f076 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d109      	bne.n	800f092 <xQueueGenericCreateStatic+0x42>
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
 800f090:	e7fe      	b.n	800f090 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <xQueueGenericCreateStatic+0x4e>
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <xQueueGenericCreateStatic+0x52>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <xQueueGenericCreateStatic+0x54>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d109      	bne.n	800f0bc <xQueueGenericCreateStatic+0x6c>
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	623b      	str	r3, [r7, #32]
 800f0ba:	e7fe      	b.n	800f0ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d102      	bne.n	800f0c8 <xQueueGenericCreateStatic+0x78>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <xQueueGenericCreateStatic+0x7c>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e000      	b.n	800f0ce <xQueueGenericCreateStatic+0x7e>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d109      	bne.n	800f0e6 <xQueueGenericCreateStatic+0x96>
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	61fb      	str	r3, [r7, #28]
 800f0e4:	e7fe      	b.n	800f0e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f0e6:	2348      	movs	r3, #72	; 0x48
 800f0e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2b48      	cmp	r3, #72	; 0x48
 800f0ee:	d009      	beq.n	800f104 <xQueueGenericCreateStatic+0xb4>
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	e7fe      	b.n	800f102 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00d      	beq.n	800f12a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	2201      	movs	r2, #1
 800f112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	4613      	mov	r3, r2
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	68b9      	ldr	r1, [r7, #8]
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f000 f842 	bl	800f1ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3730      	adds	r7, #48	; 0x30
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08a      	sub	sp, #40	; 0x28
 800f138:	af02      	add	r7, sp, #8
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	4613      	mov	r3, r2
 800f140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d109      	bne.n	800f15c <xQueueGenericCreate+0x28>
 800f148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14c:	f383 8811 	msr	BASEPRI, r3
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	613b      	str	r3, [r7, #16]
 800f15a:	e7fe      	b.n	800f15a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d102      	bne.n	800f168 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f162:	2300      	movs	r3, #0
 800f164:	61fb      	str	r3, [r7, #28]
 800f166:	e004      	b.n	800f172 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	fb02 f303 	mul.w	r3, r2, r3
 800f170:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	3348      	adds	r3, #72	; 0x48
 800f176:	4618      	mov	r0, r3
 800f178:	f002 f862 	bl	8011240 <pvPortMalloc>
 800f17c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00f      	beq.n	800f1a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	3348      	adds	r3, #72	; 0x48
 800f188:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f18a:	69bb      	ldr	r3, [r7, #24]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f192:	79fa      	ldrb	r2, [r7, #7]
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	4613      	mov	r3, r2
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	68b9      	ldr	r1, [r7, #8]
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f000 f805 	bl	800f1ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f1a4:	69bb      	ldr	r3, [r7, #24]
	}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	60f8      	str	r0, [r7, #12]
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	607a      	str	r2, [r7, #4]
 800f1ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d103      	bne.n	800f1ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	69ba      	ldr	r2, [r7, #24]
 800f1c6:	601a      	str	r2, [r3, #0]
 800f1c8:	e002      	b.n	800f1d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f1dc:	2101      	movs	r1, #1
 800f1de:	69b8      	ldr	r0, [r7, #24]
 800f1e0:	f7ff fece 	bl	800ef80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f1e4:	bf00      	nop
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00e      	beq.n	800f218 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f20c:	2300      	movs	r3, #0
 800f20e:	2200      	movs	r2, #0
 800f210:	2100      	movs	r1, #0
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f838 	bl	800f288 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f218:	bf00      	nop
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	4603      	mov	r3, r0
 800f228:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f22a:	2301      	movs	r3, #1
 800f22c:	617b      	str	r3, [r7, #20]
 800f22e:	2300      	movs	r3, #0
 800f230:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	461a      	mov	r2, r3
 800f236:	6939      	ldr	r1, [r7, #16]
 800f238:	6978      	ldr	r0, [r7, #20]
 800f23a:	f7ff ff7b 	bl	800f134 <xQueueGenericCreate>
 800f23e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff ffd3 	bl	800f1ec <prvInitialiseMutex>

		return pxNewQueue;
 800f246:	68fb      	ldr	r3, [r7, #12]
	}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af02      	add	r7, sp, #8
 800f256:	4603      	mov	r3, r0
 800f258:	6039      	str	r1, [r7, #0]
 800f25a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f25c:	2301      	movs	r3, #1
 800f25e:	617b      	str	r3, [r7, #20]
 800f260:	2300      	movs	r3, #0
 800f262:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2200      	movs	r2, #0
 800f26c:	6939      	ldr	r1, [r7, #16]
 800f26e:	6978      	ldr	r0, [r7, #20]
 800f270:	f7ff feee 	bl	800f050 <xQueueGenericCreateStatic>
 800f274:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f276:	68f8      	ldr	r0, [r7, #12]
 800f278:	f7ff ffb8 	bl	800f1ec <prvInitialiseMutex>

		return pxNewQueue;
 800f27c:	68fb      	ldr	r3, [r7, #12]
	}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
	...

0800f288 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b08e      	sub	sp, #56	; 0x38
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f296:	2300      	movs	r3, #0
 800f298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d109      	bne.n	800f2b8 <xQueueGenericSend+0x30>
 800f2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a8:	f383 8811 	msr	BASEPRI, r3
 800f2ac:	f3bf 8f6f 	isb	sy
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2b6:	e7fe      	b.n	800f2b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d103      	bne.n	800f2c6 <xQueueGenericSend+0x3e>
 800f2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d101      	bne.n	800f2ca <xQueueGenericSend+0x42>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e000      	b.n	800f2cc <xQueueGenericSend+0x44>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d109      	bne.n	800f2e4 <xQueueGenericSend+0x5c>
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800f2e2:	e7fe      	b.n	800f2e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d103      	bne.n	800f2f2 <xQueueGenericSend+0x6a>
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d101      	bne.n	800f2f6 <xQueueGenericSend+0x6e>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <xQueueGenericSend+0x70>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d109      	bne.n	800f310 <xQueueGenericSend+0x88>
 800f2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	623b      	str	r3, [r7, #32]
 800f30e:	e7fe      	b.n	800f30e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f310:	f001 fb14 	bl	801093c <xTaskGetSchedulerState>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <xQueueGenericSend+0x98>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d101      	bne.n	800f324 <xQueueGenericSend+0x9c>
 800f320:	2301      	movs	r3, #1
 800f322:	e000      	b.n	800f326 <xQueueGenericSend+0x9e>
 800f324:	2300      	movs	r3, #0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d109      	bne.n	800f33e <xQueueGenericSend+0xb6>
 800f32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	61fb      	str	r3, [r7, #28]
 800f33c:	e7fe      	b.n	800f33c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f33e:	f001 fe65 	bl	801100c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d302      	bcc.n	800f354 <xQueueGenericSend+0xcc>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b02      	cmp	r3, #2
 800f352:	d129      	bne.n	800f3a8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f35a:	f000 fc26 	bl	800fbaa <prvCopyDataToQueue>
 800f35e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f364:	2b00      	cmp	r3, #0
 800f366:	d010      	beq.n	800f38a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	3324      	adds	r3, #36	; 0x24
 800f36c:	4618      	mov	r0, r3
 800f36e:	f001 f929 	bl	80105c4 <xTaskRemoveFromEventList>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d013      	beq.n	800f3a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f378:	4b3f      	ldr	r3, [pc, #252]	; (800f478 <xQueueGenericSend+0x1f0>)
 800f37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	e00a      	b.n	800f3a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d007      	beq.n	800f3a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f390:	4b39      	ldr	r3, [pc, #228]	; (800f478 <xQueueGenericSend+0x1f0>)
 800f392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f396:	601a      	str	r2, [r3, #0]
 800f398:	f3bf 8f4f 	dsb	sy
 800f39c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f3a0:	f001 fe62 	bl	8011068 <vPortExitCritical>
				return pdPASS;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e063      	b.n	800f470 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d103      	bne.n	800f3b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3ae:	f001 fe5b 	bl	8011068 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e05c      	b.n	800f470 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d106      	bne.n	800f3ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3bc:	f107 0314 	add.w	r3, r7, #20
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f001 f961 	bl	8010688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3ca:	f001 fe4d 	bl	8011068 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3ce:	f000 ff15 	bl	80101fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3d2:	f001 fe1b 	bl	801100c <vPortEnterCritical>
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3dc:	b25b      	sxtb	r3, r3
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	d103      	bne.n	800f3ec <xQueueGenericSend+0x164>
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3f2:	b25b      	sxtb	r3, r3
 800f3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f8:	d103      	bne.n	800f402 <xQueueGenericSend+0x17a>
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f402:	f001 fe31 	bl	8011068 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f406:	1d3a      	adds	r2, r7, #4
 800f408:	f107 0314 	add.w	r3, r7, #20
 800f40c:	4611      	mov	r1, r2
 800f40e:	4618      	mov	r0, r3
 800f410:	f001 f950 	bl	80106b4 <xTaskCheckForTimeOut>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d124      	bne.n	800f464 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f41a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f41c:	f000 fcbd 	bl	800fd9a <prvIsQueueFull>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d018      	beq.n	800f458 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	3310      	adds	r3, #16
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f001 f8a4 	bl	801057c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f436:	f000 fc48 	bl	800fcca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f43a:	f000 feed 	bl	8010218 <xTaskResumeAll>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	f47f af7c 	bne.w	800f33e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f446:	4b0c      	ldr	r3, [pc, #48]	; (800f478 <xQueueGenericSend+0x1f0>)
 800f448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	f3bf 8f6f 	isb	sy
 800f456:	e772      	b.n	800f33e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f45a:	f000 fc36 	bl	800fcca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f45e:	f000 fedb 	bl	8010218 <xTaskResumeAll>
 800f462:	e76c      	b.n	800f33e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f466:	f000 fc30 	bl	800fcca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f46a:	f000 fed5 	bl	8010218 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f46e:	2300      	movs	r3, #0
		}
	}
}
 800f470:	4618      	mov	r0, r3
 800f472:	3738      	adds	r7, #56	; 0x38
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	e000ed04 	.word	0xe000ed04

0800f47c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08e      	sub	sp, #56	; 0x38
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
 800f488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	2b00      	cmp	r3, #0
 800f492:	d109      	bne.n	800f4a8 <xQueueGenericSendFromISR+0x2c>
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4a6:	e7fe      	b.n	800f4a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d103      	bne.n	800f4b6 <xQueueGenericSendFromISR+0x3a>
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <xQueueGenericSendFromISR+0x3e>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e000      	b.n	800f4bc <xQueueGenericSendFromISR+0x40>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d109      	bne.n	800f4d4 <xQueueGenericSendFromISR+0x58>
 800f4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c4:	f383 8811 	msr	BASEPRI, r3
 800f4c8:	f3bf 8f6f 	isb	sy
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	623b      	str	r3, [r7, #32]
 800f4d2:	e7fe      	b.n	800f4d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d103      	bne.n	800f4e2 <xQueueGenericSendFromISR+0x66>
 800f4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d101      	bne.n	800f4e6 <xQueueGenericSendFromISR+0x6a>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e000      	b.n	800f4e8 <xQueueGenericSendFromISR+0x6c>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d109      	bne.n	800f500 <xQueueGenericSendFromISR+0x84>
 800f4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	61fb      	str	r3, [r7, #28]
 800f4fe:	e7fe      	b.n	800f4fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f500:	f001 fe60 	bl	80111c4 <vPortValidateInterruptPriority>
	__asm volatile
 800f504:	f3ef 8211 	mrs	r2, BASEPRI
 800f508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50c:	f383 8811 	msr	BASEPRI, r3
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	61ba      	str	r2, [r7, #24]
 800f51a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f51c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f51e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f528:	429a      	cmp	r2, r3
 800f52a:	d302      	bcc.n	800f532 <xQueueGenericSendFromISR+0xb6>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d12c      	bne.n	800f58c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	68b9      	ldr	r1, [r7, #8]
 800f540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f542:	f000 fb32 	bl	800fbaa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f546:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54e:	d112      	bne.n	800f576 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d016      	beq.n	800f586 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	3324      	adds	r3, #36	; 0x24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f001 f831 	bl	80105c4 <xTaskRemoveFromEventList>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00e      	beq.n	800f586 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00b      	beq.n	800f586 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	e007      	b.n	800f586 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f57a:	3301      	adds	r3, #1
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	b25a      	sxtb	r2, r3
 800f580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f586:	2301      	movs	r3, #1
 800f588:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f58a:	e001      	b.n	800f590 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f58c:	2300      	movs	r3, #0
 800f58e:	637b      	str	r3, [r7, #52]	; 0x34
 800f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f592:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3738      	adds	r7, #56	; 0x38
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08e      	sub	sp, #56	; 0x38
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <xQueueGiveFromISR+0x28>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	623b      	str	r3, [r7, #32]
 800f5ca:	e7fe      	b.n	800f5ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d009      	beq.n	800f5e8 <xQueueGiveFromISR+0x44>
 800f5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	61fb      	str	r3, [r7, #28]
 800f5e6:	e7fe      	b.n	800f5e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d103      	bne.n	800f5f8 <xQueueGiveFromISR+0x54>
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <xQueueGiveFromISR+0x58>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e000      	b.n	800f5fe <xQueueGiveFromISR+0x5a>
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d109      	bne.n	800f616 <xQueueGiveFromISR+0x72>
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	61bb      	str	r3, [r7, #24]
 800f614:	e7fe      	b.n	800f614 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f616:	f001 fdd5 	bl	80111c4 <vPortValidateInterruptPriority>
	__asm volatile
 800f61a:	f3ef 8211 	mrs	r2, BASEPRI
 800f61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f622:	f383 8811 	msr	BASEPRI, r3
 800f626:	f3bf 8f6f 	isb	sy
 800f62a:	f3bf 8f4f 	dsb	sy
 800f62e:	617a      	str	r2, [r7, #20]
 800f630:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f632:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f63a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f642:	429a      	cmp	r2, r3
 800f644:	d22b      	bcs.n	800f69e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f660:	d112      	bne.n	800f688 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f666:	2b00      	cmp	r3, #0
 800f668:	d016      	beq.n	800f698 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	3324      	adds	r3, #36	; 0x24
 800f66e:	4618      	mov	r0, r3
 800f670:	f000 ffa8 	bl	80105c4 <xTaskRemoveFromEventList>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00e      	beq.n	800f698 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00b      	beq.n	800f698 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2201      	movs	r2, #1
 800f684:	601a      	str	r2, [r3, #0]
 800f686:	e007      	b.n	800f698 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f68c:	3301      	adds	r3, #1
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	b25a      	sxtb	r2, r3
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f698:	2301      	movs	r3, #1
 800f69a:	637b      	str	r3, [r7, #52]	; 0x34
 800f69c:	e001      	b.n	800f6a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3738      	adds	r7, #56	; 0x38
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b08c      	sub	sp, #48	; 0x30
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d109      	bne.n	800f6e6 <xQueueReceive+0x2e>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	623b      	str	r3, [r7, #32]
 800f6e4:	e7fe      	b.n	800f6e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d103      	bne.n	800f6f4 <xQueueReceive+0x3c>
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <xQueueReceive+0x40>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e000      	b.n	800f6fa <xQueueReceive+0x42>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <xQueueReceive+0x5a>
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	e7fe      	b.n	800f710 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f712:	f001 f913 	bl	801093c <xTaskGetSchedulerState>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d102      	bne.n	800f722 <xQueueReceive+0x6a>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <xQueueReceive+0x6e>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <xQueueReceive+0x70>
 800f726:	2300      	movs	r3, #0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d109      	bne.n	800f740 <xQueueReceive+0x88>
 800f72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	61bb      	str	r3, [r7, #24]
 800f73e:	e7fe      	b.n	800f73e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f740:	f001 fc64 	bl	801100c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f748:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d01f      	beq.n	800f790 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f750:	68b9      	ldr	r1, [r7, #8]
 800f752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f754:	f000 fa93 	bl	800fc7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	1e5a      	subs	r2, r3, #1
 800f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00f      	beq.n	800f788 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	3310      	adds	r3, #16
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 ff29 	bl	80105c4 <xTaskRemoveFromEventList>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d007      	beq.n	800f788 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f778:	4b3c      	ldr	r3, [pc, #240]	; (800f86c <xQueueReceive+0x1b4>)
 800f77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f77e:	601a      	str	r2, [r3, #0]
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f788:	f001 fc6e 	bl	8011068 <vPortExitCritical>
				return pdPASS;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e069      	b.n	800f864 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d103      	bne.n	800f79e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f796:	f001 fc67 	bl	8011068 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e062      	b.n	800f864 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d106      	bne.n	800f7b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7a4:	f107 0310 	add.w	r3, r7, #16
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 ff6d 	bl	8010688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7b2:	f001 fc59 	bl	8011068 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7b6:	f000 fd21 	bl	80101fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7ba:	f001 fc27 	bl	801100c <vPortEnterCritical>
 800f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d103      	bne.n	800f7d4 <xQueueReceive+0x11c>
 800f7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7da:	b25b      	sxtb	r3, r3
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d103      	bne.n	800f7ea <xQueueReceive+0x132>
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7ea:	f001 fc3d 	bl	8011068 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7ee:	1d3a      	adds	r2, r7, #4
 800f7f0:	f107 0310 	add.w	r3, r7, #16
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 ff5c 	bl	80106b4 <xTaskCheckForTimeOut>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d123      	bne.n	800f84a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f804:	f000 fab3 	bl	800fd6e <prvIsQueueEmpty>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d017      	beq.n	800f83e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f810:	3324      	adds	r3, #36	; 0x24
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	4611      	mov	r1, r2
 800f816:	4618      	mov	r0, r3
 800f818:	f000 feb0 	bl	801057c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81e:	f000 fa54 	bl	800fcca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f822:	f000 fcf9 	bl	8010218 <xTaskResumeAll>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d189      	bne.n	800f740 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f82c:	4b0f      	ldr	r3, [pc, #60]	; (800f86c <xQueueReceive+0x1b4>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	e780      	b.n	800f740 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f840:	f000 fa43 	bl	800fcca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f844:	f000 fce8 	bl	8010218 <xTaskResumeAll>
 800f848:	e77a      	b.n	800f740 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84c:	f000 fa3d 	bl	800fcca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f850:	f000 fce2 	bl	8010218 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f856:	f000 fa8a 	bl	800fd6e <prvIsQueueEmpty>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f43f af6f 	beq.w	800f740 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f864:	4618      	mov	r0, r3
 800f866:	3730      	adds	r7, #48	; 0x30
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	e000ed04 	.word	0xe000ed04

0800f870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b08e      	sub	sp, #56	; 0x38
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f87a:	2300      	movs	r3, #0
 800f87c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f882:	2300      	movs	r3, #0
 800f884:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d109      	bne.n	800f8a0 <xQueueSemaphoreTake+0x30>
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	623b      	str	r3, [r7, #32]
 800f89e:	e7fe      	b.n	800f89e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d009      	beq.n	800f8bc <xQueueSemaphoreTake+0x4c>
 800f8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ac:	f383 8811 	msr	BASEPRI, r3
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	f3bf 8f4f 	dsb	sy
 800f8b8:	61fb      	str	r3, [r7, #28]
 800f8ba:	e7fe      	b.n	800f8ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8bc:	f001 f83e 	bl	801093c <xTaskGetSchedulerState>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <xQueueSemaphoreTake+0x5c>
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d101      	bne.n	800f8d0 <xQueueSemaphoreTake+0x60>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e000      	b.n	800f8d2 <xQueueSemaphoreTake+0x62>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d109      	bne.n	800f8ea <xQueueSemaphoreTake+0x7a>
 800f8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	61bb      	str	r3, [r7, #24]
 800f8e8:	e7fe      	b.n	800f8e8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8ea:	f001 fb8f 	bl	801100c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d024      	beq.n	800f944 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	1e5a      	subs	r2, r3, #1
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d104      	bne.n	800f914 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f90a:	f001 f9dd 	bl	8010cc8 <pvTaskIncrementMutexHeldCount>
 800f90e:	4602      	mov	r2, r0
 800f910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f912:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	691b      	ldr	r3, [r3, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00f      	beq.n	800f93c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	3310      	adds	r3, #16
 800f920:	4618      	mov	r0, r3
 800f922:	f000 fe4f 	bl	80105c4 <xTaskRemoveFromEventList>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d007      	beq.n	800f93c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f92c:	4b53      	ldr	r3, [pc, #332]	; (800fa7c <xQueueSemaphoreTake+0x20c>)
 800f92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f93c:	f001 fb94 	bl	8011068 <vPortExitCritical>
				return pdPASS;
 800f940:	2301      	movs	r3, #1
 800f942:	e096      	b.n	800fa72 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d110      	bne.n	800f96c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d009      	beq.n	800f964 <xQueueSemaphoreTake+0xf4>
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	617b      	str	r3, [r7, #20]
 800f962:	e7fe      	b.n	800f962 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f964:	f001 fb80 	bl	8011068 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f968:	2300      	movs	r3, #0
 800f96a:	e082      	b.n	800fa72 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f972:	f107 030c 	add.w	r3, r7, #12
 800f976:	4618      	mov	r0, r3
 800f978:	f000 fe86 	bl	8010688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f97c:	2301      	movs	r3, #1
 800f97e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f980:	f001 fb72 	bl	8011068 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f984:	f000 fc3a 	bl	80101fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f988:	f001 fb40 	bl	801100c <vPortEnterCritical>
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f992:	b25b      	sxtb	r3, r3
 800f994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f998:	d103      	bne.n	800f9a2 <xQueueSemaphoreTake+0x132>
 800f99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9a8:	b25b      	sxtb	r3, r3
 800f9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ae:	d103      	bne.n	800f9b8 <xQueueSemaphoreTake+0x148>
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9b8:	f001 fb56 	bl	8011068 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9bc:	463a      	mov	r2, r7
 800f9be:	f107 030c 	add.w	r3, r7, #12
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 fe75 	bl	80106b4 <xTaskCheckForTimeOut>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d132      	bne.n	800fa36 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d2:	f000 f9cc 	bl	800fd6e <prvIsQueueEmpty>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d026      	beq.n	800fa2a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d109      	bne.n	800f9f8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f9e4:	f001 fb12 	bl	801100c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 ffc3 	bl	8010978 <xTaskPriorityInherit>
 800f9f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f9f4:	f001 fb38 	bl	8011068 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	3324      	adds	r3, #36	; 0x24
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	4611      	mov	r1, r2
 800fa00:	4618      	mov	r0, r3
 800fa02:	f000 fdbb 	bl	801057c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa08:	f000 f95f 	bl	800fcca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa0c:	f000 fc04 	bl	8010218 <xTaskResumeAll>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f47f af69 	bne.w	800f8ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800fa18:	4b18      	ldr	r3, [pc, #96]	; (800fa7c <xQueueSemaphoreTake+0x20c>)
 800fa1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	f3bf 8f4f 	dsb	sy
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	e75f      	b.n	800f8ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fa2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa2c:	f000 f94d 	bl	800fcca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa30:	f000 fbf2 	bl	8010218 <xTaskResumeAll>
 800fa34:	e759      	b.n	800f8ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fa36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa38:	f000 f947 	bl	800fcca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa3c:	f000 fbec 	bl	8010218 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa42:	f000 f994 	bl	800fd6e <prvIsQueueEmpty>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f43f af4e 	beq.w	800f8ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00d      	beq.n	800fa70 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800fa54:	f001 fada 	bl	801100c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fa58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa5a:	f000 f88e 	bl	800fb7a <prvGetDisinheritPriorityAfterTimeout>
 800fa5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa66:	4618      	mov	r0, r3
 800fa68:	f001 f890 	bl	8010b8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa6c:	f001 fafc 	bl	8011068 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3738      	adds	r7, #56	; 0x38
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	e000ed04 	.word	0xe000ed04

0800fa80 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b08e      	sub	sp, #56	; 0x38
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d109      	bne.n	800faaa <xQueueReceiveFromISR+0x2a>
 800fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9a:	f383 8811 	msr	BASEPRI, r3
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	f3bf 8f4f 	dsb	sy
 800faa6:	623b      	str	r3, [r7, #32]
 800faa8:	e7fe      	b.n	800faa8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d103      	bne.n	800fab8 <xQueueReceiveFromISR+0x38>
 800fab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <xQueueReceiveFromISR+0x3c>
 800fab8:	2301      	movs	r3, #1
 800faba:	e000      	b.n	800fabe <xQueueReceiveFromISR+0x3e>
 800fabc:	2300      	movs	r3, #0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <xQueueReceiveFromISR+0x56>
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	61fb      	str	r3, [r7, #28]
 800fad4:	e7fe      	b.n	800fad4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fad6:	f001 fb75 	bl	80111c4 <vPortValidateInterruptPriority>
	__asm volatile
 800fada:	f3ef 8211 	mrs	r2, BASEPRI
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	61ba      	str	r2, [r7, #24]
 800faf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800faf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800faf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d02f      	beq.n	800fb62 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb0c:	68b9      	ldr	r1, [r7, #8]
 800fb0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb10:	f000 f8b5 	bl	800fc7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb16:	1e5a      	subs	r2, r3, #1
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fb1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb24:	d112      	bne.n	800fb4c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d016      	beq.n	800fb5c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	3310      	adds	r3, #16
 800fb32:	4618      	mov	r0, r3
 800fb34:	f000 fd46 	bl	80105c4 <xTaskRemoveFromEventList>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00e      	beq.n	800fb5c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00b      	beq.n	800fb5c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	e007      	b.n	800fb5c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb50:	3301      	adds	r3, #1
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	b25a      	sxtb	r2, r3
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	637b      	str	r3, [r7, #52]	; 0x34
 800fb60:	e001      	b.n	800fb66 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800fb62:	2300      	movs	r3, #0
 800fb64:	637b      	str	r3, [r7, #52]	; 0x34
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3738      	adds	r7, #56	; 0x38
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb7a:	b480      	push	{r7}
 800fb7c:	b085      	sub	sp, #20
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d006      	beq.n	800fb98 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f1c3 0307 	rsb	r3, r3, #7
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	e001      	b.n	800fb9c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
	}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3714      	adds	r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b086      	sub	sp, #24
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10d      	bne.n	800fbe4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d14d      	bne.n	800fc6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f000 ff55 	bl	8010a84 <xTaskPriorityDisinherit>
 800fbda:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	605a      	str	r2, [r3, #4]
 800fbe2:	e043      	b.n	800fc6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d119      	bne.n	800fc1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6898      	ldr	r0, [r3, #8]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	68b9      	ldr	r1, [r7, #8]
 800fbf6:	f002 fa73 	bl	80120e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	689a      	ldr	r2, [r3, #8]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc02:	441a      	add	r2, r3
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	689a      	ldr	r2, [r3, #8]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d32b      	bcc.n	800fc6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	609a      	str	r2, [r3, #8]
 800fc1c:	e026      	b.n	800fc6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	68d8      	ldr	r0, [r3, #12]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc26:	461a      	mov	r2, r3
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	f002 fa59 	bl	80120e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	68da      	ldr	r2, [r3, #12]
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc36:	425b      	negs	r3, r3
 800fc38:	441a      	add	r2, r3
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	68da      	ldr	r2, [r3, #12]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d207      	bcs.n	800fc5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	685a      	ldr	r2, [r3, #4]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc52:	425b      	negs	r3, r3
 800fc54:	441a      	add	r2, r3
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d105      	bne.n	800fc6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc74:	697b      	ldr	r3, [r7, #20]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3718      	adds	r7, #24
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d018      	beq.n	800fcc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	68da      	ldr	r2, [r3, #12]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc98:	441a      	add	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	68da      	ldr	r2, [r3, #12]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d303      	bcc.n	800fcb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68d9      	ldr	r1, [r3, #12]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcba:	461a      	mov	r2, r3
 800fcbc:	6838      	ldr	r0, [r7, #0]
 800fcbe:	f002 fa0f 	bl	80120e0 <memcpy>
	}
}
 800fcc2:	bf00      	nop
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b084      	sub	sp, #16
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcd2:	f001 f99b 	bl	801100c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcdc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcde:	e011      	b.n	800fd04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d012      	beq.n	800fd0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3324      	adds	r3, #36	; 0x24
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 fc69 	bl	80105c4 <xTaskRemoveFromEventList>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fcf8:	f000 fd3c 	bl	8010774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dce9      	bgt.n	800fce0 <prvUnlockQueue+0x16>
 800fd0c:	e000      	b.n	800fd10 <prvUnlockQueue+0x46>
					break;
 800fd0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	22ff      	movs	r2, #255	; 0xff
 800fd14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd18:	f001 f9a6 	bl	8011068 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd1c:	f001 f976 	bl	801100c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd28:	e011      	b.n	800fd4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d012      	beq.n	800fd58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3310      	adds	r3, #16
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fc44 	bl	80105c4 <xTaskRemoveFromEventList>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd42:	f000 fd17 	bl	8010774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd46:	7bbb      	ldrb	r3, [r7, #14]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dce9      	bgt.n	800fd2a <prvUnlockQueue+0x60>
 800fd56:	e000      	b.n	800fd5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	22ff      	movs	r2, #255	; 0xff
 800fd5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd62:	f001 f981 	bl	8011068 <vPortExitCritical>
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b084      	sub	sp, #16
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd76:	f001 f949 	bl	801100c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fd82:	2301      	movs	r3, #1
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	e001      	b.n	800fd8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fd8c:	f001 f96c 	bl	8011068 <vPortExitCritical>

	return xReturn;
 800fd90:	68fb      	ldr	r3, [r7, #12]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fda2:	f001 f933 	bl	801100c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d102      	bne.n	800fdb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	e001      	b.n	800fdbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdbc:	f001 f954 	bl	8011068 <vPortExitCritical>

	return xReturn;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b08e      	sub	sp, #56	; 0x38
 800fdce:	af04      	add	r7, sp, #16
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
 800fdd6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d109      	bne.n	800fdf2 <xTaskCreateStatic+0x28>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	623b      	str	r3, [r7, #32]
 800fdf0:	e7fe      	b.n	800fdf0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d109      	bne.n	800fe0c <xTaskCreateStatic+0x42>
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	61fb      	str	r3, [r7, #28]
 800fe0a:	e7fe      	b.n	800fe0a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fe0c:	2354      	movs	r3, #84	; 0x54
 800fe0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	2b54      	cmp	r3, #84	; 0x54
 800fe14:	d009      	beq.n	800fe2a <xTaskCreateStatic+0x60>
 800fe16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1a:	f383 8811 	msr	BASEPRI, r3
 800fe1e:	f3bf 8f6f 	isb	sy
 800fe22:	f3bf 8f4f 	dsb	sy
 800fe26:	61bb      	str	r3, [r7, #24]
 800fe28:	e7fe      	b.n	800fe28 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01e      	beq.n	800fe6e <xTaskCreateStatic+0xa4>
 800fe30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d01b      	beq.n	800fe6e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	2202      	movs	r2, #2
 800fe44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fe48:	2300      	movs	r3, #0
 800fe4a:	9303      	str	r3, [sp, #12]
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	9302      	str	r3, [sp, #8]
 800fe50:	f107 0314 	add.w	r3, r7, #20
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	68b9      	ldr	r1, [r7, #8]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 f850 	bl	800ff06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe68:	f000 f8cc 	bl	8010004 <prvAddNewTaskToReadyList>
 800fe6c:	e001      	b.n	800fe72 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fe72:	697b      	ldr	r3, [r7, #20]
	}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3728      	adds	r7, #40	; 0x28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08c      	sub	sp, #48	; 0x30
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	603b      	str	r3, [r7, #0]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe8c:	88fb      	ldrh	r3, [r7, #6]
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4618      	mov	r0, r3
 800fe92:	f001 f9d5 	bl	8011240 <pvPortMalloc>
 800fe96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00e      	beq.n	800febc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800fe9e:	2054      	movs	r0, #84	; 0x54
 800fea0:	f001 f9ce 	bl	8011240 <pvPortMalloc>
 800fea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d003      	beq.n	800feb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	631a      	str	r2, [r3, #48]	; 0x30
 800feb2:	e005      	b.n	800fec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800feb4:	6978      	ldr	r0, [r7, #20]
 800feb6:	f001 fa85 	bl	80113c4 <vPortFree>
 800feba:	e001      	b.n	800fec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800febc:	2300      	movs	r3, #0
 800febe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d017      	beq.n	800fef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fece:	88fa      	ldrh	r2, [r7, #6]
 800fed0:	2300      	movs	r3, #0
 800fed2:	9303      	str	r3, [sp, #12]
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	9302      	str	r3, [sp, #8]
 800fed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	68b9      	ldr	r1, [r7, #8]
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f80e 	bl	800ff06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800feea:	69f8      	ldr	r0, [r7, #28]
 800feec:	f000 f88a 	bl	8010004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fef0:	2301      	movs	r3, #1
 800fef2:	61bb      	str	r3, [r7, #24]
 800fef4:	e002      	b.n	800fefc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fef6:	f04f 33ff 	mov.w	r3, #4294967295
 800fefa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fefc:	69bb      	ldr	r3, [r7, #24]
	}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b088      	sub	sp, #32
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	60f8      	str	r0, [r7, #12]
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	607a      	str	r2, [r7, #4]
 800ff12:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	4413      	add	r3, r2
 800ff24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	f023 0307 	bic.w	r3, r3, #7
 800ff2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	f003 0307 	and.w	r3, r3, #7
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <prvInitialiseNewTask+0x46>
 800ff38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	617b      	str	r3, [r7, #20]
 800ff4a:	e7fe      	b.n	800ff4a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	e012      	b.n	800ff78 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	4413      	add	r3, r2
 800ff58:	7819      	ldrb	r1, [r3, #0]
 800ff5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	4413      	add	r3, r2
 800ff60:	3334      	adds	r3, #52	; 0x34
 800ff62:	460a      	mov	r2, r1
 800ff64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d006      	beq.n	800ff80 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	3301      	adds	r3, #1
 800ff76:	61fb      	str	r3, [r7, #28]
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	2b0f      	cmp	r3, #15
 800ff7c:	d9e9      	bls.n	800ff52 <prvInitialiseNewTask+0x4c>
 800ff7e:	e000      	b.n	800ff82 <prvInitialiseNewTask+0x7c>
		{
			break;
 800ff80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	2b06      	cmp	r3, #6
 800ff8e:	d901      	bls.n	800ff94 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff90:	2306      	movs	r3, #6
 800ff92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ffa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fe ff53 	bl	800ee56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	3318      	adds	r3, #24
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fe ff4e 	bl	800ee56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc2:	f1c3 0207 	rsb	r2, r3, #7
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ffca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ffd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	68f9      	ldr	r1, [r7, #12]
 800ffe2:	69b8      	ldr	r0, [r7, #24]
 800ffe4:	f000 feea 	bl	8010dbc <pxPortInitialiseStack>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d002      	beq.n	800fffa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fffa:	bf00      	nop
 800fffc:	3720      	adds	r7, #32
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
	...

08010004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801000c:	f000 fffe 	bl	801100c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010010:	4b2a      	ldr	r3, [pc, #168]	; (80100bc <prvAddNewTaskToReadyList+0xb8>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	3301      	adds	r3, #1
 8010016:	4a29      	ldr	r2, [pc, #164]	; (80100bc <prvAddNewTaskToReadyList+0xb8>)
 8010018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801001a:	4b29      	ldr	r3, [pc, #164]	; (80100c0 <prvAddNewTaskToReadyList+0xbc>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d109      	bne.n	8010036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010022:	4a27      	ldr	r2, [pc, #156]	; (80100c0 <prvAddNewTaskToReadyList+0xbc>)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010028:	4b24      	ldr	r3, [pc, #144]	; (80100bc <prvAddNewTaskToReadyList+0xb8>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d110      	bne.n	8010052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010030:	f000 fbc4 	bl	80107bc <prvInitialiseTaskLists>
 8010034:	e00d      	b.n	8010052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010036:	4b23      	ldr	r3, [pc, #140]	; (80100c4 <prvAddNewTaskToReadyList+0xc0>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d109      	bne.n	8010052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801003e:	4b20      	ldr	r3, [pc, #128]	; (80100c0 <prvAddNewTaskToReadyList+0xbc>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	429a      	cmp	r2, r3
 801004a:	d802      	bhi.n	8010052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801004c:	4a1c      	ldr	r2, [pc, #112]	; (80100c0 <prvAddNewTaskToReadyList+0xbc>)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010052:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <prvAddNewTaskToReadyList+0xc4>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	3301      	adds	r3, #1
 8010058:	4a1b      	ldr	r2, [pc, #108]	; (80100c8 <prvAddNewTaskToReadyList+0xc4>)
 801005a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010060:	2201      	movs	r2, #1
 8010062:	409a      	lsls	r2, r3
 8010064:	4b19      	ldr	r3, [pc, #100]	; (80100cc <prvAddNewTaskToReadyList+0xc8>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4313      	orrs	r3, r2
 801006a:	4a18      	ldr	r2, [pc, #96]	; (80100cc <prvAddNewTaskToReadyList+0xc8>)
 801006c:	6013      	str	r3, [r2, #0]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010072:	4613      	mov	r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4413      	add	r3, r2
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	4a15      	ldr	r2, [pc, #84]	; (80100d0 <prvAddNewTaskToReadyList+0xcc>)
 801007c:	441a      	add	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	3304      	adds	r3, #4
 8010082:	4619      	mov	r1, r3
 8010084:	4610      	mov	r0, r2
 8010086:	f7fe fef3 	bl	800ee70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801008a:	f000 ffed 	bl	8011068 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801008e:	4b0d      	ldr	r3, [pc, #52]	; (80100c4 <prvAddNewTaskToReadyList+0xc0>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00e      	beq.n	80100b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010096:	4b0a      	ldr	r3, [pc, #40]	; (80100c0 <prvAddNewTaskToReadyList+0xbc>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d207      	bcs.n	80100b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80100a4:	4b0b      	ldr	r3, [pc, #44]	; (80100d4 <prvAddNewTaskToReadyList+0xd0>)
 80100a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100b4:	bf00      	nop
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	20001588 	.word	0x20001588
 80100c0:	20001488 	.word	0x20001488
 80100c4:	20001594 	.word	0x20001594
 80100c8:	200015a4 	.word	0x200015a4
 80100cc:	20001590 	.word	0x20001590
 80100d0:	2000148c 	.word	0x2000148c
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100e0:	2300      	movs	r3, #0
 80100e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d016      	beq.n	8010118 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100ea:	4b13      	ldr	r3, [pc, #76]	; (8010138 <vTaskDelay+0x60>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d009      	beq.n	8010106 <vTaskDelay+0x2e>
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	f383 8811 	msr	BASEPRI, r3
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	60bb      	str	r3, [r7, #8]
 8010104:	e7fe      	b.n	8010104 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010106:	f000 f879 	bl	80101fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801010a:	2100      	movs	r1, #0
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fdef 	bl	8010cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010112:	f000 f881 	bl	8010218 <xTaskResumeAll>
 8010116:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d107      	bne.n	801012e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801011e:	4b07      	ldr	r3, [pc, #28]	; (801013c <vTaskDelay+0x64>)
 8010120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801012e:	bf00      	nop
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	200015b0 	.word	0x200015b0
 801013c:	e000ed04 	.word	0xe000ed04

08010140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b08a      	sub	sp, #40	; 0x28
 8010144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010146:	2300      	movs	r3, #0
 8010148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801014e:	463a      	mov	r2, r7
 8010150:	1d39      	adds	r1, r7, #4
 8010152:	f107 0308 	add.w	r3, r7, #8
 8010156:	4618      	mov	r0, r3
 8010158:	f7f1 ff0e 	bl	8001f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801015c:	6839      	ldr	r1, [r7, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	68ba      	ldr	r2, [r7, #8]
 8010162:	9202      	str	r2, [sp, #8]
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	2300      	movs	r3, #0
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	2300      	movs	r3, #0
 801016c:	460a      	mov	r2, r1
 801016e:	491d      	ldr	r1, [pc, #116]	; (80101e4 <vTaskStartScheduler+0xa4>)
 8010170:	481d      	ldr	r0, [pc, #116]	; (80101e8 <vTaskStartScheduler+0xa8>)
 8010172:	f7ff fe2a 	bl	800fdca <xTaskCreateStatic>
 8010176:	4602      	mov	r2, r0
 8010178:	4b1c      	ldr	r3, [pc, #112]	; (80101ec <vTaskStartScheduler+0xac>)
 801017a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801017c:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <vTaskStartScheduler+0xac>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d002      	beq.n	801018a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010184:	2301      	movs	r3, #1
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	e001      	b.n	801018e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801018a:	2300      	movs	r3, #0
 801018c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	2b01      	cmp	r3, #1
 8010192:	d115      	bne.n	80101c0 <vTaskStartScheduler+0x80>
 8010194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80101a6:	4b12      	ldr	r3, [pc, #72]	; (80101f0 <vTaskStartScheduler+0xb0>)
 80101a8:	f04f 32ff 	mov.w	r2, #4294967295
 80101ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80101ae:	4b11      	ldr	r3, [pc, #68]	; (80101f4 <vTaskStartScheduler+0xb4>)
 80101b0:	2201      	movs	r2, #1
 80101b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80101b4:	4b10      	ldr	r3, [pc, #64]	; (80101f8 <vTaskStartScheduler+0xb8>)
 80101b6:	2200      	movs	r2, #0
 80101b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80101ba:	f000 fe89 	bl	8010ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80101be:	e00d      	b.n	80101dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c6:	d109      	bne.n	80101dc <vTaskStartScheduler+0x9c>
 80101c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101cc:	f383 8811 	msr	BASEPRI, r3
 80101d0:	f3bf 8f6f 	isb	sy
 80101d4:	f3bf 8f4f 	dsb	sy
 80101d8:	60fb      	str	r3, [r7, #12]
 80101da:	e7fe      	b.n	80101da <vTaskStartScheduler+0x9a>
}
 80101dc:	bf00      	nop
 80101de:	3718      	adds	r7, #24
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	08018238 	.word	0x08018238
 80101e8:	0801078d 	.word	0x0801078d
 80101ec:	200015ac 	.word	0x200015ac
 80101f0:	200015a8 	.word	0x200015a8
 80101f4:	20001594 	.word	0x20001594
 80101f8:	2000158c 	.word	0x2000158c

080101fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <vTaskSuspendAll+0x18>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	3301      	adds	r3, #1
 8010206:	4a03      	ldr	r2, [pc, #12]	; (8010214 <vTaskSuspendAll+0x18>)
 8010208:	6013      	str	r3, [r2, #0]
}
 801020a:	bf00      	nop
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr
 8010214:	200015b0 	.word	0x200015b0

08010218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010222:	2300      	movs	r3, #0
 8010224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010226:	4b41      	ldr	r3, [pc, #260]	; (801032c <xTaskResumeAll+0x114>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <xTaskResumeAll+0x2a>
 801022e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	603b      	str	r3, [r7, #0]
 8010240:	e7fe      	b.n	8010240 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010242:	f000 fee3 	bl	801100c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010246:	4b39      	ldr	r3, [pc, #228]	; (801032c <xTaskResumeAll+0x114>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	3b01      	subs	r3, #1
 801024c:	4a37      	ldr	r2, [pc, #220]	; (801032c <xTaskResumeAll+0x114>)
 801024e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010250:	4b36      	ldr	r3, [pc, #216]	; (801032c <xTaskResumeAll+0x114>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d161      	bne.n	801031c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010258:	4b35      	ldr	r3, [pc, #212]	; (8010330 <xTaskResumeAll+0x118>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d05d      	beq.n	801031c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010260:	e02e      	b.n	80102c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010262:	4b34      	ldr	r3, [pc, #208]	; (8010334 <xTaskResumeAll+0x11c>)
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	3318      	adds	r3, #24
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe fe5b 	bl	800ef2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	3304      	adds	r3, #4
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe fe56 	bl	800ef2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010282:	2201      	movs	r2, #1
 8010284:	409a      	lsls	r2, r3
 8010286:	4b2c      	ldr	r3, [pc, #176]	; (8010338 <xTaskResumeAll+0x120>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4313      	orrs	r3, r2
 801028c:	4a2a      	ldr	r2, [pc, #168]	; (8010338 <xTaskResumeAll+0x120>)
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010294:	4613      	mov	r3, r2
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	4413      	add	r3, r2
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4a27      	ldr	r2, [pc, #156]	; (801033c <xTaskResumeAll+0x124>)
 801029e:	441a      	add	r2, r3
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3304      	adds	r3, #4
 80102a4:	4619      	mov	r1, r3
 80102a6:	4610      	mov	r0, r2
 80102a8:	f7fe fde2 	bl	800ee70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b0:	4b23      	ldr	r3, [pc, #140]	; (8010340 <xTaskResumeAll+0x128>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d302      	bcc.n	80102c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80102ba:	4b22      	ldr	r3, [pc, #136]	; (8010344 <xTaskResumeAll+0x12c>)
 80102bc:	2201      	movs	r2, #1
 80102be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102c0:	4b1c      	ldr	r3, [pc, #112]	; (8010334 <xTaskResumeAll+0x11c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1cc      	bne.n	8010262 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80102ce:	f000 fb0f 	bl	80108f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80102d2:	4b1d      	ldr	r3, [pc, #116]	; (8010348 <xTaskResumeAll+0x130>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d010      	beq.n	8010300 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80102de:	f000 f837 	bl	8010350 <xTaskIncrementTick>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d002      	beq.n	80102ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80102e8:	4b16      	ldr	r3, [pc, #88]	; (8010344 <xTaskResumeAll+0x12c>)
 80102ea:	2201      	movs	r2, #1
 80102ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3b01      	subs	r3, #1
 80102f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1f1      	bne.n	80102de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80102fa:	4b13      	ldr	r3, [pc, #76]	; (8010348 <xTaskResumeAll+0x130>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010300:	4b10      	ldr	r3, [pc, #64]	; (8010344 <xTaskResumeAll+0x12c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d009      	beq.n	801031c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010308:	2301      	movs	r3, #1
 801030a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801030c:	4b0f      	ldr	r3, [pc, #60]	; (801034c <xTaskResumeAll+0x134>)
 801030e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010312:	601a      	str	r2, [r3, #0]
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801031c:	f000 fea4 	bl	8011068 <vPortExitCritical>

	return xAlreadyYielded;
 8010320:	68bb      	ldr	r3, [r7, #8]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	200015b0 	.word	0x200015b0
 8010330:	20001588 	.word	0x20001588
 8010334:	20001548 	.word	0x20001548
 8010338:	20001590 	.word	0x20001590
 801033c:	2000148c 	.word	0x2000148c
 8010340:	20001488 	.word	0x20001488
 8010344:	2000159c 	.word	0x2000159c
 8010348:	20001598 	.word	0x20001598
 801034c:	e000ed04 	.word	0xe000ed04

08010350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010356:	2300      	movs	r3, #0
 8010358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801035a:	4b50      	ldr	r3, [pc, #320]	; (801049c <xTaskIncrementTick+0x14c>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	f040 808c 	bne.w	801047c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010364:	4b4e      	ldr	r3, [pc, #312]	; (80104a0 <xTaskIncrementTick+0x150>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	3301      	adds	r3, #1
 801036a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801036c:	4a4c      	ldr	r2, [pc, #304]	; (80104a0 <xTaskIncrementTick+0x150>)
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d11f      	bne.n	80103b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010378:	4b4a      	ldr	r3, [pc, #296]	; (80104a4 <xTaskIncrementTick+0x154>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d009      	beq.n	8010396 <xTaskIncrementTick+0x46>
 8010382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010386:	f383 8811 	msr	BASEPRI, r3
 801038a:	f3bf 8f6f 	isb	sy
 801038e:	f3bf 8f4f 	dsb	sy
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	e7fe      	b.n	8010394 <xTaskIncrementTick+0x44>
 8010396:	4b43      	ldr	r3, [pc, #268]	; (80104a4 <xTaskIncrementTick+0x154>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60fb      	str	r3, [r7, #12]
 801039c:	4b42      	ldr	r3, [pc, #264]	; (80104a8 <xTaskIncrementTick+0x158>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a40      	ldr	r2, [pc, #256]	; (80104a4 <xTaskIncrementTick+0x154>)
 80103a2:	6013      	str	r3, [r2, #0]
 80103a4:	4a40      	ldr	r2, [pc, #256]	; (80104a8 <xTaskIncrementTick+0x158>)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	6013      	str	r3, [r2, #0]
 80103aa:	4b40      	ldr	r3, [pc, #256]	; (80104ac <xTaskIncrementTick+0x15c>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3301      	adds	r3, #1
 80103b0:	4a3e      	ldr	r2, [pc, #248]	; (80104ac <xTaskIncrementTick+0x15c>)
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	f000 fa9c 	bl	80108f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80103b8:	4b3d      	ldr	r3, [pc, #244]	; (80104b0 <xTaskIncrementTick+0x160>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d34d      	bcc.n	801045e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103c2:	4b38      	ldr	r3, [pc, #224]	; (80104a4 <xTaskIncrementTick+0x154>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d101      	bne.n	80103d0 <xTaskIncrementTick+0x80>
 80103cc:	2301      	movs	r3, #1
 80103ce:	e000      	b.n	80103d2 <xTaskIncrementTick+0x82>
 80103d0:	2300      	movs	r3, #0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d004      	beq.n	80103e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103d6:	4b36      	ldr	r3, [pc, #216]	; (80104b0 <xTaskIncrementTick+0x160>)
 80103d8:	f04f 32ff 	mov.w	r2, #4294967295
 80103dc:	601a      	str	r2, [r3, #0]
					break;
 80103de:	e03e      	b.n	801045e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80103e0:	4b30      	ldr	r3, [pc, #192]	; (80104a4 <xTaskIncrementTick+0x154>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80103f0:	693a      	ldr	r2, [r7, #16]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d203      	bcs.n	8010400 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80103f8:	4a2d      	ldr	r2, [pc, #180]	; (80104b0 <xTaskIncrementTick+0x160>)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6013      	str	r3, [r2, #0]
						break;
 80103fe:	e02e      	b.n	801045e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	3304      	adds	r3, #4
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe fd90 	bl	800ef2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801040e:	2b00      	cmp	r3, #0
 8010410:	d004      	beq.n	801041c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	3318      	adds	r3, #24
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fd87 	bl	800ef2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010420:	2201      	movs	r2, #1
 8010422:	409a      	lsls	r2, r3
 8010424:	4b23      	ldr	r3, [pc, #140]	; (80104b4 <xTaskIncrementTick+0x164>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4313      	orrs	r3, r2
 801042a:	4a22      	ldr	r2, [pc, #136]	; (80104b4 <xTaskIncrementTick+0x164>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010432:	4613      	mov	r3, r2
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4413      	add	r3, r2
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4a1f      	ldr	r2, [pc, #124]	; (80104b8 <xTaskIncrementTick+0x168>)
 801043c:	441a      	add	r2, r3
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	3304      	adds	r3, #4
 8010442:	4619      	mov	r1, r3
 8010444:	4610      	mov	r0, r2
 8010446:	f7fe fd13 	bl	800ee70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044e:	4b1b      	ldr	r3, [pc, #108]	; (80104bc <xTaskIncrementTick+0x16c>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010454:	429a      	cmp	r2, r3
 8010456:	d3b4      	bcc.n	80103c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010458:	2301      	movs	r3, #1
 801045a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801045c:	e7b1      	b.n	80103c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801045e:	4b17      	ldr	r3, [pc, #92]	; (80104bc <xTaskIncrementTick+0x16c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010464:	4914      	ldr	r1, [pc, #80]	; (80104b8 <xTaskIncrementTick+0x168>)
 8010466:	4613      	mov	r3, r2
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	4413      	add	r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	440b      	add	r3, r1
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d907      	bls.n	8010486 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010476:	2301      	movs	r3, #1
 8010478:	617b      	str	r3, [r7, #20]
 801047a:	e004      	b.n	8010486 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801047c:	4b10      	ldr	r3, [pc, #64]	; (80104c0 <xTaskIncrementTick+0x170>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3301      	adds	r3, #1
 8010482:	4a0f      	ldr	r2, [pc, #60]	; (80104c0 <xTaskIncrementTick+0x170>)
 8010484:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010486:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <xTaskIncrementTick+0x174>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d001      	beq.n	8010492 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801048e:	2301      	movs	r3, #1
 8010490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010492:	697b      	ldr	r3, [r7, #20]
}
 8010494:	4618      	mov	r0, r3
 8010496:	3718      	adds	r7, #24
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	200015b0 	.word	0x200015b0
 80104a0:	2000158c 	.word	0x2000158c
 80104a4:	20001540 	.word	0x20001540
 80104a8:	20001544 	.word	0x20001544
 80104ac:	200015a0 	.word	0x200015a0
 80104b0:	200015a8 	.word	0x200015a8
 80104b4:	20001590 	.word	0x20001590
 80104b8:	2000148c 	.word	0x2000148c
 80104bc:	20001488 	.word	0x20001488
 80104c0:	20001598 	.word	0x20001598
 80104c4:	2000159c 	.word	0x2000159c

080104c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80104c8:	b480      	push	{r7}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80104ce:	4b26      	ldr	r3, [pc, #152]	; (8010568 <vTaskSwitchContext+0xa0>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d003      	beq.n	80104de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80104d6:	4b25      	ldr	r3, [pc, #148]	; (801056c <vTaskSwitchContext+0xa4>)
 80104d8:	2201      	movs	r2, #1
 80104da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80104dc:	e03e      	b.n	801055c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80104de:	4b23      	ldr	r3, [pc, #140]	; (801056c <vTaskSwitchContext+0xa4>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80104e4:	4b22      	ldr	r3, [pc, #136]	; (8010570 <vTaskSwitchContext+0xa8>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	fab3 f383 	clz	r3, r3
 80104f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80104f2:	7afb      	ldrb	r3, [r7, #11]
 80104f4:	f1c3 031f 	rsb	r3, r3, #31
 80104f8:	617b      	str	r3, [r7, #20]
 80104fa:	491e      	ldr	r1, [pc, #120]	; (8010574 <vTaskSwitchContext+0xac>)
 80104fc:	697a      	ldr	r2, [r7, #20]
 80104fe:	4613      	mov	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4413      	add	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	440b      	add	r3, r1
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d109      	bne.n	8010522 <vTaskSwitchContext+0x5a>
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	607b      	str	r3, [r7, #4]
 8010520:	e7fe      	b.n	8010520 <vTaskSwitchContext+0x58>
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	4613      	mov	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	4a11      	ldr	r2, [pc, #68]	; (8010574 <vTaskSwitchContext+0xac>)
 801052e:	4413      	add	r3, r2
 8010530:	613b      	str	r3, [r7, #16]
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	685a      	ldr	r2, [r3, #4]
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	605a      	str	r2, [r3, #4]
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	685a      	ldr	r2, [r3, #4]
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	3308      	adds	r3, #8
 8010544:	429a      	cmp	r2, r3
 8010546:	d104      	bne.n	8010552 <vTaskSwitchContext+0x8a>
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	685a      	ldr	r2, [r3, #4]
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	605a      	str	r2, [r3, #4]
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	4a07      	ldr	r2, [pc, #28]	; (8010578 <vTaskSwitchContext+0xb0>)
 801055a:	6013      	str	r3, [r2, #0]
}
 801055c:	bf00      	nop
 801055e:	371c      	adds	r7, #28
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	200015b0 	.word	0x200015b0
 801056c:	2000159c 	.word	0x2000159c
 8010570:	20001590 	.word	0x20001590
 8010574:	2000148c 	.word	0x2000148c
 8010578:	20001488 	.word	0x20001488

0801057c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d109      	bne.n	80105a0 <vTaskPlaceOnEventList+0x24>
 801058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010590:	f383 8811 	msr	BASEPRI, r3
 8010594:	f3bf 8f6f 	isb	sy
 8010598:	f3bf 8f4f 	dsb	sy
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	e7fe      	b.n	801059e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105a0:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <vTaskPlaceOnEventList+0x44>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3318      	adds	r3, #24
 80105a6:	4619      	mov	r1, r3
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7fe fc85 	bl	800eeb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105ae:	2101      	movs	r1, #1
 80105b0:	6838      	ldr	r0, [r7, #0]
 80105b2:	f000 fb9d 	bl	8010cf0 <prvAddCurrentTaskToDelayedList>
}
 80105b6:	bf00      	nop
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	20001488 	.word	0x20001488

080105c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b086      	sub	sp, #24
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d109      	bne.n	80105ee <xTaskRemoveFromEventList+0x2a>
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	60fb      	str	r3, [r7, #12]
 80105ec:	e7fe      	b.n	80105ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	3318      	adds	r3, #24
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe fc99 	bl	800ef2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105f8:	4b1d      	ldr	r3, [pc, #116]	; (8010670 <xTaskRemoveFromEventList+0xac>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d11c      	bne.n	801063a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	3304      	adds	r3, #4
 8010604:	4618      	mov	r0, r3
 8010606:	f7fe fc90 	bl	800ef2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060e:	2201      	movs	r2, #1
 8010610:	409a      	lsls	r2, r3
 8010612:	4b18      	ldr	r3, [pc, #96]	; (8010674 <xTaskRemoveFromEventList+0xb0>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4313      	orrs	r3, r2
 8010618:	4a16      	ldr	r2, [pc, #88]	; (8010674 <xTaskRemoveFromEventList+0xb0>)
 801061a:	6013      	str	r3, [r2, #0]
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	4a13      	ldr	r2, [pc, #76]	; (8010678 <xTaskRemoveFromEventList+0xb4>)
 801062a:	441a      	add	r2, r3
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	3304      	adds	r3, #4
 8010630:	4619      	mov	r1, r3
 8010632:	4610      	mov	r0, r2
 8010634:	f7fe fc1c 	bl	800ee70 <vListInsertEnd>
 8010638:	e005      	b.n	8010646 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	3318      	adds	r3, #24
 801063e:	4619      	mov	r1, r3
 8010640:	480e      	ldr	r0, [pc, #56]	; (801067c <xTaskRemoveFromEventList+0xb8>)
 8010642:	f7fe fc15 	bl	800ee70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801064a:	4b0d      	ldr	r3, [pc, #52]	; (8010680 <xTaskRemoveFromEventList+0xbc>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010650:	429a      	cmp	r2, r3
 8010652:	d905      	bls.n	8010660 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010654:	2301      	movs	r3, #1
 8010656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010658:	4b0a      	ldr	r3, [pc, #40]	; (8010684 <xTaskRemoveFromEventList+0xc0>)
 801065a:	2201      	movs	r2, #1
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	e001      	b.n	8010664 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010660:	2300      	movs	r3, #0
 8010662:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010664:	697b      	ldr	r3, [r7, #20]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	200015b0 	.word	0x200015b0
 8010674:	20001590 	.word	0x20001590
 8010678:	2000148c 	.word	0x2000148c
 801067c:	20001548 	.word	0x20001548
 8010680:	20001488 	.word	0x20001488
 8010684:	2000159c 	.word	0x2000159c

08010688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010690:	4b06      	ldr	r3, [pc, #24]	; (80106ac <vTaskInternalSetTimeOutState+0x24>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010698:	4b05      	ldr	r3, [pc, #20]	; (80106b0 <vTaskInternalSetTimeOutState+0x28>)
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	605a      	str	r2, [r3, #4]
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr
 80106ac:	200015a0 	.word	0x200015a0
 80106b0:	2000158c 	.word	0x2000158c

080106b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b088      	sub	sp, #32
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d109      	bne.n	80106d8 <xTaskCheckForTimeOut+0x24>
 80106c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	613b      	str	r3, [r7, #16]
 80106d6:	e7fe      	b.n	80106d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d109      	bne.n	80106f2 <xTaskCheckForTimeOut+0x3e>
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	60fb      	str	r3, [r7, #12]
 80106f0:	e7fe      	b.n	80106f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80106f2:	f000 fc8b 	bl	801100c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80106f6:	4b1d      	ldr	r3, [pc, #116]	; (801076c <xTaskCheckForTimeOut+0xb8>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	69ba      	ldr	r2, [r7, #24]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801070e:	d102      	bne.n	8010716 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010710:	2300      	movs	r3, #0
 8010712:	61fb      	str	r3, [r7, #28]
 8010714:	e023      	b.n	801075e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	4b15      	ldr	r3, [pc, #84]	; (8010770 <xTaskCheckForTimeOut+0xbc>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	429a      	cmp	r2, r3
 8010720:	d007      	beq.n	8010732 <xTaskCheckForTimeOut+0x7e>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	69ba      	ldr	r2, [r7, #24]
 8010728:	429a      	cmp	r2, r3
 801072a:	d302      	bcc.n	8010732 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801072c:	2301      	movs	r3, #1
 801072e:	61fb      	str	r3, [r7, #28]
 8010730:	e015      	b.n	801075e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	697a      	ldr	r2, [r7, #20]
 8010738:	429a      	cmp	r2, r3
 801073a:	d20b      	bcs.n	8010754 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	1ad2      	subs	r2, r2, r3
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7ff ff9d 	bl	8010688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801074e:	2300      	movs	r3, #0
 8010750:	61fb      	str	r3, [r7, #28]
 8010752:	e004      	b.n	801075e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	2200      	movs	r2, #0
 8010758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801075a:	2301      	movs	r3, #1
 801075c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801075e:	f000 fc83 	bl	8011068 <vPortExitCritical>

	return xReturn;
 8010762:	69fb      	ldr	r3, [r7, #28]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	2000158c 	.word	0x2000158c
 8010770:	200015a0 	.word	0x200015a0

08010774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010774:	b480      	push	{r7}
 8010776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010778:	4b03      	ldr	r3, [pc, #12]	; (8010788 <vTaskMissedYield+0x14>)
 801077a:	2201      	movs	r2, #1
 801077c:	601a      	str	r2, [r3, #0]
}
 801077e:	bf00      	nop
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr
 8010788:	2000159c 	.word	0x2000159c

0801078c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010794:	f000 f852 	bl	801083c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010798:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <prvIdleTask+0x28>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d9f9      	bls.n	8010794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80107a0:	4b05      	ldr	r3, [pc, #20]	; (80107b8 <prvIdleTask+0x2c>)
 80107a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107a6:	601a      	str	r2, [r3, #0]
 80107a8:	f3bf 8f4f 	dsb	sy
 80107ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80107b0:	e7f0      	b.n	8010794 <prvIdleTask+0x8>
 80107b2:	bf00      	nop
 80107b4:	2000148c 	.word	0x2000148c
 80107b8:	e000ed04 	.word	0xe000ed04

080107bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107c2:	2300      	movs	r3, #0
 80107c4:	607b      	str	r3, [r7, #4]
 80107c6:	e00c      	b.n	80107e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	4613      	mov	r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	4a12      	ldr	r2, [pc, #72]	; (801081c <prvInitialiseTaskLists+0x60>)
 80107d4:	4413      	add	r3, r2
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fe fb1d 	bl	800ee16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	3301      	adds	r3, #1
 80107e0:	607b      	str	r3, [r7, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b06      	cmp	r3, #6
 80107e6:	d9ef      	bls.n	80107c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80107e8:	480d      	ldr	r0, [pc, #52]	; (8010820 <prvInitialiseTaskLists+0x64>)
 80107ea:	f7fe fb14 	bl	800ee16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80107ee:	480d      	ldr	r0, [pc, #52]	; (8010824 <prvInitialiseTaskLists+0x68>)
 80107f0:	f7fe fb11 	bl	800ee16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80107f4:	480c      	ldr	r0, [pc, #48]	; (8010828 <prvInitialiseTaskLists+0x6c>)
 80107f6:	f7fe fb0e 	bl	800ee16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80107fa:	480c      	ldr	r0, [pc, #48]	; (801082c <prvInitialiseTaskLists+0x70>)
 80107fc:	f7fe fb0b 	bl	800ee16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010800:	480b      	ldr	r0, [pc, #44]	; (8010830 <prvInitialiseTaskLists+0x74>)
 8010802:	f7fe fb08 	bl	800ee16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010806:	4b0b      	ldr	r3, [pc, #44]	; (8010834 <prvInitialiseTaskLists+0x78>)
 8010808:	4a05      	ldr	r2, [pc, #20]	; (8010820 <prvInitialiseTaskLists+0x64>)
 801080a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801080c:	4b0a      	ldr	r3, [pc, #40]	; (8010838 <prvInitialiseTaskLists+0x7c>)
 801080e:	4a05      	ldr	r2, [pc, #20]	; (8010824 <prvInitialiseTaskLists+0x68>)
 8010810:	601a      	str	r2, [r3, #0]
}
 8010812:	bf00      	nop
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	2000148c 	.word	0x2000148c
 8010820:	20001518 	.word	0x20001518
 8010824:	2000152c 	.word	0x2000152c
 8010828:	20001548 	.word	0x20001548
 801082c:	2000155c 	.word	0x2000155c
 8010830:	20001574 	.word	0x20001574
 8010834:	20001540 	.word	0x20001540
 8010838:	20001544 	.word	0x20001544

0801083c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010842:	e019      	b.n	8010878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010844:	f000 fbe2 	bl	801100c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010848:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <prvCheckTasksWaitingTermination+0x4c>)
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3304      	adds	r3, #4
 8010854:	4618      	mov	r0, r3
 8010856:	f7fe fb68 	bl	800ef2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801085a:	4b0c      	ldr	r3, [pc, #48]	; (801088c <prvCheckTasksWaitingTermination+0x50>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	3b01      	subs	r3, #1
 8010860:	4a0a      	ldr	r2, [pc, #40]	; (801088c <prvCheckTasksWaitingTermination+0x50>)
 8010862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010864:	4b0a      	ldr	r3, [pc, #40]	; (8010890 <prvCheckTasksWaitingTermination+0x54>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	3b01      	subs	r3, #1
 801086a:	4a09      	ldr	r2, [pc, #36]	; (8010890 <prvCheckTasksWaitingTermination+0x54>)
 801086c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801086e:	f000 fbfb 	bl	8011068 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f80e 	bl	8010894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010878:	4b05      	ldr	r3, [pc, #20]	; (8010890 <prvCheckTasksWaitingTermination+0x54>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1e1      	bne.n	8010844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010880:	bf00      	nop
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	2000155c 	.word	0x2000155c
 801088c:	20001588 	.word	0x20001588
 8010890:	20001570 	.word	0x20001570

08010894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d108      	bne.n	80108b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 fd8a 	bl	80113c4 <vPortFree>
				vPortFree( pxTCB );
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fd87 	bl	80113c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80108b6:	e017      	b.n	80108e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d103      	bne.n	80108ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 fd7e 	bl	80113c4 <vPortFree>
	}
 80108c8:	e00e      	b.n	80108e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d009      	beq.n	80108e8 <prvDeleteTCB+0x54>
 80108d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	60fb      	str	r3, [r7, #12]
 80108e6:	e7fe      	b.n	80108e6 <prvDeleteTCB+0x52>
	}
 80108e8:	bf00      	nop
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108f6:	4b0f      	ldr	r3, [pc, #60]	; (8010934 <prvResetNextTaskUnblockTime+0x44>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <prvResetNextTaskUnblockTime+0x14>
 8010900:	2301      	movs	r3, #1
 8010902:	e000      	b.n	8010906 <prvResetNextTaskUnblockTime+0x16>
 8010904:	2300      	movs	r3, #0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d004      	beq.n	8010914 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801090a:	4b0b      	ldr	r3, [pc, #44]	; (8010938 <prvResetNextTaskUnblockTime+0x48>)
 801090c:	f04f 32ff 	mov.w	r2, #4294967295
 8010910:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010912:	e008      	b.n	8010926 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010914:	4b07      	ldr	r3, [pc, #28]	; (8010934 <prvResetNextTaskUnblockTime+0x44>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	4a05      	ldr	r2, [pc, #20]	; (8010938 <prvResetNextTaskUnblockTime+0x48>)
 8010924:	6013      	str	r3, [r2, #0]
}
 8010926:	bf00      	nop
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20001540 	.word	0x20001540
 8010938:	200015a8 	.word	0x200015a8

0801093c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010942:	4b0b      	ldr	r3, [pc, #44]	; (8010970 <xTaskGetSchedulerState+0x34>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d102      	bne.n	8010950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801094a:	2301      	movs	r3, #1
 801094c:	607b      	str	r3, [r7, #4]
 801094e:	e008      	b.n	8010962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010950:	4b08      	ldr	r3, [pc, #32]	; (8010974 <xTaskGetSchedulerState+0x38>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d102      	bne.n	801095e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010958:	2302      	movs	r3, #2
 801095a:	607b      	str	r3, [r7, #4]
 801095c:	e001      	b.n	8010962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801095e:	2300      	movs	r3, #0
 8010960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010962:	687b      	ldr	r3, [r7, #4]
	}
 8010964:	4618      	mov	r0, r3
 8010966:	370c      	adds	r7, #12
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	20001594 	.word	0x20001594
 8010974:	200015b0 	.word	0x200015b0

08010978 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010984:	2300      	movs	r3, #0
 8010986:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d06e      	beq.n	8010a6c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010992:	4b39      	ldr	r3, [pc, #228]	; (8010a78 <xTaskPriorityInherit+0x100>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010998:	429a      	cmp	r2, r3
 801099a:	d25e      	bcs.n	8010a5a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	699b      	ldr	r3, [r3, #24]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	db06      	blt.n	80109b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109a4:	4b34      	ldr	r3, [pc, #208]	; (8010a78 <xTaskPriorityInherit+0x100>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109aa:	f1c3 0207 	rsb	r2, r3, #7
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	6959      	ldr	r1, [r3, #20]
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ba:	4613      	mov	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4413      	add	r3, r2
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	4a2e      	ldr	r2, [pc, #184]	; (8010a7c <xTaskPriorityInherit+0x104>)
 80109c4:	4413      	add	r3, r2
 80109c6:	4299      	cmp	r1, r3
 80109c8:	d101      	bne.n	80109ce <xTaskPriorityInherit+0x56>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e000      	b.n	80109d0 <xTaskPriorityInherit+0x58>
 80109ce:	2300      	movs	r3, #0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d03a      	beq.n	8010a4a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	3304      	adds	r3, #4
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe faa6 	bl	800ef2a <uxListRemove>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d115      	bne.n	8010a10 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e8:	4924      	ldr	r1, [pc, #144]	; (8010a7c <xTaskPriorityInherit+0x104>)
 80109ea:	4613      	mov	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	440b      	add	r3, r1
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10a      	bne.n	8010a10 <xTaskPriorityInherit+0x98>
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fe:	2201      	movs	r2, #1
 8010a00:	fa02 f303 	lsl.w	r3, r2, r3
 8010a04:	43da      	mvns	r2, r3
 8010a06:	4b1e      	ldr	r3, [pc, #120]	; (8010a80 <xTaskPriorityInherit+0x108>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	4a1c      	ldr	r2, [pc, #112]	; (8010a80 <xTaskPriorityInherit+0x108>)
 8010a0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a10:	4b19      	ldr	r3, [pc, #100]	; (8010a78 <xTaskPriorityInherit+0x100>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1e:	2201      	movs	r2, #1
 8010a20:	409a      	lsls	r2, r3
 8010a22:	4b17      	ldr	r3, [pc, #92]	; (8010a80 <xTaskPriorityInherit+0x108>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4313      	orrs	r3, r2
 8010a28:	4a15      	ldr	r2, [pc, #84]	; (8010a80 <xTaskPriorityInherit+0x108>)
 8010a2a:	6013      	str	r3, [r2, #0]
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4a10      	ldr	r2, [pc, #64]	; (8010a7c <xTaskPriorityInherit+0x104>)
 8010a3a:	441a      	add	r2, r3
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4619      	mov	r1, r3
 8010a42:	4610      	mov	r0, r2
 8010a44:	f7fe fa14 	bl	800ee70 <vListInsertEnd>
 8010a48:	e004      	b.n	8010a54 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	; (8010a78 <xTaskPriorityInherit+0x100>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010a54:	2301      	movs	r3, #1
 8010a56:	60fb      	str	r3, [r7, #12]
 8010a58:	e008      	b.n	8010a6c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a5e:	4b06      	ldr	r3, [pc, #24]	; (8010a78 <xTaskPriorityInherit+0x100>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d201      	bcs.n	8010a6c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
	}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	20001488 	.word	0x20001488
 8010a7c:	2000148c 	.word	0x2000148c
 8010a80:	20001590 	.word	0x20001590

08010a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010a90:	2300      	movs	r3, #0
 8010a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d06c      	beq.n	8010b74 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010a9a:	4b39      	ldr	r3, [pc, #228]	; (8010b80 <xTaskPriorityDisinherit+0xfc>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d009      	beq.n	8010ab8 <xTaskPriorityDisinherit+0x34>
 8010aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	60fb      	str	r3, [r7, #12]
 8010ab6:	e7fe      	b.n	8010ab6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d109      	bne.n	8010ad4 <xTaskPriorityDisinherit+0x50>
 8010ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac4:	f383 8811 	msr	BASEPRI, r3
 8010ac8:	f3bf 8f6f 	isb	sy
 8010acc:	f3bf 8f4f 	dsb	sy
 8010ad0:	60bb      	str	r3, [r7, #8]
 8010ad2:	e7fe      	b.n	8010ad2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ad8:	1e5a      	subs	r2, r3, #1
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d044      	beq.n	8010b74 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d140      	bne.n	8010b74 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	3304      	adds	r3, #4
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fa17 	bl	800ef2a <uxListRemove>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d115      	bne.n	8010b2e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b06:	491f      	ldr	r1, [pc, #124]	; (8010b84 <xTaskPriorityDisinherit+0x100>)
 8010b08:	4613      	mov	r3, r2
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	440b      	add	r3, r1
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10a      	bne.n	8010b2e <xTaskPriorityDisinherit+0xaa>
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b22:	43da      	mvns	r2, r3
 8010b24:	4b18      	ldr	r3, [pc, #96]	; (8010b88 <xTaskPriorityDisinherit+0x104>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4013      	ands	r3, r2
 8010b2a:	4a17      	ldr	r2, [pc, #92]	; (8010b88 <xTaskPriorityDisinherit+0x104>)
 8010b2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b3a:	f1c3 0207 	rsb	r2, r3, #7
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b46:	2201      	movs	r2, #1
 8010b48:	409a      	lsls	r2, r3
 8010b4a:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <xTaskPriorityDisinherit+0x104>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	4a0d      	ldr	r2, [pc, #52]	; (8010b88 <xTaskPriorityDisinherit+0x104>)
 8010b52:	6013      	str	r3, [r2, #0]
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b58:	4613      	mov	r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	4413      	add	r3, r2
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4a08      	ldr	r2, [pc, #32]	; (8010b84 <xTaskPriorityDisinherit+0x100>)
 8010b62:	441a      	add	r2, r3
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	3304      	adds	r3, #4
 8010b68:	4619      	mov	r1, r3
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	f7fe f980 	bl	800ee70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010b70:	2301      	movs	r3, #1
 8010b72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b74:	697b      	ldr	r3, [r7, #20]
	}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20001488 	.word	0x20001488
 8010b84:	2000148c 	.word	0x2000148c
 8010b88:	20001590 	.word	0x20001590

08010b8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f000 8086 	beq.w	8010cb2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d109      	bne.n	8010bc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	60fb      	str	r3, [r7, #12]
 8010bc0:	e7fe      	b.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d902      	bls.n	8010bd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	61fb      	str	r3, [r7, #28]
 8010bd0:	e002      	b.n	8010bd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bdc:	69fa      	ldr	r2, [r7, #28]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d067      	beq.n	8010cb2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010be6:	697a      	ldr	r2, [r7, #20]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d162      	bne.n	8010cb2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010bec:	4b33      	ldr	r3, [pc, #204]	; (8010cbc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	69ba      	ldr	r2, [r7, #24]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d109      	bne.n	8010c0a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	60bb      	str	r3, [r7, #8]
 8010c08:	e7fe      	b.n	8010c08 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	69fa      	ldr	r2, [r7, #28]
 8010c14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	db04      	blt.n	8010c28 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	f1c3 0207 	rsb	r2, r3, #7
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	6959      	ldr	r1, [r3, #20]
 8010c2c:	693a      	ldr	r2, [r7, #16]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	4a22      	ldr	r2, [pc, #136]	; (8010cc0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010c38:	4413      	add	r3, r2
 8010c3a:	4299      	cmp	r1, r3
 8010c3c:	d101      	bne.n	8010c42 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	e000      	b.n	8010c44 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010c42:	2300      	movs	r3, #0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d034      	beq.n	8010cb2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	3304      	adds	r3, #4
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fe f96c 	bl	800ef2a <uxListRemove>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d115      	bne.n	8010c84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c5c:	4918      	ldr	r1, [pc, #96]	; (8010cc0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010c5e:	4613      	mov	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	440b      	add	r3, r1
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10a      	bne.n	8010c84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c72:	2201      	movs	r2, #1
 8010c74:	fa02 f303 	lsl.w	r3, r2, r3
 8010c78:	43da      	mvns	r2, r3
 8010c7a:	4b12      	ldr	r3, [pc, #72]	; (8010cc4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4013      	ands	r3, r2
 8010c80:	4a10      	ldr	r2, [pc, #64]	; (8010cc4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010c82:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c88:	2201      	movs	r2, #1
 8010c8a:	409a      	lsls	r2, r3
 8010c8c:	4b0d      	ldr	r3, [pc, #52]	; (8010cc4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4313      	orrs	r3, r2
 8010c92:	4a0c      	ldr	r2, [pc, #48]	; (8010cc4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4a07      	ldr	r2, [pc, #28]	; (8010cc0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010ca4:	441a      	add	r2, r3
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	3304      	adds	r3, #4
 8010caa:	4619      	mov	r1, r3
 8010cac:	4610      	mov	r0, r2
 8010cae:	f7fe f8df 	bl	800ee70 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cb2:	bf00      	nop
 8010cb4:	3720      	adds	r7, #32
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	20001488 	.word	0x20001488
 8010cc0:	2000148c 	.word	0x2000148c
 8010cc4:	20001590 	.word	0x20001590

08010cc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010ccc:	4b07      	ldr	r3, [pc, #28]	; (8010cec <pvTaskIncrementMutexHeldCount+0x24>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d004      	beq.n	8010cde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010cd4:	4b05      	ldr	r3, [pc, #20]	; (8010cec <pvTaskIncrementMutexHeldCount+0x24>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010cda:	3201      	adds	r2, #1
 8010cdc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010cde:	4b03      	ldr	r3, [pc, #12]	; (8010cec <pvTaskIncrementMutexHeldCount+0x24>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
	}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	20001488 	.word	0x20001488

08010cf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010cfa:	4b29      	ldr	r3, [pc, #164]	; (8010da0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d00:	4b28      	ldr	r3, [pc, #160]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3304      	adds	r3, #4
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe f90f 	bl	800ef2a <uxListRemove>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10b      	bne.n	8010d2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010d12:	4b24      	ldr	r3, [pc, #144]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	2201      	movs	r2, #1
 8010d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d1e:	43da      	mvns	r2, r3
 8010d20:	4b21      	ldr	r3, [pc, #132]	; (8010da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4013      	ands	r3, r2
 8010d26:	4a20      	ldr	r2, [pc, #128]	; (8010da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010d28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d30:	d10a      	bne.n	8010d48 <prvAddCurrentTaskToDelayedList+0x58>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d007      	beq.n	8010d48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d38:	4b1a      	ldr	r3, [pc, #104]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3304      	adds	r3, #4
 8010d3e:	4619      	mov	r1, r3
 8010d40:	481a      	ldr	r0, [pc, #104]	; (8010dac <prvAddCurrentTaskToDelayedList+0xbc>)
 8010d42:	f7fe f895 	bl	800ee70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010d46:	e026      	b.n	8010d96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010d50:	4b14      	ldr	r3, [pc, #80]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010d58:	68ba      	ldr	r2, [r7, #8]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d209      	bcs.n	8010d74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d60:	4b13      	ldr	r3, [pc, #76]	; (8010db0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	4b0f      	ldr	r3, [pc, #60]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	f7fe f8a3 	bl	800eeb8 <vListInsert>
}
 8010d72:	e010      	b.n	8010d96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d74:	4b0f      	ldr	r3, [pc, #60]	; (8010db4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	4b0a      	ldr	r3, [pc, #40]	; (8010da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	4619      	mov	r1, r3
 8010d80:	4610      	mov	r0, r2
 8010d82:	f7fe f899 	bl	800eeb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010d86:	4b0c      	ldr	r3, [pc, #48]	; (8010db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d202      	bcs.n	8010d96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010d90:	4a09      	ldr	r2, [pc, #36]	; (8010db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	6013      	str	r3, [r2, #0]
}
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	2000158c 	.word	0x2000158c
 8010da4:	20001488 	.word	0x20001488
 8010da8:	20001590 	.word	0x20001590
 8010dac:	20001574 	.word	0x20001574
 8010db0:	20001544 	.word	0x20001544
 8010db4:	20001540 	.word	0x20001540
 8010db8:	200015a8 	.word	0x200015a8

08010dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b085      	sub	sp, #20
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	3b04      	subs	r3, #4
 8010dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	3b04      	subs	r3, #4
 8010dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	f023 0201 	bic.w	r2, r3, #1
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	3b04      	subs	r3, #4
 8010dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010dec:	4a0c      	ldr	r2, [pc, #48]	; (8010e20 <pxPortInitialiseStack+0x64>)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3b14      	subs	r3, #20
 8010df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	3b04      	subs	r3, #4
 8010e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	f06f 0202 	mvn.w	r2, #2
 8010e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	3b20      	subs	r3, #32
 8010e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010e12:	68fb      	ldr	r3, [r7, #12]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3714      	adds	r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	08010e25 	.word	0x08010e25

08010e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010e2e:	4b11      	ldr	r3, [pc, #68]	; (8010e74 <prvTaskExitError+0x50>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e36:	d009      	beq.n	8010e4c <prvTaskExitError+0x28>
 8010e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3c:	f383 8811 	msr	BASEPRI, r3
 8010e40:	f3bf 8f6f 	isb	sy
 8010e44:	f3bf 8f4f 	dsb	sy
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	e7fe      	b.n	8010e4a <prvTaskExitError+0x26>
 8010e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e5e:	bf00      	nop
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d0fc      	beq.n	8010e60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e66:	bf00      	nop
 8010e68:	3714      	adds	r7, #20
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	20000dd0 	.word	0x20000dd0
	...

08010e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e80:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <pxCurrentTCBConst2>)
 8010e82:	6819      	ldr	r1, [r3, #0]
 8010e84:	6808      	ldr	r0, [r1, #0]
 8010e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8a:	f380 8809 	msr	PSP, r0
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f04f 0000 	mov.w	r0, #0
 8010e96:	f380 8811 	msr	BASEPRI, r0
 8010e9a:	4770      	bx	lr
 8010e9c:	f3af 8000 	nop.w

08010ea0 <pxCurrentTCBConst2>:
 8010ea0:	20001488 	.word	0x20001488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop

08010ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ea8:	4808      	ldr	r0, [pc, #32]	; (8010ecc <prvPortStartFirstTask+0x24>)
 8010eaa:	6800      	ldr	r0, [r0, #0]
 8010eac:	6800      	ldr	r0, [r0, #0]
 8010eae:	f380 8808 	msr	MSP, r0
 8010eb2:	f04f 0000 	mov.w	r0, #0
 8010eb6:	f380 8814 	msr	CONTROL, r0
 8010eba:	b662      	cpsie	i
 8010ebc:	b661      	cpsie	f
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	df00      	svc	0
 8010ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010eca:	bf00      	nop
 8010ecc:	e000ed08 	.word	0xe000ed08

08010ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b086      	sub	sp, #24
 8010ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ed6:	4b44      	ldr	r3, [pc, #272]	; (8010fe8 <xPortStartScheduler+0x118>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a44      	ldr	r2, [pc, #272]	; (8010fec <xPortStartScheduler+0x11c>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d109      	bne.n	8010ef4 <xPortStartScheduler+0x24>
 8010ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	613b      	str	r3, [r7, #16]
 8010ef2:	e7fe      	b.n	8010ef2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ef4:	4b3c      	ldr	r3, [pc, #240]	; (8010fe8 <xPortStartScheduler+0x118>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a3d      	ldr	r2, [pc, #244]	; (8010ff0 <xPortStartScheduler+0x120>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d109      	bne.n	8010f12 <xPortStartScheduler+0x42>
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	e7fe      	b.n	8010f10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f12:	4b38      	ldr	r3, [pc, #224]	; (8010ff4 <xPortStartScheduler+0x124>)
 8010f14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	22ff      	movs	r2, #255	; 0xff
 8010f22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	4b30      	ldr	r3, [pc, #192]	; (8010ff8 <xPortStartScheduler+0x128>)
 8010f38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f3a:	4b30      	ldr	r3, [pc, #192]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f3c:	2207      	movs	r2, #7
 8010f3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f40:	e009      	b.n	8010f56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010f42:	4b2e      	ldr	r3, [pc, #184]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	3b01      	subs	r3, #1
 8010f48:	4a2c      	ldr	r2, [pc, #176]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	005b      	lsls	r3, r3, #1
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f56:	78fb      	ldrb	r3, [r7, #3]
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f5e:	2b80      	cmp	r3, #128	; 0x80
 8010f60:	d0ef      	beq.n	8010f42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f62:	4b26      	ldr	r3, [pc, #152]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f1c3 0307 	rsb	r3, r3, #7
 8010f6a:	2b04      	cmp	r3, #4
 8010f6c:	d009      	beq.n	8010f82 <xPortStartScheduler+0xb2>
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	60bb      	str	r3, [r7, #8]
 8010f80:	e7fe      	b.n	8010f80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f82:	4b1e      	ldr	r3, [pc, #120]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	021b      	lsls	r3, r3, #8
 8010f88:	4a1c      	ldr	r2, [pc, #112]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f8c:	4b1b      	ldr	r3, [pc, #108]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f94:	4a19      	ldr	r2, [pc, #100]	; (8010ffc <xPortStartScheduler+0x12c>)
 8010f96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010fa0:	4b17      	ldr	r3, [pc, #92]	; (8011000 <xPortStartScheduler+0x130>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a16      	ldr	r2, [pc, #88]	; (8011000 <xPortStartScheduler+0x130>)
 8010fa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010faa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010fac:	4b14      	ldr	r3, [pc, #80]	; (8011000 <xPortStartScheduler+0x130>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a13      	ldr	r2, [pc, #76]	; (8011000 <xPortStartScheduler+0x130>)
 8010fb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010fb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010fb8:	f000 f8d6 	bl	8011168 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010fbc:	4b11      	ldr	r3, [pc, #68]	; (8011004 <xPortStartScheduler+0x134>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010fc2:	f000 f8f5 	bl	80111b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010fc6:	4b10      	ldr	r3, [pc, #64]	; (8011008 <xPortStartScheduler+0x138>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4a0f      	ldr	r2, [pc, #60]	; (8011008 <xPortStartScheduler+0x138>)
 8010fcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010fd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010fd2:	f7ff ff69 	bl	8010ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010fd6:	f7ff fa77 	bl	80104c8 <vTaskSwitchContext>
	prvTaskExitError();
 8010fda:	f7ff ff23 	bl	8010e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010fde:	2300      	movs	r3, #0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3718      	adds	r7, #24
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	e000ed00 	.word	0xe000ed00
 8010fec:	410fc271 	.word	0x410fc271
 8010ff0:	410fc270 	.word	0x410fc270
 8010ff4:	e000e400 	.word	0xe000e400
 8010ff8:	200015b4 	.word	0x200015b4
 8010ffc:	200015b8 	.word	0x200015b8
 8011000:	e000ed20 	.word	0xe000ed20
 8011004:	20000dd0 	.word	0x20000dd0
 8011008:	e000ef34 	.word	0xe000ef34

0801100c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011024:	4b0e      	ldr	r3, [pc, #56]	; (8011060 <vPortEnterCritical+0x54>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	3301      	adds	r3, #1
 801102a:	4a0d      	ldr	r2, [pc, #52]	; (8011060 <vPortEnterCritical+0x54>)
 801102c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801102e:	4b0c      	ldr	r3, [pc, #48]	; (8011060 <vPortEnterCritical+0x54>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d10e      	bne.n	8011054 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011036:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <vPortEnterCritical+0x58>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	b2db      	uxtb	r3, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	d009      	beq.n	8011054 <vPortEnterCritical+0x48>
 8011040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	603b      	str	r3, [r7, #0]
 8011052:	e7fe      	b.n	8011052 <vPortEnterCritical+0x46>
	}
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	20000dd0 	.word	0x20000dd0
 8011064:	e000ed04 	.word	0xe000ed04

08011068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801106e:	4b11      	ldr	r3, [pc, #68]	; (80110b4 <vPortExitCritical+0x4c>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d109      	bne.n	801108a <vPortExitCritical+0x22>
 8011076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107a:	f383 8811 	msr	BASEPRI, r3
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	f3bf 8f4f 	dsb	sy
 8011086:	607b      	str	r3, [r7, #4]
 8011088:	e7fe      	b.n	8011088 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801108a:	4b0a      	ldr	r3, [pc, #40]	; (80110b4 <vPortExitCritical+0x4c>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	3b01      	subs	r3, #1
 8011090:	4a08      	ldr	r2, [pc, #32]	; (80110b4 <vPortExitCritical+0x4c>)
 8011092:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011094:	4b07      	ldr	r3, [pc, #28]	; (80110b4 <vPortExitCritical+0x4c>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d104      	bne.n	80110a6 <vPortExitCritical+0x3e>
 801109c:	2300      	movs	r3, #0
 801109e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80110a6:	bf00      	nop
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	20000dd0 	.word	0x20000dd0
	...

080110c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110c0:	f3ef 8009 	mrs	r0, PSP
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	4b15      	ldr	r3, [pc, #84]	; (8011120 <pxCurrentTCBConst>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	f01e 0f10 	tst.w	lr, #16
 80110d0:	bf08      	it	eq
 80110d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	6010      	str	r0, [r2, #0]
 80110dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110e4:	f380 8811 	msr	BASEPRI, r0
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f7ff f9ea 	bl	80104c8 <vTaskSwitchContext>
 80110f4:	f04f 0000 	mov.w	r0, #0
 80110f8:	f380 8811 	msr	BASEPRI, r0
 80110fc:	bc09      	pop	{r0, r3}
 80110fe:	6819      	ldr	r1, [r3, #0]
 8011100:	6808      	ldr	r0, [r1, #0]
 8011102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011106:	f01e 0f10 	tst.w	lr, #16
 801110a:	bf08      	it	eq
 801110c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011110:	f380 8809 	msr	PSP, r0
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	f3af 8000 	nop.w

08011120 <pxCurrentTCBConst>:
 8011120:	20001488 	.word	0x20001488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop

08011128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011140:	f7ff f906 	bl	8010350 <xTaskIncrementTick>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d003      	beq.n	8011152 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801114a:	4b06      	ldr	r3, [pc, #24]	; (8011164 <SysTick_Handler+0x3c>)
 801114c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	2300      	movs	r3, #0
 8011154:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801115c:	bf00      	nop
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	e000ed04 	.word	0xe000ed04

08011168 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011168:	b480      	push	{r7}
 801116a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801116c:	4b0b      	ldr	r3, [pc, #44]	; (801119c <vPortSetupTimerInterrupt+0x34>)
 801116e:	2200      	movs	r2, #0
 8011170:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011172:	4b0b      	ldr	r3, [pc, #44]	; (80111a0 <vPortSetupTimerInterrupt+0x38>)
 8011174:	2200      	movs	r2, #0
 8011176:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011178:	4b0a      	ldr	r3, [pc, #40]	; (80111a4 <vPortSetupTimerInterrupt+0x3c>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a0a      	ldr	r2, [pc, #40]	; (80111a8 <vPortSetupTimerInterrupt+0x40>)
 801117e:	fba2 2303 	umull	r2, r3, r2, r3
 8011182:	099b      	lsrs	r3, r3, #6
 8011184:	4a09      	ldr	r2, [pc, #36]	; (80111ac <vPortSetupTimerInterrupt+0x44>)
 8011186:	3b01      	subs	r3, #1
 8011188:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801118a:	4b04      	ldr	r3, [pc, #16]	; (801119c <vPortSetupTimerInterrupt+0x34>)
 801118c:	2207      	movs	r2, #7
 801118e:	601a      	str	r2, [r3, #0]
}
 8011190:	bf00      	nop
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	e000e010 	.word	0xe000e010
 80111a0:	e000e018 	.word	0xe000e018
 80111a4:	20000cb4 	.word	0x20000cb4
 80111a8:	10624dd3 	.word	0x10624dd3
 80111ac:	e000e014 	.word	0xe000e014

080111b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80111c0 <vPortEnableVFP+0x10>
 80111b4:	6801      	ldr	r1, [r0, #0]
 80111b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80111ba:	6001      	str	r1, [r0, #0]
 80111bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111be:	bf00      	nop
 80111c0:	e000ed88 	.word	0xe000ed88

080111c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80111ca:	f3ef 8305 	mrs	r3, IPSR
 80111ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2b0f      	cmp	r3, #15
 80111d4:	d913      	bls.n	80111fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111d6:	4a16      	ldr	r2, [pc, #88]	; (8011230 <vPortValidateInterruptPriority+0x6c>)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	4413      	add	r3, r2
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80111e0:	4b14      	ldr	r3, [pc, #80]	; (8011234 <vPortValidateInterruptPriority+0x70>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	7afa      	ldrb	r2, [r7, #11]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d209      	bcs.n	80111fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80111ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	607b      	str	r3, [r7, #4]
 80111fc:	e7fe      	b.n	80111fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80111fe:	4b0e      	ldr	r3, [pc, #56]	; (8011238 <vPortValidateInterruptPriority+0x74>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011206:	4b0d      	ldr	r3, [pc, #52]	; (801123c <vPortValidateInterruptPriority+0x78>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	429a      	cmp	r2, r3
 801120c:	d909      	bls.n	8011222 <vPortValidateInterruptPriority+0x5e>
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	e7fe      	b.n	8011220 <vPortValidateInterruptPriority+0x5c>
	}
 8011222:	bf00      	nop
 8011224:	3714      	adds	r7, #20
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	e000e3f0 	.word	0xe000e3f0
 8011234:	200015b4 	.word	0x200015b4
 8011238:	e000ed0c 	.word	0xe000ed0c
 801123c:	200015b8 	.word	0x200015b8

08011240 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08a      	sub	sp, #40	; 0x28
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011248:	2300      	movs	r3, #0
 801124a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801124c:	f7fe ffd6 	bl	80101fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011250:	4b57      	ldr	r3, [pc, #348]	; (80113b0 <pvPortMalloc+0x170>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d101      	bne.n	801125c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011258:	f000 f90c 	bl	8011474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801125c:	4b55      	ldr	r3, [pc, #340]	; (80113b4 <pvPortMalloc+0x174>)
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	4013      	ands	r3, r2
 8011264:	2b00      	cmp	r3, #0
 8011266:	f040 808c 	bne.w	8011382 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d01c      	beq.n	80112aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011270:	2208      	movs	r2, #8
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4413      	add	r3, r2
 8011276:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f003 0307 	and.w	r3, r3, #7
 801127e:	2b00      	cmp	r3, #0
 8011280:	d013      	beq.n	80112aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f023 0307 	bic.w	r3, r3, #7
 8011288:	3308      	adds	r3, #8
 801128a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f003 0307 	and.w	r3, r3, #7
 8011292:	2b00      	cmp	r3, #0
 8011294:	d009      	beq.n	80112aa <pvPortMalloc+0x6a>
 8011296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	617b      	str	r3, [r7, #20]
 80112a8:	e7fe      	b.n	80112a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d068      	beq.n	8011382 <pvPortMalloc+0x142>
 80112b0:	4b41      	ldr	r3, [pc, #260]	; (80113b8 <pvPortMalloc+0x178>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d863      	bhi.n	8011382 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80112ba:	4b40      	ldr	r3, [pc, #256]	; (80113bc <pvPortMalloc+0x17c>)
 80112bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80112be:	4b3f      	ldr	r3, [pc, #252]	; (80113bc <pvPortMalloc+0x17c>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112c4:	e004      	b.n	80112d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d903      	bls.n	80112e2 <pvPortMalloc+0xa2>
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1f1      	bne.n	80112c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80112e2:	4b33      	ldr	r3, [pc, #204]	; (80113b0 <pvPortMalloc+0x170>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d04a      	beq.n	8011382 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2208      	movs	r2, #8
 80112f2:	4413      	add	r3, r2
 80112f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80112fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	1ad2      	subs	r2, r2, r3
 8011306:	2308      	movs	r3, #8
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	429a      	cmp	r2, r3
 801130c:	d91e      	bls.n	801134c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801130e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4413      	add	r3, r2
 8011314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011316:	69bb      	ldr	r3, [r7, #24]
 8011318:	f003 0307 	and.w	r3, r3, #7
 801131c:	2b00      	cmp	r3, #0
 801131e:	d009      	beq.n	8011334 <pvPortMalloc+0xf4>
 8011320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	613b      	str	r3, [r7, #16]
 8011332:	e7fe      	b.n	8011332 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	685a      	ldr	r2, [r3, #4]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	1ad2      	subs	r2, r2, r3
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011346:	69b8      	ldr	r0, [r7, #24]
 8011348:	f000 f8f6 	bl	8011538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801134c:	4b1a      	ldr	r3, [pc, #104]	; (80113b8 <pvPortMalloc+0x178>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	4a18      	ldr	r2, [pc, #96]	; (80113b8 <pvPortMalloc+0x178>)
 8011358:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801135a:	4b17      	ldr	r3, [pc, #92]	; (80113b8 <pvPortMalloc+0x178>)
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	4b18      	ldr	r3, [pc, #96]	; (80113c0 <pvPortMalloc+0x180>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	429a      	cmp	r2, r3
 8011364:	d203      	bcs.n	801136e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011366:	4b14      	ldr	r3, [pc, #80]	; (80113b8 <pvPortMalloc+0x178>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	4a15      	ldr	r2, [pc, #84]	; (80113c0 <pvPortMalloc+0x180>)
 801136c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	4b10      	ldr	r3, [pc, #64]	; (80113b4 <pvPortMalloc+0x174>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	431a      	orrs	r2, r3
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	2200      	movs	r2, #0
 8011380:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011382:	f7fe ff49 	bl	8010218 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	f003 0307 	and.w	r3, r3, #7
 801138c:	2b00      	cmp	r3, #0
 801138e:	d009      	beq.n	80113a4 <pvPortMalloc+0x164>
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	60fb      	str	r3, [r7, #12]
 80113a2:	e7fe      	b.n	80113a2 <pvPortMalloc+0x162>
	return pvReturn;
 80113a4:	69fb      	ldr	r3, [r7, #28]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3728      	adds	r7, #40	; 0x28
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	200051c4 	.word	0x200051c4
 80113b4:	200051d0 	.word	0x200051d0
 80113b8:	200051c8 	.word	0x200051c8
 80113bc:	200051bc 	.word	0x200051bc
 80113c0:	200051cc 	.word	0x200051cc

080113c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b086      	sub	sp, #24
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d046      	beq.n	8011464 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113d6:	2308      	movs	r3, #8
 80113d8:	425b      	negs	r3, r3
 80113da:	697a      	ldr	r2, [r7, #20]
 80113dc:	4413      	add	r3, r2
 80113de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	685a      	ldr	r2, [r3, #4]
 80113e8:	4b20      	ldr	r3, [pc, #128]	; (801146c <vPortFree+0xa8>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4013      	ands	r3, r2
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d109      	bne.n	8011406 <vPortFree+0x42>
 80113f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	60fb      	str	r3, [r7, #12]
 8011404:	e7fe      	b.n	8011404 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d009      	beq.n	8011422 <vPortFree+0x5e>
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	60bb      	str	r3, [r7, #8]
 8011420:	e7fe      	b.n	8011420 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	4b11      	ldr	r3, [pc, #68]	; (801146c <vPortFree+0xa8>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4013      	ands	r3, r2
 801142c:	2b00      	cmp	r3, #0
 801142e:	d019      	beq.n	8011464 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d115      	bne.n	8011464 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	4b0b      	ldr	r3, [pc, #44]	; (801146c <vPortFree+0xa8>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	43db      	mvns	r3, r3
 8011442:	401a      	ands	r2, r3
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011448:	f7fe fed8 	bl	80101fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	685a      	ldr	r2, [r3, #4]
 8011450:	4b07      	ldr	r3, [pc, #28]	; (8011470 <vPortFree+0xac>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4413      	add	r3, r2
 8011456:	4a06      	ldr	r2, [pc, #24]	; (8011470 <vPortFree+0xac>)
 8011458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801145a:	6938      	ldr	r0, [r7, #16]
 801145c:	f000 f86c 	bl	8011538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011460:	f7fe feda 	bl	8010218 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011464:	bf00      	nop
 8011466:	3718      	adds	r7, #24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	200051d0 	.word	0x200051d0
 8011470:	200051c8 	.word	0x200051c8

08011474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011474:	b480      	push	{r7}
 8011476:	b085      	sub	sp, #20
 8011478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801147a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801147e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011480:	4b27      	ldr	r3, [pc, #156]	; (8011520 <prvHeapInit+0xac>)
 8011482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	f003 0307 	and.w	r3, r3, #7
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00c      	beq.n	80114a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	3307      	adds	r3, #7
 8011492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f023 0307 	bic.w	r3, r3, #7
 801149a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	4a1f      	ldr	r2, [pc, #124]	; (8011520 <prvHeapInit+0xac>)
 80114a4:	4413      	add	r3, r2
 80114a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80114ac:	4a1d      	ldr	r2, [pc, #116]	; (8011524 <prvHeapInit+0xb0>)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80114b2:	4b1c      	ldr	r3, [pc, #112]	; (8011524 <prvHeapInit+0xb0>)
 80114b4:	2200      	movs	r2, #0
 80114b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68ba      	ldr	r2, [r7, #8]
 80114bc:	4413      	add	r3, r2
 80114be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114c0:	2208      	movs	r2, #8
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	1a9b      	subs	r3, r3, r2
 80114c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f023 0307 	bic.w	r3, r3, #7
 80114ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	4a15      	ldr	r2, [pc, #84]	; (8011528 <prvHeapInit+0xb4>)
 80114d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80114d6:	4b14      	ldr	r3, [pc, #80]	; (8011528 <prvHeapInit+0xb4>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2200      	movs	r2, #0
 80114dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80114de:	4b12      	ldr	r3, [pc, #72]	; (8011528 <prvHeapInit+0xb4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2200      	movs	r2, #0
 80114e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	1ad2      	subs	r2, r2, r3
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80114f4:	4b0c      	ldr	r3, [pc, #48]	; (8011528 <prvHeapInit+0xb4>)
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	4a0a      	ldr	r2, [pc, #40]	; (801152c <prvHeapInit+0xb8>)
 8011502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	4a09      	ldr	r2, [pc, #36]	; (8011530 <prvHeapInit+0xbc>)
 801150a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801150c:	4b09      	ldr	r3, [pc, #36]	; (8011534 <prvHeapInit+0xc0>)
 801150e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011512:	601a      	str	r2, [r3, #0]
}
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	200015bc 	.word	0x200015bc
 8011524:	200051bc 	.word	0x200051bc
 8011528:	200051c4 	.word	0x200051c4
 801152c:	200051cc 	.word	0x200051cc
 8011530:	200051c8 	.word	0x200051c8
 8011534:	200051d0 	.word	0x200051d0

08011538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011540:	4b28      	ldr	r3, [pc, #160]	; (80115e4 <prvInsertBlockIntoFreeList+0xac>)
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	e002      	b.n	801154c <prvInsertBlockIntoFreeList+0x14>
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	429a      	cmp	r2, r3
 8011554:	d8f7      	bhi.n	8011546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	4413      	add	r3, r2
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	429a      	cmp	r2, r3
 8011566:	d108      	bne.n	801157a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	441a      	add	r2, r3
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	441a      	add	r2, r3
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d118      	bne.n	80115c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	4b15      	ldr	r3, [pc, #84]	; (80115e8 <prvInsertBlockIntoFreeList+0xb0>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	429a      	cmp	r2, r3
 8011598:	d00d      	beq.n	80115b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	441a      	add	r2, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	601a      	str	r2, [r3, #0]
 80115b4:	e008      	b.n	80115c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80115b6:	4b0c      	ldr	r3, [pc, #48]	; (80115e8 <prvInsertBlockIntoFreeList+0xb0>)
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	601a      	str	r2, [r3, #0]
 80115be:	e003      	b.n	80115c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d002      	beq.n	80115d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115d6:	bf00      	nop
 80115d8:	3714      	adds	r7, #20
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	200051bc 	.word	0x200051bc
 80115e8:	200051c4 	.word	0x200051c4

080115ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80115f0:	2200      	movs	r2, #0
 80115f2:	4912      	ldr	r1, [pc, #72]	; (801163c <MX_USB_DEVICE_Init+0x50>)
 80115f4:	4812      	ldr	r0, [pc, #72]	; (8011640 <MX_USB_DEVICE_Init+0x54>)
 80115f6:	f7fc f851 	bl	800d69c <USBD_Init>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d001      	beq.n	8011604 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011600:	f7f1 fea0 	bl	8003344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011604:	490f      	ldr	r1, [pc, #60]	; (8011644 <MX_USB_DEVICE_Init+0x58>)
 8011606:	480e      	ldr	r0, [pc, #56]	; (8011640 <MX_USB_DEVICE_Init+0x54>)
 8011608:	f7fc f873 	bl	800d6f2 <USBD_RegisterClass>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d001      	beq.n	8011616 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011612:	f7f1 fe97 	bl	8003344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011616:	490c      	ldr	r1, [pc, #48]	; (8011648 <MX_USB_DEVICE_Init+0x5c>)
 8011618:	4809      	ldr	r0, [pc, #36]	; (8011640 <MX_USB_DEVICE_Init+0x54>)
 801161a:	f7fb ffa1 	bl	800d560 <USBD_CDC_RegisterInterface>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d001      	beq.n	8011628 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011624:	f7f1 fe8e 	bl	8003344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011628:	4805      	ldr	r0, [pc, #20]	; (8011640 <MX_USB_DEVICE_Init+0x54>)
 801162a:	f7fc f87c 	bl	800d726 <USBD_Start>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011634:	f7f1 fe86 	bl	8003344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011638:	bf00      	nop
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20000de4 	.word	0x20000de4
 8011640:	20005ea4 	.word	0x20005ea4
 8011644:	20000ccc 	.word	0x20000ccc
 8011648:	20000dd4 	.word	0x20000dd4

0801164c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011650:	2200      	movs	r2, #0
 8011652:	4905      	ldr	r1, [pc, #20]	; (8011668 <CDC_Init_FS+0x1c>)
 8011654:	4805      	ldr	r0, [pc, #20]	; (801166c <CDC_Init_FS+0x20>)
 8011656:	f7fb ff9a 	bl	800d58e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801165a:	4905      	ldr	r1, [pc, #20]	; (8011670 <CDC_Init_FS+0x24>)
 801165c:	4803      	ldr	r0, [pc, #12]	; (801166c <CDC_Init_FS+0x20>)
 801165e:	f7fb ffb0 	bl	800d5c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011662:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011664:	4618      	mov	r0, r3
 8011666:	bd80      	pop	{r7, pc}
 8011668:	20006340 	.word	0x20006340
 801166c:	20005ea4 	.word	0x20005ea4
 8011670:	20006140 	.word	0x20006140

08011674 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011674:	b480      	push	{r7}
 8011676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011678:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801167a:	4618      	mov	r0, r3
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	4603      	mov	r3, r0
 801168c:	6039      	str	r1, [r7, #0]
 801168e:	71fb      	strb	r3, [r7, #7]
 8011690:	4613      	mov	r3, r2
 8011692:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011694:	79fb      	ldrb	r3, [r7, #7]
 8011696:	2b23      	cmp	r3, #35	; 0x23
 8011698:	f200 808c 	bhi.w	80117b4 <CDC_Control_FS+0x130>
 801169c:	a201      	add	r2, pc, #4	; (adr r2, 80116a4 <CDC_Control_FS+0x20>)
 801169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a2:	bf00      	nop
 80116a4:	080117b5 	.word	0x080117b5
 80116a8:	080117b5 	.word	0x080117b5
 80116ac:	080117b5 	.word	0x080117b5
 80116b0:	080117b5 	.word	0x080117b5
 80116b4:	080117b5 	.word	0x080117b5
 80116b8:	080117b5 	.word	0x080117b5
 80116bc:	080117b5 	.word	0x080117b5
 80116c0:	080117b5 	.word	0x080117b5
 80116c4:	080117b5 	.word	0x080117b5
 80116c8:	080117b5 	.word	0x080117b5
 80116cc:	080117b5 	.word	0x080117b5
 80116d0:	080117b5 	.word	0x080117b5
 80116d4:	080117b5 	.word	0x080117b5
 80116d8:	080117b5 	.word	0x080117b5
 80116dc:	080117b5 	.word	0x080117b5
 80116e0:	080117b5 	.word	0x080117b5
 80116e4:	080117b5 	.word	0x080117b5
 80116e8:	080117b5 	.word	0x080117b5
 80116ec:	080117b5 	.word	0x080117b5
 80116f0:	080117b5 	.word	0x080117b5
 80116f4:	080117b5 	.word	0x080117b5
 80116f8:	080117b5 	.word	0x080117b5
 80116fc:	080117b5 	.word	0x080117b5
 8011700:	080117b5 	.word	0x080117b5
 8011704:	080117b5 	.word	0x080117b5
 8011708:	080117b5 	.word	0x080117b5
 801170c:	080117b5 	.word	0x080117b5
 8011710:	080117b5 	.word	0x080117b5
 8011714:	080117b5 	.word	0x080117b5
 8011718:	080117b5 	.word	0x080117b5
 801171c:	080117b5 	.word	0x080117b5
 8011720:	080117b5 	.word	0x080117b5
 8011724:	08011735 	.word	0x08011735
 8011728:	0801176f 	.word	0x0801176f
 801172c:	080117b5 	.word	0x080117b5
 8011730:	080117b5 	.word	0x080117b5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	4b22      	ldr	r3, [pc, #136]	; (80117c4 <CDC_Control_FS+0x140>)
 801173a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	785a      	ldrb	r2, [r3, #1]
 8011740:	4b20      	ldr	r3, [pc, #128]	; (80117c4 <CDC_Control_FS+0x140>)
 8011742:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	789a      	ldrb	r2, [r3, #2]
 8011748:	4b1e      	ldr	r3, [pc, #120]	; (80117c4 <CDC_Control_FS+0x140>)
 801174a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	78da      	ldrb	r2, [r3, #3]
 8011750:	4b1c      	ldr	r3, [pc, #112]	; (80117c4 <CDC_Control_FS+0x140>)
 8011752:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	791a      	ldrb	r2, [r3, #4]
 8011758:	4b1a      	ldr	r3, [pc, #104]	; (80117c4 <CDC_Control_FS+0x140>)
 801175a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	795a      	ldrb	r2, [r3, #5]
 8011760:	4b18      	ldr	r3, [pc, #96]	; (80117c4 <CDC_Control_FS+0x140>)
 8011762:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	799a      	ldrb	r2, [r3, #6]
 8011768:	4b16      	ldr	r3, [pc, #88]	; (80117c4 <CDC_Control_FS+0x140>)
 801176a:	719a      	strb	r2, [r3, #6]
    	break;
 801176c:	e023      	b.n	80117b6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801176e:	4b15      	ldr	r3, [pc, #84]	; (80117c4 <CDC_Control_FS+0x140>)
 8011770:	781a      	ldrb	r2, [r3, #0]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	3301      	adds	r3, #1
 801177a:	4a12      	ldr	r2, [pc, #72]	; (80117c4 <CDC_Control_FS+0x140>)
 801177c:	7852      	ldrb	r2, [r2, #1]
 801177e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	3302      	adds	r3, #2
 8011784:	4a0f      	ldr	r2, [pc, #60]	; (80117c4 <CDC_Control_FS+0x140>)
 8011786:	7892      	ldrb	r2, [r2, #2]
 8011788:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	3303      	adds	r3, #3
 801178e:	4a0d      	ldr	r2, [pc, #52]	; (80117c4 <CDC_Control_FS+0x140>)
 8011790:	78d2      	ldrb	r2, [r2, #3]
 8011792:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	3304      	adds	r3, #4
 8011798:	4a0a      	ldr	r2, [pc, #40]	; (80117c4 <CDC_Control_FS+0x140>)
 801179a:	7912      	ldrb	r2, [r2, #4]
 801179c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	3305      	adds	r3, #5
 80117a2:	4a08      	ldr	r2, [pc, #32]	; (80117c4 <CDC_Control_FS+0x140>)
 80117a4:	7952      	ldrb	r2, [r2, #5]
 80117a6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	3306      	adds	r3, #6
 80117ac:	4a05      	ldr	r2, [pc, #20]	; (80117c4 <CDC_Control_FS+0x140>)
 80117ae:	7992      	ldrb	r2, [r2, #6]
 80117b0:	701a      	strb	r2, [r3, #0]
    break;
 80117b2:	e000      	b.n	80117b6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80117b4:	bf00      	nop
  }

  return (USBD_OK);
 80117b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	20006540 	.word	0x20006540

080117c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	461a      	mov	r2, r3
 80117da:	6879      	ldr	r1, [r7, #4]
 80117dc:	4807      	ldr	r0, [pc, #28]	; (80117fc <CDC_Receive_FS+0x34>)
 80117de:	f7f1 fe28 	bl	8003432 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80117e2:	6879      	ldr	r1, [r7, #4]
 80117e4:	4806      	ldr	r0, [pc, #24]	; (8011800 <CDC_Receive_FS+0x38>)
 80117e6:	f7fb feec 	bl	800d5c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80117ea:	4805      	ldr	r0, [pc, #20]	; (8011800 <CDC_Receive_FS+0x38>)
 80117ec:	f7fb ff2c 	bl	800d648 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80117f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	20000054 	.word	0x20000054
 8011800:	20005ea4 	.word	0x20005ea4

08011804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	460b      	mov	r3, r1
 801180e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011814:	4b0d      	ldr	r3, [pc, #52]	; (801184c <CDC_Transmit_FS+0x48>)
 8011816:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801181a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011826:	2301      	movs	r3, #1
 8011828:	e00b      	b.n	8011842 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801182a:	887b      	ldrh	r3, [r7, #2]
 801182c:	461a      	mov	r2, r3
 801182e:	6879      	ldr	r1, [r7, #4]
 8011830:	4806      	ldr	r0, [pc, #24]	; (801184c <CDC_Transmit_FS+0x48>)
 8011832:	f7fb feac 	bl	800d58e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011836:	4805      	ldr	r0, [pc, #20]	; (801184c <CDC_Transmit_FS+0x48>)
 8011838:	f7fb fed7 	bl	800d5ea <USBD_CDC_TransmitPacket>
 801183c:	4603      	mov	r3, r0
 801183e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011840:	7bfb      	ldrb	r3, [r7, #15]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	20005ea4 	.word	0x20005ea4

08011850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	4603      	mov	r3, r0
 8011858:	6039      	str	r1, [r7, #0]
 801185a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2212      	movs	r2, #18
 8011860:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011862:	4b03      	ldr	r3, [pc, #12]	; (8011870 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	20000e00 	.word	0x20000e00

08011874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	4603      	mov	r3, r0
 801187c:	6039      	str	r1, [r7, #0]
 801187e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	2204      	movs	r2, #4
 8011884:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011886:	4b03      	ldr	r3, [pc, #12]	; (8011894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011888:	4618      	mov	r0, r3
 801188a:	370c      	adds	r7, #12
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr
 8011894:	20000e14 	.word	0x20000e14

08011898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	4603      	mov	r3, r0
 80118a0:	6039      	str	r1, [r7, #0]
 80118a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80118a4:	79fb      	ldrb	r3, [r7, #7]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d105      	bne.n	80118b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	4907      	ldr	r1, [pc, #28]	; (80118cc <USBD_FS_ProductStrDescriptor+0x34>)
 80118ae:	4808      	ldr	r0, [pc, #32]	; (80118d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80118b0:	f7fc fe70 	bl	800e594 <USBD_GetString>
 80118b4:	e004      	b.n	80118c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80118b6:	683a      	ldr	r2, [r7, #0]
 80118b8:	4904      	ldr	r1, [pc, #16]	; (80118cc <USBD_FS_ProductStrDescriptor+0x34>)
 80118ba:	4805      	ldr	r0, [pc, #20]	; (80118d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80118bc:	f7fc fe6a 	bl	800e594 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118c0:	4b02      	ldr	r3, [pc, #8]	; (80118cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20006548 	.word	0x20006548
 80118d0:	08018240 	.word	0x08018240

080118d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	6039      	str	r1, [r7, #0]
 80118de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80118e0:	683a      	ldr	r2, [r7, #0]
 80118e2:	4904      	ldr	r1, [pc, #16]	; (80118f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80118e4:	4804      	ldr	r0, [pc, #16]	; (80118f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80118e6:	f7fc fe55 	bl	800e594 <USBD_GetString>
  return USBD_StrDesc;
 80118ea:	4b02      	ldr	r3, [pc, #8]	; (80118f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	20006548 	.word	0x20006548
 80118f8:	08018258 	.word	0x08018258

080118fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	6039      	str	r1, [r7, #0]
 8011906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	221a      	movs	r2, #26
 801190c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801190e:	f000 f843 	bl	8011998 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011912:	4b02      	ldr	r3, [pc, #8]	; (801191c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011914:	4618      	mov	r0, r3
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	20000e18 	.word	0x20000e18

08011920 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	4603      	mov	r3, r0
 8011928:	6039      	str	r1, [r7, #0]
 801192a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801192c:	79fb      	ldrb	r3, [r7, #7]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d105      	bne.n	801193e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011932:	683a      	ldr	r2, [r7, #0]
 8011934:	4907      	ldr	r1, [pc, #28]	; (8011954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011936:	4808      	ldr	r0, [pc, #32]	; (8011958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011938:	f7fc fe2c 	bl	800e594 <USBD_GetString>
 801193c:	e004      	b.n	8011948 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	4904      	ldr	r1, [pc, #16]	; (8011954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011942:	4805      	ldr	r0, [pc, #20]	; (8011958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011944:	f7fc fe26 	bl	800e594 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011948:	4b02      	ldr	r3, [pc, #8]	; (8011954 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801194a:	4618      	mov	r0, r3
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	20006548 	.word	0x20006548
 8011958:	0801826c 	.word	0x0801826c

0801195c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	4603      	mov	r3, r0
 8011964:	6039      	str	r1, [r7, #0]
 8011966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4907      	ldr	r1, [pc, #28]	; (8011990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011972:	4808      	ldr	r0, [pc, #32]	; (8011994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011974:	f7fc fe0e 	bl	800e594 <USBD_GetString>
 8011978:	e004      	b.n	8011984 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	4904      	ldr	r1, [pc, #16]	; (8011990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801197e:	4805      	ldr	r0, [pc, #20]	; (8011994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011980:	f7fc fe08 	bl	800e594 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011984:	4b02      	ldr	r3, [pc, #8]	; (8011990 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011986:	4618      	mov	r0, r3
 8011988:	3708      	adds	r7, #8
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	20006548 	.word	0x20006548
 8011994:	08018278 	.word	0x08018278

08011998 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801199e:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <Get_SerialNum+0x44>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80119a4:	4b0e      	ldr	r3, [pc, #56]	; (80119e0 <Get_SerialNum+0x48>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80119aa:	4b0e      	ldr	r3, [pc, #56]	; (80119e4 <Get_SerialNum+0x4c>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	4413      	add	r3, r2
 80119b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d009      	beq.n	80119d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80119be:	2208      	movs	r2, #8
 80119c0:	4909      	ldr	r1, [pc, #36]	; (80119e8 <Get_SerialNum+0x50>)
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f000 f814 	bl	80119f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80119c8:	2204      	movs	r2, #4
 80119ca:	4908      	ldr	r1, [pc, #32]	; (80119ec <Get_SerialNum+0x54>)
 80119cc:	68b8      	ldr	r0, [r7, #8]
 80119ce:	f000 f80f 	bl	80119f0 <IntToUnicode>
  }
}
 80119d2:	bf00      	nop
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	1fff7a10 	.word	0x1fff7a10
 80119e0:	1fff7a14 	.word	0x1fff7a14
 80119e4:	1fff7a18 	.word	0x1fff7a18
 80119e8:	20000e1a 	.word	0x20000e1a
 80119ec:	20000e2a 	.word	0x20000e2a

080119f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b087      	sub	sp, #28
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	4613      	mov	r3, r2
 80119fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80119fe:	2300      	movs	r3, #0
 8011a00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011a02:	2300      	movs	r3, #0
 8011a04:	75fb      	strb	r3, [r7, #23]
 8011a06:	e027      	b.n	8011a58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	0f1b      	lsrs	r3, r3, #28
 8011a0c:	2b09      	cmp	r3, #9
 8011a0e:	d80b      	bhi.n	8011a28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	0f1b      	lsrs	r3, r3, #28
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	440b      	add	r3, r1
 8011a20:	3230      	adds	r2, #48	; 0x30
 8011a22:	b2d2      	uxtb	r2, r2
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	e00a      	b.n	8011a3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	0f1b      	lsrs	r3, r3, #28
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	7dfb      	ldrb	r3, [r7, #23]
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4619      	mov	r1, r3
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	440b      	add	r3, r1
 8011a38:	3237      	adds	r2, #55	; 0x37
 8011a3a:	b2d2      	uxtb	r2, r2
 8011a3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	011b      	lsls	r3, r3, #4
 8011a42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011a44:	7dfb      	ldrb	r3, [r7, #23]
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	3301      	adds	r3, #1
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	2200      	movs	r2, #0
 8011a50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	3301      	adds	r3, #1
 8011a56:	75fb      	strb	r3, [r7, #23]
 8011a58:	7dfa      	ldrb	r2, [r7, #23]
 8011a5a:	79fb      	ldrb	r3, [r7, #7]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d3d3      	bcc.n	8011a08 <IntToUnicode+0x18>
  }
}
 8011a60:	bf00      	nop
 8011a62:	371c      	adds	r7, #28
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b08a      	sub	sp, #40	; 0x28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a74:	f107 0314 	add.w	r3, r7, #20
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]
 8011a7c:	605a      	str	r2, [r3, #4]
 8011a7e:	609a      	str	r2, [r3, #8]
 8011a80:	60da      	str	r2, [r3, #12]
 8011a82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011a8c:	d13a      	bne.n	8011b04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a8e:	2300      	movs	r3, #0
 8011a90:	613b      	str	r3, [r7, #16]
 8011a92:	4b1e      	ldr	r3, [pc, #120]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a96:	4a1d      	ldr	r2, [pc, #116]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011a98:	f043 0301 	orr.w	r3, r3, #1
 8011a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8011a9e:	4b1b      	ldr	r3, [pc, #108]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aa2:	f003 0301 	and.w	r3, r3, #1
 8011aa6:	613b      	str	r3, [r7, #16]
 8011aa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011aaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ab0:	2302      	movs	r3, #2
 8011ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011abc:	230a      	movs	r3, #10
 8011abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ac0:	f107 0314 	add.w	r3, r7, #20
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4812      	ldr	r0, [pc, #72]	; (8011b10 <HAL_PCD_MspInit+0xa4>)
 8011ac8:	f7f6 fdf4 	bl	80086b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011acc:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad0:	4a0e      	ldr	r2, [pc, #56]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ad6:	6353      	str	r3, [r2, #52]	; 0x34
 8011ad8:	2300      	movs	r3, #0
 8011ada:	60fb      	str	r3, [r7, #12]
 8011adc:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ae0:	4a0a      	ldr	r2, [pc, #40]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8011ae8:	4b08      	ldr	r3, [pc, #32]	; (8011b0c <HAL_PCD_MspInit+0xa0>)
 8011aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011af0:	60fb      	str	r3, [r7, #12]
 8011af2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011af4:	2200      	movs	r2, #0
 8011af6:	2105      	movs	r1, #5
 8011af8:	2043      	movs	r0, #67	; 0x43
 8011afa:	f7f6 fa13 	bl	8007f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011afe:	2043      	movs	r0, #67	; 0x43
 8011b00:	f7f6 fa2c 	bl	8007f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011b04:	bf00      	nop
 8011b06:	3728      	adds	r7, #40	; 0x28
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	40023800 	.word	0x40023800
 8011b10:	40020000 	.word	0x40020000

08011b14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011b28:	4619      	mov	r1, r3
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	f7fb fe44 	bl	800d7b8 <USBD_LL_SetupStage>
}
 8011b30:	bf00      	nop
 8011b32:	3708      	adds	r7, #8
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	460b      	mov	r3, r1
 8011b42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011b4a:	78fa      	ldrb	r2, [r7, #3]
 8011b4c:	6879      	ldr	r1, [r7, #4]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	440b      	add	r3, r1
 8011b58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	78fb      	ldrb	r3, [r7, #3]
 8011b60:	4619      	mov	r1, r3
 8011b62:	f7fb fe74 	bl	800d84e <USBD_LL_DataOutStage>
}
 8011b66:	bf00      	nop
 8011b68:	3708      	adds	r7, #8
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b082      	sub	sp, #8
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	460b      	mov	r3, r1
 8011b78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	6879      	ldr	r1, [r7, #4]
 8011b84:	4613      	mov	r3, r2
 8011b86:	00db      	lsls	r3, r3, #3
 8011b88:	1a9b      	subs	r3, r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3348      	adds	r3, #72	; 0x48
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	78fb      	ldrb	r3, [r7, #3]
 8011b94:	4619      	mov	r1, r3
 8011b96:	f7fb fecb 	bl	800d930 <USBD_LL_DataInStage>
}
 8011b9a:	bf00      	nop
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fb ffd9 	bl	800db68 <USBD_LL_SOF>
}
 8011bb6:	bf00      	nop
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d102      	bne.n	8011bd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	73fb      	strb	r3, [r7, #15]
 8011bd6:	e008      	b.n	8011bea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	2b02      	cmp	r3, #2
 8011bde:	d102      	bne.n	8011be6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011be0:	2301      	movs	r3, #1
 8011be2:	73fb      	strb	r3, [r7, #15]
 8011be4:	e001      	b.n	8011bea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011be6:	f7f1 fbad 	bl	8003344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011bf0:	7bfa      	ldrb	r2, [r7, #15]
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fb ff81 	bl	800dafc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fb ff3a 	bl	800da7a <USBD_LL_Reset>
}
 8011c06:	bf00      	nop
 8011c08:	3710      	adds	r7, #16
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
	...

08011c10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fb ff7c 	bl	800db1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	6812      	ldr	r2, [r2, #0]
 8011c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d005      	beq.n	8011c50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011c44:	4b04      	ldr	r3, [pc, #16]	; (8011c58 <HAL_PCD_SuspendCallback+0x48>)
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	4a03      	ldr	r2, [pc, #12]	; (8011c58 <HAL_PCD_SuspendCallback+0x48>)
 8011c4a:	f043 0306 	orr.w	r3, r3, #6
 8011c4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011c50:	bf00      	nop
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	e000ed00 	.word	0xe000ed00

08011c5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fb ff6b 	bl	800db46 <USBD_LL_Resume>
}
 8011c70:	bf00      	nop
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c8a:	78fa      	ldrb	r2, [r7, #3]
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fb ff91 	bl	800dbb6 <USBD_LL_IsoOUTIncomplete>
}
 8011c94:	bf00      	nop
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011cae:	78fa      	ldrb	r2, [r7, #3]
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fb ff72 	bl	800db9c <USBD_LL_IsoINIncomplete>
}
 8011cb8:	bf00      	nop
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fb ff7e 	bl	800dbd0 <USBD_LL_DevConnected>
}
 8011cd4:	bf00      	nop
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb ff7b 	bl	800dbe6 <USBD_LL_DevDisconnected>
}
 8011cf0:	bf00      	nop
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d13c      	bne.n	8011d82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011d08:	4a20      	ldr	r2, [pc, #128]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	4a1e      	ldr	r2, [pc, #120]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011d18:	4b1c      	ldr	r3, [pc, #112]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011d20:	4b1a      	ldr	r3, [pc, #104]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d22:	2204      	movs	r2, #4
 8011d24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011d26:	4b19      	ldr	r3, [pc, #100]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d28:	2202      	movs	r2, #2
 8011d2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011d2c:	4b17      	ldr	r3, [pc, #92]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011d32:	4b16      	ldr	r3, [pc, #88]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d34:	2202      	movs	r2, #2
 8011d36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011d38:	4b14      	ldr	r3, [pc, #80]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011d3e:	4b13      	ldr	r3, [pc, #76]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011d44:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d46:	2200      	movs	r2, #0
 8011d48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011d4a:	4b10      	ldr	r3, [pc, #64]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011d50:	4b0e      	ldr	r3, [pc, #56]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d52:	2200      	movs	r2, #0
 8011d54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011d56:	480d      	ldr	r0, [pc, #52]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d58:	f7f6 feb6 	bl	8008ac8 <HAL_PCD_Init>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011d62:	f7f1 faef 	bl	8003344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011d66:	2180      	movs	r1, #128	; 0x80
 8011d68:	4808      	ldr	r0, [pc, #32]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d6a:	f7f8 f81a 	bl	8009da2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011d6e:	2240      	movs	r2, #64	; 0x40
 8011d70:	2100      	movs	r1, #0
 8011d72:	4806      	ldr	r0, [pc, #24]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d74:	f7f7 ffce 	bl	8009d14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011d78:	2280      	movs	r2, #128	; 0x80
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	4803      	ldr	r0, [pc, #12]	; (8011d8c <USBD_LL_Init+0x94>)
 8011d7e:	f7f7 ffc9 	bl	8009d14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	20006748 	.word	0x20006748

08011d90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f6 ffab 	bl	8008d02 <HAL_PCD_Start>
 8011dac:	4603      	mov	r3, r0
 8011dae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8011db0:	7bfb      	ldrb	r3, [r7, #15]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 f92e 	bl	8012014 <USBD_Get_USB_Status>
 8011db8:	4603      	mov	r3, r0
 8011dba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b084      	sub	sp, #16
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	4608      	mov	r0, r1
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	70fb      	strb	r3, [r7, #3]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	70bb      	strb	r3, [r7, #2]
 8011ddc:	4613      	mov	r3, r2
 8011dde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011dee:	78bb      	ldrb	r3, [r7, #2]
 8011df0:	883a      	ldrh	r2, [r7, #0]
 8011df2:	78f9      	ldrb	r1, [r7, #3]
 8011df4:	f7f7 fb80 	bl	80094f8 <HAL_PCD_EP_Open>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 f908 	bl	8012014 <USBD_Get_USB_Status>
 8011e04:	4603      	mov	r3, r0
 8011e06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b084      	sub	sp, #16
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011e2c:	78fa      	ldrb	r2, [r7, #3]
 8011e2e:	4611      	mov	r1, r2
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7f7 fbc9 	bl	80095c8 <HAL_PCD_EP_Close>
 8011e36:	4603      	mov	r3, r0
 8011e38:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8011e3a:	7bfb      	ldrb	r3, [r7, #15]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f000 f8e9 	bl	8012014 <USBD_Get_USB_Status>
 8011e42:	4603      	mov	r3, r0
 8011e44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8011e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011e6a:	78fa      	ldrb	r2, [r7, #3]
 8011e6c:	4611      	mov	r1, r2
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7f7 fca1 	bl	80097b6 <HAL_PCD_EP_SetStall>
 8011e74:	4603      	mov	r3, r0
 8011e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e78:	7bfb      	ldrb	r3, [r7, #15]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 f8ca 	bl	8012014 <USBD_Get_USB_Status>
 8011e80:	4603      	mov	r3, r0
 8011e82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b084      	sub	sp, #16
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	460b      	mov	r3, r1
 8011e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011ea8:	78fa      	ldrb	r2, [r7, #3]
 8011eaa:	4611      	mov	r1, r2
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7f7 fce6 	bl	800987e <HAL_PCD_EP_ClrStall>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8011eb6:	7bfb      	ldrb	r3, [r7, #15]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f000 f8ab 	bl	8012014 <USBD_Get_USB_Status>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3710      	adds	r7, #16
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011ede:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	da0b      	bge.n	8011f00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8011ee8:	78fb      	ldrb	r3, [r7, #3]
 8011eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011eee:	68f9      	ldr	r1, [r7, #12]
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	440b      	add	r3, r1
 8011efa:	333e      	adds	r3, #62	; 0x3e
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	e00b      	b.n	8011f18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8011f00:	78fb      	ldrb	r3, [r7, #3]
 8011f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f06:	68f9      	ldr	r1, [r7, #12]
 8011f08:	4613      	mov	r3, r2
 8011f0a:	00db      	lsls	r3, r3, #3
 8011f0c:	1a9b      	subs	r3, r3, r2
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	440b      	add	r3, r1
 8011f12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3714      	adds	r7, #20
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	460b      	mov	r3, r1
 8011f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011f3e:	78fa      	ldrb	r2, [r7, #3]
 8011f40:	4611      	mov	r1, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f7 fab3 	bl	80094ae <HAL_PCD_SetAddress>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f4c:	7bfb      	ldrb	r3, [r7, #15]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 f860 	bl	8012014 <USBD_Get_USB_Status>
 8011f54:	4603      	mov	r3, r0
 8011f56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b086      	sub	sp, #24
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	60f8      	str	r0, [r7, #12]
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	460b      	mov	r3, r1
 8011f70:	72fb      	strb	r3, [r7, #11]
 8011f72:	4613      	mov	r3, r2
 8011f74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f76:	2300      	movs	r3, #0
 8011f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011f84:	893b      	ldrh	r3, [r7, #8]
 8011f86:	7af9      	ldrb	r1, [r7, #11]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	f7f7 fbca 	bl	8009722 <HAL_PCD_EP_Transmit>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f000 f83d 	bl	8012014 <USBD_Get_USB_Status>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8011f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3718      	adds	r7, #24
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b086      	sub	sp, #24
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	607a      	str	r2, [r7, #4]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	72fb      	strb	r3, [r7, #11]
 8011fb8:	4613      	mov	r3, r2
 8011fba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011fca:	893b      	ldrh	r3, [r7, #8]
 8011fcc:	7af9      	ldrb	r1, [r7, #11]
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	f7f7 fb44 	bl	800965c <HAL_PCD_EP_Receive>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 f81a 	bl	8012014 <USBD_Get_USB_Status>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8011fe4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b082      	sub	sp, #8
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012000:	78fa      	ldrb	r2, [r7, #3]
 8012002:	4611      	mov	r1, r2
 8012004:	4618      	mov	r0, r3
 8012006:	f7f7 fb74 	bl	80096f2 <HAL_PCD_EP_GetRxCount>
 801200a:	4603      	mov	r3, r0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012014:	b480      	push	{r7}
 8012016:	b085      	sub	sp, #20
 8012018:	af00      	add	r7, sp, #0
 801201a:	4603      	mov	r3, r0
 801201c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801201e:	2300      	movs	r3, #0
 8012020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012022:	79fb      	ldrb	r3, [r7, #7]
 8012024:	2b03      	cmp	r3, #3
 8012026:	d817      	bhi.n	8012058 <USBD_Get_USB_Status+0x44>
 8012028:	a201      	add	r2, pc, #4	; (adr r2, 8012030 <USBD_Get_USB_Status+0x1c>)
 801202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801202e:	bf00      	nop
 8012030:	08012041 	.word	0x08012041
 8012034:	08012047 	.word	0x08012047
 8012038:	0801204d 	.word	0x0801204d
 801203c:	08012053 	.word	0x08012053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012040:	2300      	movs	r3, #0
 8012042:	73fb      	strb	r3, [r7, #15]
    break;
 8012044:	e00b      	b.n	801205e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012046:	2302      	movs	r3, #2
 8012048:	73fb      	strb	r3, [r7, #15]
    break;
 801204a:	e008      	b.n	801205e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801204c:	2301      	movs	r3, #1
 801204e:	73fb      	strb	r3, [r7, #15]
    break;
 8012050:	e005      	b.n	801205e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012052:	2302      	movs	r3, #2
 8012054:	73fb      	strb	r3, [r7, #15]
    break;
 8012056:	e002      	b.n	801205e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012058:	2302      	movs	r3, #2
 801205a:	73fb      	strb	r3, [r7, #15]
    break;
 801205c:	bf00      	nop
  }
  return usb_status;
 801205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3714      	adds	r7, #20
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <__errno>:
 801206c:	4b01      	ldr	r3, [pc, #4]	; (8012074 <__errno+0x8>)
 801206e:	6818      	ldr	r0, [r3, #0]
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	20000e34 	.word	0x20000e34

08012078 <__libc_init_array>:
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	4e0d      	ldr	r6, [pc, #52]	; (80120b0 <__libc_init_array+0x38>)
 801207c:	4c0d      	ldr	r4, [pc, #52]	; (80120b4 <__libc_init_array+0x3c>)
 801207e:	1ba4      	subs	r4, r4, r6
 8012080:	10a4      	asrs	r4, r4, #2
 8012082:	2500      	movs	r5, #0
 8012084:	42a5      	cmp	r5, r4
 8012086:	d109      	bne.n	801209c <__libc_init_array+0x24>
 8012088:	4e0b      	ldr	r6, [pc, #44]	; (80120b8 <__libc_init_array+0x40>)
 801208a:	4c0c      	ldr	r4, [pc, #48]	; (80120bc <__libc_init_array+0x44>)
 801208c:	f005 fe82 	bl	8017d94 <_init>
 8012090:	1ba4      	subs	r4, r4, r6
 8012092:	10a4      	asrs	r4, r4, #2
 8012094:	2500      	movs	r5, #0
 8012096:	42a5      	cmp	r5, r4
 8012098:	d105      	bne.n	80120a6 <__libc_init_array+0x2e>
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120a0:	4798      	blx	r3
 80120a2:	3501      	adds	r5, #1
 80120a4:	e7ee      	b.n	8012084 <__libc_init_array+0xc>
 80120a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120aa:	4798      	blx	r3
 80120ac:	3501      	adds	r5, #1
 80120ae:	e7f2      	b.n	8012096 <__libc_init_array+0x1e>
 80120b0:	08018810 	.word	0x08018810
 80120b4:	08018810 	.word	0x08018810
 80120b8:	08018810 	.word	0x08018810
 80120bc:	08018814 	.word	0x08018814

080120c0 <malloc>:
 80120c0:	4b02      	ldr	r3, [pc, #8]	; (80120cc <malloc+0xc>)
 80120c2:	4601      	mov	r1, r0
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	f000 b885 	b.w	80121d4 <_malloc_r>
 80120ca:	bf00      	nop
 80120cc:	20000e34 	.word	0x20000e34

080120d0 <free>:
 80120d0:	4b02      	ldr	r3, [pc, #8]	; (80120dc <free+0xc>)
 80120d2:	4601      	mov	r1, r0
 80120d4:	6818      	ldr	r0, [r3, #0]
 80120d6:	f000 b82f 	b.w	8012138 <_free_r>
 80120da:	bf00      	nop
 80120dc:	20000e34 	.word	0x20000e34

080120e0 <memcpy>:
 80120e0:	b510      	push	{r4, lr}
 80120e2:	1e43      	subs	r3, r0, #1
 80120e4:	440a      	add	r2, r1
 80120e6:	4291      	cmp	r1, r2
 80120e8:	d100      	bne.n	80120ec <memcpy+0xc>
 80120ea:	bd10      	pop	{r4, pc}
 80120ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120f4:	e7f7      	b.n	80120e6 <memcpy+0x6>

080120f6 <memmove>:
 80120f6:	4288      	cmp	r0, r1
 80120f8:	b510      	push	{r4, lr}
 80120fa:	eb01 0302 	add.w	r3, r1, r2
 80120fe:	d807      	bhi.n	8012110 <memmove+0x1a>
 8012100:	1e42      	subs	r2, r0, #1
 8012102:	4299      	cmp	r1, r3
 8012104:	d00a      	beq.n	801211c <memmove+0x26>
 8012106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801210a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801210e:	e7f8      	b.n	8012102 <memmove+0xc>
 8012110:	4283      	cmp	r3, r0
 8012112:	d9f5      	bls.n	8012100 <memmove+0xa>
 8012114:	1881      	adds	r1, r0, r2
 8012116:	1ad2      	subs	r2, r2, r3
 8012118:	42d3      	cmn	r3, r2
 801211a:	d100      	bne.n	801211e <memmove+0x28>
 801211c:	bd10      	pop	{r4, pc}
 801211e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012122:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012126:	e7f7      	b.n	8012118 <memmove+0x22>

08012128 <memset>:
 8012128:	4402      	add	r2, r0
 801212a:	4603      	mov	r3, r0
 801212c:	4293      	cmp	r3, r2
 801212e:	d100      	bne.n	8012132 <memset+0xa>
 8012130:	4770      	bx	lr
 8012132:	f803 1b01 	strb.w	r1, [r3], #1
 8012136:	e7f9      	b.n	801212c <memset+0x4>

08012138 <_free_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	4605      	mov	r5, r0
 801213c:	2900      	cmp	r1, #0
 801213e:	d045      	beq.n	80121cc <_free_r+0x94>
 8012140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012144:	1f0c      	subs	r4, r1, #4
 8012146:	2b00      	cmp	r3, #0
 8012148:	bfb8      	it	lt
 801214a:	18e4      	addlt	r4, r4, r3
 801214c:	f002 ffce 	bl	80150ec <__malloc_lock>
 8012150:	4a1f      	ldr	r2, [pc, #124]	; (80121d0 <_free_r+0x98>)
 8012152:	6813      	ldr	r3, [r2, #0]
 8012154:	4610      	mov	r0, r2
 8012156:	b933      	cbnz	r3, 8012166 <_free_r+0x2e>
 8012158:	6063      	str	r3, [r4, #4]
 801215a:	6014      	str	r4, [r2, #0]
 801215c:	4628      	mov	r0, r5
 801215e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012162:	f002 bfc4 	b.w	80150ee <__malloc_unlock>
 8012166:	42a3      	cmp	r3, r4
 8012168:	d90c      	bls.n	8012184 <_free_r+0x4c>
 801216a:	6821      	ldr	r1, [r4, #0]
 801216c:	1862      	adds	r2, r4, r1
 801216e:	4293      	cmp	r3, r2
 8012170:	bf04      	itt	eq
 8012172:	681a      	ldreq	r2, [r3, #0]
 8012174:	685b      	ldreq	r3, [r3, #4]
 8012176:	6063      	str	r3, [r4, #4]
 8012178:	bf04      	itt	eq
 801217a:	1852      	addeq	r2, r2, r1
 801217c:	6022      	streq	r2, [r4, #0]
 801217e:	6004      	str	r4, [r0, #0]
 8012180:	e7ec      	b.n	801215c <_free_r+0x24>
 8012182:	4613      	mov	r3, r2
 8012184:	685a      	ldr	r2, [r3, #4]
 8012186:	b10a      	cbz	r2, 801218c <_free_r+0x54>
 8012188:	42a2      	cmp	r2, r4
 801218a:	d9fa      	bls.n	8012182 <_free_r+0x4a>
 801218c:	6819      	ldr	r1, [r3, #0]
 801218e:	1858      	adds	r0, r3, r1
 8012190:	42a0      	cmp	r0, r4
 8012192:	d10b      	bne.n	80121ac <_free_r+0x74>
 8012194:	6820      	ldr	r0, [r4, #0]
 8012196:	4401      	add	r1, r0
 8012198:	1858      	adds	r0, r3, r1
 801219a:	4282      	cmp	r2, r0
 801219c:	6019      	str	r1, [r3, #0]
 801219e:	d1dd      	bne.n	801215c <_free_r+0x24>
 80121a0:	6810      	ldr	r0, [r2, #0]
 80121a2:	6852      	ldr	r2, [r2, #4]
 80121a4:	605a      	str	r2, [r3, #4]
 80121a6:	4401      	add	r1, r0
 80121a8:	6019      	str	r1, [r3, #0]
 80121aa:	e7d7      	b.n	801215c <_free_r+0x24>
 80121ac:	d902      	bls.n	80121b4 <_free_r+0x7c>
 80121ae:	230c      	movs	r3, #12
 80121b0:	602b      	str	r3, [r5, #0]
 80121b2:	e7d3      	b.n	801215c <_free_r+0x24>
 80121b4:	6820      	ldr	r0, [r4, #0]
 80121b6:	1821      	adds	r1, r4, r0
 80121b8:	428a      	cmp	r2, r1
 80121ba:	bf04      	itt	eq
 80121bc:	6811      	ldreq	r1, [r2, #0]
 80121be:	6852      	ldreq	r2, [r2, #4]
 80121c0:	6062      	str	r2, [r4, #4]
 80121c2:	bf04      	itt	eq
 80121c4:	1809      	addeq	r1, r1, r0
 80121c6:	6021      	streq	r1, [r4, #0]
 80121c8:	605c      	str	r4, [r3, #4]
 80121ca:	e7c7      	b.n	801215c <_free_r+0x24>
 80121cc:	bd38      	pop	{r3, r4, r5, pc}
 80121ce:	bf00      	nop
 80121d0:	200051d4 	.word	0x200051d4

080121d4 <_malloc_r>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	1ccd      	adds	r5, r1, #3
 80121d8:	f025 0503 	bic.w	r5, r5, #3
 80121dc:	3508      	adds	r5, #8
 80121de:	2d0c      	cmp	r5, #12
 80121e0:	bf38      	it	cc
 80121e2:	250c      	movcc	r5, #12
 80121e4:	2d00      	cmp	r5, #0
 80121e6:	4606      	mov	r6, r0
 80121e8:	db01      	blt.n	80121ee <_malloc_r+0x1a>
 80121ea:	42a9      	cmp	r1, r5
 80121ec:	d903      	bls.n	80121f6 <_malloc_r+0x22>
 80121ee:	230c      	movs	r3, #12
 80121f0:	6033      	str	r3, [r6, #0]
 80121f2:	2000      	movs	r0, #0
 80121f4:	bd70      	pop	{r4, r5, r6, pc}
 80121f6:	f002 ff79 	bl	80150ec <__malloc_lock>
 80121fa:	4a21      	ldr	r2, [pc, #132]	; (8012280 <_malloc_r+0xac>)
 80121fc:	6814      	ldr	r4, [r2, #0]
 80121fe:	4621      	mov	r1, r4
 8012200:	b991      	cbnz	r1, 8012228 <_malloc_r+0x54>
 8012202:	4c20      	ldr	r4, [pc, #128]	; (8012284 <_malloc_r+0xb0>)
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	b91b      	cbnz	r3, 8012210 <_malloc_r+0x3c>
 8012208:	4630      	mov	r0, r6
 801220a:	f000 fe7b 	bl	8012f04 <_sbrk_r>
 801220e:	6020      	str	r0, [r4, #0]
 8012210:	4629      	mov	r1, r5
 8012212:	4630      	mov	r0, r6
 8012214:	f000 fe76 	bl	8012f04 <_sbrk_r>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d124      	bne.n	8012266 <_malloc_r+0x92>
 801221c:	230c      	movs	r3, #12
 801221e:	6033      	str	r3, [r6, #0]
 8012220:	4630      	mov	r0, r6
 8012222:	f002 ff64 	bl	80150ee <__malloc_unlock>
 8012226:	e7e4      	b.n	80121f2 <_malloc_r+0x1e>
 8012228:	680b      	ldr	r3, [r1, #0]
 801222a:	1b5b      	subs	r3, r3, r5
 801222c:	d418      	bmi.n	8012260 <_malloc_r+0x8c>
 801222e:	2b0b      	cmp	r3, #11
 8012230:	d90f      	bls.n	8012252 <_malloc_r+0x7e>
 8012232:	600b      	str	r3, [r1, #0]
 8012234:	50cd      	str	r5, [r1, r3]
 8012236:	18cc      	adds	r4, r1, r3
 8012238:	4630      	mov	r0, r6
 801223a:	f002 ff58 	bl	80150ee <__malloc_unlock>
 801223e:	f104 000b 	add.w	r0, r4, #11
 8012242:	1d23      	adds	r3, r4, #4
 8012244:	f020 0007 	bic.w	r0, r0, #7
 8012248:	1ac3      	subs	r3, r0, r3
 801224a:	d0d3      	beq.n	80121f4 <_malloc_r+0x20>
 801224c:	425a      	negs	r2, r3
 801224e:	50e2      	str	r2, [r4, r3]
 8012250:	e7d0      	b.n	80121f4 <_malloc_r+0x20>
 8012252:	428c      	cmp	r4, r1
 8012254:	684b      	ldr	r3, [r1, #4]
 8012256:	bf16      	itet	ne
 8012258:	6063      	strne	r3, [r4, #4]
 801225a:	6013      	streq	r3, [r2, #0]
 801225c:	460c      	movne	r4, r1
 801225e:	e7eb      	b.n	8012238 <_malloc_r+0x64>
 8012260:	460c      	mov	r4, r1
 8012262:	6849      	ldr	r1, [r1, #4]
 8012264:	e7cc      	b.n	8012200 <_malloc_r+0x2c>
 8012266:	1cc4      	adds	r4, r0, #3
 8012268:	f024 0403 	bic.w	r4, r4, #3
 801226c:	42a0      	cmp	r0, r4
 801226e:	d005      	beq.n	801227c <_malloc_r+0xa8>
 8012270:	1a21      	subs	r1, r4, r0
 8012272:	4630      	mov	r0, r6
 8012274:	f000 fe46 	bl	8012f04 <_sbrk_r>
 8012278:	3001      	adds	r0, #1
 801227a:	d0cf      	beq.n	801221c <_malloc_r+0x48>
 801227c:	6025      	str	r5, [r4, #0]
 801227e:	e7db      	b.n	8012238 <_malloc_r+0x64>
 8012280:	200051d4 	.word	0x200051d4
 8012284:	200051d8 	.word	0x200051d8

08012288 <__cvt>:
 8012288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	ec55 4b10 	vmov	r4, r5, d0
 8012290:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012292:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012296:	2d00      	cmp	r5, #0
 8012298:	460e      	mov	r6, r1
 801229a:	4691      	mov	r9, r2
 801229c:	4619      	mov	r1, r3
 801229e:	bfb8      	it	lt
 80122a0:	4622      	movlt	r2, r4
 80122a2:	462b      	mov	r3, r5
 80122a4:	f027 0720 	bic.w	r7, r7, #32
 80122a8:	bfbb      	ittet	lt
 80122aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80122ae:	461d      	movlt	r5, r3
 80122b0:	2300      	movge	r3, #0
 80122b2:	232d      	movlt	r3, #45	; 0x2d
 80122b4:	bfb8      	it	lt
 80122b6:	4614      	movlt	r4, r2
 80122b8:	2f46      	cmp	r7, #70	; 0x46
 80122ba:	700b      	strb	r3, [r1, #0]
 80122bc:	d004      	beq.n	80122c8 <__cvt+0x40>
 80122be:	2f45      	cmp	r7, #69	; 0x45
 80122c0:	d100      	bne.n	80122c4 <__cvt+0x3c>
 80122c2:	3601      	adds	r6, #1
 80122c4:	2102      	movs	r1, #2
 80122c6:	e000      	b.n	80122ca <__cvt+0x42>
 80122c8:	2103      	movs	r1, #3
 80122ca:	ab03      	add	r3, sp, #12
 80122cc:	9301      	str	r3, [sp, #4]
 80122ce:	ab02      	add	r3, sp, #8
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	4632      	mov	r2, r6
 80122d4:	4653      	mov	r3, sl
 80122d6:	ec45 4b10 	vmov	d0, r4, r5
 80122da:	f001 fdf5 	bl	8013ec8 <_dtoa_r>
 80122de:	2f47      	cmp	r7, #71	; 0x47
 80122e0:	4680      	mov	r8, r0
 80122e2:	d102      	bne.n	80122ea <__cvt+0x62>
 80122e4:	f019 0f01 	tst.w	r9, #1
 80122e8:	d026      	beq.n	8012338 <__cvt+0xb0>
 80122ea:	2f46      	cmp	r7, #70	; 0x46
 80122ec:	eb08 0906 	add.w	r9, r8, r6
 80122f0:	d111      	bne.n	8012316 <__cvt+0x8e>
 80122f2:	f898 3000 	ldrb.w	r3, [r8]
 80122f6:	2b30      	cmp	r3, #48	; 0x30
 80122f8:	d10a      	bne.n	8012310 <__cvt+0x88>
 80122fa:	2200      	movs	r2, #0
 80122fc:	2300      	movs	r3, #0
 80122fe:	4620      	mov	r0, r4
 8012300:	4629      	mov	r1, r5
 8012302:	f7ee fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012306:	b918      	cbnz	r0, 8012310 <__cvt+0x88>
 8012308:	f1c6 0601 	rsb	r6, r6, #1
 801230c:	f8ca 6000 	str.w	r6, [sl]
 8012310:	f8da 3000 	ldr.w	r3, [sl]
 8012314:	4499      	add	r9, r3
 8012316:	2200      	movs	r2, #0
 8012318:	2300      	movs	r3, #0
 801231a:	4620      	mov	r0, r4
 801231c:	4629      	mov	r1, r5
 801231e:	f7ee fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8012322:	b938      	cbnz	r0, 8012334 <__cvt+0xac>
 8012324:	2230      	movs	r2, #48	; 0x30
 8012326:	9b03      	ldr	r3, [sp, #12]
 8012328:	454b      	cmp	r3, r9
 801232a:	d205      	bcs.n	8012338 <__cvt+0xb0>
 801232c:	1c59      	adds	r1, r3, #1
 801232e:	9103      	str	r1, [sp, #12]
 8012330:	701a      	strb	r2, [r3, #0]
 8012332:	e7f8      	b.n	8012326 <__cvt+0x9e>
 8012334:	f8cd 900c 	str.w	r9, [sp, #12]
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801233c:	eba3 0308 	sub.w	r3, r3, r8
 8012340:	4640      	mov	r0, r8
 8012342:	6013      	str	r3, [r2, #0]
 8012344:	b004      	add	sp, #16
 8012346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801234a <__exponent>:
 801234a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801234c:	2900      	cmp	r1, #0
 801234e:	4604      	mov	r4, r0
 8012350:	bfba      	itte	lt
 8012352:	4249      	neglt	r1, r1
 8012354:	232d      	movlt	r3, #45	; 0x2d
 8012356:	232b      	movge	r3, #43	; 0x2b
 8012358:	2909      	cmp	r1, #9
 801235a:	f804 2b02 	strb.w	r2, [r4], #2
 801235e:	7043      	strb	r3, [r0, #1]
 8012360:	dd20      	ble.n	80123a4 <__exponent+0x5a>
 8012362:	f10d 0307 	add.w	r3, sp, #7
 8012366:	461f      	mov	r7, r3
 8012368:	260a      	movs	r6, #10
 801236a:	fb91 f5f6 	sdiv	r5, r1, r6
 801236e:	fb06 1115 	mls	r1, r6, r5, r1
 8012372:	3130      	adds	r1, #48	; 0x30
 8012374:	2d09      	cmp	r5, #9
 8012376:	f803 1c01 	strb.w	r1, [r3, #-1]
 801237a:	f103 32ff 	add.w	r2, r3, #4294967295
 801237e:	4629      	mov	r1, r5
 8012380:	dc09      	bgt.n	8012396 <__exponent+0x4c>
 8012382:	3130      	adds	r1, #48	; 0x30
 8012384:	3b02      	subs	r3, #2
 8012386:	f802 1c01 	strb.w	r1, [r2, #-1]
 801238a:	42bb      	cmp	r3, r7
 801238c:	4622      	mov	r2, r4
 801238e:	d304      	bcc.n	801239a <__exponent+0x50>
 8012390:	1a10      	subs	r0, r2, r0
 8012392:	b003      	add	sp, #12
 8012394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012396:	4613      	mov	r3, r2
 8012398:	e7e7      	b.n	801236a <__exponent+0x20>
 801239a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801239e:	f804 2b01 	strb.w	r2, [r4], #1
 80123a2:	e7f2      	b.n	801238a <__exponent+0x40>
 80123a4:	2330      	movs	r3, #48	; 0x30
 80123a6:	4419      	add	r1, r3
 80123a8:	7083      	strb	r3, [r0, #2]
 80123aa:	1d02      	adds	r2, r0, #4
 80123ac:	70c1      	strb	r1, [r0, #3]
 80123ae:	e7ef      	b.n	8012390 <__exponent+0x46>

080123b0 <_printf_float>:
 80123b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b4:	b08d      	sub	sp, #52	; 0x34
 80123b6:	460c      	mov	r4, r1
 80123b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80123bc:	4616      	mov	r6, r2
 80123be:	461f      	mov	r7, r3
 80123c0:	4605      	mov	r5, r0
 80123c2:	f002 fe73 	bl	80150ac <_localeconv_r>
 80123c6:	6803      	ldr	r3, [r0, #0]
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7ed ff0a 	bl	80001e4 <strlen>
 80123d0:	2300      	movs	r3, #0
 80123d2:	930a      	str	r3, [sp, #40]	; 0x28
 80123d4:	f8d8 3000 	ldr.w	r3, [r8]
 80123d8:	9005      	str	r0, [sp, #20]
 80123da:	3307      	adds	r3, #7
 80123dc:	f023 0307 	bic.w	r3, r3, #7
 80123e0:	f103 0208 	add.w	r2, r3, #8
 80123e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80123e8:	f8d4 b000 	ldr.w	fp, [r4]
 80123ec:	f8c8 2000 	str.w	r2, [r8]
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012400:	9307      	str	r3, [sp, #28]
 8012402:	f8cd 8018 	str.w	r8, [sp, #24]
 8012406:	f04f 32ff 	mov.w	r2, #4294967295
 801240a:	4ba7      	ldr	r3, [pc, #668]	; (80126a8 <_printf_float+0x2f8>)
 801240c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012410:	f7ee fb9c 	bl	8000b4c <__aeabi_dcmpun>
 8012414:	bb70      	cbnz	r0, 8012474 <_printf_float+0xc4>
 8012416:	f04f 32ff 	mov.w	r2, #4294967295
 801241a:	4ba3      	ldr	r3, [pc, #652]	; (80126a8 <_printf_float+0x2f8>)
 801241c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012420:	f7ee fb76 	bl	8000b10 <__aeabi_dcmple>
 8012424:	bb30      	cbnz	r0, 8012474 <_printf_float+0xc4>
 8012426:	2200      	movs	r2, #0
 8012428:	2300      	movs	r3, #0
 801242a:	4640      	mov	r0, r8
 801242c:	4649      	mov	r1, r9
 801242e:	f7ee fb65 	bl	8000afc <__aeabi_dcmplt>
 8012432:	b110      	cbz	r0, 801243a <_printf_float+0x8a>
 8012434:	232d      	movs	r3, #45	; 0x2d
 8012436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801243a:	4a9c      	ldr	r2, [pc, #624]	; (80126ac <_printf_float+0x2fc>)
 801243c:	4b9c      	ldr	r3, [pc, #624]	; (80126b0 <_printf_float+0x300>)
 801243e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012442:	bf8c      	ite	hi
 8012444:	4690      	movhi	r8, r2
 8012446:	4698      	movls	r8, r3
 8012448:	2303      	movs	r3, #3
 801244a:	f02b 0204 	bic.w	r2, fp, #4
 801244e:	6123      	str	r3, [r4, #16]
 8012450:	6022      	str	r2, [r4, #0]
 8012452:	f04f 0900 	mov.w	r9, #0
 8012456:	9700      	str	r7, [sp, #0]
 8012458:	4633      	mov	r3, r6
 801245a:	aa0b      	add	r2, sp, #44	; 0x2c
 801245c:	4621      	mov	r1, r4
 801245e:	4628      	mov	r0, r5
 8012460:	f000 f9e6 	bl	8012830 <_printf_common>
 8012464:	3001      	adds	r0, #1
 8012466:	f040 808d 	bne.w	8012584 <_printf_float+0x1d4>
 801246a:	f04f 30ff 	mov.w	r0, #4294967295
 801246e:	b00d      	add	sp, #52	; 0x34
 8012470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012474:	4642      	mov	r2, r8
 8012476:	464b      	mov	r3, r9
 8012478:	4640      	mov	r0, r8
 801247a:	4649      	mov	r1, r9
 801247c:	f7ee fb66 	bl	8000b4c <__aeabi_dcmpun>
 8012480:	b110      	cbz	r0, 8012488 <_printf_float+0xd8>
 8012482:	4a8c      	ldr	r2, [pc, #560]	; (80126b4 <_printf_float+0x304>)
 8012484:	4b8c      	ldr	r3, [pc, #560]	; (80126b8 <_printf_float+0x308>)
 8012486:	e7da      	b.n	801243e <_printf_float+0x8e>
 8012488:	6861      	ldr	r1, [r4, #4]
 801248a:	1c4b      	adds	r3, r1, #1
 801248c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012490:	a80a      	add	r0, sp, #40	; 0x28
 8012492:	d13e      	bne.n	8012512 <_printf_float+0x162>
 8012494:	2306      	movs	r3, #6
 8012496:	6063      	str	r3, [r4, #4]
 8012498:	2300      	movs	r3, #0
 801249a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801249e:	ab09      	add	r3, sp, #36	; 0x24
 80124a0:	9300      	str	r3, [sp, #0]
 80124a2:	ec49 8b10 	vmov	d0, r8, r9
 80124a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124aa:	6022      	str	r2, [r4, #0]
 80124ac:	f8cd a004 	str.w	sl, [sp, #4]
 80124b0:	6861      	ldr	r1, [r4, #4]
 80124b2:	4628      	mov	r0, r5
 80124b4:	f7ff fee8 	bl	8012288 <__cvt>
 80124b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80124bc:	2b47      	cmp	r3, #71	; 0x47
 80124be:	4680      	mov	r8, r0
 80124c0:	d109      	bne.n	80124d6 <_printf_float+0x126>
 80124c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c4:	1cd8      	adds	r0, r3, #3
 80124c6:	db02      	blt.n	80124ce <_printf_float+0x11e>
 80124c8:	6862      	ldr	r2, [r4, #4]
 80124ca:	4293      	cmp	r3, r2
 80124cc:	dd47      	ble.n	801255e <_printf_float+0x1ae>
 80124ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80124d2:	fa5f fa8a 	uxtb.w	sl, sl
 80124d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80124da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124dc:	d824      	bhi.n	8012528 <_printf_float+0x178>
 80124de:	3901      	subs	r1, #1
 80124e0:	4652      	mov	r2, sl
 80124e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124e6:	9109      	str	r1, [sp, #36]	; 0x24
 80124e8:	f7ff ff2f 	bl	801234a <__exponent>
 80124ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ee:	1813      	adds	r3, r2, r0
 80124f0:	2a01      	cmp	r2, #1
 80124f2:	4681      	mov	r9, r0
 80124f4:	6123      	str	r3, [r4, #16]
 80124f6:	dc02      	bgt.n	80124fe <_printf_float+0x14e>
 80124f8:	6822      	ldr	r2, [r4, #0]
 80124fa:	07d1      	lsls	r1, r2, #31
 80124fc:	d501      	bpl.n	8012502 <_printf_float+0x152>
 80124fe:	3301      	adds	r3, #1
 8012500:	6123      	str	r3, [r4, #16]
 8012502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012506:	2b00      	cmp	r3, #0
 8012508:	d0a5      	beq.n	8012456 <_printf_float+0xa6>
 801250a:	232d      	movs	r3, #45	; 0x2d
 801250c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012510:	e7a1      	b.n	8012456 <_printf_float+0xa6>
 8012512:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012516:	f000 8177 	beq.w	8012808 <_printf_float+0x458>
 801251a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801251e:	d1bb      	bne.n	8012498 <_printf_float+0xe8>
 8012520:	2900      	cmp	r1, #0
 8012522:	d1b9      	bne.n	8012498 <_printf_float+0xe8>
 8012524:	2301      	movs	r3, #1
 8012526:	e7b6      	b.n	8012496 <_printf_float+0xe6>
 8012528:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801252c:	d119      	bne.n	8012562 <_printf_float+0x1b2>
 801252e:	2900      	cmp	r1, #0
 8012530:	6863      	ldr	r3, [r4, #4]
 8012532:	dd0c      	ble.n	801254e <_printf_float+0x19e>
 8012534:	6121      	str	r1, [r4, #16]
 8012536:	b913      	cbnz	r3, 801253e <_printf_float+0x18e>
 8012538:	6822      	ldr	r2, [r4, #0]
 801253a:	07d2      	lsls	r2, r2, #31
 801253c:	d502      	bpl.n	8012544 <_printf_float+0x194>
 801253e:	3301      	adds	r3, #1
 8012540:	440b      	add	r3, r1
 8012542:	6123      	str	r3, [r4, #16]
 8012544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012546:	65a3      	str	r3, [r4, #88]	; 0x58
 8012548:	f04f 0900 	mov.w	r9, #0
 801254c:	e7d9      	b.n	8012502 <_printf_float+0x152>
 801254e:	b913      	cbnz	r3, 8012556 <_printf_float+0x1a6>
 8012550:	6822      	ldr	r2, [r4, #0]
 8012552:	07d0      	lsls	r0, r2, #31
 8012554:	d501      	bpl.n	801255a <_printf_float+0x1aa>
 8012556:	3302      	adds	r3, #2
 8012558:	e7f3      	b.n	8012542 <_printf_float+0x192>
 801255a:	2301      	movs	r3, #1
 801255c:	e7f1      	b.n	8012542 <_printf_float+0x192>
 801255e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012566:	4293      	cmp	r3, r2
 8012568:	db05      	blt.n	8012576 <_printf_float+0x1c6>
 801256a:	6822      	ldr	r2, [r4, #0]
 801256c:	6123      	str	r3, [r4, #16]
 801256e:	07d1      	lsls	r1, r2, #31
 8012570:	d5e8      	bpl.n	8012544 <_printf_float+0x194>
 8012572:	3301      	adds	r3, #1
 8012574:	e7e5      	b.n	8012542 <_printf_float+0x192>
 8012576:	2b00      	cmp	r3, #0
 8012578:	bfd4      	ite	le
 801257a:	f1c3 0302 	rsble	r3, r3, #2
 801257e:	2301      	movgt	r3, #1
 8012580:	4413      	add	r3, r2
 8012582:	e7de      	b.n	8012542 <_printf_float+0x192>
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	055a      	lsls	r2, r3, #21
 8012588:	d407      	bmi.n	801259a <_printf_float+0x1ea>
 801258a:	6923      	ldr	r3, [r4, #16]
 801258c:	4642      	mov	r2, r8
 801258e:	4631      	mov	r1, r6
 8012590:	4628      	mov	r0, r5
 8012592:	47b8      	blx	r7
 8012594:	3001      	adds	r0, #1
 8012596:	d12b      	bne.n	80125f0 <_printf_float+0x240>
 8012598:	e767      	b.n	801246a <_printf_float+0xba>
 801259a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801259e:	f240 80dc 	bls.w	801275a <_printf_float+0x3aa>
 80125a2:	2200      	movs	r2, #0
 80125a4:	2300      	movs	r3, #0
 80125a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125aa:	f7ee fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80125ae:	2800      	cmp	r0, #0
 80125b0:	d033      	beq.n	801261a <_printf_float+0x26a>
 80125b2:	2301      	movs	r3, #1
 80125b4:	4a41      	ldr	r2, [pc, #260]	; (80126bc <_printf_float+0x30c>)
 80125b6:	4631      	mov	r1, r6
 80125b8:	4628      	mov	r0, r5
 80125ba:	47b8      	blx	r7
 80125bc:	3001      	adds	r0, #1
 80125be:	f43f af54 	beq.w	801246a <_printf_float+0xba>
 80125c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125c6:	429a      	cmp	r2, r3
 80125c8:	db02      	blt.n	80125d0 <_printf_float+0x220>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	07d8      	lsls	r0, r3, #31
 80125ce:	d50f      	bpl.n	80125f0 <_printf_float+0x240>
 80125d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125d4:	4631      	mov	r1, r6
 80125d6:	4628      	mov	r0, r5
 80125d8:	47b8      	blx	r7
 80125da:	3001      	adds	r0, #1
 80125dc:	f43f af45 	beq.w	801246a <_printf_float+0xba>
 80125e0:	f04f 0800 	mov.w	r8, #0
 80125e4:	f104 091a 	add.w	r9, r4, #26
 80125e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ea:	3b01      	subs	r3, #1
 80125ec:	4543      	cmp	r3, r8
 80125ee:	dc09      	bgt.n	8012604 <_printf_float+0x254>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	079b      	lsls	r3, r3, #30
 80125f4:	f100 8103 	bmi.w	80127fe <_printf_float+0x44e>
 80125f8:	68e0      	ldr	r0, [r4, #12]
 80125fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125fc:	4298      	cmp	r0, r3
 80125fe:	bfb8      	it	lt
 8012600:	4618      	movlt	r0, r3
 8012602:	e734      	b.n	801246e <_printf_float+0xbe>
 8012604:	2301      	movs	r3, #1
 8012606:	464a      	mov	r2, r9
 8012608:	4631      	mov	r1, r6
 801260a:	4628      	mov	r0, r5
 801260c:	47b8      	blx	r7
 801260e:	3001      	adds	r0, #1
 8012610:	f43f af2b 	beq.w	801246a <_printf_float+0xba>
 8012614:	f108 0801 	add.w	r8, r8, #1
 8012618:	e7e6      	b.n	80125e8 <_printf_float+0x238>
 801261a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801261c:	2b00      	cmp	r3, #0
 801261e:	dc2b      	bgt.n	8012678 <_printf_float+0x2c8>
 8012620:	2301      	movs	r3, #1
 8012622:	4a26      	ldr	r2, [pc, #152]	; (80126bc <_printf_float+0x30c>)
 8012624:	4631      	mov	r1, r6
 8012626:	4628      	mov	r0, r5
 8012628:	47b8      	blx	r7
 801262a:	3001      	adds	r0, #1
 801262c:	f43f af1d 	beq.w	801246a <_printf_float+0xba>
 8012630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012632:	b923      	cbnz	r3, 801263e <_printf_float+0x28e>
 8012634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012636:	b913      	cbnz	r3, 801263e <_printf_float+0x28e>
 8012638:	6823      	ldr	r3, [r4, #0]
 801263a:	07d9      	lsls	r1, r3, #31
 801263c:	d5d8      	bpl.n	80125f0 <_printf_float+0x240>
 801263e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012642:	4631      	mov	r1, r6
 8012644:	4628      	mov	r0, r5
 8012646:	47b8      	blx	r7
 8012648:	3001      	adds	r0, #1
 801264a:	f43f af0e 	beq.w	801246a <_printf_float+0xba>
 801264e:	f04f 0900 	mov.w	r9, #0
 8012652:	f104 0a1a 	add.w	sl, r4, #26
 8012656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012658:	425b      	negs	r3, r3
 801265a:	454b      	cmp	r3, r9
 801265c:	dc01      	bgt.n	8012662 <_printf_float+0x2b2>
 801265e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012660:	e794      	b.n	801258c <_printf_float+0x1dc>
 8012662:	2301      	movs	r3, #1
 8012664:	4652      	mov	r2, sl
 8012666:	4631      	mov	r1, r6
 8012668:	4628      	mov	r0, r5
 801266a:	47b8      	blx	r7
 801266c:	3001      	adds	r0, #1
 801266e:	f43f aefc 	beq.w	801246a <_printf_float+0xba>
 8012672:	f109 0901 	add.w	r9, r9, #1
 8012676:	e7ee      	b.n	8012656 <_printf_float+0x2a6>
 8012678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801267a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801267c:	429a      	cmp	r2, r3
 801267e:	bfa8      	it	ge
 8012680:	461a      	movge	r2, r3
 8012682:	2a00      	cmp	r2, #0
 8012684:	4691      	mov	r9, r2
 8012686:	dd07      	ble.n	8012698 <_printf_float+0x2e8>
 8012688:	4613      	mov	r3, r2
 801268a:	4631      	mov	r1, r6
 801268c:	4642      	mov	r2, r8
 801268e:	4628      	mov	r0, r5
 8012690:	47b8      	blx	r7
 8012692:	3001      	adds	r0, #1
 8012694:	f43f aee9 	beq.w	801246a <_printf_float+0xba>
 8012698:	f104 031a 	add.w	r3, r4, #26
 801269c:	f04f 0b00 	mov.w	fp, #0
 80126a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126a4:	9306      	str	r3, [sp, #24]
 80126a6:	e015      	b.n	80126d4 <_printf_float+0x324>
 80126a8:	7fefffff 	.word	0x7fefffff
 80126ac:	080182b8 	.word	0x080182b8
 80126b0:	080182b4 	.word	0x080182b4
 80126b4:	080182c0 	.word	0x080182c0
 80126b8:	080182bc 	.word	0x080182bc
 80126bc:	0801847b 	.word	0x0801847b
 80126c0:	2301      	movs	r3, #1
 80126c2:	9a06      	ldr	r2, [sp, #24]
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	f43f aecd 	beq.w	801246a <_printf_float+0xba>
 80126d0:	f10b 0b01 	add.w	fp, fp, #1
 80126d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80126d8:	ebaa 0309 	sub.w	r3, sl, r9
 80126dc:	455b      	cmp	r3, fp
 80126de:	dcef      	bgt.n	80126c0 <_printf_float+0x310>
 80126e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126e4:	429a      	cmp	r2, r3
 80126e6:	44d0      	add	r8, sl
 80126e8:	db15      	blt.n	8012716 <_printf_float+0x366>
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	07da      	lsls	r2, r3, #31
 80126ee:	d412      	bmi.n	8012716 <_printf_float+0x366>
 80126f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126f4:	eba3 020a 	sub.w	r2, r3, sl
 80126f8:	eba3 0a01 	sub.w	sl, r3, r1
 80126fc:	4592      	cmp	sl, r2
 80126fe:	bfa8      	it	ge
 8012700:	4692      	movge	sl, r2
 8012702:	f1ba 0f00 	cmp.w	sl, #0
 8012706:	dc0e      	bgt.n	8012726 <_printf_float+0x376>
 8012708:	f04f 0800 	mov.w	r8, #0
 801270c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012710:	f104 091a 	add.w	r9, r4, #26
 8012714:	e019      	b.n	801274a <_printf_float+0x39a>
 8012716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801271a:	4631      	mov	r1, r6
 801271c:	4628      	mov	r0, r5
 801271e:	47b8      	blx	r7
 8012720:	3001      	adds	r0, #1
 8012722:	d1e5      	bne.n	80126f0 <_printf_float+0x340>
 8012724:	e6a1      	b.n	801246a <_printf_float+0xba>
 8012726:	4653      	mov	r3, sl
 8012728:	4642      	mov	r2, r8
 801272a:	4631      	mov	r1, r6
 801272c:	4628      	mov	r0, r5
 801272e:	47b8      	blx	r7
 8012730:	3001      	adds	r0, #1
 8012732:	d1e9      	bne.n	8012708 <_printf_float+0x358>
 8012734:	e699      	b.n	801246a <_printf_float+0xba>
 8012736:	2301      	movs	r3, #1
 8012738:	464a      	mov	r2, r9
 801273a:	4631      	mov	r1, r6
 801273c:	4628      	mov	r0, r5
 801273e:	47b8      	blx	r7
 8012740:	3001      	adds	r0, #1
 8012742:	f43f ae92 	beq.w	801246a <_printf_float+0xba>
 8012746:	f108 0801 	add.w	r8, r8, #1
 801274a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801274e:	1a9b      	subs	r3, r3, r2
 8012750:	eba3 030a 	sub.w	r3, r3, sl
 8012754:	4543      	cmp	r3, r8
 8012756:	dcee      	bgt.n	8012736 <_printf_float+0x386>
 8012758:	e74a      	b.n	80125f0 <_printf_float+0x240>
 801275a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801275c:	2a01      	cmp	r2, #1
 801275e:	dc01      	bgt.n	8012764 <_printf_float+0x3b4>
 8012760:	07db      	lsls	r3, r3, #31
 8012762:	d53a      	bpl.n	80127da <_printf_float+0x42a>
 8012764:	2301      	movs	r3, #1
 8012766:	4642      	mov	r2, r8
 8012768:	4631      	mov	r1, r6
 801276a:	4628      	mov	r0, r5
 801276c:	47b8      	blx	r7
 801276e:	3001      	adds	r0, #1
 8012770:	f43f ae7b 	beq.w	801246a <_printf_float+0xba>
 8012774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012778:	4631      	mov	r1, r6
 801277a:	4628      	mov	r0, r5
 801277c:	47b8      	blx	r7
 801277e:	3001      	adds	r0, #1
 8012780:	f108 0801 	add.w	r8, r8, #1
 8012784:	f43f ae71 	beq.w	801246a <_printf_float+0xba>
 8012788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278a:	2200      	movs	r2, #0
 801278c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012794:	2300      	movs	r3, #0
 8012796:	f7ee f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 801279a:	b9c8      	cbnz	r0, 80127d0 <_printf_float+0x420>
 801279c:	4653      	mov	r3, sl
 801279e:	4642      	mov	r2, r8
 80127a0:	4631      	mov	r1, r6
 80127a2:	4628      	mov	r0, r5
 80127a4:	47b8      	blx	r7
 80127a6:	3001      	adds	r0, #1
 80127a8:	d10e      	bne.n	80127c8 <_printf_float+0x418>
 80127aa:	e65e      	b.n	801246a <_printf_float+0xba>
 80127ac:	2301      	movs	r3, #1
 80127ae:	4652      	mov	r2, sl
 80127b0:	4631      	mov	r1, r6
 80127b2:	4628      	mov	r0, r5
 80127b4:	47b8      	blx	r7
 80127b6:	3001      	adds	r0, #1
 80127b8:	f43f ae57 	beq.w	801246a <_printf_float+0xba>
 80127bc:	f108 0801 	add.w	r8, r8, #1
 80127c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c2:	3b01      	subs	r3, #1
 80127c4:	4543      	cmp	r3, r8
 80127c6:	dcf1      	bgt.n	80127ac <_printf_float+0x3fc>
 80127c8:	464b      	mov	r3, r9
 80127ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127ce:	e6de      	b.n	801258e <_printf_float+0x1de>
 80127d0:	f04f 0800 	mov.w	r8, #0
 80127d4:	f104 0a1a 	add.w	sl, r4, #26
 80127d8:	e7f2      	b.n	80127c0 <_printf_float+0x410>
 80127da:	2301      	movs	r3, #1
 80127dc:	e7df      	b.n	801279e <_printf_float+0x3ee>
 80127de:	2301      	movs	r3, #1
 80127e0:	464a      	mov	r2, r9
 80127e2:	4631      	mov	r1, r6
 80127e4:	4628      	mov	r0, r5
 80127e6:	47b8      	blx	r7
 80127e8:	3001      	adds	r0, #1
 80127ea:	f43f ae3e 	beq.w	801246a <_printf_float+0xba>
 80127ee:	f108 0801 	add.w	r8, r8, #1
 80127f2:	68e3      	ldr	r3, [r4, #12]
 80127f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	4543      	cmp	r3, r8
 80127fa:	dcf0      	bgt.n	80127de <_printf_float+0x42e>
 80127fc:	e6fc      	b.n	80125f8 <_printf_float+0x248>
 80127fe:	f04f 0800 	mov.w	r8, #0
 8012802:	f104 0919 	add.w	r9, r4, #25
 8012806:	e7f4      	b.n	80127f2 <_printf_float+0x442>
 8012808:	2900      	cmp	r1, #0
 801280a:	f43f ae8b 	beq.w	8012524 <_printf_float+0x174>
 801280e:	2300      	movs	r3, #0
 8012810:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012814:	ab09      	add	r3, sp, #36	; 0x24
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	ec49 8b10 	vmov	d0, r8, r9
 801281c:	6022      	str	r2, [r4, #0]
 801281e:	f8cd a004 	str.w	sl, [sp, #4]
 8012822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012826:	4628      	mov	r0, r5
 8012828:	f7ff fd2e 	bl	8012288 <__cvt>
 801282c:	4680      	mov	r8, r0
 801282e:	e648      	b.n	80124c2 <_printf_float+0x112>

08012830 <_printf_common>:
 8012830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012834:	4691      	mov	r9, r2
 8012836:	461f      	mov	r7, r3
 8012838:	688a      	ldr	r2, [r1, #8]
 801283a:	690b      	ldr	r3, [r1, #16]
 801283c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012840:	4293      	cmp	r3, r2
 8012842:	bfb8      	it	lt
 8012844:	4613      	movlt	r3, r2
 8012846:	f8c9 3000 	str.w	r3, [r9]
 801284a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801284e:	4606      	mov	r6, r0
 8012850:	460c      	mov	r4, r1
 8012852:	b112      	cbz	r2, 801285a <_printf_common+0x2a>
 8012854:	3301      	adds	r3, #1
 8012856:	f8c9 3000 	str.w	r3, [r9]
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	0699      	lsls	r1, r3, #26
 801285e:	bf42      	ittt	mi
 8012860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012864:	3302      	addmi	r3, #2
 8012866:	f8c9 3000 	strmi.w	r3, [r9]
 801286a:	6825      	ldr	r5, [r4, #0]
 801286c:	f015 0506 	ands.w	r5, r5, #6
 8012870:	d107      	bne.n	8012882 <_printf_common+0x52>
 8012872:	f104 0a19 	add.w	sl, r4, #25
 8012876:	68e3      	ldr	r3, [r4, #12]
 8012878:	f8d9 2000 	ldr.w	r2, [r9]
 801287c:	1a9b      	subs	r3, r3, r2
 801287e:	42ab      	cmp	r3, r5
 8012880:	dc28      	bgt.n	80128d4 <_printf_common+0xa4>
 8012882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012886:	6822      	ldr	r2, [r4, #0]
 8012888:	3300      	adds	r3, #0
 801288a:	bf18      	it	ne
 801288c:	2301      	movne	r3, #1
 801288e:	0692      	lsls	r2, r2, #26
 8012890:	d42d      	bmi.n	80128ee <_printf_common+0xbe>
 8012892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012896:	4639      	mov	r1, r7
 8012898:	4630      	mov	r0, r6
 801289a:	47c0      	blx	r8
 801289c:	3001      	adds	r0, #1
 801289e:	d020      	beq.n	80128e2 <_printf_common+0xb2>
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	68e5      	ldr	r5, [r4, #12]
 80128a4:	f8d9 2000 	ldr.w	r2, [r9]
 80128a8:	f003 0306 	and.w	r3, r3, #6
 80128ac:	2b04      	cmp	r3, #4
 80128ae:	bf08      	it	eq
 80128b0:	1aad      	subeq	r5, r5, r2
 80128b2:	68a3      	ldr	r3, [r4, #8]
 80128b4:	6922      	ldr	r2, [r4, #16]
 80128b6:	bf0c      	ite	eq
 80128b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128bc:	2500      	movne	r5, #0
 80128be:	4293      	cmp	r3, r2
 80128c0:	bfc4      	itt	gt
 80128c2:	1a9b      	subgt	r3, r3, r2
 80128c4:	18ed      	addgt	r5, r5, r3
 80128c6:	f04f 0900 	mov.w	r9, #0
 80128ca:	341a      	adds	r4, #26
 80128cc:	454d      	cmp	r5, r9
 80128ce:	d11a      	bne.n	8012906 <_printf_common+0xd6>
 80128d0:	2000      	movs	r0, #0
 80128d2:	e008      	b.n	80128e6 <_printf_common+0xb6>
 80128d4:	2301      	movs	r3, #1
 80128d6:	4652      	mov	r2, sl
 80128d8:	4639      	mov	r1, r7
 80128da:	4630      	mov	r0, r6
 80128dc:	47c0      	blx	r8
 80128de:	3001      	adds	r0, #1
 80128e0:	d103      	bne.n	80128ea <_printf_common+0xba>
 80128e2:	f04f 30ff 	mov.w	r0, #4294967295
 80128e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ea:	3501      	adds	r5, #1
 80128ec:	e7c3      	b.n	8012876 <_printf_common+0x46>
 80128ee:	18e1      	adds	r1, r4, r3
 80128f0:	1c5a      	adds	r2, r3, #1
 80128f2:	2030      	movs	r0, #48	; 0x30
 80128f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128f8:	4422      	add	r2, r4
 80128fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012902:	3302      	adds	r3, #2
 8012904:	e7c5      	b.n	8012892 <_printf_common+0x62>
 8012906:	2301      	movs	r3, #1
 8012908:	4622      	mov	r2, r4
 801290a:	4639      	mov	r1, r7
 801290c:	4630      	mov	r0, r6
 801290e:	47c0      	blx	r8
 8012910:	3001      	adds	r0, #1
 8012912:	d0e6      	beq.n	80128e2 <_printf_common+0xb2>
 8012914:	f109 0901 	add.w	r9, r9, #1
 8012918:	e7d8      	b.n	80128cc <_printf_common+0x9c>
	...

0801291c <_printf_i>:
 801291c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012920:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012924:	460c      	mov	r4, r1
 8012926:	7e09      	ldrb	r1, [r1, #24]
 8012928:	b085      	sub	sp, #20
 801292a:	296e      	cmp	r1, #110	; 0x6e
 801292c:	4617      	mov	r7, r2
 801292e:	4606      	mov	r6, r0
 8012930:	4698      	mov	r8, r3
 8012932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012934:	f000 80b3 	beq.w	8012a9e <_printf_i+0x182>
 8012938:	d822      	bhi.n	8012980 <_printf_i+0x64>
 801293a:	2963      	cmp	r1, #99	; 0x63
 801293c:	d036      	beq.n	80129ac <_printf_i+0x90>
 801293e:	d80a      	bhi.n	8012956 <_printf_i+0x3a>
 8012940:	2900      	cmp	r1, #0
 8012942:	f000 80b9 	beq.w	8012ab8 <_printf_i+0x19c>
 8012946:	2958      	cmp	r1, #88	; 0x58
 8012948:	f000 8083 	beq.w	8012a52 <_printf_i+0x136>
 801294c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012950:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012954:	e032      	b.n	80129bc <_printf_i+0xa0>
 8012956:	2964      	cmp	r1, #100	; 0x64
 8012958:	d001      	beq.n	801295e <_printf_i+0x42>
 801295a:	2969      	cmp	r1, #105	; 0x69
 801295c:	d1f6      	bne.n	801294c <_printf_i+0x30>
 801295e:	6820      	ldr	r0, [r4, #0]
 8012960:	6813      	ldr	r3, [r2, #0]
 8012962:	0605      	lsls	r5, r0, #24
 8012964:	f103 0104 	add.w	r1, r3, #4
 8012968:	d52a      	bpl.n	80129c0 <_printf_i+0xa4>
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	6011      	str	r1, [r2, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	da03      	bge.n	801297a <_printf_i+0x5e>
 8012972:	222d      	movs	r2, #45	; 0x2d
 8012974:	425b      	negs	r3, r3
 8012976:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801297a:	486f      	ldr	r0, [pc, #444]	; (8012b38 <_printf_i+0x21c>)
 801297c:	220a      	movs	r2, #10
 801297e:	e039      	b.n	80129f4 <_printf_i+0xd8>
 8012980:	2973      	cmp	r1, #115	; 0x73
 8012982:	f000 809d 	beq.w	8012ac0 <_printf_i+0x1a4>
 8012986:	d808      	bhi.n	801299a <_printf_i+0x7e>
 8012988:	296f      	cmp	r1, #111	; 0x6f
 801298a:	d020      	beq.n	80129ce <_printf_i+0xb2>
 801298c:	2970      	cmp	r1, #112	; 0x70
 801298e:	d1dd      	bne.n	801294c <_printf_i+0x30>
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	f043 0320 	orr.w	r3, r3, #32
 8012996:	6023      	str	r3, [r4, #0]
 8012998:	e003      	b.n	80129a2 <_printf_i+0x86>
 801299a:	2975      	cmp	r1, #117	; 0x75
 801299c:	d017      	beq.n	80129ce <_printf_i+0xb2>
 801299e:	2978      	cmp	r1, #120	; 0x78
 80129a0:	d1d4      	bne.n	801294c <_printf_i+0x30>
 80129a2:	2378      	movs	r3, #120	; 0x78
 80129a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129a8:	4864      	ldr	r0, [pc, #400]	; (8012b3c <_printf_i+0x220>)
 80129aa:	e055      	b.n	8012a58 <_printf_i+0x13c>
 80129ac:	6813      	ldr	r3, [r2, #0]
 80129ae:	1d19      	adds	r1, r3, #4
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	6011      	str	r1, [r2, #0]
 80129b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129bc:	2301      	movs	r3, #1
 80129be:	e08c      	b.n	8012ada <_printf_i+0x1be>
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	6011      	str	r1, [r2, #0]
 80129c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80129c8:	bf18      	it	ne
 80129ca:	b21b      	sxthne	r3, r3
 80129cc:	e7cf      	b.n	801296e <_printf_i+0x52>
 80129ce:	6813      	ldr	r3, [r2, #0]
 80129d0:	6825      	ldr	r5, [r4, #0]
 80129d2:	1d18      	adds	r0, r3, #4
 80129d4:	6010      	str	r0, [r2, #0]
 80129d6:	0628      	lsls	r0, r5, #24
 80129d8:	d501      	bpl.n	80129de <_printf_i+0xc2>
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	e002      	b.n	80129e4 <_printf_i+0xc8>
 80129de:	0668      	lsls	r0, r5, #25
 80129e0:	d5fb      	bpl.n	80129da <_printf_i+0xbe>
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	4854      	ldr	r0, [pc, #336]	; (8012b38 <_printf_i+0x21c>)
 80129e6:	296f      	cmp	r1, #111	; 0x6f
 80129e8:	bf14      	ite	ne
 80129ea:	220a      	movne	r2, #10
 80129ec:	2208      	moveq	r2, #8
 80129ee:	2100      	movs	r1, #0
 80129f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129f4:	6865      	ldr	r5, [r4, #4]
 80129f6:	60a5      	str	r5, [r4, #8]
 80129f8:	2d00      	cmp	r5, #0
 80129fa:	f2c0 8095 	blt.w	8012b28 <_printf_i+0x20c>
 80129fe:	6821      	ldr	r1, [r4, #0]
 8012a00:	f021 0104 	bic.w	r1, r1, #4
 8012a04:	6021      	str	r1, [r4, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d13d      	bne.n	8012a86 <_printf_i+0x16a>
 8012a0a:	2d00      	cmp	r5, #0
 8012a0c:	f040 808e 	bne.w	8012b2c <_printf_i+0x210>
 8012a10:	4665      	mov	r5, ip
 8012a12:	2a08      	cmp	r2, #8
 8012a14:	d10b      	bne.n	8012a2e <_printf_i+0x112>
 8012a16:	6823      	ldr	r3, [r4, #0]
 8012a18:	07db      	lsls	r3, r3, #31
 8012a1a:	d508      	bpl.n	8012a2e <_printf_i+0x112>
 8012a1c:	6923      	ldr	r3, [r4, #16]
 8012a1e:	6862      	ldr	r2, [r4, #4]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	bfde      	ittt	le
 8012a24:	2330      	movle	r3, #48	; 0x30
 8012a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a2e:	ebac 0305 	sub.w	r3, ip, r5
 8012a32:	6123      	str	r3, [r4, #16]
 8012a34:	f8cd 8000 	str.w	r8, [sp]
 8012a38:	463b      	mov	r3, r7
 8012a3a:	aa03      	add	r2, sp, #12
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f7ff fef6 	bl	8012830 <_printf_common>
 8012a44:	3001      	adds	r0, #1
 8012a46:	d14d      	bne.n	8012ae4 <_printf_i+0x1c8>
 8012a48:	f04f 30ff 	mov.w	r0, #4294967295
 8012a4c:	b005      	add	sp, #20
 8012a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a52:	4839      	ldr	r0, [pc, #228]	; (8012b38 <_printf_i+0x21c>)
 8012a54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012a58:	6813      	ldr	r3, [r2, #0]
 8012a5a:	6821      	ldr	r1, [r4, #0]
 8012a5c:	1d1d      	adds	r5, r3, #4
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	6015      	str	r5, [r2, #0]
 8012a62:	060a      	lsls	r2, r1, #24
 8012a64:	d50b      	bpl.n	8012a7e <_printf_i+0x162>
 8012a66:	07ca      	lsls	r2, r1, #31
 8012a68:	bf44      	itt	mi
 8012a6a:	f041 0120 	orrmi.w	r1, r1, #32
 8012a6e:	6021      	strmi	r1, [r4, #0]
 8012a70:	b91b      	cbnz	r3, 8012a7a <_printf_i+0x15e>
 8012a72:	6822      	ldr	r2, [r4, #0]
 8012a74:	f022 0220 	bic.w	r2, r2, #32
 8012a78:	6022      	str	r2, [r4, #0]
 8012a7a:	2210      	movs	r2, #16
 8012a7c:	e7b7      	b.n	80129ee <_printf_i+0xd2>
 8012a7e:	064d      	lsls	r5, r1, #25
 8012a80:	bf48      	it	mi
 8012a82:	b29b      	uxthmi	r3, r3
 8012a84:	e7ef      	b.n	8012a66 <_printf_i+0x14a>
 8012a86:	4665      	mov	r5, ip
 8012a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a8c:	fb02 3311 	mls	r3, r2, r1, r3
 8012a90:	5cc3      	ldrb	r3, [r0, r3]
 8012a92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a96:	460b      	mov	r3, r1
 8012a98:	2900      	cmp	r1, #0
 8012a9a:	d1f5      	bne.n	8012a88 <_printf_i+0x16c>
 8012a9c:	e7b9      	b.n	8012a12 <_printf_i+0xf6>
 8012a9e:	6813      	ldr	r3, [r2, #0]
 8012aa0:	6825      	ldr	r5, [r4, #0]
 8012aa2:	6961      	ldr	r1, [r4, #20]
 8012aa4:	1d18      	adds	r0, r3, #4
 8012aa6:	6010      	str	r0, [r2, #0]
 8012aa8:	0628      	lsls	r0, r5, #24
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	d501      	bpl.n	8012ab2 <_printf_i+0x196>
 8012aae:	6019      	str	r1, [r3, #0]
 8012ab0:	e002      	b.n	8012ab8 <_printf_i+0x19c>
 8012ab2:	066a      	lsls	r2, r5, #25
 8012ab4:	d5fb      	bpl.n	8012aae <_printf_i+0x192>
 8012ab6:	8019      	strh	r1, [r3, #0]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	6123      	str	r3, [r4, #16]
 8012abc:	4665      	mov	r5, ip
 8012abe:	e7b9      	b.n	8012a34 <_printf_i+0x118>
 8012ac0:	6813      	ldr	r3, [r2, #0]
 8012ac2:	1d19      	adds	r1, r3, #4
 8012ac4:	6011      	str	r1, [r2, #0]
 8012ac6:	681d      	ldr	r5, [r3, #0]
 8012ac8:	6862      	ldr	r2, [r4, #4]
 8012aca:	2100      	movs	r1, #0
 8012acc:	4628      	mov	r0, r5
 8012ace:	f7ed fb97 	bl	8000200 <memchr>
 8012ad2:	b108      	cbz	r0, 8012ad8 <_printf_i+0x1bc>
 8012ad4:	1b40      	subs	r0, r0, r5
 8012ad6:	6060      	str	r0, [r4, #4]
 8012ad8:	6863      	ldr	r3, [r4, #4]
 8012ada:	6123      	str	r3, [r4, #16]
 8012adc:	2300      	movs	r3, #0
 8012ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ae2:	e7a7      	b.n	8012a34 <_printf_i+0x118>
 8012ae4:	6923      	ldr	r3, [r4, #16]
 8012ae6:	462a      	mov	r2, r5
 8012ae8:	4639      	mov	r1, r7
 8012aea:	4630      	mov	r0, r6
 8012aec:	47c0      	blx	r8
 8012aee:	3001      	adds	r0, #1
 8012af0:	d0aa      	beq.n	8012a48 <_printf_i+0x12c>
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	079b      	lsls	r3, r3, #30
 8012af6:	d413      	bmi.n	8012b20 <_printf_i+0x204>
 8012af8:	68e0      	ldr	r0, [r4, #12]
 8012afa:	9b03      	ldr	r3, [sp, #12]
 8012afc:	4298      	cmp	r0, r3
 8012afe:	bfb8      	it	lt
 8012b00:	4618      	movlt	r0, r3
 8012b02:	e7a3      	b.n	8012a4c <_printf_i+0x130>
 8012b04:	2301      	movs	r3, #1
 8012b06:	464a      	mov	r2, r9
 8012b08:	4639      	mov	r1, r7
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	47c0      	blx	r8
 8012b0e:	3001      	adds	r0, #1
 8012b10:	d09a      	beq.n	8012a48 <_printf_i+0x12c>
 8012b12:	3501      	adds	r5, #1
 8012b14:	68e3      	ldr	r3, [r4, #12]
 8012b16:	9a03      	ldr	r2, [sp, #12]
 8012b18:	1a9b      	subs	r3, r3, r2
 8012b1a:	42ab      	cmp	r3, r5
 8012b1c:	dcf2      	bgt.n	8012b04 <_printf_i+0x1e8>
 8012b1e:	e7eb      	b.n	8012af8 <_printf_i+0x1dc>
 8012b20:	2500      	movs	r5, #0
 8012b22:	f104 0919 	add.w	r9, r4, #25
 8012b26:	e7f5      	b.n	8012b14 <_printf_i+0x1f8>
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1ac      	bne.n	8012a86 <_printf_i+0x16a>
 8012b2c:	7803      	ldrb	r3, [r0, #0]
 8012b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b36:	e76c      	b.n	8012a12 <_printf_i+0xf6>
 8012b38:	080182c4 	.word	0x080182c4
 8012b3c:	080182d5 	.word	0x080182d5

08012b40 <_scanf_float>:
 8012b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b44:	469a      	mov	sl, r3
 8012b46:	688b      	ldr	r3, [r1, #8]
 8012b48:	4616      	mov	r6, r2
 8012b4a:	1e5a      	subs	r2, r3, #1
 8012b4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b50:	b087      	sub	sp, #28
 8012b52:	bf83      	ittte	hi
 8012b54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012b58:	189b      	addhi	r3, r3, r2
 8012b5a:	9301      	strhi	r3, [sp, #4]
 8012b5c:	2300      	movls	r3, #0
 8012b5e:	bf86      	itte	hi
 8012b60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012b64:	608b      	strhi	r3, [r1, #8]
 8012b66:	9301      	strls	r3, [sp, #4]
 8012b68:	680b      	ldr	r3, [r1, #0]
 8012b6a:	4688      	mov	r8, r1
 8012b6c:	f04f 0b00 	mov.w	fp, #0
 8012b70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012b74:	f848 3b1c 	str.w	r3, [r8], #28
 8012b78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012b7c:	4607      	mov	r7, r0
 8012b7e:	460c      	mov	r4, r1
 8012b80:	4645      	mov	r5, r8
 8012b82:	465a      	mov	r2, fp
 8012b84:	46d9      	mov	r9, fp
 8012b86:	f8cd b008 	str.w	fp, [sp, #8]
 8012b8a:	68a1      	ldr	r1, [r4, #8]
 8012b8c:	b181      	cbz	r1, 8012bb0 <_scanf_float+0x70>
 8012b8e:	6833      	ldr	r3, [r6, #0]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	2b49      	cmp	r3, #73	; 0x49
 8012b94:	d071      	beq.n	8012c7a <_scanf_float+0x13a>
 8012b96:	d84d      	bhi.n	8012c34 <_scanf_float+0xf4>
 8012b98:	2b39      	cmp	r3, #57	; 0x39
 8012b9a:	d840      	bhi.n	8012c1e <_scanf_float+0xde>
 8012b9c:	2b31      	cmp	r3, #49	; 0x31
 8012b9e:	f080 8088 	bcs.w	8012cb2 <_scanf_float+0x172>
 8012ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8012ba4:	f000 8090 	beq.w	8012cc8 <_scanf_float+0x188>
 8012ba8:	d815      	bhi.n	8012bd6 <_scanf_float+0x96>
 8012baa:	2b2b      	cmp	r3, #43	; 0x2b
 8012bac:	f000 808c 	beq.w	8012cc8 <_scanf_float+0x188>
 8012bb0:	f1b9 0f00 	cmp.w	r9, #0
 8012bb4:	d003      	beq.n	8012bbe <_scanf_float+0x7e>
 8012bb6:	6823      	ldr	r3, [r4, #0]
 8012bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	3a01      	subs	r2, #1
 8012bc0:	2a01      	cmp	r2, #1
 8012bc2:	f200 80ea 	bhi.w	8012d9a <_scanf_float+0x25a>
 8012bc6:	4545      	cmp	r5, r8
 8012bc8:	f200 80dc 	bhi.w	8012d84 <_scanf_float+0x244>
 8012bcc:	2601      	movs	r6, #1
 8012bce:	4630      	mov	r0, r6
 8012bd0:	b007      	add	sp, #28
 8012bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8012bd8:	f000 809f 	beq.w	8012d1a <_scanf_float+0x1da>
 8012bdc:	2b30      	cmp	r3, #48	; 0x30
 8012bde:	d1e7      	bne.n	8012bb0 <_scanf_float+0x70>
 8012be0:	6820      	ldr	r0, [r4, #0]
 8012be2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012be6:	d064      	beq.n	8012cb2 <_scanf_float+0x172>
 8012be8:	9b01      	ldr	r3, [sp, #4]
 8012bea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012bee:	6020      	str	r0, [r4, #0]
 8012bf0:	f109 0901 	add.w	r9, r9, #1
 8012bf4:	b11b      	cbz	r3, 8012bfe <_scanf_float+0xbe>
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	3101      	adds	r1, #1
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	60a1      	str	r1, [r4, #8]
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	60a3      	str	r3, [r4, #8]
 8012c04:	6923      	ldr	r3, [r4, #16]
 8012c06:	3301      	adds	r3, #1
 8012c08:	6123      	str	r3, [r4, #16]
 8012c0a:	6873      	ldr	r3, [r6, #4]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	6073      	str	r3, [r6, #4]
 8012c12:	f340 80ac 	ble.w	8012d6e <_scanf_float+0x22e>
 8012c16:	6833      	ldr	r3, [r6, #0]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	6033      	str	r3, [r6, #0]
 8012c1c:	e7b5      	b.n	8012b8a <_scanf_float+0x4a>
 8012c1e:	2b45      	cmp	r3, #69	; 0x45
 8012c20:	f000 8085 	beq.w	8012d2e <_scanf_float+0x1ee>
 8012c24:	2b46      	cmp	r3, #70	; 0x46
 8012c26:	d06a      	beq.n	8012cfe <_scanf_float+0x1be>
 8012c28:	2b41      	cmp	r3, #65	; 0x41
 8012c2a:	d1c1      	bne.n	8012bb0 <_scanf_float+0x70>
 8012c2c:	2a01      	cmp	r2, #1
 8012c2e:	d1bf      	bne.n	8012bb0 <_scanf_float+0x70>
 8012c30:	2202      	movs	r2, #2
 8012c32:	e046      	b.n	8012cc2 <_scanf_float+0x182>
 8012c34:	2b65      	cmp	r3, #101	; 0x65
 8012c36:	d07a      	beq.n	8012d2e <_scanf_float+0x1ee>
 8012c38:	d818      	bhi.n	8012c6c <_scanf_float+0x12c>
 8012c3a:	2b54      	cmp	r3, #84	; 0x54
 8012c3c:	d066      	beq.n	8012d0c <_scanf_float+0x1cc>
 8012c3e:	d811      	bhi.n	8012c64 <_scanf_float+0x124>
 8012c40:	2b4e      	cmp	r3, #78	; 0x4e
 8012c42:	d1b5      	bne.n	8012bb0 <_scanf_float+0x70>
 8012c44:	2a00      	cmp	r2, #0
 8012c46:	d146      	bne.n	8012cd6 <_scanf_float+0x196>
 8012c48:	f1b9 0f00 	cmp.w	r9, #0
 8012c4c:	d145      	bne.n	8012cda <_scanf_float+0x19a>
 8012c4e:	6821      	ldr	r1, [r4, #0]
 8012c50:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c58:	d13f      	bne.n	8012cda <_scanf_float+0x19a>
 8012c5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c5e:	6021      	str	r1, [r4, #0]
 8012c60:	2201      	movs	r2, #1
 8012c62:	e02e      	b.n	8012cc2 <_scanf_float+0x182>
 8012c64:	2b59      	cmp	r3, #89	; 0x59
 8012c66:	d01e      	beq.n	8012ca6 <_scanf_float+0x166>
 8012c68:	2b61      	cmp	r3, #97	; 0x61
 8012c6a:	e7de      	b.n	8012c2a <_scanf_float+0xea>
 8012c6c:	2b6e      	cmp	r3, #110	; 0x6e
 8012c6e:	d0e9      	beq.n	8012c44 <_scanf_float+0x104>
 8012c70:	d815      	bhi.n	8012c9e <_scanf_float+0x15e>
 8012c72:	2b66      	cmp	r3, #102	; 0x66
 8012c74:	d043      	beq.n	8012cfe <_scanf_float+0x1be>
 8012c76:	2b69      	cmp	r3, #105	; 0x69
 8012c78:	d19a      	bne.n	8012bb0 <_scanf_float+0x70>
 8012c7a:	f1bb 0f00 	cmp.w	fp, #0
 8012c7e:	d138      	bne.n	8012cf2 <_scanf_float+0x1b2>
 8012c80:	f1b9 0f00 	cmp.w	r9, #0
 8012c84:	d197      	bne.n	8012bb6 <_scanf_float+0x76>
 8012c86:	6821      	ldr	r1, [r4, #0]
 8012c88:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c8c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c90:	d195      	bne.n	8012bbe <_scanf_float+0x7e>
 8012c92:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c96:	6021      	str	r1, [r4, #0]
 8012c98:	f04f 0b01 	mov.w	fp, #1
 8012c9c:	e011      	b.n	8012cc2 <_scanf_float+0x182>
 8012c9e:	2b74      	cmp	r3, #116	; 0x74
 8012ca0:	d034      	beq.n	8012d0c <_scanf_float+0x1cc>
 8012ca2:	2b79      	cmp	r3, #121	; 0x79
 8012ca4:	d184      	bne.n	8012bb0 <_scanf_float+0x70>
 8012ca6:	f1bb 0f07 	cmp.w	fp, #7
 8012caa:	d181      	bne.n	8012bb0 <_scanf_float+0x70>
 8012cac:	f04f 0b08 	mov.w	fp, #8
 8012cb0:	e007      	b.n	8012cc2 <_scanf_float+0x182>
 8012cb2:	eb12 0f0b 	cmn.w	r2, fp
 8012cb6:	f47f af7b 	bne.w	8012bb0 <_scanf_float+0x70>
 8012cba:	6821      	ldr	r1, [r4, #0]
 8012cbc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012cc0:	6021      	str	r1, [r4, #0]
 8012cc2:	702b      	strb	r3, [r5, #0]
 8012cc4:	3501      	adds	r5, #1
 8012cc6:	e79a      	b.n	8012bfe <_scanf_float+0xbe>
 8012cc8:	6821      	ldr	r1, [r4, #0]
 8012cca:	0608      	lsls	r0, r1, #24
 8012ccc:	f57f af70 	bpl.w	8012bb0 <_scanf_float+0x70>
 8012cd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012cd4:	e7f4      	b.n	8012cc0 <_scanf_float+0x180>
 8012cd6:	2a02      	cmp	r2, #2
 8012cd8:	d047      	beq.n	8012d6a <_scanf_float+0x22a>
 8012cda:	f1bb 0f01 	cmp.w	fp, #1
 8012cde:	d003      	beq.n	8012ce8 <_scanf_float+0x1a8>
 8012ce0:	f1bb 0f04 	cmp.w	fp, #4
 8012ce4:	f47f af64 	bne.w	8012bb0 <_scanf_float+0x70>
 8012ce8:	f10b 0b01 	add.w	fp, fp, #1
 8012cec:	fa5f fb8b 	uxtb.w	fp, fp
 8012cf0:	e7e7      	b.n	8012cc2 <_scanf_float+0x182>
 8012cf2:	f1bb 0f03 	cmp.w	fp, #3
 8012cf6:	d0f7      	beq.n	8012ce8 <_scanf_float+0x1a8>
 8012cf8:	f1bb 0f05 	cmp.w	fp, #5
 8012cfc:	e7f2      	b.n	8012ce4 <_scanf_float+0x1a4>
 8012cfe:	f1bb 0f02 	cmp.w	fp, #2
 8012d02:	f47f af55 	bne.w	8012bb0 <_scanf_float+0x70>
 8012d06:	f04f 0b03 	mov.w	fp, #3
 8012d0a:	e7da      	b.n	8012cc2 <_scanf_float+0x182>
 8012d0c:	f1bb 0f06 	cmp.w	fp, #6
 8012d10:	f47f af4e 	bne.w	8012bb0 <_scanf_float+0x70>
 8012d14:	f04f 0b07 	mov.w	fp, #7
 8012d18:	e7d3      	b.n	8012cc2 <_scanf_float+0x182>
 8012d1a:	6821      	ldr	r1, [r4, #0]
 8012d1c:	0588      	lsls	r0, r1, #22
 8012d1e:	f57f af47 	bpl.w	8012bb0 <_scanf_float+0x70>
 8012d22:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012d26:	6021      	str	r1, [r4, #0]
 8012d28:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d2c:	e7c9      	b.n	8012cc2 <_scanf_float+0x182>
 8012d2e:	6821      	ldr	r1, [r4, #0]
 8012d30:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012d34:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012d38:	d006      	beq.n	8012d48 <_scanf_float+0x208>
 8012d3a:	0548      	lsls	r0, r1, #21
 8012d3c:	f57f af38 	bpl.w	8012bb0 <_scanf_float+0x70>
 8012d40:	f1b9 0f00 	cmp.w	r9, #0
 8012d44:	f43f af3b 	beq.w	8012bbe <_scanf_float+0x7e>
 8012d48:	0588      	lsls	r0, r1, #22
 8012d4a:	bf58      	it	pl
 8012d4c:	9802      	ldrpl	r0, [sp, #8]
 8012d4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d52:	bf58      	it	pl
 8012d54:	eba9 0000 	subpl.w	r0, r9, r0
 8012d58:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012d5c:	bf58      	it	pl
 8012d5e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012d62:	6021      	str	r1, [r4, #0]
 8012d64:	f04f 0900 	mov.w	r9, #0
 8012d68:	e7ab      	b.n	8012cc2 <_scanf_float+0x182>
 8012d6a:	2203      	movs	r2, #3
 8012d6c:	e7a9      	b.n	8012cc2 <_scanf_float+0x182>
 8012d6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012d72:	9205      	str	r2, [sp, #20]
 8012d74:	4631      	mov	r1, r6
 8012d76:	4638      	mov	r0, r7
 8012d78:	4798      	blx	r3
 8012d7a:	9a05      	ldr	r2, [sp, #20]
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	f43f af04 	beq.w	8012b8a <_scanf_float+0x4a>
 8012d82:	e715      	b.n	8012bb0 <_scanf_float+0x70>
 8012d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012d8c:	4632      	mov	r2, r6
 8012d8e:	4638      	mov	r0, r7
 8012d90:	4798      	blx	r3
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	3b01      	subs	r3, #1
 8012d96:	6123      	str	r3, [r4, #16]
 8012d98:	e715      	b.n	8012bc6 <_scanf_float+0x86>
 8012d9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012d9e:	2b06      	cmp	r3, #6
 8012da0:	d80a      	bhi.n	8012db8 <_scanf_float+0x278>
 8012da2:	f1bb 0f02 	cmp.w	fp, #2
 8012da6:	d968      	bls.n	8012e7a <_scanf_float+0x33a>
 8012da8:	f1ab 0b03 	sub.w	fp, fp, #3
 8012dac:	fa5f fb8b 	uxtb.w	fp, fp
 8012db0:	eba5 0b0b 	sub.w	fp, r5, fp
 8012db4:	455d      	cmp	r5, fp
 8012db6:	d14b      	bne.n	8012e50 <_scanf_float+0x310>
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	05da      	lsls	r2, r3, #23
 8012dbc:	d51f      	bpl.n	8012dfe <_scanf_float+0x2be>
 8012dbe:	055b      	lsls	r3, r3, #21
 8012dc0:	d468      	bmi.n	8012e94 <_scanf_float+0x354>
 8012dc2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012dc6:	6923      	ldr	r3, [r4, #16]
 8012dc8:	2965      	cmp	r1, #101	; 0x65
 8012dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8012dce:	f105 3bff 	add.w	fp, r5, #4294967295
 8012dd2:	6123      	str	r3, [r4, #16]
 8012dd4:	d00d      	beq.n	8012df2 <_scanf_float+0x2b2>
 8012dd6:	2945      	cmp	r1, #69	; 0x45
 8012dd8:	d00b      	beq.n	8012df2 <_scanf_float+0x2b2>
 8012dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dde:	4632      	mov	r2, r6
 8012de0:	4638      	mov	r0, r7
 8012de2:	4798      	blx	r3
 8012de4:	6923      	ldr	r3, [r4, #16]
 8012de6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012dea:	3b01      	subs	r3, #1
 8012dec:	f1a5 0b02 	sub.w	fp, r5, #2
 8012df0:	6123      	str	r3, [r4, #16]
 8012df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012df6:	4632      	mov	r2, r6
 8012df8:	4638      	mov	r0, r7
 8012dfa:	4798      	blx	r3
 8012dfc:	465d      	mov	r5, fp
 8012dfe:	6826      	ldr	r6, [r4, #0]
 8012e00:	f016 0610 	ands.w	r6, r6, #16
 8012e04:	d17a      	bne.n	8012efc <_scanf_float+0x3bc>
 8012e06:	702e      	strb	r6, [r5, #0]
 8012e08:	6823      	ldr	r3, [r4, #0]
 8012e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e12:	d142      	bne.n	8012e9a <_scanf_float+0x35a>
 8012e14:	9b02      	ldr	r3, [sp, #8]
 8012e16:	eba9 0303 	sub.w	r3, r9, r3
 8012e1a:	425a      	negs	r2, r3
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d149      	bne.n	8012eb4 <_scanf_float+0x374>
 8012e20:	2200      	movs	r2, #0
 8012e22:	4641      	mov	r1, r8
 8012e24:	4638      	mov	r0, r7
 8012e26:	f000 ff23 	bl	8013c70 <_strtod_r>
 8012e2a:	6825      	ldr	r5, [r4, #0]
 8012e2c:	f8da 3000 	ldr.w	r3, [sl]
 8012e30:	f015 0f02 	tst.w	r5, #2
 8012e34:	f103 0204 	add.w	r2, r3, #4
 8012e38:	ec59 8b10 	vmov	r8, r9, d0
 8012e3c:	f8ca 2000 	str.w	r2, [sl]
 8012e40:	d043      	beq.n	8012eca <_scanf_float+0x38a>
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	e9c3 8900 	strd	r8, r9, [r3]
 8012e48:	68e3      	ldr	r3, [r4, #12]
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	60e3      	str	r3, [r4, #12]
 8012e4e:	e6be      	b.n	8012bce <_scanf_float+0x8e>
 8012e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e58:	4632      	mov	r2, r6
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	4798      	blx	r3
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	3b01      	subs	r3, #1
 8012e62:	6123      	str	r3, [r4, #16]
 8012e64:	e7a6      	b.n	8012db4 <_scanf_float+0x274>
 8012e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e6e:	4632      	mov	r2, r6
 8012e70:	4638      	mov	r0, r7
 8012e72:	4798      	blx	r3
 8012e74:	6923      	ldr	r3, [r4, #16]
 8012e76:	3b01      	subs	r3, #1
 8012e78:	6123      	str	r3, [r4, #16]
 8012e7a:	4545      	cmp	r5, r8
 8012e7c:	d8f3      	bhi.n	8012e66 <_scanf_float+0x326>
 8012e7e:	e6a5      	b.n	8012bcc <_scanf_float+0x8c>
 8012e80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e88:	4632      	mov	r2, r6
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	4798      	blx	r3
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	3b01      	subs	r3, #1
 8012e92:	6123      	str	r3, [r4, #16]
 8012e94:	4545      	cmp	r5, r8
 8012e96:	d8f3      	bhi.n	8012e80 <_scanf_float+0x340>
 8012e98:	e698      	b.n	8012bcc <_scanf_float+0x8c>
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d0bf      	beq.n	8012e20 <_scanf_float+0x2e0>
 8012ea0:	9904      	ldr	r1, [sp, #16]
 8012ea2:	230a      	movs	r3, #10
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	3101      	adds	r1, #1
 8012ea8:	4638      	mov	r0, r7
 8012eaa:	f000 ff6d 	bl	8013d88 <_strtol_r>
 8012eae:	9b03      	ldr	r3, [sp, #12]
 8012eb0:	9d04      	ldr	r5, [sp, #16]
 8012eb2:	1ac2      	subs	r2, r0, r3
 8012eb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012eb8:	429d      	cmp	r5, r3
 8012eba:	bf28      	it	cs
 8012ebc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012ec0:	490f      	ldr	r1, [pc, #60]	; (8012f00 <_scanf_float+0x3c0>)
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f000 f868 	bl	8012f98 <siprintf>
 8012ec8:	e7aa      	b.n	8012e20 <_scanf_float+0x2e0>
 8012eca:	f015 0504 	ands.w	r5, r5, #4
 8012ece:	d1b8      	bne.n	8012e42 <_scanf_float+0x302>
 8012ed0:	681f      	ldr	r7, [r3, #0]
 8012ed2:	ee10 2a10 	vmov	r2, s0
 8012ed6:	464b      	mov	r3, r9
 8012ed8:	ee10 0a10 	vmov	r0, s0
 8012edc:	4649      	mov	r1, r9
 8012ede:	f7ed fe35 	bl	8000b4c <__aeabi_dcmpun>
 8012ee2:	b128      	cbz	r0, 8012ef0 <_scanf_float+0x3b0>
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f000 f81d 	bl	8012f24 <nanf>
 8012eea:	ed87 0a00 	vstr	s0, [r7]
 8012eee:	e7ab      	b.n	8012e48 <_scanf_float+0x308>
 8012ef0:	4640      	mov	r0, r8
 8012ef2:	4649      	mov	r1, r9
 8012ef4:	f7ed fe88 	bl	8000c08 <__aeabi_d2f>
 8012ef8:	6038      	str	r0, [r7, #0]
 8012efa:	e7a5      	b.n	8012e48 <_scanf_float+0x308>
 8012efc:	2600      	movs	r6, #0
 8012efe:	e666      	b.n	8012bce <_scanf_float+0x8e>
 8012f00:	080182e6 	.word	0x080182e6

08012f04 <_sbrk_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4c06      	ldr	r4, [pc, #24]	; (8012f20 <_sbrk_r+0x1c>)
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	f7f4 fdac 	bl	8007a6c <_sbrk>
 8012f14:	1c43      	adds	r3, r0, #1
 8012f16:	d102      	bne.n	8012f1e <_sbrk_r+0x1a>
 8012f18:	6823      	ldr	r3, [r4, #0]
 8012f1a:	b103      	cbz	r3, 8012f1e <_sbrk_r+0x1a>
 8012f1c:	602b      	str	r3, [r5, #0]
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	20006b50 	.word	0x20006b50

08012f24 <nanf>:
 8012f24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f2c <nanf+0x8>
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	7fc00000 	.word	0x7fc00000

08012f30 <sniprintf>:
 8012f30:	b40c      	push	{r2, r3}
 8012f32:	b530      	push	{r4, r5, lr}
 8012f34:	4b17      	ldr	r3, [pc, #92]	; (8012f94 <sniprintf+0x64>)
 8012f36:	1e0c      	subs	r4, r1, #0
 8012f38:	b09d      	sub	sp, #116	; 0x74
 8012f3a:	681d      	ldr	r5, [r3, #0]
 8012f3c:	da08      	bge.n	8012f50 <sniprintf+0x20>
 8012f3e:	238b      	movs	r3, #139	; 0x8b
 8012f40:	602b      	str	r3, [r5, #0]
 8012f42:	f04f 30ff 	mov.w	r0, #4294967295
 8012f46:	b01d      	add	sp, #116	; 0x74
 8012f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f4c:	b002      	add	sp, #8
 8012f4e:	4770      	bx	lr
 8012f50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012f54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012f58:	bf14      	ite	ne
 8012f5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012f5e:	4623      	moveq	r3, r4
 8012f60:	9304      	str	r3, [sp, #16]
 8012f62:	9307      	str	r3, [sp, #28]
 8012f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f68:	9002      	str	r0, [sp, #8]
 8012f6a:	9006      	str	r0, [sp, #24]
 8012f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012f70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012f72:	ab21      	add	r3, sp, #132	; 0x84
 8012f74:	a902      	add	r1, sp, #8
 8012f76:	4628      	mov	r0, r5
 8012f78:	9301      	str	r3, [sp, #4]
 8012f7a:	f002 fd21 	bl	80159c0 <_svfiprintf_r>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	bfbc      	itt	lt
 8012f82:	238b      	movlt	r3, #139	; 0x8b
 8012f84:	602b      	strlt	r3, [r5, #0]
 8012f86:	2c00      	cmp	r4, #0
 8012f88:	d0dd      	beq.n	8012f46 <sniprintf+0x16>
 8012f8a:	9b02      	ldr	r3, [sp, #8]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	701a      	strb	r2, [r3, #0]
 8012f90:	e7d9      	b.n	8012f46 <sniprintf+0x16>
 8012f92:	bf00      	nop
 8012f94:	20000e34 	.word	0x20000e34

08012f98 <siprintf>:
 8012f98:	b40e      	push	{r1, r2, r3}
 8012f9a:	b500      	push	{lr}
 8012f9c:	b09c      	sub	sp, #112	; 0x70
 8012f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8012fa0:	9002      	str	r0, [sp, #8]
 8012fa2:	9006      	str	r0, [sp, #24]
 8012fa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012fa8:	4809      	ldr	r0, [pc, #36]	; (8012fd0 <siprintf+0x38>)
 8012faa:	9107      	str	r1, [sp, #28]
 8012fac:	9104      	str	r1, [sp, #16]
 8012fae:	4909      	ldr	r1, [pc, #36]	; (8012fd4 <siprintf+0x3c>)
 8012fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fb4:	9105      	str	r1, [sp, #20]
 8012fb6:	6800      	ldr	r0, [r0, #0]
 8012fb8:	9301      	str	r3, [sp, #4]
 8012fba:	a902      	add	r1, sp, #8
 8012fbc:	f002 fd00 	bl	80159c0 <_svfiprintf_r>
 8012fc0:	9b02      	ldr	r3, [sp, #8]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	701a      	strb	r2, [r3, #0]
 8012fc6:	b01c      	add	sp, #112	; 0x70
 8012fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fcc:	b003      	add	sp, #12
 8012fce:	4770      	bx	lr
 8012fd0:	20000e34 	.word	0x20000e34
 8012fd4:	ffff0208 	.word	0xffff0208

08012fd8 <siscanf>:
 8012fd8:	b40e      	push	{r1, r2, r3}
 8012fda:	b530      	push	{r4, r5, lr}
 8012fdc:	b09c      	sub	sp, #112	; 0x70
 8012fde:	ac1f      	add	r4, sp, #124	; 0x7c
 8012fe0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012fe4:	f854 5b04 	ldr.w	r5, [r4], #4
 8012fe8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012fec:	9002      	str	r0, [sp, #8]
 8012fee:	9006      	str	r0, [sp, #24]
 8012ff0:	f7ed f8f8 	bl	80001e4 <strlen>
 8012ff4:	4b0b      	ldr	r3, [pc, #44]	; (8013024 <siscanf+0x4c>)
 8012ff6:	9003      	str	r0, [sp, #12]
 8012ff8:	9007      	str	r0, [sp, #28]
 8012ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ffc:	480a      	ldr	r0, [pc, #40]	; (8013028 <siscanf+0x50>)
 8012ffe:	9401      	str	r4, [sp, #4]
 8013000:	2300      	movs	r3, #0
 8013002:	930f      	str	r3, [sp, #60]	; 0x3c
 8013004:	9314      	str	r3, [sp, #80]	; 0x50
 8013006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801300a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801300e:	462a      	mov	r2, r5
 8013010:	4623      	mov	r3, r4
 8013012:	a902      	add	r1, sp, #8
 8013014:	6800      	ldr	r0, [r0, #0]
 8013016:	f002 fe25 	bl	8015c64 <__ssvfiscanf_r>
 801301a:	b01c      	add	sp, #112	; 0x70
 801301c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013020:	b003      	add	sp, #12
 8013022:	4770      	bx	lr
 8013024:	0801302d 	.word	0x0801302d
 8013028:	20000e34 	.word	0x20000e34

0801302c <__seofread>:
 801302c:	2000      	movs	r0, #0
 801302e:	4770      	bx	lr

08013030 <strcat>:
 8013030:	b510      	push	{r4, lr}
 8013032:	4603      	mov	r3, r0
 8013034:	781a      	ldrb	r2, [r3, #0]
 8013036:	1c5c      	adds	r4, r3, #1
 8013038:	b93a      	cbnz	r2, 801304a <strcat+0x1a>
 801303a:	3b01      	subs	r3, #1
 801303c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013040:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013044:	2a00      	cmp	r2, #0
 8013046:	d1f9      	bne.n	801303c <strcat+0xc>
 8013048:	bd10      	pop	{r4, pc}
 801304a:	4623      	mov	r3, r4
 801304c:	e7f2      	b.n	8013034 <strcat+0x4>

0801304e <sulp>:
 801304e:	b570      	push	{r4, r5, r6, lr}
 8013050:	4604      	mov	r4, r0
 8013052:	460d      	mov	r5, r1
 8013054:	ec45 4b10 	vmov	d0, r4, r5
 8013058:	4616      	mov	r6, r2
 801305a:	f002 fb15 	bl	8015688 <__ulp>
 801305e:	ec51 0b10 	vmov	r0, r1, d0
 8013062:	b17e      	cbz	r6, 8013084 <sulp+0x36>
 8013064:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013068:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801306c:	2b00      	cmp	r3, #0
 801306e:	dd09      	ble.n	8013084 <sulp+0x36>
 8013070:	051b      	lsls	r3, r3, #20
 8013072:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013076:	2400      	movs	r4, #0
 8013078:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801307c:	4622      	mov	r2, r4
 801307e:	462b      	mov	r3, r5
 8013080:	f7ed faca 	bl	8000618 <__aeabi_dmul>
 8013084:	bd70      	pop	{r4, r5, r6, pc}
	...

08013088 <_strtod_l>:
 8013088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	461f      	mov	r7, r3
 801308e:	b0a1      	sub	sp, #132	; 0x84
 8013090:	2300      	movs	r3, #0
 8013092:	4681      	mov	r9, r0
 8013094:	4638      	mov	r0, r7
 8013096:	460e      	mov	r6, r1
 8013098:	9217      	str	r2, [sp, #92]	; 0x5c
 801309a:	931c      	str	r3, [sp, #112]	; 0x70
 801309c:	f002 f804 	bl	80150a8 <__localeconv_l>
 80130a0:	4680      	mov	r8, r0
 80130a2:	6800      	ldr	r0, [r0, #0]
 80130a4:	f7ed f89e 	bl	80001e4 <strlen>
 80130a8:	f04f 0a00 	mov.w	sl, #0
 80130ac:	4604      	mov	r4, r0
 80130ae:	f04f 0b00 	mov.w	fp, #0
 80130b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80130b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130b6:	781a      	ldrb	r2, [r3, #0]
 80130b8:	2a0d      	cmp	r2, #13
 80130ba:	d832      	bhi.n	8013122 <_strtod_l+0x9a>
 80130bc:	2a09      	cmp	r2, #9
 80130be:	d236      	bcs.n	801312e <_strtod_l+0xa6>
 80130c0:	2a00      	cmp	r2, #0
 80130c2:	d03e      	beq.n	8013142 <_strtod_l+0xba>
 80130c4:	2300      	movs	r3, #0
 80130c6:	930d      	str	r3, [sp, #52]	; 0x34
 80130c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80130ca:	782b      	ldrb	r3, [r5, #0]
 80130cc:	2b30      	cmp	r3, #48	; 0x30
 80130ce:	f040 80ac 	bne.w	801322a <_strtod_l+0x1a2>
 80130d2:	786b      	ldrb	r3, [r5, #1]
 80130d4:	2b58      	cmp	r3, #88	; 0x58
 80130d6:	d001      	beq.n	80130dc <_strtod_l+0x54>
 80130d8:	2b78      	cmp	r3, #120	; 0x78
 80130da:	d167      	bne.n	80131ac <_strtod_l+0x124>
 80130dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130de:	9301      	str	r3, [sp, #4]
 80130e0:	ab1c      	add	r3, sp, #112	; 0x70
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	9702      	str	r7, [sp, #8]
 80130e6:	ab1d      	add	r3, sp, #116	; 0x74
 80130e8:	4a88      	ldr	r2, [pc, #544]	; (801330c <_strtod_l+0x284>)
 80130ea:	a91b      	add	r1, sp, #108	; 0x6c
 80130ec:	4648      	mov	r0, r9
 80130ee:	f001 fcf2 	bl	8014ad6 <__gethex>
 80130f2:	f010 0407 	ands.w	r4, r0, #7
 80130f6:	4606      	mov	r6, r0
 80130f8:	d005      	beq.n	8013106 <_strtod_l+0x7e>
 80130fa:	2c06      	cmp	r4, #6
 80130fc:	d12b      	bne.n	8013156 <_strtod_l+0xce>
 80130fe:	3501      	adds	r5, #1
 8013100:	2300      	movs	r3, #0
 8013102:	951b      	str	r5, [sp, #108]	; 0x6c
 8013104:	930d      	str	r3, [sp, #52]	; 0x34
 8013106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013108:	2b00      	cmp	r3, #0
 801310a:	f040 859a 	bne.w	8013c42 <_strtod_l+0xbba>
 801310e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013110:	b1e3      	cbz	r3, 801314c <_strtod_l+0xc4>
 8013112:	4652      	mov	r2, sl
 8013114:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013118:	ec43 2b10 	vmov	d0, r2, r3
 801311c:	b021      	add	sp, #132	; 0x84
 801311e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013122:	2a2b      	cmp	r2, #43	; 0x2b
 8013124:	d015      	beq.n	8013152 <_strtod_l+0xca>
 8013126:	2a2d      	cmp	r2, #45	; 0x2d
 8013128:	d004      	beq.n	8013134 <_strtod_l+0xac>
 801312a:	2a20      	cmp	r2, #32
 801312c:	d1ca      	bne.n	80130c4 <_strtod_l+0x3c>
 801312e:	3301      	adds	r3, #1
 8013130:	931b      	str	r3, [sp, #108]	; 0x6c
 8013132:	e7bf      	b.n	80130b4 <_strtod_l+0x2c>
 8013134:	2201      	movs	r2, #1
 8013136:	920d      	str	r2, [sp, #52]	; 0x34
 8013138:	1c5a      	adds	r2, r3, #1
 801313a:	921b      	str	r2, [sp, #108]	; 0x6c
 801313c:	785b      	ldrb	r3, [r3, #1]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1c2      	bne.n	80130c8 <_strtod_l+0x40>
 8013142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013144:	961b      	str	r6, [sp, #108]	; 0x6c
 8013146:	2b00      	cmp	r3, #0
 8013148:	f040 8579 	bne.w	8013c3e <_strtod_l+0xbb6>
 801314c:	4652      	mov	r2, sl
 801314e:	465b      	mov	r3, fp
 8013150:	e7e2      	b.n	8013118 <_strtod_l+0x90>
 8013152:	2200      	movs	r2, #0
 8013154:	e7ef      	b.n	8013136 <_strtod_l+0xae>
 8013156:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013158:	b13a      	cbz	r2, 801316a <_strtod_l+0xe2>
 801315a:	2135      	movs	r1, #53	; 0x35
 801315c:	a81e      	add	r0, sp, #120	; 0x78
 801315e:	f002 fb8b 	bl	8015878 <__copybits>
 8013162:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013164:	4648      	mov	r0, r9
 8013166:	f001 fff7 	bl	8015158 <_Bfree>
 801316a:	3c01      	subs	r4, #1
 801316c:	2c04      	cmp	r4, #4
 801316e:	d806      	bhi.n	801317e <_strtod_l+0xf6>
 8013170:	e8df f004 	tbb	[pc, r4]
 8013174:	1714030a 	.word	0x1714030a
 8013178:	0a          	.byte	0x0a
 8013179:	00          	.byte	0x00
 801317a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801317e:	0730      	lsls	r0, r6, #28
 8013180:	d5c1      	bpl.n	8013106 <_strtod_l+0x7e>
 8013182:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013186:	e7be      	b.n	8013106 <_strtod_l+0x7e>
 8013188:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801318c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801318e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013192:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013196:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801319a:	e7f0      	b.n	801317e <_strtod_l+0xf6>
 801319c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013310 <_strtod_l+0x288>
 80131a0:	e7ed      	b.n	801317e <_strtod_l+0xf6>
 80131a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80131a6:	f04f 3aff 	mov.w	sl, #4294967295
 80131aa:	e7e8      	b.n	801317e <_strtod_l+0xf6>
 80131ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131ae:	1c5a      	adds	r2, r3, #1
 80131b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80131b2:	785b      	ldrb	r3, [r3, #1]
 80131b4:	2b30      	cmp	r3, #48	; 0x30
 80131b6:	d0f9      	beq.n	80131ac <_strtod_l+0x124>
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d0a4      	beq.n	8013106 <_strtod_l+0x7e>
 80131bc:	2301      	movs	r3, #1
 80131be:	2500      	movs	r5, #0
 80131c0:	9306      	str	r3, [sp, #24]
 80131c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131c4:	9308      	str	r3, [sp, #32]
 80131c6:	9507      	str	r5, [sp, #28]
 80131c8:	9505      	str	r5, [sp, #20]
 80131ca:	220a      	movs	r2, #10
 80131cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80131ce:	7807      	ldrb	r7, [r0, #0]
 80131d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80131d4:	b2d9      	uxtb	r1, r3
 80131d6:	2909      	cmp	r1, #9
 80131d8:	d929      	bls.n	801322e <_strtod_l+0x1a6>
 80131da:	4622      	mov	r2, r4
 80131dc:	f8d8 1000 	ldr.w	r1, [r8]
 80131e0:	f003 f81a 	bl	8016218 <strncmp>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d031      	beq.n	801324c <_strtod_l+0x1c4>
 80131e8:	2000      	movs	r0, #0
 80131ea:	9c05      	ldr	r4, [sp, #20]
 80131ec:	9004      	str	r0, [sp, #16]
 80131ee:	463b      	mov	r3, r7
 80131f0:	4602      	mov	r2, r0
 80131f2:	2b65      	cmp	r3, #101	; 0x65
 80131f4:	d001      	beq.n	80131fa <_strtod_l+0x172>
 80131f6:	2b45      	cmp	r3, #69	; 0x45
 80131f8:	d114      	bne.n	8013224 <_strtod_l+0x19c>
 80131fa:	b924      	cbnz	r4, 8013206 <_strtod_l+0x17e>
 80131fc:	b910      	cbnz	r0, 8013204 <_strtod_l+0x17c>
 80131fe:	9b06      	ldr	r3, [sp, #24]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d09e      	beq.n	8013142 <_strtod_l+0xba>
 8013204:	2400      	movs	r4, #0
 8013206:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013208:	1c73      	adds	r3, r6, #1
 801320a:	931b      	str	r3, [sp, #108]	; 0x6c
 801320c:	7873      	ldrb	r3, [r6, #1]
 801320e:	2b2b      	cmp	r3, #43	; 0x2b
 8013210:	d078      	beq.n	8013304 <_strtod_l+0x27c>
 8013212:	2b2d      	cmp	r3, #45	; 0x2d
 8013214:	d070      	beq.n	80132f8 <_strtod_l+0x270>
 8013216:	f04f 0c00 	mov.w	ip, #0
 801321a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801321e:	2f09      	cmp	r7, #9
 8013220:	d97c      	bls.n	801331c <_strtod_l+0x294>
 8013222:	961b      	str	r6, [sp, #108]	; 0x6c
 8013224:	f04f 0e00 	mov.w	lr, #0
 8013228:	e09a      	b.n	8013360 <_strtod_l+0x2d8>
 801322a:	2300      	movs	r3, #0
 801322c:	e7c7      	b.n	80131be <_strtod_l+0x136>
 801322e:	9905      	ldr	r1, [sp, #20]
 8013230:	2908      	cmp	r1, #8
 8013232:	bfdd      	ittte	le
 8013234:	9907      	ldrle	r1, [sp, #28]
 8013236:	fb02 3301 	mlale	r3, r2, r1, r3
 801323a:	9307      	strle	r3, [sp, #28]
 801323c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013240:	9b05      	ldr	r3, [sp, #20]
 8013242:	3001      	adds	r0, #1
 8013244:	3301      	adds	r3, #1
 8013246:	9305      	str	r3, [sp, #20]
 8013248:	901b      	str	r0, [sp, #108]	; 0x6c
 801324a:	e7bf      	b.n	80131cc <_strtod_l+0x144>
 801324c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801324e:	191a      	adds	r2, r3, r4
 8013250:	921b      	str	r2, [sp, #108]	; 0x6c
 8013252:	9a05      	ldr	r2, [sp, #20]
 8013254:	5d1b      	ldrb	r3, [r3, r4]
 8013256:	2a00      	cmp	r2, #0
 8013258:	d037      	beq.n	80132ca <_strtod_l+0x242>
 801325a:	9c05      	ldr	r4, [sp, #20]
 801325c:	4602      	mov	r2, r0
 801325e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013262:	2909      	cmp	r1, #9
 8013264:	d913      	bls.n	801328e <_strtod_l+0x206>
 8013266:	2101      	movs	r1, #1
 8013268:	9104      	str	r1, [sp, #16]
 801326a:	e7c2      	b.n	80131f2 <_strtod_l+0x16a>
 801326c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801326e:	1c5a      	adds	r2, r3, #1
 8013270:	921b      	str	r2, [sp, #108]	; 0x6c
 8013272:	785b      	ldrb	r3, [r3, #1]
 8013274:	3001      	adds	r0, #1
 8013276:	2b30      	cmp	r3, #48	; 0x30
 8013278:	d0f8      	beq.n	801326c <_strtod_l+0x1e4>
 801327a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801327e:	2a08      	cmp	r2, #8
 8013280:	f200 84e4 	bhi.w	8013c4c <_strtod_l+0xbc4>
 8013284:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013286:	9208      	str	r2, [sp, #32]
 8013288:	4602      	mov	r2, r0
 801328a:	2000      	movs	r0, #0
 801328c:	4604      	mov	r4, r0
 801328e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013292:	f100 0101 	add.w	r1, r0, #1
 8013296:	d012      	beq.n	80132be <_strtod_l+0x236>
 8013298:	440a      	add	r2, r1
 801329a:	eb00 0c04 	add.w	ip, r0, r4
 801329e:	4621      	mov	r1, r4
 80132a0:	270a      	movs	r7, #10
 80132a2:	458c      	cmp	ip, r1
 80132a4:	d113      	bne.n	80132ce <_strtod_l+0x246>
 80132a6:	1821      	adds	r1, r4, r0
 80132a8:	2908      	cmp	r1, #8
 80132aa:	f104 0401 	add.w	r4, r4, #1
 80132ae:	4404      	add	r4, r0
 80132b0:	dc19      	bgt.n	80132e6 <_strtod_l+0x25e>
 80132b2:	9b07      	ldr	r3, [sp, #28]
 80132b4:	210a      	movs	r1, #10
 80132b6:	fb01 e303 	mla	r3, r1, r3, lr
 80132ba:	9307      	str	r3, [sp, #28]
 80132bc:	2100      	movs	r1, #0
 80132be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132c0:	1c58      	adds	r0, r3, #1
 80132c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80132c4:	785b      	ldrb	r3, [r3, #1]
 80132c6:	4608      	mov	r0, r1
 80132c8:	e7c9      	b.n	801325e <_strtod_l+0x1d6>
 80132ca:	9805      	ldr	r0, [sp, #20]
 80132cc:	e7d3      	b.n	8013276 <_strtod_l+0x1ee>
 80132ce:	2908      	cmp	r1, #8
 80132d0:	f101 0101 	add.w	r1, r1, #1
 80132d4:	dc03      	bgt.n	80132de <_strtod_l+0x256>
 80132d6:	9b07      	ldr	r3, [sp, #28]
 80132d8:	437b      	muls	r3, r7
 80132da:	9307      	str	r3, [sp, #28]
 80132dc:	e7e1      	b.n	80132a2 <_strtod_l+0x21a>
 80132de:	2910      	cmp	r1, #16
 80132e0:	bfd8      	it	le
 80132e2:	437d      	mulle	r5, r7
 80132e4:	e7dd      	b.n	80132a2 <_strtod_l+0x21a>
 80132e6:	2c10      	cmp	r4, #16
 80132e8:	bfdc      	itt	le
 80132ea:	210a      	movle	r1, #10
 80132ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80132f0:	e7e4      	b.n	80132bc <_strtod_l+0x234>
 80132f2:	2301      	movs	r3, #1
 80132f4:	9304      	str	r3, [sp, #16]
 80132f6:	e781      	b.n	80131fc <_strtod_l+0x174>
 80132f8:	f04f 0c01 	mov.w	ip, #1
 80132fc:	1cb3      	adds	r3, r6, #2
 80132fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8013300:	78b3      	ldrb	r3, [r6, #2]
 8013302:	e78a      	b.n	801321a <_strtod_l+0x192>
 8013304:	f04f 0c00 	mov.w	ip, #0
 8013308:	e7f8      	b.n	80132fc <_strtod_l+0x274>
 801330a:	bf00      	nop
 801330c:	080182ec 	.word	0x080182ec
 8013310:	7ff00000 	.word	0x7ff00000
 8013314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013316:	1c5f      	adds	r7, r3, #1
 8013318:	971b      	str	r7, [sp, #108]	; 0x6c
 801331a:	785b      	ldrb	r3, [r3, #1]
 801331c:	2b30      	cmp	r3, #48	; 0x30
 801331e:	d0f9      	beq.n	8013314 <_strtod_l+0x28c>
 8013320:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013324:	2f08      	cmp	r7, #8
 8013326:	f63f af7d 	bhi.w	8013224 <_strtod_l+0x19c>
 801332a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801332e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013330:	930a      	str	r3, [sp, #40]	; 0x28
 8013332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013334:	1c5f      	adds	r7, r3, #1
 8013336:	971b      	str	r7, [sp, #108]	; 0x6c
 8013338:	785b      	ldrb	r3, [r3, #1]
 801333a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801333e:	f1b8 0f09 	cmp.w	r8, #9
 8013342:	d937      	bls.n	80133b4 <_strtod_l+0x32c>
 8013344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013346:	1a7f      	subs	r7, r7, r1
 8013348:	2f08      	cmp	r7, #8
 801334a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801334e:	dc37      	bgt.n	80133c0 <_strtod_l+0x338>
 8013350:	45be      	cmp	lr, r7
 8013352:	bfa8      	it	ge
 8013354:	46be      	movge	lr, r7
 8013356:	f1bc 0f00 	cmp.w	ip, #0
 801335a:	d001      	beq.n	8013360 <_strtod_l+0x2d8>
 801335c:	f1ce 0e00 	rsb	lr, lr, #0
 8013360:	2c00      	cmp	r4, #0
 8013362:	d151      	bne.n	8013408 <_strtod_l+0x380>
 8013364:	2800      	cmp	r0, #0
 8013366:	f47f aece 	bne.w	8013106 <_strtod_l+0x7e>
 801336a:	9a06      	ldr	r2, [sp, #24]
 801336c:	2a00      	cmp	r2, #0
 801336e:	f47f aeca 	bne.w	8013106 <_strtod_l+0x7e>
 8013372:	9a04      	ldr	r2, [sp, #16]
 8013374:	2a00      	cmp	r2, #0
 8013376:	f47f aee4 	bne.w	8013142 <_strtod_l+0xba>
 801337a:	2b4e      	cmp	r3, #78	; 0x4e
 801337c:	d027      	beq.n	80133ce <_strtod_l+0x346>
 801337e:	dc21      	bgt.n	80133c4 <_strtod_l+0x33c>
 8013380:	2b49      	cmp	r3, #73	; 0x49
 8013382:	f47f aede 	bne.w	8013142 <_strtod_l+0xba>
 8013386:	49a0      	ldr	r1, [pc, #640]	; (8013608 <_strtod_l+0x580>)
 8013388:	a81b      	add	r0, sp, #108	; 0x6c
 801338a:	f001 fdd7 	bl	8014f3c <__match>
 801338e:	2800      	cmp	r0, #0
 8013390:	f43f aed7 	beq.w	8013142 <_strtod_l+0xba>
 8013394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013396:	499d      	ldr	r1, [pc, #628]	; (801360c <_strtod_l+0x584>)
 8013398:	3b01      	subs	r3, #1
 801339a:	a81b      	add	r0, sp, #108	; 0x6c
 801339c:	931b      	str	r3, [sp, #108]	; 0x6c
 801339e:	f001 fdcd 	bl	8014f3c <__match>
 80133a2:	b910      	cbnz	r0, 80133aa <_strtod_l+0x322>
 80133a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133a6:	3301      	adds	r3, #1
 80133a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80133aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013620 <_strtod_l+0x598>
 80133ae:	f04f 0a00 	mov.w	sl, #0
 80133b2:	e6a8      	b.n	8013106 <_strtod_l+0x7e>
 80133b4:	210a      	movs	r1, #10
 80133b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80133ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80133be:	e7b8      	b.n	8013332 <_strtod_l+0x2aa>
 80133c0:	46be      	mov	lr, r7
 80133c2:	e7c8      	b.n	8013356 <_strtod_l+0x2ce>
 80133c4:	2b69      	cmp	r3, #105	; 0x69
 80133c6:	d0de      	beq.n	8013386 <_strtod_l+0x2fe>
 80133c8:	2b6e      	cmp	r3, #110	; 0x6e
 80133ca:	f47f aeba 	bne.w	8013142 <_strtod_l+0xba>
 80133ce:	4990      	ldr	r1, [pc, #576]	; (8013610 <_strtod_l+0x588>)
 80133d0:	a81b      	add	r0, sp, #108	; 0x6c
 80133d2:	f001 fdb3 	bl	8014f3c <__match>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	f43f aeb3 	beq.w	8013142 <_strtod_l+0xba>
 80133dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b28      	cmp	r3, #40	; 0x28
 80133e2:	d10e      	bne.n	8013402 <_strtod_l+0x37a>
 80133e4:	aa1e      	add	r2, sp, #120	; 0x78
 80133e6:	498b      	ldr	r1, [pc, #556]	; (8013614 <_strtod_l+0x58c>)
 80133e8:	a81b      	add	r0, sp, #108	; 0x6c
 80133ea:	f001 fdbb 	bl	8014f64 <__hexnan>
 80133ee:	2805      	cmp	r0, #5
 80133f0:	d107      	bne.n	8013402 <_strtod_l+0x37a>
 80133f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80133f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80133f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80133fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013400:	e681      	b.n	8013106 <_strtod_l+0x7e>
 8013402:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013628 <_strtod_l+0x5a0>
 8013406:	e7d2      	b.n	80133ae <_strtod_l+0x326>
 8013408:	ebae 0302 	sub.w	r3, lr, r2
 801340c:	9306      	str	r3, [sp, #24]
 801340e:	9b05      	ldr	r3, [sp, #20]
 8013410:	9807      	ldr	r0, [sp, #28]
 8013412:	2b00      	cmp	r3, #0
 8013414:	bf08      	it	eq
 8013416:	4623      	moveq	r3, r4
 8013418:	2c10      	cmp	r4, #16
 801341a:	9305      	str	r3, [sp, #20]
 801341c:	46a0      	mov	r8, r4
 801341e:	bfa8      	it	ge
 8013420:	f04f 0810 	movge.w	r8, #16
 8013424:	f7ed f87e 	bl	8000524 <__aeabi_ui2d>
 8013428:	2c09      	cmp	r4, #9
 801342a:	4682      	mov	sl, r0
 801342c:	468b      	mov	fp, r1
 801342e:	dc13      	bgt.n	8013458 <_strtod_l+0x3d0>
 8013430:	9b06      	ldr	r3, [sp, #24]
 8013432:	2b00      	cmp	r3, #0
 8013434:	f43f ae67 	beq.w	8013106 <_strtod_l+0x7e>
 8013438:	9b06      	ldr	r3, [sp, #24]
 801343a:	dd7a      	ble.n	8013532 <_strtod_l+0x4aa>
 801343c:	2b16      	cmp	r3, #22
 801343e:	dc61      	bgt.n	8013504 <_strtod_l+0x47c>
 8013440:	4a75      	ldr	r2, [pc, #468]	; (8013618 <_strtod_l+0x590>)
 8013442:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013446:	e9de 0100 	ldrd	r0, r1, [lr]
 801344a:	4652      	mov	r2, sl
 801344c:	465b      	mov	r3, fp
 801344e:	f7ed f8e3 	bl	8000618 <__aeabi_dmul>
 8013452:	4682      	mov	sl, r0
 8013454:	468b      	mov	fp, r1
 8013456:	e656      	b.n	8013106 <_strtod_l+0x7e>
 8013458:	4b6f      	ldr	r3, [pc, #444]	; (8013618 <_strtod_l+0x590>)
 801345a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801345e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013462:	f7ed f8d9 	bl	8000618 <__aeabi_dmul>
 8013466:	4606      	mov	r6, r0
 8013468:	4628      	mov	r0, r5
 801346a:	460f      	mov	r7, r1
 801346c:	f7ed f85a 	bl	8000524 <__aeabi_ui2d>
 8013470:	4602      	mov	r2, r0
 8013472:	460b      	mov	r3, r1
 8013474:	4630      	mov	r0, r6
 8013476:	4639      	mov	r1, r7
 8013478:	f7ec ff18 	bl	80002ac <__adddf3>
 801347c:	2c0f      	cmp	r4, #15
 801347e:	4682      	mov	sl, r0
 8013480:	468b      	mov	fp, r1
 8013482:	ddd5      	ble.n	8013430 <_strtod_l+0x3a8>
 8013484:	9b06      	ldr	r3, [sp, #24]
 8013486:	eba4 0808 	sub.w	r8, r4, r8
 801348a:	4498      	add	r8, r3
 801348c:	f1b8 0f00 	cmp.w	r8, #0
 8013490:	f340 8096 	ble.w	80135c0 <_strtod_l+0x538>
 8013494:	f018 030f 	ands.w	r3, r8, #15
 8013498:	d00a      	beq.n	80134b0 <_strtod_l+0x428>
 801349a:	495f      	ldr	r1, [pc, #380]	; (8013618 <_strtod_l+0x590>)
 801349c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134a0:	4652      	mov	r2, sl
 80134a2:	465b      	mov	r3, fp
 80134a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134a8:	f7ed f8b6 	bl	8000618 <__aeabi_dmul>
 80134ac:	4682      	mov	sl, r0
 80134ae:	468b      	mov	fp, r1
 80134b0:	f038 080f 	bics.w	r8, r8, #15
 80134b4:	d073      	beq.n	801359e <_strtod_l+0x516>
 80134b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80134ba:	dd47      	ble.n	801354c <_strtod_l+0x4c4>
 80134bc:	2400      	movs	r4, #0
 80134be:	46a0      	mov	r8, r4
 80134c0:	9407      	str	r4, [sp, #28]
 80134c2:	9405      	str	r4, [sp, #20]
 80134c4:	2322      	movs	r3, #34	; 0x22
 80134c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013620 <_strtod_l+0x598>
 80134ca:	f8c9 3000 	str.w	r3, [r9]
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	9b07      	ldr	r3, [sp, #28]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f43f ae16 	beq.w	8013106 <_strtod_l+0x7e>
 80134da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80134dc:	4648      	mov	r0, r9
 80134de:	f001 fe3b 	bl	8015158 <_Bfree>
 80134e2:	9905      	ldr	r1, [sp, #20]
 80134e4:	4648      	mov	r0, r9
 80134e6:	f001 fe37 	bl	8015158 <_Bfree>
 80134ea:	4641      	mov	r1, r8
 80134ec:	4648      	mov	r0, r9
 80134ee:	f001 fe33 	bl	8015158 <_Bfree>
 80134f2:	9907      	ldr	r1, [sp, #28]
 80134f4:	4648      	mov	r0, r9
 80134f6:	f001 fe2f 	bl	8015158 <_Bfree>
 80134fa:	4621      	mov	r1, r4
 80134fc:	4648      	mov	r0, r9
 80134fe:	f001 fe2b 	bl	8015158 <_Bfree>
 8013502:	e600      	b.n	8013106 <_strtod_l+0x7e>
 8013504:	9a06      	ldr	r2, [sp, #24]
 8013506:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801350a:	4293      	cmp	r3, r2
 801350c:	dbba      	blt.n	8013484 <_strtod_l+0x3fc>
 801350e:	4d42      	ldr	r5, [pc, #264]	; (8013618 <_strtod_l+0x590>)
 8013510:	f1c4 040f 	rsb	r4, r4, #15
 8013514:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013518:	4652      	mov	r2, sl
 801351a:	465b      	mov	r3, fp
 801351c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013520:	f7ed f87a 	bl	8000618 <__aeabi_dmul>
 8013524:	9b06      	ldr	r3, [sp, #24]
 8013526:	1b1c      	subs	r4, r3, r4
 8013528:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801352c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013530:	e78d      	b.n	801344e <_strtod_l+0x3c6>
 8013532:	f113 0f16 	cmn.w	r3, #22
 8013536:	dba5      	blt.n	8013484 <_strtod_l+0x3fc>
 8013538:	4a37      	ldr	r2, [pc, #220]	; (8013618 <_strtod_l+0x590>)
 801353a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801353e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013542:	4650      	mov	r0, sl
 8013544:	4659      	mov	r1, fp
 8013546:	f7ed f991 	bl	800086c <__aeabi_ddiv>
 801354a:	e782      	b.n	8013452 <_strtod_l+0x3ca>
 801354c:	2300      	movs	r3, #0
 801354e:	4e33      	ldr	r6, [pc, #204]	; (801361c <_strtod_l+0x594>)
 8013550:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013554:	4650      	mov	r0, sl
 8013556:	4659      	mov	r1, fp
 8013558:	461d      	mov	r5, r3
 801355a:	f1b8 0f01 	cmp.w	r8, #1
 801355e:	dc21      	bgt.n	80135a4 <_strtod_l+0x51c>
 8013560:	b10b      	cbz	r3, 8013566 <_strtod_l+0x4de>
 8013562:	4682      	mov	sl, r0
 8013564:	468b      	mov	fp, r1
 8013566:	4b2d      	ldr	r3, [pc, #180]	; (801361c <_strtod_l+0x594>)
 8013568:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801356c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013570:	4652      	mov	r2, sl
 8013572:	465b      	mov	r3, fp
 8013574:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013578:	f7ed f84e 	bl	8000618 <__aeabi_dmul>
 801357c:	4b28      	ldr	r3, [pc, #160]	; (8013620 <_strtod_l+0x598>)
 801357e:	460a      	mov	r2, r1
 8013580:	400b      	ands	r3, r1
 8013582:	4928      	ldr	r1, [pc, #160]	; (8013624 <_strtod_l+0x59c>)
 8013584:	428b      	cmp	r3, r1
 8013586:	4682      	mov	sl, r0
 8013588:	d898      	bhi.n	80134bc <_strtod_l+0x434>
 801358a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801358e:	428b      	cmp	r3, r1
 8013590:	bf86      	itte	hi
 8013592:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801362c <_strtod_l+0x5a4>
 8013596:	f04f 3aff 	movhi.w	sl, #4294967295
 801359a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801359e:	2300      	movs	r3, #0
 80135a0:	9304      	str	r3, [sp, #16]
 80135a2:	e077      	b.n	8013694 <_strtod_l+0x60c>
 80135a4:	f018 0f01 	tst.w	r8, #1
 80135a8:	d006      	beq.n	80135b8 <_strtod_l+0x530>
 80135aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80135ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b2:	f7ed f831 	bl	8000618 <__aeabi_dmul>
 80135b6:	2301      	movs	r3, #1
 80135b8:	3501      	adds	r5, #1
 80135ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135be:	e7cc      	b.n	801355a <_strtod_l+0x4d2>
 80135c0:	d0ed      	beq.n	801359e <_strtod_l+0x516>
 80135c2:	f1c8 0800 	rsb	r8, r8, #0
 80135c6:	f018 020f 	ands.w	r2, r8, #15
 80135ca:	d00a      	beq.n	80135e2 <_strtod_l+0x55a>
 80135cc:	4b12      	ldr	r3, [pc, #72]	; (8013618 <_strtod_l+0x590>)
 80135ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135d2:	4650      	mov	r0, sl
 80135d4:	4659      	mov	r1, fp
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	f7ed f947 	bl	800086c <__aeabi_ddiv>
 80135de:	4682      	mov	sl, r0
 80135e0:	468b      	mov	fp, r1
 80135e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80135e6:	d0da      	beq.n	801359e <_strtod_l+0x516>
 80135e8:	f1b8 0f1f 	cmp.w	r8, #31
 80135ec:	dd20      	ble.n	8013630 <_strtod_l+0x5a8>
 80135ee:	2400      	movs	r4, #0
 80135f0:	46a0      	mov	r8, r4
 80135f2:	9407      	str	r4, [sp, #28]
 80135f4:	9405      	str	r4, [sp, #20]
 80135f6:	2322      	movs	r3, #34	; 0x22
 80135f8:	f04f 0a00 	mov.w	sl, #0
 80135fc:	f04f 0b00 	mov.w	fp, #0
 8013600:	f8c9 3000 	str.w	r3, [r9]
 8013604:	e765      	b.n	80134d2 <_strtod_l+0x44a>
 8013606:	bf00      	nop
 8013608:	080182b9 	.word	0x080182b9
 801360c:	08018343 	.word	0x08018343
 8013610:	080182c1 	.word	0x080182c1
 8013614:	08018300 	.word	0x08018300
 8013618:	08018380 	.word	0x08018380
 801361c:	08018358 	.word	0x08018358
 8013620:	7ff00000 	.word	0x7ff00000
 8013624:	7ca00000 	.word	0x7ca00000
 8013628:	fff80000 	.word	0xfff80000
 801362c:	7fefffff 	.word	0x7fefffff
 8013630:	f018 0310 	ands.w	r3, r8, #16
 8013634:	bf18      	it	ne
 8013636:	236a      	movne	r3, #106	; 0x6a
 8013638:	4da0      	ldr	r5, [pc, #640]	; (80138bc <_strtod_l+0x834>)
 801363a:	9304      	str	r3, [sp, #16]
 801363c:	4650      	mov	r0, sl
 801363e:	4659      	mov	r1, fp
 8013640:	2300      	movs	r3, #0
 8013642:	f1b8 0f00 	cmp.w	r8, #0
 8013646:	f300 810a 	bgt.w	801385e <_strtod_l+0x7d6>
 801364a:	b10b      	cbz	r3, 8013650 <_strtod_l+0x5c8>
 801364c:	4682      	mov	sl, r0
 801364e:	468b      	mov	fp, r1
 8013650:	9b04      	ldr	r3, [sp, #16]
 8013652:	b1bb      	cbz	r3, 8013684 <_strtod_l+0x5fc>
 8013654:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013658:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801365c:	2b00      	cmp	r3, #0
 801365e:	4659      	mov	r1, fp
 8013660:	dd10      	ble.n	8013684 <_strtod_l+0x5fc>
 8013662:	2b1f      	cmp	r3, #31
 8013664:	f340 8107 	ble.w	8013876 <_strtod_l+0x7ee>
 8013668:	2b34      	cmp	r3, #52	; 0x34
 801366a:	bfde      	ittt	le
 801366c:	3b20      	suble	r3, #32
 801366e:	f04f 32ff 	movle.w	r2, #4294967295
 8013672:	fa02 f303 	lslle.w	r3, r2, r3
 8013676:	f04f 0a00 	mov.w	sl, #0
 801367a:	bfcc      	ite	gt
 801367c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013680:	ea03 0b01 	andle.w	fp, r3, r1
 8013684:	2200      	movs	r2, #0
 8013686:	2300      	movs	r3, #0
 8013688:	4650      	mov	r0, sl
 801368a:	4659      	mov	r1, fp
 801368c:	f7ed fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013690:	2800      	cmp	r0, #0
 8013692:	d1ac      	bne.n	80135ee <_strtod_l+0x566>
 8013694:	9b07      	ldr	r3, [sp, #28]
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	9a05      	ldr	r2, [sp, #20]
 801369a:	9908      	ldr	r1, [sp, #32]
 801369c:	4623      	mov	r3, r4
 801369e:	4648      	mov	r0, r9
 80136a0:	f001 fdac 	bl	80151fc <__s2b>
 80136a4:	9007      	str	r0, [sp, #28]
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f43f af08 	beq.w	80134bc <_strtod_l+0x434>
 80136ac:	9a06      	ldr	r2, [sp, #24]
 80136ae:	9b06      	ldr	r3, [sp, #24]
 80136b0:	2a00      	cmp	r2, #0
 80136b2:	f1c3 0300 	rsb	r3, r3, #0
 80136b6:	bfa8      	it	ge
 80136b8:	2300      	movge	r3, #0
 80136ba:	930e      	str	r3, [sp, #56]	; 0x38
 80136bc:	2400      	movs	r4, #0
 80136be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80136c2:	9316      	str	r3, [sp, #88]	; 0x58
 80136c4:	46a0      	mov	r8, r4
 80136c6:	9b07      	ldr	r3, [sp, #28]
 80136c8:	4648      	mov	r0, r9
 80136ca:	6859      	ldr	r1, [r3, #4]
 80136cc:	f001 fd10 	bl	80150f0 <_Balloc>
 80136d0:	9005      	str	r0, [sp, #20]
 80136d2:	2800      	cmp	r0, #0
 80136d4:	f43f aef6 	beq.w	80134c4 <_strtod_l+0x43c>
 80136d8:	9b07      	ldr	r3, [sp, #28]
 80136da:	691a      	ldr	r2, [r3, #16]
 80136dc:	3202      	adds	r2, #2
 80136de:	f103 010c 	add.w	r1, r3, #12
 80136e2:	0092      	lsls	r2, r2, #2
 80136e4:	300c      	adds	r0, #12
 80136e6:	f7fe fcfb 	bl	80120e0 <memcpy>
 80136ea:	aa1e      	add	r2, sp, #120	; 0x78
 80136ec:	a91d      	add	r1, sp, #116	; 0x74
 80136ee:	ec4b ab10 	vmov	d0, sl, fp
 80136f2:	4648      	mov	r0, r9
 80136f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80136f8:	f002 f83c 	bl	8015774 <__d2b>
 80136fc:	901c      	str	r0, [sp, #112]	; 0x70
 80136fe:	2800      	cmp	r0, #0
 8013700:	f43f aee0 	beq.w	80134c4 <_strtod_l+0x43c>
 8013704:	2101      	movs	r1, #1
 8013706:	4648      	mov	r0, r9
 8013708:	f001 fe04 	bl	8015314 <__i2b>
 801370c:	4680      	mov	r8, r0
 801370e:	2800      	cmp	r0, #0
 8013710:	f43f aed8 	beq.w	80134c4 <_strtod_l+0x43c>
 8013714:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013716:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013718:	2e00      	cmp	r6, #0
 801371a:	bfab      	itete	ge
 801371c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801371e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013720:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013722:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013724:	bfac      	ite	ge
 8013726:	18f7      	addge	r7, r6, r3
 8013728:	1b9d      	sublt	r5, r3, r6
 801372a:	9b04      	ldr	r3, [sp, #16]
 801372c:	1af6      	subs	r6, r6, r3
 801372e:	4416      	add	r6, r2
 8013730:	4b63      	ldr	r3, [pc, #396]	; (80138c0 <_strtod_l+0x838>)
 8013732:	3e01      	subs	r6, #1
 8013734:	429e      	cmp	r6, r3
 8013736:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801373a:	f280 80af 	bge.w	801389c <_strtod_l+0x814>
 801373e:	1b9b      	subs	r3, r3, r6
 8013740:	2b1f      	cmp	r3, #31
 8013742:	eba2 0203 	sub.w	r2, r2, r3
 8013746:	f04f 0101 	mov.w	r1, #1
 801374a:	f300 809b 	bgt.w	8013884 <_strtod_l+0x7fc>
 801374e:	fa01 f303 	lsl.w	r3, r1, r3
 8013752:	930f      	str	r3, [sp, #60]	; 0x3c
 8013754:	2300      	movs	r3, #0
 8013756:	930a      	str	r3, [sp, #40]	; 0x28
 8013758:	18be      	adds	r6, r7, r2
 801375a:	9b04      	ldr	r3, [sp, #16]
 801375c:	42b7      	cmp	r7, r6
 801375e:	4415      	add	r5, r2
 8013760:	441d      	add	r5, r3
 8013762:	463b      	mov	r3, r7
 8013764:	bfa8      	it	ge
 8013766:	4633      	movge	r3, r6
 8013768:	42ab      	cmp	r3, r5
 801376a:	bfa8      	it	ge
 801376c:	462b      	movge	r3, r5
 801376e:	2b00      	cmp	r3, #0
 8013770:	bfc2      	ittt	gt
 8013772:	1af6      	subgt	r6, r6, r3
 8013774:	1aed      	subgt	r5, r5, r3
 8013776:	1aff      	subgt	r7, r7, r3
 8013778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801377a:	b1bb      	cbz	r3, 80137ac <_strtod_l+0x724>
 801377c:	4641      	mov	r1, r8
 801377e:	461a      	mov	r2, r3
 8013780:	4648      	mov	r0, r9
 8013782:	f001 fe67 	bl	8015454 <__pow5mult>
 8013786:	4680      	mov	r8, r0
 8013788:	2800      	cmp	r0, #0
 801378a:	f43f ae9b 	beq.w	80134c4 <_strtod_l+0x43c>
 801378e:	4601      	mov	r1, r0
 8013790:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013792:	4648      	mov	r0, r9
 8013794:	f001 fdc7 	bl	8015326 <__multiply>
 8013798:	900c      	str	r0, [sp, #48]	; 0x30
 801379a:	2800      	cmp	r0, #0
 801379c:	f43f ae92 	beq.w	80134c4 <_strtod_l+0x43c>
 80137a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137a2:	4648      	mov	r0, r9
 80137a4:	f001 fcd8 	bl	8015158 <_Bfree>
 80137a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137aa:	931c      	str	r3, [sp, #112]	; 0x70
 80137ac:	2e00      	cmp	r6, #0
 80137ae:	dc7a      	bgt.n	80138a6 <_strtod_l+0x81e>
 80137b0:	9b06      	ldr	r3, [sp, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	dd08      	ble.n	80137c8 <_strtod_l+0x740>
 80137b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80137b8:	9905      	ldr	r1, [sp, #20]
 80137ba:	4648      	mov	r0, r9
 80137bc:	f001 fe4a 	bl	8015454 <__pow5mult>
 80137c0:	9005      	str	r0, [sp, #20]
 80137c2:	2800      	cmp	r0, #0
 80137c4:	f43f ae7e 	beq.w	80134c4 <_strtod_l+0x43c>
 80137c8:	2d00      	cmp	r5, #0
 80137ca:	dd08      	ble.n	80137de <_strtod_l+0x756>
 80137cc:	462a      	mov	r2, r5
 80137ce:	9905      	ldr	r1, [sp, #20]
 80137d0:	4648      	mov	r0, r9
 80137d2:	f001 fe8d 	bl	80154f0 <__lshift>
 80137d6:	9005      	str	r0, [sp, #20]
 80137d8:	2800      	cmp	r0, #0
 80137da:	f43f ae73 	beq.w	80134c4 <_strtod_l+0x43c>
 80137de:	2f00      	cmp	r7, #0
 80137e0:	dd08      	ble.n	80137f4 <_strtod_l+0x76c>
 80137e2:	4641      	mov	r1, r8
 80137e4:	463a      	mov	r2, r7
 80137e6:	4648      	mov	r0, r9
 80137e8:	f001 fe82 	bl	80154f0 <__lshift>
 80137ec:	4680      	mov	r8, r0
 80137ee:	2800      	cmp	r0, #0
 80137f0:	f43f ae68 	beq.w	80134c4 <_strtod_l+0x43c>
 80137f4:	9a05      	ldr	r2, [sp, #20]
 80137f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137f8:	4648      	mov	r0, r9
 80137fa:	f001 fee7 	bl	80155cc <__mdiff>
 80137fe:	4604      	mov	r4, r0
 8013800:	2800      	cmp	r0, #0
 8013802:	f43f ae5f 	beq.w	80134c4 <_strtod_l+0x43c>
 8013806:	68c3      	ldr	r3, [r0, #12]
 8013808:	930c      	str	r3, [sp, #48]	; 0x30
 801380a:	2300      	movs	r3, #0
 801380c:	60c3      	str	r3, [r0, #12]
 801380e:	4641      	mov	r1, r8
 8013810:	f001 fec2 	bl	8015598 <__mcmp>
 8013814:	2800      	cmp	r0, #0
 8013816:	da55      	bge.n	80138c4 <_strtod_l+0x83c>
 8013818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801381a:	b9e3      	cbnz	r3, 8013856 <_strtod_l+0x7ce>
 801381c:	f1ba 0f00 	cmp.w	sl, #0
 8013820:	d119      	bne.n	8013856 <_strtod_l+0x7ce>
 8013822:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013826:	b9b3      	cbnz	r3, 8013856 <_strtod_l+0x7ce>
 8013828:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801382c:	0d1b      	lsrs	r3, r3, #20
 801382e:	051b      	lsls	r3, r3, #20
 8013830:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013834:	d90f      	bls.n	8013856 <_strtod_l+0x7ce>
 8013836:	6963      	ldr	r3, [r4, #20]
 8013838:	b913      	cbnz	r3, 8013840 <_strtod_l+0x7b8>
 801383a:	6923      	ldr	r3, [r4, #16]
 801383c:	2b01      	cmp	r3, #1
 801383e:	dd0a      	ble.n	8013856 <_strtod_l+0x7ce>
 8013840:	4621      	mov	r1, r4
 8013842:	2201      	movs	r2, #1
 8013844:	4648      	mov	r0, r9
 8013846:	f001 fe53 	bl	80154f0 <__lshift>
 801384a:	4641      	mov	r1, r8
 801384c:	4604      	mov	r4, r0
 801384e:	f001 fea3 	bl	8015598 <__mcmp>
 8013852:	2800      	cmp	r0, #0
 8013854:	dc67      	bgt.n	8013926 <_strtod_l+0x89e>
 8013856:	9b04      	ldr	r3, [sp, #16]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d171      	bne.n	8013940 <_strtod_l+0x8b8>
 801385c:	e63d      	b.n	80134da <_strtod_l+0x452>
 801385e:	f018 0f01 	tst.w	r8, #1
 8013862:	d004      	beq.n	801386e <_strtod_l+0x7e6>
 8013864:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013868:	f7ec fed6 	bl	8000618 <__aeabi_dmul>
 801386c:	2301      	movs	r3, #1
 801386e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013872:	3508      	adds	r5, #8
 8013874:	e6e5      	b.n	8013642 <_strtod_l+0x5ba>
 8013876:	f04f 32ff 	mov.w	r2, #4294967295
 801387a:	fa02 f303 	lsl.w	r3, r2, r3
 801387e:	ea03 0a0a 	and.w	sl, r3, sl
 8013882:	e6ff      	b.n	8013684 <_strtod_l+0x5fc>
 8013884:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013888:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801388c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013890:	36e2      	adds	r6, #226	; 0xe2
 8013892:	fa01 f306 	lsl.w	r3, r1, r6
 8013896:	930a      	str	r3, [sp, #40]	; 0x28
 8013898:	910f      	str	r1, [sp, #60]	; 0x3c
 801389a:	e75d      	b.n	8013758 <_strtod_l+0x6d0>
 801389c:	2300      	movs	r3, #0
 801389e:	930a      	str	r3, [sp, #40]	; 0x28
 80138a0:	2301      	movs	r3, #1
 80138a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a4:	e758      	b.n	8013758 <_strtod_l+0x6d0>
 80138a6:	4632      	mov	r2, r6
 80138a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80138aa:	4648      	mov	r0, r9
 80138ac:	f001 fe20 	bl	80154f0 <__lshift>
 80138b0:	901c      	str	r0, [sp, #112]	; 0x70
 80138b2:	2800      	cmp	r0, #0
 80138b4:	f47f af7c 	bne.w	80137b0 <_strtod_l+0x728>
 80138b8:	e604      	b.n	80134c4 <_strtod_l+0x43c>
 80138ba:	bf00      	nop
 80138bc:	08018318 	.word	0x08018318
 80138c0:	fffffc02 	.word	0xfffffc02
 80138c4:	465d      	mov	r5, fp
 80138c6:	f040 8086 	bne.w	80139d6 <_strtod_l+0x94e>
 80138ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138d0:	b32a      	cbz	r2, 801391e <_strtod_l+0x896>
 80138d2:	4aaf      	ldr	r2, [pc, #700]	; (8013b90 <_strtod_l+0xb08>)
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d153      	bne.n	8013980 <_strtod_l+0x8f8>
 80138d8:	9b04      	ldr	r3, [sp, #16]
 80138da:	4650      	mov	r0, sl
 80138dc:	b1d3      	cbz	r3, 8013914 <_strtod_l+0x88c>
 80138de:	4aad      	ldr	r2, [pc, #692]	; (8013b94 <_strtod_l+0xb0c>)
 80138e0:	402a      	ands	r2, r5
 80138e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80138e6:	f04f 31ff 	mov.w	r1, #4294967295
 80138ea:	d816      	bhi.n	801391a <_strtod_l+0x892>
 80138ec:	0d12      	lsrs	r2, r2, #20
 80138ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80138f2:	fa01 f303 	lsl.w	r3, r1, r3
 80138f6:	4298      	cmp	r0, r3
 80138f8:	d142      	bne.n	8013980 <_strtod_l+0x8f8>
 80138fa:	4ba7      	ldr	r3, [pc, #668]	; (8013b98 <_strtod_l+0xb10>)
 80138fc:	429d      	cmp	r5, r3
 80138fe:	d102      	bne.n	8013906 <_strtod_l+0x87e>
 8013900:	3001      	adds	r0, #1
 8013902:	f43f addf 	beq.w	80134c4 <_strtod_l+0x43c>
 8013906:	4ba3      	ldr	r3, [pc, #652]	; (8013b94 <_strtod_l+0xb0c>)
 8013908:	402b      	ands	r3, r5
 801390a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801390e:	f04f 0a00 	mov.w	sl, #0
 8013912:	e7a0      	b.n	8013856 <_strtod_l+0x7ce>
 8013914:	f04f 33ff 	mov.w	r3, #4294967295
 8013918:	e7ed      	b.n	80138f6 <_strtod_l+0x86e>
 801391a:	460b      	mov	r3, r1
 801391c:	e7eb      	b.n	80138f6 <_strtod_l+0x86e>
 801391e:	bb7b      	cbnz	r3, 8013980 <_strtod_l+0x8f8>
 8013920:	f1ba 0f00 	cmp.w	sl, #0
 8013924:	d12c      	bne.n	8013980 <_strtod_l+0x8f8>
 8013926:	9904      	ldr	r1, [sp, #16]
 8013928:	4a9a      	ldr	r2, [pc, #616]	; (8013b94 <_strtod_l+0xb0c>)
 801392a:	465b      	mov	r3, fp
 801392c:	b1f1      	cbz	r1, 801396c <_strtod_l+0x8e4>
 801392e:	ea02 010b 	and.w	r1, r2, fp
 8013932:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013936:	dc19      	bgt.n	801396c <_strtod_l+0x8e4>
 8013938:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801393c:	f77f ae5b 	ble.w	80135f6 <_strtod_l+0x56e>
 8013940:	4a96      	ldr	r2, [pc, #600]	; (8013b9c <_strtod_l+0xb14>)
 8013942:	2300      	movs	r3, #0
 8013944:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013948:	4650      	mov	r0, sl
 801394a:	4659      	mov	r1, fp
 801394c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013950:	f7ec fe62 	bl	8000618 <__aeabi_dmul>
 8013954:	4682      	mov	sl, r0
 8013956:	468b      	mov	fp, r1
 8013958:	2900      	cmp	r1, #0
 801395a:	f47f adbe 	bne.w	80134da <_strtod_l+0x452>
 801395e:	2800      	cmp	r0, #0
 8013960:	f47f adbb 	bne.w	80134da <_strtod_l+0x452>
 8013964:	2322      	movs	r3, #34	; 0x22
 8013966:	f8c9 3000 	str.w	r3, [r9]
 801396a:	e5b6      	b.n	80134da <_strtod_l+0x452>
 801396c:	4013      	ands	r3, r2
 801396e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013972:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013976:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801397a:	f04f 3aff 	mov.w	sl, #4294967295
 801397e:	e76a      	b.n	8013856 <_strtod_l+0x7ce>
 8013980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013982:	b193      	cbz	r3, 80139aa <_strtod_l+0x922>
 8013984:	422b      	tst	r3, r5
 8013986:	f43f af66 	beq.w	8013856 <_strtod_l+0x7ce>
 801398a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801398c:	9a04      	ldr	r2, [sp, #16]
 801398e:	4650      	mov	r0, sl
 8013990:	4659      	mov	r1, fp
 8013992:	b173      	cbz	r3, 80139b2 <_strtod_l+0x92a>
 8013994:	f7ff fb5b 	bl	801304e <sulp>
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139a0:	f7ec fc84 	bl	80002ac <__adddf3>
 80139a4:	4682      	mov	sl, r0
 80139a6:	468b      	mov	fp, r1
 80139a8:	e755      	b.n	8013856 <_strtod_l+0x7ce>
 80139aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139ac:	ea13 0f0a 	tst.w	r3, sl
 80139b0:	e7e9      	b.n	8013986 <_strtod_l+0x8fe>
 80139b2:	f7ff fb4c 	bl	801304e <sulp>
 80139b6:	4602      	mov	r2, r0
 80139b8:	460b      	mov	r3, r1
 80139ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139be:	f7ec fc73 	bl	80002a8 <__aeabi_dsub>
 80139c2:	2200      	movs	r2, #0
 80139c4:	2300      	movs	r3, #0
 80139c6:	4682      	mov	sl, r0
 80139c8:	468b      	mov	fp, r1
 80139ca:	f7ed f88d 	bl	8000ae8 <__aeabi_dcmpeq>
 80139ce:	2800      	cmp	r0, #0
 80139d0:	f47f ae11 	bne.w	80135f6 <_strtod_l+0x56e>
 80139d4:	e73f      	b.n	8013856 <_strtod_l+0x7ce>
 80139d6:	4641      	mov	r1, r8
 80139d8:	4620      	mov	r0, r4
 80139da:	f001 ff1a 	bl	8015812 <__ratio>
 80139de:	ec57 6b10 	vmov	r6, r7, d0
 80139e2:	2200      	movs	r2, #0
 80139e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80139e8:	ee10 0a10 	vmov	r0, s0
 80139ec:	4639      	mov	r1, r7
 80139ee:	f7ed f88f 	bl	8000b10 <__aeabi_dcmple>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d077      	beq.n	8013ae6 <_strtod_l+0xa5e>
 80139f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d04a      	beq.n	8013a92 <_strtod_l+0xa0a>
 80139fc:	4b68      	ldr	r3, [pc, #416]	; (8013ba0 <_strtod_l+0xb18>)
 80139fe:	2200      	movs	r2, #0
 8013a00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013a04:	4f66      	ldr	r7, [pc, #408]	; (8013ba0 <_strtod_l+0xb18>)
 8013a06:	2600      	movs	r6, #0
 8013a08:	4b62      	ldr	r3, [pc, #392]	; (8013b94 <_strtod_l+0xb0c>)
 8013a0a:	402b      	ands	r3, r5
 8013a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a10:	4b64      	ldr	r3, [pc, #400]	; (8013ba4 <_strtod_l+0xb1c>)
 8013a12:	429a      	cmp	r2, r3
 8013a14:	f040 80ce 	bne.w	8013bb4 <_strtod_l+0xb2c>
 8013a18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013a1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013a24:	ec4b ab10 	vmov	d0, sl, fp
 8013a28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013a2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013a30:	f001 fe2a 	bl	8015688 <__ulp>
 8013a34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a38:	ec53 2b10 	vmov	r2, r3, d0
 8013a3c:	f7ec fdec 	bl	8000618 <__aeabi_dmul>
 8013a40:	4652      	mov	r2, sl
 8013a42:	465b      	mov	r3, fp
 8013a44:	f7ec fc32 	bl	80002ac <__adddf3>
 8013a48:	460b      	mov	r3, r1
 8013a4a:	4952      	ldr	r1, [pc, #328]	; (8013b94 <_strtod_l+0xb0c>)
 8013a4c:	4a56      	ldr	r2, [pc, #344]	; (8013ba8 <_strtod_l+0xb20>)
 8013a4e:	4019      	ands	r1, r3
 8013a50:	4291      	cmp	r1, r2
 8013a52:	4682      	mov	sl, r0
 8013a54:	d95b      	bls.n	8013b0e <_strtod_l+0xa86>
 8013a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d103      	bne.n	8013a68 <_strtod_l+0x9e0>
 8013a60:	9b08      	ldr	r3, [sp, #32]
 8013a62:	3301      	adds	r3, #1
 8013a64:	f43f ad2e 	beq.w	80134c4 <_strtod_l+0x43c>
 8013a68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013b98 <_strtod_l+0xb10>
 8013a6c:	f04f 3aff 	mov.w	sl, #4294967295
 8013a70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a72:	4648      	mov	r0, r9
 8013a74:	f001 fb70 	bl	8015158 <_Bfree>
 8013a78:	9905      	ldr	r1, [sp, #20]
 8013a7a:	4648      	mov	r0, r9
 8013a7c:	f001 fb6c 	bl	8015158 <_Bfree>
 8013a80:	4641      	mov	r1, r8
 8013a82:	4648      	mov	r0, r9
 8013a84:	f001 fb68 	bl	8015158 <_Bfree>
 8013a88:	4621      	mov	r1, r4
 8013a8a:	4648      	mov	r0, r9
 8013a8c:	f001 fb64 	bl	8015158 <_Bfree>
 8013a90:	e619      	b.n	80136c6 <_strtod_l+0x63e>
 8013a92:	f1ba 0f00 	cmp.w	sl, #0
 8013a96:	d11a      	bne.n	8013ace <_strtod_l+0xa46>
 8013a98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a9c:	b9eb      	cbnz	r3, 8013ada <_strtod_l+0xa52>
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	4b3f      	ldr	r3, [pc, #252]	; (8013ba0 <_strtod_l+0xb18>)
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	4639      	mov	r1, r7
 8013aa6:	f7ed f829 	bl	8000afc <__aeabi_dcmplt>
 8013aaa:	b9c8      	cbnz	r0, 8013ae0 <_strtod_l+0xa58>
 8013aac:	4630      	mov	r0, r6
 8013aae:	4639      	mov	r1, r7
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	4b3e      	ldr	r3, [pc, #248]	; (8013bac <_strtod_l+0xb24>)
 8013ab4:	f7ec fdb0 	bl	8000618 <__aeabi_dmul>
 8013ab8:	4606      	mov	r6, r0
 8013aba:	460f      	mov	r7, r1
 8013abc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013ac0:	9618      	str	r6, [sp, #96]	; 0x60
 8013ac2:	9319      	str	r3, [sp, #100]	; 0x64
 8013ac4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013ac8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013acc:	e79c      	b.n	8013a08 <_strtod_l+0x980>
 8013ace:	f1ba 0f01 	cmp.w	sl, #1
 8013ad2:	d102      	bne.n	8013ada <_strtod_l+0xa52>
 8013ad4:	2d00      	cmp	r5, #0
 8013ad6:	f43f ad8e 	beq.w	80135f6 <_strtod_l+0x56e>
 8013ada:	2200      	movs	r2, #0
 8013adc:	4b34      	ldr	r3, [pc, #208]	; (8013bb0 <_strtod_l+0xb28>)
 8013ade:	e78f      	b.n	8013a00 <_strtod_l+0x978>
 8013ae0:	2600      	movs	r6, #0
 8013ae2:	4f32      	ldr	r7, [pc, #200]	; (8013bac <_strtod_l+0xb24>)
 8013ae4:	e7ea      	b.n	8013abc <_strtod_l+0xa34>
 8013ae6:	4b31      	ldr	r3, [pc, #196]	; (8013bac <_strtod_l+0xb24>)
 8013ae8:	4630      	mov	r0, r6
 8013aea:	4639      	mov	r1, r7
 8013aec:	2200      	movs	r2, #0
 8013aee:	f7ec fd93 	bl	8000618 <__aeabi_dmul>
 8013af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013af4:	4606      	mov	r6, r0
 8013af6:	460f      	mov	r7, r1
 8013af8:	b933      	cbnz	r3, 8013b08 <_strtod_l+0xa80>
 8013afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013afe:	9010      	str	r0, [sp, #64]	; 0x40
 8013b00:	9311      	str	r3, [sp, #68]	; 0x44
 8013b02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013b06:	e7df      	b.n	8013ac8 <_strtod_l+0xa40>
 8013b08:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013b0c:	e7f9      	b.n	8013b02 <_strtod_l+0xa7a>
 8013b0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d1ab      	bne.n	8013a70 <_strtod_l+0x9e8>
 8013b18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b1c:	0d1b      	lsrs	r3, r3, #20
 8013b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b20:	051b      	lsls	r3, r3, #20
 8013b22:	429a      	cmp	r2, r3
 8013b24:	465d      	mov	r5, fp
 8013b26:	d1a3      	bne.n	8013a70 <_strtod_l+0x9e8>
 8013b28:	4639      	mov	r1, r7
 8013b2a:	4630      	mov	r0, r6
 8013b2c:	f7ed f824 	bl	8000b78 <__aeabi_d2iz>
 8013b30:	f7ec fd08 	bl	8000544 <__aeabi_i2d>
 8013b34:	460b      	mov	r3, r1
 8013b36:	4602      	mov	r2, r0
 8013b38:	4639      	mov	r1, r7
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	f7ec fbb4 	bl	80002a8 <__aeabi_dsub>
 8013b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b42:	4606      	mov	r6, r0
 8013b44:	460f      	mov	r7, r1
 8013b46:	b933      	cbnz	r3, 8013b56 <_strtod_l+0xace>
 8013b48:	f1ba 0f00 	cmp.w	sl, #0
 8013b4c:	d103      	bne.n	8013b56 <_strtod_l+0xace>
 8013b4e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013b52:	2d00      	cmp	r5, #0
 8013b54:	d06d      	beq.n	8013c32 <_strtod_l+0xbaa>
 8013b56:	a30a      	add	r3, pc, #40	; (adr r3, 8013b80 <_strtod_l+0xaf8>)
 8013b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	4639      	mov	r1, r7
 8013b60:	f7ec ffcc 	bl	8000afc <__aeabi_dcmplt>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	f47f acb8 	bne.w	80134da <_strtod_l+0x452>
 8013b6a:	a307      	add	r3, pc, #28	; (adr r3, 8013b88 <_strtod_l+0xb00>)
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	4630      	mov	r0, r6
 8013b72:	4639      	mov	r1, r7
 8013b74:	f7ec ffe0 	bl	8000b38 <__aeabi_dcmpgt>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	f43f af79 	beq.w	8013a70 <_strtod_l+0x9e8>
 8013b7e:	e4ac      	b.n	80134da <_strtod_l+0x452>
 8013b80:	94a03595 	.word	0x94a03595
 8013b84:	3fdfffff 	.word	0x3fdfffff
 8013b88:	35afe535 	.word	0x35afe535
 8013b8c:	3fe00000 	.word	0x3fe00000
 8013b90:	000fffff 	.word	0x000fffff
 8013b94:	7ff00000 	.word	0x7ff00000
 8013b98:	7fefffff 	.word	0x7fefffff
 8013b9c:	39500000 	.word	0x39500000
 8013ba0:	3ff00000 	.word	0x3ff00000
 8013ba4:	7fe00000 	.word	0x7fe00000
 8013ba8:	7c9fffff 	.word	0x7c9fffff
 8013bac:	3fe00000 	.word	0x3fe00000
 8013bb0:	bff00000 	.word	0xbff00000
 8013bb4:	9b04      	ldr	r3, [sp, #16]
 8013bb6:	b333      	cbz	r3, 8013c06 <_strtod_l+0xb7e>
 8013bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013bbe:	d822      	bhi.n	8013c06 <_strtod_l+0xb7e>
 8013bc0:	a327      	add	r3, pc, #156	; (adr r3, 8013c60 <_strtod_l+0xbd8>)
 8013bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	4639      	mov	r1, r7
 8013bca:	f7ec ffa1 	bl	8000b10 <__aeabi_dcmple>
 8013bce:	b1a0      	cbz	r0, 8013bfa <_strtod_l+0xb72>
 8013bd0:	4639      	mov	r1, r7
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	f7ec fff8 	bl	8000bc8 <__aeabi_d2uiz>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	bf08      	it	eq
 8013bdc:	2001      	moveq	r0, #1
 8013bde:	f7ec fca1 	bl	8000524 <__aeabi_ui2d>
 8013be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013be4:	4606      	mov	r6, r0
 8013be6:	460f      	mov	r7, r1
 8013be8:	bb03      	cbnz	r3, 8013c2c <_strtod_l+0xba4>
 8013bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bee:	9012      	str	r0, [sp, #72]	; 0x48
 8013bf0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013bf2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013bf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013bfe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013c02:	1a9b      	subs	r3, r3, r2
 8013c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c06:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013c0a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013c0e:	f001 fd3b 	bl	8015688 <__ulp>
 8013c12:	4650      	mov	r0, sl
 8013c14:	ec53 2b10 	vmov	r2, r3, d0
 8013c18:	4659      	mov	r1, fp
 8013c1a:	f7ec fcfd 	bl	8000618 <__aeabi_dmul>
 8013c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c22:	f7ec fb43 	bl	80002ac <__adddf3>
 8013c26:	4682      	mov	sl, r0
 8013c28:	468b      	mov	fp, r1
 8013c2a:	e772      	b.n	8013b12 <_strtod_l+0xa8a>
 8013c2c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013c30:	e7df      	b.n	8013bf2 <_strtod_l+0xb6a>
 8013c32:	a30d      	add	r3, pc, #52	; (adr r3, 8013c68 <_strtod_l+0xbe0>)
 8013c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c38:	f7ec ff60 	bl	8000afc <__aeabi_dcmplt>
 8013c3c:	e79c      	b.n	8013b78 <_strtod_l+0xaf0>
 8013c3e:	2300      	movs	r3, #0
 8013c40:	930d      	str	r3, [sp, #52]	; 0x34
 8013c42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c46:	6013      	str	r3, [r2, #0]
 8013c48:	f7ff ba61 	b.w	801310e <_strtod_l+0x86>
 8013c4c:	2b65      	cmp	r3, #101	; 0x65
 8013c4e:	f04f 0200 	mov.w	r2, #0
 8013c52:	f43f ab4e 	beq.w	80132f2 <_strtod_l+0x26a>
 8013c56:	2101      	movs	r1, #1
 8013c58:	4614      	mov	r4, r2
 8013c5a:	9104      	str	r1, [sp, #16]
 8013c5c:	f7ff bacb 	b.w	80131f6 <_strtod_l+0x16e>
 8013c60:	ffc00000 	.word	0xffc00000
 8013c64:	41dfffff 	.word	0x41dfffff
 8013c68:	94a03595 	.word	0x94a03595
 8013c6c:	3fcfffff 	.word	0x3fcfffff

08013c70 <_strtod_r>:
 8013c70:	4b05      	ldr	r3, [pc, #20]	; (8013c88 <_strtod_r+0x18>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	b410      	push	{r4}
 8013c76:	6a1b      	ldr	r3, [r3, #32]
 8013c78:	4c04      	ldr	r4, [pc, #16]	; (8013c8c <_strtod_r+0x1c>)
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	bf08      	it	eq
 8013c7e:	4623      	moveq	r3, r4
 8013c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c84:	f7ff ba00 	b.w	8013088 <_strtod_l>
 8013c88:	20000e34 	.word	0x20000e34
 8013c8c:	20000e98 	.word	0x20000e98

08013c90 <_strtol_l.isra.0>:
 8013c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c94:	4680      	mov	r8, r0
 8013c96:	4689      	mov	r9, r1
 8013c98:	4692      	mov	sl, r2
 8013c9a:	461e      	mov	r6, r3
 8013c9c:	460f      	mov	r7, r1
 8013c9e:	463d      	mov	r5, r7
 8013ca0:	9808      	ldr	r0, [sp, #32]
 8013ca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ca6:	f001 f9ed 	bl	8015084 <__locale_ctype_ptr_l>
 8013caa:	4420      	add	r0, r4
 8013cac:	7843      	ldrb	r3, [r0, #1]
 8013cae:	f013 0308 	ands.w	r3, r3, #8
 8013cb2:	d132      	bne.n	8013d1a <_strtol_l.isra.0+0x8a>
 8013cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8013cb6:	d132      	bne.n	8013d1e <_strtol_l.isra.0+0x8e>
 8013cb8:	787c      	ldrb	r4, [r7, #1]
 8013cba:	1cbd      	adds	r5, r7, #2
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	2e00      	cmp	r6, #0
 8013cc0:	d05d      	beq.n	8013d7e <_strtol_l.isra.0+0xee>
 8013cc2:	2e10      	cmp	r6, #16
 8013cc4:	d109      	bne.n	8013cda <_strtol_l.isra.0+0x4a>
 8013cc6:	2c30      	cmp	r4, #48	; 0x30
 8013cc8:	d107      	bne.n	8013cda <_strtol_l.isra.0+0x4a>
 8013cca:	782b      	ldrb	r3, [r5, #0]
 8013ccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013cd0:	2b58      	cmp	r3, #88	; 0x58
 8013cd2:	d14f      	bne.n	8013d74 <_strtol_l.isra.0+0xe4>
 8013cd4:	786c      	ldrb	r4, [r5, #1]
 8013cd6:	2610      	movs	r6, #16
 8013cd8:	3502      	adds	r5, #2
 8013cda:	2a00      	cmp	r2, #0
 8013cdc:	bf14      	ite	ne
 8013cde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013ce2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013ce6:	2700      	movs	r7, #0
 8013ce8:	fbb1 fcf6 	udiv	ip, r1, r6
 8013cec:	4638      	mov	r0, r7
 8013cee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013cf2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013cf6:	2b09      	cmp	r3, #9
 8013cf8:	d817      	bhi.n	8013d2a <_strtol_l.isra.0+0x9a>
 8013cfa:	461c      	mov	r4, r3
 8013cfc:	42a6      	cmp	r6, r4
 8013cfe:	dd23      	ble.n	8013d48 <_strtol_l.isra.0+0xb8>
 8013d00:	1c7b      	adds	r3, r7, #1
 8013d02:	d007      	beq.n	8013d14 <_strtol_l.isra.0+0x84>
 8013d04:	4584      	cmp	ip, r0
 8013d06:	d31c      	bcc.n	8013d42 <_strtol_l.isra.0+0xb2>
 8013d08:	d101      	bne.n	8013d0e <_strtol_l.isra.0+0x7e>
 8013d0a:	45a6      	cmp	lr, r4
 8013d0c:	db19      	blt.n	8013d42 <_strtol_l.isra.0+0xb2>
 8013d0e:	fb00 4006 	mla	r0, r0, r6, r4
 8013d12:	2701      	movs	r7, #1
 8013d14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d18:	e7eb      	b.n	8013cf2 <_strtol_l.isra.0+0x62>
 8013d1a:	462f      	mov	r7, r5
 8013d1c:	e7bf      	b.n	8013c9e <_strtol_l.isra.0+0xe>
 8013d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8013d20:	bf04      	itt	eq
 8013d22:	1cbd      	addeq	r5, r7, #2
 8013d24:	787c      	ldrbeq	r4, [r7, #1]
 8013d26:	461a      	mov	r2, r3
 8013d28:	e7c9      	b.n	8013cbe <_strtol_l.isra.0+0x2e>
 8013d2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013d2e:	2b19      	cmp	r3, #25
 8013d30:	d801      	bhi.n	8013d36 <_strtol_l.isra.0+0xa6>
 8013d32:	3c37      	subs	r4, #55	; 0x37
 8013d34:	e7e2      	b.n	8013cfc <_strtol_l.isra.0+0x6c>
 8013d36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013d3a:	2b19      	cmp	r3, #25
 8013d3c:	d804      	bhi.n	8013d48 <_strtol_l.isra.0+0xb8>
 8013d3e:	3c57      	subs	r4, #87	; 0x57
 8013d40:	e7dc      	b.n	8013cfc <_strtol_l.isra.0+0x6c>
 8013d42:	f04f 37ff 	mov.w	r7, #4294967295
 8013d46:	e7e5      	b.n	8013d14 <_strtol_l.isra.0+0x84>
 8013d48:	1c7b      	adds	r3, r7, #1
 8013d4a:	d108      	bne.n	8013d5e <_strtol_l.isra.0+0xce>
 8013d4c:	2322      	movs	r3, #34	; 0x22
 8013d4e:	f8c8 3000 	str.w	r3, [r8]
 8013d52:	4608      	mov	r0, r1
 8013d54:	f1ba 0f00 	cmp.w	sl, #0
 8013d58:	d107      	bne.n	8013d6a <_strtol_l.isra.0+0xda>
 8013d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d5e:	b102      	cbz	r2, 8013d62 <_strtol_l.isra.0+0xd2>
 8013d60:	4240      	negs	r0, r0
 8013d62:	f1ba 0f00 	cmp.w	sl, #0
 8013d66:	d0f8      	beq.n	8013d5a <_strtol_l.isra.0+0xca>
 8013d68:	b10f      	cbz	r7, 8013d6e <_strtol_l.isra.0+0xde>
 8013d6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8013d6e:	f8ca 9000 	str.w	r9, [sl]
 8013d72:	e7f2      	b.n	8013d5a <_strtol_l.isra.0+0xca>
 8013d74:	2430      	movs	r4, #48	; 0x30
 8013d76:	2e00      	cmp	r6, #0
 8013d78:	d1af      	bne.n	8013cda <_strtol_l.isra.0+0x4a>
 8013d7a:	2608      	movs	r6, #8
 8013d7c:	e7ad      	b.n	8013cda <_strtol_l.isra.0+0x4a>
 8013d7e:	2c30      	cmp	r4, #48	; 0x30
 8013d80:	d0a3      	beq.n	8013cca <_strtol_l.isra.0+0x3a>
 8013d82:	260a      	movs	r6, #10
 8013d84:	e7a9      	b.n	8013cda <_strtol_l.isra.0+0x4a>
	...

08013d88 <_strtol_r>:
 8013d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d8a:	4c06      	ldr	r4, [pc, #24]	; (8013da4 <_strtol_r+0x1c>)
 8013d8c:	4d06      	ldr	r5, [pc, #24]	; (8013da8 <_strtol_r+0x20>)
 8013d8e:	6824      	ldr	r4, [r4, #0]
 8013d90:	6a24      	ldr	r4, [r4, #32]
 8013d92:	2c00      	cmp	r4, #0
 8013d94:	bf08      	it	eq
 8013d96:	462c      	moveq	r4, r5
 8013d98:	9400      	str	r4, [sp, #0]
 8013d9a:	f7ff ff79 	bl	8013c90 <_strtol_l.isra.0>
 8013d9e:	b003      	add	sp, #12
 8013da0:	bd30      	pop	{r4, r5, pc}
 8013da2:	bf00      	nop
 8013da4:	20000e34 	.word	0x20000e34
 8013da8:	20000e98 	.word	0x20000e98

08013dac <quorem>:
 8013dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db0:	6903      	ldr	r3, [r0, #16]
 8013db2:	690c      	ldr	r4, [r1, #16]
 8013db4:	42a3      	cmp	r3, r4
 8013db6:	4680      	mov	r8, r0
 8013db8:	f2c0 8082 	blt.w	8013ec0 <quorem+0x114>
 8013dbc:	3c01      	subs	r4, #1
 8013dbe:	f101 0714 	add.w	r7, r1, #20
 8013dc2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013dc6:	f100 0614 	add.w	r6, r0, #20
 8013dca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013dce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013dd2:	eb06 030c 	add.w	r3, r6, ip
 8013dd6:	3501      	adds	r5, #1
 8013dd8:	eb07 090c 	add.w	r9, r7, ip
 8013ddc:	9301      	str	r3, [sp, #4]
 8013dde:	fbb0 f5f5 	udiv	r5, r0, r5
 8013de2:	b395      	cbz	r5, 8013e4a <quorem+0x9e>
 8013de4:	f04f 0a00 	mov.w	sl, #0
 8013de8:	4638      	mov	r0, r7
 8013dea:	46b6      	mov	lr, r6
 8013dec:	46d3      	mov	fp, sl
 8013dee:	f850 2b04 	ldr.w	r2, [r0], #4
 8013df2:	b293      	uxth	r3, r2
 8013df4:	fb05 a303 	mla	r3, r5, r3, sl
 8013df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	ebab 0303 	sub.w	r3, fp, r3
 8013e02:	0c12      	lsrs	r2, r2, #16
 8013e04:	f8de b000 	ldr.w	fp, [lr]
 8013e08:	fb05 a202 	mla	r2, r5, r2, sl
 8013e0c:	fa13 f38b 	uxtah	r3, r3, fp
 8013e10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013e14:	fa1f fb82 	uxth.w	fp, r2
 8013e18:	f8de 2000 	ldr.w	r2, [lr]
 8013e1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e2a:	4581      	cmp	r9, r0
 8013e2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013e30:	f84e 3b04 	str.w	r3, [lr], #4
 8013e34:	d2db      	bcs.n	8013dee <quorem+0x42>
 8013e36:	f856 300c 	ldr.w	r3, [r6, ip]
 8013e3a:	b933      	cbnz	r3, 8013e4a <quorem+0x9e>
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	3b04      	subs	r3, #4
 8013e40:	429e      	cmp	r6, r3
 8013e42:	461a      	mov	r2, r3
 8013e44:	d330      	bcc.n	8013ea8 <quorem+0xfc>
 8013e46:	f8c8 4010 	str.w	r4, [r8, #16]
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	f001 fba4 	bl	8015598 <__mcmp>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	db25      	blt.n	8013ea0 <quorem+0xf4>
 8013e54:	3501      	adds	r5, #1
 8013e56:	4630      	mov	r0, r6
 8013e58:	f04f 0c00 	mov.w	ip, #0
 8013e5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013e60:	f8d0 e000 	ldr.w	lr, [r0]
 8013e64:	b293      	uxth	r3, r2
 8013e66:	ebac 0303 	sub.w	r3, ip, r3
 8013e6a:	0c12      	lsrs	r2, r2, #16
 8013e6c:	fa13 f38e 	uxtah	r3, r3, lr
 8013e70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e7e:	45b9      	cmp	r9, r7
 8013e80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e84:	f840 3b04 	str.w	r3, [r0], #4
 8013e88:	d2e8      	bcs.n	8013e5c <quorem+0xb0>
 8013e8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013e8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013e92:	b92a      	cbnz	r2, 8013ea0 <quorem+0xf4>
 8013e94:	3b04      	subs	r3, #4
 8013e96:	429e      	cmp	r6, r3
 8013e98:	461a      	mov	r2, r3
 8013e9a:	d30b      	bcc.n	8013eb4 <quorem+0x108>
 8013e9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	b003      	add	sp, #12
 8013ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea8:	6812      	ldr	r2, [r2, #0]
 8013eaa:	3b04      	subs	r3, #4
 8013eac:	2a00      	cmp	r2, #0
 8013eae:	d1ca      	bne.n	8013e46 <quorem+0x9a>
 8013eb0:	3c01      	subs	r4, #1
 8013eb2:	e7c5      	b.n	8013e40 <quorem+0x94>
 8013eb4:	6812      	ldr	r2, [r2, #0]
 8013eb6:	3b04      	subs	r3, #4
 8013eb8:	2a00      	cmp	r2, #0
 8013eba:	d1ef      	bne.n	8013e9c <quorem+0xf0>
 8013ebc:	3c01      	subs	r4, #1
 8013ebe:	e7ea      	b.n	8013e96 <quorem+0xea>
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	e7ee      	b.n	8013ea2 <quorem+0xf6>
 8013ec4:	0000      	movs	r0, r0
	...

08013ec8 <_dtoa_r>:
 8013ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ecc:	ec57 6b10 	vmov	r6, r7, d0
 8013ed0:	b097      	sub	sp, #92	; 0x5c
 8013ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013ed4:	9106      	str	r1, [sp, #24]
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	920b      	str	r2, [sp, #44]	; 0x2c
 8013eda:	9312      	str	r3, [sp, #72]	; 0x48
 8013edc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013ee0:	e9cd 6700 	strd	r6, r7, [sp]
 8013ee4:	b93d      	cbnz	r5, 8013ef6 <_dtoa_r+0x2e>
 8013ee6:	2010      	movs	r0, #16
 8013ee8:	f7fe f8ea 	bl	80120c0 <malloc>
 8013eec:	6260      	str	r0, [r4, #36]	; 0x24
 8013eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ef2:	6005      	str	r5, [r0, #0]
 8013ef4:	60c5      	str	r5, [r0, #12]
 8013ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	b151      	cbz	r1, 8013f12 <_dtoa_r+0x4a>
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	604a      	str	r2, [r1, #4]
 8013f00:	2301      	movs	r3, #1
 8013f02:	4093      	lsls	r3, r2
 8013f04:	608b      	str	r3, [r1, #8]
 8013f06:	4620      	mov	r0, r4
 8013f08:	f001 f926 	bl	8015158 <_Bfree>
 8013f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f0e:	2200      	movs	r2, #0
 8013f10:	601a      	str	r2, [r3, #0]
 8013f12:	1e3b      	subs	r3, r7, #0
 8013f14:	bfbb      	ittet	lt
 8013f16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013f1a:	9301      	strlt	r3, [sp, #4]
 8013f1c:	2300      	movge	r3, #0
 8013f1e:	2201      	movlt	r2, #1
 8013f20:	bfac      	ite	ge
 8013f22:	f8c8 3000 	strge.w	r3, [r8]
 8013f26:	f8c8 2000 	strlt.w	r2, [r8]
 8013f2a:	4baf      	ldr	r3, [pc, #700]	; (80141e8 <_dtoa_r+0x320>)
 8013f2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013f30:	ea33 0308 	bics.w	r3, r3, r8
 8013f34:	d114      	bne.n	8013f60 <_dtoa_r+0x98>
 8013f36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f38:	f242 730f 	movw	r3, #9999	; 0x270f
 8013f3c:	6013      	str	r3, [r2, #0]
 8013f3e:	9b00      	ldr	r3, [sp, #0]
 8013f40:	b923      	cbnz	r3, 8013f4c <_dtoa_r+0x84>
 8013f42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013f46:	2800      	cmp	r0, #0
 8013f48:	f000 8542 	beq.w	80149d0 <_dtoa_r+0xb08>
 8013f4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80141fc <_dtoa_r+0x334>
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	f000 8544 	beq.w	80149e0 <_dtoa_r+0xb18>
 8013f58:	f10b 0303 	add.w	r3, fp, #3
 8013f5c:	f000 bd3e 	b.w	80149dc <_dtoa_r+0xb14>
 8013f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013f64:	2200      	movs	r2, #0
 8013f66:	2300      	movs	r3, #0
 8013f68:	4630      	mov	r0, r6
 8013f6a:	4639      	mov	r1, r7
 8013f6c:	f7ec fdbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8013f70:	4681      	mov	r9, r0
 8013f72:	b168      	cbz	r0, 8013f90 <_dtoa_r+0xc8>
 8013f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f76:	2301      	movs	r3, #1
 8013f78:	6013      	str	r3, [r2, #0]
 8013f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f000 8524 	beq.w	80149ca <_dtoa_r+0xb02>
 8013f82:	4b9a      	ldr	r3, [pc, #616]	; (80141ec <_dtoa_r+0x324>)
 8013f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f86:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f8a:	6013      	str	r3, [r2, #0]
 8013f8c:	f000 bd28 	b.w	80149e0 <_dtoa_r+0xb18>
 8013f90:	aa14      	add	r2, sp, #80	; 0x50
 8013f92:	a915      	add	r1, sp, #84	; 0x54
 8013f94:	ec47 6b10 	vmov	d0, r6, r7
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f001 fbeb 	bl	8015774 <__d2b>
 8013f9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013fa2:	9004      	str	r0, [sp, #16]
 8013fa4:	2d00      	cmp	r5, #0
 8013fa6:	d07c      	beq.n	80140a2 <_dtoa_r+0x1da>
 8013fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013fb0:	46b2      	mov	sl, r6
 8013fb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013fba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	4b8b      	ldr	r3, [pc, #556]	; (80141f0 <_dtoa_r+0x328>)
 8013fc2:	4650      	mov	r0, sl
 8013fc4:	4659      	mov	r1, fp
 8013fc6:	f7ec f96f 	bl	80002a8 <__aeabi_dsub>
 8013fca:	a381      	add	r3, pc, #516	; (adr r3, 80141d0 <_dtoa_r+0x308>)
 8013fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd0:	f7ec fb22 	bl	8000618 <__aeabi_dmul>
 8013fd4:	a380      	add	r3, pc, #512	; (adr r3, 80141d8 <_dtoa_r+0x310>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f7ec f967 	bl	80002ac <__adddf3>
 8013fde:	4606      	mov	r6, r0
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	460f      	mov	r7, r1
 8013fe4:	f7ec faae 	bl	8000544 <__aeabi_i2d>
 8013fe8:	a37d      	add	r3, pc, #500	; (adr r3, 80141e0 <_dtoa_r+0x318>)
 8013fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fee:	f7ec fb13 	bl	8000618 <__aeabi_dmul>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	4639      	mov	r1, r7
 8013ffa:	f7ec f957 	bl	80002ac <__adddf3>
 8013ffe:	4606      	mov	r6, r0
 8014000:	460f      	mov	r7, r1
 8014002:	f7ec fdb9 	bl	8000b78 <__aeabi_d2iz>
 8014006:	2200      	movs	r2, #0
 8014008:	4682      	mov	sl, r0
 801400a:	2300      	movs	r3, #0
 801400c:	4630      	mov	r0, r6
 801400e:	4639      	mov	r1, r7
 8014010:	f7ec fd74 	bl	8000afc <__aeabi_dcmplt>
 8014014:	b148      	cbz	r0, 801402a <_dtoa_r+0x162>
 8014016:	4650      	mov	r0, sl
 8014018:	f7ec fa94 	bl	8000544 <__aeabi_i2d>
 801401c:	4632      	mov	r2, r6
 801401e:	463b      	mov	r3, r7
 8014020:	f7ec fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 8014024:	b908      	cbnz	r0, 801402a <_dtoa_r+0x162>
 8014026:	f10a 3aff 	add.w	sl, sl, #4294967295
 801402a:	f1ba 0f16 	cmp.w	sl, #22
 801402e:	d859      	bhi.n	80140e4 <_dtoa_r+0x21c>
 8014030:	4970      	ldr	r1, [pc, #448]	; (80141f4 <_dtoa_r+0x32c>)
 8014032:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014036:	e9dd 2300 	ldrd	r2, r3, [sp]
 801403a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801403e:	f7ec fd7b 	bl	8000b38 <__aeabi_dcmpgt>
 8014042:	2800      	cmp	r0, #0
 8014044:	d050      	beq.n	80140e8 <_dtoa_r+0x220>
 8014046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801404a:	2300      	movs	r3, #0
 801404c:	930f      	str	r3, [sp, #60]	; 0x3c
 801404e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014050:	1b5d      	subs	r5, r3, r5
 8014052:	f1b5 0801 	subs.w	r8, r5, #1
 8014056:	bf49      	itett	mi
 8014058:	f1c5 0301 	rsbmi	r3, r5, #1
 801405c:	2300      	movpl	r3, #0
 801405e:	9305      	strmi	r3, [sp, #20]
 8014060:	f04f 0800 	movmi.w	r8, #0
 8014064:	bf58      	it	pl
 8014066:	9305      	strpl	r3, [sp, #20]
 8014068:	f1ba 0f00 	cmp.w	sl, #0
 801406c:	db3e      	blt.n	80140ec <_dtoa_r+0x224>
 801406e:	2300      	movs	r3, #0
 8014070:	44d0      	add	r8, sl
 8014072:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014076:	9307      	str	r3, [sp, #28]
 8014078:	9b06      	ldr	r3, [sp, #24]
 801407a:	2b09      	cmp	r3, #9
 801407c:	f200 8090 	bhi.w	80141a0 <_dtoa_r+0x2d8>
 8014080:	2b05      	cmp	r3, #5
 8014082:	bfc4      	itt	gt
 8014084:	3b04      	subgt	r3, #4
 8014086:	9306      	strgt	r3, [sp, #24]
 8014088:	9b06      	ldr	r3, [sp, #24]
 801408a:	f1a3 0302 	sub.w	r3, r3, #2
 801408e:	bfcc      	ite	gt
 8014090:	2500      	movgt	r5, #0
 8014092:	2501      	movle	r5, #1
 8014094:	2b03      	cmp	r3, #3
 8014096:	f200 808f 	bhi.w	80141b8 <_dtoa_r+0x2f0>
 801409a:	e8df f003 	tbb	[pc, r3]
 801409e:	7f7d      	.short	0x7f7d
 80140a0:	7131      	.short	0x7131
 80140a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80140a6:	441d      	add	r5, r3
 80140a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80140ac:	2820      	cmp	r0, #32
 80140ae:	dd13      	ble.n	80140d8 <_dtoa_r+0x210>
 80140b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80140b4:	9b00      	ldr	r3, [sp, #0]
 80140b6:	fa08 f800 	lsl.w	r8, r8, r0
 80140ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80140be:	fa23 f000 	lsr.w	r0, r3, r0
 80140c2:	ea48 0000 	orr.w	r0, r8, r0
 80140c6:	f7ec fa2d 	bl	8000524 <__aeabi_ui2d>
 80140ca:	2301      	movs	r3, #1
 80140cc:	4682      	mov	sl, r0
 80140ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80140d2:	3d01      	subs	r5, #1
 80140d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80140d6:	e772      	b.n	8013fbe <_dtoa_r+0xf6>
 80140d8:	9b00      	ldr	r3, [sp, #0]
 80140da:	f1c0 0020 	rsb	r0, r0, #32
 80140de:	fa03 f000 	lsl.w	r0, r3, r0
 80140e2:	e7f0      	b.n	80140c6 <_dtoa_r+0x1fe>
 80140e4:	2301      	movs	r3, #1
 80140e6:	e7b1      	b.n	801404c <_dtoa_r+0x184>
 80140e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80140ea:	e7b0      	b.n	801404e <_dtoa_r+0x186>
 80140ec:	9b05      	ldr	r3, [sp, #20]
 80140ee:	eba3 030a 	sub.w	r3, r3, sl
 80140f2:	9305      	str	r3, [sp, #20]
 80140f4:	f1ca 0300 	rsb	r3, sl, #0
 80140f8:	9307      	str	r3, [sp, #28]
 80140fa:	2300      	movs	r3, #0
 80140fc:	930e      	str	r3, [sp, #56]	; 0x38
 80140fe:	e7bb      	b.n	8014078 <_dtoa_r+0x1b0>
 8014100:	2301      	movs	r3, #1
 8014102:	930a      	str	r3, [sp, #40]	; 0x28
 8014104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014106:	2b00      	cmp	r3, #0
 8014108:	dd59      	ble.n	80141be <_dtoa_r+0x2f6>
 801410a:	9302      	str	r3, [sp, #8]
 801410c:	4699      	mov	r9, r3
 801410e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014110:	2200      	movs	r2, #0
 8014112:	6072      	str	r2, [r6, #4]
 8014114:	2204      	movs	r2, #4
 8014116:	f102 0014 	add.w	r0, r2, #20
 801411a:	4298      	cmp	r0, r3
 801411c:	6871      	ldr	r1, [r6, #4]
 801411e:	d953      	bls.n	80141c8 <_dtoa_r+0x300>
 8014120:	4620      	mov	r0, r4
 8014122:	f000 ffe5 	bl	80150f0 <_Balloc>
 8014126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014128:	6030      	str	r0, [r6, #0]
 801412a:	f1b9 0f0e 	cmp.w	r9, #14
 801412e:	f8d3 b000 	ldr.w	fp, [r3]
 8014132:	f200 80e6 	bhi.w	8014302 <_dtoa_r+0x43a>
 8014136:	2d00      	cmp	r5, #0
 8014138:	f000 80e3 	beq.w	8014302 <_dtoa_r+0x43a>
 801413c:	ed9d 7b00 	vldr	d7, [sp]
 8014140:	f1ba 0f00 	cmp.w	sl, #0
 8014144:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014148:	dd74      	ble.n	8014234 <_dtoa_r+0x36c>
 801414a:	4a2a      	ldr	r2, [pc, #168]	; (80141f4 <_dtoa_r+0x32c>)
 801414c:	f00a 030f 	and.w	r3, sl, #15
 8014150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014154:	ed93 7b00 	vldr	d7, [r3]
 8014158:	ea4f 162a 	mov.w	r6, sl, asr #4
 801415c:	06f0      	lsls	r0, r6, #27
 801415e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014162:	d565      	bpl.n	8014230 <_dtoa_r+0x368>
 8014164:	4b24      	ldr	r3, [pc, #144]	; (80141f8 <_dtoa_r+0x330>)
 8014166:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801416a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801416e:	f7ec fb7d 	bl	800086c <__aeabi_ddiv>
 8014172:	e9cd 0100 	strd	r0, r1, [sp]
 8014176:	f006 060f 	and.w	r6, r6, #15
 801417a:	2503      	movs	r5, #3
 801417c:	4f1e      	ldr	r7, [pc, #120]	; (80141f8 <_dtoa_r+0x330>)
 801417e:	e04c      	b.n	801421a <_dtoa_r+0x352>
 8014180:	2301      	movs	r3, #1
 8014182:	930a      	str	r3, [sp, #40]	; 0x28
 8014184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014186:	4453      	add	r3, sl
 8014188:	f103 0901 	add.w	r9, r3, #1
 801418c:	9302      	str	r3, [sp, #8]
 801418e:	464b      	mov	r3, r9
 8014190:	2b01      	cmp	r3, #1
 8014192:	bfb8      	it	lt
 8014194:	2301      	movlt	r3, #1
 8014196:	e7ba      	b.n	801410e <_dtoa_r+0x246>
 8014198:	2300      	movs	r3, #0
 801419a:	e7b2      	b.n	8014102 <_dtoa_r+0x23a>
 801419c:	2300      	movs	r3, #0
 801419e:	e7f0      	b.n	8014182 <_dtoa_r+0x2ba>
 80141a0:	2501      	movs	r5, #1
 80141a2:	2300      	movs	r3, #0
 80141a4:	9306      	str	r3, [sp, #24]
 80141a6:	950a      	str	r5, [sp, #40]	; 0x28
 80141a8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ac:	9302      	str	r3, [sp, #8]
 80141ae:	4699      	mov	r9, r3
 80141b0:	2200      	movs	r2, #0
 80141b2:	2312      	movs	r3, #18
 80141b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80141b6:	e7aa      	b.n	801410e <_dtoa_r+0x246>
 80141b8:	2301      	movs	r3, #1
 80141ba:	930a      	str	r3, [sp, #40]	; 0x28
 80141bc:	e7f4      	b.n	80141a8 <_dtoa_r+0x2e0>
 80141be:	2301      	movs	r3, #1
 80141c0:	9302      	str	r3, [sp, #8]
 80141c2:	4699      	mov	r9, r3
 80141c4:	461a      	mov	r2, r3
 80141c6:	e7f5      	b.n	80141b4 <_dtoa_r+0x2ec>
 80141c8:	3101      	adds	r1, #1
 80141ca:	6071      	str	r1, [r6, #4]
 80141cc:	0052      	lsls	r2, r2, #1
 80141ce:	e7a2      	b.n	8014116 <_dtoa_r+0x24e>
 80141d0:	636f4361 	.word	0x636f4361
 80141d4:	3fd287a7 	.word	0x3fd287a7
 80141d8:	8b60c8b3 	.word	0x8b60c8b3
 80141dc:	3fc68a28 	.word	0x3fc68a28
 80141e0:	509f79fb 	.word	0x509f79fb
 80141e4:	3fd34413 	.word	0x3fd34413
 80141e8:	7ff00000 	.word	0x7ff00000
 80141ec:	0801847c 	.word	0x0801847c
 80141f0:	3ff80000 	.word	0x3ff80000
 80141f4:	08018380 	.word	0x08018380
 80141f8:	08018358 	.word	0x08018358
 80141fc:	08018349 	.word	0x08018349
 8014200:	07f1      	lsls	r1, r6, #31
 8014202:	d508      	bpl.n	8014216 <_dtoa_r+0x34e>
 8014204:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014208:	e9d7 2300 	ldrd	r2, r3, [r7]
 801420c:	f7ec fa04 	bl	8000618 <__aeabi_dmul>
 8014210:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014214:	3501      	adds	r5, #1
 8014216:	1076      	asrs	r6, r6, #1
 8014218:	3708      	adds	r7, #8
 801421a:	2e00      	cmp	r6, #0
 801421c:	d1f0      	bne.n	8014200 <_dtoa_r+0x338>
 801421e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014226:	f7ec fb21 	bl	800086c <__aeabi_ddiv>
 801422a:	e9cd 0100 	strd	r0, r1, [sp]
 801422e:	e01a      	b.n	8014266 <_dtoa_r+0x39e>
 8014230:	2502      	movs	r5, #2
 8014232:	e7a3      	b.n	801417c <_dtoa_r+0x2b4>
 8014234:	f000 80a0 	beq.w	8014378 <_dtoa_r+0x4b0>
 8014238:	f1ca 0600 	rsb	r6, sl, #0
 801423c:	4b9f      	ldr	r3, [pc, #636]	; (80144bc <_dtoa_r+0x5f4>)
 801423e:	4fa0      	ldr	r7, [pc, #640]	; (80144c0 <_dtoa_r+0x5f8>)
 8014240:	f006 020f 	and.w	r2, r6, #15
 8014244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014250:	f7ec f9e2 	bl	8000618 <__aeabi_dmul>
 8014254:	e9cd 0100 	strd	r0, r1, [sp]
 8014258:	1136      	asrs	r6, r6, #4
 801425a:	2300      	movs	r3, #0
 801425c:	2502      	movs	r5, #2
 801425e:	2e00      	cmp	r6, #0
 8014260:	d17f      	bne.n	8014362 <_dtoa_r+0x49a>
 8014262:	2b00      	cmp	r3, #0
 8014264:	d1e1      	bne.n	801422a <_dtoa_r+0x362>
 8014266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014268:	2b00      	cmp	r3, #0
 801426a:	f000 8087 	beq.w	801437c <_dtoa_r+0x4b4>
 801426e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014272:	2200      	movs	r2, #0
 8014274:	4b93      	ldr	r3, [pc, #588]	; (80144c4 <_dtoa_r+0x5fc>)
 8014276:	4630      	mov	r0, r6
 8014278:	4639      	mov	r1, r7
 801427a:	f7ec fc3f 	bl	8000afc <__aeabi_dcmplt>
 801427e:	2800      	cmp	r0, #0
 8014280:	d07c      	beq.n	801437c <_dtoa_r+0x4b4>
 8014282:	f1b9 0f00 	cmp.w	r9, #0
 8014286:	d079      	beq.n	801437c <_dtoa_r+0x4b4>
 8014288:	9b02      	ldr	r3, [sp, #8]
 801428a:	2b00      	cmp	r3, #0
 801428c:	dd35      	ble.n	80142fa <_dtoa_r+0x432>
 801428e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014292:	9308      	str	r3, [sp, #32]
 8014294:	4639      	mov	r1, r7
 8014296:	2200      	movs	r2, #0
 8014298:	4b8b      	ldr	r3, [pc, #556]	; (80144c8 <_dtoa_r+0x600>)
 801429a:	4630      	mov	r0, r6
 801429c:	f7ec f9bc 	bl	8000618 <__aeabi_dmul>
 80142a0:	e9cd 0100 	strd	r0, r1, [sp]
 80142a4:	9f02      	ldr	r7, [sp, #8]
 80142a6:	3501      	adds	r5, #1
 80142a8:	4628      	mov	r0, r5
 80142aa:	f7ec f94b 	bl	8000544 <__aeabi_i2d>
 80142ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142b2:	f7ec f9b1 	bl	8000618 <__aeabi_dmul>
 80142b6:	2200      	movs	r2, #0
 80142b8:	4b84      	ldr	r3, [pc, #528]	; (80144cc <_dtoa_r+0x604>)
 80142ba:	f7eb fff7 	bl	80002ac <__adddf3>
 80142be:	4605      	mov	r5, r0
 80142c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80142c4:	2f00      	cmp	r7, #0
 80142c6:	d15d      	bne.n	8014384 <_dtoa_r+0x4bc>
 80142c8:	2200      	movs	r2, #0
 80142ca:	4b81      	ldr	r3, [pc, #516]	; (80144d0 <_dtoa_r+0x608>)
 80142cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142d0:	f7eb ffea 	bl	80002a8 <__aeabi_dsub>
 80142d4:	462a      	mov	r2, r5
 80142d6:	4633      	mov	r3, r6
 80142d8:	e9cd 0100 	strd	r0, r1, [sp]
 80142dc:	f7ec fc2c 	bl	8000b38 <__aeabi_dcmpgt>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	f040 8288 	bne.w	80147f6 <_dtoa_r+0x92e>
 80142e6:	462a      	mov	r2, r5
 80142e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80142ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142f0:	f7ec fc04 	bl	8000afc <__aeabi_dcmplt>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	f040 827c 	bne.w	80147f2 <_dtoa_r+0x92a>
 80142fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142fe:	e9cd 2300 	strd	r2, r3, [sp]
 8014302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014304:	2b00      	cmp	r3, #0
 8014306:	f2c0 8150 	blt.w	80145aa <_dtoa_r+0x6e2>
 801430a:	f1ba 0f0e 	cmp.w	sl, #14
 801430e:	f300 814c 	bgt.w	80145aa <_dtoa_r+0x6e2>
 8014312:	4b6a      	ldr	r3, [pc, #424]	; (80144bc <_dtoa_r+0x5f4>)
 8014314:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014318:	ed93 7b00 	vldr	d7, [r3]
 801431c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801431e:	2b00      	cmp	r3, #0
 8014320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014324:	f280 80d8 	bge.w	80144d8 <_dtoa_r+0x610>
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	f300 80d4 	bgt.w	80144d8 <_dtoa_r+0x610>
 8014330:	f040 825e 	bne.w	80147f0 <_dtoa_r+0x928>
 8014334:	2200      	movs	r2, #0
 8014336:	4b66      	ldr	r3, [pc, #408]	; (80144d0 <_dtoa_r+0x608>)
 8014338:	ec51 0b17 	vmov	r0, r1, d7
 801433c:	f7ec f96c 	bl	8000618 <__aeabi_dmul>
 8014340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014344:	f7ec fbee 	bl	8000b24 <__aeabi_dcmpge>
 8014348:	464f      	mov	r7, r9
 801434a:	464e      	mov	r6, r9
 801434c:	2800      	cmp	r0, #0
 801434e:	f040 8234 	bne.w	80147ba <_dtoa_r+0x8f2>
 8014352:	2331      	movs	r3, #49	; 0x31
 8014354:	f10b 0501 	add.w	r5, fp, #1
 8014358:	f88b 3000 	strb.w	r3, [fp]
 801435c:	f10a 0a01 	add.w	sl, sl, #1
 8014360:	e22f      	b.n	80147c2 <_dtoa_r+0x8fa>
 8014362:	07f2      	lsls	r2, r6, #31
 8014364:	d505      	bpl.n	8014372 <_dtoa_r+0x4aa>
 8014366:	e9d7 2300 	ldrd	r2, r3, [r7]
 801436a:	f7ec f955 	bl	8000618 <__aeabi_dmul>
 801436e:	3501      	adds	r5, #1
 8014370:	2301      	movs	r3, #1
 8014372:	1076      	asrs	r6, r6, #1
 8014374:	3708      	adds	r7, #8
 8014376:	e772      	b.n	801425e <_dtoa_r+0x396>
 8014378:	2502      	movs	r5, #2
 801437a:	e774      	b.n	8014266 <_dtoa_r+0x39e>
 801437c:	f8cd a020 	str.w	sl, [sp, #32]
 8014380:	464f      	mov	r7, r9
 8014382:	e791      	b.n	80142a8 <_dtoa_r+0x3e0>
 8014384:	4b4d      	ldr	r3, [pc, #308]	; (80144bc <_dtoa_r+0x5f4>)
 8014386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801438a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014390:	2b00      	cmp	r3, #0
 8014392:	d047      	beq.n	8014424 <_dtoa_r+0x55c>
 8014394:	4602      	mov	r2, r0
 8014396:	460b      	mov	r3, r1
 8014398:	2000      	movs	r0, #0
 801439a:	494e      	ldr	r1, [pc, #312]	; (80144d4 <_dtoa_r+0x60c>)
 801439c:	f7ec fa66 	bl	800086c <__aeabi_ddiv>
 80143a0:	462a      	mov	r2, r5
 80143a2:	4633      	mov	r3, r6
 80143a4:	f7eb ff80 	bl	80002a8 <__aeabi_dsub>
 80143a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143ac:	465d      	mov	r5, fp
 80143ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143b2:	f7ec fbe1 	bl	8000b78 <__aeabi_d2iz>
 80143b6:	4606      	mov	r6, r0
 80143b8:	f7ec f8c4 	bl	8000544 <__aeabi_i2d>
 80143bc:	4602      	mov	r2, r0
 80143be:	460b      	mov	r3, r1
 80143c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c4:	f7eb ff70 	bl	80002a8 <__aeabi_dsub>
 80143c8:	3630      	adds	r6, #48	; 0x30
 80143ca:	f805 6b01 	strb.w	r6, [r5], #1
 80143ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143d2:	e9cd 0100 	strd	r0, r1, [sp]
 80143d6:	f7ec fb91 	bl	8000afc <__aeabi_dcmplt>
 80143da:	2800      	cmp	r0, #0
 80143dc:	d163      	bne.n	80144a6 <_dtoa_r+0x5de>
 80143de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143e2:	2000      	movs	r0, #0
 80143e4:	4937      	ldr	r1, [pc, #220]	; (80144c4 <_dtoa_r+0x5fc>)
 80143e6:	f7eb ff5f 	bl	80002a8 <__aeabi_dsub>
 80143ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143ee:	f7ec fb85 	bl	8000afc <__aeabi_dcmplt>
 80143f2:	2800      	cmp	r0, #0
 80143f4:	f040 80b7 	bne.w	8014566 <_dtoa_r+0x69e>
 80143f8:	eba5 030b 	sub.w	r3, r5, fp
 80143fc:	429f      	cmp	r7, r3
 80143fe:	f77f af7c 	ble.w	80142fa <_dtoa_r+0x432>
 8014402:	2200      	movs	r2, #0
 8014404:	4b30      	ldr	r3, [pc, #192]	; (80144c8 <_dtoa_r+0x600>)
 8014406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801440a:	f7ec f905 	bl	8000618 <__aeabi_dmul>
 801440e:	2200      	movs	r2, #0
 8014410:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014414:	4b2c      	ldr	r3, [pc, #176]	; (80144c8 <_dtoa_r+0x600>)
 8014416:	e9dd 0100 	ldrd	r0, r1, [sp]
 801441a:	f7ec f8fd 	bl	8000618 <__aeabi_dmul>
 801441e:	e9cd 0100 	strd	r0, r1, [sp]
 8014422:	e7c4      	b.n	80143ae <_dtoa_r+0x4e6>
 8014424:	462a      	mov	r2, r5
 8014426:	4633      	mov	r3, r6
 8014428:	f7ec f8f6 	bl	8000618 <__aeabi_dmul>
 801442c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014430:	eb0b 0507 	add.w	r5, fp, r7
 8014434:	465e      	mov	r6, fp
 8014436:	e9dd 0100 	ldrd	r0, r1, [sp]
 801443a:	f7ec fb9d 	bl	8000b78 <__aeabi_d2iz>
 801443e:	4607      	mov	r7, r0
 8014440:	f7ec f880 	bl	8000544 <__aeabi_i2d>
 8014444:	3730      	adds	r7, #48	; 0x30
 8014446:	4602      	mov	r2, r0
 8014448:	460b      	mov	r3, r1
 801444a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801444e:	f7eb ff2b 	bl	80002a8 <__aeabi_dsub>
 8014452:	f806 7b01 	strb.w	r7, [r6], #1
 8014456:	42ae      	cmp	r6, r5
 8014458:	e9cd 0100 	strd	r0, r1, [sp]
 801445c:	f04f 0200 	mov.w	r2, #0
 8014460:	d126      	bne.n	80144b0 <_dtoa_r+0x5e8>
 8014462:	4b1c      	ldr	r3, [pc, #112]	; (80144d4 <_dtoa_r+0x60c>)
 8014464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014468:	f7eb ff20 	bl	80002ac <__adddf3>
 801446c:	4602      	mov	r2, r0
 801446e:	460b      	mov	r3, r1
 8014470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014474:	f7ec fb60 	bl	8000b38 <__aeabi_dcmpgt>
 8014478:	2800      	cmp	r0, #0
 801447a:	d174      	bne.n	8014566 <_dtoa_r+0x69e>
 801447c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014480:	2000      	movs	r0, #0
 8014482:	4914      	ldr	r1, [pc, #80]	; (80144d4 <_dtoa_r+0x60c>)
 8014484:	f7eb ff10 	bl	80002a8 <__aeabi_dsub>
 8014488:	4602      	mov	r2, r0
 801448a:	460b      	mov	r3, r1
 801448c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014490:	f7ec fb34 	bl	8000afc <__aeabi_dcmplt>
 8014494:	2800      	cmp	r0, #0
 8014496:	f43f af30 	beq.w	80142fa <_dtoa_r+0x432>
 801449a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801449e:	2b30      	cmp	r3, #48	; 0x30
 80144a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80144a4:	d002      	beq.n	80144ac <_dtoa_r+0x5e4>
 80144a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80144aa:	e04a      	b.n	8014542 <_dtoa_r+0x67a>
 80144ac:	4615      	mov	r5, r2
 80144ae:	e7f4      	b.n	801449a <_dtoa_r+0x5d2>
 80144b0:	4b05      	ldr	r3, [pc, #20]	; (80144c8 <_dtoa_r+0x600>)
 80144b2:	f7ec f8b1 	bl	8000618 <__aeabi_dmul>
 80144b6:	e9cd 0100 	strd	r0, r1, [sp]
 80144ba:	e7bc      	b.n	8014436 <_dtoa_r+0x56e>
 80144bc:	08018380 	.word	0x08018380
 80144c0:	08018358 	.word	0x08018358
 80144c4:	3ff00000 	.word	0x3ff00000
 80144c8:	40240000 	.word	0x40240000
 80144cc:	401c0000 	.word	0x401c0000
 80144d0:	40140000 	.word	0x40140000
 80144d4:	3fe00000 	.word	0x3fe00000
 80144d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80144dc:	465d      	mov	r5, fp
 80144de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144e2:	4630      	mov	r0, r6
 80144e4:	4639      	mov	r1, r7
 80144e6:	f7ec f9c1 	bl	800086c <__aeabi_ddiv>
 80144ea:	f7ec fb45 	bl	8000b78 <__aeabi_d2iz>
 80144ee:	4680      	mov	r8, r0
 80144f0:	f7ec f828 	bl	8000544 <__aeabi_i2d>
 80144f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144f8:	f7ec f88e 	bl	8000618 <__aeabi_dmul>
 80144fc:	4602      	mov	r2, r0
 80144fe:	460b      	mov	r3, r1
 8014500:	4630      	mov	r0, r6
 8014502:	4639      	mov	r1, r7
 8014504:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014508:	f7eb fece 	bl	80002a8 <__aeabi_dsub>
 801450c:	f805 6b01 	strb.w	r6, [r5], #1
 8014510:	eba5 060b 	sub.w	r6, r5, fp
 8014514:	45b1      	cmp	r9, r6
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	d139      	bne.n	8014590 <_dtoa_r+0x6c8>
 801451c:	f7eb fec6 	bl	80002ac <__adddf3>
 8014520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014524:	4606      	mov	r6, r0
 8014526:	460f      	mov	r7, r1
 8014528:	f7ec fb06 	bl	8000b38 <__aeabi_dcmpgt>
 801452c:	b9c8      	cbnz	r0, 8014562 <_dtoa_r+0x69a>
 801452e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014532:	4630      	mov	r0, r6
 8014534:	4639      	mov	r1, r7
 8014536:	f7ec fad7 	bl	8000ae8 <__aeabi_dcmpeq>
 801453a:	b110      	cbz	r0, 8014542 <_dtoa_r+0x67a>
 801453c:	f018 0f01 	tst.w	r8, #1
 8014540:	d10f      	bne.n	8014562 <_dtoa_r+0x69a>
 8014542:	9904      	ldr	r1, [sp, #16]
 8014544:	4620      	mov	r0, r4
 8014546:	f000 fe07 	bl	8015158 <_Bfree>
 801454a:	2300      	movs	r3, #0
 801454c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801454e:	702b      	strb	r3, [r5, #0]
 8014550:	f10a 0301 	add.w	r3, sl, #1
 8014554:	6013      	str	r3, [r2, #0]
 8014556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014558:	2b00      	cmp	r3, #0
 801455a:	f000 8241 	beq.w	80149e0 <_dtoa_r+0xb18>
 801455e:	601d      	str	r5, [r3, #0]
 8014560:	e23e      	b.n	80149e0 <_dtoa_r+0xb18>
 8014562:	f8cd a020 	str.w	sl, [sp, #32]
 8014566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801456a:	2a39      	cmp	r2, #57	; 0x39
 801456c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014570:	d108      	bne.n	8014584 <_dtoa_r+0x6bc>
 8014572:	459b      	cmp	fp, r3
 8014574:	d10a      	bne.n	801458c <_dtoa_r+0x6c4>
 8014576:	9b08      	ldr	r3, [sp, #32]
 8014578:	3301      	adds	r3, #1
 801457a:	9308      	str	r3, [sp, #32]
 801457c:	2330      	movs	r3, #48	; 0x30
 801457e:	f88b 3000 	strb.w	r3, [fp]
 8014582:	465b      	mov	r3, fp
 8014584:	781a      	ldrb	r2, [r3, #0]
 8014586:	3201      	adds	r2, #1
 8014588:	701a      	strb	r2, [r3, #0]
 801458a:	e78c      	b.n	80144a6 <_dtoa_r+0x5de>
 801458c:	461d      	mov	r5, r3
 801458e:	e7ea      	b.n	8014566 <_dtoa_r+0x69e>
 8014590:	2200      	movs	r2, #0
 8014592:	4b9b      	ldr	r3, [pc, #620]	; (8014800 <_dtoa_r+0x938>)
 8014594:	f7ec f840 	bl	8000618 <__aeabi_dmul>
 8014598:	2200      	movs	r2, #0
 801459a:	2300      	movs	r3, #0
 801459c:	4606      	mov	r6, r0
 801459e:	460f      	mov	r7, r1
 80145a0:	f7ec faa2 	bl	8000ae8 <__aeabi_dcmpeq>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d09a      	beq.n	80144de <_dtoa_r+0x616>
 80145a8:	e7cb      	b.n	8014542 <_dtoa_r+0x67a>
 80145aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145ac:	2a00      	cmp	r2, #0
 80145ae:	f000 808b 	beq.w	80146c8 <_dtoa_r+0x800>
 80145b2:	9a06      	ldr	r2, [sp, #24]
 80145b4:	2a01      	cmp	r2, #1
 80145b6:	dc6e      	bgt.n	8014696 <_dtoa_r+0x7ce>
 80145b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145ba:	2a00      	cmp	r2, #0
 80145bc:	d067      	beq.n	801468e <_dtoa_r+0x7c6>
 80145be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80145c2:	9f07      	ldr	r7, [sp, #28]
 80145c4:	9d05      	ldr	r5, [sp, #20]
 80145c6:	9a05      	ldr	r2, [sp, #20]
 80145c8:	2101      	movs	r1, #1
 80145ca:	441a      	add	r2, r3
 80145cc:	4620      	mov	r0, r4
 80145ce:	9205      	str	r2, [sp, #20]
 80145d0:	4498      	add	r8, r3
 80145d2:	f000 fe9f 	bl	8015314 <__i2b>
 80145d6:	4606      	mov	r6, r0
 80145d8:	2d00      	cmp	r5, #0
 80145da:	dd0c      	ble.n	80145f6 <_dtoa_r+0x72e>
 80145dc:	f1b8 0f00 	cmp.w	r8, #0
 80145e0:	dd09      	ble.n	80145f6 <_dtoa_r+0x72e>
 80145e2:	4545      	cmp	r5, r8
 80145e4:	9a05      	ldr	r2, [sp, #20]
 80145e6:	462b      	mov	r3, r5
 80145e8:	bfa8      	it	ge
 80145ea:	4643      	movge	r3, r8
 80145ec:	1ad2      	subs	r2, r2, r3
 80145ee:	9205      	str	r2, [sp, #20]
 80145f0:	1aed      	subs	r5, r5, r3
 80145f2:	eba8 0803 	sub.w	r8, r8, r3
 80145f6:	9b07      	ldr	r3, [sp, #28]
 80145f8:	b1eb      	cbz	r3, 8014636 <_dtoa_r+0x76e>
 80145fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d067      	beq.n	80146d0 <_dtoa_r+0x808>
 8014600:	b18f      	cbz	r7, 8014626 <_dtoa_r+0x75e>
 8014602:	4631      	mov	r1, r6
 8014604:	463a      	mov	r2, r7
 8014606:	4620      	mov	r0, r4
 8014608:	f000 ff24 	bl	8015454 <__pow5mult>
 801460c:	9a04      	ldr	r2, [sp, #16]
 801460e:	4601      	mov	r1, r0
 8014610:	4606      	mov	r6, r0
 8014612:	4620      	mov	r0, r4
 8014614:	f000 fe87 	bl	8015326 <__multiply>
 8014618:	9904      	ldr	r1, [sp, #16]
 801461a:	9008      	str	r0, [sp, #32]
 801461c:	4620      	mov	r0, r4
 801461e:	f000 fd9b 	bl	8015158 <_Bfree>
 8014622:	9b08      	ldr	r3, [sp, #32]
 8014624:	9304      	str	r3, [sp, #16]
 8014626:	9b07      	ldr	r3, [sp, #28]
 8014628:	1bda      	subs	r2, r3, r7
 801462a:	d004      	beq.n	8014636 <_dtoa_r+0x76e>
 801462c:	9904      	ldr	r1, [sp, #16]
 801462e:	4620      	mov	r0, r4
 8014630:	f000 ff10 	bl	8015454 <__pow5mult>
 8014634:	9004      	str	r0, [sp, #16]
 8014636:	2101      	movs	r1, #1
 8014638:	4620      	mov	r0, r4
 801463a:	f000 fe6b 	bl	8015314 <__i2b>
 801463e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014640:	4607      	mov	r7, r0
 8014642:	2b00      	cmp	r3, #0
 8014644:	f000 81d0 	beq.w	80149e8 <_dtoa_r+0xb20>
 8014648:	461a      	mov	r2, r3
 801464a:	4601      	mov	r1, r0
 801464c:	4620      	mov	r0, r4
 801464e:	f000 ff01 	bl	8015454 <__pow5mult>
 8014652:	9b06      	ldr	r3, [sp, #24]
 8014654:	2b01      	cmp	r3, #1
 8014656:	4607      	mov	r7, r0
 8014658:	dc40      	bgt.n	80146dc <_dtoa_r+0x814>
 801465a:	9b00      	ldr	r3, [sp, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d139      	bne.n	80146d4 <_dtoa_r+0x80c>
 8014660:	9b01      	ldr	r3, [sp, #4]
 8014662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014666:	2b00      	cmp	r3, #0
 8014668:	d136      	bne.n	80146d8 <_dtoa_r+0x810>
 801466a:	9b01      	ldr	r3, [sp, #4]
 801466c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014670:	0d1b      	lsrs	r3, r3, #20
 8014672:	051b      	lsls	r3, r3, #20
 8014674:	b12b      	cbz	r3, 8014682 <_dtoa_r+0x7ba>
 8014676:	9b05      	ldr	r3, [sp, #20]
 8014678:	3301      	adds	r3, #1
 801467a:	9305      	str	r3, [sp, #20]
 801467c:	f108 0801 	add.w	r8, r8, #1
 8014680:	2301      	movs	r3, #1
 8014682:	9307      	str	r3, [sp, #28]
 8014684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014686:	2b00      	cmp	r3, #0
 8014688:	d12a      	bne.n	80146e0 <_dtoa_r+0x818>
 801468a:	2001      	movs	r0, #1
 801468c:	e030      	b.n	80146f0 <_dtoa_r+0x828>
 801468e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014690:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014694:	e795      	b.n	80145c2 <_dtoa_r+0x6fa>
 8014696:	9b07      	ldr	r3, [sp, #28]
 8014698:	f109 37ff 	add.w	r7, r9, #4294967295
 801469c:	42bb      	cmp	r3, r7
 801469e:	bfbf      	itttt	lt
 80146a0:	9b07      	ldrlt	r3, [sp, #28]
 80146a2:	9707      	strlt	r7, [sp, #28]
 80146a4:	1afa      	sublt	r2, r7, r3
 80146a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80146a8:	bfbb      	ittet	lt
 80146aa:	189b      	addlt	r3, r3, r2
 80146ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80146ae:	1bdf      	subge	r7, r3, r7
 80146b0:	2700      	movlt	r7, #0
 80146b2:	f1b9 0f00 	cmp.w	r9, #0
 80146b6:	bfb5      	itete	lt
 80146b8:	9b05      	ldrlt	r3, [sp, #20]
 80146ba:	9d05      	ldrge	r5, [sp, #20]
 80146bc:	eba3 0509 	sublt.w	r5, r3, r9
 80146c0:	464b      	movge	r3, r9
 80146c2:	bfb8      	it	lt
 80146c4:	2300      	movlt	r3, #0
 80146c6:	e77e      	b.n	80145c6 <_dtoa_r+0x6fe>
 80146c8:	9f07      	ldr	r7, [sp, #28]
 80146ca:	9d05      	ldr	r5, [sp, #20]
 80146cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80146ce:	e783      	b.n	80145d8 <_dtoa_r+0x710>
 80146d0:	9a07      	ldr	r2, [sp, #28]
 80146d2:	e7ab      	b.n	801462c <_dtoa_r+0x764>
 80146d4:	2300      	movs	r3, #0
 80146d6:	e7d4      	b.n	8014682 <_dtoa_r+0x7ba>
 80146d8:	9b00      	ldr	r3, [sp, #0]
 80146da:	e7d2      	b.n	8014682 <_dtoa_r+0x7ba>
 80146dc:	2300      	movs	r3, #0
 80146de:	9307      	str	r3, [sp, #28]
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80146e6:	6918      	ldr	r0, [r3, #16]
 80146e8:	f000 fdc6 	bl	8015278 <__hi0bits>
 80146ec:	f1c0 0020 	rsb	r0, r0, #32
 80146f0:	4440      	add	r0, r8
 80146f2:	f010 001f 	ands.w	r0, r0, #31
 80146f6:	d047      	beq.n	8014788 <_dtoa_r+0x8c0>
 80146f8:	f1c0 0320 	rsb	r3, r0, #32
 80146fc:	2b04      	cmp	r3, #4
 80146fe:	dd3b      	ble.n	8014778 <_dtoa_r+0x8b0>
 8014700:	9b05      	ldr	r3, [sp, #20]
 8014702:	f1c0 001c 	rsb	r0, r0, #28
 8014706:	4403      	add	r3, r0
 8014708:	9305      	str	r3, [sp, #20]
 801470a:	4405      	add	r5, r0
 801470c:	4480      	add	r8, r0
 801470e:	9b05      	ldr	r3, [sp, #20]
 8014710:	2b00      	cmp	r3, #0
 8014712:	dd05      	ble.n	8014720 <_dtoa_r+0x858>
 8014714:	461a      	mov	r2, r3
 8014716:	9904      	ldr	r1, [sp, #16]
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fee9 	bl	80154f0 <__lshift>
 801471e:	9004      	str	r0, [sp, #16]
 8014720:	f1b8 0f00 	cmp.w	r8, #0
 8014724:	dd05      	ble.n	8014732 <_dtoa_r+0x86a>
 8014726:	4639      	mov	r1, r7
 8014728:	4642      	mov	r2, r8
 801472a:	4620      	mov	r0, r4
 801472c:	f000 fee0 	bl	80154f0 <__lshift>
 8014730:	4607      	mov	r7, r0
 8014732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014734:	b353      	cbz	r3, 801478c <_dtoa_r+0x8c4>
 8014736:	4639      	mov	r1, r7
 8014738:	9804      	ldr	r0, [sp, #16]
 801473a:	f000 ff2d 	bl	8015598 <__mcmp>
 801473e:	2800      	cmp	r0, #0
 8014740:	da24      	bge.n	801478c <_dtoa_r+0x8c4>
 8014742:	2300      	movs	r3, #0
 8014744:	220a      	movs	r2, #10
 8014746:	9904      	ldr	r1, [sp, #16]
 8014748:	4620      	mov	r0, r4
 801474a:	f000 fd1c 	bl	8015186 <__multadd>
 801474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014750:	9004      	str	r0, [sp, #16]
 8014752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014756:	2b00      	cmp	r3, #0
 8014758:	f000 814d 	beq.w	80149f6 <_dtoa_r+0xb2e>
 801475c:	2300      	movs	r3, #0
 801475e:	4631      	mov	r1, r6
 8014760:	220a      	movs	r2, #10
 8014762:	4620      	mov	r0, r4
 8014764:	f000 fd0f 	bl	8015186 <__multadd>
 8014768:	9b02      	ldr	r3, [sp, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	4606      	mov	r6, r0
 801476e:	dc4f      	bgt.n	8014810 <_dtoa_r+0x948>
 8014770:	9b06      	ldr	r3, [sp, #24]
 8014772:	2b02      	cmp	r3, #2
 8014774:	dd4c      	ble.n	8014810 <_dtoa_r+0x948>
 8014776:	e011      	b.n	801479c <_dtoa_r+0x8d4>
 8014778:	d0c9      	beq.n	801470e <_dtoa_r+0x846>
 801477a:	9a05      	ldr	r2, [sp, #20]
 801477c:	331c      	adds	r3, #28
 801477e:	441a      	add	r2, r3
 8014780:	9205      	str	r2, [sp, #20]
 8014782:	441d      	add	r5, r3
 8014784:	4498      	add	r8, r3
 8014786:	e7c2      	b.n	801470e <_dtoa_r+0x846>
 8014788:	4603      	mov	r3, r0
 801478a:	e7f6      	b.n	801477a <_dtoa_r+0x8b2>
 801478c:	f1b9 0f00 	cmp.w	r9, #0
 8014790:	dc38      	bgt.n	8014804 <_dtoa_r+0x93c>
 8014792:	9b06      	ldr	r3, [sp, #24]
 8014794:	2b02      	cmp	r3, #2
 8014796:	dd35      	ble.n	8014804 <_dtoa_r+0x93c>
 8014798:	f8cd 9008 	str.w	r9, [sp, #8]
 801479c:	9b02      	ldr	r3, [sp, #8]
 801479e:	b963      	cbnz	r3, 80147ba <_dtoa_r+0x8f2>
 80147a0:	4639      	mov	r1, r7
 80147a2:	2205      	movs	r2, #5
 80147a4:	4620      	mov	r0, r4
 80147a6:	f000 fcee 	bl	8015186 <__multadd>
 80147aa:	4601      	mov	r1, r0
 80147ac:	4607      	mov	r7, r0
 80147ae:	9804      	ldr	r0, [sp, #16]
 80147b0:	f000 fef2 	bl	8015598 <__mcmp>
 80147b4:	2800      	cmp	r0, #0
 80147b6:	f73f adcc 	bgt.w	8014352 <_dtoa_r+0x48a>
 80147ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147bc:	465d      	mov	r5, fp
 80147be:	ea6f 0a03 	mvn.w	sl, r3
 80147c2:	f04f 0900 	mov.w	r9, #0
 80147c6:	4639      	mov	r1, r7
 80147c8:	4620      	mov	r0, r4
 80147ca:	f000 fcc5 	bl	8015158 <_Bfree>
 80147ce:	2e00      	cmp	r6, #0
 80147d0:	f43f aeb7 	beq.w	8014542 <_dtoa_r+0x67a>
 80147d4:	f1b9 0f00 	cmp.w	r9, #0
 80147d8:	d005      	beq.n	80147e6 <_dtoa_r+0x91e>
 80147da:	45b1      	cmp	r9, r6
 80147dc:	d003      	beq.n	80147e6 <_dtoa_r+0x91e>
 80147de:	4649      	mov	r1, r9
 80147e0:	4620      	mov	r0, r4
 80147e2:	f000 fcb9 	bl	8015158 <_Bfree>
 80147e6:	4631      	mov	r1, r6
 80147e8:	4620      	mov	r0, r4
 80147ea:	f000 fcb5 	bl	8015158 <_Bfree>
 80147ee:	e6a8      	b.n	8014542 <_dtoa_r+0x67a>
 80147f0:	2700      	movs	r7, #0
 80147f2:	463e      	mov	r6, r7
 80147f4:	e7e1      	b.n	80147ba <_dtoa_r+0x8f2>
 80147f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80147fa:	463e      	mov	r6, r7
 80147fc:	e5a9      	b.n	8014352 <_dtoa_r+0x48a>
 80147fe:	bf00      	nop
 8014800:	40240000 	.word	0x40240000
 8014804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014806:	f8cd 9008 	str.w	r9, [sp, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	f000 80fa 	beq.w	8014a04 <_dtoa_r+0xb3c>
 8014810:	2d00      	cmp	r5, #0
 8014812:	dd05      	ble.n	8014820 <_dtoa_r+0x958>
 8014814:	4631      	mov	r1, r6
 8014816:	462a      	mov	r2, r5
 8014818:	4620      	mov	r0, r4
 801481a:	f000 fe69 	bl	80154f0 <__lshift>
 801481e:	4606      	mov	r6, r0
 8014820:	9b07      	ldr	r3, [sp, #28]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d04c      	beq.n	80148c0 <_dtoa_r+0x9f8>
 8014826:	6871      	ldr	r1, [r6, #4]
 8014828:	4620      	mov	r0, r4
 801482a:	f000 fc61 	bl	80150f0 <_Balloc>
 801482e:	6932      	ldr	r2, [r6, #16]
 8014830:	3202      	adds	r2, #2
 8014832:	4605      	mov	r5, r0
 8014834:	0092      	lsls	r2, r2, #2
 8014836:	f106 010c 	add.w	r1, r6, #12
 801483a:	300c      	adds	r0, #12
 801483c:	f7fd fc50 	bl	80120e0 <memcpy>
 8014840:	2201      	movs	r2, #1
 8014842:	4629      	mov	r1, r5
 8014844:	4620      	mov	r0, r4
 8014846:	f000 fe53 	bl	80154f0 <__lshift>
 801484a:	9b00      	ldr	r3, [sp, #0]
 801484c:	f8cd b014 	str.w	fp, [sp, #20]
 8014850:	f003 0301 	and.w	r3, r3, #1
 8014854:	46b1      	mov	r9, r6
 8014856:	9307      	str	r3, [sp, #28]
 8014858:	4606      	mov	r6, r0
 801485a:	4639      	mov	r1, r7
 801485c:	9804      	ldr	r0, [sp, #16]
 801485e:	f7ff faa5 	bl	8013dac <quorem>
 8014862:	4649      	mov	r1, r9
 8014864:	4605      	mov	r5, r0
 8014866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801486a:	9804      	ldr	r0, [sp, #16]
 801486c:	f000 fe94 	bl	8015598 <__mcmp>
 8014870:	4632      	mov	r2, r6
 8014872:	9000      	str	r0, [sp, #0]
 8014874:	4639      	mov	r1, r7
 8014876:	4620      	mov	r0, r4
 8014878:	f000 fea8 	bl	80155cc <__mdiff>
 801487c:	68c3      	ldr	r3, [r0, #12]
 801487e:	4602      	mov	r2, r0
 8014880:	bb03      	cbnz	r3, 80148c4 <_dtoa_r+0x9fc>
 8014882:	4601      	mov	r1, r0
 8014884:	9008      	str	r0, [sp, #32]
 8014886:	9804      	ldr	r0, [sp, #16]
 8014888:	f000 fe86 	bl	8015598 <__mcmp>
 801488c:	9a08      	ldr	r2, [sp, #32]
 801488e:	4603      	mov	r3, r0
 8014890:	4611      	mov	r1, r2
 8014892:	4620      	mov	r0, r4
 8014894:	9308      	str	r3, [sp, #32]
 8014896:	f000 fc5f 	bl	8015158 <_Bfree>
 801489a:	9b08      	ldr	r3, [sp, #32]
 801489c:	b9a3      	cbnz	r3, 80148c8 <_dtoa_r+0xa00>
 801489e:	9a06      	ldr	r2, [sp, #24]
 80148a0:	b992      	cbnz	r2, 80148c8 <_dtoa_r+0xa00>
 80148a2:	9a07      	ldr	r2, [sp, #28]
 80148a4:	b982      	cbnz	r2, 80148c8 <_dtoa_r+0xa00>
 80148a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148aa:	d029      	beq.n	8014900 <_dtoa_r+0xa38>
 80148ac:	9b00      	ldr	r3, [sp, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	dd01      	ble.n	80148b6 <_dtoa_r+0x9ee>
 80148b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80148b6:	9b05      	ldr	r3, [sp, #20]
 80148b8:	1c5d      	adds	r5, r3, #1
 80148ba:	f883 8000 	strb.w	r8, [r3]
 80148be:	e782      	b.n	80147c6 <_dtoa_r+0x8fe>
 80148c0:	4630      	mov	r0, r6
 80148c2:	e7c2      	b.n	801484a <_dtoa_r+0x982>
 80148c4:	2301      	movs	r3, #1
 80148c6:	e7e3      	b.n	8014890 <_dtoa_r+0x9c8>
 80148c8:	9a00      	ldr	r2, [sp, #0]
 80148ca:	2a00      	cmp	r2, #0
 80148cc:	db04      	blt.n	80148d8 <_dtoa_r+0xa10>
 80148ce:	d125      	bne.n	801491c <_dtoa_r+0xa54>
 80148d0:	9a06      	ldr	r2, [sp, #24]
 80148d2:	bb1a      	cbnz	r2, 801491c <_dtoa_r+0xa54>
 80148d4:	9a07      	ldr	r2, [sp, #28]
 80148d6:	bb0a      	cbnz	r2, 801491c <_dtoa_r+0xa54>
 80148d8:	2b00      	cmp	r3, #0
 80148da:	ddec      	ble.n	80148b6 <_dtoa_r+0x9ee>
 80148dc:	2201      	movs	r2, #1
 80148de:	9904      	ldr	r1, [sp, #16]
 80148e0:	4620      	mov	r0, r4
 80148e2:	f000 fe05 	bl	80154f0 <__lshift>
 80148e6:	4639      	mov	r1, r7
 80148e8:	9004      	str	r0, [sp, #16]
 80148ea:	f000 fe55 	bl	8015598 <__mcmp>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	dc03      	bgt.n	80148fa <_dtoa_r+0xa32>
 80148f2:	d1e0      	bne.n	80148b6 <_dtoa_r+0x9ee>
 80148f4:	f018 0f01 	tst.w	r8, #1
 80148f8:	d0dd      	beq.n	80148b6 <_dtoa_r+0x9ee>
 80148fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148fe:	d1d8      	bne.n	80148b2 <_dtoa_r+0x9ea>
 8014900:	9b05      	ldr	r3, [sp, #20]
 8014902:	9a05      	ldr	r2, [sp, #20]
 8014904:	1c5d      	adds	r5, r3, #1
 8014906:	2339      	movs	r3, #57	; 0x39
 8014908:	7013      	strb	r3, [r2, #0]
 801490a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801490e:	2b39      	cmp	r3, #57	; 0x39
 8014910:	f105 32ff 	add.w	r2, r5, #4294967295
 8014914:	d04f      	beq.n	80149b6 <_dtoa_r+0xaee>
 8014916:	3301      	adds	r3, #1
 8014918:	7013      	strb	r3, [r2, #0]
 801491a:	e754      	b.n	80147c6 <_dtoa_r+0x8fe>
 801491c:	9a05      	ldr	r2, [sp, #20]
 801491e:	2b00      	cmp	r3, #0
 8014920:	f102 0501 	add.w	r5, r2, #1
 8014924:	dd06      	ble.n	8014934 <_dtoa_r+0xa6c>
 8014926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801492a:	d0e9      	beq.n	8014900 <_dtoa_r+0xa38>
 801492c:	f108 0801 	add.w	r8, r8, #1
 8014930:	9b05      	ldr	r3, [sp, #20]
 8014932:	e7c2      	b.n	80148ba <_dtoa_r+0x9f2>
 8014934:	9a02      	ldr	r2, [sp, #8]
 8014936:	f805 8c01 	strb.w	r8, [r5, #-1]
 801493a:	eba5 030b 	sub.w	r3, r5, fp
 801493e:	4293      	cmp	r3, r2
 8014940:	d021      	beq.n	8014986 <_dtoa_r+0xabe>
 8014942:	2300      	movs	r3, #0
 8014944:	220a      	movs	r2, #10
 8014946:	9904      	ldr	r1, [sp, #16]
 8014948:	4620      	mov	r0, r4
 801494a:	f000 fc1c 	bl	8015186 <__multadd>
 801494e:	45b1      	cmp	r9, r6
 8014950:	9004      	str	r0, [sp, #16]
 8014952:	f04f 0300 	mov.w	r3, #0
 8014956:	f04f 020a 	mov.w	r2, #10
 801495a:	4649      	mov	r1, r9
 801495c:	4620      	mov	r0, r4
 801495e:	d105      	bne.n	801496c <_dtoa_r+0xaa4>
 8014960:	f000 fc11 	bl	8015186 <__multadd>
 8014964:	4681      	mov	r9, r0
 8014966:	4606      	mov	r6, r0
 8014968:	9505      	str	r5, [sp, #20]
 801496a:	e776      	b.n	801485a <_dtoa_r+0x992>
 801496c:	f000 fc0b 	bl	8015186 <__multadd>
 8014970:	4631      	mov	r1, r6
 8014972:	4681      	mov	r9, r0
 8014974:	2300      	movs	r3, #0
 8014976:	220a      	movs	r2, #10
 8014978:	4620      	mov	r0, r4
 801497a:	f000 fc04 	bl	8015186 <__multadd>
 801497e:	4606      	mov	r6, r0
 8014980:	e7f2      	b.n	8014968 <_dtoa_r+0xaa0>
 8014982:	f04f 0900 	mov.w	r9, #0
 8014986:	2201      	movs	r2, #1
 8014988:	9904      	ldr	r1, [sp, #16]
 801498a:	4620      	mov	r0, r4
 801498c:	f000 fdb0 	bl	80154f0 <__lshift>
 8014990:	4639      	mov	r1, r7
 8014992:	9004      	str	r0, [sp, #16]
 8014994:	f000 fe00 	bl	8015598 <__mcmp>
 8014998:	2800      	cmp	r0, #0
 801499a:	dcb6      	bgt.n	801490a <_dtoa_r+0xa42>
 801499c:	d102      	bne.n	80149a4 <_dtoa_r+0xadc>
 801499e:	f018 0f01 	tst.w	r8, #1
 80149a2:	d1b2      	bne.n	801490a <_dtoa_r+0xa42>
 80149a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80149a8:	2b30      	cmp	r3, #48	; 0x30
 80149aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80149ae:	f47f af0a 	bne.w	80147c6 <_dtoa_r+0x8fe>
 80149b2:	4615      	mov	r5, r2
 80149b4:	e7f6      	b.n	80149a4 <_dtoa_r+0xadc>
 80149b6:	4593      	cmp	fp, r2
 80149b8:	d105      	bne.n	80149c6 <_dtoa_r+0xafe>
 80149ba:	2331      	movs	r3, #49	; 0x31
 80149bc:	f10a 0a01 	add.w	sl, sl, #1
 80149c0:	f88b 3000 	strb.w	r3, [fp]
 80149c4:	e6ff      	b.n	80147c6 <_dtoa_r+0x8fe>
 80149c6:	4615      	mov	r5, r2
 80149c8:	e79f      	b.n	801490a <_dtoa_r+0xa42>
 80149ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014a30 <_dtoa_r+0xb68>
 80149ce:	e007      	b.n	80149e0 <_dtoa_r+0xb18>
 80149d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014a34 <_dtoa_r+0xb6c>
 80149d6:	b11b      	cbz	r3, 80149e0 <_dtoa_r+0xb18>
 80149d8:	f10b 0308 	add.w	r3, fp, #8
 80149dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149de:	6013      	str	r3, [r2, #0]
 80149e0:	4658      	mov	r0, fp
 80149e2:	b017      	add	sp, #92	; 0x5c
 80149e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e8:	9b06      	ldr	r3, [sp, #24]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	f77f ae35 	ble.w	801465a <_dtoa_r+0x792>
 80149f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149f2:	9307      	str	r3, [sp, #28]
 80149f4:	e649      	b.n	801468a <_dtoa_r+0x7c2>
 80149f6:	9b02      	ldr	r3, [sp, #8]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	dc03      	bgt.n	8014a04 <_dtoa_r+0xb3c>
 80149fc:	9b06      	ldr	r3, [sp, #24]
 80149fe:	2b02      	cmp	r3, #2
 8014a00:	f73f aecc 	bgt.w	801479c <_dtoa_r+0x8d4>
 8014a04:	465d      	mov	r5, fp
 8014a06:	4639      	mov	r1, r7
 8014a08:	9804      	ldr	r0, [sp, #16]
 8014a0a:	f7ff f9cf 	bl	8013dac <quorem>
 8014a0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014a12:	f805 8b01 	strb.w	r8, [r5], #1
 8014a16:	9a02      	ldr	r2, [sp, #8]
 8014a18:	eba5 030b 	sub.w	r3, r5, fp
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	ddb0      	ble.n	8014982 <_dtoa_r+0xaba>
 8014a20:	2300      	movs	r3, #0
 8014a22:	220a      	movs	r2, #10
 8014a24:	9904      	ldr	r1, [sp, #16]
 8014a26:	4620      	mov	r0, r4
 8014a28:	f000 fbad 	bl	8015186 <__multadd>
 8014a2c:	9004      	str	r0, [sp, #16]
 8014a2e:	e7ea      	b.n	8014a06 <_dtoa_r+0xb3e>
 8014a30:	0801847b 	.word	0x0801847b
 8014a34:	08018340 	.word	0x08018340

08014a38 <rshift>:
 8014a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a3a:	6906      	ldr	r6, [r0, #16]
 8014a3c:	114b      	asrs	r3, r1, #5
 8014a3e:	429e      	cmp	r6, r3
 8014a40:	f100 0414 	add.w	r4, r0, #20
 8014a44:	dd30      	ble.n	8014aa8 <rshift+0x70>
 8014a46:	f011 011f 	ands.w	r1, r1, #31
 8014a4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014a4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014a52:	d108      	bne.n	8014a66 <rshift+0x2e>
 8014a54:	4621      	mov	r1, r4
 8014a56:	42b2      	cmp	r2, r6
 8014a58:	460b      	mov	r3, r1
 8014a5a:	d211      	bcs.n	8014a80 <rshift+0x48>
 8014a5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8014a60:	f841 3b04 	str.w	r3, [r1], #4
 8014a64:	e7f7      	b.n	8014a56 <rshift+0x1e>
 8014a66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014a6a:	f1c1 0c20 	rsb	ip, r1, #32
 8014a6e:	40cd      	lsrs	r5, r1
 8014a70:	3204      	adds	r2, #4
 8014a72:	4623      	mov	r3, r4
 8014a74:	42b2      	cmp	r2, r6
 8014a76:	4617      	mov	r7, r2
 8014a78:	d30c      	bcc.n	8014a94 <rshift+0x5c>
 8014a7a:	601d      	str	r5, [r3, #0]
 8014a7c:	b105      	cbz	r5, 8014a80 <rshift+0x48>
 8014a7e:	3304      	adds	r3, #4
 8014a80:	1b1a      	subs	r2, r3, r4
 8014a82:	42a3      	cmp	r3, r4
 8014a84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a88:	bf08      	it	eq
 8014a8a:	2300      	moveq	r3, #0
 8014a8c:	6102      	str	r2, [r0, #16]
 8014a8e:	bf08      	it	eq
 8014a90:	6143      	streq	r3, [r0, #20]
 8014a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a94:	683f      	ldr	r7, [r7, #0]
 8014a96:	fa07 f70c 	lsl.w	r7, r7, ip
 8014a9a:	433d      	orrs	r5, r7
 8014a9c:	f843 5b04 	str.w	r5, [r3], #4
 8014aa0:	f852 5b04 	ldr.w	r5, [r2], #4
 8014aa4:	40cd      	lsrs	r5, r1
 8014aa6:	e7e5      	b.n	8014a74 <rshift+0x3c>
 8014aa8:	4623      	mov	r3, r4
 8014aaa:	e7e9      	b.n	8014a80 <rshift+0x48>

08014aac <__hexdig_fun>:
 8014aac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ab0:	2b09      	cmp	r3, #9
 8014ab2:	d802      	bhi.n	8014aba <__hexdig_fun+0xe>
 8014ab4:	3820      	subs	r0, #32
 8014ab6:	b2c0      	uxtb	r0, r0
 8014ab8:	4770      	bx	lr
 8014aba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014abe:	2b05      	cmp	r3, #5
 8014ac0:	d801      	bhi.n	8014ac6 <__hexdig_fun+0x1a>
 8014ac2:	3847      	subs	r0, #71	; 0x47
 8014ac4:	e7f7      	b.n	8014ab6 <__hexdig_fun+0xa>
 8014ac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014aca:	2b05      	cmp	r3, #5
 8014acc:	d801      	bhi.n	8014ad2 <__hexdig_fun+0x26>
 8014ace:	3827      	subs	r0, #39	; 0x27
 8014ad0:	e7f1      	b.n	8014ab6 <__hexdig_fun+0xa>
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	4770      	bx	lr

08014ad6 <__gethex>:
 8014ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ada:	b08b      	sub	sp, #44	; 0x2c
 8014adc:	468a      	mov	sl, r1
 8014ade:	9002      	str	r0, [sp, #8]
 8014ae0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014ae2:	9306      	str	r3, [sp, #24]
 8014ae4:	4690      	mov	r8, r2
 8014ae6:	f000 fadf 	bl	80150a8 <__localeconv_l>
 8014aea:	6803      	ldr	r3, [r0, #0]
 8014aec:	9303      	str	r3, [sp, #12]
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7eb fb78 	bl	80001e4 <strlen>
 8014af4:	9b03      	ldr	r3, [sp, #12]
 8014af6:	9001      	str	r0, [sp, #4]
 8014af8:	4403      	add	r3, r0
 8014afa:	f04f 0b00 	mov.w	fp, #0
 8014afe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014b02:	9307      	str	r3, [sp, #28]
 8014b04:	f8da 3000 	ldr.w	r3, [sl]
 8014b08:	3302      	adds	r3, #2
 8014b0a:	461f      	mov	r7, r3
 8014b0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014b10:	2830      	cmp	r0, #48	; 0x30
 8014b12:	d06c      	beq.n	8014bee <__gethex+0x118>
 8014b14:	f7ff ffca 	bl	8014aac <__hexdig_fun>
 8014b18:	4604      	mov	r4, r0
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	d16a      	bne.n	8014bf4 <__gethex+0x11e>
 8014b1e:	9a01      	ldr	r2, [sp, #4]
 8014b20:	9903      	ldr	r1, [sp, #12]
 8014b22:	4638      	mov	r0, r7
 8014b24:	f001 fb78 	bl	8016218 <strncmp>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	d166      	bne.n	8014bfa <__gethex+0x124>
 8014b2c:	9b01      	ldr	r3, [sp, #4]
 8014b2e:	5cf8      	ldrb	r0, [r7, r3]
 8014b30:	18fe      	adds	r6, r7, r3
 8014b32:	f7ff ffbb 	bl	8014aac <__hexdig_fun>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d062      	beq.n	8014c00 <__gethex+0x12a>
 8014b3a:	4633      	mov	r3, r6
 8014b3c:	7818      	ldrb	r0, [r3, #0]
 8014b3e:	2830      	cmp	r0, #48	; 0x30
 8014b40:	461f      	mov	r7, r3
 8014b42:	f103 0301 	add.w	r3, r3, #1
 8014b46:	d0f9      	beq.n	8014b3c <__gethex+0x66>
 8014b48:	f7ff ffb0 	bl	8014aac <__hexdig_fun>
 8014b4c:	fab0 f580 	clz	r5, r0
 8014b50:	096d      	lsrs	r5, r5, #5
 8014b52:	4634      	mov	r4, r6
 8014b54:	f04f 0b01 	mov.w	fp, #1
 8014b58:	463a      	mov	r2, r7
 8014b5a:	4616      	mov	r6, r2
 8014b5c:	3201      	adds	r2, #1
 8014b5e:	7830      	ldrb	r0, [r6, #0]
 8014b60:	f7ff ffa4 	bl	8014aac <__hexdig_fun>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	d1f8      	bne.n	8014b5a <__gethex+0x84>
 8014b68:	9a01      	ldr	r2, [sp, #4]
 8014b6a:	9903      	ldr	r1, [sp, #12]
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f001 fb53 	bl	8016218 <strncmp>
 8014b72:	b950      	cbnz	r0, 8014b8a <__gethex+0xb4>
 8014b74:	b954      	cbnz	r4, 8014b8c <__gethex+0xb6>
 8014b76:	9b01      	ldr	r3, [sp, #4]
 8014b78:	18f4      	adds	r4, r6, r3
 8014b7a:	4622      	mov	r2, r4
 8014b7c:	4616      	mov	r6, r2
 8014b7e:	3201      	adds	r2, #1
 8014b80:	7830      	ldrb	r0, [r6, #0]
 8014b82:	f7ff ff93 	bl	8014aac <__hexdig_fun>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	d1f8      	bne.n	8014b7c <__gethex+0xa6>
 8014b8a:	b10c      	cbz	r4, 8014b90 <__gethex+0xba>
 8014b8c:	1ba4      	subs	r4, r4, r6
 8014b8e:	00a4      	lsls	r4, r4, #2
 8014b90:	7833      	ldrb	r3, [r6, #0]
 8014b92:	2b50      	cmp	r3, #80	; 0x50
 8014b94:	d001      	beq.n	8014b9a <__gethex+0xc4>
 8014b96:	2b70      	cmp	r3, #112	; 0x70
 8014b98:	d140      	bne.n	8014c1c <__gethex+0x146>
 8014b9a:	7873      	ldrb	r3, [r6, #1]
 8014b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8014b9e:	d031      	beq.n	8014c04 <__gethex+0x12e>
 8014ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8014ba2:	d033      	beq.n	8014c0c <__gethex+0x136>
 8014ba4:	1c71      	adds	r1, r6, #1
 8014ba6:	f04f 0900 	mov.w	r9, #0
 8014baa:	7808      	ldrb	r0, [r1, #0]
 8014bac:	f7ff ff7e 	bl	8014aac <__hexdig_fun>
 8014bb0:	1e43      	subs	r3, r0, #1
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	2b18      	cmp	r3, #24
 8014bb6:	d831      	bhi.n	8014c1c <__gethex+0x146>
 8014bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8014bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014bc0:	f7ff ff74 	bl	8014aac <__hexdig_fun>
 8014bc4:	1e43      	subs	r3, r0, #1
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b18      	cmp	r3, #24
 8014bca:	d922      	bls.n	8014c12 <__gethex+0x13c>
 8014bcc:	f1b9 0f00 	cmp.w	r9, #0
 8014bd0:	d000      	beq.n	8014bd4 <__gethex+0xfe>
 8014bd2:	4252      	negs	r2, r2
 8014bd4:	4414      	add	r4, r2
 8014bd6:	f8ca 1000 	str.w	r1, [sl]
 8014bda:	b30d      	cbz	r5, 8014c20 <__gethex+0x14a>
 8014bdc:	f1bb 0f00 	cmp.w	fp, #0
 8014be0:	bf0c      	ite	eq
 8014be2:	2706      	moveq	r7, #6
 8014be4:	2700      	movne	r7, #0
 8014be6:	4638      	mov	r0, r7
 8014be8:	b00b      	add	sp, #44	; 0x2c
 8014bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bee:	f10b 0b01 	add.w	fp, fp, #1
 8014bf2:	e78a      	b.n	8014b0a <__gethex+0x34>
 8014bf4:	2500      	movs	r5, #0
 8014bf6:	462c      	mov	r4, r5
 8014bf8:	e7ae      	b.n	8014b58 <__gethex+0x82>
 8014bfa:	463e      	mov	r6, r7
 8014bfc:	2501      	movs	r5, #1
 8014bfe:	e7c7      	b.n	8014b90 <__gethex+0xba>
 8014c00:	4604      	mov	r4, r0
 8014c02:	e7fb      	b.n	8014bfc <__gethex+0x126>
 8014c04:	f04f 0900 	mov.w	r9, #0
 8014c08:	1cb1      	adds	r1, r6, #2
 8014c0a:	e7ce      	b.n	8014baa <__gethex+0xd4>
 8014c0c:	f04f 0901 	mov.w	r9, #1
 8014c10:	e7fa      	b.n	8014c08 <__gethex+0x132>
 8014c12:	230a      	movs	r3, #10
 8014c14:	fb03 0202 	mla	r2, r3, r2, r0
 8014c18:	3a10      	subs	r2, #16
 8014c1a:	e7cf      	b.n	8014bbc <__gethex+0xe6>
 8014c1c:	4631      	mov	r1, r6
 8014c1e:	e7da      	b.n	8014bd6 <__gethex+0x100>
 8014c20:	1bf3      	subs	r3, r6, r7
 8014c22:	3b01      	subs	r3, #1
 8014c24:	4629      	mov	r1, r5
 8014c26:	2b07      	cmp	r3, #7
 8014c28:	dc49      	bgt.n	8014cbe <__gethex+0x1e8>
 8014c2a:	9802      	ldr	r0, [sp, #8]
 8014c2c:	f000 fa60 	bl	80150f0 <_Balloc>
 8014c30:	9b01      	ldr	r3, [sp, #4]
 8014c32:	f100 0914 	add.w	r9, r0, #20
 8014c36:	f04f 0b00 	mov.w	fp, #0
 8014c3a:	f1c3 0301 	rsb	r3, r3, #1
 8014c3e:	4605      	mov	r5, r0
 8014c40:	f8cd 9010 	str.w	r9, [sp, #16]
 8014c44:	46da      	mov	sl, fp
 8014c46:	9308      	str	r3, [sp, #32]
 8014c48:	42b7      	cmp	r7, r6
 8014c4a:	d33b      	bcc.n	8014cc4 <__gethex+0x1ee>
 8014c4c:	9804      	ldr	r0, [sp, #16]
 8014c4e:	f840 ab04 	str.w	sl, [r0], #4
 8014c52:	eba0 0009 	sub.w	r0, r0, r9
 8014c56:	1080      	asrs	r0, r0, #2
 8014c58:	6128      	str	r0, [r5, #16]
 8014c5a:	0147      	lsls	r7, r0, #5
 8014c5c:	4650      	mov	r0, sl
 8014c5e:	f000 fb0b 	bl	8015278 <__hi0bits>
 8014c62:	f8d8 6000 	ldr.w	r6, [r8]
 8014c66:	1a3f      	subs	r7, r7, r0
 8014c68:	42b7      	cmp	r7, r6
 8014c6a:	dd64      	ble.n	8014d36 <__gethex+0x260>
 8014c6c:	1bbf      	subs	r7, r7, r6
 8014c6e:	4639      	mov	r1, r7
 8014c70:	4628      	mov	r0, r5
 8014c72:	f000 fe1b 	bl	80158ac <__any_on>
 8014c76:	4682      	mov	sl, r0
 8014c78:	b178      	cbz	r0, 8014c9a <__gethex+0x1c4>
 8014c7a:	1e7b      	subs	r3, r7, #1
 8014c7c:	1159      	asrs	r1, r3, #5
 8014c7e:	f003 021f 	and.w	r2, r3, #31
 8014c82:	f04f 0a01 	mov.w	sl, #1
 8014c86:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014c8a:	fa0a f202 	lsl.w	r2, sl, r2
 8014c8e:	420a      	tst	r2, r1
 8014c90:	d003      	beq.n	8014c9a <__gethex+0x1c4>
 8014c92:	4553      	cmp	r3, sl
 8014c94:	dc46      	bgt.n	8014d24 <__gethex+0x24e>
 8014c96:	f04f 0a02 	mov.w	sl, #2
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	f7ff fecb 	bl	8014a38 <rshift>
 8014ca2:	443c      	add	r4, r7
 8014ca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ca8:	42a3      	cmp	r3, r4
 8014caa:	da52      	bge.n	8014d52 <__gethex+0x27c>
 8014cac:	4629      	mov	r1, r5
 8014cae:	9802      	ldr	r0, [sp, #8]
 8014cb0:	f000 fa52 	bl	8015158 <_Bfree>
 8014cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	6013      	str	r3, [r2, #0]
 8014cba:	27a3      	movs	r7, #163	; 0xa3
 8014cbc:	e793      	b.n	8014be6 <__gethex+0x110>
 8014cbe:	3101      	adds	r1, #1
 8014cc0:	105b      	asrs	r3, r3, #1
 8014cc2:	e7b0      	b.n	8014c26 <__gethex+0x150>
 8014cc4:	1e73      	subs	r3, r6, #1
 8014cc6:	9305      	str	r3, [sp, #20]
 8014cc8:	9a07      	ldr	r2, [sp, #28]
 8014cca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d018      	beq.n	8014d04 <__gethex+0x22e>
 8014cd2:	f1bb 0f20 	cmp.w	fp, #32
 8014cd6:	d107      	bne.n	8014ce8 <__gethex+0x212>
 8014cd8:	9b04      	ldr	r3, [sp, #16]
 8014cda:	f8c3 a000 	str.w	sl, [r3]
 8014cde:	3304      	adds	r3, #4
 8014ce0:	f04f 0a00 	mov.w	sl, #0
 8014ce4:	9304      	str	r3, [sp, #16]
 8014ce6:	46d3      	mov	fp, sl
 8014ce8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014cec:	f7ff fede 	bl	8014aac <__hexdig_fun>
 8014cf0:	f000 000f 	and.w	r0, r0, #15
 8014cf4:	fa00 f00b 	lsl.w	r0, r0, fp
 8014cf8:	ea4a 0a00 	orr.w	sl, sl, r0
 8014cfc:	f10b 0b04 	add.w	fp, fp, #4
 8014d00:	9b05      	ldr	r3, [sp, #20]
 8014d02:	e00d      	b.n	8014d20 <__gethex+0x24a>
 8014d04:	9b05      	ldr	r3, [sp, #20]
 8014d06:	9a08      	ldr	r2, [sp, #32]
 8014d08:	4413      	add	r3, r2
 8014d0a:	42bb      	cmp	r3, r7
 8014d0c:	d3e1      	bcc.n	8014cd2 <__gethex+0x1fc>
 8014d0e:	4618      	mov	r0, r3
 8014d10:	9a01      	ldr	r2, [sp, #4]
 8014d12:	9903      	ldr	r1, [sp, #12]
 8014d14:	9309      	str	r3, [sp, #36]	; 0x24
 8014d16:	f001 fa7f 	bl	8016218 <strncmp>
 8014d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d1d8      	bne.n	8014cd2 <__gethex+0x1fc>
 8014d20:	461e      	mov	r6, r3
 8014d22:	e791      	b.n	8014c48 <__gethex+0x172>
 8014d24:	1eb9      	subs	r1, r7, #2
 8014d26:	4628      	mov	r0, r5
 8014d28:	f000 fdc0 	bl	80158ac <__any_on>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d0b2      	beq.n	8014c96 <__gethex+0x1c0>
 8014d30:	f04f 0a03 	mov.w	sl, #3
 8014d34:	e7b1      	b.n	8014c9a <__gethex+0x1c4>
 8014d36:	da09      	bge.n	8014d4c <__gethex+0x276>
 8014d38:	1bf7      	subs	r7, r6, r7
 8014d3a:	4629      	mov	r1, r5
 8014d3c:	463a      	mov	r2, r7
 8014d3e:	9802      	ldr	r0, [sp, #8]
 8014d40:	f000 fbd6 	bl	80154f0 <__lshift>
 8014d44:	1be4      	subs	r4, r4, r7
 8014d46:	4605      	mov	r5, r0
 8014d48:	f100 0914 	add.w	r9, r0, #20
 8014d4c:	f04f 0a00 	mov.w	sl, #0
 8014d50:	e7a8      	b.n	8014ca4 <__gethex+0x1ce>
 8014d52:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014d56:	42a0      	cmp	r0, r4
 8014d58:	dd6a      	ble.n	8014e30 <__gethex+0x35a>
 8014d5a:	1b04      	subs	r4, r0, r4
 8014d5c:	42a6      	cmp	r6, r4
 8014d5e:	dc2e      	bgt.n	8014dbe <__gethex+0x2e8>
 8014d60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d022      	beq.n	8014dae <__gethex+0x2d8>
 8014d68:	2b03      	cmp	r3, #3
 8014d6a:	d024      	beq.n	8014db6 <__gethex+0x2e0>
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d115      	bne.n	8014d9c <__gethex+0x2c6>
 8014d70:	42a6      	cmp	r6, r4
 8014d72:	d113      	bne.n	8014d9c <__gethex+0x2c6>
 8014d74:	2e01      	cmp	r6, #1
 8014d76:	dc0b      	bgt.n	8014d90 <__gethex+0x2ba>
 8014d78:	9a06      	ldr	r2, [sp, #24]
 8014d7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	2301      	movs	r3, #1
 8014d82:	612b      	str	r3, [r5, #16]
 8014d84:	f8c9 3000 	str.w	r3, [r9]
 8014d88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d8a:	2762      	movs	r7, #98	; 0x62
 8014d8c:	601d      	str	r5, [r3, #0]
 8014d8e:	e72a      	b.n	8014be6 <__gethex+0x110>
 8014d90:	1e71      	subs	r1, r6, #1
 8014d92:	4628      	mov	r0, r5
 8014d94:	f000 fd8a 	bl	80158ac <__any_on>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d1ed      	bne.n	8014d78 <__gethex+0x2a2>
 8014d9c:	4629      	mov	r1, r5
 8014d9e:	9802      	ldr	r0, [sp, #8]
 8014da0:	f000 f9da 	bl	8015158 <_Bfree>
 8014da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014da6:	2300      	movs	r3, #0
 8014da8:	6013      	str	r3, [r2, #0]
 8014daa:	2750      	movs	r7, #80	; 0x50
 8014dac:	e71b      	b.n	8014be6 <__gethex+0x110>
 8014dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d0e1      	beq.n	8014d78 <__gethex+0x2a2>
 8014db4:	e7f2      	b.n	8014d9c <__gethex+0x2c6>
 8014db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d1dd      	bne.n	8014d78 <__gethex+0x2a2>
 8014dbc:	e7ee      	b.n	8014d9c <__gethex+0x2c6>
 8014dbe:	1e67      	subs	r7, r4, #1
 8014dc0:	f1ba 0f00 	cmp.w	sl, #0
 8014dc4:	d131      	bne.n	8014e2a <__gethex+0x354>
 8014dc6:	b127      	cbz	r7, 8014dd2 <__gethex+0x2fc>
 8014dc8:	4639      	mov	r1, r7
 8014dca:	4628      	mov	r0, r5
 8014dcc:	f000 fd6e 	bl	80158ac <__any_on>
 8014dd0:	4682      	mov	sl, r0
 8014dd2:	117a      	asrs	r2, r7, #5
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	f007 071f 	and.w	r7, r7, #31
 8014dda:	fa03 f707 	lsl.w	r7, r3, r7
 8014dde:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014de2:	4621      	mov	r1, r4
 8014de4:	421f      	tst	r7, r3
 8014de6:	4628      	mov	r0, r5
 8014de8:	bf18      	it	ne
 8014dea:	f04a 0a02 	orrne.w	sl, sl, #2
 8014dee:	1b36      	subs	r6, r6, r4
 8014df0:	f7ff fe22 	bl	8014a38 <rshift>
 8014df4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014df8:	2702      	movs	r7, #2
 8014dfa:	f1ba 0f00 	cmp.w	sl, #0
 8014dfe:	d048      	beq.n	8014e92 <__gethex+0x3bc>
 8014e00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014e04:	2b02      	cmp	r3, #2
 8014e06:	d015      	beq.n	8014e34 <__gethex+0x35e>
 8014e08:	2b03      	cmp	r3, #3
 8014e0a:	d017      	beq.n	8014e3c <__gethex+0x366>
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d109      	bne.n	8014e24 <__gethex+0x34e>
 8014e10:	f01a 0f02 	tst.w	sl, #2
 8014e14:	d006      	beq.n	8014e24 <__gethex+0x34e>
 8014e16:	f8d9 3000 	ldr.w	r3, [r9]
 8014e1a:	ea4a 0a03 	orr.w	sl, sl, r3
 8014e1e:	f01a 0f01 	tst.w	sl, #1
 8014e22:	d10e      	bne.n	8014e42 <__gethex+0x36c>
 8014e24:	f047 0710 	orr.w	r7, r7, #16
 8014e28:	e033      	b.n	8014e92 <__gethex+0x3bc>
 8014e2a:	f04f 0a01 	mov.w	sl, #1
 8014e2e:	e7d0      	b.n	8014dd2 <__gethex+0x2fc>
 8014e30:	2701      	movs	r7, #1
 8014e32:	e7e2      	b.n	8014dfa <__gethex+0x324>
 8014e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e36:	f1c3 0301 	rsb	r3, r3, #1
 8014e3a:	9315      	str	r3, [sp, #84]	; 0x54
 8014e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d0f0      	beq.n	8014e24 <__gethex+0x34e>
 8014e42:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014e46:	f105 0314 	add.w	r3, r5, #20
 8014e4a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8014e4e:	eb03 010a 	add.w	r1, r3, sl
 8014e52:	f04f 0c00 	mov.w	ip, #0
 8014e56:	4618      	mov	r0, r3
 8014e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014e60:	d01c      	beq.n	8014e9c <__gethex+0x3c6>
 8014e62:	3201      	adds	r2, #1
 8014e64:	6002      	str	r2, [r0, #0]
 8014e66:	2f02      	cmp	r7, #2
 8014e68:	f105 0314 	add.w	r3, r5, #20
 8014e6c:	d138      	bne.n	8014ee0 <__gethex+0x40a>
 8014e6e:	f8d8 2000 	ldr.w	r2, [r8]
 8014e72:	3a01      	subs	r2, #1
 8014e74:	42b2      	cmp	r2, r6
 8014e76:	d10a      	bne.n	8014e8e <__gethex+0x3b8>
 8014e78:	1171      	asrs	r1, r6, #5
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f006 061f 	and.w	r6, r6, #31
 8014e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e84:	fa02 f606 	lsl.w	r6, r2, r6
 8014e88:	421e      	tst	r6, r3
 8014e8a:	bf18      	it	ne
 8014e8c:	4617      	movne	r7, r2
 8014e8e:	f047 0720 	orr.w	r7, r7, #32
 8014e92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e94:	601d      	str	r5, [r3, #0]
 8014e96:	9b06      	ldr	r3, [sp, #24]
 8014e98:	601c      	str	r4, [r3, #0]
 8014e9a:	e6a4      	b.n	8014be6 <__gethex+0x110>
 8014e9c:	4299      	cmp	r1, r3
 8014e9e:	f843 cc04 	str.w	ip, [r3, #-4]
 8014ea2:	d8d8      	bhi.n	8014e56 <__gethex+0x380>
 8014ea4:	68ab      	ldr	r3, [r5, #8]
 8014ea6:	4599      	cmp	r9, r3
 8014ea8:	db12      	blt.n	8014ed0 <__gethex+0x3fa>
 8014eaa:	6869      	ldr	r1, [r5, #4]
 8014eac:	9802      	ldr	r0, [sp, #8]
 8014eae:	3101      	adds	r1, #1
 8014eb0:	f000 f91e 	bl	80150f0 <_Balloc>
 8014eb4:	692a      	ldr	r2, [r5, #16]
 8014eb6:	3202      	adds	r2, #2
 8014eb8:	f105 010c 	add.w	r1, r5, #12
 8014ebc:	4683      	mov	fp, r0
 8014ebe:	0092      	lsls	r2, r2, #2
 8014ec0:	300c      	adds	r0, #12
 8014ec2:	f7fd f90d 	bl	80120e0 <memcpy>
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	9802      	ldr	r0, [sp, #8]
 8014eca:	f000 f945 	bl	8015158 <_Bfree>
 8014ece:	465d      	mov	r5, fp
 8014ed0:	692b      	ldr	r3, [r5, #16]
 8014ed2:	1c5a      	adds	r2, r3, #1
 8014ed4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014ed8:	612a      	str	r2, [r5, #16]
 8014eda:	2201      	movs	r2, #1
 8014edc:	615a      	str	r2, [r3, #20]
 8014ede:	e7c2      	b.n	8014e66 <__gethex+0x390>
 8014ee0:	692a      	ldr	r2, [r5, #16]
 8014ee2:	454a      	cmp	r2, r9
 8014ee4:	dd0b      	ble.n	8014efe <__gethex+0x428>
 8014ee6:	2101      	movs	r1, #1
 8014ee8:	4628      	mov	r0, r5
 8014eea:	f7ff fda5 	bl	8014a38 <rshift>
 8014eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ef2:	3401      	adds	r4, #1
 8014ef4:	42a3      	cmp	r3, r4
 8014ef6:	f6ff aed9 	blt.w	8014cac <__gethex+0x1d6>
 8014efa:	2701      	movs	r7, #1
 8014efc:	e7c7      	b.n	8014e8e <__gethex+0x3b8>
 8014efe:	f016 061f 	ands.w	r6, r6, #31
 8014f02:	d0fa      	beq.n	8014efa <__gethex+0x424>
 8014f04:	449a      	add	sl, r3
 8014f06:	f1c6 0620 	rsb	r6, r6, #32
 8014f0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014f0e:	f000 f9b3 	bl	8015278 <__hi0bits>
 8014f12:	42b0      	cmp	r0, r6
 8014f14:	dbe7      	blt.n	8014ee6 <__gethex+0x410>
 8014f16:	e7f0      	b.n	8014efa <__gethex+0x424>

08014f18 <L_shift>:
 8014f18:	f1c2 0208 	rsb	r2, r2, #8
 8014f1c:	0092      	lsls	r2, r2, #2
 8014f1e:	b570      	push	{r4, r5, r6, lr}
 8014f20:	f1c2 0620 	rsb	r6, r2, #32
 8014f24:	6843      	ldr	r3, [r0, #4]
 8014f26:	6804      	ldr	r4, [r0, #0]
 8014f28:	fa03 f506 	lsl.w	r5, r3, r6
 8014f2c:	432c      	orrs	r4, r5
 8014f2e:	40d3      	lsrs	r3, r2
 8014f30:	6004      	str	r4, [r0, #0]
 8014f32:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f36:	4288      	cmp	r0, r1
 8014f38:	d3f4      	bcc.n	8014f24 <L_shift+0xc>
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}

08014f3c <__match>:
 8014f3c:	b530      	push	{r4, r5, lr}
 8014f3e:	6803      	ldr	r3, [r0, #0]
 8014f40:	3301      	adds	r3, #1
 8014f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f46:	b914      	cbnz	r4, 8014f4e <__match+0x12>
 8014f48:	6003      	str	r3, [r0, #0]
 8014f4a:	2001      	movs	r0, #1
 8014f4c:	bd30      	pop	{r4, r5, pc}
 8014f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014f56:	2d19      	cmp	r5, #25
 8014f58:	bf98      	it	ls
 8014f5a:	3220      	addls	r2, #32
 8014f5c:	42a2      	cmp	r2, r4
 8014f5e:	d0f0      	beq.n	8014f42 <__match+0x6>
 8014f60:	2000      	movs	r0, #0
 8014f62:	e7f3      	b.n	8014f4c <__match+0x10>

08014f64 <__hexnan>:
 8014f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f68:	680b      	ldr	r3, [r1, #0]
 8014f6a:	6801      	ldr	r1, [r0, #0]
 8014f6c:	115f      	asrs	r7, r3, #5
 8014f6e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014f72:	f013 031f 	ands.w	r3, r3, #31
 8014f76:	b087      	sub	sp, #28
 8014f78:	bf18      	it	ne
 8014f7a:	3704      	addne	r7, #4
 8014f7c:	2500      	movs	r5, #0
 8014f7e:	1f3e      	subs	r6, r7, #4
 8014f80:	4682      	mov	sl, r0
 8014f82:	4690      	mov	r8, r2
 8014f84:	9301      	str	r3, [sp, #4]
 8014f86:	f847 5c04 	str.w	r5, [r7, #-4]
 8014f8a:	46b1      	mov	r9, r6
 8014f8c:	4634      	mov	r4, r6
 8014f8e:	9502      	str	r5, [sp, #8]
 8014f90:	46ab      	mov	fp, r5
 8014f92:	784a      	ldrb	r2, [r1, #1]
 8014f94:	1c4b      	adds	r3, r1, #1
 8014f96:	9303      	str	r3, [sp, #12]
 8014f98:	b342      	cbz	r2, 8014fec <__hexnan+0x88>
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	9105      	str	r1, [sp, #20]
 8014f9e:	9204      	str	r2, [sp, #16]
 8014fa0:	f7ff fd84 	bl	8014aac <__hexdig_fun>
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	d143      	bne.n	8015030 <__hexnan+0xcc>
 8014fa8:	9a04      	ldr	r2, [sp, #16]
 8014faa:	9905      	ldr	r1, [sp, #20]
 8014fac:	2a20      	cmp	r2, #32
 8014fae:	d818      	bhi.n	8014fe2 <__hexnan+0x7e>
 8014fb0:	9b02      	ldr	r3, [sp, #8]
 8014fb2:	459b      	cmp	fp, r3
 8014fb4:	dd13      	ble.n	8014fde <__hexnan+0x7a>
 8014fb6:	454c      	cmp	r4, r9
 8014fb8:	d206      	bcs.n	8014fc8 <__hexnan+0x64>
 8014fba:	2d07      	cmp	r5, #7
 8014fbc:	dc04      	bgt.n	8014fc8 <__hexnan+0x64>
 8014fbe:	462a      	mov	r2, r5
 8014fc0:	4649      	mov	r1, r9
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7ff ffa8 	bl	8014f18 <L_shift>
 8014fc8:	4544      	cmp	r4, r8
 8014fca:	d944      	bls.n	8015056 <__hexnan+0xf2>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	f1a4 0904 	sub.w	r9, r4, #4
 8014fd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fd6:	f8cd b008 	str.w	fp, [sp, #8]
 8014fda:	464c      	mov	r4, r9
 8014fdc:	461d      	mov	r5, r3
 8014fde:	9903      	ldr	r1, [sp, #12]
 8014fe0:	e7d7      	b.n	8014f92 <__hexnan+0x2e>
 8014fe2:	2a29      	cmp	r2, #41	; 0x29
 8014fe4:	d14a      	bne.n	801507c <__hexnan+0x118>
 8014fe6:	3102      	adds	r1, #2
 8014fe8:	f8ca 1000 	str.w	r1, [sl]
 8014fec:	f1bb 0f00 	cmp.w	fp, #0
 8014ff0:	d044      	beq.n	801507c <__hexnan+0x118>
 8014ff2:	454c      	cmp	r4, r9
 8014ff4:	d206      	bcs.n	8015004 <__hexnan+0xa0>
 8014ff6:	2d07      	cmp	r5, #7
 8014ff8:	dc04      	bgt.n	8015004 <__hexnan+0xa0>
 8014ffa:	462a      	mov	r2, r5
 8014ffc:	4649      	mov	r1, r9
 8014ffe:	4620      	mov	r0, r4
 8015000:	f7ff ff8a 	bl	8014f18 <L_shift>
 8015004:	4544      	cmp	r4, r8
 8015006:	d928      	bls.n	801505a <__hexnan+0xf6>
 8015008:	4643      	mov	r3, r8
 801500a:	f854 2b04 	ldr.w	r2, [r4], #4
 801500e:	f843 2b04 	str.w	r2, [r3], #4
 8015012:	42a6      	cmp	r6, r4
 8015014:	d2f9      	bcs.n	801500a <__hexnan+0xa6>
 8015016:	2200      	movs	r2, #0
 8015018:	f843 2b04 	str.w	r2, [r3], #4
 801501c:	429e      	cmp	r6, r3
 801501e:	d2fb      	bcs.n	8015018 <__hexnan+0xb4>
 8015020:	6833      	ldr	r3, [r6, #0]
 8015022:	b91b      	cbnz	r3, 801502c <__hexnan+0xc8>
 8015024:	4546      	cmp	r6, r8
 8015026:	d127      	bne.n	8015078 <__hexnan+0x114>
 8015028:	2301      	movs	r3, #1
 801502a:	6033      	str	r3, [r6, #0]
 801502c:	2005      	movs	r0, #5
 801502e:	e026      	b.n	801507e <__hexnan+0x11a>
 8015030:	3501      	adds	r5, #1
 8015032:	2d08      	cmp	r5, #8
 8015034:	f10b 0b01 	add.w	fp, fp, #1
 8015038:	dd06      	ble.n	8015048 <__hexnan+0xe4>
 801503a:	4544      	cmp	r4, r8
 801503c:	d9cf      	bls.n	8014fde <__hexnan+0x7a>
 801503e:	2300      	movs	r3, #0
 8015040:	f844 3c04 	str.w	r3, [r4, #-4]
 8015044:	2501      	movs	r5, #1
 8015046:	3c04      	subs	r4, #4
 8015048:	6822      	ldr	r2, [r4, #0]
 801504a:	f000 000f 	and.w	r0, r0, #15
 801504e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015052:	6020      	str	r0, [r4, #0]
 8015054:	e7c3      	b.n	8014fde <__hexnan+0x7a>
 8015056:	2508      	movs	r5, #8
 8015058:	e7c1      	b.n	8014fde <__hexnan+0x7a>
 801505a:	9b01      	ldr	r3, [sp, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d0df      	beq.n	8015020 <__hexnan+0xbc>
 8015060:	f04f 32ff 	mov.w	r2, #4294967295
 8015064:	f1c3 0320 	rsb	r3, r3, #32
 8015068:	fa22 f303 	lsr.w	r3, r2, r3
 801506c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015070:	401a      	ands	r2, r3
 8015072:	f847 2c04 	str.w	r2, [r7, #-4]
 8015076:	e7d3      	b.n	8015020 <__hexnan+0xbc>
 8015078:	3e04      	subs	r6, #4
 801507a:	e7d1      	b.n	8015020 <__hexnan+0xbc>
 801507c:	2004      	movs	r0, #4
 801507e:	b007      	add	sp, #28
 8015080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015084 <__locale_ctype_ptr_l>:
 8015084:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015088:	4770      	bx	lr
	...

0801508c <__locale_ctype_ptr>:
 801508c:	4b04      	ldr	r3, [pc, #16]	; (80150a0 <__locale_ctype_ptr+0x14>)
 801508e:	4a05      	ldr	r2, [pc, #20]	; (80150a4 <__locale_ctype_ptr+0x18>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	6a1b      	ldr	r3, [r3, #32]
 8015094:	2b00      	cmp	r3, #0
 8015096:	bf08      	it	eq
 8015098:	4613      	moveq	r3, r2
 801509a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801509e:	4770      	bx	lr
 80150a0:	20000e34 	.word	0x20000e34
 80150a4:	20000e98 	.word	0x20000e98

080150a8 <__localeconv_l>:
 80150a8:	30f0      	adds	r0, #240	; 0xf0
 80150aa:	4770      	bx	lr

080150ac <_localeconv_r>:
 80150ac:	4b04      	ldr	r3, [pc, #16]	; (80150c0 <_localeconv_r+0x14>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	6a18      	ldr	r0, [r3, #32]
 80150b2:	4b04      	ldr	r3, [pc, #16]	; (80150c4 <_localeconv_r+0x18>)
 80150b4:	2800      	cmp	r0, #0
 80150b6:	bf08      	it	eq
 80150b8:	4618      	moveq	r0, r3
 80150ba:	30f0      	adds	r0, #240	; 0xf0
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	20000e34 	.word	0x20000e34
 80150c4:	20000e98 	.word	0x20000e98

080150c8 <__ascii_mbtowc>:
 80150c8:	b082      	sub	sp, #8
 80150ca:	b901      	cbnz	r1, 80150ce <__ascii_mbtowc+0x6>
 80150cc:	a901      	add	r1, sp, #4
 80150ce:	b142      	cbz	r2, 80150e2 <__ascii_mbtowc+0x1a>
 80150d0:	b14b      	cbz	r3, 80150e6 <__ascii_mbtowc+0x1e>
 80150d2:	7813      	ldrb	r3, [r2, #0]
 80150d4:	600b      	str	r3, [r1, #0]
 80150d6:	7812      	ldrb	r2, [r2, #0]
 80150d8:	1c10      	adds	r0, r2, #0
 80150da:	bf18      	it	ne
 80150dc:	2001      	movne	r0, #1
 80150de:	b002      	add	sp, #8
 80150e0:	4770      	bx	lr
 80150e2:	4610      	mov	r0, r2
 80150e4:	e7fb      	b.n	80150de <__ascii_mbtowc+0x16>
 80150e6:	f06f 0001 	mvn.w	r0, #1
 80150ea:	e7f8      	b.n	80150de <__ascii_mbtowc+0x16>

080150ec <__malloc_lock>:
 80150ec:	4770      	bx	lr

080150ee <__malloc_unlock>:
 80150ee:	4770      	bx	lr

080150f0 <_Balloc>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80150f4:	4604      	mov	r4, r0
 80150f6:	460e      	mov	r6, r1
 80150f8:	b93d      	cbnz	r5, 801510a <_Balloc+0x1a>
 80150fa:	2010      	movs	r0, #16
 80150fc:	f7fc ffe0 	bl	80120c0 <malloc>
 8015100:	6260      	str	r0, [r4, #36]	; 0x24
 8015102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015106:	6005      	str	r5, [r0, #0]
 8015108:	60c5      	str	r5, [r0, #12]
 801510a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801510c:	68eb      	ldr	r3, [r5, #12]
 801510e:	b183      	cbz	r3, 8015132 <_Balloc+0x42>
 8015110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015118:	b9b8      	cbnz	r0, 801514a <_Balloc+0x5a>
 801511a:	2101      	movs	r1, #1
 801511c:	fa01 f506 	lsl.w	r5, r1, r6
 8015120:	1d6a      	adds	r2, r5, #5
 8015122:	0092      	lsls	r2, r2, #2
 8015124:	4620      	mov	r0, r4
 8015126:	f000 fbe2 	bl	80158ee <_calloc_r>
 801512a:	b160      	cbz	r0, 8015146 <_Balloc+0x56>
 801512c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015130:	e00e      	b.n	8015150 <_Balloc+0x60>
 8015132:	2221      	movs	r2, #33	; 0x21
 8015134:	2104      	movs	r1, #4
 8015136:	4620      	mov	r0, r4
 8015138:	f000 fbd9 	bl	80158ee <_calloc_r>
 801513c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801513e:	60e8      	str	r0, [r5, #12]
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d1e4      	bne.n	8015110 <_Balloc+0x20>
 8015146:	2000      	movs	r0, #0
 8015148:	bd70      	pop	{r4, r5, r6, pc}
 801514a:	6802      	ldr	r2, [r0, #0]
 801514c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015150:	2300      	movs	r3, #0
 8015152:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015156:	e7f7      	b.n	8015148 <_Balloc+0x58>

08015158 <_Bfree>:
 8015158:	b570      	push	{r4, r5, r6, lr}
 801515a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801515c:	4606      	mov	r6, r0
 801515e:	460d      	mov	r5, r1
 8015160:	b93c      	cbnz	r4, 8015172 <_Bfree+0x1a>
 8015162:	2010      	movs	r0, #16
 8015164:	f7fc ffac 	bl	80120c0 <malloc>
 8015168:	6270      	str	r0, [r6, #36]	; 0x24
 801516a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801516e:	6004      	str	r4, [r0, #0]
 8015170:	60c4      	str	r4, [r0, #12]
 8015172:	b13d      	cbz	r5, 8015184 <_Bfree+0x2c>
 8015174:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015176:	686a      	ldr	r2, [r5, #4]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801517e:	6029      	str	r1, [r5, #0]
 8015180:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015184:	bd70      	pop	{r4, r5, r6, pc}

08015186 <__multadd>:
 8015186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518a:	690d      	ldr	r5, [r1, #16]
 801518c:	461f      	mov	r7, r3
 801518e:	4606      	mov	r6, r0
 8015190:	460c      	mov	r4, r1
 8015192:	f101 0c14 	add.w	ip, r1, #20
 8015196:	2300      	movs	r3, #0
 8015198:	f8dc 0000 	ldr.w	r0, [ip]
 801519c:	b281      	uxth	r1, r0
 801519e:	fb02 7101 	mla	r1, r2, r1, r7
 80151a2:	0c0f      	lsrs	r7, r1, #16
 80151a4:	0c00      	lsrs	r0, r0, #16
 80151a6:	fb02 7000 	mla	r0, r2, r0, r7
 80151aa:	b289      	uxth	r1, r1
 80151ac:	3301      	adds	r3, #1
 80151ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80151b2:	429d      	cmp	r5, r3
 80151b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80151b8:	f84c 1b04 	str.w	r1, [ip], #4
 80151bc:	dcec      	bgt.n	8015198 <__multadd+0x12>
 80151be:	b1d7      	cbz	r7, 80151f6 <__multadd+0x70>
 80151c0:	68a3      	ldr	r3, [r4, #8]
 80151c2:	42ab      	cmp	r3, r5
 80151c4:	dc12      	bgt.n	80151ec <__multadd+0x66>
 80151c6:	6861      	ldr	r1, [r4, #4]
 80151c8:	4630      	mov	r0, r6
 80151ca:	3101      	adds	r1, #1
 80151cc:	f7ff ff90 	bl	80150f0 <_Balloc>
 80151d0:	6922      	ldr	r2, [r4, #16]
 80151d2:	3202      	adds	r2, #2
 80151d4:	f104 010c 	add.w	r1, r4, #12
 80151d8:	4680      	mov	r8, r0
 80151da:	0092      	lsls	r2, r2, #2
 80151dc:	300c      	adds	r0, #12
 80151de:	f7fc ff7f 	bl	80120e0 <memcpy>
 80151e2:	4621      	mov	r1, r4
 80151e4:	4630      	mov	r0, r6
 80151e6:	f7ff ffb7 	bl	8015158 <_Bfree>
 80151ea:	4644      	mov	r4, r8
 80151ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151f0:	3501      	adds	r5, #1
 80151f2:	615f      	str	r7, [r3, #20]
 80151f4:	6125      	str	r5, [r4, #16]
 80151f6:	4620      	mov	r0, r4
 80151f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151fc <__s2b>:
 80151fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015200:	460c      	mov	r4, r1
 8015202:	4615      	mov	r5, r2
 8015204:	461f      	mov	r7, r3
 8015206:	2209      	movs	r2, #9
 8015208:	3308      	adds	r3, #8
 801520a:	4606      	mov	r6, r0
 801520c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015210:	2100      	movs	r1, #0
 8015212:	2201      	movs	r2, #1
 8015214:	429a      	cmp	r2, r3
 8015216:	db20      	blt.n	801525a <__s2b+0x5e>
 8015218:	4630      	mov	r0, r6
 801521a:	f7ff ff69 	bl	80150f0 <_Balloc>
 801521e:	9b08      	ldr	r3, [sp, #32]
 8015220:	6143      	str	r3, [r0, #20]
 8015222:	2d09      	cmp	r5, #9
 8015224:	f04f 0301 	mov.w	r3, #1
 8015228:	6103      	str	r3, [r0, #16]
 801522a:	dd19      	ble.n	8015260 <__s2b+0x64>
 801522c:	f104 0809 	add.w	r8, r4, #9
 8015230:	46c1      	mov	r9, r8
 8015232:	442c      	add	r4, r5
 8015234:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015238:	4601      	mov	r1, r0
 801523a:	3b30      	subs	r3, #48	; 0x30
 801523c:	220a      	movs	r2, #10
 801523e:	4630      	mov	r0, r6
 8015240:	f7ff ffa1 	bl	8015186 <__multadd>
 8015244:	45a1      	cmp	r9, r4
 8015246:	d1f5      	bne.n	8015234 <__s2b+0x38>
 8015248:	eb08 0405 	add.w	r4, r8, r5
 801524c:	3c08      	subs	r4, #8
 801524e:	1b2d      	subs	r5, r5, r4
 8015250:	1963      	adds	r3, r4, r5
 8015252:	42bb      	cmp	r3, r7
 8015254:	db07      	blt.n	8015266 <__s2b+0x6a>
 8015256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801525a:	0052      	lsls	r2, r2, #1
 801525c:	3101      	adds	r1, #1
 801525e:	e7d9      	b.n	8015214 <__s2b+0x18>
 8015260:	340a      	adds	r4, #10
 8015262:	2509      	movs	r5, #9
 8015264:	e7f3      	b.n	801524e <__s2b+0x52>
 8015266:	f814 3b01 	ldrb.w	r3, [r4], #1
 801526a:	4601      	mov	r1, r0
 801526c:	3b30      	subs	r3, #48	; 0x30
 801526e:	220a      	movs	r2, #10
 8015270:	4630      	mov	r0, r6
 8015272:	f7ff ff88 	bl	8015186 <__multadd>
 8015276:	e7eb      	b.n	8015250 <__s2b+0x54>

08015278 <__hi0bits>:
 8015278:	0c02      	lsrs	r2, r0, #16
 801527a:	0412      	lsls	r2, r2, #16
 801527c:	4603      	mov	r3, r0
 801527e:	b9b2      	cbnz	r2, 80152ae <__hi0bits+0x36>
 8015280:	0403      	lsls	r3, r0, #16
 8015282:	2010      	movs	r0, #16
 8015284:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015288:	bf04      	itt	eq
 801528a:	021b      	lsleq	r3, r3, #8
 801528c:	3008      	addeq	r0, #8
 801528e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015292:	bf04      	itt	eq
 8015294:	011b      	lsleq	r3, r3, #4
 8015296:	3004      	addeq	r0, #4
 8015298:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801529c:	bf04      	itt	eq
 801529e:	009b      	lsleq	r3, r3, #2
 80152a0:	3002      	addeq	r0, #2
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	db06      	blt.n	80152b4 <__hi0bits+0x3c>
 80152a6:	005b      	lsls	r3, r3, #1
 80152a8:	d503      	bpl.n	80152b2 <__hi0bits+0x3a>
 80152aa:	3001      	adds	r0, #1
 80152ac:	4770      	bx	lr
 80152ae:	2000      	movs	r0, #0
 80152b0:	e7e8      	b.n	8015284 <__hi0bits+0xc>
 80152b2:	2020      	movs	r0, #32
 80152b4:	4770      	bx	lr

080152b6 <__lo0bits>:
 80152b6:	6803      	ldr	r3, [r0, #0]
 80152b8:	f013 0207 	ands.w	r2, r3, #7
 80152bc:	4601      	mov	r1, r0
 80152be:	d00b      	beq.n	80152d8 <__lo0bits+0x22>
 80152c0:	07da      	lsls	r2, r3, #31
 80152c2:	d423      	bmi.n	801530c <__lo0bits+0x56>
 80152c4:	0798      	lsls	r0, r3, #30
 80152c6:	bf49      	itett	mi
 80152c8:	085b      	lsrmi	r3, r3, #1
 80152ca:	089b      	lsrpl	r3, r3, #2
 80152cc:	2001      	movmi	r0, #1
 80152ce:	600b      	strmi	r3, [r1, #0]
 80152d0:	bf5c      	itt	pl
 80152d2:	600b      	strpl	r3, [r1, #0]
 80152d4:	2002      	movpl	r0, #2
 80152d6:	4770      	bx	lr
 80152d8:	b298      	uxth	r0, r3
 80152da:	b9a8      	cbnz	r0, 8015308 <__lo0bits+0x52>
 80152dc:	0c1b      	lsrs	r3, r3, #16
 80152de:	2010      	movs	r0, #16
 80152e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80152e4:	bf04      	itt	eq
 80152e6:	0a1b      	lsreq	r3, r3, #8
 80152e8:	3008      	addeq	r0, #8
 80152ea:	071a      	lsls	r2, r3, #28
 80152ec:	bf04      	itt	eq
 80152ee:	091b      	lsreq	r3, r3, #4
 80152f0:	3004      	addeq	r0, #4
 80152f2:	079a      	lsls	r2, r3, #30
 80152f4:	bf04      	itt	eq
 80152f6:	089b      	lsreq	r3, r3, #2
 80152f8:	3002      	addeq	r0, #2
 80152fa:	07da      	lsls	r2, r3, #31
 80152fc:	d402      	bmi.n	8015304 <__lo0bits+0x4e>
 80152fe:	085b      	lsrs	r3, r3, #1
 8015300:	d006      	beq.n	8015310 <__lo0bits+0x5a>
 8015302:	3001      	adds	r0, #1
 8015304:	600b      	str	r3, [r1, #0]
 8015306:	4770      	bx	lr
 8015308:	4610      	mov	r0, r2
 801530a:	e7e9      	b.n	80152e0 <__lo0bits+0x2a>
 801530c:	2000      	movs	r0, #0
 801530e:	4770      	bx	lr
 8015310:	2020      	movs	r0, #32
 8015312:	4770      	bx	lr

08015314 <__i2b>:
 8015314:	b510      	push	{r4, lr}
 8015316:	460c      	mov	r4, r1
 8015318:	2101      	movs	r1, #1
 801531a:	f7ff fee9 	bl	80150f0 <_Balloc>
 801531e:	2201      	movs	r2, #1
 8015320:	6144      	str	r4, [r0, #20]
 8015322:	6102      	str	r2, [r0, #16]
 8015324:	bd10      	pop	{r4, pc}

08015326 <__multiply>:
 8015326:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801532a:	4614      	mov	r4, r2
 801532c:	690a      	ldr	r2, [r1, #16]
 801532e:	6923      	ldr	r3, [r4, #16]
 8015330:	429a      	cmp	r2, r3
 8015332:	bfb8      	it	lt
 8015334:	460b      	movlt	r3, r1
 8015336:	4688      	mov	r8, r1
 8015338:	bfbc      	itt	lt
 801533a:	46a0      	movlt	r8, r4
 801533c:	461c      	movlt	r4, r3
 801533e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015342:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801534a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801534e:	eb07 0609 	add.w	r6, r7, r9
 8015352:	42b3      	cmp	r3, r6
 8015354:	bfb8      	it	lt
 8015356:	3101      	addlt	r1, #1
 8015358:	f7ff feca 	bl	80150f0 <_Balloc>
 801535c:	f100 0514 	add.w	r5, r0, #20
 8015360:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015364:	462b      	mov	r3, r5
 8015366:	2200      	movs	r2, #0
 8015368:	4573      	cmp	r3, lr
 801536a:	d316      	bcc.n	801539a <__multiply+0x74>
 801536c:	f104 0214 	add.w	r2, r4, #20
 8015370:	f108 0114 	add.w	r1, r8, #20
 8015374:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015378:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	9b00      	ldr	r3, [sp, #0]
 8015380:	9201      	str	r2, [sp, #4]
 8015382:	4293      	cmp	r3, r2
 8015384:	d80c      	bhi.n	80153a0 <__multiply+0x7a>
 8015386:	2e00      	cmp	r6, #0
 8015388:	dd03      	ble.n	8015392 <__multiply+0x6c>
 801538a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801538e:	2b00      	cmp	r3, #0
 8015390:	d05d      	beq.n	801544e <__multiply+0x128>
 8015392:	6106      	str	r6, [r0, #16]
 8015394:	b003      	add	sp, #12
 8015396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801539a:	f843 2b04 	str.w	r2, [r3], #4
 801539e:	e7e3      	b.n	8015368 <__multiply+0x42>
 80153a0:	f8b2 b000 	ldrh.w	fp, [r2]
 80153a4:	f1bb 0f00 	cmp.w	fp, #0
 80153a8:	d023      	beq.n	80153f2 <__multiply+0xcc>
 80153aa:	4689      	mov	r9, r1
 80153ac:	46ac      	mov	ip, r5
 80153ae:	f04f 0800 	mov.w	r8, #0
 80153b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80153b6:	f8dc a000 	ldr.w	sl, [ip]
 80153ba:	b2a3      	uxth	r3, r4
 80153bc:	fa1f fa8a 	uxth.w	sl, sl
 80153c0:	fb0b a303 	mla	r3, fp, r3, sl
 80153c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80153c8:	f8dc 4000 	ldr.w	r4, [ip]
 80153cc:	4443      	add	r3, r8
 80153ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80153d2:	fb0b 840a 	mla	r4, fp, sl, r8
 80153d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80153da:	46e2      	mov	sl, ip
 80153dc:	b29b      	uxth	r3, r3
 80153de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80153e2:	454f      	cmp	r7, r9
 80153e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80153e8:	f84a 3b04 	str.w	r3, [sl], #4
 80153ec:	d82b      	bhi.n	8015446 <__multiply+0x120>
 80153ee:	f8cc 8004 	str.w	r8, [ip, #4]
 80153f2:	9b01      	ldr	r3, [sp, #4]
 80153f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80153f8:	3204      	adds	r2, #4
 80153fa:	f1ba 0f00 	cmp.w	sl, #0
 80153fe:	d020      	beq.n	8015442 <__multiply+0x11c>
 8015400:	682b      	ldr	r3, [r5, #0]
 8015402:	4689      	mov	r9, r1
 8015404:	46a8      	mov	r8, r5
 8015406:	f04f 0b00 	mov.w	fp, #0
 801540a:	f8b9 c000 	ldrh.w	ip, [r9]
 801540e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015412:	fb0a 440c 	mla	r4, sl, ip, r4
 8015416:	445c      	add	r4, fp
 8015418:	46c4      	mov	ip, r8
 801541a:	b29b      	uxth	r3, r3
 801541c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015420:	f84c 3b04 	str.w	r3, [ip], #4
 8015424:	f859 3b04 	ldr.w	r3, [r9], #4
 8015428:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801542c:	0c1b      	lsrs	r3, r3, #16
 801542e:	fb0a b303 	mla	r3, sl, r3, fp
 8015432:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015436:	454f      	cmp	r7, r9
 8015438:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801543c:	d805      	bhi.n	801544a <__multiply+0x124>
 801543e:	f8c8 3004 	str.w	r3, [r8, #4]
 8015442:	3504      	adds	r5, #4
 8015444:	e79b      	b.n	801537e <__multiply+0x58>
 8015446:	46d4      	mov	ip, sl
 8015448:	e7b3      	b.n	80153b2 <__multiply+0x8c>
 801544a:	46e0      	mov	r8, ip
 801544c:	e7dd      	b.n	801540a <__multiply+0xe4>
 801544e:	3e01      	subs	r6, #1
 8015450:	e799      	b.n	8015386 <__multiply+0x60>
	...

08015454 <__pow5mult>:
 8015454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015458:	4615      	mov	r5, r2
 801545a:	f012 0203 	ands.w	r2, r2, #3
 801545e:	4606      	mov	r6, r0
 8015460:	460f      	mov	r7, r1
 8015462:	d007      	beq.n	8015474 <__pow5mult+0x20>
 8015464:	3a01      	subs	r2, #1
 8015466:	4c21      	ldr	r4, [pc, #132]	; (80154ec <__pow5mult+0x98>)
 8015468:	2300      	movs	r3, #0
 801546a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801546e:	f7ff fe8a 	bl	8015186 <__multadd>
 8015472:	4607      	mov	r7, r0
 8015474:	10ad      	asrs	r5, r5, #2
 8015476:	d035      	beq.n	80154e4 <__pow5mult+0x90>
 8015478:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801547a:	b93c      	cbnz	r4, 801548c <__pow5mult+0x38>
 801547c:	2010      	movs	r0, #16
 801547e:	f7fc fe1f 	bl	80120c0 <malloc>
 8015482:	6270      	str	r0, [r6, #36]	; 0x24
 8015484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015488:	6004      	str	r4, [r0, #0]
 801548a:	60c4      	str	r4, [r0, #12]
 801548c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015494:	b94c      	cbnz	r4, 80154aa <__pow5mult+0x56>
 8015496:	f240 2171 	movw	r1, #625	; 0x271
 801549a:	4630      	mov	r0, r6
 801549c:	f7ff ff3a 	bl	8015314 <__i2b>
 80154a0:	2300      	movs	r3, #0
 80154a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80154a6:	4604      	mov	r4, r0
 80154a8:	6003      	str	r3, [r0, #0]
 80154aa:	f04f 0800 	mov.w	r8, #0
 80154ae:	07eb      	lsls	r3, r5, #31
 80154b0:	d50a      	bpl.n	80154c8 <__pow5mult+0x74>
 80154b2:	4639      	mov	r1, r7
 80154b4:	4622      	mov	r2, r4
 80154b6:	4630      	mov	r0, r6
 80154b8:	f7ff ff35 	bl	8015326 <__multiply>
 80154bc:	4639      	mov	r1, r7
 80154be:	4681      	mov	r9, r0
 80154c0:	4630      	mov	r0, r6
 80154c2:	f7ff fe49 	bl	8015158 <_Bfree>
 80154c6:	464f      	mov	r7, r9
 80154c8:	106d      	asrs	r5, r5, #1
 80154ca:	d00b      	beq.n	80154e4 <__pow5mult+0x90>
 80154cc:	6820      	ldr	r0, [r4, #0]
 80154ce:	b938      	cbnz	r0, 80154e0 <__pow5mult+0x8c>
 80154d0:	4622      	mov	r2, r4
 80154d2:	4621      	mov	r1, r4
 80154d4:	4630      	mov	r0, r6
 80154d6:	f7ff ff26 	bl	8015326 <__multiply>
 80154da:	6020      	str	r0, [r4, #0]
 80154dc:	f8c0 8000 	str.w	r8, [r0]
 80154e0:	4604      	mov	r4, r0
 80154e2:	e7e4      	b.n	80154ae <__pow5mult+0x5a>
 80154e4:	4638      	mov	r0, r7
 80154e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154ea:	bf00      	nop
 80154ec:	08018448 	.word	0x08018448

080154f0 <__lshift>:
 80154f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154f4:	460c      	mov	r4, r1
 80154f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80154fa:	6923      	ldr	r3, [r4, #16]
 80154fc:	6849      	ldr	r1, [r1, #4]
 80154fe:	eb0a 0903 	add.w	r9, sl, r3
 8015502:	68a3      	ldr	r3, [r4, #8]
 8015504:	4607      	mov	r7, r0
 8015506:	4616      	mov	r6, r2
 8015508:	f109 0501 	add.w	r5, r9, #1
 801550c:	42ab      	cmp	r3, r5
 801550e:	db32      	blt.n	8015576 <__lshift+0x86>
 8015510:	4638      	mov	r0, r7
 8015512:	f7ff fded 	bl	80150f0 <_Balloc>
 8015516:	2300      	movs	r3, #0
 8015518:	4680      	mov	r8, r0
 801551a:	f100 0114 	add.w	r1, r0, #20
 801551e:	461a      	mov	r2, r3
 8015520:	4553      	cmp	r3, sl
 8015522:	db2b      	blt.n	801557c <__lshift+0x8c>
 8015524:	6920      	ldr	r0, [r4, #16]
 8015526:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801552a:	f104 0314 	add.w	r3, r4, #20
 801552e:	f016 021f 	ands.w	r2, r6, #31
 8015532:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015536:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801553a:	d025      	beq.n	8015588 <__lshift+0x98>
 801553c:	f1c2 0e20 	rsb	lr, r2, #32
 8015540:	2000      	movs	r0, #0
 8015542:	681e      	ldr	r6, [r3, #0]
 8015544:	468a      	mov	sl, r1
 8015546:	4096      	lsls	r6, r2
 8015548:	4330      	orrs	r0, r6
 801554a:	f84a 0b04 	str.w	r0, [sl], #4
 801554e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015552:	459c      	cmp	ip, r3
 8015554:	fa20 f00e 	lsr.w	r0, r0, lr
 8015558:	d814      	bhi.n	8015584 <__lshift+0x94>
 801555a:	6048      	str	r0, [r1, #4]
 801555c:	b108      	cbz	r0, 8015562 <__lshift+0x72>
 801555e:	f109 0502 	add.w	r5, r9, #2
 8015562:	3d01      	subs	r5, #1
 8015564:	4638      	mov	r0, r7
 8015566:	f8c8 5010 	str.w	r5, [r8, #16]
 801556a:	4621      	mov	r1, r4
 801556c:	f7ff fdf4 	bl	8015158 <_Bfree>
 8015570:	4640      	mov	r0, r8
 8015572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015576:	3101      	adds	r1, #1
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	e7c7      	b.n	801550c <__lshift+0x1c>
 801557c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015580:	3301      	adds	r3, #1
 8015582:	e7cd      	b.n	8015520 <__lshift+0x30>
 8015584:	4651      	mov	r1, sl
 8015586:	e7dc      	b.n	8015542 <__lshift+0x52>
 8015588:	3904      	subs	r1, #4
 801558a:	f853 2b04 	ldr.w	r2, [r3], #4
 801558e:	f841 2f04 	str.w	r2, [r1, #4]!
 8015592:	459c      	cmp	ip, r3
 8015594:	d8f9      	bhi.n	801558a <__lshift+0x9a>
 8015596:	e7e4      	b.n	8015562 <__lshift+0x72>

08015598 <__mcmp>:
 8015598:	6903      	ldr	r3, [r0, #16]
 801559a:	690a      	ldr	r2, [r1, #16]
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	b530      	push	{r4, r5, lr}
 80155a0:	d10c      	bne.n	80155bc <__mcmp+0x24>
 80155a2:	0092      	lsls	r2, r2, #2
 80155a4:	3014      	adds	r0, #20
 80155a6:	3114      	adds	r1, #20
 80155a8:	1884      	adds	r4, r0, r2
 80155aa:	4411      	add	r1, r2
 80155ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80155b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80155b4:	4295      	cmp	r5, r2
 80155b6:	d003      	beq.n	80155c0 <__mcmp+0x28>
 80155b8:	d305      	bcc.n	80155c6 <__mcmp+0x2e>
 80155ba:	2301      	movs	r3, #1
 80155bc:	4618      	mov	r0, r3
 80155be:	bd30      	pop	{r4, r5, pc}
 80155c0:	42a0      	cmp	r0, r4
 80155c2:	d3f3      	bcc.n	80155ac <__mcmp+0x14>
 80155c4:	e7fa      	b.n	80155bc <__mcmp+0x24>
 80155c6:	f04f 33ff 	mov.w	r3, #4294967295
 80155ca:	e7f7      	b.n	80155bc <__mcmp+0x24>

080155cc <__mdiff>:
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	460d      	mov	r5, r1
 80155d2:	4607      	mov	r7, r0
 80155d4:	4611      	mov	r1, r2
 80155d6:	4628      	mov	r0, r5
 80155d8:	4614      	mov	r4, r2
 80155da:	f7ff ffdd 	bl	8015598 <__mcmp>
 80155de:	1e06      	subs	r6, r0, #0
 80155e0:	d108      	bne.n	80155f4 <__mdiff+0x28>
 80155e2:	4631      	mov	r1, r6
 80155e4:	4638      	mov	r0, r7
 80155e6:	f7ff fd83 	bl	80150f0 <_Balloc>
 80155ea:	2301      	movs	r3, #1
 80155ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80155f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155f4:	bfa4      	itt	ge
 80155f6:	4623      	movge	r3, r4
 80155f8:	462c      	movge	r4, r5
 80155fa:	4638      	mov	r0, r7
 80155fc:	6861      	ldr	r1, [r4, #4]
 80155fe:	bfa6      	itte	ge
 8015600:	461d      	movge	r5, r3
 8015602:	2600      	movge	r6, #0
 8015604:	2601      	movlt	r6, #1
 8015606:	f7ff fd73 	bl	80150f0 <_Balloc>
 801560a:	692b      	ldr	r3, [r5, #16]
 801560c:	60c6      	str	r6, [r0, #12]
 801560e:	6926      	ldr	r6, [r4, #16]
 8015610:	f105 0914 	add.w	r9, r5, #20
 8015614:	f104 0214 	add.w	r2, r4, #20
 8015618:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801561c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015620:	f100 0514 	add.w	r5, r0, #20
 8015624:	f04f 0e00 	mov.w	lr, #0
 8015628:	f852 ab04 	ldr.w	sl, [r2], #4
 801562c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015630:	fa1e f18a 	uxtah	r1, lr, sl
 8015634:	b2a3      	uxth	r3, r4
 8015636:	1ac9      	subs	r1, r1, r3
 8015638:	0c23      	lsrs	r3, r4, #16
 801563a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801563e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015642:	b289      	uxth	r1, r1
 8015644:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015648:	45c8      	cmp	r8, r9
 801564a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801564e:	4694      	mov	ip, r2
 8015650:	f845 3b04 	str.w	r3, [r5], #4
 8015654:	d8e8      	bhi.n	8015628 <__mdiff+0x5c>
 8015656:	45bc      	cmp	ip, r7
 8015658:	d304      	bcc.n	8015664 <__mdiff+0x98>
 801565a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801565e:	b183      	cbz	r3, 8015682 <__mdiff+0xb6>
 8015660:	6106      	str	r6, [r0, #16]
 8015662:	e7c5      	b.n	80155f0 <__mdiff+0x24>
 8015664:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015668:	fa1e f381 	uxtah	r3, lr, r1
 801566c:	141a      	asrs	r2, r3, #16
 801566e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015672:	b29b      	uxth	r3, r3
 8015674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015678:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801567c:	f845 3b04 	str.w	r3, [r5], #4
 8015680:	e7e9      	b.n	8015656 <__mdiff+0x8a>
 8015682:	3e01      	subs	r6, #1
 8015684:	e7e9      	b.n	801565a <__mdiff+0x8e>
	...

08015688 <__ulp>:
 8015688:	4b12      	ldr	r3, [pc, #72]	; (80156d4 <__ulp+0x4c>)
 801568a:	ee10 2a90 	vmov	r2, s1
 801568e:	401a      	ands	r2, r3
 8015690:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015694:	2b00      	cmp	r3, #0
 8015696:	dd04      	ble.n	80156a2 <__ulp+0x1a>
 8015698:	2000      	movs	r0, #0
 801569a:	4619      	mov	r1, r3
 801569c:	ec41 0b10 	vmov	d0, r0, r1
 80156a0:	4770      	bx	lr
 80156a2:	425b      	negs	r3, r3
 80156a4:	151b      	asrs	r3, r3, #20
 80156a6:	2b13      	cmp	r3, #19
 80156a8:	f04f 0000 	mov.w	r0, #0
 80156ac:	f04f 0100 	mov.w	r1, #0
 80156b0:	dc04      	bgt.n	80156bc <__ulp+0x34>
 80156b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80156b6:	fa42 f103 	asr.w	r1, r2, r3
 80156ba:	e7ef      	b.n	801569c <__ulp+0x14>
 80156bc:	3b14      	subs	r3, #20
 80156be:	2b1e      	cmp	r3, #30
 80156c0:	f04f 0201 	mov.w	r2, #1
 80156c4:	bfda      	itte	le
 80156c6:	f1c3 031f 	rsble	r3, r3, #31
 80156ca:	fa02 f303 	lslle.w	r3, r2, r3
 80156ce:	4613      	movgt	r3, r2
 80156d0:	4618      	mov	r0, r3
 80156d2:	e7e3      	b.n	801569c <__ulp+0x14>
 80156d4:	7ff00000 	.word	0x7ff00000

080156d8 <__b2d>:
 80156d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156da:	6905      	ldr	r5, [r0, #16]
 80156dc:	f100 0714 	add.w	r7, r0, #20
 80156e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80156e4:	1f2e      	subs	r6, r5, #4
 80156e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80156ea:	4620      	mov	r0, r4
 80156ec:	f7ff fdc4 	bl	8015278 <__hi0bits>
 80156f0:	f1c0 0320 	rsb	r3, r0, #32
 80156f4:	280a      	cmp	r0, #10
 80156f6:	600b      	str	r3, [r1, #0]
 80156f8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015770 <__b2d+0x98>
 80156fc:	dc14      	bgt.n	8015728 <__b2d+0x50>
 80156fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8015702:	fa24 f10e 	lsr.w	r1, r4, lr
 8015706:	42b7      	cmp	r7, r6
 8015708:	ea41 030c 	orr.w	r3, r1, ip
 801570c:	bf34      	ite	cc
 801570e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015712:	2100      	movcs	r1, #0
 8015714:	3015      	adds	r0, #21
 8015716:	fa04 f000 	lsl.w	r0, r4, r0
 801571a:	fa21 f10e 	lsr.w	r1, r1, lr
 801571e:	ea40 0201 	orr.w	r2, r0, r1
 8015722:	ec43 2b10 	vmov	d0, r2, r3
 8015726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015728:	42b7      	cmp	r7, r6
 801572a:	bf3a      	itte	cc
 801572c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015730:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015734:	2100      	movcs	r1, #0
 8015736:	380b      	subs	r0, #11
 8015738:	d015      	beq.n	8015766 <__b2d+0x8e>
 801573a:	4084      	lsls	r4, r0
 801573c:	f1c0 0520 	rsb	r5, r0, #32
 8015740:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015744:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015748:	42be      	cmp	r6, r7
 801574a:	fa21 fc05 	lsr.w	ip, r1, r5
 801574e:	ea44 030c 	orr.w	r3, r4, ip
 8015752:	bf8c      	ite	hi
 8015754:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015758:	2400      	movls	r4, #0
 801575a:	fa01 f000 	lsl.w	r0, r1, r0
 801575e:	40ec      	lsrs	r4, r5
 8015760:	ea40 0204 	orr.w	r2, r0, r4
 8015764:	e7dd      	b.n	8015722 <__b2d+0x4a>
 8015766:	ea44 030c 	orr.w	r3, r4, ip
 801576a:	460a      	mov	r2, r1
 801576c:	e7d9      	b.n	8015722 <__b2d+0x4a>
 801576e:	bf00      	nop
 8015770:	3ff00000 	.word	0x3ff00000

08015774 <__d2b>:
 8015774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015778:	460e      	mov	r6, r1
 801577a:	2101      	movs	r1, #1
 801577c:	ec59 8b10 	vmov	r8, r9, d0
 8015780:	4615      	mov	r5, r2
 8015782:	f7ff fcb5 	bl	80150f0 <_Balloc>
 8015786:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801578a:	4607      	mov	r7, r0
 801578c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015790:	bb34      	cbnz	r4, 80157e0 <__d2b+0x6c>
 8015792:	9301      	str	r3, [sp, #4]
 8015794:	f1b8 0300 	subs.w	r3, r8, #0
 8015798:	d027      	beq.n	80157ea <__d2b+0x76>
 801579a:	a802      	add	r0, sp, #8
 801579c:	f840 3d08 	str.w	r3, [r0, #-8]!
 80157a0:	f7ff fd89 	bl	80152b6 <__lo0bits>
 80157a4:	9900      	ldr	r1, [sp, #0]
 80157a6:	b1f0      	cbz	r0, 80157e6 <__d2b+0x72>
 80157a8:	9a01      	ldr	r2, [sp, #4]
 80157aa:	f1c0 0320 	rsb	r3, r0, #32
 80157ae:	fa02 f303 	lsl.w	r3, r2, r3
 80157b2:	430b      	orrs	r3, r1
 80157b4:	40c2      	lsrs	r2, r0
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	9201      	str	r2, [sp, #4]
 80157ba:	9b01      	ldr	r3, [sp, #4]
 80157bc:	61bb      	str	r3, [r7, #24]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	bf14      	ite	ne
 80157c2:	2102      	movne	r1, #2
 80157c4:	2101      	moveq	r1, #1
 80157c6:	6139      	str	r1, [r7, #16]
 80157c8:	b1c4      	cbz	r4, 80157fc <__d2b+0x88>
 80157ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80157ce:	4404      	add	r4, r0
 80157d0:	6034      	str	r4, [r6, #0]
 80157d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80157d6:	6028      	str	r0, [r5, #0]
 80157d8:	4638      	mov	r0, r7
 80157da:	b003      	add	sp, #12
 80157dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157e4:	e7d5      	b.n	8015792 <__d2b+0x1e>
 80157e6:	6179      	str	r1, [r7, #20]
 80157e8:	e7e7      	b.n	80157ba <__d2b+0x46>
 80157ea:	a801      	add	r0, sp, #4
 80157ec:	f7ff fd63 	bl	80152b6 <__lo0bits>
 80157f0:	9b01      	ldr	r3, [sp, #4]
 80157f2:	617b      	str	r3, [r7, #20]
 80157f4:	2101      	movs	r1, #1
 80157f6:	6139      	str	r1, [r7, #16]
 80157f8:	3020      	adds	r0, #32
 80157fa:	e7e5      	b.n	80157c8 <__d2b+0x54>
 80157fc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015804:	6030      	str	r0, [r6, #0]
 8015806:	6918      	ldr	r0, [r3, #16]
 8015808:	f7ff fd36 	bl	8015278 <__hi0bits>
 801580c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015810:	e7e1      	b.n	80157d6 <__d2b+0x62>

08015812 <__ratio>:
 8015812:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015816:	4688      	mov	r8, r1
 8015818:	4669      	mov	r1, sp
 801581a:	4681      	mov	r9, r0
 801581c:	f7ff ff5c 	bl	80156d8 <__b2d>
 8015820:	a901      	add	r1, sp, #4
 8015822:	4640      	mov	r0, r8
 8015824:	ec57 6b10 	vmov	r6, r7, d0
 8015828:	f7ff ff56 	bl	80156d8 <__b2d>
 801582c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015830:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015834:	eba3 0c02 	sub.w	ip, r3, r2
 8015838:	e9dd 3200 	ldrd	r3, r2, [sp]
 801583c:	1a9b      	subs	r3, r3, r2
 801583e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015842:	ec5b ab10 	vmov	sl, fp, d0
 8015846:	2b00      	cmp	r3, #0
 8015848:	bfce      	itee	gt
 801584a:	463a      	movgt	r2, r7
 801584c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015850:	465a      	movle	r2, fp
 8015852:	4659      	mov	r1, fp
 8015854:	463d      	mov	r5, r7
 8015856:	bfd4      	ite	le
 8015858:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801585c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015860:	4630      	mov	r0, r6
 8015862:	ee10 2a10 	vmov	r2, s0
 8015866:	460b      	mov	r3, r1
 8015868:	4629      	mov	r1, r5
 801586a:	f7ea ffff 	bl	800086c <__aeabi_ddiv>
 801586e:	ec41 0b10 	vmov	d0, r0, r1
 8015872:	b003      	add	sp, #12
 8015874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015878 <__copybits>:
 8015878:	3901      	subs	r1, #1
 801587a:	b510      	push	{r4, lr}
 801587c:	1149      	asrs	r1, r1, #5
 801587e:	6914      	ldr	r4, [r2, #16]
 8015880:	3101      	adds	r1, #1
 8015882:	f102 0314 	add.w	r3, r2, #20
 8015886:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801588a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801588e:	42a3      	cmp	r3, r4
 8015890:	4602      	mov	r2, r0
 8015892:	d303      	bcc.n	801589c <__copybits+0x24>
 8015894:	2300      	movs	r3, #0
 8015896:	428a      	cmp	r2, r1
 8015898:	d305      	bcc.n	80158a6 <__copybits+0x2e>
 801589a:	bd10      	pop	{r4, pc}
 801589c:	f853 2b04 	ldr.w	r2, [r3], #4
 80158a0:	f840 2b04 	str.w	r2, [r0], #4
 80158a4:	e7f3      	b.n	801588e <__copybits+0x16>
 80158a6:	f842 3b04 	str.w	r3, [r2], #4
 80158aa:	e7f4      	b.n	8015896 <__copybits+0x1e>

080158ac <__any_on>:
 80158ac:	f100 0214 	add.w	r2, r0, #20
 80158b0:	6900      	ldr	r0, [r0, #16]
 80158b2:	114b      	asrs	r3, r1, #5
 80158b4:	4298      	cmp	r0, r3
 80158b6:	b510      	push	{r4, lr}
 80158b8:	db11      	blt.n	80158de <__any_on+0x32>
 80158ba:	dd0a      	ble.n	80158d2 <__any_on+0x26>
 80158bc:	f011 011f 	ands.w	r1, r1, #31
 80158c0:	d007      	beq.n	80158d2 <__any_on+0x26>
 80158c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80158c6:	fa24 f001 	lsr.w	r0, r4, r1
 80158ca:	fa00 f101 	lsl.w	r1, r0, r1
 80158ce:	428c      	cmp	r4, r1
 80158d0:	d10b      	bne.n	80158ea <__any_on+0x3e>
 80158d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d803      	bhi.n	80158e2 <__any_on+0x36>
 80158da:	2000      	movs	r0, #0
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	4603      	mov	r3, r0
 80158e0:	e7f7      	b.n	80158d2 <__any_on+0x26>
 80158e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80158e6:	2900      	cmp	r1, #0
 80158e8:	d0f5      	beq.n	80158d6 <__any_on+0x2a>
 80158ea:	2001      	movs	r0, #1
 80158ec:	e7f6      	b.n	80158dc <__any_on+0x30>

080158ee <_calloc_r>:
 80158ee:	b538      	push	{r3, r4, r5, lr}
 80158f0:	fb02 f401 	mul.w	r4, r2, r1
 80158f4:	4621      	mov	r1, r4
 80158f6:	f7fc fc6d 	bl	80121d4 <_malloc_r>
 80158fa:	4605      	mov	r5, r0
 80158fc:	b118      	cbz	r0, 8015906 <_calloc_r+0x18>
 80158fe:	4622      	mov	r2, r4
 8015900:	2100      	movs	r1, #0
 8015902:	f7fc fc11 	bl	8012128 <memset>
 8015906:	4628      	mov	r0, r5
 8015908:	bd38      	pop	{r3, r4, r5, pc}

0801590a <__ssputs_r>:
 801590a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801590e:	688e      	ldr	r6, [r1, #8]
 8015910:	429e      	cmp	r6, r3
 8015912:	4682      	mov	sl, r0
 8015914:	460c      	mov	r4, r1
 8015916:	4690      	mov	r8, r2
 8015918:	4699      	mov	r9, r3
 801591a:	d837      	bhi.n	801598c <__ssputs_r+0x82>
 801591c:	898a      	ldrh	r2, [r1, #12]
 801591e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015922:	d031      	beq.n	8015988 <__ssputs_r+0x7e>
 8015924:	6825      	ldr	r5, [r4, #0]
 8015926:	6909      	ldr	r1, [r1, #16]
 8015928:	1a6f      	subs	r7, r5, r1
 801592a:	6965      	ldr	r5, [r4, #20]
 801592c:	2302      	movs	r3, #2
 801592e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015932:	fb95 f5f3 	sdiv	r5, r5, r3
 8015936:	f109 0301 	add.w	r3, r9, #1
 801593a:	443b      	add	r3, r7
 801593c:	429d      	cmp	r5, r3
 801593e:	bf38      	it	cc
 8015940:	461d      	movcc	r5, r3
 8015942:	0553      	lsls	r3, r2, #21
 8015944:	d530      	bpl.n	80159a8 <__ssputs_r+0x9e>
 8015946:	4629      	mov	r1, r5
 8015948:	f7fc fc44 	bl	80121d4 <_malloc_r>
 801594c:	4606      	mov	r6, r0
 801594e:	b950      	cbnz	r0, 8015966 <__ssputs_r+0x5c>
 8015950:	230c      	movs	r3, #12
 8015952:	f8ca 3000 	str.w	r3, [sl]
 8015956:	89a3      	ldrh	r3, [r4, #12]
 8015958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801595c:	81a3      	strh	r3, [r4, #12]
 801595e:	f04f 30ff 	mov.w	r0, #4294967295
 8015962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015966:	463a      	mov	r2, r7
 8015968:	6921      	ldr	r1, [r4, #16]
 801596a:	f7fc fbb9 	bl	80120e0 <memcpy>
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015978:	81a3      	strh	r3, [r4, #12]
 801597a:	6126      	str	r6, [r4, #16]
 801597c:	6165      	str	r5, [r4, #20]
 801597e:	443e      	add	r6, r7
 8015980:	1bed      	subs	r5, r5, r7
 8015982:	6026      	str	r6, [r4, #0]
 8015984:	60a5      	str	r5, [r4, #8]
 8015986:	464e      	mov	r6, r9
 8015988:	454e      	cmp	r6, r9
 801598a:	d900      	bls.n	801598e <__ssputs_r+0x84>
 801598c:	464e      	mov	r6, r9
 801598e:	4632      	mov	r2, r6
 8015990:	4641      	mov	r1, r8
 8015992:	6820      	ldr	r0, [r4, #0]
 8015994:	f7fc fbaf 	bl	80120f6 <memmove>
 8015998:	68a3      	ldr	r3, [r4, #8]
 801599a:	1b9b      	subs	r3, r3, r6
 801599c:	60a3      	str	r3, [r4, #8]
 801599e:	6823      	ldr	r3, [r4, #0]
 80159a0:	441e      	add	r6, r3
 80159a2:	6026      	str	r6, [r4, #0]
 80159a4:	2000      	movs	r0, #0
 80159a6:	e7dc      	b.n	8015962 <__ssputs_r+0x58>
 80159a8:	462a      	mov	r2, r5
 80159aa:	f000 fd1a 	bl	80163e2 <_realloc_r>
 80159ae:	4606      	mov	r6, r0
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d1e2      	bne.n	801597a <__ssputs_r+0x70>
 80159b4:	6921      	ldr	r1, [r4, #16]
 80159b6:	4650      	mov	r0, sl
 80159b8:	f7fc fbbe 	bl	8012138 <_free_r>
 80159bc:	e7c8      	b.n	8015950 <__ssputs_r+0x46>
	...

080159c0 <_svfiprintf_r>:
 80159c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159c4:	461d      	mov	r5, r3
 80159c6:	898b      	ldrh	r3, [r1, #12]
 80159c8:	061f      	lsls	r7, r3, #24
 80159ca:	b09d      	sub	sp, #116	; 0x74
 80159cc:	4680      	mov	r8, r0
 80159ce:	460c      	mov	r4, r1
 80159d0:	4616      	mov	r6, r2
 80159d2:	d50f      	bpl.n	80159f4 <_svfiprintf_r+0x34>
 80159d4:	690b      	ldr	r3, [r1, #16]
 80159d6:	b96b      	cbnz	r3, 80159f4 <_svfiprintf_r+0x34>
 80159d8:	2140      	movs	r1, #64	; 0x40
 80159da:	f7fc fbfb 	bl	80121d4 <_malloc_r>
 80159de:	6020      	str	r0, [r4, #0]
 80159e0:	6120      	str	r0, [r4, #16]
 80159e2:	b928      	cbnz	r0, 80159f0 <_svfiprintf_r+0x30>
 80159e4:	230c      	movs	r3, #12
 80159e6:	f8c8 3000 	str.w	r3, [r8]
 80159ea:	f04f 30ff 	mov.w	r0, #4294967295
 80159ee:	e0c8      	b.n	8015b82 <_svfiprintf_r+0x1c2>
 80159f0:	2340      	movs	r3, #64	; 0x40
 80159f2:	6163      	str	r3, [r4, #20]
 80159f4:	2300      	movs	r3, #0
 80159f6:	9309      	str	r3, [sp, #36]	; 0x24
 80159f8:	2320      	movs	r3, #32
 80159fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159fe:	2330      	movs	r3, #48	; 0x30
 8015a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a04:	9503      	str	r5, [sp, #12]
 8015a06:	f04f 0b01 	mov.w	fp, #1
 8015a0a:	4637      	mov	r7, r6
 8015a0c:	463d      	mov	r5, r7
 8015a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015a12:	b10b      	cbz	r3, 8015a18 <_svfiprintf_r+0x58>
 8015a14:	2b25      	cmp	r3, #37	; 0x25
 8015a16:	d13e      	bne.n	8015a96 <_svfiprintf_r+0xd6>
 8015a18:	ebb7 0a06 	subs.w	sl, r7, r6
 8015a1c:	d00b      	beq.n	8015a36 <_svfiprintf_r+0x76>
 8015a1e:	4653      	mov	r3, sl
 8015a20:	4632      	mov	r2, r6
 8015a22:	4621      	mov	r1, r4
 8015a24:	4640      	mov	r0, r8
 8015a26:	f7ff ff70 	bl	801590a <__ssputs_r>
 8015a2a:	3001      	adds	r0, #1
 8015a2c:	f000 80a4 	beq.w	8015b78 <_svfiprintf_r+0x1b8>
 8015a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a32:	4453      	add	r3, sl
 8015a34:	9309      	str	r3, [sp, #36]	; 0x24
 8015a36:	783b      	ldrb	r3, [r7, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 809d 	beq.w	8015b78 <_svfiprintf_r+0x1b8>
 8015a3e:	2300      	movs	r3, #0
 8015a40:	f04f 32ff 	mov.w	r2, #4294967295
 8015a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a48:	9304      	str	r3, [sp, #16]
 8015a4a:	9307      	str	r3, [sp, #28]
 8015a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a50:	931a      	str	r3, [sp, #104]	; 0x68
 8015a52:	462f      	mov	r7, r5
 8015a54:	2205      	movs	r2, #5
 8015a56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015a5a:	4850      	ldr	r0, [pc, #320]	; (8015b9c <_svfiprintf_r+0x1dc>)
 8015a5c:	f7ea fbd0 	bl	8000200 <memchr>
 8015a60:	9b04      	ldr	r3, [sp, #16]
 8015a62:	b9d0      	cbnz	r0, 8015a9a <_svfiprintf_r+0xda>
 8015a64:	06d9      	lsls	r1, r3, #27
 8015a66:	bf44      	itt	mi
 8015a68:	2220      	movmi	r2, #32
 8015a6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a6e:	071a      	lsls	r2, r3, #28
 8015a70:	bf44      	itt	mi
 8015a72:	222b      	movmi	r2, #43	; 0x2b
 8015a74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a78:	782a      	ldrb	r2, [r5, #0]
 8015a7a:	2a2a      	cmp	r2, #42	; 0x2a
 8015a7c:	d015      	beq.n	8015aaa <_svfiprintf_r+0xea>
 8015a7e:	9a07      	ldr	r2, [sp, #28]
 8015a80:	462f      	mov	r7, r5
 8015a82:	2000      	movs	r0, #0
 8015a84:	250a      	movs	r5, #10
 8015a86:	4639      	mov	r1, r7
 8015a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a8c:	3b30      	subs	r3, #48	; 0x30
 8015a8e:	2b09      	cmp	r3, #9
 8015a90:	d94d      	bls.n	8015b2e <_svfiprintf_r+0x16e>
 8015a92:	b1b8      	cbz	r0, 8015ac4 <_svfiprintf_r+0x104>
 8015a94:	e00f      	b.n	8015ab6 <_svfiprintf_r+0xf6>
 8015a96:	462f      	mov	r7, r5
 8015a98:	e7b8      	b.n	8015a0c <_svfiprintf_r+0x4c>
 8015a9a:	4a40      	ldr	r2, [pc, #256]	; (8015b9c <_svfiprintf_r+0x1dc>)
 8015a9c:	1a80      	subs	r0, r0, r2
 8015a9e:	fa0b f000 	lsl.w	r0, fp, r0
 8015aa2:	4318      	orrs	r0, r3
 8015aa4:	9004      	str	r0, [sp, #16]
 8015aa6:	463d      	mov	r5, r7
 8015aa8:	e7d3      	b.n	8015a52 <_svfiprintf_r+0x92>
 8015aaa:	9a03      	ldr	r2, [sp, #12]
 8015aac:	1d11      	adds	r1, r2, #4
 8015aae:	6812      	ldr	r2, [r2, #0]
 8015ab0:	9103      	str	r1, [sp, #12]
 8015ab2:	2a00      	cmp	r2, #0
 8015ab4:	db01      	blt.n	8015aba <_svfiprintf_r+0xfa>
 8015ab6:	9207      	str	r2, [sp, #28]
 8015ab8:	e004      	b.n	8015ac4 <_svfiprintf_r+0x104>
 8015aba:	4252      	negs	r2, r2
 8015abc:	f043 0302 	orr.w	r3, r3, #2
 8015ac0:	9207      	str	r2, [sp, #28]
 8015ac2:	9304      	str	r3, [sp, #16]
 8015ac4:	783b      	ldrb	r3, [r7, #0]
 8015ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ac8:	d10c      	bne.n	8015ae4 <_svfiprintf_r+0x124>
 8015aca:	787b      	ldrb	r3, [r7, #1]
 8015acc:	2b2a      	cmp	r3, #42	; 0x2a
 8015ace:	d133      	bne.n	8015b38 <_svfiprintf_r+0x178>
 8015ad0:	9b03      	ldr	r3, [sp, #12]
 8015ad2:	1d1a      	adds	r2, r3, #4
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	9203      	str	r2, [sp, #12]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	bfb8      	it	lt
 8015adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ae0:	3702      	adds	r7, #2
 8015ae2:	9305      	str	r3, [sp, #20]
 8015ae4:	4d2e      	ldr	r5, [pc, #184]	; (8015ba0 <_svfiprintf_r+0x1e0>)
 8015ae6:	7839      	ldrb	r1, [r7, #0]
 8015ae8:	2203      	movs	r2, #3
 8015aea:	4628      	mov	r0, r5
 8015aec:	f7ea fb88 	bl	8000200 <memchr>
 8015af0:	b138      	cbz	r0, 8015b02 <_svfiprintf_r+0x142>
 8015af2:	2340      	movs	r3, #64	; 0x40
 8015af4:	1b40      	subs	r0, r0, r5
 8015af6:	fa03 f000 	lsl.w	r0, r3, r0
 8015afa:	9b04      	ldr	r3, [sp, #16]
 8015afc:	4303      	orrs	r3, r0
 8015afe:	3701      	adds	r7, #1
 8015b00:	9304      	str	r3, [sp, #16]
 8015b02:	7839      	ldrb	r1, [r7, #0]
 8015b04:	4827      	ldr	r0, [pc, #156]	; (8015ba4 <_svfiprintf_r+0x1e4>)
 8015b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b0a:	2206      	movs	r2, #6
 8015b0c:	1c7e      	adds	r6, r7, #1
 8015b0e:	f7ea fb77 	bl	8000200 <memchr>
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d038      	beq.n	8015b88 <_svfiprintf_r+0x1c8>
 8015b16:	4b24      	ldr	r3, [pc, #144]	; (8015ba8 <_svfiprintf_r+0x1e8>)
 8015b18:	bb13      	cbnz	r3, 8015b60 <_svfiprintf_r+0x1a0>
 8015b1a:	9b03      	ldr	r3, [sp, #12]
 8015b1c:	3307      	adds	r3, #7
 8015b1e:	f023 0307 	bic.w	r3, r3, #7
 8015b22:	3308      	adds	r3, #8
 8015b24:	9303      	str	r3, [sp, #12]
 8015b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b28:	444b      	add	r3, r9
 8015b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8015b2c:	e76d      	b.n	8015a0a <_svfiprintf_r+0x4a>
 8015b2e:	fb05 3202 	mla	r2, r5, r2, r3
 8015b32:	2001      	movs	r0, #1
 8015b34:	460f      	mov	r7, r1
 8015b36:	e7a6      	b.n	8015a86 <_svfiprintf_r+0xc6>
 8015b38:	2300      	movs	r3, #0
 8015b3a:	3701      	adds	r7, #1
 8015b3c:	9305      	str	r3, [sp, #20]
 8015b3e:	4619      	mov	r1, r3
 8015b40:	250a      	movs	r5, #10
 8015b42:	4638      	mov	r0, r7
 8015b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b48:	3a30      	subs	r2, #48	; 0x30
 8015b4a:	2a09      	cmp	r2, #9
 8015b4c:	d903      	bls.n	8015b56 <_svfiprintf_r+0x196>
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0c8      	beq.n	8015ae4 <_svfiprintf_r+0x124>
 8015b52:	9105      	str	r1, [sp, #20]
 8015b54:	e7c6      	b.n	8015ae4 <_svfiprintf_r+0x124>
 8015b56:	fb05 2101 	mla	r1, r5, r1, r2
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	e7f0      	b.n	8015b42 <_svfiprintf_r+0x182>
 8015b60:	ab03      	add	r3, sp, #12
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	4622      	mov	r2, r4
 8015b66:	4b11      	ldr	r3, [pc, #68]	; (8015bac <_svfiprintf_r+0x1ec>)
 8015b68:	a904      	add	r1, sp, #16
 8015b6a:	4640      	mov	r0, r8
 8015b6c:	f7fc fc20 	bl	80123b0 <_printf_float>
 8015b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015b74:	4681      	mov	r9, r0
 8015b76:	d1d6      	bne.n	8015b26 <_svfiprintf_r+0x166>
 8015b78:	89a3      	ldrh	r3, [r4, #12]
 8015b7a:	065b      	lsls	r3, r3, #25
 8015b7c:	f53f af35 	bmi.w	80159ea <_svfiprintf_r+0x2a>
 8015b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b82:	b01d      	add	sp, #116	; 0x74
 8015b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b88:	ab03      	add	r3, sp, #12
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	4622      	mov	r2, r4
 8015b8e:	4b07      	ldr	r3, [pc, #28]	; (8015bac <_svfiprintf_r+0x1ec>)
 8015b90:	a904      	add	r1, sp, #16
 8015b92:	4640      	mov	r0, r8
 8015b94:	f7fc fec2 	bl	801291c <_printf_i>
 8015b98:	e7ea      	b.n	8015b70 <_svfiprintf_r+0x1b0>
 8015b9a:	bf00      	nop
 8015b9c:	08018454 	.word	0x08018454
 8015ba0:	0801845a 	.word	0x0801845a
 8015ba4:	0801845e 	.word	0x0801845e
 8015ba8:	080123b1 	.word	0x080123b1
 8015bac:	0801590b 	.word	0x0801590b

08015bb0 <_sungetc_r>:
 8015bb0:	b538      	push	{r3, r4, r5, lr}
 8015bb2:	1c4b      	adds	r3, r1, #1
 8015bb4:	4614      	mov	r4, r2
 8015bb6:	d103      	bne.n	8015bc0 <_sungetc_r+0x10>
 8015bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	bd38      	pop	{r3, r4, r5, pc}
 8015bc0:	8993      	ldrh	r3, [r2, #12]
 8015bc2:	f023 0320 	bic.w	r3, r3, #32
 8015bc6:	8193      	strh	r3, [r2, #12]
 8015bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bca:	6852      	ldr	r2, [r2, #4]
 8015bcc:	b2cd      	uxtb	r5, r1
 8015bce:	b18b      	cbz	r3, 8015bf4 <_sungetc_r+0x44>
 8015bd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	dd08      	ble.n	8015be8 <_sungetc_r+0x38>
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	1e5a      	subs	r2, r3, #1
 8015bda:	6022      	str	r2, [r4, #0]
 8015bdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015be0:	6863      	ldr	r3, [r4, #4]
 8015be2:	3301      	adds	r3, #1
 8015be4:	6063      	str	r3, [r4, #4]
 8015be6:	e7e9      	b.n	8015bbc <_sungetc_r+0xc>
 8015be8:	4621      	mov	r1, r4
 8015bea:	f000 fbb3 	bl	8016354 <__submore>
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	d0f1      	beq.n	8015bd6 <_sungetc_r+0x26>
 8015bf2:	e7e1      	b.n	8015bb8 <_sungetc_r+0x8>
 8015bf4:	6921      	ldr	r1, [r4, #16]
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	b151      	cbz	r1, 8015c10 <_sungetc_r+0x60>
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	d208      	bcs.n	8015c10 <_sungetc_r+0x60>
 8015bfe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015c02:	42a9      	cmp	r1, r5
 8015c04:	d104      	bne.n	8015c10 <_sungetc_r+0x60>
 8015c06:	3b01      	subs	r3, #1
 8015c08:	3201      	adds	r2, #1
 8015c0a:	6023      	str	r3, [r4, #0]
 8015c0c:	6062      	str	r2, [r4, #4]
 8015c0e:	e7d5      	b.n	8015bbc <_sungetc_r+0xc>
 8015c10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c18:	6363      	str	r3, [r4, #52]	; 0x34
 8015c1a:	2303      	movs	r3, #3
 8015c1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8015c1e:	4623      	mov	r3, r4
 8015c20:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015c24:	6023      	str	r3, [r4, #0]
 8015c26:	2301      	movs	r3, #1
 8015c28:	e7dc      	b.n	8015be4 <_sungetc_r+0x34>

08015c2a <__ssrefill_r>:
 8015c2a:	b510      	push	{r4, lr}
 8015c2c:	460c      	mov	r4, r1
 8015c2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015c30:	b169      	cbz	r1, 8015c4e <__ssrefill_r+0x24>
 8015c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c36:	4299      	cmp	r1, r3
 8015c38:	d001      	beq.n	8015c3e <__ssrefill_r+0x14>
 8015c3a:	f7fc fa7d 	bl	8012138 <_free_r>
 8015c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c40:	6063      	str	r3, [r4, #4]
 8015c42:	2000      	movs	r0, #0
 8015c44:	6360      	str	r0, [r4, #52]	; 0x34
 8015c46:	b113      	cbz	r3, 8015c4e <__ssrefill_r+0x24>
 8015c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015c4a:	6023      	str	r3, [r4, #0]
 8015c4c:	bd10      	pop	{r4, pc}
 8015c4e:	6923      	ldr	r3, [r4, #16]
 8015c50:	6023      	str	r3, [r4, #0]
 8015c52:	2300      	movs	r3, #0
 8015c54:	6063      	str	r3, [r4, #4]
 8015c56:	89a3      	ldrh	r3, [r4, #12]
 8015c58:	f043 0320 	orr.w	r3, r3, #32
 8015c5c:	81a3      	strh	r3, [r4, #12]
 8015c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8015c62:	e7f3      	b.n	8015c4c <__ssrefill_r+0x22>

08015c64 <__ssvfiscanf_r>:
 8015c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c68:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015c6c:	460c      	mov	r4, r1
 8015c6e:	2100      	movs	r1, #0
 8015c70:	9144      	str	r1, [sp, #272]	; 0x110
 8015c72:	9145      	str	r1, [sp, #276]	; 0x114
 8015c74:	499f      	ldr	r1, [pc, #636]	; (8015ef4 <__ssvfiscanf_r+0x290>)
 8015c76:	91a0      	str	r1, [sp, #640]	; 0x280
 8015c78:	f10d 0804 	add.w	r8, sp, #4
 8015c7c:	499e      	ldr	r1, [pc, #632]	; (8015ef8 <__ssvfiscanf_r+0x294>)
 8015c7e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8015efc <__ssvfiscanf_r+0x298>
 8015c82:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015c86:	4606      	mov	r6, r0
 8015c88:	4692      	mov	sl, r2
 8015c8a:	91a1      	str	r1, [sp, #644]	; 0x284
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	270a      	movs	r7, #10
 8015c90:	f89a 3000 	ldrb.w	r3, [sl]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 812a 	beq.w	8015eee <__ssvfiscanf_r+0x28a>
 8015c9a:	4655      	mov	r5, sl
 8015c9c:	f7ff f9f6 	bl	801508c <__locale_ctype_ptr>
 8015ca0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8015ca4:	4458      	add	r0, fp
 8015ca6:	7843      	ldrb	r3, [r0, #1]
 8015ca8:	f013 0308 	ands.w	r3, r3, #8
 8015cac:	d01c      	beq.n	8015ce8 <__ssvfiscanf_r+0x84>
 8015cae:	6863      	ldr	r3, [r4, #4]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	dd12      	ble.n	8015cda <__ssvfiscanf_r+0x76>
 8015cb4:	f7ff f9ea 	bl	801508c <__locale_ctype_ptr>
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	781a      	ldrb	r2, [r3, #0]
 8015cbc:	4410      	add	r0, r2
 8015cbe:	7842      	ldrb	r2, [r0, #1]
 8015cc0:	0712      	lsls	r2, r2, #28
 8015cc2:	d401      	bmi.n	8015cc8 <__ssvfiscanf_r+0x64>
 8015cc4:	46aa      	mov	sl, r5
 8015cc6:	e7e3      	b.n	8015c90 <__ssvfiscanf_r+0x2c>
 8015cc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015cca:	3201      	adds	r2, #1
 8015ccc:	9245      	str	r2, [sp, #276]	; 0x114
 8015cce:	6862      	ldr	r2, [r4, #4]
 8015cd0:	3301      	adds	r3, #1
 8015cd2:	3a01      	subs	r2, #1
 8015cd4:	6062      	str	r2, [r4, #4]
 8015cd6:	6023      	str	r3, [r4, #0]
 8015cd8:	e7e9      	b.n	8015cae <__ssvfiscanf_r+0x4a>
 8015cda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015cdc:	4621      	mov	r1, r4
 8015cde:	4630      	mov	r0, r6
 8015ce0:	4798      	blx	r3
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	d0e6      	beq.n	8015cb4 <__ssvfiscanf_r+0x50>
 8015ce6:	e7ed      	b.n	8015cc4 <__ssvfiscanf_r+0x60>
 8015ce8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8015cec:	f040 8082 	bne.w	8015df4 <__ssvfiscanf_r+0x190>
 8015cf0:	9343      	str	r3, [sp, #268]	; 0x10c
 8015cf2:	9341      	str	r3, [sp, #260]	; 0x104
 8015cf4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8015cfa:	d103      	bne.n	8015d04 <__ssvfiscanf_r+0xa0>
 8015cfc:	2310      	movs	r3, #16
 8015cfe:	9341      	str	r3, [sp, #260]	; 0x104
 8015d00:	f10a 0502 	add.w	r5, sl, #2
 8015d04:	46aa      	mov	sl, r5
 8015d06:	f815 1b01 	ldrb.w	r1, [r5], #1
 8015d0a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015d0e:	2a09      	cmp	r2, #9
 8015d10:	d922      	bls.n	8015d58 <__ssvfiscanf_r+0xf4>
 8015d12:	2203      	movs	r2, #3
 8015d14:	4879      	ldr	r0, [pc, #484]	; (8015efc <__ssvfiscanf_r+0x298>)
 8015d16:	f7ea fa73 	bl	8000200 <memchr>
 8015d1a:	b138      	cbz	r0, 8015d2c <__ssvfiscanf_r+0xc8>
 8015d1c:	eba0 0309 	sub.w	r3, r0, r9
 8015d20:	2001      	movs	r0, #1
 8015d22:	4098      	lsls	r0, r3
 8015d24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d26:	4318      	orrs	r0, r3
 8015d28:	9041      	str	r0, [sp, #260]	; 0x104
 8015d2a:	46aa      	mov	sl, r5
 8015d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8015d30:	2b67      	cmp	r3, #103	; 0x67
 8015d32:	f10a 0501 	add.w	r5, sl, #1
 8015d36:	d82b      	bhi.n	8015d90 <__ssvfiscanf_r+0x12c>
 8015d38:	2b65      	cmp	r3, #101	; 0x65
 8015d3a:	f080 809f 	bcs.w	8015e7c <__ssvfiscanf_r+0x218>
 8015d3e:	2b47      	cmp	r3, #71	; 0x47
 8015d40:	d810      	bhi.n	8015d64 <__ssvfiscanf_r+0x100>
 8015d42:	2b45      	cmp	r3, #69	; 0x45
 8015d44:	f080 809a 	bcs.w	8015e7c <__ssvfiscanf_r+0x218>
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d06c      	beq.n	8015e26 <__ssvfiscanf_r+0x1c2>
 8015d4c:	2b25      	cmp	r3, #37	; 0x25
 8015d4e:	d051      	beq.n	8015df4 <__ssvfiscanf_r+0x190>
 8015d50:	2303      	movs	r3, #3
 8015d52:	9347      	str	r3, [sp, #284]	; 0x11c
 8015d54:	9742      	str	r7, [sp, #264]	; 0x108
 8015d56:	e027      	b.n	8015da8 <__ssvfiscanf_r+0x144>
 8015d58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015d5a:	fb07 1303 	mla	r3, r7, r3, r1
 8015d5e:	3b30      	subs	r3, #48	; 0x30
 8015d60:	9343      	str	r3, [sp, #268]	; 0x10c
 8015d62:	e7cf      	b.n	8015d04 <__ssvfiscanf_r+0xa0>
 8015d64:	2b5b      	cmp	r3, #91	; 0x5b
 8015d66:	d06a      	beq.n	8015e3e <__ssvfiscanf_r+0x1da>
 8015d68:	d80c      	bhi.n	8015d84 <__ssvfiscanf_r+0x120>
 8015d6a:	2b58      	cmp	r3, #88	; 0x58
 8015d6c:	d1f0      	bne.n	8015d50 <__ssvfiscanf_r+0xec>
 8015d6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015d74:	9241      	str	r2, [sp, #260]	; 0x104
 8015d76:	2210      	movs	r2, #16
 8015d78:	9242      	str	r2, [sp, #264]	; 0x108
 8015d7a:	2b6e      	cmp	r3, #110	; 0x6e
 8015d7c:	bf8c      	ite	hi
 8015d7e:	2304      	movhi	r3, #4
 8015d80:	2303      	movls	r3, #3
 8015d82:	e010      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015d84:	2b63      	cmp	r3, #99	; 0x63
 8015d86:	d065      	beq.n	8015e54 <__ssvfiscanf_r+0x1f0>
 8015d88:	2b64      	cmp	r3, #100	; 0x64
 8015d8a:	d1e1      	bne.n	8015d50 <__ssvfiscanf_r+0xec>
 8015d8c:	9742      	str	r7, [sp, #264]	; 0x108
 8015d8e:	e7f4      	b.n	8015d7a <__ssvfiscanf_r+0x116>
 8015d90:	2b70      	cmp	r3, #112	; 0x70
 8015d92:	d04b      	beq.n	8015e2c <__ssvfiscanf_r+0x1c8>
 8015d94:	d826      	bhi.n	8015de4 <__ssvfiscanf_r+0x180>
 8015d96:	2b6e      	cmp	r3, #110	; 0x6e
 8015d98:	d062      	beq.n	8015e60 <__ssvfiscanf_r+0x1fc>
 8015d9a:	d84c      	bhi.n	8015e36 <__ssvfiscanf_r+0x1d2>
 8015d9c:	2b69      	cmp	r3, #105	; 0x69
 8015d9e:	d1d7      	bne.n	8015d50 <__ssvfiscanf_r+0xec>
 8015da0:	2300      	movs	r3, #0
 8015da2:	9342      	str	r3, [sp, #264]	; 0x108
 8015da4:	2303      	movs	r3, #3
 8015da6:	9347      	str	r3, [sp, #284]	; 0x11c
 8015da8:	6863      	ldr	r3, [r4, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	dd68      	ble.n	8015e80 <__ssvfiscanf_r+0x21c>
 8015dae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015db0:	0659      	lsls	r1, r3, #25
 8015db2:	d407      	bmi.n	8015dc4 <__ssvfiscanf_r+0x160>
 8015db4:	f7ff f96a 	bl	801508c <__locale_ctype_ptr>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	781a      	ldrb	r2, [r3, #0]
 8015dbc:	4410      	add	r0, r2
 8015dbe:	7842      	ldrb	r2, [r0, #1]
 8015dc0:	0712      	lsls	r2, r2, #28
 8015dc2:	d464      	bmi.n	8015e8e <__ssvfiscanf_r+0x22a>
 8015dc4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015dc6:	2b02      	cmp	r3, #2
 8015dc8:	dc73      	bgt.n	8015eb2 <__ssvfiscanf_r+0x24e>
 8015dca:	466b      	mov	r3, sp
 8015dcc:	4622      	mov	r2, r4
 8015dce:	a941      	add	r1, sp, #260	; 0x104
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f000 f897 	bl	8015f04 <_scanf_chars>
 8015dd6:	2801      	cmp	r0, #1
 8015dd8:	f000 8089 	beq.w	8015eee <__ssvfiscanf_r+0x28a>
 8015ddc:	2802      	cmp	r0, #2
 8015dde:	f47f af71 	bne.w	8015cc4 <__ssvfiscanf_r+0x60>
 8015de2:	e01d      	b.n	8015e20 <__ssvfiscanf_r+0x1bc>
 8015de4:	2b75      	cmp	r3, #117	; 0x75
 8015de6:	d0d1      	beq.n	8015d8c <__ssvfiscanf_r+0x128>
 8015de8:	2b78      	cmp	r3, #120	; 0x78
 8015dea:	d0c0      	beq.n	8015d6e <__ssvfiscanf_r+0x10a>
 8015dec:	2b73      	cmp	r3, #115	; 0x73
 8015dee:	d1af      	bne.n	8015d50 <__ssvfiscanf_r+0xec>
 8015df0:	2302      	movs	r3, #2
 8015df2:	e7d8      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015df4:	6863      	ldr	r3, [r4, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	dd0c      	ble.n	8015e14 <__ssvfiscanf_r+0x1b0>
 8015dfa:	6823      	ldr	r3, [r4, #0]
 8015dfc:	781a      	ldrb	r2, [r3, #0]
 8015dfe:	455a      	cmp	r2, fp
 8015e00:	d175      	bne.n	8015eee <__ssvfiscanf_r+0x28a>
 8015e02:	3301      	adds	r3, #1
 8015e04:	6862      	ldr	r2, [r4, #4]
 8015e06:	6023      	str	r3, [r4, #0]
 8015e08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015e0a:	3a01      	subs	r2, #1
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	6062      	str	r2, [r4, #4]
 8015e10:	9345      	str	r3, [sp, #276]	; 0x114
 8015e12:	e757      	b.n	8015cc4 <__ssvfiscanf_r+0x60>
 8015e14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015e16:	4621      	mov	r1, r4
 8015e18:	4630      	mov	r0, r6
 8015e1a:	4798      	blx	r3
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	d0ec      	beq.n	8015dfa <__ssvfiscanf_r+0x196>
 8015e20:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d159      	bne.n	8015eda <__ssvfiscanf_r+0x276>
 8015e26:	f04f 30ff 	mov.w	r0, #4294967295
 8015e2a:	e05c      	b.n	8015ee6 <__ssvfiscanf_r+0x282>
 8015e2c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015e2e:	f042 0220 	orr.w	r2, r2, #32
 8015e32:	9241      	str	r2, [sp, #260]	; 0x104
 8015e34:	e79b      	b.n	8015d6e <__ssvfiscanf_r+0x10a>
 8015e36:	2308      	movs	r3, #8
 8015e38:	9342      	str	r3, [sp, #264]	; 0x108
 8015e3a:	2304      	movs	r3, #4
 8015e3c:	e7b3      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015e3e:	4629      	mov	r1, r5
 8015e40:	4640      	mov	r0, r8
 8015e42:	f000 f9b7 	bl	80161b4 <__sccl>
 8015e46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e4c:	9341      	str	r3, [sp, #260]	; 0x104
 8015e4e:	4605      	mov	r5, r0
 8015e50:	2301      	movs	r3, #1
 8015e52:	e7a8      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015e54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e5a:	9341      	str	r3, [sp, #260]	; 0x104
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	e7a2      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015e60:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015e62:	06c3      	lsls	r3, r0, #27
 8015e64:	f53f af2e 	bmi.w	8015cc4 <__ssvfiscanf_r+0x60>
 8015e68:	9b00      	ldr	r3, [sp, #0]
 8015e6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015e6c:	1d19      	adds	r1, r3, #4
 8015e6e:	9100      	str	r1, [sp, #0]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	07c0      	lsls	r0, r0, #31
 8015e74:	bf4c      	ite	mi
 8015e76:	801a      	strhmi	r2, [r3, #0]
 8015e78:	601a      	strpl	r2, [r3, #0]
 8015e7a:	e723      	b.n	8015cc4 <__ssvfiscanf_r+0x60>
 8015e7c:	2305      	movs	r3, #5
 8015e7e:	e792      	b.n	8015da6 <__ssvfiscanf_r+0x142>
 8015e80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015e82:	4621      	mov	r1, r4
 8015e84:	4630      	mov	r0, r6
 8015e86:	4798      	blx	r3
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d090      	beq.n	8015dae <__ssvfiscanf_r+0x14a>
 8015e8c:	e7c8      	b.n	8015e20 <__ssvfiscanf_r+0x1bc>
 8015e8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015e90:	3201      	adds	r2, #1
 8015e92:	9245      	str	r2, [sp, #276]	; 0x114
 8015e94:	6862      	ldr	r2, [r4, #4]
 8015e96:	3a01      	subs	r2, #1
 8015e98:	2a00      	cmp	r2, #0
 8015e9a:	6062      	str	r2, [r4, #4]
 8015e9c:	dd02      	ble.n	8015ea4 <__ssvfiscanf_r+0x240>
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	6023      	str	r3, [r4, #0]
 8015ea2:	e787      	b.n	8015db4 <__ssvfiscanf_r+0x150>
 8015ea4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015ea6:	4621      	mov	r1, r4
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	4798      	blx	r3
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d081      	beq.n	8015db4 <__ssvfiscanf_r+0x150>
 8015eb0:	e7b6      	b.n	8015e20 <__ssvfiscanf_r+0x1bc>
 8015eb2:	2b04      	cmp	r3, #4
 8015eb4:	dc06      	bgt.n	8015ec4 <__ssvfiscanf_r+0x260>
 8015eb6:	466b      	mov	r3, sp
 8015eb8:	4622      	mov	r2, r4
 8015eba:	a941      	add	r1, sp, #260	; 0x104
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f000 f885 	bl	8015fcc <_scanf_i>
 8015ec2:	e788      	b.n	8015dd6 <__ssvfiscanf_r+0x172>
 8015ec4:	4b0e      	ldr	r3, [pc, #56]	; (8015f00 <__ssvfiscanf_r+0x29c>)
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f43f aefc 	beq.w	8015cc4 <__ssvfiscanf_r+0x60>
 8015ecc:	466b      	mov	r3, sp
 8015ece:	4622      	mov	r2, r4
 8015ed0:	a941      	add	r1, sp, #260	; 0x104
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	f7fc fe34 	bl	8012b40 <_scanf_float>
 8015ed8:	e77d      	b.n	8015dd6 <__ssvfiscanf_r+0x172>
 8015eda:	89a3      	ldrh	r3, [r4, #12]
 8015edc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015ee0:	bf18      	it	ne
 8015ee2:	f04f 30ff 	movne.w	r0, #4294967295
 8015ee6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015ef0:	e7f9      	b.n	8015ee6 <__ssvfiscanf_r+0x282>
 8015ef2:	bf00      	nop
 8015ef4:	08015bb1 	.word	0x08015bb1
 8015ef8:	08015c2b 	.word	0x08015c2b
 8015efc:	0801845a 	.word	0x0801845a
 8015f00:	08012b41 	.word	0x08012b41

08015f04 <_scanf_chars>:
 8015f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f08:	4615      	mov	r5, r2
 8015f0a:	688a      	ldr	r2, [r1, #8]
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	460c      	mov	r4, r1
 8015f10:	b932      	cbnz	r2, 8015f20 <_scanf_chars+0x1c>
 8015f12:	698a      	ldr	r2, [r1, #24]
 8015f14:	2a00      	cmp	r2, #0
 8015f16:	bf14      	ite	ne
 8015f18:	f04f 32ff 	movne.w	r2, #4294967295
 8015f1c:	2201      	moveq	r2, #1
 8015f1e:	608a      	str	r2, [r1, #8]
 8015f20:	6822      	ldr	r2, [r4, #0]
 8015f22:	06d1      	lsls	r1, r2, #27
 8015f24:	bf5f      	itttt	pl
 8015f26:	681a      	ldrpl	r2, [r3, #0]
 8015f28:	1d11      	addpl	r1, r2, #4
 8015f2a:	6019      	strpl	r1, [r3, #0]
 8015f2c:	6817      	ldrpl	r7, [r2, #0]
 8015f2e:	2600      	movs	r6, #0
 8015f30:	69a3      	ldr	r3, [r4, #24]
 8015f32:	b1db      	cbz	r3, 8015f6c <_scanf_chars+0x68>
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	d107      	bne.n	8015f48 <_scanf_chars+0x44>
 8015f38:	682b      	ldr	r3, [r5, #0]
 8015f3a:	6962      	ldr	r2, [r4, #20]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	5cd3      	ldrb	r3, [r2, r3]
 8015f40:	b9a3      	cbnz	r3, 8015f6c <_scanf_chars+0x68>
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	d132      	bne.n	8015fac <_scanf_chars+0xa8>
 8015f46:	e006      	b.n	8015f56 <_scanf_chars+0x52>
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d007      	beq.n	8015f5c <_scanf_chars+0x58>
 8015f4c:	2e00      	cmp	r6, #0
 8015f4e:	d12d      	bne.n	8015fac <_scanf_chars+0xa8>
 8015f50:	69a3      	ldr	r3, [r4, #24]
 8015f52:	2b01      	cmp	r3, #1
 8015f54:	d12a      	bne.n	8015fac <_scanf_chars+0xa8>
 8015f56:	2001      	movs	r0, #1
 8015f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f5c:	f7ff f896 	bl	801508c <__locale_ctype_ptr>
 8015f60:	682b      	ldr	r3, [r5, #0]
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	4418      	add	r0, r3
 8015f66:	7843      	ldrb	r3, [r0, #1]
 8015f68:	071b      	lsls	r3, r3, #28
 8015f6a:	d4ef      	bmi.n	8015f4c <_scanf_chars+0x48>
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	06da      	lsls	r2, r3, #27
 8015f70:	bf5e      	ittt	pl
 8015f72:	682b      	ldrpl	r3, [r5, #0]
 8015f74:	781b      	ldrbpl	r3, [r3, #0]
 8015f76:	703b      	strbpl	r3, [r7, #0]
 8015f78:	682a      	ldr	r2, [r5, #0]
 8015f7a:	686b      	ldr	r3, [r5, #4]
 8015f7c:	f102 0201 	add.w	r2, r2, #1
 8015f80:	602a      	str	r2, [r5, #0]
 8015f82:	68a2      	ldr	r2, [r4, #8]
 8015f84:	f103 33ff 	add.w	r3, r3, #4294967295
 8015f88:	f102 32ff 	add.w	r2, r2, #4294967295
 8015f8c:	606b      	str	r3, [r5, #4]
 8015f8e:	f106 0601 	add.w	r6, r6, #1
 8015f92:	bf58      	it	pl
 8015f94:	3701      	addpl	r7, #1
 8015f96:	60a2      	str	r2, [r4, #8]
 8015f98:	b142      	cbz	r2, 8015fac <_scanf_chars+0xa8>
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	dcc8      	bgt.n	8015f30 <_scanf_chars+0x2c>
 8015f9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015fa2:	4629      	mov	r1, r5
 8015fa4:	4640      	mov	r0, r8
 8015fa6:	4798      	blx	r3
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d0c1      	beq.n	8015f30 <_scanf_chars+0x2c>
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	f013 0310 	ands.w	r3, r3, #16
 8015fb2:	d105      	bne.n	8015fc0 <_scanf_chars+0xbc>
 8015fb4:	68e2      	ldr	r2, [r4, #12]
 8015fb6:	3201      	adds	r2, #1
 8015fb8:	60e2      	str	r2, [r4, #12]
 8015fba:	69a2      	ldr	r2, [r4, #24]
 8015fbc:	b102      	cbz	r2, 8015fc0 <_scanf_chars+0xbc>
 8015fbe:	703b      	strb	r3, [r7, #0]
 8015fc0:	6923      	ldr	r3, [r4, #16]
 8015fc2:	441e      	add	r6, r3
 8015fc4:	6126      	str	r6, [r4, #16]
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	e7c6      	b.n	8015f58 <_scanf_chars+0x54>
	...

08015fcc <_scanf_i>:
 8015fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd0:	469a      	mov	sl, r3
 8015fd2:	4b74      	ldr	r3, [pc, #464]	; (80161a4 <_scanf_i+0x1d8>)
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	4683      	mov	fp, r0
 8015fd8:	4616      	mov	r6, r2
 8015fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015fde:	b087      	sub	sp, #28
 8015fe0:	ab03      	add	r3, sp, #12
 8015fe2:	68a7      	ldr	r7, [r4, #8]
 8015fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015fe8:	4b6f      	ldr	r3, [pc, #444]	; (80161a8 <_scanf_i+0x1dc>)
 8015fea:	69a1      	ldr	r1, [r4, #24]
 8015fec:	4a6f      	ldr	r2, [pc, #444]	; (80161ac <_scanf_i+0x1e0>)
 8015fee:	2903      	cmp	r1, #3
 8015ff0:	bf08      	it	eq
 8015ff2:	461a      	moveq	r2, r3
 8015ff4:	1e7b      	subs	r3, r7, #1
 8015ff6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8015ffa:	bf84      	itt	hi
 8015ffc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016000:	60a3      	strhi	r3, [r4, #8]
 8016002:	6823      	ldr	r3, [r4, #0]
 8016004:	9200      	str	r2, [sp, #0]
 8016006:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801600a:	bf88      	it	hi
 801600c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016010:	f104 091c 	add.w	r9, r4, #28
 8016014:	6023      	str	r3, [r4, #0]
 8016016:	bf8c      	ite	hi
 8016018:	197f      	addhi	r7, r7, r5
 801601a:	2700      	movls	r7, #0
 801601c:	464b      	mov	r3, r9
 801601e:	f04f 0800 	mov.w	r8, #0
 8016022:	9301      	str	r3, [sp, #4]
 8016024:	6831      	ldr	r1, [r6, #0]
 8016026:	ab03      	add	r3, sp, #12
 8016028:	2202      	movs	r2, #2
 801602a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801602e:	7809      	ldrb	r1, [r1, #0]
 8016030:	f7ea f8e6 	bl	8000200 <memchr>
 8016034:	9b01      	ldr	r3, [sp, #4]
 8016036:	b330      	cbz	r0, 8016086 <_scanf_i+0xba>
 8016038:	f1b8 0f01 	cmp.w	r8, #1
 801603c:	d15a      	bne.n	80160f4 <_scanf_i+0x128>
 801603e:	6862      	ldr	r2, [r4, #4]
 8016040:	b92a      	cbnz	r2, 801604e <_scanf_i+0x82>
 8016042:	6822      	ldr	r2, [r4, #0]
 8016044:	2108      	movs	r1, #8
 8016046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801604a:	6061      	str	r1, [r4, #4]
 801604c:	6022      	str	r2, [r4, #0]
 801604e:	6822      	ldr	r2, [r4, #0]
 8016050:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016054:	6022      	str	r2, [r4, #0]
 8016056:	68a2      	ldr	r2, [r4, #8]
 8016058:	1e51      	subs	r1, r2, #1
 801605a:	60a1      	str	r1, [r4, #8]
 801605c:	b19a      	cbz	r2, 8016086 <_scanf_i+0xba>
 801605e:	6832      	ldr	r2, [r6, #0]
 8016060:	1c51      	adds	r1, r2, #1
 8016062:	6031      	str	r1, [r6, #0]
 8016064:	7812      	ldrb	r2, [r2, #0]
 8016066:	701a      	strb	r2, [r3, #0]
 8016068:	1c5d      	adds	r5, r3, #1
 801606a:	6873      	ldr	r3, [r6, #4]
 801606c:	3b01      	subs	r3, #1
 801606e:	2b00      	cmp	r3, #0
 8016070:	6073      	str	r3, [r6, #4]
 8016072:	dc07      	bgt.n	8016084 <_scanf_i+0xb8>
 8016074:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016078:	4631      	mov	r1, r6
 801607a:	4658      	mov	r0, fp
 801607c:	4798      	blx	r3
 801607e:	2800      	cmp	r0, #0
 8016080:	f040 8086 	bne.w	8016190 <_scanf_i+0x1c4>
 8016084:	462b      	mov	r3, r5
 8016086:	f108 0801 	add.w	r8, r8, #1
 801608a:	f1b8 0f03 	cmp.w	r8, #3
 801608e:	d1c8      	bne.n	8016022 <_scanf_i+0x56>
 8016090:	6862      	ldr	r2, [r4, #4]
 8016092:	b90a      	cbnz	r2, 8016098 <_scanf_i+0xcc>
 8016094:	220a      	movs	r2, #10
 8016096:	6062      	str	r2, [r4, #4]
 8016098:	6862      	ldr	r2, [r4, #4]
 801609a:	4945      	ldr	r1, [pc, #276]	; (80161b0 <_scanf_i+0x1e4>)
 801609c:	6960      	ldr	r0, [r4, #20]
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	1a89      	subs	r1, r1, r2
 80160a2:	f000 f887 	bl	80161b4 <__sccl>
 80160a6:	9b01      	ldr	r3, [sp, #4]
 80160a8:	f04f 0800 	mov.w	r8, #0
 80160ac:	461d      	mov	r5, r3
 80160ae:	68a3      	ldr	r3, [r4, #8]
 80160b0:	6822      	ldr	r2, [r4, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d03a      	beq.n	801612c <_scanf_i+0x160>
 80160b6:	6831      	ldr	r1, [r6, #0]
 80160b8:	6960      	ldr	r0, [r4, #20]
 80160ba:	f891 c000 	ldrb.w	ip, [r1]
 80160be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d032      	beq.n	801612c <_scanf_i+0x160>
 80160c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80160ca:	d121      	bne.n	8016110 <_scanf_i+0x144>
 80160cc:	0510      	lsls	r0, r2, #20
 80160ce:	d51f      	bpl.n	8016110 <_scanf_i+0x144>
 80160d0:	f108 0801 	add.w	r8, r8, #1
 80160d4:	b117      	cbz	r7, 80160dc <_scanf_i+0x110>
 80160d6:	3301      	adds	r3, #1
 80160d8:	3f01      	subs	r7, #1
 80160da:	60a3      	str	r3, [r4, #8]
 80160dc:	6873      	ldr	r3, [r6, #4]
 80160de:	3b01      	subs	r3, #1
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	6073      	str	r3, [r6, #4]
 80160e4:	dd1b      	ble.n	801611e <_scanf_i+0x152>
 80160e6:	6833      	ldr	r3, [r6, #0]
 80160e8:	3301      	adds	r3, #1
 80160ea:	6033      	str	r3, [r6, #0]
 80160ec:	68a3      	ldr	r3, [r4, #8]
 80160ee:	3b01      	subs	r3, #1
 80160f0:	60a3      	str	r3, [r4, #8]
 80160f2:	e7dc      	b.n	80160ae <_scanf_i+0xe2>
 80160f4:	f1b8 0f02 	cmp.w	r8, #2
 80160f8:	d1ad      	bne.n	8016056 <_scanf_i+0x8a>
 80160fa:	6822      	ldr	r2, [r4, #0]
 80160fc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016100:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016104:	d1bf      	bne.n	8016086 <_scanf_i+0xba>
 8016106:	2110      	movs	r1, #16
 8016108:	6061      	str	r1, [r4, #4]
 801610a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801610e:	e7a1      	b.n	8016054 <_scanf_i+0x88>
 8016110:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016114:	6022      	str	r2, [r4, #0]
 8016116:	780b      	ldrb	r3, [r1, #0]
 8016118:	702b      	strb	r3, [r5, #0]
 801611a:	3501      	adds	r5, #1
 801611c:	e7de      	b.n	80160dc <_scanf_i+0x110>
 801611e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016122:	4631      	mov	r1, r6
 8016124:	4658      	mov	r0, fp
 8016126:	4798      	blx	r3
 8016128:	2800      	cmp	r0, #0
 801612a:	d0df      	beq.n	80160ec <_scanf_i+0x120>
 801612c:	6823      	ldr	r3, [r4, #0]
 801612e:	05d9      	lsls	r1, r3, #23
 8016130:	d50c      	bpl.n	801614c <_scanf_i+0x180>
 8016132:	454d      	cmp	r5, r9
 8016134:	d908      	bls.n	8016148 <_scanf_i+0x17c>
 8016136:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801613a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801613e:	4632      	mov	r2, r6
 8016140:	4658      	mov	r0, fp
 8016142:	4798      	blx	r3
 8016144:	1e6f      	subs	r7, r5, #1
 8016146:	463d      	mov	r5, r7
 8016148:	454d      	cmp	r5, r9
 801614a:	d029      	beq.n	80161a0 <_scanf_i+0x1d4>
 801614c:	6822      	ldr	r2, [r4, #0]
 801614e:	f012 0210 	ands.w	r2, r2, #16
 8016152:	d113      	bne.n	801617c <_scanf_i+0x1b0>
 8016154:	702a      	strb	r2, [r5, #0]
 8016156:	6863      	ldr	r3, [r4, #4]
 8016158:	9e00      	ldr	r6, [sp, #0]
 801615a:	4649      	mov	r1, r9
 801615c:	4658      	mov	r0, fp
 801615e:	47b0      	blx	r6
 8016160:	f8da 3000 	ldr.w	r3, [sl]
 8016164:	6821      	ldr	r1, [r4, #0]
 8016166:	1d1a      	adds	r2, r3, #4
 8016168:	f8ca 2000 	str.w	r2, [sl]
 801616c:	f011 0f20 	tst.w	r1, #32
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	d010      	beq.n	8016196 <_scanf_i+0x1ca>
 8016174:	6018      	str	r0, [r3, #0]
 8016176:	68e3      	ldr	r3, [r4, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	60e3      	str	r3, [r4, #12]
 801617c:	eba5 0509 	sub.w	r5, r5, r9
 8016180:	44a8      	add	r8, r5
 8016182:	6925      	ldr	r5, [r4, #16]
 8016184:	4445      	add	r5, r8
 8016186:	6125      	str	r5, [r4, #16]
 8016188:	2000      	movs	r0, #0
 801618a:	b007      	add	sp, #28
 801618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016190:	f04f 0800 	mov.w	r8, #0
 8016194:	e7ca      	b.n	801612c <_scanf_i+0x160>
 8016196:	07ca      	lsls	r2, r1, #31
 8016198:	bf4c      	ite	mi
 801619a:	8018      	strhmi	r0, [r3, #0]
 801619c:	6018      	strpl	r0, [r3, #0]
 801619e:	e7ea      	b.n	8016176 <_scanf_i+0x1aa>
 80161a0:	2001      	movs	r0, #1
 80161a2:	e7f2      	b.n	801618a <_scanf_i+0x1be>
 80161a4:	08018288 	.word	0x08018288
 80161a8:	08013d89 	.word	0x08013d89
 80161ac:	08016331 	.word	0x08016331
 80161b0:	08018475 	.word	0x08018475

080161b4 <__sccl>:
 80161b4:	b570      	push	{r4, r5, r6, lr}
 80161b6:	780b      	ldrb	r3, [r1, #0]
 80161b8:	2b5e      	cmp	r3, #94	; 0x5e
 80161ba:	bf13      	iteet	ne
 80161bc:	1c4a      	addne	r2, r1, #1
 80161be:	1c8a      	addeq	r2, r1, #2
 80161c0:	784b      	ldrbeq	r3, [r1, #1]
 80161c2:	2100      	movne	r1, #0
 80161c4:	bf08      	it	eq
 80161c6:	2101      	moveq	r1, #1
 80161c8:	1e44      	subs	r4, r0, #1
 80161ca:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80161ce:	f804 1f01 	strb.w	r1, [r4, #1]!
 80161d2:	42ac      	cmp	r4, r5
 80161d4:	d1fb      	bne.n	80161ce <__sccl+0x1a>
 80161d6:	b913      	cbnz	r3, 80161de <__sccl+0x2a>
 80161d8:	3a01      	subs	r2, #1
 80161da:	4610      	mov	r0, r2
 80161dc:	bd70      	pop	{r4, r5, r6, pc}
 80161de:	f081 0401 	eor.w	r4, r1, #1
 80161e2:	54c4      	strb	r4, [r0, r3]
 80161e4:	1c51      	adds	r1, r2, #1
 80161e6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80161ea:	2d2d      	cmp	r5, #45	; 0x2d
 80161ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80161f0:	460a      	mov	r2, r1
 80161f2:	d006      	beq.n	8016202 <__sccl+0x4e>
 80161f4:	2d5d      	cmp	r5, #93	; 0x5d
 80161f6:	d0f0      	beq.n	80161da <__sccl+0x26>
 80161f8:	b90d      	cbnz	r5, 80161fe <__sccl+0x4a>
 80161fa:	4632      	mov	r2, r6
 80161fc:	e7ed      	b.n	80161da <__sccl+0x26>
 80161fe:	462b      	mov	r3, r5
 8016200:	e7ef      	b.n	80161e2 <__sccl+0x2e>
 8016202:	780e      	ldrb	r6, [r1, #0]
 8016204:	2e5d      	cmp	r6, #93	; 0x5d
 8016206:	d0fa      	beq.n	80161fe <__sccl+0x4a>
 8016208:	42b3      	cmp	r3, r6
 801620a:	dcf8      	bgt.n	80161fe <__sccl+0x4a>
 801620c:	3301      	adds	r3, #1
 801620e:	429e      	cmp	r6, r3
 8016210:	54c4      	strb	r4, [r0, r3]
 8016212:	dcfb      	bgt.n	801620c <__sccl+0x58>
 8016214:	3102      	adds	r1, #2
 8016216:	e7e6      	b.n	80161e6 <__sccl+0x32>

08016218 <strncmp>:
 8016218:	b510      	push	{r4, lr}
 801621a:	b16a      	cbz	r2, 8016238 <strncmp+0x20>
 801621c:	3901      	subs	r1, #1
 801621e:	1884      	adds	r4, r0, r2
 8016220:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016224:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016228:	4293      	cmp	r3, r2
 801622a:	d103      	bne.n	8016234 <strncmp+0x1c>
 801622c:	42a0      	cmp	r0, r4
 801622e:	d001      	beq.n	8016234 <strncmp+0x1c>
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1f5      	bne.n	8016220 <strncmp+0x8>
 8016234:	1a98      	subs	r0, r3, r2
 8016236:	bd10      	pop	{r4, pc}
 8016238:	4610      	mov	r0, r2
 801623a:	e7fc      	b.n	8016236 <strncmp+0x1e>

0801623c <_strtoul_l.isra.0>:
 801623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016240:	4680      	mov	r8, r0
 8016242:	4689      	mov	r9, r1
 8016244:	4692      	mov	sl, r2
 8016246:	461e      	mov	r6, r3
 8016248:	460f      	mov	r7, r1
 801624a:	463d      	mov	r5, r7
 801624c:	9808      	ldr	r0, [sp, #32]
 801624e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016252:	f7fe ff17 	bl	8015084 <__locale_ctype_ptr_l>
 8016256:	4420      	add	r0, r4
 8016258:	7843      	ldrb	r3, [r0, #1]
 801625a:	f013 0308 	ands.w	r3, r3, #8
 801625e:	d130      	bne.n	80162c2 <_strtoul_l.isra.0+0x86>
 8016260:	2c2d      	cmp	r4, #45	; 0x2d
 8016262:	d130      	bne.n	80162c6 <_strtoul_l.isra.0+0x8a>
 8016264:	787c      	ldrb	r4, [r7, #1]
 8016266:	1cbd      	adds	r5, r7, #2
 8016268:	2101      	movs	r1, #1
 801626a:	2e00      	cmp	r6, #0
 801626c:	d05c      	beq.n	8016328 <_strtoul_l.isra.0+0xec>
 801626e:	2e10      	cmp	r6, #16
 8016270:	d109      	bne.n	8016286 <_strtoul_l.isra.0+0x4a>
 8016272:	2c30      	cmp	r4, #48	; 0x30
 8016274:	d107      	bne.n	8016286 <_strtoul_l.isra.0+0x4a>
 8016276:	782b      	ldrb	r3, [r5, #0]
 8016278:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801627c:	2b58      	cmp	r3, #88	; 0x58
 801627e:	d14e      	bne.n	801631e <_strtoul_l.isra.0+0xe2>
 8016280:	786c      	ldrb	r4, [r5, #1]
 8016282:	2610      	movs	r6, #16
 8016284:	3502      	adds	r5, #2
 8016286:	f04f 32ff 	mov.w	r2, #4294967295
 801628a:	2300      	movs	r3, #0
 801628c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016290:	fb06 fc02 	mul.w	ip, r6, r2
 8016294:	ea6f 0c0c 	mvn.w	ip, ip
 8016298:	4618      	mov	r0, r3
 801629a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801629e:	2f09      	cmp	r7, #9
 80162a0:	d817      	bhi.n	80162d2 <_strtoul_l.isra.0+0x96>
 80162a2:	463c      	mov	r4, r7
 80162a4:	42a6      	cmp	r6, r4
 80162a6:	dd23      	ble.n	80162f0 <_strtoul_l.isra.0+0xb4>
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	db1e      	blt.n	80162ea <_strtoul_l.isra.0+0xae>
 80162ac:	4282      	cmp	r2, r0
 80162ae:	d31c      	bcc.n	80162ea <_strtoul_l.isra.0+0xae>
 80162b0:	d101      	bne.n	80162b6 <_strtoul_l.isra.0+0x7a>
 80162b2:	45a4      	cmp	ip, r4
 80162b4:	db19      	blt.n	80162ea <_strtoul_l.isra.0+0xae>
 80162b6:	fb00 4006 	mla	r0, r0, r6, r4
 80162ba:	2301      	movs	r3, #1
 80162bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162c0:	e7eb      	b.n	801629a <_strtoul_l.isra.0+0x5e>
 80162c2:	462f      	mov	r7, r5
 80162c4:	e7c1      	b.n	801624a <_strtoul_l.isra.0+0xe>
 80162c6:	2c2b      	cmp	r4, #43	; 0x2b
 80162c8:	bf04      	itt	eq
 80162ca:	1cbd      	addeq	r5, r7, #2
 80162cc:	787c      	ldrbeq	r4, [r7, #1]
 80162ce:	4619      	mov	r1, r3
 80162d0:	e7cb      	b.n	801626a <_strtoul_l.isra.0+0x2e>
 80162d2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80162d6:	2f19      	cmp	r7, #25
 80162d8:	d801      	bhi.n	80162de <_strtoul_l.isra.0+0xa2>
 80162da:	3c37      	subs	r4, #55	; 0x37
 80162dc:	e7e2      	b.n	80162a4 <_strtoul_l.isra.0+0x68>
 80162de:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80162e2:	2f19      	cmp	r7, #25
 80162e4:	d804      	bhi.n	80162f0 <_strtoul_l.isra.0+0xb4>
 80162e6:	3c57      	subs	r4, #87	; 0x57
 80162e8:	e7dc      	b.n	80162a4 <_strtoul_l.isra.0+0x68>
 80162ea:	f04f 33ff 	mov.w	r3, #4294967295
 80162ee:	e7e5      	b.n	80162bc <_strtoul_l.isra.0+0x80>
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	da09      	bge.n	8016308 <_strtoul_l.isra.0+0xcc>
 80162f4:	2322      	movs	r3, #34	; 0x22
 80162f6:	f8c8 3000 	str.w	r3, [r8]
 80162fa:	f04f 30ff 	mov.w	r0, #4294967295
 80162fe:	f1ba 0f00 	cmp.w	sl, #0
 8016302:	d107      	bne.n	8016314 <_strtoul_l.isra.0+0xd8>
 8016304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016308:	b101      	cbz	r1, 801630c <_strtoul_l.isra.0+0xd0>
 801630a:	4240      	negs	r0, r0
 801630c:	f1ba 0f00 	cmp.w	sl, #0
 8016310:	d0f8      	beq.n	8016304 <_strtoul_l.isra.0+0xc8>
 8016312:	b10b      	cbz	r3, 8016318 <_strtoul_l.isra.0+0xdc>
 8016314:	f105 39ff 	add.w	r9, r5, #4294967295
 8016318:	f8ca 9000 	str.w	r9, [sl]
 801631c:	e7f2      	b.n	8016304 <_strtoul_l.isra.0+0xc8>
 801631e:	2430      	movs	r4, #48	; 0x30
 8016320:	2e00      	cmp	r6, #0
 8016322:	d1b0      	bne.n	8016286 <_strtoul_l.isra.0+0x4a>
 8016324:	2608      	movs	r6, #8
 8016326:	e7ae      	b.n	8016286 <_strtoul_l.isra.0+0x4a>
 8016328:	2c30      	cmp	r4, #48	; 0x30
 801632a:	d0a4      	beq.n	8016276 <_strtoul_l.isra.0+0x3a>
 801632c:	260a      	movs	r6, #10
 801632e:	e7aa      	b.n	8016286 <_strtoul_l.isra.0+0x4a>

08016330 <_strtoul_r>:
 8016330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016332:	4c06      	ldr	r4, [pc, #24]	; (801634c <_strtoul_r+0x1c>)
 8016334:	4d06      	ldr	r5, [pc, #24]	; (8016350 <_strtoul_r+0x20>)
 8016336:	6824      	ldr	r4, [r4, #0]
 8016338:	6a24      	ldr	r4, [r4, #32]
 801633a:	2c00      	cmp	r4, #0
 801633c:	bf08      	it	eq
 801633e:	462c      	moveq	r4, r5
 8016340:	9400      	str	r4, [sp, #0]
 8016342:	f7ff ff7b 	bl	801623c <_strtoul_l.isra.0>
 8016346:	b003      	add	sp, #12
 8016348:	bd30      	pop	{r4, r5, pc}
 801634a:	bf00      	nop
 801634c:	20000e34 	.word	0x20000e34
 8016350:	20000e98 	.word	0x20000e98

08016354 <__submore>:
 8016354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016358:	460c      	mov	r4, r1
 801635a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801635c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016360:	4299      	cmp	r1, r3
 8016362:	d11d      	bne.n	80163a0 <__submore+0x4c>
 8016364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016368:	f7fb ff34 	bl	80121d4 <_malloc_r>
 801636c:	b918      	cbnz	r0, 8016376 <__submore+0x22>
 801636e:	f04f 30ff 	mov.w	r0, #4294967295
 8016372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801637a:	63a3      	str	r3, [r4, #56]	; 0x38
 801637c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016380:	6360      	str	r0, [r4, #52]	; 0x34
 8016382:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016386:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801638a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801638e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016392:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016396:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801639a:	6020      	str	r0, [r4, #0]
 801639c:	2000      	movs	r0, #0
 801639e:	e7e8      	b.n	8016372 <__submore+0x1e>
 80163a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80163a2:	0077      	lsls	r7, r6, #1
 80163a4:	463a      	mov	r2, r7
 80163a6:	f000 f81c 	bl	80163e2 <_realloc_r>
 80163aa:	4605      	mov	r5, r0
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d0de      	beq.n	801636e <__submore+0x1a>
 80163b0:	eb00 0806 	add.w	r8, r0, r6
 80163b4:	4601      	mov	r1, r0
 80163b6:	4632      	mov	r2, r6
 80163b8:	4640      	mov	r0, r8
 80163ba:	f7fb fe91 	bl	80120e0 <memcpy>
 80163be:	f8c4 8000 	str.w	r8, [r4]
 80163c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80163c6:	e7e9      	b.n	801639c <__submore+0x48>

080163c8 <__ascii_wctomb>:
 80163c8:	b149      	cbz	r1, 80163de <__ascii_wctomb+0x16>
 80163ca:	2aff      	cmp	r2, #255	; 0xff
 80163cc:	bf85      	ittet	hi
 80163ce:	238a      	movhi	r3, #138	; 0x8a
 80163d0:	6003      	strhi	r3, [r0, #0]
 80163d2:	700a      	strbls	r2, [r1, #0]
 80163d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80163d8:	bf98      	it	ls
 80163da:	2001      	movls	r0, #1
 80163dc:	4770      	bx	lr
 80163de:	4608      	mov	r0, r1
 80163e0:	4770      	bx	lr

080163e2 <_realloc_r>:
 80163e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163e4:	4607      	mov	r7, r0
 80163e6:	4614      	mov	r4, r2
 80163e8:	460e      	mov	r6, r1
 80163ea:	b921      	cbnz	r1, 80163f6 <_realloc_r+0x14>
 80163ec:	4611      	mov	r1, r2
 80163ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163f2:	f7fb beef 	b.w	80121d4 <_malloc_r>
 80163f6:	b922      	cbnz	r2, 8016402 <_realloc_r+0x20>
 80163f8:	f7fb fe9e 	bl	8012138 <_free_r>
 80163fc:	4625      	mov	r5, r4
 80163fe:	4628      	mov	r0, r5
 8016400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016402:	f000 f814 	bl	801642e <_malloc_usable_size_r>
 8016406:	42a0      	cmp	r0, r4
 8016408:	d20f      	bcs.n	801642a <_realloc_r+0x48>
 801640a:	4621      	mov	r1, r4
 801640c:	4638      	mov	r0, r7
 801640e:	f7fb fee1 	bl	80121d4 <_malloc_r>
 8016412:	4605      	mov	r5, r0
 8016414:	2800      	cmp	r0, #0
 8016416:	d0f2      	beq.n	80163fe <_realloc_r+0x1c>
 8016418:	4631      	mov	r1, r6
 801641a:	4622      	mov	r2, r4
 801641c:	f7fb fe60 	bl	80120e0 <memcpy>
 8016420:	4631      	mov	r1, r6
 8016422:	4638      	mov	r0, r7
 8016424:	f7fb fe88 	bl	8012138 <_free_r>
 8016428:	e7e9      	b.n	80163fe <_realloc_r+0x1c>
 801642a:	4635      	mov	r5, r6
 801642c:	e7e7      	b.n	80163fe <_realloc_r+0x1c>

0801642e <_malloc_usable_size_r>:
 801642e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016432:	1f18      	subs	r0, r3, #4
 8016434:	2b00      	cmp	r3, #0
 8016436:	bfbc      	itt	lt
 8016438:	580b      	ldrlt	r3, [r1, r0]
 801643a:	18c0      	addlt	r0, r0, r3
 801643c:	4770      	bx	lr
	...

08016440 <ceil>:
 8016440:	ec51 0b10 	vmov	r0, r1, d0
 8016444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016448:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801644c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016450:	2e13      	cmp	r6, #19
 8016452:	460c      	mov	r4, r1
 8016454:	ee10 5a10 	vmov	r5, s0
 8016458:	4680      	mov	r8, r0
 801645a:	dc30      	bgt.n	80164be <ceil+0x7e>
 801645c:	2e00      	cmp	r6, #0
 801645e:	da12      	bge.n	8016486 <ceil+0x46>
 8016460:	a333      	add	r3, pc, #204	; (adr r3, 8016530 <ceil+0xf0>)
 8016462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016466:	f7e9 ff21 	bl	80002ac <__adddf3>
 801646a:	2200      	movs	r2, #0
 801646c:	2300      	movs	r3, #0
 801646e:	f7ea fb63 	bl	8000b38 <__aeabi_dcmpgt>
 8016472:	b128      	cbz	r0, 8016480 <ceil+0x40>
 8016474:	2c00      	cmp	r4, #0
 8016476:	db55      	blt.n	8016524 <ceil+0xe4>
 8016478:	432c      	orrs	r4, r5
 801647a:	d057      	beq.n	801652c <ceil+0xec>
 801647c:	4c2e      	ldr	r4, [pc, #184]	; (8016538 <ceil+0xf8>)
 801647e:	2500      	movs	r5, #0
 8016480:	4621      	mov	r1, r4
 8016482:	4628      	mov	r0, r5
 8016484:	e025      	b.n	80164d2 <ceil+0x92>
 8016486:	4f2d      	ldr	r7, [pc, #180]	; (801653c <ceil+0xfc>)
 8016488:	4137      	asrs	r7, r6
 801648a:	ea01 0307 	and.w	r3, r1, r7
 801648e:	4303      	orrs	r3, r0
 8016490:	d01f      	beq.n	80164d2 <ceil+0x92>
 8016492:	a327      	add	r3, pc, #156	; (adr r3, 8016530 <ceil+0xf0>)
 8016494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016498:	f7e9 ff08 	bl	80002ac <__adddf3>
 801649c:	2200      	movs	r2, #0
 801649e:	2300      	movs	r3, #0
 80164a0:	f7ea fb4a 	bl	8000b38 <__aeabi_dcmpgt>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	d0eb      	beq.n	8016480 <ceil+0x40>
 80164a8:	2c00      	cmp	r4, #0
 80164aa:	bfc2      	ittt	gt
 80164ac:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80164b0:	fa43 f606 	asrgt.w	r6, r3, r6
 80164b4:	19a4      	addgt	r4, r4, r6
 80164b6:	ea24 0407 	bic.w	r4, r4, r7
 80164ba:	2500      	movs	r5, #0
 80164bc:	e7e0      	b.n	8016480 <ceil+0x40>
 80164be:	2e33      	cmp	r6, #51	; 0x33
 80164c0:	dd0b      	ble.n	80164da <ceil+0x9a>
 80164c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80164c6:	d104      	bne.n	80164d2 <ceil+0x92>
 80164c8:	ee10 2a10 	vmov	r2, s0
 80164cc:	460b      	mov	r3, r1
 80164ce:	f7e9 feed 	bl	80002ac <__adddf3>
 80164d2:	ec41 0b10 	vmov	d0, r0, r1
 80164d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80164de:	f04f 33ff 	mov.w	r3, #4294967295
 80164e2:	fa23 f707 	lsr.w	r7, r3, r7
 80164e6:	4207      	tst	r7, r0
 80164e8:	d0f3      	beq.n	80164d2 <ceil+0x92>
 80164ea:	a311      	add	r3, pc, #68	; (adr r3, 8016530 <ceil+0xf0>)
 80164ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f0:	f7e9 fedc 	bl	80002ac <__adddf3>
 80164f4:	2200      	movs	r2, #0
 80164f6:	2300      	movs	r3, #0
 80164f8:	f7ea fb1e 	bl	8000b38 <__aeabi_dcmpgt>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d0bf      	beq.n	8016480 <ceil+0x40>
 8016500:	2c00      	cmp	r4, #0
 8016502:	dd02      	ble.n	801650a <ceil+0xca>
 8016504:	2e14      	cmp	r6, #20
 8016506:	d103      	bne.n	8016510 <ceil+0xd0>
 8016508:	3401      	adds	r4, #1
 801650a:	ea25 0507 	bic.w	r5, r5, r7
 801650e:	e7b7      	b.n	8016480 <ceil+0x40>
 8016510:	2301      	movs	r3, #1
 8016512:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016516:	fa03 f606 	lsl.w	r6, r3, r6
 801651a:	4435      	add	r5, r6
 801651c:	4545      	cmp	r5, r8
 801651e:	bf38      	it	cc
 8016520:	18e4      	addcc	r4, r4, r3
 8016522:	e7f2      	b.n	801650a <ceil+0xca>
 8016524:	2500      	movs	r5, #0
 8016526:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801652a:	e7a9      	b.n	8016480 <ceil+0x40>
 801652c:	4625      	mov	r5, r4
 801652e:	e7a7      	b.n	8016480 <ceil+0x40>
 8016530:	8800759c 	.word	0x8800759c
 8016534:	7e37e43c 	.word	0x7e37e43c
 8016538:	3ff00000 	.word	0x3ff00000
 801653c:	000fffff 	.word	0x000fffff

08016540 <cos>:
 8016540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016542:	ec51 0b10 	vmov	r0, r1, d0
 8016546:	4a1e      	ldr	r2, [pc, #120]	; (80165c0 <cos+0x80>)
 8016548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801654c:	4293      	cmp	r3, r2
 801654e:	dc06      	bgt.n	801655e <cos+0x1e>
 8016550:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80165b8 <cos+0x78>
 8016554:	f000 fca0 	bl	8016e98 <__kernel_cos>
 8016558:	ec51 0b10 	vmov	r0, r1, d0
 801655c:	e007      	b.n	801656e <cos+0x2e>
 801655e:	4a19      	ldr	r2, [pc, #100]	; (80165c4 <cos+0x84>)
 8016560:	4293      	cmp	r3, r2
 8016562:	dd09      	ble.n	8016578 <cos+0x38>
 8016564:	ee10 2a10 	vmov	r2, s0
 8016568:	460b      	mov	r3, r1
 801656a:	f7e9 fe9d 	bl	80002a8 <__aeabi_dsub>
 801656e:	ec41 0b10 	vmov	d0, r0, r1
 8016572:	b005      	add	sp, #20
 8016574:	f85d fb04 	ldr.w	pc, [sp], #4
 8016578:	4668      	mov	r0, sp
 801657a:	f000 f9e9 	bl	8016950 <__ieee754_rem_pio2>
 801657e:	f000 0003 	and.w	r0, r0, #3
 8016582:	2801      	cmp	r0, #1
 8016584:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016588:	ed9d 0b00 	vldr	d0, [sp]
 801658c:	d007      	beq.n	801659e <cos+0x5e>
 801658e:	2802      	cmp	r0, #2
 8016590:	d00e      	beq.n	80165b0 <cos+0x70>
 8016592:	2800      	cmp	r0, #0
 8016594:	d0de      	beq.n	8016554 <cos+0x14>
 8016596:	2001      	movs	r0, #1
 8016598:	f001 f886 	bl	80176a8 <__kernel_sin>
 801659c:	e7dc      	b.n	8016558 <cos+0x18>
 801659e:	f001 f883 	bl	80176a8 <__kernel_sin>
 80165a2:	ec53 2b10 	vmov	r2, r3, d0
 80165a6:	ee10 0a10 	vmov	r0, s0
 80165aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80165ae:	e7de      	b.n	801656e <cos+0x2e>
 80165b0:	f000 fc72 	bl	8016e98 <__kernel_cos>
 80165b4:	e7f5      	b.n	80165a2 <cos+0x62>
 80165b6:	bf00      	nop
	...
 80165c0:	3fe921fb 	.word	0x3fe921fb
 80165c4:	7fefffff 	.word	0x7fefffff

080165c8 <sin>:
 80165c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165ca:	ec51 0b10 	vmov	r0, r1, d0
 80165ce:	4a20      	ldr	r2, [pc, #128]	; (8016650 <sin+0x88>)
 80165d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80165d4:	4293      	cmp	r3, r2
 80165d6:	dc07      	bgt.n	80165e8 <sin+0x20>
 80165d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016648 <sin+0x80>
 80165dc:	2000      	movs	r0, #0
 80165de:	f001 f863 	bl	80176a8 <__kernel_sin>
 80165e2:	ec51 0b10 	vmov	r0, r1, d0
 80165e6:	e007      	b.n	80165f8 <sin+0x30>
 80165e8:	4a1a      	ldr	r2, [pc, #104]	; (8016654 <sin+0x8c>)
 80165ea:	4293      	cmp	r3, r2
 80165ec:	dd09      	ble.n	8016602 <sin+0x3a>
 80165ee:	ee10 2a10 	vmov	r2, s0
 80165f2:	460b      	mov	r3, r1
 80165f4:	f7e9 fe58 	bl	80002a8 <__aeabi_dsub>
 80165f8:	ec41 0b10 	vmov	d0, r0, r1
 80165fc:	b005      	add	sp, #20
 80165fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8016602:	4668      	mov	r0, sp
 8016604:	f000 f9a4 	bl	8016950 <__ieee754_rem_pio2>
 8016608:	f000 0003 	and.w	r0, r0, #3
 801660c:	2801      	cmp	r0, #1
 801660e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016612:	ed9d 0b00 	vldr	d0, [sp]
 8016616:	d004      	beq.n	8016622 <sin+0x5a>
 8016618:	2802      	cmp	r0, #2
 801661a:	d005      	beq.n	8016628 <sin+0x60>
 801661c:	b970      	cbnz	r0, 801663c <sin+0x74>
 801661e:	2001      	movs	r0, #1
 8016620:	e7dd      	b.n	80165de <sin+0x16>
 8016622:	f000 fc39 	bl	8016e98 <__kernel_cos>
 8016626:	e7dc      	b.n	80165e2 <sin+0x1a>
 8016628:	2001      	movs	r0, #1
 801662a:	f001 f83d 	bl	80176a8 <__kernel_sin>
 801662e:	ec53 2b10 	vmov	r2, r3, d0
 8016632:	ee10 0a10 	vmov	r0, s0
 8016636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801663a:	e7dd      	b.n	80165f8 <sin+0x30>
 801663c:	f000 fc2c 	bl	8016e98 <__kernel_cos>
 8016640:	e7f5      	b.n	801662e <sin+0x66>
 8016642:	bf00      	nop
 8016644:	f3af 8000 	nop.w
	...
 8016650:	3fe921fb 	.word	0x3fe921fb
 8016654:	7fefffff 	.word	0x7fefffff

08016658 <ceilf>:
 8016658:	ee10 3a10 	vmov	r3, s0
 801665c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016660:	0dca      	lsrs	r2, r1, #23
 8016662:	3a7f      	subs	r2, #127	; 0x7f
 8016664:	2a16      	cmp	r2, #22
 8016666:	dc2a      	bgt.n	80166be <ceilf+0x66>
 8016668:	2a00      	cmp	r2, #0
 801666a:	da11      	bge.n	8016690 <ceilf+0x38>
 801666c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80166d0 <ceilf+0x78>
 8016670:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016674:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801667c:	dd05      	ble.n	801668a <ceilf+0x32>
 801667e:	2b00      	cmp	r3, #0
 8016680:	db23      	blt.n	80166ca <ceilf+0x72>
 8016682:	2900      	cmp	r1, #0
 8016684:	bf18      	it	ne
 8016686:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801668a:	ee00 3a10 	vmov	s0, r3
 801668e:	4770      	bx	lr
 8016690:	4910      	ldr	r1, [pc, #64]	; (80166d4 <ceilf+0x7c>)
 8016692:	4111      	asrs	r1, r2
 8016694:	420b      	tst	r3, r1
 8016696:	d0fa      	beq.n	801668e <ceilf+0x36>
 8016698:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80166d0 <ceilf+0x78>
 801669c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80166a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80166a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a8:	ddef      	ble.n	801668a <ceilf+0x32>
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	bfc2      	ittt	gt
 80166ae:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80166b2:	fa40 f202 	asrgt.w	r2, r0, r2
 80166b6:	189b      	addgt	r3, r3, r2
 80166b8:	ea23 0301 	bic.w	r3, r3, r1
 80166bc:	e7e5      	b.n	801668a <ceilf+0x32>
 80166be:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80166c2:	d3e4      	bcc.n	801668e <ceilf+0x36>
 80166c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80166c8:	4770      	bx	lr
 80166ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80166ce:	e7dc      	b.n	801668a <ceilf+0x32>
 80166d0:	7149f2ca 	.word	0x7149f2ca
 80166d4:	007fffff 	.word	0x007fffff

080166d8 <atan2>:
 80166d8:	f000 b85a 	b.w	8016790 <__ieee754_atan2>

080166dc <sqrt>:
 80166dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166e0:	ed2d 8b02 	vpush	{d8}
 80166e4:	b08b      	sub	sp, #44	; 0x2c
 80166e6:	ec55 4b10 	vmov	r4, r5, d0
 80166ea:	f000 fb23 	bl	8016d34 <__ieee754_sqrt>
 80166ee:	4b26      	ldr	r3, [pc, #152]	; (8016788 <sqrt+0xac>)
 80166f0:	eeb0 8a40 	vmov.f32	s16, s0
 80166f4:	eef0 8a60 	vmov.f32	s17, s1
 80166f8:	f993 6000 	ldrsb.w	r6, [r3]
 80166fc:	1c73      	adds	r3, r6, #1
 80166fe:	d02a      	beq.n	8016756 <sqrt+0x7a>
 8016700:	4622      	mov	r2, r4
 8016702:	462b      	mov	r3, r5
 8016704:	4620      	mov	r0, r4
 8016706:	4629      	mov	r1, r5
 8016708:	f7ea fa20 	bl	8000b4c <__aeabi_dcmpun>
 801670c:	4607      	mov	r7, r0
 801670e:	bb10      	cbnz	r0, 8016756 <sqrt+0x7a>
 8016710:	f04f 0800 	mov.w	r8, #0
 8016714:	f04f 0900 	mov.w	r9, #0
 8016718:	4642      	mov	r2, r8
 801671a:	464b      	mov	r3, r9
 801671c:	4620      	mov	r0, r4
 801671e:	4629      	mov	r1, r5
 8016720:	f7ea f9ec 	bl	8000afc <__aeabi_dcmplt>
 8016724:	b1b8      	cbz	r0, 8016756 <sqrt+0x7a>
 8016726:	2301      	movs	r3, #1
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	4b18      	ldr	r3, [pc, #96]	; (801678c <sqrt+0xb0>)
 801672c:	9301      	str	r3, [sp, #4]
 801672e:	9708      	str	r7, [sp, #32]
 8016730:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8016734:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016738:	b9b6      	cbnz	r6, 8016768 <sqrt+0x8c>
 801673a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801673e:	4668      	mov	r0, sp
 8016740:	f001 fa9e 	bl	8017c80 <matherr>
 8016744:	b1d0      	cbz	r0, 801677c <sqrt+0xa0>
 8016746:	9b08      	ldr	r3, [sp, #32]
 8016748:	b11b      	cbz	r3, 8016752 <sqrt+0x76>
 801674a:	f7fb fc8f 	bl	801206c <__errno>
 801674e:	9b08      	ldr	r3, [sp, #32]
 8016750:	6003      	str	r3, [r0, #0]
 8016752:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016756:	eeb0 0a48 	vmov.f32	s0, s16
 801675a:	eef0 0a68 	vmov.f32	s1, s17
 801675e:	b00b      	add	sp, #44	; 0x2c
 8016760:	ecbd 8b02 	vpop	{d8}
 8016764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016768:	4642      	mov	r2, r8
 801676a:	464b      	mov	r3, r9
 801676c:	4640      	mov	r0, r8
 801676e:	4649      	mov	r1, r9
 8016770:	f7ea f87c 	bl	800086c <__aeabi_ddiv>
 8016774:	2e02      	cmp	r6, #2
 8016776:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801677a:	d1e0      	bne.n	801673e <sqrt+0x62>
 801677c:	f7fb fc76 	bl	801206c <__errno>
 8016780:	2321      	movs	r3, #33	; 0x21
 8016782:	6003      	str	r3, [r0, #0]
 8016784:	e7df      	b.n	8016746 <sqrt+0x6a>
 8016786:	bf00      	nop
 8016788:	20001004 	.word	0x20001004
 801678c:	080185e4 	.word	0x080185e4

08016790 <__ieee754_atan2>:
 8016790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016794:	ec57 6b11 	vmov	r6, r7, d1
 8016798:	4273      	negs	r3, r6
 801679a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801679e:	4333      	orrs	r3, r6
 80167a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8016948 <__ieee754_atan2+0x1b8>
 80167a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80167a8:	4573      	cmp	r3, lr
 80167aa:	ec51 0b10 	vmov	r0, r1, d0
 80167ae:	ee11 8a10 	vmov	r8, s2
 80167b2:	d80a      	bhi.n	80167ca <__ieee754_atan2+0x3a>
 80167b4:	4244      	negs	r4, r0
 80167b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80167ba:	4304      	orrs	r4, r0
 80167bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80167c0:	4574      	cmp	r4, lr
 80167c2:	468c      	mov	ip, r1
 80167c4:	ee10 9a10 	vmov	r9, s0
 80167c8:	d907      	bls.n	80167da <__ieee754_atan2+0x4a>
 80167ca:	4632      	mov	r2, r6
 80167cc:	463b      	mov	r3, r7
 80167ce:	f7e9 fd6d 	bl	80002ac <__adddf3>
 80167d2:	ec41 0b10 	vmov	d0, r0, r1
 80167d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80167de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167e2:	4334      	orrs	r4, r6
 80167e4:	d103      	bne.n	80167ee <__ieee754_atan2+0x5e>
 80167e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167ea:	f001 b819 	b.w	8017820 <atan>
 80167ee:	17bc      	asrs	r4, r7, #30
 80167f0:	f004 0402 	and.w	r4, r4, #2
 80167f4:	ea53 0909 	orrs.w	r9, r3, r9
 80167f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80167fc:	d107      	bne.n	801680e <__ieee754_atan2+0x7e>
 80167fe:	2c02      	cmp	r4, #2
 8016800:	d073      	beq.n	80168ea <__ieee754_atan2+0x15a>
 8016802:	2c03      	cmp	r4, #3
 8016804:	d1e5      	bne.n	80167d2 <__ieee754_atan2+0x42>
 8016806:	a13e      	add	r1, pc, #248	; (adr r1, 8016900 <__ieee754_atan2+0x170>)
 8016808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801680c:	e7e1      	b.n	80167d2 <__ieee754_atan2+0x42>
 801680e:	ea52 0808 	orrs.w	r8, r2, r8
 8016812:	d106      	bne.n	8016822 <__ieee754_atan2+0x92>
 8016814:	f1bc 0f00 	cmp.w	ip, #0
 8016818:	da6b      	bge.n	80168f2 <__ieee754_atan2+0x162>
 801681a:	a13b      	add	r1, pc, #236	; (adr r1, 8016908 <__ieee754_atan2+0x178>)
 801681c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016820:	e7d7      	b.n	80167d2 <__ieee754_atan2+0x42>
 8016822:	4572      	cmp	r2, lr
 8016824:	d120      	bne.n	8016868 <__ieee754_atan2+0xd8>
 8016826:	4293      	cmp	r3, r2
 8016828:	d111      	bne.n	801684e <__ieee754_atan2+0xbe>
 801682a:	2c02      	cmp	r4, #2
 801682c:	d007      	beq.n	801683e <__ieee754_atan2+0xae>
 801682e:	2c03      	cmp	r4, #3
 8016830:	d009      	beq.n	8016846 <__ieee754_atan2+0xb6>
 8016832:	2c01      	cmp	r4, #1
 8016834:	d155      	bne.n	80168e2 <__ieee754_atan2+0x152>
 8016836:	a136      	add	r1, pc, #216	; (adr r1, 8016910 <__ieee754_atan2+0x180>)
 8016838:	e9d1 0100 	ldrd	r0, r1, [r1]
 801683c:	e7c9      	b.n	80167d2 <__ieee754_atan2+0x42>
 801683e:	a136      	add	r1, pc, #216	; (adr r1, 8016918 <__ieee754_atan2+0x188>)
 8016840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016844:	e7c5      	b.n	80167d2 <__ieee754_atan2+0x42>
 8016846:	a136      	add	r1, pc, #216	; (adr r1, 8016920 <__ieee754_atan2+0x190>)
 8016848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801684c:	e7c1      	b.n	80167d2 <__ieee754_atan2+0x42>
 801684e:	2c02      	cmp	r4, #2
 8016850:	d04b      	beq.n	80168ea <__ieee754_atan2+0x15a>
 8016852:	2c03      	cmp	r4, #3
 8016854:	d0d7      	beq.n	8016806 <__ieee754_atan2+0x76>
 8016856:	2c01      	cmp	r4, #1
 8016858:	f04f 0000 	mov.w	r0, #0
 801685c:	d102      	bne.n	8016864 <__ieee754_atan2+0xd4>
 801685e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016862:	e7b6      	b.n	80167d2 <__ieee754_atan2+0x42>
 8016864:	2100      	movs	r1, #0
 8016866:	e7b4      	b.n	80167d2 <__ieee754_atan2+0x42>
 8016868:	4573      	cmp	r3, lr
 801686a:	d0d3      	beq.n	8016814 <__ieee754_atan2+0x84>
 801686c:	1a9b      	subs	r3, r3, r2
 801686e:	151b      	asrs	r3, r3, #20
 8016870:	2b3c      	cmp	r3, #60	; 0x3c
 8016872:	dc1e      	bgt.n	80168b2 <__ieee754_atan2+0x122>
 8016874:	2f00      	cmp	r7, #0
 8016876:	da01      	bge.n	801687c <__ieee754_atan2+0xec>
 8016878:	333c      	adds	r3, #60	; 0x3c
 801687a:	db1e      	blt.n	80168ba <__ieee754_atan2+0x12a>
 801687c:	4632      	mov	r2, r6
 801687e:	463b      	mov	r3, r7
 8016880:	f7e9 fff4 	bl	800086c <__aeabi_ddiv>
 8016884:	ec41 0b10 	vmov	d0, r0, r1
 8016888:	f001 f96a 	bl	8017b60 <fabs>
 801688c:	f000 ffc8 	bl	8017820 <atan>
 8016890:	ec51 0b10 	vmov	r0, r1, d0
 8016894:	2c01      	cmp	r4, #1
 8016896:	d013      	beq.n	80168c0 <__ieee754_atan2+0x130>
 8016898:	2c02      	cmp	r4, #2
 801689a:	d015      	beq.n	80168c8 <__ieee754_atan2+0x138>
 801689c:	2c00      	cmp	r4, #0
 801689e:	d098      	beq.n	80167d2 <__ieee754_atan2+0x42>
 80168a0:	a321      	add	r3, pc, #132	; (adr r3, 8016928 <__ieee754_atan2+0x198>)
 80168a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a6:	f7e9 fcff 	bl	80002a8 <__aeabi_dsub>
 80168aa:	a321      	add	r3, pc, #132	; (adr r3, 8016930 <__ieee754_atan2+0x1a0>)
 80168ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b0:	e014      	b.n	80168dc <__ieee754_atan2+0x14c>
 80168b2:	a121      	add	r1, pc, #132	; (adr r1, 8016938 <__ieee754_atan2+0x1a8>)
 80168b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168b8:	e7ec      	b.n	8016894 <__ieee754_atan2+0x104>
 80168ba:	2000      	movs	r0, #0
 80168bc:	2100      	movs	r1, #0
 80168be:	e7e9      	b.n	8016894 <__ieee754_atan2+0x104>
 80168c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168c4:	4619      	mov	r1, r3
 80168c6:	e784      	b.n	80167d2 <__ieee754_atan2+0x42>
 80168c8:	a317      	add	r3, pc, #92	; (adr r3, 8016928 <__ieee754_atan2+0x198>)
 80168ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ce:	f7e9 fceb 	bl	80002a8 <__aeabi_dsub>
 80168d2:	4602      	mov	r2, r0
 80168d4:	460b      	mov	r3, r1
 80168d6:	a116      	add	r1, pc, #88	; (adr r1, 8016930 <__ieee754_atan2+0x1a0>)
 80168d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168dc:	f7e9 fce4 	bl	80002a8 <__aeabi_dsub>
 80168e0:	e777      	b.n	80167d2 <__ieee754_atan2+0x42>
 80168e2:	a117      	add	r1, pc, #92	; (adr r1, 8016940 <__ieee754_atan2+0x1b0>)
 80168e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e8:	e773      	b.n	80167d2 <__ieee754_atan2+0x42>
 80168ea:	a111      	add	r1, pc, #68	; (adr r1, 8016930 <__ieee754_atan2+0x1a0>)
 80168ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168f0:	e76f      	b.n	80167d2 <__ieee754_atan2+0x42>
 80168f2:	a111      	add	r1, pc, #68	; (adr r1, 8016938 <__ieee754_atan2+0x1a8>)
 80168f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168f8:	e76b      	b.n	80167d2 <__ieee754_atan2+0x42>
 80168fa:	bf00      	nop
 80168fc:	f3af 8000 	nop.w
 8016900:	54442d18 	.word	0x54442d18
 8016904:	c00921fb 	.word	0xc00921fb
 8016908:	54442d18 	.word	0x54442d18
 801690c:	bff921fb 	.word	0xbff921fb
 8016910:	54442d18 	.word	0x54442d18
 8016914:	bfe921fb 	.word	0xbfe921fb
 8016918:	7f3321d2 	.word	0x7f3321d2
 801691c:	4002d97c 	.word	0x4002d97c
 8016920:	7f3321d2 	.word	0x7f3321d2
 8016924:	c002d97c 	.word	0xc002d97c
 8016928:	33145c07 	.word	0x33145c07
 801692c:	3ca1a626 	.word	0x3ca1a626
 8016930:	54442d18 	.word	0x54442d18
 8016934:	400921fb 	.word	0x400921fb
 8016938:	54442d18 	.word	0x54442d18
 801693c:	3ff921fb 	.word	0x3ff921fb
 8016940:	54442d18 	.word	0x54442d18
 8016944:	3fe921fb 	.word	0x3fe921fb
 8016948:	7ff00000 	.word	0x7ff00000
 801694c:	00000000 	.word	0x00000000

08016950 <__ieee754_rem_pio2>:
 8016950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016954:	ec57 6b10 	vmov	r6, r7, d0
 8016958:	4bc3      	ldr	r3, [pc, #780]	; (8016c68 <__ieee754_rem_pio2+0x318>)
 801695a:	b08d      	sub	sp, #52	; 0x34
 801695c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016960:	4598      	cmp	r8, r3
 8016962:	4604      	mov	r4, r0
 8016964:	9704      	str	r7, [sp, #16]
 8016966:	dc07      	bgt.n	8016978 <__ieee754_rem_pio2+0x28>
 8016968:	2200      	movs	r2, #0
 801696a:	2300      	movs	r3, #0
 801696c:	ed84 0b00 	vstr	d0, [r4]
 8016970:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016974:	2500      	movs	r5, #0
 8016976:	e027      	b.n	80169c8 <__ieee754_rem_pio2+0x78>
 8016978:	4bbc      	ldr	r3, [pc, #752]	; (8016c6c <__ieee754_rem_pio2+0x31c>)
 801697a:	4598      	cmp	r8, r3
 801697c:	dc75      	bgt.n	8016a6a <__ieee754_rem_pio2+0x11a>
 801697e:	9b04      	ldr	r3, [sp, #16]
 8016980:	4dbb      	ldr	r5, [pc, #748]	; (8016c70 <__ieee754_rem_pio2+0x320>)
 8016982:	2b00      	cmp	r3, #0
 8016984:	ee10 0a10 	vmov	r0, s0
 8016988:	a3a9      	add	r3, pc, #676	; (adr r3, 8016c30 <__ieee754_rem_pio2+0x2e0>)
 801698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801698e:	4639      	mov	r1, r7
 8016990:	dd36      	ble.n	8016a00 <__ieee754_rem_pio2+0xb0>
 8016992:	f7e9 fc89 	bl	80002a8 <__aeabi_dsub>
 8016996:	45a8      	cmp	r8, r5
 8016998:	4606      	mov	r6, r0
 801699a:	460f      	mov	r7, r1
 801699c:	d018      	beq.n	80169d0 <__ieee754_rem_pio2+0x80>
 801699e:	a3a6      	add	r3, pc, #664	; (adr r3, 8016c38 <__ieee754_rem_pio2+0x2e8>)
 80169a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a4:	f7e9 fc80 	bl	80002a8 <__aeabi_dsub>
 80169a8:	4602      	mov	r2, r0
 80169aa:	460b      	mov	r3, r1
 80169ac:	e9c4 2300 	strd	r2, r3, [r4]
 80169b0:	4630      	mov	r0, r6
 80169b2:	4639      	mov	r1, r7
 80169b4:	f7e9 fc78 	bl	80002a8 <__aeabi_dsub>
 80169b8:	a39f      	add	r3, pc, #636	; (adr r3, 8016c38 <__ieee754_rem_pio2+0x2e8>)
 80169ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169be:	f7e9 fc73 	bl	80002a8 <__aeabi_dsub>
 80169c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80169c6:	2501      	movs	r5, #1
 80169c8:	4628      	mov	r0, r5
 80169ca:	b00d      	add	sp, #52	; 0x34
 80169cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d0:	a39b      	add	r3, pc, #620	; (adr r3, 8016c40 <__ieee754_rem_pio2+0x2f0>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7e9 fc67 	bl	80002a8 <__aeabi_dsub>
 80169da:	a39b      	add	r3, pc, #620	; (adr r3, 8016c48 <__ieee754_rem_pio2+0x2f8>)
 80169dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e0:	4606      	mov	r6, r0
 80169e2:	460f      	mov	r7, r1
 80169e4:	f7e9 fc60 	bl	80002a8 <__aeabi_dsub>
 80169e8:	4602      	mov	r2, r0
 80169ea:	460b      	mov	r3, r1
 80169ec:	e9c4 2300 	strd	r2, r3, [r4]
 80169f0:	4630      	mov	r0, r6
 80169f2:	4639      	mov	r1, r7
 80169f4:	f7e9 fc58 	bl	80002a8 <__aeabi_dsub>
 80169f8:	a393      	add	r3, pc, #588	; (adr r3, 8016c48 <__ieee754_rem_pio2+0x2f8>)
 80169fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fe:	e7de      	b.n	80169be <__ieee754_rem_pio2+0x6e>
 8016a00:	f7e9 fc54 	bl	80002ac <__adddf3>
 8016a04:	45a8      	cmp	r8, r5
 8016a06:	4606      	mov	r6, r0
 8016a08:	460f      	mov	r7, r1
 8016a0a:	d016      	beq.n	8016a3a <__ieee754_rem_pio2+0xea>
 8016a0c:	a38a      	add	r3, pc, #552	; (adr r3, 8016c38 <__ieee754_rem_pio2+0x2e8>)
 8016a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a12:	f7e9 fc4b 	bl	80002ac <__adddf3>
 8016a16:	4602      	mov	r2, r0
 8016a18:	460b      	mov	r3, r1
 8016a1a:	e9c4 2300 	strd	r2, r3, [r4]
 8016a1e:	4630      	mov	r0, r6
 8016a20:	4639      	mov	r1, r7
 8016a22:	f7e9 fc41 	bl	80002a8 <__aeabi_dsub>
 8016a26:	a384      	add	r3, pc, #528	; (adr r3, 8016c38 <__ieee754_rem_pio2+0x2e8>)
 8016a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2c:	f7e9 fc3e 	bl	80002ac <__adddf3>
 8016a30:	f04f 35ff 	mov.w	r5, #4294967295
 8016a34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016a38:	e7c6      	b.n	80169c8 <__ieee754_rem_pio2+0x78>
 8016a3a:	a381      	add	r3, pc, #516	; (adr r3, 8016c40 <__ieee754_rem_pio2+0x2f0>)
 8016a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a40:	f7e9 fc34 	bl	80002ac <__adddf3>
 8016a44:	a380      	add	r3, pc, #512	; (adr r3, 8016c48 <__ieee754_rem_pio2+0x2f8>)
 8016a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4a:	4606      	mov	r6, r0
 8016a4c:	460f      	mov	r7, r1
 8016a4e:	f7e9 fc2d 	bl	80002ac <__adddf3>
 8016a52:	4602      	mov	r2, r0
 8016a54:	460b      	mov	r3, r1
 8016a56:	e9c4 2300 	strd	r2, r3, [r4]
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	4639      	mov	r1, r7
 8016a5e:	f7e9 fc23 	bl	80002a8 <__aeabi_dsub>
 8016a62:	a379      	add	r3, pc, #484	; (adr r3, 8016c48 <__ieee754_rem_pio2+0x2f8>)
 8016a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a68:	e7e0      	b.n	8016a2c <__ieee754_rem_pio2+0xdc>
 8016a6a:	4b82      	ldr	r3, [pc, #520]	; (8016c74 <__ieee754_rem_pio2+0x324>)
 8016a6c:	4598      	cmp	r8, r3
 8016a6e:	f300 80d0 	bgt.w	8016c12 <__ieee754_rem_pio2+0x2c2>
 8016a72:	f001 f875 	bl	8017b60 <fabs>
 8016a76:	ec57 6b10 	vmov	r6, r7, d0
 8016a7a:	ee10 0a10 	vmov	r0, s0
 8016a7e:	a374      	add	r3, pc, #464	; (adr r3, 8016c50 <__ieee754_rem_pio2+0x300>)
 8016a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a84:	4639      	mov	r1, r7
 8016a86:	f7e9 fdc7 	bl	8000618 <__aeabi_dmul>
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	4b7a      	ldr	r3, [pc, #488]	; (8016c78 <__ieee754_rem_pio2+0x328>)
 8016a8e:	f7e9 fc0d 	bl	80002ac <__adddf3>
 8016a92:	f7ea f871 	bl	8000b78 <__aeabi_d2iz>
 8016a96:	4605      	mov	r5, r0
 8016a98:	f7e9 fd54 	bl	8000544 <__aeabi_i2d>
 8016a9c:	a364      	add	r3, pc, #400	; (adr r3, 8016c30 <__ieee754_rem_pio2+0x2e0>)
 8016a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016aa6:	f7e9 fdb7 	bl	8000618 <__aeabi_dmul>
 8016aaa:	4602      	mov	r2, r0
 8016aac:	460b      	mov	r3, r1
 8016aae:	4630      	mov	r0, r6
 8016ab0:	4639      	mov	r1, r7
 8016ab2:	f7e9 fbf9 	bl	80002a8 <__aeabi_dsub>
 8016ab6:	a360      	add	r3, pc, #384	; (adr r3, 8016c38 <__ieee754_rem_pio2+0x2e8>)
 8016ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abc:	4682      	mov	sl, r0
 8016abe:	468b      	mov	fp, r1
 8016ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ac4:	f7e9 fda8 	bl	8000618 <__aeabi_dmul>
 8016ac8:	2d1f      	cmp	r5, #31
 8016aca:	4606      	mov	r6, r0
 8016acc:	460f      	mov	r7, r1
 8016ace:	dc0c      	bgt.n	8016aea <__ieee754_rem_pio2+0x19a>
 8016ad0:	1e6a      	subs	r2, r5, #1
 8016ad2:	4b6a      	ldr	r3, [pc, #424]	; (8016c7c <__ieee754_rem_pio2+0x32c>)
 8016ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ad8:	4543      	cmp	r3, r8
 8016ada:	d006      	beq.n	8016aea <__ieee754_rem_pio2+0x19a>
 8016adc:	4632      	mov	r2, r6
 8016ade:	463b      	mov	r3, r7
 8016ae0:	4650      	mov	r0, sl
 8016ae2:	4659      	mov	r1, fp
 8016ae4:	f7e9 fbe0 	bl	80002a8 <__aeabi_dsub>
 8016ae8:	e00e      	b.n	8016b08 <__ieee754_rem_pio2+0x1b8>
 8016aea:	4632      	mov	r2, r6
 8016aec:	463b      	mov	r3, r7
 8016aee:	4650      	mov	r0, sl
 8016af0:	4659      	mov	r1, fp
 8016af2:	f7e9 fbd9 	bl	80002a8 <__aeabi_dsub>
 8016af6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016afa:	9305      	str	r3, [sp, #20]
 8016afc:	9a05      	ldr	r2, [sp, #20]
 8016afe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016b02:	1ad3      	subs	r3, r2, r3
 8016b04:	2b10      	cmp	r3, #16
 8016b06:	dc02      	bgt.n	8016b0e <__ieee754_rem_pio2+0x1be>
 8016b08:	e9c4 0100 	strd	r0, r1, [r4]
 8016b0c:	e039      	b.n	8016b82 <__ieee754_rem_pio2+0x232>
 8016b0e:	a34c      	add	r3, pc, #304	; (adr r3, 8016c40 <__ieee754_rem_pio2+0x2f0>)
 8016b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b18:	f7e9 fd7e 	bl	8000618 <__aeabi_dmul>
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	460f      	mov	r7, r1
 8016b20:	4602      	mov	r2, r0
 8016b22:	460b      	mov	r3, r1
 8016b24:	4650      	mov	r0, sl
 8016b26:	4659      	mov	r1, fp
 8016b28:	f7e9 fbbe 	bl	80002a8 <__aeabi_dsub>
 8016b2c:	4602      	mov	r2, r0
 8016b2e:	460b      	mov	r3, r1
 8016b30:	4680      	mov	r8, r0
 8016b32:	4689      	mov	r9, r1
 8016b34:	4650      	mov	r0, sl
 8016b36:	4659      	mov	r1, fp
 8016b38:	f7e9 fbb6 	bl	80002a8 <__aeabi_dsub>
 8016b3c:	4632      	mov	r2, r6
 8016b3e:	463b      	mov	r3, r7
 8016b40:	f7e9 fbb2 	bl	80002a8 <__aeabi_dsub>
 8016b44:	a340      	add	r3, pc, #256	; (adr r3, 8016c48 <__ieee754_rem_pio2+0x2f8>)
 8016b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b4a:	4606      	mov	r6, r0
 8016b4c:	460f      	mov	r7, r1
 8016b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b52:	f7e9 fd61 	bl	8000618 <__aeabi_dmul>
 8016b56:	4632      	mov	r2, r6
 8016b58:	463b      	mov	r3, r7
 8016b5a:	f7e9 fba5 	bl	80002a8 <__aeabi_dsub>
 8016b5e:	4602      	mov	r2, r0
 8016b60:	460b      	mov	r3, r1
 8016b62:	4606      	mov	r6, r0
 8016b64:	460f      	mov	r7, r1
 8016b66:	4640      	mov	r0, r8
 8016b68:	4649      	mov	r1, r9
 8016b6a:	f7e9 fb9d 	bl	80002a8 <__aeabi_dsub>
 8016b6e:	9a05      	ldr	r2, [sp, #20]
 8016b70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016b74:	1ad3      	subs	r3, r2, r3
 8016b76:	2b31      	cmp	r3, #49	; 0x31
 8016b78:	dc20      	bgt.n	8016bbc <__ieee754_rem_pio2+0x26c>
 8016b7a:	e9c4 0100 	strd	r0, r1, [r4]
 8016b7e:	46c2      	mov	sl, r8
 8016b80:	46cb      	mov	fp, r9
 8016b82:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016b86:	4650      	mov	r0, sl
 8016b88:	4642      	mov	r2, r8
 8016b8a:	464b      	mov	r3, r9
 8016b8c:	4659      	mov	r1, fp
 8016b8e:	f7e9 fb8b 	bl	80002a8 <__aeabi_dsub>
 8016b92:	463b      	mov	r3, r7
 8016b94:	4632      	mov	r2, r6
 8016b96:	f7e9 fb87 	bl	80002a8 <__aeabi_dsub>
 8016b9a:	9b04      	ldr	r3, [sp, #16]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016ba2:	f6bf af11 	bge.w	80169c8 <__ieee754_rem_pio2+0x78>
 8016ba6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016baa:	6063      	str	r3, [r4, #4]
 8016bac:	f8c4 8000 	str.w	r8, [r4]
 8016bb0:	60a0      	str	r0, [r4, #8]
 8016bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016bb6:	60e3      	str	r3, [r4, #12]
 8016bb8:	426d      	negs	r5, r5
 8016bba:	e705      	b.n	80169c8 <__ieee754_rem_pio2+0x78>
 8016bbc:	a326      	add	r3, pc, #152	; (adr r3, 8016c58 <__ieee754_rem_pio2+0x308>)
 8016bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016bc6:	f7e9 fd27 	bl	8000618 <__aeabi_dmul>
 8016bca:	4606      	mov	r6, r0
 8016bcc:	460f      	mov	r7, r1
 8016bce:	4602      	mov	r2, r0
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	4640      	mov	r0, r8
 8016bd4:	4649      	mov	r1, r9
 8016bd6:	f7e9 fb67 	bl	80002a8 <__aeabi_dsub>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	460b      	mov	r3, r1
 8016bde:	4682      	mov	sl, r0
 8016be0:	468b      	mov	fp, r1
 8016be2:	4640      	mov	r0, r8
 8016be4:	4649      	mov	r1, r9
 8016be6:	f7e9 fb5f 	bl	80002a8 <__aeabi_dsub>
 8016bea:	4632      	mov	r2, r6
 8016bec:	463b      	mov	r3, r7
 8016bee:	f7e9 fb5b 	bl	80002a8 <__aeabi_dsub>
 8016bf2:	a31b      	add	r3, pc, #108	; (adr r3, 8016c60 <__ieee754_rem_pio2+0x310>)
 8016bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf8:	4606      	mov	r6, r0
 8016bfa:	460f      	mov	r7, r1
 8016bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c00:	f7e9 fd0a 	bl	8000618 <__aeabi_dmul>
 8016c04:	4632      	mov	r2, r6
 8016c06:	463b      	mov	r3, r7
 8016c08:	f7e9 fb4e 	bl	80002a8 <__aeabi_dsub>
 8016c0c:	4606      	mov	r6, r0
 8016c0e:	460f      	mov	r7, r1
 8016c10:	e764      	b.n	8016adc <__ieee754_rem_pio2+0x18c>
 8016c12:	4b1b      	ldr	r3, [pc, #108]	; (8016c80 <__ieee754_rem_pio2+0x330>)
 8016c14:	4598      	cmp	r8, r3
 8016c16:	dd35      	ble.n	8016c84 <__ieee754_rem_pio2+0x334>
 8016c18:	ee10 2a10 	vmov	r2, s0
 8016c1c:	463b      	mov	r3, r7
 8016c1e:	4630      	mov	r0, r6
 8016c20:	4639      	mov	r1, r7
 8016c22:	f7e9 fb41 	bl	80002a8 <__aeabi_dsub>
 8016c26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016c2a:	e9c4 0100 	strd	r0, r1, [r4]
 8016c2e:	e6a1      	b.n	8016974 <__ieee754_rem_pio2+0x24>
 8016c30:	54400000 	.word	0x54400000
 8016c34:	3ff921fb 	.word	0x3ff921fb
 8016c38:	1a626331 	.word	0x1a626331
 8016c3c:	3dd0b461 	.word	0x3dd0b461
 8016c40:	1a600000 	.word	0x1a600000
 8016c44:	3dd0b461 	.word	0x3dd0b461
 8016c48:	2e037073 	.word	0x2e037073
 8016c4c:	3ba3198a 	.word	0x3ba3198a
 8016c50:	6dc9c883 	.word	0x6dc9c883
 8016c54:	3fe45f30 	.word	0x3fe45f30
 8016c58:	2e000000 	.word	0x2e000000
 8016c5c:	3ba3198a 	.word	0x3ba3198a
 8016c60:	252049c1 	.word	0x252049c1
 8016c64:	397b839a 	.word	0x397b839a
 8016c68:	3fe921fb 	.word	0x3fe921fb
 8016c6c:	4002d97b 	.word	0x4002d97b
 8016c70:	3ff921fb 	.word	0x3ff921fb
 8016c74:	413921fb 	.word	0x413921fb
 8016c78:	3fe00000 	.word	0x3fe00000
 8016c7c:	080185ec 	.word	0x080185ec
 8016c80:	7fefffff 	.word	0x7fefffff
 8016c84:	ea4f 5528 	mov.w	r5, r8, asr #20
 8016c88:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8016c8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8016c90:	4630      	mov	r0, r6
 8016c92:	460f      	mov	r7, r1
 8016c94:	f7e9 ff70 	bl	8000b78 <__aeabi_d2iz>
 8016c98:	f7e9 fc54 	bl	8000544 <__aeabi_i2d>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	4639      	mov	r1, r7
 8016ca4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016ca8:	f7e9 fafe 	bl	80002a8 <__aeabi_dsub>
 8016cac:	2200      	movs	r2, #0
 8016cae:	4b1f      	ldr	r3, [pc, #124]	; (8016d2c <__ieee754_rem_pio2+0x3dc>)
 8016cb0:	f7e9 fcb2 	bl	8000618 <__aeabi_dmul>
 8016cb4:	460f      	mov	r7, r1
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	f7e9 ff5e 	bl	8000b78 <__aeabi_d2iz>
 8016cbc:	f7e9 fc42 	bl	8000544 <__aeabi_i2d>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	4639      	mov	r1, r7
 8016cc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016ccc:	f7e9 faec 	bl	80002a8 <__aeabi_dsub>
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	4b16      	ldr	r3, [pc, #88]	; (8016d2c <__ieee754_rem_pio2+0x3dc>)
 8016cd4:	f7e9 fca0 	bl	8000618 <__aeabi_dmul>
 8016cd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016cdc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016ce0:	f04f 0803 	mov.w	r8, #3
 8016ce4:	2600      	movs	r6, #0
 8016ce6:	2700      	movs	r7, #0
 8016ce8:	4632      	mov	r2, r6
 8016cea:	463b      	mov	r3, r7
 8016cec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016cf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8016cf4:	f7e9 fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 8016cf8:	b9b0      	cbnz	r0, 8016d28 <__ieee754_rem_pio2+0x3d8>
 8016cfa:	4b0d      	ldr	r3, [pc, #52]	; (8016d30 <__ieee754_rem_pio2+0x3e0>)
 8016cfc:	9301      	str	r3, [sp, #4]
 8016cfe:	2302      	movs	r3, #2
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	462a      	mov	r2, r5
 8016d04:	4643      	mov	r3, r8
 8016d06:	4621      	mov	r1, r4
 8016d08:	a806      	add	r0, sp, #24
 8016d0a:	f000 f98d 	bl	8017028 <__kernel_rem_pio2>
 8016d0e:	9b04      	ldr	r3, [sp, #16]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	4605      	mov	r5, r0
 8016d14:	f6bf ae58 	bge.w	80169c8 <__ieee754_rem_pio2+0x78>
 8016d18:	6863      	ldr	r3, [r4, #4]
 8016d1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016d1e:	6063      	str	r3, [r4, #4]
 8016d20:	68e3      	ldr	r3, [r4, #12]
 8016d22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016d26:	e746      	b.n	8016bb6 <__ieee754_rem_pio2+0x266>
 8016d28:	46d0      	mov	r8, sl
 8016d2a:	e7dd      	b.n	8016ce8 <__ieee754_rem_pio2+0x398>
 8016d2c:	41700000 	.word	0x41700000
 8016d30:	0801866c 	.word	0x0801866c

08016d34 <__ieee754_sqrt>:
 8016d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d38:	4955      	ldr	r1, [pc, #340]	; (8016e90 <__ieee754_sqrt+0x15c>)
 8016d3a:	ec55 4b10 	vmov	r4, r5, d0
 8016d3e:	43a9      	bics	r1, r5
 8016d40:	462b      	mov	r3, r5
 8016d42:	462a      	mov	r2, r5
 8016d44:	d112      	bne.n	8016d6c <__ieee754_sqrt+0x38>
 8016d46:	ee10 2a10 	vmov	r2, s0
 8016d4a:	ee10 0a10 	vmov	r0, s0
 8016d4e:	4629      	mov	r1, r5
 8016d50:	f7e9 fc62 	bl	8000618 <__aeabi_dmul>
 8016d54:	4602      	mov	r2, r0
 8016d56:	460b      	mov	r3, r1
 8016d58:	4620      	mov	r0, r4
 8016d5a:	4629      	mov	r1, r5
 8016d5c:	f7e9 faa6 	bl	80002ac <__adddf3>
 8016d60:	4604      	mov	r4, r0
 8016d62:	460d      	mov	r5, r1
 8016d64:	ec45 4b10 	vmov	d0, r4, r5
 8016d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d6c:	2d00      	cmp	r5, #0
 8016d6e:	ee10 0a10 	vmov	r0, s0
 8016d72:	4621      	mov	r1, r4
 8016d74:	dc0f      	bgt.n	8016d96 <__ieee754_sqrt+0x62>
 8016d76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016d7a:	4330      	orrs	r0, r6
 8016d7c:	d0f2      	beq.n	8016d64 <__ieee754_sqrt+0x30>
 8016d7e:	b155      	cbz	r5, 8016d96 <__ieee754_sqrt+0x62>
 8016d80:	ee10 2a10 	vmov	r2, s0
 8016d84:	4620      	mov	r0, r4
 8016d86:	4629      	mov	r1, r5
 8016d88:	f7e9 fa8e 	bl	80002a8 <__aeabi_dsub>
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	460b      	mov	r3, r1
 8016d90:	f7e9 fd6c 	bl	800086c <__aeabi_ddiv>
 8016d94:	e7e4      	b.n	8016d60 <__ieee754_sqrt+0x2c>
 8016d96:	151b      	asrs	r3, r3, #20
 8016d98:	d073      	beq.n	8016e82 <__ieee754_sqrt+0x14e>
 8016d9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d9e:	07dd      	lsls	r5, r3, #31
 8016da0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016da4:	bf48      	it	mi
 8016da6:	0fc8      	lsrmi	r0, r1, #31
 8016da8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016dac:	bf44      	itt	mi
 8016dae:	0049      	lslmi	r1, r1, #1
 8016db0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016db4:	2500      	movs	r5, #0
 8016db6:	1058      	asrs	r0, r3, #1
 8016db8:	0fcb      	lsrs	r3, r1, #31
 8016dba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016dbe:	0049      	lsls	r1, r1, #1
 8016dc0:	2316      	movs	r3, #22
 8016dc2:	462c      	mov	r4, r5
 8016dc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016dc8:	19a7      	adds	r7, r4, r6
 8016dca:	4297      	cmp	r7, r2
 8016dcc:	bfde      	ittt	le
 8016dce:	19bc      	addle	r4, r7, r6
 8016dd0:	1bd2      	suble	r2, r2, r7
 8016dd2:	19ad      	addle	r5, r5, r6
 8016dd4:	0fcf      	lsrs	r7, r1, #31
 8016dd6:	3b01      	subs	r3, #1
 8016dd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016ddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016de0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016de4:	d1f0      	bne.n	8016dc8 <__ieee754_sqrt+0x94>
 8016de6:	f04f 0c20 	mov.w	ip, #32
 8016dea:	469e      	mov	lr, r3
 8016dec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016df0:	42a2      	cmp	r2, r4
 8016df2:	eb06 070e 	add.w	r7, r6, lr
 8016df6:	dc02      	bgt.n	8016dfe <__ieee754_sqrt+0xca>
 8016df8:	d112      	bne.n	8016e20 <__ieee754_sqrt+0xec>
 8016dfa:	428f      	cmp	r7, r1
 8016dfc:	d810      	bhi.n	8016e20 <__ieee754_sqrt+0xec>
 8016dfe:	2f00      	cmp	r7, #0
 8016e00:	eb07 0e06 	add.w	lr, r7, r6
 8016e04:	da42      	bge.n	8016e8c <__ieee754_sqrt+0x158>
 8016e06:	f1be 0f00 	cmp.w	lr, #0
 8016e0a:	db3f      	blt.n	8016e8c <__ieee754_sqrt+0x158>
 8016e0c:	f104 0801 	add.w	r8, r4, #1
 8016e10:	1b12      	subs	r2, r2, r4
 8016e12:	428f      	cmp	r7, r1
 8016e14:	bf88      	it	hi
 8016e16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016e1a:	1bc9      	subs	r1, r1, r7
 8016e1c:	4433      	add	r3, r6
 8016e1e:	4644      	mov	r4, r8
 8016e20:	0052      	lsls	r2, r2, #1
 8016e22:	f1bc 0c01 	subs.w	ip, ip, #1
 8016e26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016e2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016e2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016e32:	d1dd      	bne.n	8016df0 <__ieee754_sqrt+0xbc>
 8016e34:	430a      	orrs	r2, r1
 8016e36:	d006      	beq.n	8016e46 <__ieee754_sqrt+0x112>
 8016e38:	1c5c      	adds	r4, r3, #1
 8016e3a:	bf13      	iteet	ne
 8016e3c:	3301      	addne	r3, #1
 8016e3e:	3501      	addeq	r5, #1
 8016e40:	4663      	moveq	r3, ip
 8016e42:	f023 0301 	bicne.w	r3, r3, #1
 8016e46:	106a      	asrs	r2, r5, #1
 8016e48:	085b      	lsrs	r3, r3, #1
 8016e4a:	07e9      	lsls	r1, r5, #31
 8016e4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016e50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016e54:	bf48      	it	mi
 8016e56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016e5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016e5e:	461c      	mov	r4, r3
 8016e60:	e780      	b.n	8016d64 <__ieee754_sqrt+0x30>
 8016e62:	0aca      	lsrs	r2, r1, #11
 8016e64:	3815      	subs	r0, #21
 8016e66:	0549      	lsls	r1, r1, #21
 8016e68:	2a00      	cmp	r2, #0
 8016e6a:	d0fa      	beq.n	8016e62 <__ieee754_sqrt+0x12e>
 8016e6c:	02d6      	lsls	r6, r2, #11
 8016e6e:	d50a      	bpl.n	8016e86 <__ieee754_sqrt+0x152>
 8016e70:	f1c3 0420 	rsb	r4, r3, #32
 8016e74:	fa21 f404 	lsr.w	r4, r1, r4
 8016e78:	1e5d      	subs	r5, r3, #1
 8016e7a:	4099      	lsls	r1, r3
 8016e7c:	4322      	orrs	r2, r4
 8016e7e:	1b43      	subs	r3, r0, r5
 8016e80:	e78b      	b.n	8016d9a <__ieee754_sqrt+0x66>
 8016e82:	4618      	mov	r0, r3
 8016e84:	e7f0      	b.n	8016e68 <__ieee754_sqrt+0x134>
 8016e86:	0052      	lsls	r2, r2, #1
 8016e88:	3301      	adds	r3, #1
 8016e8a:	e7ef      	b.n	8016e6c <__ieee754_sqrt+0x138>
 8016e8c:	46a0      	mov	r8, r4
 8016e8e:	e7bf      	b.n	8016e10 <__ieee754_sqrt+0xdc>
 8016e90:	7ff00000 	.word	0x7ff00000
 8016e94:	00000000 	.word	0x00000000

08016e98 <__kernel_cos>:
 8016e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9c:	ec59 8b10 	vmov	r8, r9, d0
 8016ea0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8016ea4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016ea8:	ed2d 8b02 	vpush	{d8}
 8016eac:	eeb0 8a41 	vmov.f32	s16, s2
 8016eb0:	eef0 8a61 	vmov.f32	s17, s3
 8016eb4:	da07      	bge.n	8016ec6 <__kernel_cos+0x2e>
 8016eb6:	ee10 0a10 	vmov	r0, s0
 8016eba:	4649      	mov	r1, r9
 8016ebc:	f7e9 fe5c 	bl	8000b78 <__aeabi_d2iz>
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	f000 8089 	beq.w	8016fd8 <__kernel_cos+0x140>
 8016ec6:	4642      	mov	r2, r8
 8016ec8:	464b      	mov	r3, r9
 8016eca:	4640      	mov	r0, r8
 8016ecc:	4649      	mov	r1, r9
 8016ece:	f7e9 fba3 	bl	8000618 <__aeabi_dmul>
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	4b4e      	ldr	r3, [pc, #312]	; (8017010 <__kernel_cos+0x178>)
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	460d      	mov	r5, r1
 8016eda:	f7e9 fb9d 	bl	8000618 <__aeabi_dmul>
 8016ede:	a340      	add	r3, pc, #256	; (adr r3, 8016fe0 <__kernel_cos+0x148>)
 8016ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee4:	4682      	mov	sl, r0
 8016ee6:	468b      	mov	fp, r1
 8016ee8:	4620      	mov	r0, r4
 8016eea:	4629      	mov	r1, r5
 8016eec:	f7e9 fb94 	bl	8000618 <__aeabi_dmul>
 8016ef0:	a33d      	add	r3, pc, #244	; (adr r3, 8016fe8 <__kernel_cos+0x150>)
 8016ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef6:	f7e9 f9d9 	bl	80002ac <__adddf3>
 8016efa:	4622      	mov	r2, r4
 8016efc:	462b      	mov	r3, r5
 8016efe:	f7e9 fb8b 	bl	8000618 <__aeabi_dmul>
 8016f02:	a33b      	add	r3, pc, #236	; (adr r3, 8016ff0 <__kernel_cos+0x158>)
 8016f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f08:	f7e9 f9ce 	bl	80002a8 <__aeabi_dsub>
 8016f0c:	4622      	mov	r2, r4
 8016f0e:	462b      	mov	r3, r5
 8016f10:	f7e9 fb82 	bl	8000618 <__aeabi_dmul>
 8016f14:	a338      	add	r3, pc, #224	; (adr r3, 8016ff8 <__kernel_cos+0x160>)
 8016f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1a:	f7e9 f9c7 	bl	80002ac <__adddf3>
 8016f1e:	4622      	mov	r2, r4
 8016f20:	462b      	mov	r3, r5
 8016f22:	f7e9 fb79 	bl	8000618 <__aeabi_dmul>
 8016f26:	a336      	add	r3, pc, #216	; (adr r3, 8017000 <__kernel_cos+0x168>)
 8016f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2c:	f7e9 f9bc 	bl	80002a8 <__aeabi_dsub>
 8016f30:	4622      	mov	r2, r4
 8016f32:	462b      	mov	r3, r5
 8016f34:	f7e9 fb70 	bl	8000618 <__aeabi_dmul>
 8016f38:	a333      	add	r3, pc, #204	; (adr r3, 8017008 <__kernel_cos+0x170>)
 8016f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3e:	f7e9 f9b5 	bl	80002ac <__adddf3>
 8016f42:	4622      	mov	r2, r4
 8016f44:	462b      	mov	r3, r5
 8016f46:	f7e9 fb67 	bl	8000618 <__aeabi_dmul>
 8016f4a:	4622      	mov	r2, r4
 8016f4c:	462b      	mov	r3, r5
 8016f4e:	f7e9 fb63 	bl	8000618 <__aeabi_dmul>
 8016f52:	ec53 2b18 	vmov	r2, r3, d8
 8016f56:	4604      	mov	r4, r0
 8016f58:	460d      	mov	r5, r1
 8016f5a:	4640      	mov	r0, r8
 8016f5c:	4649      	mov	r1, r9
 8016f5e:	f7e9 fb5b 	bl	8000618 <__aeabi_dmul>
 8016f62:	460b      	mov	r3, r1
 8016f64:	4602      	mov	r2, r0
 8016f66:	4629      	mov	r1, r5
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7e9 f99d 	bl	80002a8 <__aeabi_dsub>
 8016f6e:	4b29      	ldr	r3, [pc, #164]	; (8017014 <__kernel_cos+0x17c>)
 8016f70:	429e      	cmp	r6, r3
 8016f72:	4680      	mov	r8, r0
 8016f74:	4689      	mov	r9, r1
 8016f76:	dc11      	bgt.n	8016f9c <__kernel_cos+0x104>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	4650      	mov	r0, sl
 8016f7e:	4659      	mov	r1, fp
 8016f80:	f7e9 f992 	bl	80002a8 <__aeabi_dsub>
 8016f84:	460b      	mov	r3, r1
 8016f86:	4924      	ldr	r1, [pc, #144]	; (8017018 <__kernel_cos+0x180>)
 8016f88:	4602      	mov	r2, r0
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	f7e9 f98c 	bl	80002a8 <__aeabi_dsub>
 8016f90:	ecbd 8b02 	vpop	{d8}
 8016f94:	ec41 0b10 	vmov	d0, r0, r1
 8016f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f9c:	4b1f      	ldr	r3, [pc, #124]	; (801701c <__kernel_cos+0x184>)
 8016f9e:	491e      	ldr	r1, [pc, #120]	; (8017018 <__kernel_cos+0x180>)
 8016fa0:	429e      	cmp	r6, r3
 8016fa2:	bfcc      	ite	gt
 8016fa4:	4d1e      	ldrgt	r5, [pc, #120]	; (8017020 <__kernel_cos+0x188>)
 8016fa6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016faa:	2400      	movs	r4, #0
 8016fac:	4622      	mov	r2, r4
 8016fae:	462b      	mov	r3, r5
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	f7e9 f979 	bl	80002a8 <__aeabi_dsub>
 8016fb6:	4622      	mov	r2, r4
 8016fb8:	4606      	mov	r6, r0
 8016fba:	460f      	mov	r7, r1
 8016fbc:	462b      	mov	r3, r5
 8016fbe:	4650      	mov	r0, sl
 8016fc0:	4659      	mov	r1, fp
 8016fc2:	f7e9 f971 	bl	80002a8 <__aeabi_dsub>
 8016fc6:	4642      	mov	r2, r8
 8016fc8:	464b      	mov	r3, r9
 8016fca:	f7e9 f96d 	bl	80002a8 <__aeabi_dsub>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	4639      	mov	r1, r7
 8016fd6:	e7d9      	b.n	8016f8c <__kernel_cos+0xf4>
 8016fd8:	2000      	movs	r0, #0
 8016fda:	490f      	ldr	r1, [pc, #60]	; (8017018 <__kernel_cos+0x180>)
 8016fdc:	e7d8      	b.n	8016f90 <__kernel_cos+0xf8>
 8016fde:	bf00      	nop
 8016fe0:	be8838d4 	.word	0xbe8838d4
 8016fe4:	bda8fae9 	.word	0xbda8fae9
 8016fe8:	bdb4b1c4 	.word	0xbdb4b1c4
 8016fec:	3e21ee9e 	.word	0x3e21ee9e
 8016ff0:	809c52ad 	.word	0x809c52ad
 8016ff4:	3e927e4f 	.word	0x3e927e4f
 8016ff8:	19cb1590 	.word	0x19cb1590
 8016ffc:	3efa01a0 	.word	0x3efa01a0
 8017000:	16c15177 	.word	0x16c15177
 8017004:	3f56c16c 	.word	0x3f56c16c
 8017008:	5555554c 	.word	0x5555554c
 801700c:	3fa55555 	.word	0x3fa55555
 8017010:	3fe00000 	.word	0x3fe00000
 8017014:	3fd33332 	.word	0x3fd33332
 8017018:	3ff00000 	.word	0x3ff00000
 801701c:	3fe90000 	.word	0x3fe90000
 8017020:	3fd20000 	.word	0x3fd20000
 8017024:	00000000 	.word	0x00000000

08017028 <__kernel_rem_pio2>:
 8017028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702c:	ed2d 8b02 	vpush	{d8}
 8017030:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8017034:	1ed4      	subs	r4, r2, #3
 8017036:	9308      	str	r3, [sp, #32]
 8017038:	9101      	str	r1, [sp, #4]
 801703a:	4bc5      	ldr	r3, [pc, #788]	; (8017350 <__kernel_rem_pio2+0x328>)
 801703c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801703e:	9009      	str	r0, [sp, #36]	; 0x24
 8017040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017044:	9304      	str	r3, [sp, #16]
 8017046:	9b08      	ldr	r3, [sp, #32]
 8017048:	3b01      	subs	r3, #1
 801704a:	9307      	str	r3, [sp, #28]
 801704c:	2318      	movs	r3, #24
 801704e:	fb94 f4f3 	sdiv	r4, r4, r3
 8017052:	f06f 0317 	mvn.w	r3, #23
 8017056:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801705a:	fb04 3303 	mla	r3, r4, r3, r3
 801705e:	eb03 0a02 	add.w	sl, r3, r2
 8017062:	9b04      	ldr	r3, [sp, #16]
 8017064:	9a07      	ldr	r2, [sp, #28]
 8017066:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017340 <__kernel_rem_pio2+0x318>
 801706a:	eb03 0802 	add.w	r8, r3, r2
 801706e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017070:	1aa7      	subs	r7, r4, r2
 8017072:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017076:	ae22      	add	r6, sp, #136	; 0x88
 8017078:	2500      	movs	r5, #0
 801707a:	4545      	cmp	r5, r8
 801707c:	dd13      	ble.n	80170a6 <__kernel_rem_pio2+0x7e>
 801707e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8017340 <__kernel_rem_pio2+0x318>
 8017082:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8017086:	2600      	movs	r6, #0
 8017088:	9b04      	ldr	r3, [sp, #16]
 801708a:	429e      	cmp	r6, r3
 801708c:	dc32      	bgt.n	80170f4 <__kernel_rem_pio2+0xcc>
 801708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017090:	9302      	str	r3, [sp, #8]
 8017092:	9b08      	ldr	r3, [sp, #32]
 8017094:	199d      	adds	r5, r3, r6
 8017096:	ab22      	add	r3, sp, #136	; 0x88
 8017098:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801709c:	9306      	str	r3, [sp, #24]
 801709e:	ec59 8b18 	vmov	r8, r9, d8
 80170a2:	2700      	movs	r7, #0
 80170a4:	e01f      	b.n	80170e6 <__kernel_rem_pio2+0xbe>
 80170a6:	42ef      	cmn	r7, r5
 80170a8:	d407      	bmi.n	80170ba <__kernel_rem_pio2+0x92>
 80170aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80170ae:	f7e9 fa49 	bl	8000544 <__aeabi_i2d>
 80170b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80170b6:	3501      	adds	r5, #1
 80170b8:	e7df      	b.n	801707a <__kernel_rem_pio2+0x52>
 80170ba:	ec51 0b18 	vmov	r0, r1, d8
 80170be:	e7f8      	b.n	80170b2 <__kernel_rem_pio2+0x8a>
 80170c0:	9906      	ldr	r1, [sp, #24]
 80170c2:	9d02      	ldr	r5, [sp, #8]
 80170c4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80170c8:	9106      	str	r1, [sp, #24]
 80170ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80170ce:	9502      	str	r5, [sp, #8]
 80170d0:	f7e9 faa2 	bl	8000618 <__aeabi_dmul>
 80170d4:	4602      	mov	r2, r0
 80170d6:	460b      	mov	r3, r1
 80170d8:	4640      	mov	r0, r8
 80170da:	4649      	mov	r1, r9
 80170dc:	f7e9 f8e6 	bl	80002ac <__adddf3>
 80170e0:	3701      	adds	r7, #1
 80170e2:	4680      	mov	r8, r0
 80170e4:	4689      	mov	r9, r1
 80170e6:	9b07      	ldr	r3, [sp, #28]
 80170e8:	429f      	cmp	r7, r3
 80170ea:	dde9      	ble.n	80170c0 <__kernel_rem_pio2+0x98>
 80170ec:	e8eb 8902 	strd	r8, r9, [fp], #8
 80170f0:	3601      	adds	r6, #1
 80170f2:	e7c9      	b.n	8017088 <__kernel_rem_pio2+0x60>
 80170f4:	9b04      	ldr	r3, [sp, #16]
 80170f6:	aa0e      	add	r2, sp, #56	; 0x38
 80170f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80170fc:	930c      	str	r3, [sp, #48]	; 0x30
 80170fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017100:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017104:	9c04      	ldr	r4, [sp, #16]
 8017106:	930b      	str	r3, [sp, #44]	; 0x2c
 8017108:	ab9a      	add	r3, sp, #616	; 0x268
 801710a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801710e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017116:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801711a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801711e:	ab9a      	add	r3, sp, #616	; 0x268
 8017120:	445b      	add	r3, fp
 8017122:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8017126:	2500      	movs	r5, #0
 8017128:	1b63      	subs	r3, r4, r5
 801712a:	2b00      	cmp	r3, #0
 801712c:	dc78      	bgt.n	8017220 <__kernel_rem_pio2+0x1f8>
 801712e:	4650      	mov	r0, sl
 8017130:	ec49 8b10 	vmov	d0, r8, r9
 8017134:	f000 fda8 	bl	8017c88 <scalbn>
 8017138:	ec57 6b10 	vmov	r6, r7, d0
 801713c:	2200      	movs	r2, #0
 801713e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017142:	ee10 0a10 	vmov	r0, s0
 8017146:	4639      	mov	r1, r7
 8017148:	f7e9 fa66 	bl	8000618 <__aeabi_dmul>
 801714c:	ec41 0b10 	vmov	d0, r0, r1
 8017150:	f000 fd12 	bl	8017b78 <floor>
 8017154:	2200      	movs	r2, #0
 8017156:	ec51 0b10 	vmov	r0, r1, d0
 801715a:	4b7e      	ldr	r3, [pc, #504]	; (8017354 <__kernel_rem_pio2+0x32c>)
 801715c:	f7e9 fa5c 	bl	8000618 <__aeabi_dmul>
 8017160:	4602      	mov	r2, r0
 8017162:	460b      	mov	r3, r1
 8017164:	4630      	mov	r0, r6
 8017166:	4639      	mov	r1, r7
 8017168:	f7e9 f89e 	bl	80002a8 <__aeabi_dsub>
 801716c:	460f      	mov	r7, r1
 801716e:	4606      	mov	r6, r0
 8017170:	f7e9 fd02 	bl	8000b78 <__aeabi_d2iz>
 8017174:	9006      	str	r0, [sp, #24]
 8017176:	f7e9 f9e5 	bl	8000544 <__aeabi_i2d>
 801717a:	4602      	mov	r2, r0
 801717c:	460b      	mov	r3, r1
 801717e:	4630      	mov	r0, r6
 8017180:	4639      	mov	r1, r7
 8017182:	f7e9 f891 	bl	80002a8 <__aeabi_dsub>
 8017186:	f1ba 0f00 	cmp.w	sl, #0
 801718a:	4606      	mov	r6, r0
 801718c:	460f      	mov	r7, r1
 801718e:	dd6c      	ble.n	801726a <__kernel_rem_pio2+0x242>
 8017190:	1e62      	subs	r2, r4, #1
 8017192:	ab0e      	add	r3, sp, #56	; 0x38
 8017194:	f1ca 0118 	rsb	r1, sl, #24
 8017198:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801719c:	9d06      	ldr	r5, [sp, #24]
 801719e:	fa40 f301 	asr.w	r3, r0, r1
 80171a2:	441d      	add	r5, r3
 80171a4:	408b      	lsls	r3, r1
 80171a6:	1ac0      	subs	r0, r0, r3
 80171a8:	ab0e      	add	r3, sp, #56	; 0x38
 80171aa:	9506      	str	r5, [sp, #24]
 80171ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80171b0:	f1ca 0317 	rsb	r3, sl, #23
 80171b4:	fa40 f303 	asr.w	r3, r0, r3
 80171b8:	9302      	str	r3, [sp, #8]
 80171ba:	9b02      	ldr	r3, [sp, #8]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	dd62      	ble.n	8017286 <__kernel_rem_pio2+0x25e>
 80171c0:	9b06      	ldr	r3, [sp, #24]
 80171c2:	2200      	movs	r2, #0
 80171c4:	3301      	adds	r3, #1
 80171c6:	9306      	str	r3, [sp, #24]
 80171c8:	4615      	mov	r5, r2
 80171ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80171ce:	4294      	cmp	r4, r2
 80171d0:	f300 8095 	bgt.w	80172fe <__kernel_rem_pio2+0x2d6>
 80171d4:	f1ba 0f00 	cmp.w	sl, #0
 80171d8:	dd07      	ble.n	80171ea <__kernel_rem_pio2+0x1c2>
 80171da:	f1ba 0f01 	cmp.w	sl, #1
 80171de:	f000 80a2 	beq.w	8017326 <__kernel_rem_pio2+0x2fe>
 80171e2:	f1ba 0f02 	cmp.w	sl, #2
 80171e6:	f000 80c1 	beq.w	801736c <__kernel_rem_pio2+0x344>
 80171ea:	9b02      	ldr	r3, [sp, #8]
 80171ec:	2b02      	cmp	r3, #2
 80171ee:	d14a      	bne.n	8017286 <__kernel_rem_pio2+0x25e>
 80171f0:	4632      	mov	r2, r6
 80171f2:	463b      	mov	r3, r7
 80171f4:	2000      	movs	r0, #0
 80171f6:	4958      	ldr	r1, [pc, #352]	; (8017358 <__kernel_rem_pio2+0x330>)
 80171f8:	f7e9 f856 	bl	80002a8 <__aeabi_dsub>
 80171fc:	4606      	mov	r6, r0
 80171fe:	460f      	mov	r7, r1
 8017200:	2d00      	cmp	r5, #0
 8017202:	d040      	beq.n	8017286 <__kernel_rem_pio2+0x25e>
 8017204:	4650      	mov	r0, sl
 8017206:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017348 <__kernel_rem_pio2+0x320>
 801720a:	f000 fd3d 	bl	8017c88 <scalbn>
 801720e:	4630      	mov	r0, r6
 8017210:	4639      	mov	r1, r7
 8017212:	ec53 2b10 	vmov	r2, r3, d0
 8017216:	f7e9 f847 	bl	80002a8 <__aeabi_dsub>
 801721a:	4606      	mov	r6, r0
 801721c:	460f      	mov	r7, r1
 801721e:	e032      	b.n	8017286 <__kernel_rem_pio2+0x25e>
 8017220:	2200      	movs	r2, #0
 8017222:	4b4e      	ldr	r3, [pc, #312]	; (801735c <__kernel_rem_pio2+0x334>)
 8017224:	4640      	mov	r0, r8
 8017226:	4649      	mov	r1, r9
 8017228:	f7e9 f9f6 	bl	8000618 <__aeabi_dmul>
 801722c:	f7e9 fca4 	bl	8000b78 <__aeabi_d2iz>
 8017230:	f7e9 f988 	bl	8000544 <__aeabi_i2d>
 8017234:	2200      	movs	r2, #0
 8017236:	4b4a      	ldr	r3, [pc, #296]	; (8017360 <__kernel_rem_pio2+0x338>)
 8017238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801723c:	f7e9 f9ec 	bl	8000618 <__aeabi_dmul>
 8017240:	4602      	mov	r2, r0
 8017242:	460b      	mov	r3, r1
 8017244:	4640      	mov	r0, r8
 8017246:	4649      	mov	r1, r9
 8017248:	f7e9 f82e 	bl	80002a8 <__aeabi_dsub>
 801724c:	f7e9 fc94 	bl	8000b78 <__aeabi_d2iz>
 8017250:	ab0e      	add	r3, sp, #56	; 0x38
 8017252:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8017256:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801725a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801725e:	f7e9 f825 	bl	80002ac <__adddf3>
 8017262:	3501      	adds	r5, #1
 8017264:	4680      	mov	r8, r0
 8017266:	4689      	mov	r9, r1
 8017268:	e75e      	b.n	8017128 <__kernel_rem_pio2+0x100>
 801726a:	d105      	bne.n	8017278 <__kernel_rem_pio2+0x250>
 801726c:	1e63      	subs	r3, r4, #1
 801726e:	aa0e      	add	r2, sp, #56	; 0x38
 8017270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017274:	15c3      	asrs	r3, r0, #23
 8017276:	e79f      	b.n	80171b8 <__kernel_rem_pio2+0x190>
 8017278:	2200      	movs	r2, #0
 801727a:	4b3a      	ldr	r3, [pc, #232]	; (8017364 <__kernel_rem_pio2+0x33c>)
 801727c:	f7e9 fc52 	bl	8000b24 <__aeabi_dcmpge>
 8017280:	2800      	cmp	r0, #0
 8017282:	d139      	bne.n	80172f8 <__kernel_rem_pio2+0x2d0>
 8017284:	9002      	str	r0, [sp, #8]
 8017286:	2200      	movs	r2, #0
 8017288:	2300      	movs	r3, #0
 801728a:	4630      	mov	r0, r6
 801728c:	4639      	mov	r1, r7
 801728e:	f7e9 fc2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8017292:	2800      	cmp	r0, #0
 8017294:	f000 80c7 	beq.w	8017426 <__kernel_rem_pio2+0x3fe>
 8017298:	1e65      	subs	r5, r4, #1
 801729a:	462b      	mov	r3, r5
 801729c:	2200      	movs	r2, #0
 801729e:	9904      	ldr	r1, [sp, #16]
 80172a0:	428b      	cmp	r3, r1
 80172a2:	da6a      	bge.n	801737a <__kernel_rem_pio2+0x352>
 80172a4:	2a00      	cmp	r2, #0
 80172a6:	f000 8088 	beq.w	80173ba <__kernel_rem_pio2+0x392>
 80172aa:	ab0e      	add	r3, sp, #56	; 0x38
 80172ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80172b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f000 80b4 	beq.w	8017422 <__kernel_rem_pio2+0x3fa>
 80172ba:	4650      	mov	r0, sl
 80172bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8017348 <__kernel_rem_pio2+0x320>
 80172c0:	f000 fce2 	bl	8017c88 <scalbn>
 80172c4:	00ec      	lsls	r4, r5, #3
 80172c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80172c8:	191e      	adds	r6, r3, r4
 80172ca:	ec59 8b10 	vmov	r8, r9, d0
 80172ce:	f106 0a08 	add.w	sl, r6, #8
 80172d2:	462f      	mov	r7, r5
 80172d4:	2f00      	cmp	r7, #0
 80172d6:	f280 80df 	bge.w	8017498 <__kernel_rem_pio2+0x470>
 80172da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8017340 <__kernel_rem_pio2+0x318>
 80172de:	f04f 0a00 	mov.w	sl, #0
 80172e2:	eba5 030a 	sub.w	r3, r5, sl
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f2c0 810a 	blt.w	8017500 <__kernel_rem_pio2+0x4d8>
 80172ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8017368 <__kernel_rem_pio2+0x340>
 80172f0:	ec59 8b18 	vmov	r8, r9, d8
 80172f4:	2700      	movs	r7, #0
 80172f6:	e0f5      	b.n	80174e4 <__kernel_rem_pio2+0x4bc>
 80172f8:	2302      	movs	r3, #2
 80172fa:	9302      	str	r3, [sp, #8]
 80172fc:	e760      	b.n	80171c0 <__kernel_rem_pio2+0x198>
 80172fe:	ab0e      	add	r3, sp, #56	; 0x38
 8017300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017304:	b94d      	cbnz	r5, 801731a <__kernel_rem_pio2+0x2f2>
 8017306:	b12b      	cbz	r3, 8017314 <__kernel_rem_pio2+0x2ec>
 8017308:	a80e      	add	r0, sp, #56	; 0x38
 801730a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801730e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017312:	2301      	movs	r3, #1
 8017314:	3201      	adds	r2, #1
 8017316:	461d      	mov	r5, r3
 8017318:	e759      	b.n	80171ce <__kernel_rem_pio2+0x1a6>
 801731a:	a80e      	add	r0, sp, #56	; 0x38
 801731c:	1acb      	subs	r3, r1, r3
 801731e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017322:	462b      	mov	r3, r5
 8017324:	e7f6      	b.n	8017314 <__kernel_rem_pio2+0x2ec>
 8017326:	1e62      	subs	r2, r4, #1
 8017328:	ab0e      	add	r3, sp, #56	; 0x38
 801732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801732e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017332:	a90e      	add	r1, sp, #56	; 0x38
 8017334:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017338:	e757      	b.n	80171ea <__kernel_rem_pio2+0x1c2>
 801733a:	bf00      	nop
 801733c:	f3af 8000 	nop.w
	...
 801734c:	3ff00000 	.word	0x3ff00000
 8017350:	080187b8 	.word	0x080187b8
 8017354:	40200000 	.word	0x40200000
 8017358:	3ff00000 	.word	0x3ff00000
 801735c:	3e700000 	.word	0x3e700000
 8017360:	41700000 	.word	0x41700000
 8017364:	3fe00000 	.word	0x3fe00000
 8017368:	08018778 	.word	0x08018778
 801736c:	1e62      	subs	r2, r4, #1
 801736e:	ab0e      	add	r3, sp, #56	; 0x38
 8017370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017374:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017378:	e7db      	b.n	8017332 <__kernel_rem_pio2+0x30a>
 801737a:	a90e      	add	r1, sp, #56	; 0x38
 801737c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017380:	3b01      	subs	r3, #1
 8017382:	430a      	orrs	r2, r1
 8017384:	e78b      	b.n	801729e <__kernel_rem_pio2+0x276>
 8017386:	3301      	adds	r3, #1
 8017388:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801738c:	2900      	cmp	r1, #0
 801738e:	d0fa      	beq.n	8017386 <__kernel_rem_pio2+0x35e>
 8017390:	9a08      	ldr	r2, [sp, #32]
 8017392:	4422      	add	r2, r4
 8017394:	00d2      	lsls	r2, r2, #3
 8017396:	a922      	add	r1, sp, #136	; 0x88
 8017398:	18e3      	adds	r3, r4, r3
 801739a:	9206      	str	r2, [sp, #24]
 801739c:	440a      	add	r2, r1
 801739e:	9302      	str	r3, [sp, #8]
 80173a0:	f10b 0108 	add.w	r1, fp, #8
 80173a4:	f102 0308 	add.w	r3, r2, #8
 80173a8:	1c66      	adds	r6, r4, #1
 80173aa:	910a      	str	r1, [sp, #40]	; 0x28
 80173ac:	2500      	movs	r5, #0
 80173ae:	930d      	str	r3, [sp, #52]	; 0x34
 80173b0:	9b02      	ldr	r3, [sp, #8]
 80173b2:	42b3      	cmp	r3, r6
 80173b4:	da04      	bge.n	80173c0 <__kernel_rem_pio2+0x398>
 80173b6:	461c      	mov	r4, r3
 80173b8:	e6a6      	b.n	8017108 <__kernel_rem_pio2+0xe0>
 80173ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173bc:	2301      	movs	r3, #1
 80173be:	e7e3      	b.n	8017388 <__kernel_rem_pio2+0x360>
 80173c0:	9b06      	ldr	r3, [sp, #24]
 80173c2:	18ef      	adds	r7, r5, r3
 80173c4:	ab22      	add	r3, sp, #136	; 0x88
 80173c6:	441f      	add	r7, r3
 80173c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80173ce:	f7e9 f8b9 	bl	8000544 <__aeabi_i2d>
 80173d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173d4:	461c      	mov	r4, r3
 80173d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173d8:	e9c7 0100 	strd	r0, r1, [r7]
 80173dc:	eb03 0b05 	add.w	fp, r3, r5
 80173e0:	2700      	movs	r7, #0
 80173e2:	f04f 0800 	mov.w	r8, #0
 80173e6:	f04f 0900 	mov.w	r9, #0
 80173ea:	9b07      	ldr	r3, [sp, #28]
 80173ec:	429f      	cmp	r7, r3
 80173ee:	dd08      	ble.n	8017402 <__kernel_rem_pio2+0x3da>
 80173f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173f2:	aa72      	add	r2, sp, #456	; 0x1c8
 80173f4:	18eb      	adds	r3, r5, r3
 80173f6:	4413      	add	r3, r2
 80173f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80173fc:	3601      	adds	r6, #1
 80173fe:	3508      	adds	r5, #8
 8017400:	e7d6      	b.n	80173b0 <__kernel_rem_pio2+0x388>
 8017402:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8017406:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801740a:	f7e9 f905 	bl	8000618 <__aeabi_dmul>
 801740e:	4602      	mov	r2, r0
 8017410:	460b      	mov	r3, r1
 8017412:	4640      	mov	r0, r8
 8017414:	4649      	mov	r1, r9
 8017416:	f7e8 ff49 	bl	80002ac <__adddf3>
 801741a:	3701      	adds	r7, #1
 801741c:	4680      	mov	r8, r0
 801741e:	4689      	mov	r9, r1
 8017420:	e7e3      	b.n	80173ea <__kernel_rem_pio2+0x3c2>
 8017422:	3d01      	subs	r5, #1
 8017424:	e741      	b.n	80172aa <__kernel_rem_pio2+0x282>
 8017426:	f1ca 0000 	rsb	r0, sl, #0
 801742a:	ec47 6b10 	vmov	d0, r6, r7
 801742e:	f000 fc2b 	bl	8017c88 <scalbn>
 8017432:	ec57 6b10 	vmov	r6, r7, d0
 8017436:	2200      	movs	r2, #0
 8017438:	4b99      	ldr	r3, [pc, #612]	; (80176a0 <__kernel_rem_pio2+0x678>)
 801743a:	ee10 0a10 	vmov	r0, s0
 801743e:	4639      	mov	r1, r7
 8017440:	f7e9 fb70 	bl	8000b24 <__aeabi_dcmpge>
 8017444:	b1f8      	cbz	r0, 8017486 <__kernel_rem_pio2+0x45e>
 8017446:	2200      	movs	r2, #0
 8017448:	4b96      	ldr	r3, [pc, #600]	; (80176a4 <__kernel_rem_pio2+0x67c>)
 801744a:	4630      	mov	r0, r6
 801744c:	4639      	mov	r1, r7
 801744e:	f7e9 f8e3 	bl	8000618 <__aeabi_dmul>
 8017452:	f7e9 fb91 	bl	8000b78 <__aeabi_d2iz>
 8017456:	4680      	mov	r8, r0
 8017458:	f7e9 f874 	bl	8000544 <__aeabi_i2d>
 801745c:	2200      	movs	r2, #0
 801745e:	4b90      	ldr	r3, [pc, #576]	; (80176a0 <__kernel_rem_pio2+0x678>)
 8017460:	f7e9 f8da 	bl	8000618 <__aeabi_dmul>
 8017464:	460b      	mov	r3, r1
 8017466:	4602      	mov	r2, r0
 8017468:	4639      	mov	r1, r7
 801746a:	4630      	mov	r0, r6
 801746c:	f7e8 ff1c 	bl	80002a8 <__aeabi_dsub>
 8017470:	f7e9 fb82 	bl	8000b78 <__aeabi_d2iz>
 8017474:	1c65      	adds	r5, r4, #1
 8017476:	ab0e      	add	r3, sp, #56	; 0x38
 8017478:	f10a 0a18 	add.w	sl, sl, #24
 801747c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017480:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8017484:	e719      	b.n	80172ba <__kernel_rem_pio2+0x292>
 8017486:	4630      	mov	r0, r6
 8017488:	4639      	mov	r1, r7
 801748a:	f7e9 fb75 	bl	8000b78 <__aeabi_d2iz>
 801748e:	ab0e      	add	r3, sp, #56	; 0x38
 8017490:	4625      	mov	r5, r4
 8017492:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017496:	e710      	b.n	80172ba <__kernel_rem_pio2+0x292>
 8017498:	ab0e      	add	r3, sp, #56	; 0x38
 801749a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801749e:	f7e9 f851 	bl	8000544 <__aeabi_i2d>
 80174a2:	4642      	mov	r2, r8
 80174a4:	464b      	mov	r3, r9
 80174a6:	f7e9 f8b7 	bl	8000618 <__aeabi_dmul>
 80174aa:	2200      	movs	r2, #0
 80174ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80174b0:	4b7c      	ldr	r3, [pc, #496]	; (80176a4 <__kernel_rem_pio2+0x67c>)
 80174b2:	4640      	mov	r0, r8
 80174b4:	4649      	mov	r1, r9
 80174b6:	f7e9 f8af 	bl	8000618 <__aeabi_dmul>
 80174ba:	3f01      	subs	r7, #1
 80174bc:	4680      	mov	r8, r0
 80174be:	4689      	mov	r9, r1
 80174c0:	e708      	b.n	80172d4 <__kernel_rem_pio2+0x2ac>
 80174c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80174c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80174ce:	f7e9 f8a3 	bl	8000618 <__aeabi_dmul>
 80174d2:	4602      	mov	r2, r0
 80174d4:	460b      	mov	r3, r1
 80174d6:	4640      	mov	r0, r8
 80174d8:	4649      	mov	r1, r9
 80174da:	f7e8 fee7 	bl	80002ac <__adddf3>
 80174de:	3701      	adds	r7, #1
 80174e0:	4680      	mov	r8, r0
 80174e2:	4689      	mov	r9, r1
 80174e4:	9b04      	ldr	r3, [sp, #16]
 80174e6:	429f      	cmp	r7, r3
 80174e8:	dc01      	bgt.n	80174ee <__kernel_rem_pio2+0x4c6>
 80174ea:	45ba      	cmp	sl, r7
 80174ec:	dae9      	bge.n	80174c2 <__kernel_rem_pio2+0x49a>
 80174ee:	ab4a      	add	r3, sp, #296	; 0x128
 80174f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80174f4:	e9c3 8900 	strd	r8, r9, [r3]
 80174f8:	f10a 0a01 	add.w	sl, sl, #1
 80174fc:	3e08      	subs	r6, #8
 80174fe:	e6f0      	b.n	80172e2 <__kernel_rem_pio2+0x2ba>
 8017500:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017502:	2b03      	cmp	r3, #3
 8017504:	d85b      	bhi.n	80175be <__kernel_rem_pio2+0x596>
 8017506:	e8df f003 	tbb	[pc, r3]
 801750a:	264a      	.short	0x264a
 801750c:	0226      	.short	0x0226
 801750e:	ab9a      	add	r3, sp, #616	; 0x268
 8017510:	441c      	add	r4, r3
 8017512:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017516:	46a2      	mov	sl, r4
 8017518:	46ab      	mov	fp, r5
 801751a:	f1bb 0f00 	cmp.w	fp, #0
 801751e:	dc6c      	bgt.n	80175fa <__kernel_rem_pio2+0x5d2>
 8017520:	46a2      	mov	sl, r4
 8017522:	46ab      	mov	fp, r5
 8017524:	f1bb 0f01 	cmp.w	fp, #1
 8017528:	f300 8086 	bgt.w	8017638 <__kernel_rem_pio2+0x610>
 801752c:	2000      	movs	r0, #0
 801752e:	2100      	movs	r1, #0
 8017530:	2d01      	cmp	r5, #1
 8017532:	f300 80a0 	bgt.w	8017676 <__kernel_rem_pio2+0x64e>
 8017536:	9b02      	ldr	r3, [sp, #8]
 8017538:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801753c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017540:	2b00      	cmp	r3, #0
 8017542:	f040 809e 	bne.w	8017682 <__kernel_rem_pio2+0x65a>
 8017546:	9b01      	ldr	r3, [sp, #4]
 8017548:	e9c3 7800 	strd	r7, r8, [r3]
 801754c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017550:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017554:	e033      	b.n	80175be <__kernel_rem_pio2+0x596>
 8017556:	3408      	adds	r4, #8
 8017558:	ab4a      	add	r3, sp, #296	; 0x128
 801755a:	441c      	add	r4, r3
 801755c:	462e      	mov	r6, r5
 801755e:	2000      	movs	r0, #0
 8017560:	2100      	movs	r1, #0
 8017562:	2e00      	cmp	r6, #0
 8017564:	da3a      	bge.n	80175dc <__kernel_rem_pio2+0x5b4>
 8017566:	9b02      	ldr	r3, [sp, #8]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d03d      	beq.n	80175e8 <__kernel_rem_pio2+0x5c0>
 801756c:	4602      	mov	r2, r0
 801756e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017572:	9c01      	ldr	r4, [sp, #4]
 8017574:	e9c4 2300 	strd	r2, r3, [r4]
 8017578:	4602      	mov	r2, r0
 801757a:	460b      	mov	r3, r1
 801757c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8017580:	f7e8 fe92 	bl	80002a8 <__aeabi_dsub>
 8017584:	ae4c      	add	r6, sp, #304	; 0x130
 8017586:	2401      	movs	r4, #1
 8017588:	42a5      	cmp	r5, r4
 801758a:	da30      	bge.n	80175ee <__kernel_rem_pio2+0x5c6>
 801758c:	9b02      	ldr	r3, [sp, #8]
 801758e:	b113      	cbz	r3, 8017596 <__kernel_rem_pio2+0x56e>
 8017590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017594:	4619      	mov	r1, r3
 8017596:	9b01      	ldr	r3, [sp, #4]
 8017598:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801759c:	e00f      	b.n	80175be <__kernel_rem_pio2+0x596>
 801759e:	ab9a      	add	r3, sp, #616	; 0x268
 80175a0:	441c      	add	r4, r3
 80175a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80175a6:	2000      	movs	r0, #0
 80175a8:	2100      	movs	r1, #0
 80175aa:	2d00      	cmp	r5, #0
 80175ac:	da10      	bge.n	80175d0 <__kernel_rem_pio2+0x5a8>
 80175ae:	9b02      	ldr	r3, [sp, #8]
 80175b0:	b113      	cbz	r3, 80175b8 <__kernel_rem_pio2+0x590>
 80175b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175b6:	4619      	mov	r1, r3
 80175b8:	9b01      	ldr	r3, [sp, #4]
 80175ba:	e9c3 0100 	strd	r0, r1, [r3]
 80175be:	9b06      	ldr	r3, [sp, #24]
 80175c0:	f003 0007 	and.w	r0, r3, #7
 80175c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80175c8:	ecbd 8b02 	vpop	{d8}
 80175cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80175d4:	f7e8 fe6a 	bl	80002ac <__adddf3>
 80175d8:	3d01      	subs	r5, #1
 80175da:	e7e6      	b.n	80175aa <__kernel_rem_pio2+0x582>
 80175dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80175e0:	f7e8 fe64 	bl	80002ac <__adddf3>
 80175e4:	3e01      	subs	r6, #1
 80175e6:	e7bc      	b.n	8017562 <__kernel_rem_pio2+0x53a>
 80175e8:	4602      	mov	r2, r0
 80175ea:	460b      	mov	r3, r1
 80175ec:	e7c1      	b.n	8017572 <__kernel_rem_pio2+0x54a>
 80175ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80175f2:	f7e8 fe5b 	bl	80002ac <__adddf3>
 80175f6:	3401      	adds	r4, #1
 80175f8:	e7c6      	b.n	8017588 <__kernel_rem_pio2+0x560>
 80175fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80175fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017602:	4640      	mov	r0, r8
 8017604:	ec53 2b17 	vmov	r2, r3, d7
 8017608:	4649      	mov	r1, r9
 801760a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801760e:	f7e8 fe4d 	bl	80002ac <__adddf3>
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	4606      	mov	r6, r0
 8017618:	460f      	mov	r7, r1
 801761a:	4640      	mov	r0, r8
 801761c:	4649      	mov	r1, r9
 801761e:	f7e8 fe43 	bl	80002a8 <__aeabi_dsub>
 8017622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017626:	f7e8 fe41 	bl	80002ac <__adddf3>
 801762a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801762e:	e9ca 0100 	strd	r0, r1, [sl]
 8017632:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8017636:	e770      	b.n	801751a <__kernel_rem_pio2+0x4f2>
 8017638:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801763c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017640:	4630      	mov	r0, r6
 8017642:	ec53 2b17 	vmov	r2, r3, d7
 8017646:	4639      	mov	r1, r7
 8017648:	ed8d 7b04 	vstr	d7, [sp, #16]
 801764c:	f7e8 fe2e 	bl	80002ac <__adddf3>
 8017650:	4602      	mov	r2, r0
 8017652:	460b      	mov	r3, r1
 8017654:	4680      	mov	r8, r0
 8017656:	4689      	mov	r9, r1
 8017658:	4630      	mov	r0, r6
 801765a:	4639      	mov	r1, r7
 801765c:	f7e8 fe24 	bl	80002a8 <__aeabi_dsub>
 8017660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017664:	f7e8 fe22 	bl	80002ac <__adddf3>
 8017668:	f10b 3bff 	add.w	fp, fp, #4294967295
 801766c:	e9ca 0100 	strd	r0, r1, [sl]
 8017670:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8017674:	e756      	b.n	8017524 <__kernel_rem_pio2+0x4fc>
 8017676:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801767a:	f7e8 fe17 	bl	80002ac <__adddf3>
 801767e:	3d01      	subs	r5, #1
 8017680:	e756      	b.n	8017530 <__kernel_rem_pio2+0x508>
 8017682:	9b01      	ldr	r3, [sp, #4]
 8017684:	9a01      	ldr	r2, [sp, #4]
 8017686:	601f      	str	r7, [r3, #0]
 8017688:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801768c:	605c      	str	r4, [r3, #4]
 801768e:	609d      	str	r5, [r3, #8]
 8017690:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017694:	60d3      	str	r3, [r2, #12]
 8017696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801769a:	6110      	str	r0, [r2, #16]
 801769c:	6153      	str	r3, [r2, #20]
 801769e:	e78e      	b.n	80175be <__kernel_rem_pio2+0x596>
 80176a0:	41700000 	.word	0x41700000
 80176a4:	3e700000 	.word	0x3e700000

080176a8 <__kernel_sin>:
 80176a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ac:	ec55 4b10 	vmov	r4, r5, d0
 80176b0:	b085      	sub	sp, #20
 80176b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80176b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80176ba:	ed8d 1b00 	vstr	d1, [sp]
 80176be:	9002      	str	r0, [sp, #8]
 80176c0:	da06      	bge.n	80176d0 <__kernel_sin+0x28>
 80176c2:	ee10 0a10 	vmov	r0, s0
 80176c6:	4629      	mov	r1, r5
 80176c8:	f7e9 fa56 	bl	8000b78 <__aeabi_d2iz>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	d051      	beq.n	8017774 <__kernel_sin+0xcc>
 80176d0:	4622      	mov	r2, r4
 80176d2:	462b      	mov	r3, r5
 80176d4:	4620      	mov	r0, r4
 80176d6:	4629      	mov	r1, r5
 80176d8:	f7e8 ff9e 	bl	8000618 <__aeabi_dmul>
 80176dc:	4682      	mov	sl, r0
 80176de:	468b      	mov	fp, r1
 80176e0:	4602      	mov	r2, r0
 80176e2:	460b      	mov	r3, r1
 80176e4:	4620      	mov	r0, r4
 80176e6:	4629      	mov	r1, r5
 80176e8:	f7e8 ff96 	bl	8000618 <__aeabi_dmul>
 80176ec:	a341      	add	r3, pc, #260	; (adr r3, 80177f4 <__kernel_sin+0x14c>)
 80176ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f2:	4680      	mov	r8, r0
 80176f4:	4689      	mov	r9, r1
 80176f6:	4650      	mov	r0, sl
 80176f8:	4659      	mov	r1, fp
 80176fa:	f7e8 ff8d 	bl	8000618 <__aeabi_dmul>
 80176fe:	a33f      	add	r3, pc, #252	; (adr r3, 80177fc <__kernel_sin+0x154>)
 8017700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017704:	f7e8 fdd0 	bl	80002a8 <__aeabi_dsub>
 8017708:	4652      	mov	r2, sl
 801770a:	465b      	mov	r3, fp
 801770c:	f7e8 ff84 	bl	8000618 <__aeabi_dmul>
 8017710:	a33c      	add	r3, pc, #240	; (adr r3, 8017804 <__kernel_sin+0x15c>)
 8017712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017716:	f7e8 fdc9 	bl	80002ac <__adddf3>
 801771a:	4652      	mov	r2, sl
 801771c:	465b      	mov	r3, fp
 801771e:	f7e8 ff7b 	bl	8000618 <__aeabi_dmul>
 8017722:	a33a      	add	r3, pc, #232	; (adr r3, 801780c <__kernel_sin+0x164>)
 8017724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017728:	f7e8 fdbe 	bl	80002a8 <__aeabi_dsub>
 801772c:	4652      	mov	r2, sl
 801772e:	465b      	mov	r3, fp
 8017730:	f7e8 ff72 	bl	8000618 <__aeabi_dmul>
 8017734:	a337      	add	r3, pc, #220	; (adr r3, 8017814 <__kernel_sin+0x16c>)
 8017736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773a:	f7e8 fdb7 	bl	80002ac <__adddf3>
 801773e:	9b02      	ldr	r3, [sp, #8]
 8017740:	4606      	mov	r6, r0
 8017742:	460f      	mov	r7, r1
 8017744:	b9db      	cbnz	r3, 801777e <__kernel_sin+0xd6>
 8017746:	4602      	mov	r2, r0
 8017748:	460b      	mov	r3, r1
 801774a:	4650      	mov	r0, sl
 801774c:	4659      	mov	r1, fp
 801774e:	f7e8 ff63 	bl	8000618 <__aeabi_dmul>
 8017752:	a325      	add	r3, pc, #148	; (adr r3, 80177e8 <__kernel_sin+0x140>)
 8017754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017758:	f7e8 fda6 	bl	80002a8 <__aeabi_dsub>
 801775c:	4642      	mov	r2, r8
 801775e:	464b      	mov	r3, r9
 8017760:	f7e8 ff5a 	bl	8000618 <__aeabi_dmul>
 8017764:	4602      	mov	r2, r0
 8017766:	460b      	mov	r3, r1
 8017768:	4620      	mov	r0, r4
 801776a:	4629      	mov	r1, r5
 801776c:	f7e8 fd9e 	bl	80002ac <__adddf3>
 8017770:	4604      	mov	r4, r0
 8017772:	460d      	mov	r5, r1
 8017774:	ec45 4b10 	vmov	d0, r4, r5
 8017778:	b005      	add	sp, #20
 801777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777e:	2200      	movs	r2, #0
 8017780:	4b1b      	ldr	r3, [pc, #108]	; (80177f0 <__kernel_sin+0x148>)
 8017782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017786:	f7e8 ff47 	bl	8000618 <__aeabi_dmul>
 801778a:	4632      	mov	r2, r6
 801778c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017790:	463b      	mov	r3, r7
 8017792:	4640      	mov	r0, r8
 8017794:	4649      	mov	r1, r9
 8017796:	f7e8 ff3f 	bl	8000618 <__aeabi_dmul>
 801779a:	4602      	mov	r2, r0
 801779c:	460b      	mov	r3, r1
 801779e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177a2:	f7e8 fd81 	bl	80002a8 <__aeabi_dsub>
 80177a6:	4652      	mov	r2, sl
 80177a8:	465b      	mov	r3, fp
 80177aa:	f7e8 ff35 	bl	8000618 <__aeabi_dmul>
 80177ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177b2:	f7e8 fd79 	bl	80002a8 <__aeabi_dsub>
 80177b6:	a30c      	add	r3, pc, #48	; (adr r3, 80177e8 <__kernel_sin+0x140>)
 80177b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177bc:	4606      	mov	r6, r0
 80177be:	460f      	mov	r7, r1
 80177c0:	4640      	mov	r0, r8
 80177c2:	4649      	mov	r1, r9
 80177c4:	f7e8 ff28 	bl	8000618 <__aeabi_dmul>
 80177c8:	4602      	mov	r2, r0
 80177ca:	460b      	mov	r3, r1
 80177cc:	4630      	mov	r0, r6
 80177ce:	4639      	mov	r1, r7
 80177d0:	f7e8 fd6c 	bl	80002ac <__adddf3>
 80177d4:	4602      	mov	r2, r0
 80177d6:	460b      	mov	r3, r1
 80177d8:	4620      	mov	r0, r4
 80177da:	4629      	mov	r1, r5
 80177dc:	f7e8 fd64 	bl	80002a8 <__aeabi_dsub>
 80177e0:	e7c6      	b.n	8017770 <__kernel_sin+0xc8>
 80177e2:	bf00      	nop
 80177e4:	f3af 8000 	nop.w
 80177e8:	55555549 	.word	0x55555549
 80177ec:	3fc55555 	.word	0x3fc55555
 80177f0:	3fe00000 	.word	0x3fe00000
 80177f4:	5acfd57c 	.word	0x5acfd57c
 80177f8:	3de5d93a 	.word	0x3de5d93a
 80177fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8017800:	3e5ae5e6 	.word	0x3e5ae5e6
 8017804:	57b1fe7d 	.word	0x57b1fe7d
 8017808:	3ec71de3 	.word	0x3ec71de3
 801780c:	19c161d5 	.word	0x19c161d5
 8017810:	3f2a01a0 	.word	0x3f2a01a0
 8017814:	1110f8a6 	.word	0x1110f8a6
 8017818:	3f811111 	.word	0x3f811111
 801781c:	00000000 	.word	0x00000000

08017820 <atan>:
 8017820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017824:	ec55 4b10 	vmov	r4, r5, d0
 8017828:	4bc3      	ldr	r3, [pc, #780]	; (8017b38 <atan+0x318>)
 801782a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801782e:	429e      	cmp	r6, r3
 8017830:	46ab      	mov	fp, r5
 8017832:	dd18      	ble.n	8017866 <atan+0x46>
 8017834:	4bc1      	ldr	r3, [pc, #772]	; (8017b3c <atan+0x31c>)
 8017836:	429e      	cmp	r6, r3
 8017838:	dc01      	bgt.n	801783e <atan+0x1e>
 801783a:	d109      	bne.n	8017850 <atan+0x30>
 801783c:	b144      	cbz	r4, 8017850 <atan+0x30>
 801783e:	4622      	mov	r2, r4
 8017840:	462b      	mov	r3, r5
 8017842:	4620      	mov	r0, r4
 8017844:	4629      	mov	r1, r5
 8017846:	f7e8 fd31 	bl	80002ac <__adddf3>
 801784a:	4604      	mov	r4, r0
 801784c:	460d      	mov	r5, r1
 801784e:	e006      	b.n	801785e <atan+0x3e>
 8017850:	f1bb 0f00 	cmp.w	fp, #0
 8017854:	f340 8131 	ble.w	8017aba <atan+0x29a>
 8017858:	a59b      	add	r5, pc, #620	; (adr r5, 8017ac8 <atan+0x2a8>)
 801785a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801785e:	ec45 4b10 	vmov	d0, r4, r5
 8017862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017866:	4bb6      	ldr	r3, [pc, #728]	; (8017b40 <atan+0x320>)
 8017868:	429e      	cmp	r6, r3
 801786a:	dc14      	bgt.n	8017896 <atan+0x76>
 801786c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017870:	429e      	cmp	r6, r3
 8017872:	dc0d      	bgt.n	8017890 <atan+0x70>
 8017874:	a396      	add	r3, pc, #600	; (adr r3, 8017ad0 <atan+0x2b0>)
 8017876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787a:	ee10 0a10 	vmov	r0, s0
 801787e:	4629      	mov	r1, r5
 8017880:	f7e8 fd14 	bl	80002ac <__adddf3>
 8017884:	2200      	movs	r2, #0
 8017886:	4baf      	ldr	r3, [pc, #700]	; (8017b44 <atan+0x324>)
 8017888:	f7e9 f956 	bl	8000b38 <__aeabi_dcmpgt>
 801788c:	2800      	cmp	r0, #0
 801788e:	d1e6      	bne.n	801785e <atan+0x3e>
 8017890:	f04f 3aff 	mov.w	sl, #4294967295
 8017894:	e02b      	b.n	80178ee <atan+0xce>
 8017896:	f000 f963 	bl	8017b60 <fabs>
 801789a:	4bab      	ldr	r3, [pc, #684]	; (8017b48 <atan+0x328>)
 801789c:	429e      	cmp	r6, r3
 801789e:	ec55 4b10 	vmov	r4, r5, d0
 80178a2:	f300 80bf 	bgt.w	8017a24 <atan+0x204>
 80178a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80178aa:	429e      	cmp	r6, r3
 80178ac:	f300 80a0 	bgt.w	80179f0 <atan+0x1d0>
 80178b0:	ee10 2a10 	vmov	r2, s0
 80178b4:	ee10 0a10 	vmov	r0, s0
 80178b8:	462b      	mov	r3, r5
 80178ba:	4629      	mov	r1, r5
 80178bc:	f7e8 fcf6 	bl	80002ac <__adddf3>
 80178c0:	2200      	movs	r2, #0
 80178c2:	4ba0      	ldr	r3, [pc, #640]	; (8017b44 <atan+0x324>)
 80178c4:	f7e8 fcf0 	bl	80002a8 <__aeabi_dsub>
 80178c8:	2200      	movs	r2, #0
 80178ca:	4606      	mov	r6, r0
 80178cc:	460f      	mov	r7, r1
 80178ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80178d2:	4620      	mov	r0, r4
 80178d4:	4629      	mov	r1, r5
 80178d6:	f7e8 fce9 	bl	80002ac <__adddf3>
 80178da:	4602      	mov	r2, r0
 80178dc:	460b      	mov	r3, r1
 80178de:	4630      	mov	r0, r6
 80178e0:	4639      	mov	r1, r7
 80178e2:	f7e8 ffc3 	bl	800086c <__aeabi_ddiv>
 80178e6:	f04f 0a00 	mov.w	sl, #0
 80178ea:	4604      	mov	r4, r0
 80178ec:	460d      	mov	r5, r1
 80178ee:	4622      	mov	r2, r4
 80178f0:	462b      	mov	r3, r5
 80178f2:	4620      	mov	r0, r4
 80178f4:	4629      	mov	r1, r5
 80178f6:	f7e8 fe8f 	bl	8000618 <__aeabi_dmul>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	4680      	mov	r8, r0
 8017900:	4689      	mov	r9, r1
 8017902:	f7e8 fe89 	bl	8000618 <__aeabi_dmul>
 8017906:	a374      	add	r3, pc, #464	; (adr r3, 8017ad8 <atan+0x2b8>)
 8017908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790c:	4606      	mov	r6, r0
 801790e:	460f      	mov	r7, r1
 8017910:	f7e8 fe82 	bl	8000618 <__aeabi_dmul>
 8017914:	a372      	add	r3, pc, #456	; (adr r3, 8017ae0 <atan+0x2c0>)
 8017916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801791a:	f7e8 fcc7 	bl	80002ac <__adddf3>
 801791e:	4632      	mov	r2, r6
 8017920:	463b      	mov	r3, r7
 8017922:	f7e8 fe79 	bl	8000618 <__aeabi_dmul>
 8017926:	a370      	add	r3, pc, #448	; (adr r3, 8017ae8 <atan+0x2c8>)
 8017928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801792c:	f7e8 fcbe 	bl	80002ac <__adddf3>
 8017930:	4632      	mov	r2, r6
 8017932:	463b      	mov	r3, r7
 8017934:	f7e8 fe70 	bl	8000618 <__aeabi_dmul>
 8017938:	a36d      	add	r3, pc, #436	; (adr r3, 8017af0 <atan+0x2d0>)
 801793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793e:	f7e8 fcb5 	bl	80002ac <__adddf3>
 8017942:	4632      	mov	r2, r6
 8017944:	463b      	mov	r3, r7
 8017946:	f7e8 fe67 	bl	8000618 <__aeabi_dmul>
 801794a:	a36b      	add	r3, pc, #428	; (adr r3, 8017af8 <atan+0x2d8>)
 801794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017950:	f7e8 fcac 	bl	80002ac <__adddf3>
 8017954:	4632      	mov	r2, r6
 8017956:	463b      	mov	r3, r7
 8017958:	f7e8 fe5e 	bl	8000618 <__aeabi_dmul>
 801795c:	a368      	add	r3, pc, #416	; (adr r3, 8017b00 <atan+0x2e0>)
 801795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017962:	f7e8 fca3 	bl	80002ac <__adddf3>
 8017966:	4642      	mov	r2, r8
 8017968:	464b      	mov	r3, r9
 801796a:	f7e8 fe55 	bl	8000618 <__aeabi_dmul>
 801796e:	a366      	add	r3, pc, #408	; (adr r3, 8017b08 <atan+0x2e8>)
 8017970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017974:	4680      	mov	r8, r0
 8017976:	4689      	mov	r9, r1
 8017978:	4630      	mov	r0, r6
 801797a:	4639      	mov	r1, r7
 801797c:	f7e8 fe4c 	bl	8000618 <__aeabi_dmul>
 8017980:	a363      	add	r3, pc, #396	; (adr r3, 8017b10 <atan+0x2f0>)
 8017982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017986:	f7e8 fc8f 	bl	80002a8 <__aeabi_dsub>
 801798a:	4632      	mov	r2, r6
 801798c:	463b      	mov	r3, r7
 801798e:	f7e8 fe43 	bl	8000618 <__aeabi_dmul>
 8017992:	a361      	add	r3, pc, #388	; (adr r3, 8017b18 <atan+0x2f8>)
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	f7e8 fc86 	bl	80002a8 <__aeabi_dsub>
 801799c:	4632      	mov	r2, r6
 801799e:	463b      	mov	r3, r7
 80179a0:	f7e8 fe3a 	bl	8000618 <__aeabi_dmul>
 80179a4:	a35e      	add	r3, pc, #376	; (adr r3, 8017b20 <atan+0x300>)
 80179a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179aa:	f7e8 fc7d 	bl	80002a8 <__aeabi_dsub>
 80179ae:	4632      	mov	r2, r6
 80179b0:	463b      	mov	r3, r7
 80179b2:	f7e8 fe31 	bl	8000618 <__aeabi_dmul>
 80179b6:	a35c      	add	r3, pc, #368	; (adr r3, 8017b28 <atan+0x308>)
 80179b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179bc:	f7e8 fc74 	bl	80002a8 <__aeabi_dsub>
 80179c0:	4632      	mov	r2, r6
 80179c2:	463b      	mov	r3, r7
 80179c4:	f7e8 fe28 	bl	8000618 <__aeabi_dmul>
 80179c8:	4602      	mov	r2, r0
 80179ca:	460b      	mov	r3, r1
 80179cc:	4640      	mov	r0, r8
 80179ce:	4649      	mov	r1, r9
 80179d0:	f7e8 fc6c 	bl	80002ac <__adddf3>
 80179d4:	4622      	mov	r2, r4
 80179d6:	462b      	mov	r3, r5
 80179d8:	f7e8 fe1e 	bl	8000618 <__aeabi_dmul>
 80179dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80179e0:	4602      	mov	r2, r0
 80179e2:	460b      	mov	r3, r1
 80179e4:	d14b      	bne.n	8017a7e <atan+0x25e>
 80179e6:	4620      	mov	r0, r4
 80179e8:	4629      	mov	r1, r5
 80179ea:	f7e8 fc5d 	bl	80002a8 <__aeabi_dsub>
 80179ee:	e72c      	b.n	801784a <atan+0x2a>
 80179f0:	ee10 0a10 	vmov	r0, s0
 80179f4:	2200      	movs	r2, #0
 80179f6:	4b53      	ldr	r3, [pc, #332]	; (8017b44 <atan+0x324>)
 80179f8:	4629      	mov	r1, r5
 80179fa:	f7e8 fc55 	bl	80002a8 <__aeabi_dsub>
 80179fe:	2200      	movs	r2, #0
 8017a00:	4606      	mov	r6, r0
 8017a02:	460f      	mov	r7, r1
 8017a04:	4b4f      	ldr	r3, [pc, #316]	; (8017b44 <atan+0x324>)
 8017a06:	4620      	mov	r0, r4
 8017a08:	4629      	mov	r1, r5
 8017a0a:	f7e8 fc4f 	bl	80002ac <__adddf3>
 8017a0e:	4602      	mov	r2, r0
 8017a10:	460b      	mov	r3, r1
 8017a12:	4630      	mov	r0, r6
 8017a14:	4639      	mov	r1, r7
 8017a16:	f7e8 ff29 	bl	800086c <__aeabi_ddiv>
 8017a1a:	f04f 0a01 	mov.w	sl, #1
 8017a1e:	4604      	mov	r4, r0
 8017a20:	460d      	mov	r5, r1
 8017a22:	e764      	b.n	80178ee <atan+0xce>
 8017a24:	4b49      	ldr	r3, [pc, #292]	; (8017b4c <atan+0x32c>)
 8017a26:	429e      	cmp	r6, r3
 8017a28:	dc1d      	bgt.n	8017a66 <atan+0x246>
 8017a2a:	ee10 0a10 	vmov	r0, s0
 8017a2e:	2200      	movs	r2, #0
 8017a30:	4b47      	ldr	r3, [pc, #284]	; (8017b50 <atan+0x330>)
 8017a32:	4629      	mov	r1, r5
 8017a34:	f7e8 fc38 	bl	80002a8 <__aeabi_dsub>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	4606      	mov	r6, r0
 8017a3c:	460f      	mov	r7, r1
 8017a3e:	4b44      	ldr	r3, [pc, #272]	; (8017b50 <atan+0x330>)
 8017a40:	4620      	mov	r0, r4
 8017a42:	4629      	mov	r1, r5
 8017a44:	f7e8 fde8 	bl	8000618 <__aeabi_dmul>
 8017a48:	2200      	movs	r2, #0
 8017a4a:	4b3e      	ldr	r3, [pc, #248]	; (8017b44 <atan+0x324>)
 8017a4c:	f7e8 fc2e 	bl	80002ac <__adddf3>
 8017a50:	4602      	mov	r2, r0
 8017a52:	460b      	mov	r3, r1
 8017a54:	4630      	mov	r0, r6
 8017a56:	4639      	mov	r1, r7
 8017a58:	f7e8 ff08 	bl	800086c <__aeabi_ddiv>
 8017a5c:	f04f 0a02 	mov.w	sl, #2
 8017a60:	4604      	mov	r4, r0
 8017a62:	460d      	mov	r5, r1
 8017a64:	e743      	b.n	80178ee <atan+0xce>
 8017a66:	462b      	mov	r3, r5
 8017a68:	ee10 2a10 	vmov	r2, s0
 8017a6c:	2000      	movs	r0, #0
 8017a6e:	4939      	ldr	r1, [pc, #228]	; (8017b54 <atan+0x334>)
 8017a70:	f7e8 fefc 	bl	800086c <__aeabi_ddiv>
 8017a74:	f04f 0a03 	mov.w	sl, #3
 8017a78:	4604      	mov	r4, r0
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	e737      	b.n	80178ee <atan+0xce>
 8017a7e:	4b36      	ldr	r3, [pc, #216]	; (8017b58 <atan+0x338>)
 8017a80:	4e36      	ldr	r6, [pc, #216]	; (8017b5c <atan+0x33c>)
 8017a82:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8017a86:	4456      	add	r6, sl
 8017a88:	449a      	add	sl, r3
 8017a8a:	e9da 2300 	ldrd	r2, r3, [sl]
 8017a8e:	f7e8 fc0b 	bl	80002a8 <__aeabi_dsub>
 8017a92:	4622      	mov	r2, r4
 8017a94:	462b      	mov	r3, r5
 8017a96:	f7e8 fc07 	bl	80002a8 <__aeabi_dsub>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017aa2:	f7e8 fc01 	bl	80002a8 <__aeabi_dsub>
 8017aa6:	f1bb 0f00 	cmp.w	fp, #0
 8017aaa:	4604      	mov	r4, r0
 8017aac:	460d      	mov	r5, r1
 8017aae:	f6bf aed6 	bge.w	801785e <atan+0x3e>
 8017ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ab6:	461d      	mov	r5, r3
 8017ab8:	e6d1      	b.n	801785e <atan+0x3e>
 8017aba:	a51d      	add	r5, pc, #116	; (adr r5, 8017b30 <atan+0x310>)
 8017abc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017ac0:	e6cd      	b.n	801785e <atan+0x3e>
 8017ac2:	bf00      	nop
 8017ac4:	f3af 8000 	nop.w
 8017ac8:	54442d18 	.word	0x54442d18
 8017acc:	3ff921fb 	.word	0x3ff921fb
 8017ad0:	8800759c 	.word	0x8800759c
 8017ad4:	7e37e43c 	.word	0x7e37e43c
 8017ad8:	e322da11 	.word	0xe322da11
 8017adc:	3f90ad3a 	.word	0x3f90ad3a
 8017ae0:	24760deb 	.word	0x24760deb
 8017ae4:	3fa97b4b 	.word	0x3fa97b4b
 8017ae8:	a0d03d51 	.word	0xa0d03d51
 8017aec:	3fb10d66 	.word	0x3fb10d66
 8017af0:	c54c206e 	.word	0xc54c206e
 8017af4:	3fb745cd 	.word	0x3fb745cd
 8017af8:	920083ff 	.word	0x920083ff
 8017afc:	3fc24924 	.word	0x3fc24924
 8017b00:	5555550d 	.word	0x5555550d
 8017b04:	3fd55555 	.word	0x3fd55555
 8017b08:	2c6a6c2f 	.word	0x2c6a6c2f
 8017b0c:	bfa2b444 	.word	0xbfa2b444
 8017b10:	52defd9a 	.word	0x52defd9a
 8017b14:	3fadde2d 	.word	0x3fadde2d
 8017b18:	af749a6d 	.word	0xaf749a6d
 8017b1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017b20:	fe231671 	.word	0xfe231671
 8017b24:	3fbc71c6 	.word	0x3fbc71c6
 8017b28:	9998ebc4 	.word	0x9998ebc4
 8017b2c:	3fc99999 	.word	0x3fc99999
 8017b30:	54442d18 	.word	0x54442d18
 8017b34:	bff921fb 	.word	0xbff921fb
 8017b38:	440fffff 	.word	0x440fffff
 8017b3c:	7ff00000 	.word	0x7ff00000
 8017b40:	3fdbffff 	.word	0x3fdbffff
 8017b44:	3ff00000 	.word	0x3ff00000
 8017b48:	3ff2ffff 	.word	0x3ff2ffff
 8017b4c:	40037fff 	.word	0x40037fff
 8017b50:	3ff80000 	.word	0x3ff80000
 8017b54:	bff00000 	.word	0xbff00000
 8017b58:	080187e8 	.word	0x080187e8
 8017b5c:	080187c8 	.word	0x080187c8

08017b60 <fabs>:
 8017b60:	ec51 0b10 	vmov	r0, r1, d0
 8017b64:	ee10 2a10 	vmov	r2, s0
 8017b68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017b6c:	ec43 2b10 	vmov	d0, r2, r3
 8017b70:	4770      	bx	lr
 8017b72:	0000      	movs	r0, r0
 8017b74:	0000      	movs	r0, r0
	...

08017b78 <floor>:
 8017b78:	ec51 0b10 	vmov	r0, r1, d0
 8017b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017b84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017b88:	2e13      	cmp	r6, #19
 8017b8a:	460c      	mov	r4, r1
 8017b8c:	ee10 5a10 	vmov	r5, s0
 8017b90:	4680      	mov	r8, r0
 8017b92:	dc34      	bgt.n	8017bfe <floor+0x86>
 8017b94:	2e00      	cmp	r6, #0
 8017b96:	da16      	bge.n	8017bc6 <floor+0x4e>
 8017b98:	a335      	add	r3, pc, #212	; (adr r3, 8017c70 <floor+0xf8>)
 8017b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9e:	f7e8 fb85 	bl	80002ac <__adddf3>
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	f7e8 ffc7 	bl	8000b38 <__aeabi_dcmpgt>
 8017baa:	b148      	cbz	r0, 8017bc0 <floor+0x48>
 8017bac:	2c00      	cmp	r4, #0
 8017bae:	da59      	bge.n	8017c64 <floor+0xec>
 8017bb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017bb4:	4a30      	ldr	r2, [pc, #192]	; (8017c78 <floor+0x100>)
 8017bb6:	432b      	orrs	r3, r5
 8017bb8:	2500      	movs	r5, #0
 8017bba:	42ab      	cmp	r3, r5
 8017bbc:	bf18      	it	ne
 8017bbe:	4614      	movne	r4, r2
 8017bc0:	4621      	mov	r1, r4
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	e025      	b.n	8017c12 <floor+0x9a>
 8017bc6:	4f2d      	ldr	r7, [pc, #180]	; (8017c7c <floor+0x104>)
 8017bc8:	4137      	asrs	r7, r6
 8017bca:	ea01 0307 	and.w	r3, r1, r7
 8017bce:	4303      	orrs	r3, r0
 8017bd0:	d01f      	beq.n	8017c12 <floor+0x9a>
 8017bd2:	a327      	add	r3, pc, #156	; (adr r3, 8017c70 <floor+0xf8>)
 8017bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bd8:	f7e8 fb68 	bl	80002ac <__adddf3>
 8017bdc:	2200      	movs	r2, #0
 8017bde:	2300      	movs	r3, #0
 8017be0:	f7e8 ffaa 	bl	8000b38 <__aeabi_dcmpgt>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d0eb      	beq.n	8017bc0 <floor+0x48>
 8017be8:	2c00      	cmp	r4, #0
 8017bea:	bfbe      	ittt	lt
 8017bec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017bf0:	fa43 f606 	asrlt.w	r6, r3, r6
 8017bf4:	19a4      	addlt	r4, r4, r6
 8017bf6:	ea24 0407 	bic.w	r4, r4, r7
 8017bfa:	2500      	movs	r5, #0
 8017bfc:	e7e0      	b.n	8017bc0 <floor+0x48>
 8017bfe:	2e33      	cmp	r6, #51	; 0x33
 8017c00:	dd0b      	ble.n	8017c1a <floor+0xa2>
 8017c02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017c06:	d104      	bne.n	8017c12 <floor+0x9a>
 8017c08:	ee10 2a10 	vmov	r2, s0
 8017c0c:	460b      	mov	r3, r1
 8017c0e:	f7e8 fb4d 	bl	80002ac <__adddf3>
 8017c12:	ec41 0b10 	vmov	d0, r0, r1
 8017c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c22:	fa23 f707 	lsr.w	r7, r3, r7
 8017c26:	4207      	tst	r7, r0
 8017c28:	d0f3      	beq.n	8017c12 <floor+0x9a>
 8017c2a:	a311      	add	r3, pc, #68	; (adr r3, 8017c70 <floor+0xf8>)
 8017c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c30:	f7e8 fb3c 	bl	80002ac <__adddf3>
 8017c34:	2200      	movs	r2, #0
 8017c36:	2300      	movs	r3, #0
 8017c38:	f7e8 ff7e 	bl	8000b38 <__aeabi_dcmpgt>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d0bf      	beq.n	8017bc0 <floor+0x48>
 8017c40:	2c00      	cmp	r4, #0
 8017c42:	da02      	bge.n	8017c4a <floor+0xd2>
 8017c44:	2e14      	cmp	r6, #20
 8017c46:	d103      	bne.n	8017c50 <floor+0xd8>
 8017c48:	3401      	adds	r4, #1
 8017c4a:	ea25 0507 	bic.w	r5, r5, r7
 8017c4e:	e7b7      	b.n	8017bc0 <floor+0x48>
 8017c50:	2301      	movs	r3, #1
 8017c52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017c56:	fa03 f606 	lsl.w	r6, r3, r6
 8017c5a:	4435      	add	r5, r6
 8017c5c:	4545      	cmp	r5, r8
 8017c5e:	bf38      	it	cc
 8017c60:	18e4      	addcc	r4, r4, r3
 8017c62:	e7f2      	b.n	8017c4a <floor+0xd2>
 8017c64:	2500      	movs	r5, #0
 8017c66:	462c      	mov	r4, r5
 8017c68:	e7aa      	b.n	8017bc0 <floor+0x48>
 8017c6a:	bf00      	nop
 8017c6c:	f3af 8000 	nop.w
 8017c70:	8800759c 	.word	0x8800759c
 8017c74:	7e37e43c 	.word	0x7e37e43c
 8017c78:	bff00000 	.word	0xbff00000
 8017c7c:	000fffff 	.word	0x000fffff

08017c80 <matherr>:
 8017c80:	2000      	movs	r0, #0
 8017c82:	4770      	bx	lr
 8017c84:	0000      	movs	r0, r0
	...

08017c88 <scalbn>:
 8017c88:	b570      	push	{r4, r5, r6, lr}
 8017c8a:	ec55 4b10 	vmov	r4, r5, d0
 8017c8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017c92:	4606      	mov	r6, r0
 8017c94:	462b      	mov	r3, r5
 8017c96:	b9aa      	cbnz	r2, 8017cc4 <scalbn+0x3c>
 8017c98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017c9c:	4323      	orrs	r3, r4
 8017c9e:	d03b      	beq.n	8017d18 <scalbn+0x90>
 8017ca0:	4b31      	ldr	r3, [pc, #196]	; (8017d68 <scalbn+0xe0>)
 8017ca2:	4629      	mov	r1, r5
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	ee10 0a10 	vmov	r0, s0
 8017caa:	f7e8 fcb5 	bl	8000618 <__aeabi_dmul>
 8017cae:	4b2f      	ldr	r3, [pc, #188]	; (8017d6c <scalbn+0xe4>)
 8017cb0:	429e      	cmp	r6, r3
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	460d      	mov	r5, r1
 8017cb6:	da12      	bge.n	8017cde <scalbn+0x56>
 8017cb8:	a327      	add	r3, pc, #156	; (adr r3, 8017d58 <scalbn+0xd0>)
 8017cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cbe:	f7e8 fcab 	bl	8000618 <__aeabi_dmul>
 8017cc2:	e009      	b.n	8017cd8 <scalbn+0x50>
 8017cc4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017cc8:	428a      	cmp	r2, r1
 8017cca:	d10c      	bne.n	8017ce6 <scalbn+0x5e>
 8017ccc:	ee10 2a10 	vmov	r2, s0
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	4629      	mov	r1, r5
 8017cd4:	f7e8 faea 	bl	80002ac <__adddf3>
 8017cd8:	4604      	mov	r4, r0
 8017cda:	460d      	mov	r5, r1
 8017cdc:	e01c      	b.n	8017d18 <scalbn+0x90>
 8017cde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017ce2:	460b      	mov	r3, r1
 8017ce4:	3a36      	subs	r2, #54	; 0x36
 8017ce6:	4432      	add	r2, r6
 8017ce8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017cec:	428a      	cmp	r2, r1
 8017cee:	dd0b      	ble.n	8017d08 <scalbn+0x80>
 8017cf0:	ec45 4b11 	vmov	d1, r4, r5
 8017cf4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017d60 <scalbn+0xd8>
 8017cf8:	f000 f83c 	bl	8017d74 <copysign>
 8017cfc:	a318      	add	r3, pc, #96	; (adr r3, 8017d60 <scalbn+0xd8>)
 8017cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d02:	ec51 0b10 	vmov	r0, r1, d0
 8017d06:	e7da      	b.n	8017cbe <scalbn+0x36>
 8017d08:	2a00      	cmp	r2, #0
 8017d0a:	dd08      	ble.n	8017d1e <scalbn+0x96>
 8017d0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017d10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017d14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017d18:	ec45 4b10 	vmov	d0, r4, r5
 8017d1c:	bd70      	pop	{r4, r5, r6, pc}
 8017d1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017d22:	da0d      	bge.n	8017d40 <scalbn+0xb8>
 8017d24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017d28:	429e      	cmp	r6, r3
 8017d2a:	ec45 4b11 	vmov	d1, r4, r5
 8017d2e:	dce1      	bgt.n	8017cf4 <scalbn+0x6c>
 8017d30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017d58 <scalbn+0xd0>
 8017d34:	f000 f81e 	bl	8017d74 <copysign>
 8017d38:	a307      	add	r3, pc, #28	; (adr r3, 8017d58 <scalbn+0xd0>)
 8017d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3e:	e7e0      	b.n	8017d02 <scalbn+0x7a>
 8017d40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017d44:	3236      	adds	r2, #54	; 0x36
 8017d46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017d4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017d4e:	4620      	mov	r0, r4
 8017d50:	4629      	mov	r1, r5
 8017d52:	2200      	movs	r2, #0
 8017d54:	4b06      	ldr	r3, [pc, #24]	; (8017d70 <scalbn+0xe8>)
 8017d56:	e7b2      	b.n	8017cbe <scalbn+0x36>
 8017d58:	c2f8f359 	.word	0xc2f8f359
 8017d5c:	01a56e1f 	.word	0x01a56e1f
 8017d60:	8800759c 	.word	0x8800759c
 8017d64:	7e37e43c 	.word	0x7e37e43c
 8017d68:	43500000 	.word	0x43500000
 8017d6c:	ffff3cb0 	.word	0xffff3cb0
 8017d70:	3c900000 	.word	0x3c900000

08017d74 <copysign>:
 8017d74:	ec51 0b10 	vmov	r0, r1, d0
 8017d78:	ee11 0a90 	vmov	r0, s3
 8017d7c:	ee10 2a10 	vmov	r2, s0
 8017d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017d84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017d88:	ea41 0300 	orr.w	r3, r1, r0
 8017d8c:	ec43 2b10 	vmov	d0, r2, r3
 8017d90:	4770      	bx	lr
	...

08017d94 <_init>:
 8017d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d96:	bf00      	nop
 8017d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9a:	bc08      	pop	{r3}
 8017d9c:	469e      	mov	lr, r3
 8017d9e:	4770      	bx	lr

08017da0 <_fini>:
 8017da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da2:	bf00      	nop
 8017da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017da6:	bc08      	pop	{r3}
 8017da8:	469e      	mov	lr, r3
 8017daa:	4770      	bx	lr
