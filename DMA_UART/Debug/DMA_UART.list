
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  08015a88  08015a88  00025a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801669c  0801669c  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  0801669c  0801669c  0002669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166a4  080166a4  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166a4  080166a4  000266a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166a8  080166a8  000266a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  080166ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000557c  20001008  080176b4  00031008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006584  080176b4  00036584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002942b  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000058c9  00000000  00000000  0005a463  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  0005fd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  000617c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281ab  00000000  00000000  00063008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b56b  00000000  00000000  0008b1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7ebb  00000000  00000000  000a671e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e5d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008190  00000000  00000000  0017e654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015a6c 	.word	0x08015a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	08015a6c 	.word	0x08015a6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0ac      	sub	sp, #176	; 0xb0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00f fc22 	bl	8010808 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f010 fb6f 	bl	80116b8 <siscanf>
 8000fda:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e223      	b.n	800144e <commandRead+0x4a6>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e213      	b.n	800144e <commandRead+0x4a6>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11f      	bne.n	800107c <commandRead+0xd4>
		if (3 == result) {
 800103c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001040:	2b03      	cmp	r3, #3
 8001042:	d111      	bne.n	8001068 <commandRead+0xc0>
			result = sscanf( para, "%f %f",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3380      	adds	r3, #128	; 0x80
 800104e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001052:	4996      	ldr	r1, [pc, #600]	; (80012ac <commandRead+0x304>)
 8001054:	f010 fb30 	bl	80116b8 <siscanf>
 8001058:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <commandRead+0xc4>
				return CMD_ERROR;
 8001064:	230b      	movs	r3, #11
 8001066:	e1f2      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001068:	230b      	movs	r3, #11
 800106a:	e1f0      	b.n	800144e <commandRead+0x4a6>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 8001078:	2302      	movs	r3, #2
 800107a:	e1e8      	b.n	800144e <commandRead+0x4a6>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107c:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14b      	bne.n	800112a <commandRead+0x182>
		if (3 == result) {
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001096:	2b03      	cmp	r3, #3
 8001098:	d143      	bne.n	8001122 <commandRead+0x17a>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %d %f",
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f103 0630 	add.w	r6, r3, #48	; 0x30
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3334      	adds	r3, #52	; 0x34
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	3238      	adds	r2, #56	; 0x38
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	317c      	adds	r1, #124	; 0x7c
 80010b2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010ba:	9004      	str	r0, [sp, #16]
 80010bc:	f107 002b 	add.w	r0, r7, #43	; 0x2b
 80010c0:	9003      	str	r0, [sp, #12]
 80010c2:	9102      	str	r1, [sp, #8]
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4633      	mov	r3, r6
 80010ca:	462a      	mov	r2, r5
 80010cc:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010ce:	4620      	mov	r0, r4
 80010d0:	f010 faf2 	bl	80116b8 <siscanf>
 80010d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d001      	beq.n	80010e4 <commandRead+0x13c>
				return CMD_ERROR;
 80010e0:	230b      	movs	r3, #11
 80010e2:	e1b4      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <commandRead+0x160>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80010fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001106:	e00e      	b.n	8001126 <commandRead+0x17e>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001108:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <commandRead+0x176>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	e003      	b.n	8001126 <commandRead+0x17e>
			} else {
				return CMD_ERROR;
 800111e:	230b      	movs	r3, #11
 8001120:	e195      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001122:	230b      	movs	r3, #11
 8001124:	e193      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_LINE;
 8001126:	2303      	movs	r3, #3
 8001128:	e191      	b.n	800144e <commandRead+0x4a6>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 800112a:	4b5f      	ldr	r3, [pc, #380]	; (80012a8 <commandRead+0x300>)
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f84b 	bl	80001d0 <strcmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d159      	bne.n	80011f4 <commandRead+0x24c>
		if (3 == result) {
 8001140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001144:	2b03      	cmp	r3, #3
 8001146:	d151      	bne.n	80011ec <commandRead+0x244>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %f %f %d %f %d %f",
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 0e2c 	add.w	lr, r3, #44	; 0x2c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f103 0830 	add.w	r8, r3, #48	; 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3334      	adds	r3, #52	; 0x34
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	3238      	adds	r2, #56	; 0x38
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	315c      	adds	r1, #92	; 0x5c
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	3060      	adds	r0, #96	; 0x60
 8001166:	687c      	ldr	r4, [r7, #4]
 8001168:	3464      	adds	r4, #100	; 0x64
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 800116a:	687d      	ldr	r5, [r7, #4]
 800116c:	3510      	adds	r5, #16
			result = sscanf( para, "%f %f %f %f %f %f %f %d %f %d %f",
 800116e:	687e      	ldr	r6, [r7, #4]
 8001170:	367c      	adds	r6, #124	; 0x7c
 8001172:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	9308      	str	r3, [sp, #32]
 800117c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001180:	9307      	str	r3, [sp, #28]
 8001182:	9606      	str	r6, [sp, #24]
 8001184:	9505      	str	r5, [sp, #20]
 8001186:	9404      	str	r4, [sp, #16]
 8001188:	9003      	str	r0, [sp, #12]
 800118a:	9102      	str	r1, [sp, #8]
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4643      	mov	r3, r8
 8001194:	4672      	mov	r2, lr
 8001196:	4947      	ldr	r1, [pc, #284]	; (80012b4 <commandRead+0x30c>)
 8001198:	4660      	mov	r0, ip
 800119a:	f010 fa8d 	bl	80116b8 <siscanf>
 800119e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011a6:	2b0b      	cmp	r3, #11
 80011a8:	d001      	beq.n	80011ae <commandRead+0x206>
				return CMD_ERROR;
 80011aa:	230b      	movs	r3, #11
 80011ac:	e14f      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <commandRead+0x22a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011d0:	e00e      	b.n	80011f0 <commandRead+0x248>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011d2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d106      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	e003      	b.n	80011f0 <commandRead+0x248>
			} else {
				return CMD_ERROR;
 80011e8:	230b      	movs	r3, #11
 80011ea:	e130      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 80011ec:	230b      	movs	r3, #11
 80011ee:	e12e      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_CIRCLE;
 80011f0:	2304      	movs	r3, #4
 80011f2:	e12c      	b.n	800144e <commandRead+0x4a6>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <commandRead+0x300>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe6 	bl	80001d0 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d156      	bne.n	80012b8 <commandRead+0x310>
		if (3 == result) {
 800120a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800120e:	2b03      	cmp	r3, #3
 8001210:	d143      	bne.n	800129a <commandRead+0x2f2>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%f %f %f %f %f %d %f",
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 0630 	add.w	r6, r3, #48	; 0x30
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3334      	adds	r3, #52	; 0x34
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3238      	adds	r2, #56	; 0x38
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	317c      	adds	r1, #124	; 0x7c
 800122a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800122e:	f107 001c 	add.w	r0, r7, #28
 8001232:	9004      	str	r0, [sp, #16]
 8001234:	f107 001b 	add.w	r0, r7, #27
 8001238:	9003      	str	r0, [sp, #12]
 800123a:	9102      	str	r1, [sp, #8]
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4633      	mov	r3, r6
 8001242:	462a      	mov	r2, r5
 8001244:	491a      	ldr	r1, [pc, #104]	; (80012b0 <commandRead+0x308>)
 8001246:	4620      	mov	r0, r4
 8001248:	f010 fa36 	bl	80116b8 <siscanf>
 800124c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001254:	2b07      	cmp	r3, #7
 8001256:	d001      	beq.n	800125c <commandRead+0x2b4>
				return CMD_ERROR;
 8001258:	230b      	movs	r3, #11
 800125a:	e0f8      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001268:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <commandRead+0x2d8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800127e:	e00e      	b.n	800129e <commandRead+0x2f6>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001280:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <commandRead+0x2ee>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	e003      	b.n	800129e <commandRead+0x2f6>
			} else {
				return CMD_ERROR;
 8001296:	230b      	movs	r3, #11
 8001298:	e0d9      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 800129a:	230b      	movs	r3, #11
 800129c:	e0d7      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_MOVE_JOINT;
 800129e:	2305      	movs	r3, #5
 80012a0:	e0d5      	b.n	800144e <commandRead+0x4a6>
 80012a2:	bf00      	nop
 80012a4:	08015b18 	.word	0x08015b18
 80012a8:	20000000 	.word	0x20000000
 80012ac:	08015b24 	.word	0x08015b24
 80012b0:	08015b2c 	.word	0x08015b2c
 80012b4:	08015b44 	.word	0x08015b44

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012b8:	4b67      	ldr	r3, [pc, #412]	; (8001458 <commandRead+0x4b0>)
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff84 	bl	80001d0 <strcmp>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d144      	bne.n	8001358 <commandRead+0x3b0>
		if (3 == result) {
 80012ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d13c      	bne.n	8001350 <commandRead+0x3a8>
			float temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %f %f %d %f",
							(int *)&(duty_cmd->sub_para_int),
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %f %f %d %f",
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f103 0414 	add.w	r4, r3, #20
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	337c      	adds	r3, #124	; 0x7c
 80012e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012ea:	f107 0214 	add.w	r2, r7, #20
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	f107 0213 	add.w	r2, r7, #19
 80012f4:	9201      	str	r2, [sp, #4]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4623      	mov	r3, r4
 80012fa:	460a      	mov	r2, r1
 80012fc:	4957      	ldr	r1, [pc, #348]	; (800145c <commandRead+0x4b4>)
 80012fe:	f010 f9db 	bl	80116b8 <siscanf>
 8001302:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							&(duty_cmd->sub_para_float),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 8001306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800130a:	2b05      	cmp	r3, #5
 800130c:	d001      	beq.n	8001312 <commandRead+0x36a>
				return CMD_ERROR;
 800130e:	230b      	movs	r3, #11
 8001310:	e09d      	b.n	800144e <commandRead+0x4a6>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800131e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d107      	bne.n	8001336 <commandRead+0x38e>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001334:	e00e      	b.n	8001354 <commandRead+0x3ac>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <commandRead+0x3a4>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	e003      	b.n	8001354 <commandRead+0x3ac>
			} else {
				return CMD_ERROR;
 800134c:	230b      	movs	r3, #11
 800134e:	e07e      	b.n	800144e <commandRead+0x4a6>
			}
		} else {
			return CMD_ERROR;
 8001350:	230b      	movs	r3, #11
 8001352:	e07c      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_ROTATE_SINGLE;
 8001354:	2306      	movs	r3, #6
 8001356:	e07a      	b.n	800144e <commandRead+0x4a6>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <commandRead+0x4b0>)
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <commandRead+0x3ec>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f103 0210 	add.w	r2, r3, #16
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	4939      	ldr	r1, [pc, #228]	; (8001460 <commandRead+0x4b8>)
 800137a:	4618      	mov	r0, r3
 800137c:	f010 f99c 	bl	80116b8 <siscanf>
 8001380:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		if (1 != result) {
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001388:	2b01      	cmp	r3, #1
 800138a:	d001      	beq.n	8001390 <commandRead+0x3e8>
			return CMD_ERROR;
 800138c:	230b      	movs	r3, #11
 800138e:	e05e      	b.n	800144e <commandRead+0x4a6>
		}

		return CMD_OUTPUT;
 8001390:	2307      	movs	r3, #7
 8001392:	e05c      	b.n	800144e <commandRead+0x4a6>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <commandRead+0x4b0>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff16 	bl	80001d0 <strcmp>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <commandRead+0x406>
		return CMD_READ_STATUS;
 80013aa:	2308      	movs	r3, #8
 80013ac:	e04f      	b.n	800144e <commandRead+0x4a6>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <commandRead+0x4b0>)
 80013b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff09 	bl	80001d0 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <commandRead+0x420>
			return CMD_READ_POSITION;
 80013c4:	2309      	movs	r3, #9
 80013c6:	e042      	b.n	800144e <commandRead+0x4a6>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <commandRead+0x4b0>)
 80013ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d136      	bne.n	800144c <commandRead+0x4a4>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 80013de:	f107 0312 	add.w	r3, r7, #18
 80013e2:	f107 0211 	add.w	r2, r7, #17
 80013e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013ea:	491e      	ldr	r1, [pc, #120]	; (8001464 <commandRead+0x4bc>)
 80013ec:	f010 f964 	bl	80116b8 <siscanf>
 80013f0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 80013f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d001      	beq.n	8001400 <commandRead+0x458>
			return CMD_ERROR;
 80013fc:	230b      	movs	r3, #11
 80013fe:	e026      	b.n	800144e <commandRead+0x4a6>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001400:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <commandRead+0x468>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	721a      	strb	r2, [r3, #8]
 800140e:	e009      	b.n	8001424 <commandRead+0x47c>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001410:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d103      	bne.n	8001420 <commandRead+0x478>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	721a      	strb	r2, [r3, #8]
 800141e:	e001      	b.n	8001424 <commandRead+0x47c>
		} else {
			return CMD_ERROR;
 8001420:	230b      	movs	r3, #11
 8001422:	e014      	b.n	800144e <commandRead+0x4a6>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001424:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <commandRead+0x48c>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	731a      	strb	r2, [r3, #12]
 8001432:	e009      	b.n	8001448 <commandRead+0x4a0>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001434:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d103      	bne.n	8001444 <commandRead+0x49c>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	731a      	strb	r2, [r3, #12]
 8001442:	e001      	b.n	8001448 <commandRead+0x4a0>
		} else {
			return CMD_ERROR;
 8001444:	230b      	movs	r3, #11
 8001446:	e002      	b.n	800144e <commandRead+0x4a6>
		}
		return CMD_SETTING;
 8001448:	230a      	movs	r3, #10
 800144a:	e000      	b.n	800144e <commandRead+0x4a6>

	// Error command
	} else {
		return CMD_ERROR;
 800144c:	230b      	movs	r3, #11
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	3788      	adds	r7, #136	; 0x88
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	08015b68 	.word	0x08015b68
 8001460:	08015b78 	.word	0x08015b78
 8001464:	08015b7c 	.word	0x08015b7c

08001468 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001468:	b084      	sub	sp, #16
 800146a:	b5b0      	push	{r4, r5, r7, lr}
 800146c:	b09a      	sub	sp, #104	; 0x68
 800146e:	af0a      	add	r7, sp, #40	; 0x28
 8001470:	4604      	mov	r4, r0
 8001472:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800147a:	4623      	mov	r3, r4
 800147c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b0b      	cmp	r3, #11
 8001482:	f200 80f2 	bhi.w	800166a <commandReply+0x202>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <commandReply+0x24>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	080014bd 	.word	0x080014bd
 8001490:	080014bd 	.word	0x080014bd
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014bd 	.word	0x080014bd
 800149c:	080014bd 	.word	0x080014bd
 80014a0:	080014bd 	.word	0x080014bd
 80014a4:	080014bd 	.word	0x080014bd
 80014a8:	080014c5 	.word	0x080014c5
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800155f 	.word	0x0800155f
 80014b4:	08001591 	.word	0x08001591
 80014b8:	0800164b 	.word	0x0800164b
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014bc:	2309      	movs	r3, #9
 80014be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 80014c2:	e0e1      	b.n	8001688 <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10d      	bne.n	80014e6 <commandReply+0x7e>
				scaraSetOutput(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f004 fd82 	bl	8005fd4 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 80014d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014d4:	4971      	ldr	r1, [pc, #452]	; (800169c <commandReply+0x234>)
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	cb03      	ldmia	r3!, {r0, r1}
 80014dc:	6010      	str	r0, [r2, #0]
 80014de:	6051      	str	r1, [r2, #4]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	8113      	strh	r3, [r2, #8]
 80014e4:	e01d      	b.n	8001522 <commandReply+0xba>
			} else if (0 == duty_cmd.sub_para_int) {
 80014e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10f      	bne.n	800150c <commandReply+0xa4>
				scaraSetOutput(0);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f004 fd71 	bl	8005fd4 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 80014f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014f6:	496a      	ldr	r1, [pc, #424]	; (80016a0 <commandReply+0x238>)
 80014f8:	461a      	mov	r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	cb03      	ldmia	r3!, {r0, r1}
 80014fe:	6010      	str	r0, [r2, #0]
 8001500:	6051      	str	r1, [r2, #4]
 8001502:	8819      	ldrh	r1, [r3, #0]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	8111      	strh	r1, [r2, #8]
 8001508:	7293      	strb	r3, [r2, #10]
 800150a:	e00a      	b.n	8001522 <commandReply+0xba>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 800150c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001510:	4a64      	ldr	r2, [pc, #400]	; (80016a4 <commandReply+0x23c>)
 8001512:	461c      	mov	r4, r3
 8001514:	4613      	mov	r3, r2
 8001516:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001518:	6020      	str	r0, [r4, #0]
 800151a:	6061      	str	r1, [r4, #4]
 800151c:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 800151e:	2307      	movs	r3, #7
 8001520:	e0b4      	b.n	800168c <commandReply+0x224>
			}
			ret = RPD_OK;
 8001522:	2308      	movs	r3, #8
 8001524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		break;
 8001528:	e0ae      	b.n	8001688 <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800152a:	f004 fd93 	bl	8006054 <scaraGetMode>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			current_state	 = scaraGetDutyState();
 8001534:	f004 fd9a 	bl	800606c <scaraGetDutyState>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800153e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001542:	2b02      	cmp	r3, #2
 8001544:	d107      	bne.n	8001556 <commandReply+0xee>
 8001546:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <commandReply+0xee>
				ret = RPD_IDLE;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001554:	e098      	b.n	8001688 <commandReply+0x220>
				ret = RPD_BUSY;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800155c:	e094      	b.n	8001688 <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fd56 	bl	8006014 <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 8001568:	466d      	mov	r5, sp
 800156a:	f107 0418 	add.w	r4, r7, #24
 800156e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001580:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001584:	f004 fdba 	bl	80060fc <scaraPosition2String>
			ret =  RPD_POSITION;
 8001588:	2302      	movs	r3, #2
 800158a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		break;
 800158e:	e07b      	b.n	8001688 <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001590:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 8001598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800159c:	4942      	ldr	r1, [pc, #264]	; (80016a8 <commandReply+0x240>)
 800159e:	461a      	mov	r2, r3
 80015a0:	460b      	mov	r3, r1
 80015a2:	cb03      	ldmia	r3!, {r0, r1}
 80015a4:	6010      	str	r0, [r2, #0]
 80015a6:	6051      	str	r1, [r2, #4]
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	8113      	strh	r3, [r2, #8]
 80015ac:	e017      	b.n	80015de <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10a      	bne.n	80015cc <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015ba:	493c      	ldr	r1, [pc, #240]	; (80016ac <commandReply+0x244>)
 80015bc:	461a      	mov	r2, r3
 80015be:	460b      	mov	r3, r1
 80015c0:	cb03      	ldmia	r3!, {r0, r1}
 80015c2:	6010      	str	r0, [r2, #0]
 80015c4:	6051      	str	r1, [r2, #4]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	8113      	strh	r3, [r2, #8]
 80015ca:	e008      	b.n	80015de <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <commandReply+0x248>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4619      	mov	r1, r3
 80015d2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80015d6:	f010 f89b 	bl	8011710 <strcat>
			return RPD_ERROR;
 80015da:	2307      	movs	r3, #7
 80015dc:	e056      	b.n	800168c <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80015de:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10e      	bne.n	8001604 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 80015e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80015ea:	f7fe fdfb 	bl	80001e4 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015f6:	4413      	add	r3, r2
 80015f8:	4a2e      	ldr	r2, [pc, #184]	; (80016b4 <commandReply+0x24c>)
 80015fa:	6810      	ldr	r0, [r2, #0]
 80015fc:	6018      	str	r0, [r3, #0]
 80015fe:	8892      	ldrh	r2, [r2, #4]
 8001600:	809a      	strh	r2, [r3, #4]
 8001602:	e01e      	b.n	8001642 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001604:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001608:	2b01      	cmp	r3, #1
 800160a:	d111      	bne.n	8001630 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 800160c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001610:	f7fe fde8 	bl	80001e4 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800161c:	4413      	add	r3, r2
 800161e:	4926      	ldr	r1, [pc, #152]	; (80016b8 <commandReply+0x250>)
 8001620:	461a      	mov	r2, r3
 8001622:	460b      	mov	r3, r1
 8001624:	cb03      	ldmia	r3!, {r0, r1}
 8001626:	6010      	str	r0, [r2, #0]
 8001628:	6051      	str	r1, [r2, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	7213      	strb	r3, [r2, #8]
 800162e:	e008      	b.n	8001642 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <commandReply+0x248>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4619      	mov	r1, r3
 8001636:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800163a:	f010 f869 	bl	8011710 <strcat>
			return RPD_ERROR;
 800163e:	2307      	movs	r3, #7
 8001640:	e024      	b.n	800168c <commandReply+0x224>
		}
		ret = RPD_OK;
 8001642:	2308      	movs	r3, #8
 8001644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8001648:	e01e      	b.n	8001688 <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800164a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <commandReply+0x254>)
 8001650:	461d      	mov	r5, r3
 8001652:	4614      	mov	r4, r2
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	6028      	str	r0, [r5, #0]
 8001658:	6069      	str	r1, [r5, #4]
 800165a:	60aa      	str	r2, [r5, #8]
 800165c:	60eb      	str	r3, [r5, #12]
 800165e:	7823      	ldrb	r3, [r4, #0]
 8001660:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001662:	2307      	movs	r3, #7
 8001664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8001668:	e00e      	b.n	8001688 <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800166a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <commandReply+0x254>)
 8001670:	461d      	mov	r5, r3
 8001672:	4614      	mov	r4, r2
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	6028      	str	r0, [r5, #0]
 8001678:	6069      	str	r1, [r5, #4]
 800167a:	60aa      	str	r2, [r5, #8]
 800167c:	60eb      	str	r3, [r5, #12]
 800167e:	7823      	ldrb	r3, [r4, #0]
 8001680:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001682:	2307      	movs	r3, #7
 8001684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	return ret;
 8001688:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800168c:	4618      	mov	r0, r3
 800168e:	3740      	adds	r7, #64	; 0x40
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001696:	b004      	add	sp, #16
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	08015b84 	.word	0x08015b84
 80016a0:	08015b90 	.word	0x08015b90
 80016a4:	08015b9c 	.word	0x08015b9c
 80016a8:	08015ba8 	.word	0x08015ba8
 80016ac:	08015bb4 	.word	0x08015bb4
 80016b0:	20000c80 	.word	0x20000c80
 80016b4:	08015bc0 	.word	0x08015bc0
 80016b8:	08015bc8 	.word	0x08015bc8
 80016bc:	08015bd4 	.word	0x08015bd4

080016c0 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d836      	bhi.n	8001744 <commandRespond+0x84>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <commandRespond+0x1c>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001701 	.word	0x08001701
 80016e4:	08001727 	.word	0x08001727
 80016e8:	08001727 	.word	0x08001727
 80016ec:	08001727 	.word	0x08001727
 80016f0:	08001727 	.word	0x08001727
 80016f4:	08001727 	.word	0x08001727
 80016f8:	08001727 	.word	0x08001727
 80016fc:	08001727 	.word	0x08001727
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001700:	f004 fcc0 	bl	8006084 <scaraIsScanLimit>
 8001704:	4603      	mov	r3, r0
 8001706:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <commandRespond+0x94>)
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	7cfa      	ldrb	r2, [r7, #19]
 8001712:	9201      	str	r2, [sp, #4]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <commandRespond+0x98>)
 800171a:	2114      	movs	r1, #20
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f00f ff77 	bl	8011610 <sniprintf>
 8001722:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001724:	e010      	b.n	8001748 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <commandRespond+0x94>)
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <commandRespond+0x9c>)
 8001738:	2164      	movs	r1, #100	; 0x64
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f00f ff68 	bl	8011610 <sniprintf>
 8001740:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001742:	e001      	b.n	8001748 <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001748:	697b      	ldr	r3, [r7, #20]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000002c 	.word	0x2000002c
 8001758:	08015be8 	.word	0x08015be8
 800175c:	08015bf4 	.word	0x08015bf4

08001760 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af02      	add	r7, sp, #8
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s\n", line, message);
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	f107 0008 	add.w	r0, r7, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <LOG_REPORT+0x78>)
 800177a:	213f      	movs	r1, #63	; 0x3f
 800177c:	f00f ff48 	bl	8011610 <sniprintf>
 8001780:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d101      	bne.n	800178e <LOG_REPORT+0x2e>
		return FALSE;
 800178a:	2300      	movs	r3, #0
 800178c:	e01f      	b.n	80017ce <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <LOG_REPORT+0x7c>)
 8001798:	f001 fb1b 	bl	8002dd2 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <LOG_REPORT+0x80>)
 800179e:	f005 fb51 	bl	8006e44 <HAL_DMA_GetState>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d101      	bne.n	80017ac <LOG_REPORT+0x4c>
		return TRUE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e010      	b.n	80017ce <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <LOG_REPORT+0x84>)
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <LOG_REPORT+0x7c>)
 80017b4:	f001 fb35 	bl	8002e22 <ringBuff_PopArray>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017c2:	461a      	mov	r2, r3
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LOG_REPORT+0x84>)
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <LOG_REPORT+0x88>)
 80017c8:	f007 fe6c 	bl	80094a4 <HAL_UART_Transmit_DMA>
	return TRUE;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3750      	adds	r7, #80	; 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08015c00 	.word	0x08015c00
 80017dc:	2000086c 	.word	0x2000086c
 80017e0:	20005870 	.word	0x20005870
 80017e4:	200051d4 	.word	0x200051d4
 80017e8:	20005830 	.word	0x20005830

080017ec <float2string>:

int32_t	float2string( uint8_t *result, float value, uint8_t precision) {
 80017ec:	b480      	push	{r7}
 80017ee:	b08d      	sub	sp, #52	; 0x34
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80017f8:	460b      	mov	r3, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
	uint8_t le[6];
	int8_t sign;
	float temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d901      	bls.n	8001806 <float2string+0x1a>
		precision = 6;
 8001802:	2306      	movs	r3, #6
 8001804:	71fb      	strb	r3, [r7, #7]
	}

	if(value < 0) {
 8001806:	edd7 7a02 	vldr	s15, [r7, #8]
 800180a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d503      	bpl.n	800181c <float2string+0x30>
		sign = -1;
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800181a:	e002      	b.n	8001822 <float2string+0x36>
	} else {
		sign = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	value = value*sign;
 8001822:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a02 	vstr	s15, [r7, #8]

	if (value > 10000.0f) {
 800183a:	edd7 7a02 	vldr	s15, [r7, #8]
 800183e:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8001b74 <float2string+0x388>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd02      	ble.n	8001852 <float2string+0x66>
		return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e1f2      	b.n	8001c38 <float2string+0x44c>
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001852:	edd7 7a02 	vldr	s15, [r7, #8]
 8001856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185a:	ee17 1a90 	vmov	r1, s15
 800185e:	4bc6      	ldr	r3, [pc, #792]	; (8001b78 <float2string+0x38c>)
 8001860:	fb83 2301 	smull	r2, r3, r3, r1
 8001864:	119a      	asrs	r2, r3, #6
 8001866:	17cb      	asrs	r3, r1, #31
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	763b      	strb	r3, [r7, #24]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 800186e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 1a90 	vmov	r1, s15
 800187a:	4bc0      	ldr	r3, [pc, #768]	; (8001b7c <float2string+0x390>)
 800187c:	fb83 2301 	smull	r2, r3, r3, r1
 8001880:	115a      	asrs	r2, r3, #5
 8001882:	17cb      	asrs	r3, r1, #31
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	7e3b      	ldrb	r3, [r7, #24]
 800188a:	4619      	mov	r1, r3
 800188c:	0149      	lsls	r1, r1, #5
 800188e:	1ac9      	subs	r1, r1, r3
 8001890:	0089      	lsls	r1, r1, #2
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	767b      	strb	r3, [r7, #25]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 800189e:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 1a90 	vmov	r1, s15
 80018aa:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <float2string+0x394>)
 80018ac:	fb83 2301 	smull	r2, r3, r3, r1
 80018b0:	109a      	asrs	r2, r3, #2
 80018b2:	17cb      	asrs	r3, r1, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	7e7b      	ldrb	r3, [r7, #25]
 80018ba:	4619      	mov	r1, r3
 80018bc:	0149      	lsls	r1, r1, #5
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	0089      	lsls	r1, r1, #2
 80018c2:	1acb      	subs	r3, r1, r3
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	b2d9      	uxtb	r1, r3
 80018c8:	7e3b      	ldrb	r3, [r7, #24]
 80018ca:	4618      	mov	r0, r3
 80018cc:	0080      	lsls	r0, r0, #2
 80018ce:	4418      	add	r0, r3
 80018d0:	00c0      	lsls	r0, r0, #3
 80018d2:	1ac3      	subs	r3, r0, r3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	440b      	add	r3, r1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	76bb      	strb	r3, [r7, #26]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 80018e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ea:	edc7 7a00 	vstr	s15, [r7]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	7e7b      	ldrb	r3, [r7, #25]
 80018f4:	4619      	mov	r1, r3
 80018f6:	0089      	lsls	r1, r1, #2
 80018f8:	4419      	add	r1, r3
 80018fa:	00c9      	lsls	r1, r1, #3
 80018fc:	1acb      	subs	r3, r1, r3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	b2d9      	uxtb	r1, r3
 8001902:	7e3b      	ldrb	r3, [r7, #24]
 8001904:	4618      	mov	r0, r3
 8001906:	0040      	lsls	r0, r0, #1
 8001908:	4403      	add	r3, r0
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	440b      	add	r3, r1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b2da      	uxtb	r2, r3
 8001916:	7ebb      	ldrb	r3, [r7, #26]
 8001918:	4619      	mov	r1, r3
 800191a:	0149      	lsls	r1, r1, #5
 800191c:	1ac9      	subs	r1, r1, r3
 800191e:	0089      	lsls	r1, r1, #2
 8001920:	1acb      	subs	r3, r1, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	76fb      	strb	r3, [r7, #27]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 800192c:	7e3b      	ldrb	r3, [r7, #24]
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	fb03 f302 	mul.w	r3, r3, r2
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001940:	ed97 7a02 	vldr	s14, [r7, #8]
 8001944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001948:	7e7b      	ldrb	r3, [r7, #25]
 800194a:	461a      	mov	r2, r3
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	fb03 f302 	mul.w	r3, r3, r2
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195e:	7ebb      	ldrb	r3, [r7, #26]
 8001960:	461a      	mov	r2, r3
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b84 <float2string+0x398>
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	edc7 7a08 	vstr	s15, [r7, #32]
	le[0] 	= (int32_t)temp1/100;
 8001990:	edd7 7a08 	vldr	s15, [r7, #32]
 8001994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001998:	ee17 1a90 	vmov	r1, s15
 800199c:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <float2string+0x390>)
 800199e:	fb83 2301 	smull	r2, r3, r3, r1
 80019a2:	115a      	asrs	r2, r3, #5
 80019a4:	17cb      	asrs	r3, r1, #31
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	743b      	strb	r3, [r7, #16]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 80019ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 1a90 	vmov	r1, s15
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <float2string+0x394>)
 80019ba:	fb83 2301 	smull	r2, r3, r3, r1
 80019be:	109a      	asrs	r2, r3, #2
 80019c0:	17cb      	asrs	r3, r1, #31
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	7c3b      	ldrb	r3, [r7, #16]
 80019c8:	4619      	mov	r1, r3
 80019ca:	0149      	lsls	r1, r1, #5
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	0089      	lsls	r1, r1, #2
 80019d0:	1acb      	subs	r3, r1, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	747b      	strb	r3, [r7, #17]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 80019dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80019e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e4:	edc7 7a00 	vstr	s15, [r7]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	7c7b      	ldrb	r3, [r7, #17]
 80019ee:	4619      	mov	r1, r3
 80019f0:	0149      	lsls	r1, r1, #5
 80019f2:	1ac9      	subs	r1, r1, r3
 80019f4:	0089      	lsls	r1, r1, #2
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	b2d9      	uxtb	r1, r3
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	4618      	mov	r0, r3
 8001a00:	0080      	lsls	r0, r0, #2
 8001a02:	4418      	add	r0, r3
 8001a04:	00c0      	lsls	r0, r0, #3
 8001a06:	1ac3      	subs	r3, r0, r3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	74bb      	strb	r3, [r7, #18]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a16:	7c3b      	ldrb	r3, [r7, #16]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	fb03 f302 	mul.w	r3, r3, r2
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a30:	7c7b      	ldrb	r3, [r7, #17]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a48:	7cbb      	ldrb	r3, [r7, #18]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a56:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001b84 <float2string+0x398>
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	edc7 7a07 	vstr	s15, [r7, #28]
	le[3] 	= (int32_t)temp2/100;
 8001a62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6a:	ee17 1a90 	vmov	r1, s15
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <float2string+0x390>)
 8001a70:	fb83 2301 	smull	r2, r3, r3, r1
 8001a74:	115a      	asrs	r2, r3, #5
 8001a76:	17cb      	asrs	r3, r1, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	74fb      	strb	r3, [r7, #19]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 1a90 	vmov	r1, s15
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <float2string+0x394>)
 8001a8c:	fb83 2301 	smull	r2, r3, r3, r1
 8001a90:	109a      	asrs	r2, r3, #2
 8001a92:	17cb      	asrs	r3, r1, #31
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	0149      	lsls	r1, r1, #5
 8001a9e:	1ac9      	subs	r1, r1, r3
 8001aa0:	0089      	lsls	r1, r1, #2
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	753b      	strb	r3, [r7, #20]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	edc7 7a00 	vstr	s15, [r7]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7d3b      	ldrb	r3, [r7, #20]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	0149      	lsls	r1, r1, #5
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	0089      	lsls	r1, r1, #2
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2d9      	uxtb	r1, r3
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	0080      	lsls	r0, r0, #2
 8001ad4:	4418      	add	r0, r3
 8001ad6:	00c0      	lsls	r0, r0, #3
 8001ad8:	1ac3      	subs	r3, r0, r3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	440b      	add	r3, r1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	757b      	strb	r3, [r7, #21]

	index = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28

	if( -1 == sign) {
 8001aec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d107      	bne.n	8001b06 <float2string+0x31a>
		*(result + index++) = '-'; // Negative
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4413      	add	r3, r2
 8001b02:	222d      	movs	r2, #45	; 0x2d
 8001b04:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d508      	bpl.n	8001b2a <float2string+0x33e>
		*(result + index++) = 0x30;
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	2230      	movs	r2, #48	; 0x30
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e055      	b.n	8001bd6 <float2string+0x3ea>
	} else {
		int8_t i = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for( ; i < 4; i++) {
 8001b30:	e031      	b.n	8001b96 <float2string+0x3aa>
			if (nguyen[i] > 0) {
 8001b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d021      	beq.n	8001b88 <float2string+0x39c>
				*(result + index++) = nguyen[i] + 0x30;
 8001b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3230      	adds	r2, #48	; 0x30
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
				i++;
 8001b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001b72:	e014      	b.n	8001b9e <float2string+0x3b2>
 8001b74:	461c4000 	.word	0x461c4000
 8001b78:	10624dd3 	.word	0x10624dd3
 8001b7c:	51eb851f 	.word	0x51eb851f
 8001b80:	66666667 	.word	0x66666667
 8001b84:	447a0000 	.word	0x447a0000
		for( ; i < 4; i++) {
 8001b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	ddc9      	ble.n	8001b32 <float2string+0x346>
			}
		}

		for( ; i < 4; i++) {
 8001b9e:	e016      	b.n	8001bce <float2string+0x3e2>
		*(result + index++) = nguyen[i] + 0x30;
 8001ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ba4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ba8:	4413      	add	r3, r2
 8001baa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	1c59      	adds	r1, r3, #1
 8001bb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	440b      	add	r3, r1
 8001bba:	3230      	adds	r2, #48	; 0x30
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dde4      	ble.n	8001ba0 <float2string+0x3b4>
		}
	}
	*(result + index++) = '.';
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	222e      	movs	r2, #46	; 0x2e
 8001be4:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bec:	e016      	b.n	8001c1c <float2string+0x430>
			*(result + index++) = le[i] + 0x30;
 8001bee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001bf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c02:	4619      	mov	r1, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	440b      	add	r3, r1
 8001c08:	3230      	adds	r2, #48	; 0x30
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001c0e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c1c:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbe3      	blt.n	8001bee <float2string+0x402>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
	return index;
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3734      	adds	r7, #52	; 0x34
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	466b      	mov	r3, sp
 8001c52:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <packPayload+0x1c>
		return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e056      	b.n	8001d0e <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <packPayload+0x28>
		return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e050      	b.n	8001d0e <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3302      	adds	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	1e43      	subs	r3, r0, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	00d4      	lsls	r4, r2, #3
 8001c8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c92:	00cb      	lsls	r3, r1, #3
 8001c94:	4603      	mov	r3, r0
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f04f 0400 	mov.w	r4, #0
 8001ca4:	00d4      	lsls	r4, r2, #3
 8001ca6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001caa:	00cb      	lsls	r3, r1, #3
 8001cac:	4603      	mov	r3, r0
 8001cae:	3307      	adds	r3, #7
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb8:	466b      	mov	r3, sp
 8001cba:	3300      	adds	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	61ba      	str	r2, [r7, #24]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	2128      	movs	r1, #40	; 0x28
 8001ccc:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e00b      	b.n	8001cec <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	441a      	add	r2, r3
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	61b9      	str	r1, [r7, #24]
 8001ce0:	7811      	ldrb	r1, [r2, #0]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbef      	blt.n	8001cd4 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	61ba      	str	r2, [r7, #24]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	2129      	movs	r1, #41	; 0x29
 8001cfe:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4619      	mov	r1, r3
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f00e fd65 	bl	80107d6 <memmove>

	return out_lenght;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	46ad      	mov	sp, r5
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bdb0      	pop	{r4, r5, r7, pc}

08001d18 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	466b      	mov	r3, sp
 8001d24:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	dc02      	bgt.n	8001d32 <unPackPayload+0x1a>
		return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	e063      	b.n	8001dfa <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d106      	bne.n	8001d48 <unPackPayload+0x30>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b29      	cmp	r3, #41	; 0x29
 8001d46:	d002      	beq.n	8001d4e <unPackPayload+0x36>
		return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e055      	b.n	8001dfa <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3b02      	subs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	1e43      	subs	r3, r0, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	00d4      	lsls	r4, r2, #3
 8001d6c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d70:	00cb      	lsls	r3, r1, #3
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f04f 0400 	mov.w	r4, #0
 8001d82:	00d4      	lsls	r4, r2, #3
 8001d84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d88:	00cb      	lsls	r3, r1, #3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	ebad 0d03 	sub.w	sp, sp, r3
 8001d96:	466b      	mov	r3, sp
 8001d98:	3300      	adds	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e017      	b.n	8001dd6 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b28      	cmp	r3, #40	; 0x28
 8001db0:	d00e      	beq.n	8001dd0 <unPackPayload+0xb8>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b29      	cmp	r3, #41	; 0x29
 8001dbc:	d008      	beq.n	8001dd0 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	6139      	str	r1, [r7, #16]
 8001dca:	7811      	ldrb	r1, [r2, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbe2      	blt.n	8001da6 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f00e fd0e 	bl	8010808 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f00e fcef 	bl	80107d6 <memmove>

	return out_lenght;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	46ad      	mov	sp, r5
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bdb0      	pop	{r4, r5, r7, pc}

08001e04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_DMA_Init+0x3c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f004 fd2e 	bl	800688c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e30:	200f      	movs	r0, #15
 8001e32:	f004 fd47 	bl	80068c4 <HAL_NVIC_EnableIRQ>

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <vApplicationGetIdleTaskMemory+0x30>)
 8001e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e62:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20001024 	.word	0x20001024
 8001e74:	20001078 	.word	0x20001078

08001e78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e82:	2300      	movs	r3, #0
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00b f865 	bl	800cf5a <osMutexCreate>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <MX_FREERTOS_Init+0x90>)
 8001e94:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001e96:	2301      	movs	r3, #1
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9a:	2384      	movs	r3, #132	; 0x84
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00b f9f2 	bl	800d294 <osMailCreate>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_FREERTOS_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_FREERTOS_Init+0x98>)
 8001eb8:	f107 041c 	add.w	r4, r7, #28
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00a ffe2 	bl	800ce9a <osThreadCreate>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_FREERTOS_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_FREERTOS_Init+0xa0>)
 8001ede:	463c      	mov	r4, r7
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00a ffd1 	bl	800ce9a <osThreadCreate>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_FREERTOS_Init+0xa4>)
 8001efc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200052d8 	.word	0x200052d8
 8001f0c:	200052dc 	.word	0x200052dc
 8001f10:	08015c1c 	.word	0x08015c1c
 8001f14:	200052d4 	.word	0x200052d4
 8001f18:	08015c48 	.word	0x08015c48
 8001f1c:	200052e4 	.word	0x200052e4

08001f20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8001f26:	af1e      	add	r7, sp, #120	; 0x78
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f2c:	f00d fece 	bl	800fccc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
  // Robot variable
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  float						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001f36:	21c3      	movs	r1, #195	; 0xc3
 8001f38:	48cc      	ldr	r0, [pc, #816]	; (800226c <StartDefaultTask+0x34c>)
 8001f3a:	f7ff fc11 	bl	8001760 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
  no_scan = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
  no_duty = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
  no_duty_success	= 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
  no_duty_fail		= 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
  current_mode	 = scaraGetMode();
 8001f5c:	f004 f87a 	bl	8006054 <scaraGetMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
  current_state	 = scaraGetDutyState();
 8001f66:	f004 f881 	bl	800606c <scaraGetDutyState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 8001f70:	4bbf      	ldr	r3, [pc, #764]	; (8002270 <StartDefaultTask+0x350>)
 8001f72:	4ac0      	ldr	r2, [pc, #768]	; (8002274 <StartDefaultTask+0x354>)
 8001f74:	621a      	str	r2, [r3, #32]
	  positionNext.Theta2 = PI/3;
 8001f76:	4bbe      	ldr	r3, [pc, #760]	; (8002270 <StartDefaultTask+0x350>)
 8001f78:	4abf      	ldr	r2, [pc, #764]	; (8002278 <StartDefaultTask+0x358>)
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
	  positionNext.D3 = 10;
 8001f7c:	4bbc      	ldr	r3, [pc, #752]	; (8002270 <StartDefaultTask+0x350>)
 8001f7e:	4abf      	ldr	r2, [pc, #764]	; (800227c <StartDefaultTask+0x35c>)
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
	  positionNext.Theta4 = 0;
 8001f82:	4bbb      	ldr	r3, [pc, #748]	; (8002270 <StartDefaultTask+0x350>)
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
	  positionNext.t = 0;
 8001f8a:	4bb9      	ldr	r3, [pc, #740]	; (8002270 <StartDefaultTask+0x350>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
	  kinematicForward(&positionNext);
 8001f92:	48b7      	ldr	r0, [pc, #732]	; (8002270 <StartDefaultTask+0x350>)
 8001f94:	f000 fc1c 	bl	80027d0 <kinematicForward>
  /* Infinite loop */

  for(;;)
  {
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	  respond_packed_lenght = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	  infor_lenght			= 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	  infor_packed_lenght	= 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	  task_usb_lenght		= 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	  usb_lenght			= 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001fbc:	4ab0      	ldr	r2, [pc, #704]	; (8002280 <StartDefaultTask+0x360>)
 8001fbe:	4bac      	ldr	r3, [pc, #688]	; (8002270 <StartDefaultTask+0x350>)
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001fd4:	4bab      	ldr	r3, [pc, #684]	; (8002284 <StartDefaultTask+0x364>)
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00b fa04 	bl	800d3ec <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001fe4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d119      	bne.n	8002020 <StartDefaultTask+0x100>
		   dataMail = ret_mail.value.p;
 8001fec:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001ff0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001ff4:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001ff8:	2284      	movs	r2, #132	; 0x84
 8001ffa:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00e fbde 	bl	80107c0 <memcpy>
		   isNewDuty = TRUE;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 800200a:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <StartDefaultTask+0x364>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8002012:	4618      	mov	r0, r3
 8002014:	f00b fa5e 	bl	800d4d4 <osMailFree>
		   LOG_REPORT("Receive mail", __LINE__);
 8002018:	21ee      	movs	r1, #238	; 0xee
 800201a:	489b      	ldr	r0, [pc, #620]	; (8002288 <StartDefaultTask+0x368>)
 800201c:	f7ff fba0 	bl	8001760 <LOG_REPORT>
	  }
	  if(isNewDuty) {
 8002020:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a3 	beq.w	8002170 <StartDefaultTask+0x250>
		  memset(respond, 0, 40);
 800202a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800202e:	2228      	movs	r2, #40	; 0x28
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f00e fbe8 	bl	8010808 <memset>
		  switch( duty_cmd.robot_mode) {
 8002038:	f897 3378 	ldrb.w	r3, [r7, #888]	; 0x378
 800203c:	2b01      	cmp	r3, #1
 800203e:	d01b      	beq.n	8002078 <StartDefaultTask+0x158>
 8002040:	2b02      	cmp	r3, #2
 8002042:	d049      	beq.n	80020d8 <StartDefaultTask+0x1b8>
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 808b 	bne.w	8002160 <StartDefaultTask+0x240>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 800204a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800204e:	3301      	adds	r3, #1
 8002050:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
				  current_mode	 = SCARA_MODE_STOP;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
				  respond_lenght = commandRespond(RPD_OK,
 800205a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800205e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002062:	4a8a      	ldr	r2, [pc, #552]	; (800228c <StartDefaultTask+0x36c>)
 8002064:	2008      	movs	r0, #8
 8002066:	f7ff fb2b 	bl	80016c0 <commandRespond>
 800206a:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 800206e:	21fb      	movs	r1, #251	; 0xfb
 8002070:	4887      	ldr	r0, [pc, #540]	; (8002290 <StartDefaultTask+0x370>)
 8002072:	f7ff fb75 	bl	8001760 <LOG_REPORT>
			  }
			  break;
 8002076:	e078      	b.n	800216a <StartDefaultTask+0x24a>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002078:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800207c:	2b02      	cmp	r3, #2
 800207e:	d11b      	bne.n	80020b8 <StartDefaultTask+0x198>
 8002080:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8002084:	2b00      	cmp	r3, #0
 8002086:	d117      	bne.n	80020b8 <StartDefaultTask+0x198>
					  no_scan++;
 8002088:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800208c:	3301      	adds	r3, #1
 800208e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					  current_mode = SCARA_MODE_SCAN;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					  respond_lenght = commandRespond(RPD_OK,
 8002098:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800209c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80020a0:	4a7c      	ldr	r2, [pc, #496]	; (8002294 <StartDefaultTask+0x374>)
 80020a2:	2008      	movs	r0, #8
 80020a4:	f7ff fb0c 	bl	80016c0 <commandRespond>
 80020a8:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
							  	  	  	  	  	  	  duty_cmd.id_command,
													  "Start Scan",
													  (char *)respond);
					  LOG_REPORT("SCAN", __LINE__);
 80020ac:	f240 1107 	movw	r1, #263	; 0x107
 80020b0:	4879      	ldr	r0, [pc, #484]	; (8002298 <StartDefaultTask+0x378>)
 80020b2:	f7ff fb55 	bl	8001760 <LOG_REPORT>
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
				  }
			  }
			  break;
 80020b6:	e058      	b.n	800216a <StartDefaultTask+0x24a>
					  respond_lenght = commandRespond(RPD_ERROR,
 80020b8:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80020bc:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80020c0:	4a76      	ldr	r2, [pc, #472]	; (800229c <StartDefaultTask+0x37c>)
 80020c2:	2007      	movs	r0, #7
 80020c4:	f7ff fafc 	bl	80016c0 <commandRespond>
 80020c8:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
 80020cc:	f240 110d 	movw	r1, #269	; 0x10d
 80020d0:	4873      	ldr	r0, [pc, #460]	; (80022a0 <StartDefaultTask+0x380>)
 80020d2:	f7ff fb45 	bl	8001760 <LOG_REPORT>
			  break;
 80020d6:	e048      	b.n	800216a <StartDefaultTask+0x24a>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 80020d8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80020e2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d124      	bne.n	8002134 <StartDefaultTask+0x214>
 80020ea:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d120      	bne.n	8002134 <StartDefaultTask+0x214>
					  if (scaraIsScanLimit()) {
 80020f2:	f003 ffc7 	bl	8006084 <scaraIsScanLimit>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <StartDefaultTask+0x1ea>
						  current_mode	 = SCARA_MODE_DUTY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						  current_state	 = SCARA_DUTY_STATE_INIT;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
					  if (scaraIsScanLimit()) {
 8002108:	e029      	b.n	800215e <StartDefaultTask+0x23e>
					  } else {
						  no_duty_fail++;
 800210a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800210e:	3301      	adds	r3, #1
 8002110:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
						  respond_lenght = commandRespond(RPD_ERROR,
 8002114:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002118:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800211c:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <StartDefaultTask+0x384>)
 800211e:	2007      	movs	r0, #7
 8002120:	f7ff face 	bl	80016c0 <commandRespond>
 8002124:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002128:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800212c:	485e      	ldr	r0, [pc, #376]	; (80022a8 <StartDefaultTask+0x388>)
 800212e:	f7ff fb17 	bl	8001760 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 8002132:	e014      	b.n	800215e <StartDefaultTask+0x23e>
					  }
				  } else {
					  no_duty_fail++;
 8002134:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002138:	3301      	adds	r3, #1
 800213a:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					  respond_lenght	= commandRespond(RPD_ERROR,
 800213e:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002142:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002146:	4a59      	ldr	r2, [pc, #356]	; (80022ac <StartDefaultTask+0x38c>)
 8002148:	2007      	movs	r0, #7
 800214a:	f7ff fab9 	bl	80016c0 <commandRespond>
 800214e:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002152:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002156:	4856      	ldr	r0, [pc, #344]	; (80022b0 <StartDefaultTask+0x390>)
 8002158:	f7ff fb02 	bl	8001760 <LOG_REPORT>
				  }
			  }
			  break;
 800215c:	e005      	b.n	800216a <StartDefaultTask+0x24a>
 800215e:	e004      	b.n	800216a <StartDefaultTask+0x24a>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002160:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002164:	4853      	ldr	r0, [pc, #332]	; (80022b4 <StartDefaultTask+0x394>)
 8002166:	f7ff fafb 	bl	8001760 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 8002170:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002174:	2b01      	cmp	r3, #1
 8002176:	d00b      	beq.n	8002190 <StartDefaultTask+0x270>
 8002178:	2b02      	cmp	r3, #2
 800217a:	d010      	beq.n	800219e <StartDefaultTask+0x27e>
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 813d 	bne.w	80023fc <StartDefaultTask+0x4dc>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002182:	2302      	movs	r3, #2
 8002184:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			  current_state = SCARA_DUTY_STATE_READY;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
		  }
		  break;
 800218e:	e13b      	b.n	8002408 <StartDefaultTask+0x4e8>
	  case SCARA_MODE_SCAN:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002190:	2302      	movs	r3, #2
 8002192:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			  current_state = SCARA_DUTY_STATE_READY;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
		  }
		  break;
 800219c:	e134      	b.n	8002408 <StartDefaultTask+0x4e8>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 800219e:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	f200 8123 	bhi.w	80023ee <StartDefaultTask+0x4ce>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <StartDefaultTask+0x290>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021c5 	.word	0x080021c5
 80021b8:	080022f9 	.word	0x080022f9
 80021bc:	080023a9 	.word	0x080023a9
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 80021c0:	bf00      	nop
				  }
			  break;
 80021c2:	e11a      	b.n	80023fa <StartDefaultTask+0x4da>
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status;
					  status = scaraInitDuty(duty_cmd);
 80021c4:	4668      	mov	r0, sp
 80021c6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80021ca:	2274      	movs	r2, #116	; 0x74
 80021cc:	4619      	mov	r1, r3
 80021ce:	f00e faf7 	bl	80107c0 <memcpy>
 80021d2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80021d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d8:	f000 fea0 	bl	8002f1c <scaraInitDuty>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 340a 	strb.w	r3, [r7, #1034]	; 0x40a
					  if ( SCARA_STATUS_OK == status) {
 80021e2:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d16a      	bne.n	80022c0 <StartDefaultTask+0x3a0>
						  no_duty_success++;
 80021ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80021ee:	3301      	adds	r3, #1
 80021f0:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80021f4:	2302      	movs	r3, #2
 80021f6:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
						  run_time			= 0;
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002202:	6013      	str	r3, [r2, #0]
						  positionCurrent.t = 0;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <StartDefaultTask+0x360>)
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 800220c:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002210:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status],
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <StartDefaultTask+0x398>)
 8002216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 800221a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800221e:	2008      	movs	r0, #8
 8002220:	f7ff fa4e 	bl	80016c0 <commandRespond>
 8002224:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 8002228:	4e15      	ldr	r6, [pc, #84]	; (8002280 <StartDefaultTask+0x360>)
 800222a:	f507 7c38 	add.w	ip, r7, #736	; 0x2e0
 800222e:	466d      	mov	r5, sp
 8002230:	f106 040c 	add.w	r4, r6, #12
 8002234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002244:	4660      	mov	r0, ip
 8002246:	f003 ff59 	bl	80060fc <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 800224a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800224e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8002252:	2100      	movs	r1, #0
 8002254:	2003      	movs	r0, #3
 8002256:	f7ff fa33 	bl	80016c0 <commandRespond>
 800225a:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
		  	  	  	  	  	  	  	  	  	  	  	  	  	  0,
															  (char *)position,
															  (char *)infor);
						  LOG_REPORT("INIT SUCCESS", __LINE__);
 800225e:	f240 115d 	movw	r1, #349	; 0x15d
 8002262:	4816      	ldr	r0, [pc, #88]	; (80022bc <StartDefaultTask+0x39c>)
 8002264:	f7ff fa7c 	bl	8001760 <LOG_REPORT>
															  (char *)DETAIL_STATUS[status],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 8002268:	e0c7      	b.n	80023fa <StartDefaultTask+0x4da>
 800226a:	bf00      	nop
 800226c:	08015c64 	.word	0x08015c64
 8002270:	200057c0 	.word	0x200057c0
 8002274:	bf860a92 	.word	0xbf860a92
 8002278:	3f860a92 	.word	0x3f860a92
 800227c:	41200000 	.word	0x41200000
 8002280:	20005790 	.word	0x20005790
 8002284:	200052dc 	.word	0x200052dc
 8002288:	08015c84 	.word	0x08015c84
 800228c:	08015c94 	.word	0x08015c94
 8002290:	08015ca0 	.word	0x08015ca0
 8002294:	08015cb0 	.word	0x08015cb0
 8002298:	08015cbc 	.word	0x08015cbc
 800229c:	08015cc4 	.word	0x08015cc4
 80022a0:	08015ccc 	.word	0x08015ccc
 80022a4:	08015ce0 	.word	0x08015ce0
 80022a8:	08015cf4 	.word	0x08015cf4
 80022ac:	08015d08 	.word	0x08015d08
 80022b0:	08015d10 	.word	0x08015d10
 80022b4:	08015d20 	.word	0x08015d20
 80022b8:	20000c80 	.word	0x20000c80
 80022bc:	08015d34 	.word	0x08015d34
						  no_duty_fail++;
 80022c0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
						  current_state 	= SCARA_DUTY_STATE_READY;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
						  respond_lenght	= commandRespond(RPD_ERROR,
 80022d0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80022d4:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
															  (char *)DETAIL_STATUS[status],
 80022d8:	4a8c      	ldr	r2, [pc, #560]	; (800250c <StartDefaultTask+0x5ec>)
 80022da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 80022de:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80022e2:	2007      	movs	r0, #7
 80022e4:	f7ff f9ec 	bl	80016c0 <commandRespond>
 80022e8:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
						  LOG_REPORT("INIT FAIL", __LINE__);
 80022ec:	f240 1165 	movw	r1, #357	; 0x165
 80022f0:	4887      	ldr	r0, [pc, #540]	; (8002510 <StartDefaultTask+0x5f0>)
 80022f2:	f7ff fa35 	bl	8001760 <LOG_REPORT>
			  break;
 80022f6:	e080      	b.n	80023fa <StartDefaultTask+0x4da>
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 80022f8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002514 <StartDefaultTask+0x5f4>
 8002304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002308:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800230c:	edc3 7a00 	vstr	s15, [r3]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 8002310:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002314:	ed93 0a00 	vldr	s0, [r3]
 8002318:	f003 fec2 	bl	80060a0 <scaraIsFinish>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <StartDefaultTask+0x40a>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002322:	2303      	movs	r3, #3
 8002324:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 8002328:	e067      	b.n	80023fa <StartDefaultTask+0x4da>
						  status = scaraFlowDuty(run_time);
 800232a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800232e:	ed93 0a00 	vldr	s0, [r3]
 8002332:	f002 fb4d 	bl	80049d0 <scaraFlowDuty>
 8002336:	4603      	mov	r3, r0
 8002338:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
						  if ( SCARA_STATUS_OK == status) {
 800233c:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11b      	bne.n	800237c <StartDefaultTask+0x45c>
							  scaraPosition2String((char *)position, positionCurrent);
 8002344:	4e74      	ldr	r6, [pc, #464]	; (8002518 <StartDefaultTask+0x5f8>)
 8002346:	f507 7c38 	add.w	ip, r7, #736	; 0x2e0
 800234a:	466d      	mov	r5, sp
 800234c:	f106 040c 	add.w	r4, r6, #12
 8002350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002360:	4660      	mov	r0, ip
 8002362:	f003 fecb 	bl	80060fc <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 8002366:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800236a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800236e:	2100      	movs	r1, #0
 8002370:	2004      	movs	r0, #4
 8002372:	f7ff f9a5 	bl	80016c0 <commandRespond>
 8002376:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
			  break;
 800237a:	e03e      	b.n	80023fa <StartDefaultTask+0x4da>
							  current_state = SCARA_DUTY_STATE_FINISH;
 800237c:	2303      	movs	r3, #3
 800237e:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
							  infor_lenght = commandRespond(RPD_STOP,
 8002382:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
															(char *)DETAIL_STATUS[status],
 8002386:	4a61      	ldr	r2, [pc, #388]	; (800250c <StartDefaultTask+0x5ec>)
 8002388:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 800238c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002390:	2100      	movs	r1, #0
 8002392:	2006      	movs	r0, #6
 8002394:	f7ff f994 	bl	80016c0 <commandRespond>
 8002398:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
							  LOG_REPORT("STOP", __LINE__);
 800239c:	f240 1183 	movw	r1, #387	; 0x183
 80023a0:	485e      	ldr	r0, [pc, #376]	; (800251c <StartDefaultTask+0x5fc>)
 80023a2:	f7ff f9dd 	bl	8001760 <LOG_REPORT>
			  break;
 80023a6:	e028      	b.n	80023fa <StartDefaultTask+0x4da>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  current_state = SCARA_DUTY_STATE_READY;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
					  positionNext.t = 0;
 80023ae:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <StartDefaultTask+0x600>)
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 80023b6:	4e58      	ldr	r6, [pc, #352]	; (8002518 <StartDefaultTask+0x5f8>)
 80023b8:	f507 7c38 	add.w	ip, r7, #736	; 0x2e0
 80023bc:	466d      	mov	r5, sp
 80023be:	f106 040c 	add.w	r4, r6, #12
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	602b      	str	r3, [r5, #0]
 80023ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80023d2:	4660      	mov	r0, ip
 80023d4:	f003 fe92 	bl	80060fc <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 80023d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80023dc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2005      	movs	r0, #5
 80023e4:	f7ff f96c 	bl	80016c0 <commandRespond>
 80023e8:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 80023ec:	e005      	b.n	80023fa <StartDefaultTask+0x4da>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80023ee:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80023f2:	484c      	ldr	r0, [pc, #304]	; (8002524 <StartDefaultTask+0x604>)
 80023f4:	f7ff f9b4 	bl	8001760 <LOG_REPORT>
					  while(1);
 80023f8:	e7fe      	b.n	80023f8 <StartDefaultTask+0x4d8>
				  }
			  }

		  }
		  break;
 80023fa:	e005      	b.n	8002408 <StartDefaultTask+0x4e8>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80023fc:	f240 119f 	movw	r1, #415	; 0x19f
 8002400:	4849      	ldr	r0, [pc, #292]	; (8002528 <StartDefaultTask+0x608>)
 8002402:	f7ff f9ad 	bl	8001760 <LOG_REPORT>
			  while(1);
 8002406:	e7fe      	b.n	8002406 <StartDefaultTask+0x4e6>
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <StartDefaultTask+0x60c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	4618      	mov	r0, r3
 8002412:	f00a fdbb 	bl	800cf8c <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002416:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800241a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241e:	4619      	mov	r1, r3
 8002420:	4843      	ldr	r0, [pc, #268]	; (8002530 <StartDefaultTask+0x610>)
 8002422:	f000 fcfe 	bl	8002e22 <ringBuff_PopArray>
 8002426:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	  osMutexRelease(usbTxMutexHandle);
 800242a:	4b40      	ldr	r3, [pc, #256]	; (800252c <StartDefaultTask+0x60c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f00a fdfa 	bl	800d028 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002434:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002438:	2b00      	cmp	r3, #0
 800243a:	dd13      	ble.n	8002464 <StartDefaultTask+0x544>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 800243c:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8002440:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002444:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fbfb 	bl	8001c44 <packPayload>
 800244e:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 8002452:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8002456:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	4618      	mov	r0, r3
 8002460:	f00e f9ae 	bl	80107c0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002464:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8002468:	2b00      	cmp	r3, #0
 800246a:	dd0b      	ble.n	8002484 <StartDefaultTask+0x564>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 800246c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8002470:	f107 0208 	add.w	r2, r7, #8
 8002474:	4413      	add	r3, r2
 8002476:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800247a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800247e:	4618      	mov	r0, r3
 8002480:	f00e f99e 	bl	80107c0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002484:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002488:	2b00      	cmp	r3, #0
 800248a:	dd19      	ble.n	80024c0 <StartDefaultTask+0x5a0>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 800248c:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002490:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002494:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fbd3 	bl	8001c44 <packPayload>
 800249e:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 80024a2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80024a6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80024aa:	4413      	add	r3, r2
 80024ac:	f107 0208 	add.w	r2, r7, #8
 80024b0:	4413      	add	r3, r2
 80024b2:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80024b6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00e f980 	bl	80107c0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 80024c0:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80024c4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80024c8:	4413      	add	r3, r2
 80024ca:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80024ce:	4413      	add	r3, r2
 80024d0:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	  // Send through USB
	  if (usb_lenght > 0) {
 80024d4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dd08      	ble.n	80024ee <StartDefaultTask+0x5ce>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 80024dc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00d fcfb 	bl	800fee4 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 80024ee:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fd9e 	bl	8006034 <scaraSetMode>
	  scaraSetDutyState(current_state);
 80024f8:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fd79 	bl	8005ff4 <scaraSetDutyState>

    osDelay(10);
 8002502:	200a      	movs	r0, #10
 8002504:	f00a fd15 	bl	800cf32 <osDelay>
	  respond_lenght		= 0;
 8002508:	e546      	b.n	8001f98 <StartDefaultTask+0x78>
 800250a:	bf00      	nop
 800250c:	20000c80 	.word	0x20000c80
 8002510:	08015d44 	.word	0x08015d44
 8002514:	3c23d70a 	.word	0x3c23d70a
 8002518:	20005790 	.word	0x20005790
 800251c:	08015d50 	.word	0x08015d50
 8002520:	200057c0 	.word	0x200057c0
 8002524:	08015d58 	.word	0x08015d58
 8002528:	08015d68 	.word	0x08015d68
 800252c:	200052d8 	.word	0x200052d8
 8002530:	20000460 	.word	0x20000460

08002534 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 800253a:	af20      	add	r7, sp, #128	; 0x80
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	6018      	str	r0, [r3, #0]
	//uint8_t test_command1[60] = "(1 ROTA 3 0.785398 0.3 0 0.3)";
	//uint8_t test_command2[60] = "(456 OUTP 1)";

	//ringBuff_PushArray(&usb_rx_ringbuff, test_command1, strlen((char *)test_command1));
	//ringBuff_PushArray(&usb_rx_ringbuff, test_command2, strlen((char *)test_command2));
	no_duty	 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	no_other = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 800254c:	2129      	movs	r1, #41	; 0x29
 800254e:	4883      	ldr	r0, [pc, #524]	; (800275c <Start_USB_RX_Task+0x228>)
 8002550:	f000 fc88 	bl	8002e64 <ringBuff_DistanceOf>
 8002554:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		  if ( -1 != distance ) {
 8002558:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d0f4      	beq.n	800254c <Start_USB_RX_Task+0x18>
 8002562:	466b      	mov	r3, sp
 8002564:	461d      	mov	r5, r3
			  LOG_REPORT("NEW PACKET", __LINE__);
 8002566:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800256a:	487d      	ldr	r0, [pc, #500]	; (8002760 <Start_USB_RX_Task+0x22c>)
 800256c:	f7ff f8f8 	bl	8001760 <LOG_REPORT>
			  uint8_t temp[distance+1];
 8002570:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002574:	1c58      	adds	r0, r3, #1
 8002576:	1e43      	subs	r3, r0, #1
 8002578:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	00d4      	lsls	r4, r2, #3
 800258e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f04f 0400 	mov.w	r4, #0
 80025a4:	00d4      	lsls	r4, r2, #3
 80025a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80025aa:	00cb      	lsls	r3, r1, #3
 80025ac:	4603      	mov	r3, r0
 80025ae:	3307      	adds	r3, #7
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	ebad 0d03 	sub.w	sp, sp, r3
 80025b8:	ab20      	add	r3, sp, #128	; 0x80
 80025ba:	3300      	adds	r3, #0
 80025bc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80025c0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80025c4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80025c8:	3301      	adds	r3, #1
 80025ca:	461a      	mov	r2, r3
 80025cc:	4863      	ldr	r0, [pc, #396]	; (800275c <Start_USB_RX_Task+0x228>)
 80025ce:	f000 fc28 	bl	8002e22 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 80025d2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80025d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80025da:	3301      	adds	r3, #1
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7ff fb9a 	bl	8001d18 <unPackPayload>
 80025e4:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			  if( -1 == ret) {
 80025e8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d105      	bne.n	80025fe <Start_USB_RX_Task+0xca>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 80025f2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80025f6:	485b      	ldr	r0, [pc, #364]	; (8002764 <Start_USB_RX_Task+0x230>)
 80025f8:	f7ff f8b2 	bl	8001760 <LOG_REPORT>
 80025fc:	e0ab      	b.n	8002756 <Start_USB_RX_Task+0x222>
			  } else {
				  LOG_REPORT("UNPACK SUCCESS", __LINE__);
 80025fe:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002602:	4859      	ldr	r0, [pc, #356]	; (8002768 <Start_USB_RX_Task+0x234>)
 8002604:	f7ff f8ac 	bl	8001760 <LOG_REPORT>
				  LOG_REPORT((char*) temp, __LINE__);
 8002608:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800260c:	f240 11f3 	movw	r1, #499	; 0x1f3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f8a5 	bl	8001760 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 8002616:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800261a:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 800261e:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fcc0 	bl	8000fa8 <commandRead>
 8002628:	4603      	mov	r3, r0
 800262a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
				  memset(detail, 0, sizeof(detail));
 800262e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002632:	226e      	movs	r2, #110	; 0x6e
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f00e f8e6 	bl	8010808 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 800263c:	f897 420b 	ldrb.w	r4, [r7, #523]	; 0x20b
 8002640:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002644:	931e      	str	r3, [sp, #120]	; 0x78
 8002646:	4668      	mov	r0, sp
 8002648:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800264c:	2278      	movs	r2, #120	; 0x78
 800264e:	4619      	mov	r1, r3
 8002650:	f00e f8b6 	bl	80107c0 <memcpy>
 8002654:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265a:	4620      	mov	r0, r4
 800265c:	f7fe ff04 	bl	8001468 <commandReply>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a

				  if ( RPD_DUTY == rpd_type) {
 8002666:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 800266a:	2b09      	cmp	r3, #9
 800266c:	d130      	bne.n	80026d0 <Start_USB_RX_Task+0x19c>
					  no_duty++;
 800266e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002672:	3301      	adds	r3, #1
 8002674:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					  // Wait allocate
					  while (dataMail == NULL) {
 800267e:	e008      	b.n	8002692 <Start_USB_RX_Task+0x15e>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <Start_USB_RX_Task+0x238>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	4618      	mov	r0, r3
 800268a:	f00a fe5b 	bl	800d344 <osMailAlloc>
 800268e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
					  while (dataMail == NULL) {
 8002692:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f2      	beq.n	8002680 <Start_USB_RX_Task+0x14c>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800269a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800269e:	2284      	movs	r2, #132	; 0x84
 80026a0:	4619      	mov	r1, r3
 80026a2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80026a6:	f00e f88b 	bl	80107c0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <Start_USB_RX_Task+0x238>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00a fe5c 	bl	800d370 <osMailPut>
 80026b8:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					  if (osOK == result) {
 80026bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d148      	bne.n	8002756 <Start_USB_RX_Task+0x222>
						  LOG_REPORT("DUTY SEND", __LINE__);
 80026c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80026c8:	4829      	ldr	r0, [pc, #164]	; (8002770 <Start_USB_RX_Task+0x23c>)
 80026ca:	f7ff f849 	bl	8001760 <LOG_REPORT>
 80026ce:	e042      	b.n	8002756 <Start_USB_RX_Task+0x222>
					  }

				  } else {
					  no_other++;
 80026d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80026d4:	3301      	adds	r3, #1
 80026d6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					  memset(respond, 0, sizeof(respond));
 80026da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026de:	2278      	movs	r2, #120	; 0x78
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00e f890 	bl	8010808 <memset>
					  memset(message, 0, sizeof(message));
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	227d      	movs	r2, #125	; 0x7d
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00e f889 	bl	8010808 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 80026f6:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 80026fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026fe:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002702:	f897 020a 	ldrb.w	r0, [r7, #522]	; 0x20a
 8002706:	f7fe ffdb 	bl	80016c0 <commandRespond>
 800270a:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 800270e:	f107 010c 	add.w	r1, r7, #12
 8002712:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002716:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fa92 	bl	8001c44 <packPayload>
 8002720:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <Start_USB_RX_Task+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	4618      	mov	r0, r3
 800272e:	f00a fc2d 	bl	800cf8c <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800273a:	4619      	mov	r1, r3
 800273c:	480e      	ldr	r0, [pc, #56]	; (8002778 <Start_USB_RX_Task+0x244>)
 800273e:	f000 fb48 	bl	8002dd2 <ringBuff_PushArray>
					  LOG_REPORT("ADD RINGBUFF", __LINE__);
 8002742:	f240 2112 	movw	r1, #530	; 0x212
 8002746:	480d      	ldr	r0, [pc, #52]	; (800277c <Start_USB_RX_Task+0x248>)
 8002748:	f7ff f80a 	bl	8001760 <LOG_REPORT>
					  osMutexRelease(usbTxMutexHandle);
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <Start_USB_RX_Task+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f00a fc69 	bl	800d028 <osMutexRelease>
 8002756:	46ad      	mov	sp, r5
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002758:	e6f8      	b.n	800254c <Start_USB_RX_Task+0x18>
 800275a:	bf00      	nop
 800275c:	20000054 	.word	0x20000054
 8002760:	08015d78 	.word	0x08015d78
 8002764:	08015d84 	.word	0x08015d84
 8002768:	08015d90 	.word	0x08015d90
 800276c:	200052dc 	.word	0x200052dc
 8002770:	08015da0 	.word	0x08015da0
 8002774:	200052d8 	.word	0x200052d8
 8002778:	20000460 	.word	0x20000460
 800277c:	08015dac 	.word	0x08015dac

08002780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_GPIO_Init+0x4c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <MX_GPIO_Init+0x4c>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <MX_GPIO_Init+0x4c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_GPIO_Init+0x4c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <MX_GPIO_Init+0x4c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_GPIO_Init+0x4c>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <kinematicForward>:
 */

#include "kinematic.h"
#include "math.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	ed2d 8b02 	vpush	{d8}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	float x, y, z, roll;

	x =   a1*cosf(pnt->Theta1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	edd3 7a08 	vldr	s15, [r3, #32]
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	f012 f9db 	bl	8014ba0 <cosf>
 80027ea:	eeb0 7a40 	vmov.f32	s14, s0
 80027ee:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800292c <kinematicForward+0x15c>
 80027f2:	ee27 8a27 	vmul.f32	s16, s14, s15
		+ a2*cosf(pnt->Theta1 + pnt->Theta2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7a08 	vldr	s14, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	eeb0 0a67 	vmov.f32	s0, s15
 800280a:	f012 f9c9 	bl	8014ba0 <cosf>
 800280e:	eeb0 7a40 	vmov.f32	s14, s0
 8002812:	eddf 7a47 	vldr	s15, [pc, #284]	; 8002930 <kinematicForward+0x160>
 8002816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281a:	ee38 8a27 	vadd.f32	s16, s16, s15
		+ a4*cosf(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	ed93 7a08 	vldr	s14, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	f012 f9b0 	bl	8014ba0 <cosf>
 8002840:	eeb0 7a40 	vmov.f32	s14, s0
 8002844:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002848:	ee67 7a27 	vmul.f32	s15, s14, s15
	x =   a1*cosf(pnt->Theta1)
 800284c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002850:	edc7 7a05 	vstr	s15, [r7, #20]
	y =   a1*sinf(pnt->Theta1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edd3 7a08 	vldr	s15, [r3, #32]
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	f012 f9df 	bl	8014c20 <sinf>
 8002862:	eeb0 7a40 	vmov.f32	s14, s0
 8002866:	eddf 7a31 	vldr	s15, [pc, #196]	; 800292c <kinematicForward+0x15c>
 800286a:	ee27 8a27 	vmul.f32	s16, s14, s15
		+ a2*sinf(pnt->Theta1 + pnt->Theta2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	ed93 7a08 	vldr	s14, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800287a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287e:	eeb0 0a67 	vmov.f32	s0, s15
 8002882:	f012 f9cd 	bl	8014c20 <sinf>
 8002886:	eeb0 7a40 	vmov.f32	s14, s0
 800288a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8002930 <kinematicForward+0x160>
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	ee38 8a27 	vadd.f32	s16, s16, s15
		+ a4*sinf(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	ed93 7a08 	vldr	s14, [r3, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	f012 f9b4 	bl	8014c20 <sinf>
 80028b8:	eeb0 7a40 	vmov.f32	s14, s0
 80028bc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80028c0:	ee67 7a27 	vmul.f32	s15, s14, s15
	y =   a1*sinf(pnt->Theta1)
 80028c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80028c8:	edc7 7a04 	vstr	s15, [r7, #16]
	z =   d1 - pnt->D3 - d4;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80028d2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002934 <kinematicForward+0x164>
 80028d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028da:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002938 <kinematicForward+0x168>
 80028de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028e2:	edc7 7a03 	vstr	s15, [r7, #12]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002900:	edc7 7a02 	vstr	s15, [r7, #8]

	pnt->x = x;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	611a      	str	r2, [r3, #16]
	pnt->y = y;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	615a      	str	r2, [r3, #20]
	pnt->z = z;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	619a      	str	r2, [r3, #24]
	pnt->roll = roll;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	61da      	str	r2, [r3, #28]

	return TRUE;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	ecbd 8b02 	vpop	{d8}
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	43450000 	.word	0x43450000
 8002930:	43200000 	.word	0x43200000
 8002934:	43530000 	.word	0x43530000
 8002938:	42860000 	.word	0x42860000

0800293c <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 800293c:	b084      	sub	sp, #16
 800293e:	b580      	push	{r7, lr}
 8002940:	ed2d 8b02 	vpush	{d8}
 8002944:	b092      	sub	sp, #72	; 0x48
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800294e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	float s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a06 	vldr	s15, [r3, #24]
 8002958:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002bb0 <kinematicInverse+0x274>
 800295c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002960:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	pWx = pnt->x - a4*cosf(pnt->roll);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	ed93 8a04 	vldr	s16, [r3, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002970:	eeb0 0a67 	vmov.f32	s0, s15
 8002974:	f012 f914 	bl	8014ba0 <cosf>
 8002978:	eeb0 7a40 	vmov.f32	s14, s0
 800297c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002984:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002988:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	pWy = pnt->y - a4*sinf(pnt->roll);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	ed93 8a05 	vldr	s16, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	edd3 7a07 	vldr	s15, [r3, #28]
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	f012 f940 	bl	8014c20 <sinf>
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80029a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ac:	ee78 7a67 	vsub.f32	s15, s16, s15
 80029b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80029b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80029b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80029c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002bb4 <kinematicInverse+0x278>
 80029d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029d8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002bb8 <kinematicInverse+0x27c>
 80029dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e0:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002bbc <kinematicInverse+0x280>
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	temp = 1 - c2*c2;
 80029ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80029f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if ( temp < 0 ) {
 8002a04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d501      	bpl.n	8002a16 <kinematicInverse+0xda>
		return FALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e0c2      	b.n	8002b9c <kinematicInverse+0x260>
	}
	s2_positive  = sqrtf(temp); // Note that there are 2 solution: elbow up & elbow down
 8002a16:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a1a:	f012 f945 	bl	8014ca8 <sqrtf>
 8002a1e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	s2_negative	 = -s2_positive;
 8002a22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a26:	eef1 7a67 	vneg.f32	s15, s15
 8002a2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	theta2_positive = atan2f(s2_positive,c2);
 8002a2e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a32:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002a36:	f012 f935 	bl	8014ca4 <atan2f>
 8002a3a:	ed87 0a08 	vstr	s0, [r7, #32]
	theta2_negative = atan2f(s2_negative,c2);
 8002a3e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a42:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a46:	f012 f92d 	bl	8014ca4 <atan2f>
 8002a4a:	ed87 0a07 	vstr	s0, [r7, #28]
	// Choose relevant situation : nearest
	if ( fabsf( theta2_positive - current.Theta2) <= fabsf( theta2_negative - current.Theta2)) {
 8002a4e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a52:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d804      	bhi.n	8002a82 <kinematicInverse+0x146>
		s2 		= s2_positive;
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
		theta2 	= theta2_positive;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a80:	e003      	b.n	8002a8a <kinematicInverse+0x14e>
	} else {
		s2 		= s2_negative;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	643b      	str	r3, [r7, #64]	; 0x40
		theta2 	= theta2_negative;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8002a8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a8e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002bc0 <kinematicInverse+0x284>
 8002a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a96:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002bc4 <kinematicInverse+0x288>
 8002a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002aaa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002bc0 <kinematicInverse+0x284>
 8002aae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ab2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aba:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002abe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ac2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aca:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002ace:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ad2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ade:	edc7 7a06 	vstr	s15, [r7, #24]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8002ae2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ae6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002bc0 <kinematicInverse+0x284>
 8002aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002bc4 <kinematicInverse+0x288>
 8002af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002af6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b02:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002bc0 <kinematicInverse+0x284>
 8002b06:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b12:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002b16:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b22:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002b26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b36:	edc7 7a05 	vstr	s15, [r7, #20]
	theta1 = atan2f(s1,c1);
 8002b3a:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b3e:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b42:	f012 f8af 	bl	8014ca4 <atan2f>
 8002b46:	ed87 0a04 	vstr	s0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8002b4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b60:	edc7 7a03 	vstr	s15, [r7, #12]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8002b64:	edd7 1a03 	vldr	s3, [r7, #12]
 8002b68:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8002b6c:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8002b70:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b74:	f003 f942 	bl	8005dfc <scaraCheckWorkSpace4>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <kinematicInverse+0x246>
		return FALSE; // Over workspace !!!
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e00c      	b.n	8002b9c <kinematicInverse+0x260>
	}
	pnt->Theta1 = theta1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	621a      	str	r2, [r3, #32]
	pnt->Theta2 = theta2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
	pnt->D3		= d3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
	pnt->Theta4 = theta4;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

	return TRUE; // All is well
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3748      	adds	r7, #72	; 0x48
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	ecbd 8b02 	vpop	{d8}
 8002ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002baa:	b004      	add	sp, #16
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	43100000 	.word	0x43100000
 8002bb4:	47179900 	.word	0x47179900
 8002bb8:	46c80000 	.word	0x46c80000
 8002bbc:	47764000 	.word	0x47764000
 8002bc0:	43200000 	.word	0x43200000
 8002bc4:	43450000 	.word	0x43450000

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bcc:	f003 fd42 	bl	8006654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd0:	f000 f80c 	bl	8002bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd4:	f7ff fdd4 	bl	8002780 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bd8:	f7ff f914 	bl	8001e04 <MX_DMA_Init>
  MX_UART4_Init();
 8002bdc:	f003 fc3c 	bl	8006458 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002be0:	f7ff f94a 	bl	8001e78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002be4:	f00a f952 	bl	800ce8c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <main+0x20>
	...

08002bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b094      	sub	sp, #80	; 0x50
 8002bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	2230      	movs	r2, #48	; 0x30
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00d fe04 	bl	8010808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <SystemClock_Config+0xcc>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <SystemClock_Config+0xcc>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <SystemClock_Config+0xcc>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <SystemClock_Config+0xd0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <SystemClock_Config+0xd0>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <SystemClock_Config+0xd0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c52:	2302      	movs	r3, #2
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 fcf6 	bl	8008664 <HAL_RCC_OscConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c7e:	f000 f831 	bl	8002ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c82:	230f      	movs	r3, #15
 8002c84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c86:	2302      	movs	r3, #2
 8002c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 ff4f 	bl	8008b44 <HAL_RCC_ClockConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002cac:	f000 f81a 	bl	8002ce4 <Error_Handler>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3750      	adds	r7, #80	; 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000

08002cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cd2:	f003 fce1 	bl	8006698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40001000 	.word	0x40001000

08002ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <ringBuff_PushChar+0x1a>
		return FALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e024      	b.n	8002d56 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	78f9      	ldrb	r1, [r7, #3]
 8002d16:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002d1e:	3301      	adds	r3, #1
 8002d20:	425a      	negs	r2, r3
 8002d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d2a:	bf58      	it	pl
 8002d2c:	4253      	negpl	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d103      	bne.n	8002d4c <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8002d54:	2301      	movs	r3, #1
	}
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <ringBuff_PopChar+0x18>
		return FALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e025      	b.n	8002dc6 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	5cd2      	ldrb	r2, [r2, r3]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d8e:	3301      	adds	r3, #1
 8002d90:	425a      	negs	r2, r3
 8002d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d9a:	bf58      	it	pl
 8002d9c:	4253      	negpl	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d103      	bne.n	8002dbc <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8002dc4:	2301      	movs	r3, #1
	}
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	82fb      	strh	r3, [r7, #22]
 8002de2:	e011      	b.n	8002e08 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8002de4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff7e 	bl	8002cf2 <ringBuff_PushChar>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8002dfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	82fb      	strh	r3, [r7, #22]
 8002e08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dce8      	bgt.n	8002de4 <ringBuff_PushArray+0x12>
 8002e12:	e000      	b.n	8002e16 <ringBuff_PushArray+0x44>
			break;
 8002e14:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8002e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e00c      	b.n	8002e4e <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff ff90 	bl	8002d62 <ringBuff_PopChar>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbee      	blt.n	8002e34 <ringBuff_PopArray+0x12>
 8002e56:	e000      	b.n	8002e5a <ringBuff_PopArray+0x38>
			break;
 8002e58:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8002e5a:	697b      	ldr	r3, [r7, #20]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002e7a:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e018      	b.n	8002ebe <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d101      	bne.n	8002e9e <ringBuff_DistanceOf+0x3a>
					return distance;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	e037      	b.n	8002f0e <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	425a      	negs	r2, r3
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002eb8:	bf58      	it	pl
 8002eba:	4253      	negpl	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	dbe2      	blt.n	8002e8c <ringBuff_DistanceOf+0x28>
 8002ec6:	e020      	b.n	8002f0a <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d101      	bne.n	8002eda <ringBuff_DistanceOf+0x76>
					return distance;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	e019      	b.n	8002f0e <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3301      	adds	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	425a      	negs	r2, r3
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002eee:	bf58      	it	pl
 8002ef0:	4253      	negpl	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1e3      	bne.n	8002ec8 <ringBuff_DistanceOf+0x64>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0de      	beq.n	8002ec8 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <scaraInitDuty>:
											 "Wrong Coordinate"
											};



SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f20:	b0bd      	sub	sp, #244	; 0xf4
 8002f22:	af22      	add	r7, sp, #136	; 0x88
 8002f24:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8002f2c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8233 	bne.w	800339c <scaraInitDuty+0x480>
		float total_s, angle_s, dir_angle;
		SCARA_PositionTypeDef	target_point;

		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8002f36:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d124      	bne.n	8002f88 <scaraInitDuty+0x6c>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8002f3e:	4bb8      	ldr	r3, [pc, #736]	; (8003220 <scaraInitDuty+0x304>)
 8002f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f44:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4c:	edc7 7a05 	vstr	s15, [r7, #20]
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8002f50:	4bb3      	ldr	r3, [pc, #716]	; (8003220 <scaraInitDuty+0x304>)
 8002f52:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f56:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5e:	edc7 7a06 	vstr	s15, [r7, #24]
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8002f62:	4baf      	ldr	r3, [pc, #700]	; (8003220 <scaraInitDuty+0x304>)
 8002f64:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f68:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	edc7 7a07 	vstr	s15, [r7, #28]
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8002f74:	4baa      	ldr	r3, [pc, #680]	; (8003220 <scaraInitDuty+0x304>)
 8002f76:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f7a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f82:	edc7 7a08 	vstr	s15, [r7, #32]
 8002f86:	e013      	b.n	8002fb0 <scaraInitDuty+0x94>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8002f88:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10c      	bne.n	8002faa <scaraInitDuty+0x8e>
			target_point.x 		= command.target_point.x;
 8002f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f94:	617b      	str	r3, [r7, #20]
			target_point.y 		= command.target_point.y;
 8002f96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f9a:	61bb      	str	r3, [r7, #24]
			target_point.z 		= command.target_point.z;
 8002f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fa0:	61fb      	str	r3, [r7, #28]
			target_point.roll	= command.target_point.roll;
 8002fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	e002      	b.n	8002fb0 <scaraInitDuty+0x94>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8002faa:	230c      	movs	r3, #12
 8002fac:	f000 bfb0 	b.w	8003f10 <scaraInitDuty+0xff4>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8002fb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fb4:	4b9a      	ldr	r3, [pc, #616]	; (8003220 <scaraInitDuty+0x304>)
 8002fb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		dir_angle = 1;
 8002fc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002fc6:	65bb      	str	r3, [r7, #88]	; 0x58
		if ( angle_s < 0) {
 8002fc8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	d501      	bpl.n	8002fda <scaraInitDuty+0xbe>
			dir_angle = -1;
 8002fd6:	4b93      	ldr	r3, [pc, #588]	; (8003224 <scaraInitDuty+0x308>)
 8002fd8:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if ( fabsf(angle_s) > PI) {
 8002fda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002fde:	eef0 7ae7 	vabs.f32	s15, s15
 8002fe2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003228 <scaraInitDuty+0x30c>
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	dd13      	ble.n	8003018 <scaraInitDuty+0xfc>
			dir_angle = -dir_angle;
 8002ff0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ff4:	eef1 7a67 	vneg.f32	s15, s15
 8002ff8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8002ffc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003000:	eef0 7ae7 	vabs.f32	s15, s15
 8003004:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800322c <scaraInitDuty+0x310>
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8003018:	4b85      	ldr	r3, [pc, #532]	; (8003230 <scaraInitDuty+0x314>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800301e:	4b80      	ldr	r3, [pc, #512]	; (8003220 <scaraInitDuty+0x304>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a83      	ldr	r2, [pc, #524]	; (8003230 <scaraInitDuty+0x314>)
 8003024:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8003028:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800302c:	2b00      	cmp	r3, #0
 800302e:	d122      	bne.n	8003076 <scaraInitDuty+0x15a>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8003030:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <scaraInitDuty+0x314>)
 8003032:	2200      	movs	r2, #0
 8003034:	711a      	strb	r2, [r3, #4]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8003036:	4e7a      	ldr	r6, [pc, #488]	; (8003220 <scaraInitDuty+0x304>)
 8003038:	ad09      	add	r5, sp, #36	; 0x24
 800303a:	1d3c      	adds	r4, r7, #4
 800303c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003044:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003048:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800304c:	466d      	mov	r5, sp
 800304e:	f106 040c 	add.w	r4, r6, #12
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003062:	4874      	ldr	r0, [pc, #464]	; (8003234 <scaraInitDuty+0x318>)
 8003064:	f000 ff60 	bl	8003f28 <scaraInitLine>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			total_s = myDUTY.task.path.line.total_s;
 800306e:	4b70      	ldr	r3, [pc, #448]	; (8003230 <scaraInitDuty+0x314>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	663b      	str	r3, [r7, #96]	; 0x60
 8003074:	e037      	b.n	80030e6 <scaraInitDuty+0x1ca>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8003076:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800307a:	2b01      	cmp	r3, #1
 800307c:	d130      	bne.n	80030e0 <scaraInitDuty+0x1c4>
			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800307e:	4b6c      	ldr	r3, [pc, #432]	; (8003230 <scaraInitDuty+0x314>)
 8003080:	2201      	movs	r2, #1
 8003082:	711a      	strb	r2, [r3, #4]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8003084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003088:	4e65      	ldr	r6, [pc, #404]	; (8003220 <scaraInitDuty+0x304>)
 800308a:	9321      	str	r3, [sp, #132]	; 0x84
 800308c:	ad15      	add	r5, sp, #84	; 0x54
 800308e:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8003092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800309e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030a2:	ad09      	add	r5, sp, #36	; 0x24
 80030a4:	1d3c      	adds	r4, r7, #4
 80030a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030b6:	466d      	mov	r5, sp
 80030b8:	f106 040c 	add.w	r4, r6, #12
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80030cc:	485a      	ldr	r0, [pc, #360]	; (8003238 <scaraInitDuty+0x31c>)
 80030ce:	f000 ffb1 	bl	8004034 <scaraInitCircle>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
										positionCurrent,
										target_point,
										command.sub_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80030d8:	4b55      	ldr	r3, [pc, #340]	; (8003230 <scaraInitDuty+0x314>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
 80030de:	e002      	b.n	80030e6 <scaraInitDuty+0x1ca>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f000 bf15 	b.w	8003f10 <scaraInitDuty+0xff4>
		}

		if ( SCARA_STATUS_OK != status) {
 80030e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <scaraInitDuty+0x1da>
			return status;
 80030ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030f2:	f000 bf0d 	b.w	8003f10 <scaraInitDuty+0xff4>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80030f6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 80a2 	bne.w	8003244 <scaraInitDuty+0x328>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003100:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003104:	2b01      	cmp	r3, #1
 8003106:	d12c      	bne.n	8003162 <scaraInitDuty+0x246>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8003108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800310c:	4a48      	ldr	r2, [pc, #288]	; (8003230 <scaraInitDuty+0x314>)
 800310e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <scaraInitDuty+0x314>)
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800311a:	2201      	movs	r2, #1
 800311c:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003120:	2104      	movs	r1, #4
 8003122:	4846      	ldr	r0, [pc, #280]	; (800323c <scaraInitDuty+0x320>)
 8003124:	f001 f88c 	bl	8004240 <scaraInitLSPB>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 800312e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003132:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <scaraInitDuty+0x314>)
 8003134:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <scaraInitDuty+0x314>)
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003140:	2201      	movs	r2, #1
 8003142:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8003146:	2105      	movs	r1, #5
 8003148:	483d      	ldr	r0, [pc, #244]	; (8003240 <scaraInitDuty+0x324>)
 800314a:	f001 f879 	bl	8004240 <scaraInitLSPB>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 8003154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <scaraInitDuty+0x314>)
 800315a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e10b      	b.n	800337a <scaraInitDuty+0x45e>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003162:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003166:	2b00      	cmp	r3, #0
 8003168:	d156      	bne.n	8003218 <scaraInitDuty+0x2fc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <scaraInitDuty+0x314>)
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003172:	2200      	movs	r2, #0
 8003174:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003178:	2104      	movs	r1, #4
 800317a:	4830      	ldr	r0, [pc, #192]	; (800323c <scaraInitDuty+0x320>)
 800317c:	f001 f860 	bl	8004240 <scaraInitLSPB>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <scaraInitDuty+0x314>)
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800318e:	2200      	movs	r2, #0
 8003190:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8003194:	2105      	movs	r1, #5
 8003196:	482a      	ldr	r0, [pc, #168]	; (8003240 <scaraInitDuty+0x324>)
 8003198:	f001 f852 	bl	8004240 <scaraInitLSPB>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVA);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <scaraInitDuty+0x314>)
 80031a4:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <scaraInitDuty+0x314>)
 80031aa:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 80031ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	dd17      	ble.n	80031e8 <scaraInitDuty+0x2cc>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <scaraInitDuty+0x314>)
 80031ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <scaraInitDuty+0x314>)
 80031c0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80031c4:	2201      	movs	r2, #1
 80031c6:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80031ca:	2105      	movs	r1, #5
 80031cc:	481c      	ldr	r0, [pc, #112]	; (8003240 <scaraInitDuty+0x324>)
 80031ce:	f001 f837 	bl	8004240 <scaraInitLSPB>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <scaraInitDuty+0x314>)
 80031da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <scaraInitDuty+0x314>)
 80031e0:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e0c8      	b.n	800337a <scaraInitDuty+0x45e>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <scaraInitDuty+0x314>)
 80031ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <scaraInitDuty+0x314>)
 80031f0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80031f4:	2201      	movs	r2, #1
 80031f6:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80031fa:	2104      	movs	r1, #4
 80031fc:	480f      	ldr	r0, [pc, #60]	; (800323c <scaraInitDuty+0x320>)
 80031fe:	f001 f81f 	bl	8004240 <scaraInitLSPB>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <scaraInitDuty+0x314>)
 800320a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <scaraInitDuty+0x314>)
 8003210:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e0b0      	b.n	800337a <scaraInitDuty+0x45e>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8003218:	2308      	movs	r3, #8
 800321a:	f000 be79 	b.w	8003f10 <scaraInitDuty+0xff4>
 800321e:	bf00      	nop
 8003220:	20005790 	.word	0x20005790
 8003224:	bf800000 	.word	0xbf800000
 8003228:	40490fdb 	.word	0x40490fdb
 800322c:	40c90fdb 	.word	0x40c90fdb
 8003230:	200052e8 	.word	0x200052e8
 8003234:	200052f0 	.word	0x200052f0
 8003238:	20005328 	.word	0x20005328
 800323c:	20005374 	.word	0x20005374
 8003240:	20005420 	.word	0x20005420
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8003244:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 8093 	bne.w	8003374 <scaraInitDuty+0x458>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800324e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003252:	2b01      	cmp	r3, #1
 8003254:	d130      	bne.n	80032b8 <scaraInitDuty+0x39c>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8003256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800325a:	4ace      	ldr	r2, [pc, #824]	; (8003594 <scaraInitDuty+0x678>)
 800325c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003260:	4bcc      	ldr	r3, [pc, #816]	; (8003594 <scaraInitDuty+0x678>)
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003268:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800326c:	461a      	mov	r2, r3
 800326e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003272:	2104      	movs	r1, #4
 8003274:	48c8      	ldr	r0, [pc, #800]	; (8003598 <scaraInitDuty+0x67c>)
 8003276:	f001 f9cb 	bl	8004610 <scaraInitScurve>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, command.modeInit_type);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8003280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003284:	4ac3      	ldr	r2, [pc, #780]	; (8003594 <scaraInitDuty+0x678>)
 8003286:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800328a:	4bc2      	ldr	r3, [pc, #776]	; (8003594 <scaraInitDuty+0x678>)
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003292:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003296:	461a      	mov	r2, r3
 8003298:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800329c:	2105      	movs	r1, #5
 800329e:	48bf      	ldr	r0, [pc, #764]	; (800359c <scaraInitDuty+0x680>)
 80032a0:	f001 f9b6 	bl	8004610 <scaraInitScurve>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, command.modeInit_type);
				myDUTY.time_total = command.time_total;
 80032aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80032ae:	4bb9      	ldr	r3, [pc, #740]	; (8003594 <scaraInitDuty+0x678>)
 80032b0:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e060      	b.n	800337a <scaraInitDuty+0x45e>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80032b8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d156      	bne.n	800336e <scaraInitDuty+0x452>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80032c0:	4bb4      	ldr	r3, [pc, #720]	; (8003594 <scaraInitDuty+0x678>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80032c8:	2200      	movs	r2, #0
 80032ca:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80032ce:	2104      	movs	r1, #4
 80032d0:	48b1      	ldr	r0, [pc, #708]	; (8003598 <scaraInitDuty+0x67c>)
 80032d2:	f001 f99d 	bl	8004610 <scaraInitScurve>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80032dc:	4bad      	ldr	r3, [pc, #692]	; (8003594 <scaraInitDuty+0x678>)
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80032e4:	2200      	movs	r2, #0
 80032e6:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80032ea:	2105      	movs	r1, #5
 80032ec:	48ab      	ldr	r0, [pc, #684]	; (800359c <scaraInitDuty+0x680>)
 80032ee:	f001 f98f 	bl	8004610 <scaraInitScurve>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						 angle_s, DUTY_MODE_INIT_QVA);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80032f8:	4ba6      	ldr	r3, [pc, #664]	; (8003594 <scaraInitDuty+0x678>)
 80032fa:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80032fe:	4ba5      	ldr	r3, [pc, #660]	; (8003594 <scaraInitDuty+0x678>)
 8003300:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8003304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	dd17      	ble.n	800333e <scaraInitDuty+0x422>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 800330e:	4ba1      	ldr	r3, [pc, #644]	; (8003594 <scaraInitDuty+0x678>)
 8003310:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003314:	4a9f      	ldr	r2, [pc, #636]	; (8003594 <scaraInitDuty+0x678>)
 8003316:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800331a:	2201      	movs	r2, #1
 800331c:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8003320:	2105      	movs	r1, #5
 8003322:	489e      	ldr	r0, [pc, #632]	; (800359c <scaraInitDuty+0x680>)
 8003324:	f001 f974 	bl	8004610 <scaraInitScurve>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 800332e:	4b99      	ldr	r3, [pc, #612]	; (8003594 <scaraInitDuty+0x678>)
 8003330:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003334:	4b97      	ldr	r3, [pc, #604]	; (8003594 <scaraInitDuty+0x678>)
 8003336:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e01d      	b.n	800337a <scaraInitDuty+0x45e>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800333e:	4b95      	ldr	r3, [pc, #596]	; (8003594 <scaraInitDuty+0x678>)
 8003340:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003344:	4a93      	ldr	r2, [pc, #588]	; (8003594 <scaraInitDuty+0x678>)
 8003346:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800334a:	2201      	movs	r2, #1
 800334c:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003350:	2104      	movs	r1, #4
 8003352:	4891      	ldr	r0, [pc, #580]	; (8003598 <scaraInitDuty+0x67c>)
 8003354:	f001 f95c 	bl	8004610 <scaraInitScurve>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <scaraInitDuty+0x678>)
 8003360:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003364:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <scaraInitDuty+0x678>)
 8003366:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e005      	b.n	800337a <scaraInitDuty+0x45e>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800336e:	2308      	movs	r3, #8
 8003370:	f000 bdce 	b.w	8003f10 <scaraInitDuty+0xff4>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8003374:	2305      	movs	r3, #5
 8003376:	f000 bdcb 	b.w	8003f10 <scaraInitDuty+0xff4>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800337a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <scaraInitDuty+0x46e>
			return status1;
 8003382:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003386:	f000 bdc3 	b.w	8003f10 <scaraInitDuty+0xff4>
		}
		if ( SCARA_STATUS_OK != status2) {
 800338a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 85bd 	beq.w	8003f0e <scaraInitDuty+0xff2>
			return status2;
 8003394:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003398:	f000 bdba 	b.w	8003f10 <scaraInitDuty+0xff4>
		}

	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800339c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 85b2 	bne.w	8003f0a <scaraInitDuty+0xfee>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80033a6:	4b7b      	ldr	r3, [pc, #492]	; (8003594 <scaraInitDuty+0x678>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80033ac:	4b7c      	ldr	r3, [pc, #496]	; (80035a0 <scaraInitDuty+0x684>)
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	4b78      	ldr	r3, [pc, #480]	; (8003594 <scaraInitDuty+0x678>)
 80033b2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80033b6:	601a      	str	r2, [r3, #0]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80033b8:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <scaraInitDuty+0x684>)
 80033ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <scaraInitDuty+0x678>)
 80033be:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80033c2:	601a      	str	r2, [r3, #0]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80033c4:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <scaraInitDuty+0x684>)
 80033c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c8:	4b72      	ldr	r3, [pc, #456]	; (8003594 <scaraInitDuty+0x678>)
 80033ca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80033ce:	601a      	str	r2, [r3, #0]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80033d0:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <scaraInitDuty+0x684>)
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <scaraInitDuty+0x678>)
 80033d6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80033da:	601a      	str	r2, [r3, #0]
		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80033dc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 82e5 	bne.w	80039b0 <scaraInitDuty+0xa94>
			// Trajectory 1 profile
			float s, abs_position;
			switch(command.sub_para_int) {
 80033e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	f200 80e5 	bhi.w	80035ba <scaraInitDuty+0x69e>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <scaraInitDuty+0x4dc>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003473 	.word	0x08003473
 8003400:	080034db 	.word	0x080034db
 8003404:	08003543 	.word	0x08003543
			case 0:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003408:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10e      	bne.n	800342e <scaraInitDuty+0x512>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_float;
 8003410:	4b60      	ldr	r3, [pc, #384]	; (8003594 <scaraInitDuty+0x678>)
 8003412:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8003416:	ed93 7a00 	vldr	s14, [r3]
 800341a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800341e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003422:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 8003426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800342a:	657b      	str	r3, [r7, #84]	; 0x54
 800342c:	e015      	b.n	800345a <scaraInitDuty+0x53e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800342e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10e      	bne.n	8003454 <scaraInitDuty+0x538>
					abs_position = command.sub_para_float;
 8003436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800343a:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta1_start;
 800343c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003440:	4b54      	ldr	r3, [pc, #336]	; (8003594 <scaraInitDuty+0x678>)
 8003442:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8003452:	e002      	b.n	800345a <scaraInitDuty+0x53e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003454:	230c      	movs	r3, #12
 8003456:	f000 bd5b 	b.w	8003f10 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 800345a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800345e:	2000      	movs	r0, #0
 8003460:	f002 fd3a 	bl	8005ed8 <scaraCheckWorkSpace1>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80aa 	beq.w	80035c0 <scaraInitDuty+0x6a4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800346c:	2307      	movs	r3, #7
 800346e:	f000 bd4f 	b.w	8003f10 <scaraInitDuty+0xff4>
				}
				break;
			case 1:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003472:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10e      	bne.n	8003498 <scaraInitDuty+0x57c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_float;
 800347a:	4b46      	ldr	r3, [pc, #280]	; (8003594 <scaraInitDuty+0x678>)
 800347c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8003480:	ed93 7a00 	vldr	s14, [r3]
 8003484:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 8003490:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003494:	657b      	str	r3, [r7, #84]	; 0x54
 8003496:	e015      	b.n	80034c4 <scaraInitDuty+0x5a8>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003498:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10e      	bne.n	80034be <scaraInitDuty+0x5a2>
					abs_position = command.sub_para_float;
 80034a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034a4:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta2_start;
 80034a6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034aa:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <scaraInitDuty+0x678>)
 80034ac:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80034bc:	e002      	b.n	80034c4 <scaraInitDuty+0x5a8>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80034be:	230c      	movs	r3, #12
 80034c0:	f000 bd26 	b.w	8003f10 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 80034c4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80034c8:	2001      	movs	r0, #1
 80034ca:	f002 fd05 	bl	8005ed8 <scaraCheckWorkSpace1>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d077      	beq.n	80035c4 <scaraInitDuty+0x6a8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80034d4:	2307      	movs	r3, #7
 80034d6:	f000 bd1b 	b.w	8003f10 <scaraInitDuty+0xff4>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80034da:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10e      	bne.n	8003500 <scaraInitDuty+0x5e4>
					abs_position = myDUTY.joint.d3_start + command.sub_para_float;
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <scaraInitDuty+0x678>)
 80034e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034e8:	ed93 7a00 	vldr	s14, [r3]
 80034ec:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 80034f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034fc:	657b      	str	r3, [r7, #84]	; 0x54
 80034fe:	e015      	b.n	800352c <scaraInitDuty+0x610>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003500:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <scaraInitDuty+0x60a>
					abs_position = command.sub_para_float;
 8003508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800350c:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.d3_start;
 800350e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <scaraInitDuty+0x678>)
 8003514:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003520:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8003524:	e002      	b.n	800352c <scaraInitDuty+0x610>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003526:	230c      	movs	r3, #12
 8003528:	f000 bcf2 	b.w	8003f10 <scaraInitDuty+0xff4>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 800352c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003530:	2002      	movs	r0, #2
 8003532:	f002 fcd1 	bl	8005ed8 <scaraCheckWorkSpace1>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d045      	beq.n	80035c8 <scaraInitDuty+0x6ac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800353c:	2307      	movs	r3, #7
 800353e:	f000 bce7 	b.w	8003f10 <scaraInitDuty+0xff4>
				}
				break;
			case 3:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003542:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10e      	bne.n	8003568 <scaraInitDuty+0x64c>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_float;
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <scaraInitDuty+0x678>)
 800354c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003550:	ed93 7a00 	vldr	s14, [r3]
 8003554:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
					s			 = command.sub_para_float;
 8003560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
 8003566:	e01d      	b.n	80035a4 <scaraInitDuty+0x688>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003568:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <scaraInitDuty+0x672>
					abs_position = command.sub_para_float;
 8003570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
					s			 = command.sub_para_float - myDUTY.joint.theta4_start;
 8003576:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <scaraInitDuty+0x678>)
 800357c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003588:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800358c:	e00a      	b.n	80035a4 <scaraInitDuty+0x688>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800358e:	230c      	movs	r3, #12
 8003590:	f000 bcbe 	b.w	8003f10 <scaraInitDuty+0xff4>
 8003594:	200052e8 	.word	0x200052e8
 8003598:	200053b4 	.word	0x200053b4
 800359c:	20005460 	.word	0x20005460
 80035a0:	20005790 	.word	0x20005790
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 80035a4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80035a8:	2003      	movs	r0, #3
 80035aa:	f002 fc95 	bl	8005ed8 <scaraCheckWorkSpace1>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <scaraInitDuty+0x6b0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80035b4:	2307      	movs	r3, #7
 80035b6:	f000 bcab 	b.w	8003f10 <scaraInitDuty+0xff4>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 80035ba:	230b      	movs	r3, #11
 80035bc:	f000 bca8 	b.w	8003f10 <scaraInitDuty+0xff4>
				break;
 80035c0:	bf00      	nop
 80035c2:	e004      	b.n	80035ce <scaraInitDuty+0x6b2>
				break;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <scaraInitDuty+0x6b2>
				break;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <scaraInitDuty+0x6b2>
				break;
 80035cc:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80035ce:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80ec 	bne.w	80037b0 <scaraInitDuty+0x894>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80035d8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d178      	bne.n	80036d2 <scaraInitDuty+0x7b6>
					for ( uint8_t i = 0; i < 4; i++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80035e6:	e06f      	b.n	80036c8 <scaraInitDuty+0x7ac>
						if ( i == command.sub_para_int) {
 80035e8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80035ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d12f      	bne.n	8003654 <scaraInitDuty+0x738>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80035f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035f8:	4aca      	ldr	r2, [pc, #808]	; (8003924 <scaraInitDuty+0xa08>)
 80035fa:	21ac      	movs	r1, #172	; 0xac
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800360a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800360e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003612:	49c4      	ldr	r1, [pc, #784]	; (8003924 <scaraInitDuty+0xa08>)
 8003614:	20ac      	movs	r0, #172	; 0xac
 8003616:	fb00 f303 	mul.w	r3, r0, r3
 800361a:	440b      	add	r3, r1
 800361c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003620:	601a      	str	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003622:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003626:	22ac      	movs	r2, #172	; 0xac
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003630:	4abc      	ldr	r2, [pc, #752]	; (8003924 <scaraInitDuty+0xa08>)
 8003632:	4413      	add	r3, r2
 8003634:	f103 0008 	add.w	r0, r3, #8
 8003638:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800363c:	4aba      	ldr	r2, [pc, #744]	; (8003928 <scaraInitDuty+0xa0c>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	2201      	movs	r2, #1
 8003642:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8003646:	4619      	mov	r1, r3
 8003648:	f000 fdfa 	bl	8004240 <scaraInitLSPB>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003652:	e02e      	b.n	80036b2 <scaraInitDuty+0x796>
											s, DUTY_MODE_INIT_QVT);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003654:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003658:	4ab2      	ldr	r2, [pc, #712]	; (8003924 <scaraInitDuty+0xa08>)
 800365a:	21ac      	movs	r1, #172	; 0xac
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800366a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800366e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003672:	49ac      	ldr	r1, [pc, #688]	; (8003924 <scaraInitDuty+0xa08>)
 8003674:	20ac      	movs	r0, #172	; 0xac
 8003676:	fb00 f303 	mul.w	r3, r0, r3
 800367a:	440b      	add	r3, r1
 800367c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003680:	601a      	str	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003682:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003686:	22ac      	movs	r2, #172	; 0xac
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003690:	4aa4      	ldr	r2, [pc, #656]	; (8003924 <scaraInitDuty+0xa08>)
 8003692:	4413      	add	r3, r2
 8003694:	f103 0008 	add.w	r0, r3, #8
 8003698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800369c:	4aa2      	ldr	r2, [pc, #648]	; (8003928 <scaraInitDuty+0xa0c>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	2201      	movs	r2, #1
 80036a2:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800392c <scaraInitDuty+0xa10>
 80036a6:	4619      	mov	r1, r3
 80036a8:	f000 fdca 	bl	8004240 <scaraInitLSPB>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
											0, DUTY_MODE_INIT_QVT);
						}
						myDUTY.time_total = command.time_total;
 80036b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80036b6:	4b9b      	ldr	r3, [pc, #620]	; (8003924 <scaraInitDuty+0xa08>)
 80036b8:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80036bc:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 80036be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036c2:	3301      	adds	r3, #1
 80036c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80036c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d98b      	bls.n	80035e8 <scaraInitDuty+0x6cc>
 80036d0:	e15f      	b.n	8003992 <scaraInitDuty+0xa76>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80036d2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d168      	bne.n	80037ac <scaraInitDuty+0x890>
					for ( uint8_t i = 0; i < 4; i++) {
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80036e0:	e05f      	b.n	80037a2 <scaraInitDuty+0x886>
						if ( i == command.sub_para_int) {
 80036e2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80036e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d131      	bne.n	8003752 <scaraInitDuty+0x836>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80036ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036f2:	4a8c      	ldr	r2, [pc, #560]	; (8003924 <scaraInitDuty+0xa08>)
 80036f4:	21ac      	movs	r1, #172	; 0xac
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003704:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003708:	22ac      	movs	r2, #172	; 0xac
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003712:	4a84      	ldr	r2, [pc, #528]	; (8003924 <scaraInitDuty+0xa08>)
 8003714:	4413      	add	r3, r2
 8003716:	f103 0008 	add.w	r0, r3, #8
 800371a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800371e:	4a82      	ldr	r2, [pc, #520]	; (8003928 <scaraInitDuty+0xa0c>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	2200      	movs	r2, #0
 8003724:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8003728:	4619      	mov	r1, r3
 800372a:	f000 fd89 	bl	8004240 <scaraInitLSPB>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
											s, DUTY_MODE_INIT_QVA);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003734:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003738:	4a7a      	ldr	r2, [pc, #488]	; (8003924 <scaraInitDuty+0xa08>)
 800373a:	21ac      	movs	r1, #172	; 0xac
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b76      	ldr	r3, [pc, #472]	; (8003924 <scaraInitDuty+0xa08>)
 800374a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e022      	b.n	8003798 <scaraInitDuty+0x87c>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003752:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003756:	4a73      	ldr	r2, [pc, #460]	; (8003924 <scaraInitDuty+0xa08>)
 8003758:	21ac      	movs	r1, #172	; 0xac
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003768:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800376c:	22ac      	movs	r2, #172	; 0xac
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003776:	4a6b      	ldr	r2, [pc, #428]	; (8003924 <scaraInitDuty+0xa08>)
 8003778:	4413      	add	r3, r2
 800377a:	f103 0008 	add.w	r0, r3, #8
 800377e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <scaraInitDuty+0xa0c>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	2200      	movs	r2, #0
 8003788:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800392c <scaraInitDuty+0xa10>
 800378c:	4619      	mov	r1, r3
 800378e:	f000 fd57 	bl	8004240 <scaraInitLSPB>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					for ( uint8_t i = 0; i < 4; i++) {
 8003798:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800379c:	3301      	adds	r3, #1
 800379e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80037a2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d99b      	bls.n	80036e2 <scaraInitDuty+0x7c6>
 80037aa:	e0f2      	b.n	8003992 <scaraInitDuty+0xa76>
											0, DUTY_MODE_INIT_QVA);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80037ac:	2308      	movs	r3, #8
 80037ae:	e3af      	b.n	8003f10 <scaraInitDuty+0xff4>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80037b0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 80ea 	bne.w	800398e <scaraInitDuty+0xa72>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80037ba:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d178      	bne.n	80038b4 <scaraInitDuty+0x998>
						for ( uint8_t i = 0; i < 4; i++) {
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80037c8:	e06f      	b.n	80038aa <scaraInitDuty+0x98e>
							if ( i == command.sub_para_int) {
 80037ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80037ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d12f      	bne.n	8003836 <scaraInitDuty+0x91a>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80037d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037da:	4a52      	ldr	r2, [pc, #328]	; (8003924 <scaraInitDuty+0xa08>)
 80037dc:	21ac      	movs	r1, #172	; 0xac
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80037ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037f4:	494b      	ldr	r1, [pc, #300]	; (8003924 <scaraInitDuty+0xa08>)
 80037f6:	20ac      	movs	r0, #172	; 0xac
 80037f8:	fb00 f303 	mul.w	r3, r0, r3
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003802:	601a      	str	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003804:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003808:	22ac      	movs	r2, #172	; 0xac
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003812:	4a44      	ldr	r2, [pc, #272]	; (8003924 <scaraInitDuty+0xa08>)
 8003814:	4413      	add	r3, r2
 8003816:	f103 0008 	add.w	r0, r3, #8
 800381a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800381e:	4a42      	ldr	r2, [pc, #264]	; (8003928 <scaraInitDuty+0xa0c>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	2201      	movs	r2, #1
 8003824:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8003828:	4619      	mov	r1, r3
 800382a:	f000 fef1 	bl	8004610 <scaraInitScurve>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003834:	e02e      	b.n	8003894 <scaraInitDuty+0x978>
												s, DUTY_MODE_INIT_QVT);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003836:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <scaraInitDuty+0xa08>)
 800383c:	21ac      	movs	r1, #172	; 0xac
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800384c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003850:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003854:	4933      	ldr	r1, [pc, #204]	; (8003924 <scaraInitDuty+0xa08>)
 8003856:	20ac      	movs	r0, #172	; 0xac
 8003858:	fb00 f303 	mul.w	r3, r0, r3
 800385c:	440b      	add	r3, r1
 800385e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003862:	601a      	str	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003864:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003868:	22ac      	movs	r2, #172	; 0xac
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003872:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <scaraInitDuty+0xa08>)
 8003874:	4413      	add	r3, r2
 8003876:	f103 0008 	add.w	r0, r3, #8
 800387a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <scaraInitDuty+0xa0c>)
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	2201      	movs	r2, #1
 8003884:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800392c <scaraInitDuty+0xa10>
 8003888:	4619      	mov	r1, r3
 800388a:	f000 fec1 	bl	8004610 <scaraInitScurve>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
												0, DUTY_MODE_INIT_QVT);
							}
							myDUTY.time_total = command.time_total;
 8003894:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <scaraInitDuty+0xa08>)
 800389a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800389e:	601a      	str	r2, [r3, #0]
						for ( uint8_t i = 0; i < 4; i++) {
 80038a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038a4:	3301      	adds	r3, #1
 80038a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80038aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d98b      	bls.n	80037ca <scaraInitDuty+0x8ae>
 80038b2:	e06e      	b.n	8003992 <scaraInitDuty+0xa76>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80038b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d166      	bne.n	800398a <scaraInitDuty+0xa6e>
						for ( uint8_t i = 0; i < 4; i++) {
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80038c2:	e05d      	b.n	8003980 <scaraInitDuty+0xa64>
							if ( i == command.sub_para_int) {
 80038c4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80038c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d12f      	bne.n	8003930 <scaraInitDuty+0xa14>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80038d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <scaraInitDuty+0xa08>)
 80038d6:	21ac      	movs	r1, #172	; 0xac
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80038e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80038ea:	22ac      	movs	r2, #172	; 0xac
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <scaraInitDuty+0xa08>)
 80038f6:	4413      	add	r3, r2
 80038f8:	f103 0008 	add.w	r0, r3, #8
 80038fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <scaraInitDuty+0xa0c>)
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	2200      	movs	r2, #0
 8003906:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800390a:	4619      	mov	r1, r3
 800390c:	f000 fe80 	bl	8004610 <scaraInitScurve>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
												s, DUTY_MODE_INIT_QVA);
								myDUTY.time_total = command.time_total;
 8003916:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800391a:	4b02      	ldr	r3, [pc, #8]	; (8003924 <scaraInitDuty+0xa08>)
 800391c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e028      	b.n	8003976 <scaraInitDuty+0xa5a>
 8003924:	200052e8 	.word	0x200052e8
 8003928:	20000c7c 	.word	0x20000c7c
 800392c:	00000000 	.word	0x00000000
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003930:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003934:	4ac4      	ldr	r2, [pc, #784]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003936:	21ac      	movs	r1, #172	; 0xac
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003946:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800394a:	22ac      	movs	r2, #172	; 0xac
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003954:	4abc      	ldr	r2, [pc, #752]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003956:	4413      	add	r3, r2
 8003958:	f103 0008 	add.w	r0, r3, #8
 800395c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003960:	4aba      	ldr	r2, [pc, #744]	; (8003c4c <scaraInitDuty+0xd30>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	2200      	movs	r2, #0
 8003966:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8003c50 <scaraInitDuty+0xd34>
 800396a:	4619      	mov	r1, r3
 800396c:	f000 fe50 	bl	8004610 <scaraInitScurve>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						for ( uint8_t i = 0; i < 4; i++) {
 8003976:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800397a:	3301      	adds	r3, #1
 800397c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8003980:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003984:	2b03      	cmp	r3, #3
 8003986:	d99d      	bls.n	80038c4 <scaraInitDuty+0x9a8>
 8003988:	e003      	b.n	8003992 <scaraInitDuty+0xa76>
												0, DUTY_MODE_INIT_QVA);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 800398a:	2308      	movs	r3, #8
 800398c:	e2c0      	b.n	8003f10 <scaraInitDuty+0xff4>
					}
			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800398e:	2305      	movs	r3, #5
 8003990:	e2be      	b.n	8003f10 <scaraInitDuty+0xff4>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8003992:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <scaraInitDuty+0xa84>
				return status1;
 800399a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800399e:	e2b7      	b.n	8003f10 <scaraInitDuty+0xff4>
			}
			if ( SCARA_STATUS_OK != status2) {
 80039a0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 82b2 	beq.w	8003f0e <scaraInitDuty+0xff2>
				return status2;
 80039aa:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80039ae:	e2af      	b.n	8003f10 <scaraInitDuty+0xff4>
			}

		//----Joint Quatra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80039b0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f040 82a6 	bne.w	8003f06 <scaraInitDuty+0xfea>
			SCARA_PositionTypeDef	target_point;

			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80039ba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d124      	bne.n	8003a0c <scaraInitDuty+0xaf0>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80039c2:	4ba4      	ldr	r3, [pc, #656]	; (8003c54 <scaraInitDuty+0xd38>)
 80039c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80039c8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80039cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d0:	edc7 7a05 	vstr	s15, [r7, #20]
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80039d4:	4b9f      	ldr	r3, [pc, #636]	; (8003c54 <scaraInitDuty+0xd38>)
 80039d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80039da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80039de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e2:	edc7 7a06 	vstr	s15, [r7, #24]
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80039e6:	4b9b      	ldr	r3, [pc, #620]	; (8003c54 <scaraInitDuty+0xd38>)
 80039e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80039ec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	edc7 7a07 	vstr	s15, [r7, #28]
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80039f8:	4b96      	ldr	r3, [pc, #600]	; (8003c54 <scaraInitDuty+0xd38>)
 80039fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80039fe:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	edc7 7a08 	vstr	s15, [r7, #32]
 8003a0a:	e012      	b.n	8003a32 <scaraInitDuty+0xb16>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003a0c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10c      	bne.n	8003a2e <scaraInitDuty+0xb12>
				target_point.x 		= command.target_point.x;
 8003a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a18:	617b      	str	r3, [r7, #20]
				target_point.y 		= command.target_point.y;
 8003a1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a1e:	61bb      	str	r3, [r7, #24]
				target_point.z 		= command.target_point.z;
 8003a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a24:	61fb      	str	r3, [r7, #28]
				target_point.roll	= command.target_point.roll;
 8003a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	e001      	b.n	8003a32 <scaraInitDuty+0xb16>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8003a2e:	230c      	movs	r3, #12
 8003a30:	e26e      	b.n	8003f10 <scaraInitDuty+0xff4>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8003a32:	4e88      	ldr	r6, [pc, #544]	; (8003c54 <scaraInitDuty+0xd38>)
 8003a34:	f107 0c04 	add.w	ip, r7, #4
 8003a38:	466d      	mov	r5, sp
 8003a3a:	f106 040c 	add.w	r4, r6, #12
 8003a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003a4e:	4660      	mov	r0, ip
 8003a50:	f7fe ff74 	bl	800293c <kinematicInverse>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <scaraInitDuty+0xb42>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	e258      	b.n	8003f10 <scaraInitDuty+0xff4>
			}
			// Trajectory 4 profile
			float q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8003a5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a62:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <scaraInitDuty+0xd38>)
 8003a64:	edd3 7a08 	vldr	s15, [r3, #32]
 8003a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8003a70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a74:	4b77      	ldr	r3, [pc, #476]	; (8003c54 <scaraInitDuty+0xd38>)
 8003a76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8003a82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a86:	4b73      	ldr	r3, [pc, #460]	; (8003c54 <scaraInitDuty+0xd38>)
 8003a88:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8003a94:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a98:	4b6e      	ldr	r3, [pc, #440]	; (8003c54 <scaraInitDuty+0xd38>)
 8003a9a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40



			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8003aa6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 8119 	bne.w	8003ce2 <scaraInitDuty+0xdc6>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003ab0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d14a      	bne.n	8003b4e <scaraInitDuty+0xc32>
					for ( uint8_t i = 0; i < 4; i++) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003abe:	e03b      	b.n	8003b38 <scaraInitDuty+0xc1c>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003ac0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ac4:	4a60      	ldr	r2, [pc, #384]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003ac6:	21ac      	movs	r1, #172	; 0xac
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003ad6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ada:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003ade:	495a      	ldr	r1, [pc, #360]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003ae0:	20ac      	movs	r0, #172	; 0xac
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aec:	601a      	str	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003aee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003af2:	22ac      	movs	r2, #172	; 0xac
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003afe:	4413      	add	r3, r2
 8003b00:	f103 0008 	add.w	r0, r3, #8
 8003b04:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b08:	4a50      	ldr	r2, [pc, #320]	; (8003c4c <scaraInitDuty+0xd30>)
 8003b0a:	5cd1      	ldrb	r1, [r2, r3]
 8003b0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b16:	4413      	add	r3, r2
 8003b18:	3b34      	subs	r3, #52	; 0x34
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	eeb0 0a67 	vmov.f32	s0, s15
 8003b24:	f000 fb8c 	bl	8004240 <scaraInitLSPB>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003b2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b32:	3301      	adds	r3, #1
 8003b34:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003b38:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d9bf      	bls.n	8003ac0 <scaraInitDuty+0xba4>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8003b40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b44:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003b46:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e1df      	b.n	8003f0e <scaraInitDuty+0xff2>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003b4e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 80c3 	bne.w	8003cde <scaraInitDuty+0xdc2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003b5e:	e035      	b.n	8003bcc <scaraInitDuty+0xcb0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003b60:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003b66:	21ac      	movs	r1, #172	; 0xac
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003b76:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b7a:	22ac      	movs	r2, #172	; 0xac
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003b86:	4413      	add	r3, r2
 8003b88:	f103 0008 	add.w	r0, r3, #8
 8003b8c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b90:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <scaraInitDuty+0xd30>)
 8003b92:	5cd1      	ldrb	r1, [r2, r3]
 8003b94:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b34      	subs	r3, #52	; 0x34
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	f000 fb48 	bl	8004240 <scaraInitLSPB>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
													q[i], DUTY_MODE_INIT_QVA);
						myDUTY.time_total = command.time_total;
 8003bb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003bbc:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003bc0:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003bc2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003bcc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d9c5      	bls.n	8003b60 <scaraInitDuty+0xc44>
					}
					myDUTY.time_total = 0;
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003bd6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003be6:	e027      	b.n	8003c38 <scaraInitDuty+0xd1c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8003be8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003bee:	21ac      	movs	r1, #172	; 0xac
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bfa:	ed93 7a00 	vldr	s14, [r3]
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003c00:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	dd0d      	ble.n	8003c2e <scaraInitDuty+0xd12>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003c12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003c18:	21ac      	movs	r1, #172	; 0xac
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <scaraInitDuty+0xd2c>)
 8003c28:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003c2c:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003c2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c32:	3301      	adds	r3, #1
 8003c34:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003c38:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d9d3      	bls.n	8003be8 <scaraInitDuty+0xccc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8003c46:	e045      	b.n	8003cd4 <scaraInitDuty+0xdb8>
 8003c48:	200052e8 	.word	0x200052e8
 8003c4c:	20000c7c 	.word	0x20000c7c
 8003c50:	00000000 	.word	0x00000000
 8003c54:	20005790 	.word	0x20005790
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003c58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c5c:	4ab0      	ldr	r2, [pc, #704]	; (8003f20 <scaraInitDuty+0x1004>)
 8003c5e:	21ac      	movs	r1, #172	; 0xac
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8003c6e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c72:	4aab      	ldr	r2, [pc, #684]	; (8003f20 <scaraInitDuty+0x1004>)
 8003c74:	f202 42a4 	addw	r2, r2, #1188	; 0x4a4
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	49a9      	ldr	r1, [pc, #676]	; (8003f20 <scaraInitDuty+0x1004>)
 8003c7c:	20ac      	movs	r0, #172	; 0xac
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	440b      	add	r3, r1
 8003c84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c88:	601a      	str	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003c8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c8e:	22ac      	movs	r2, #172	; 0xac
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003c98:	4aa1      	ldr	r2, [pc, #644]	; (8003f20 <scaraInitDuty+0x1004>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f103 0008 	add.w	r0, r3, #8
 8003ca0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ca4:	4a9f      	ldr	r2, [pc, #636]	; (8003f24 <scaraInitDuty+0x1008>)
 8003ca6:	5cd1      	ldrb	r1, [r2, r3]
 8003ca8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b34      	subs	r3, #52	; 0x34
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc0:	f000 fabe 	bl	8004240 <scaraInitLSPB>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003cca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8003cd4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d9bd      	bls.n	8003c58 <scaraInitDuty+0xd3c>
 8003cdc:	e117      	b.n	8003f0e <scaraInitDuty+0xff2>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8003cde:	2308      	movs	r3, #8
 8003ce0:	e116      	b.n	8003f10 <scaraInitDuty+0xff4>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8003ce2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	f040 810b 	bne.w	8003f02 <scaraInitDuty+0xfe6>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003cec:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d14a      	bne.n	8003d8a <scaraInitDuty+0xe6e>
					for ( uint8_t i = 0; i < 4; i++) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003cfa:	e03b      	b.n	8003d74 <scaraInitDuty+0xe58>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d00:	4a87      	ldr	r2, [pc, #540]	; (8003f20 <scaraInitDuty+0x1004>)
 8003d02:	21ac      	movs	r1, #172	; 0xac
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8003d12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d1a:	4981      	ldr	r1, [pc, #516]	; (8003f20 <scaraInitDuty+0x1004>)
 8003d1c:	20ac      	movs	r0, #172	; 0xac
 8003d1e:	fb00 f303 	mul.w	r3, r0, r3
 8003d22:	440b      	add	r3, r1
 8003d24:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003d28:	601a      	str	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d2e:	22ac      	movs	r2, #172	; 0xac
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003d38:	4a79      	ldr	r2, [pc, #484]	; (8003f20 <scaraInitDuty+0x1004>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f103 0008 	add.w	r0, r3, #8
 8003d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d44:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <scaraInitDuty+0x1008>)
 8003d46:	5cd1      	ldrb	r1, [r2, r3]
 8003d48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d52:	4413      	add	r3, r2
 8003d54:	3b34      	subs	r3, #52	; 0x34
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	f000 fc56 	bl	8004610 <scaraInitScurve>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d9bf      	bls.n	8003cfc <scaraInitDuty+0xde0>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8003d7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d80:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <scaraInitDuty+0x1004>)
 8003d82:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e0c1      	b.n	8003f0e <scaraInitDuty+0xff2>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003d8a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 80b5 	bne.w	8003efe <scaraInitDuty+0xfe2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003d9a:	e02f      	b.n	8003dfc <scaraInitDuty+0xee0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003d9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003da0:	4a5f      	ldr	r2, [pc, #380]	; (8003f20 <scaraInitDuty+0x1004>)
 8003da2:	21ac      	movs	r1, #172	; 0xac
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003db2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003db6:	22ac      	movs	r2, #172	; 0xac
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003dc0:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <scaraInitDuty+0x1004>)
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f103 0008 	add.w	r0, r3, #8
 8003dc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003dcc:	4a55      	ldr	r2, [pc, #340]	; (8003f24 <scaraInitDuty+0x1008>)
 8003dce:	5cd1      	ldrb	r1, [r2, r3]
 8003dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b34      	subs	r3, #52	; 0x34
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	2200      	movs	r2, #0
 8003de4:	eeb0 0a67 	vmov.f32	s0, s15
 8003de8:	f000 fc12 	bl	8004610 <scaraInitScurve>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003df2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003df6:	3301      	adds	r3, #1
 8003df8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003dfc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d9cb      	bls.n	8003d9c <scaraInitDuty+0xe80>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 8003e04:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e06:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003e16:	e027      	b.n	8003e68 <scaraInitDuty+0xf4c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8003e18:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e1c:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e1e:	21ac      	movs	r1, #172	; 0xac
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e30:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e40:	dd0d      	ble.n	8003e5e <scaraInitDuty+0xf42>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003e42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e46:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e48:	21ac      	movs	r1, #172	; 0xac
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e58:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8003e5c:	601a      	str	r2, [r3, #0]
					for ( uint8_t i = 0; i < 4; i++) {
 8003e5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e62:	3301      	adds	r3, #1
 8003e64:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003e68:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d9d3      	bls.n	8003e18 <scaraInitDuty+0xefc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003e76:	e03d      	b.n	8003ef4 <scaraInitDuty+0xfd8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003e78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e7e:	21ac      	movs	r1, #172	; 0xac
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8003e8e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e92:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e94:	f202 42a4 	addw	r2, r2, #1188	; 0x4a4
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	4921      	ldr	r1, [pc, #132]	; (8003f20 <scaraInitDuty+0x1004>)
 8003e9c:	20ac      	movs	r0, #172	; 0xac
 8003e9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003ea8:	601a      	str	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8003eaa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003eae:	22ac      	movs	r2, #172	; 0xac
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003eb8:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <scaraInitDuty+0x1004>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	f103 0008 	add.w	r0, r3, #8
 8003ec0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <scaraInitDuty+0x1008>)
 8003ec6:	5cd1      	ldrb	r1, [r2, r3]
 8003ec8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3b34      	subs	r3, #52	; 0x34
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	2201      	movs	r2, #1
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	f000 fb96 	bl	8004610 <scaraInitScurve>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
					for ( uint8_t i = 0; i < 4; i++) {
 8003eea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003ef4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d9bd      	bls.n	8003e78 <scaraInitDuty+0xf5c>
 8003efc:	e007      	b.n	8003f0e <scaraInitDuty+0xff2>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8003efe:	2308      	movs	r3, #8
 8003f00:	e006      	b.n	8003f10 <scaraInitDuty+0xff4>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8003f02:	2305      	movs	r3, #5
 8003f04:	e004      	b.n	8003f10 <scaraInitDuty+0xff4>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8003f06:	2304      	movs	r3, #4
 8003f08:	e002      	b.n	8003f10 <scaraInitDuty+0xff4>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e000      	b.n	8003f10 <scaraInitDuty+0xff4>
	}

	return SCARA_STATUS_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	376c      	adds	r7, #108	; 0x6c
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003f1a:	b004      	add	sp, #16
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200052e8 	.word	0x200052e8
 8003f24:	20000c7c 	.word	0x20000c7c

08003f28 <scaraInitLine>:

SCARA_StatusTypeDef			scaraInitLine		(Path_Line_TypeDef *line,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end) {
 8003f28:	b084      	sub	sp, #16
 8003f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2c:	b08d      	sub	sp, #52	; 0x34
 8003f2e:	af0a      	add	r7, sp, #40	; 0x28
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8003f3a:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8003f3e:	466d      	mov	r5, sp
 8003f40:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7fe fcf0 	bl	800293c <kinematicInverse>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <scaraInitLine+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003f62:	2307      	movs	r3, #7
 8003f64:	e05e      	b.n	8004024 <scaraInitLine+0xfc>
	}
	// Init line params
	line->x1 = end.x;
 8003f66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
	line->y1 = end.y;
 8003f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
	line->z1 = end.z;
 8003f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	615a      	str	r2, [r3, #20]
	line->x0 = start.x;
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
	line->y0 = start.y;
 8003f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
	line->z0 = start.z;
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]
	line->denta_x = end.x  -  start.x;
 8003f8a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003f8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	edc3 7a06 	vstr	s15, [r3, #24]
	line->denta_y = end.y  -  start.y;
 8003f9c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003fa0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	edc3 7a07 	vstr	s15, [r3, #28]
	line->denta_z = end.z  -  start.z;
 8003fae:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003fb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	edc3 7a08 	vstr	s15, [r3, #32]
	line->total_s = sqrtf((line->denta_x)*(line->denta_x)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	ed93 7a06 	vldr	s14, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
			       +(line->denta_y)*(line->denta_y)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	edd3 6a07 	vldr	s13, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
				   +(line->denta_z)*(line->denta_z));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	edd3 6a08 	vldr	s13, [r3, #32]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	line->total_s = sqrtf((line->denta_x)*(line->denta_x)
 8003ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffc:	f010 fe54 	bl	8014ca8 <sqrtf>
 8004000:	eef0 7a40 	vmov.f32	s15, s0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	line->x_current = line->x0;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
	line->y_current = line->y0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
	line->z_current = line->z0;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

	return SCARA_STATUS_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800402e:	b004      	add	sp, #16
 8004030:	4770      	bx	lr
	...

08004034 <scaraInitCircle>:

SCARA_StatusTypeDef			scaraInitCircle		(Path_Circle_TypeDef *circle,
												SCARA_PositionTypeDef start,
												SCARA_PositionTypeDef end,
												SCARA_PositionTypeDef center,
												int32_t dir){
 8004034:	b084      	sub	sp, #16
 8004036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004038:	b097      	sub	sp, #92	; 0x5c
 800403a:	af0a      	add	r7, sp, #40	; 0x28
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8004046:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800404a:	466d      	mov	r5, sp
 800404c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004062:	4630      	mov	r0, r6
 8004064:	f7fe fc6a 	bl	800293c <kinematicInverse>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <scaraInitCircle+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800406e:	2307      	movs	r3, #7
 8004070:	e0dc      	b.n	800422c <scaraInitCircle+0x1f8>
	}

	if( 1 != dir && -1 != dir) {
 8004072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004076:	2b01      	cmp	r3, #1
 8004078:	d006      	beq.n	8004088 <scaraInitCircle+0x54>
 800407a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d001      	beq.n	8004088 <scaraInitCircle+0x54>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8004084:	2306      	movs	r3, #6
 8004086:	e0d1      	b.n	800422c <scaraInitCircle+0x1f8>
	}

	float v_x_start, v_y_start, v_x_stop, v_y_stop;
	float r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8004088:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800408c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004094:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	v_y_start = start.y - center.y;
 8004098:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800409c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80040a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_x_stop  = end.x  - center.x;
 80040a8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80040ac:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80040b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b4:	edc7 7a08 	vstr	s15, [r7, #32]
	v_y_stop  = end.y  - center.y;
 80040b8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80040bc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80040c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c4:	edc7 7a07 	vstr	s15, [r7, #28]
	r1 = sqrtf(v_x_start*v_x_start + v_y_start*v_y_start);
 80040c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80040cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80040d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e4:	eeb0 0a67 	vmov.f32	s0, s15
 80040e8:	f010 fdde 	bl	8014ca8 <sqrtf>
 80040ec:	ed87 0a06 	vstr	s0, [r7, #24]
	r2 = sqrtf(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 80040f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80040f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80040f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004100:	edd7 7a07 	vldr	s15, [r7, #28]
 8004104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	eeb0 0a67 	vmov.f32	s0, s15
 8004110:	f010 fdca 	bl	8014ca8 <sqrtf>
 8004114:	ed87 0a05 	vstr	s0, [r7, #20]

	if( 1.0 < fabsf(r1 - r2)) {
 8004118:	ed97 7a06 	vldr	s14, [r7, #24]
 800411c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004124:	eef0 7ae7 	vabs.f32	s15, s15
 8004128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	dd01      	ble.n	800413a <scaraInitCircle+0x106>
		return SCARA_STATUS_ERROR_PARA; // 2 point start & stop are not in a circle together !!
 8004136:	2306      	movs	r3, #6
 8004138:	e078      	b.n	800422c <scaraInitCircle+0x1f8>
	}

	angle_start = atan2f(v_y_start, v_x_start);
 800413a:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800413e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004142:	f010 fdaf 	bl	8014ca4 <atan2f>
 8004146:	ed87 0a04 	vstr	s0, [r7, #16]
	angle_stop  = atan2f(v_y_stop, v_x_stop);
 800414a:	edd7 0a08 	vldr	s1, [r7, #32]
 800414e:	ed97 0a07 	vldr	s0, [r7, #28]
 8004152:	f010 fda7 	bl	8014ca4 <atan2f>
 8004156:	ed87 0a03 	vstr	s0, [r7, #12]
	delta_angle = angle_stop - angle_start;
 800415a:	ed97 7a03 	vldr	s14, [r7, #12]
 800415e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004166:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if ( 0 > delta_angle) {
 800416a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800416e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d507      	bpl.n	8004188 <scaraInitCircle+0x154>
		delta_angle += 2*PI;
 8004178:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800417c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800423c <scaraInitCircle+0x208>
 8004180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004184:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8004188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418c:	2b00      	cmp	r3, #0
 800418e:	da07      	bge.n	80041a0 <scaraInitCircle+0x16c>
		delta_angle = 2*PI - delta_angle;
 8004190:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800423c <scaraInitCircle+0x208>
 8004194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}
	// Init circle params
	circle->dir = dir;
 80041a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a4:	b25a      	sxtb	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	605a      	str	r2, [r3, #4]
	circle->angle_start = angle_start;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	609a      	str	r2, [r3, #8]
	circle->angle_stop  = angle_stop;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	60da      	str	r2, [r3, #12]
	circle->total_angle = delta_angle;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
	circle->total_s = delta_angle*r1;
 80041c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80041c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	circle->x0 = start.x;
 80041d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]
	circle->y0 = start.y;
 80041da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
	circle->x1 = end.x;
 80041e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	615a      	str	r2, [r3, #20]
	circle->y1 = end.y;
 80041e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	61da      	str	r2, [r3, #28]
	circle->xi = center.x;
 80041f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	621a      	str	r2, [r3, #32]
	circle->yi = center.y;
 80041f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24
	circle->z0 = start.z;
 8004200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	629a      	str	r2, [r3, #40]	; 0x28
	circle->z1 = start.z;
 8004206:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
	circle->zi = start.z;
 800420c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
	circle->x_current = circle->x0;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c
	circle->y_current = circle->y0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
	circle->z_current = circle->z0;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44

	return SCARA_STATUS_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3734      	adds	r7, #52	; 0x34
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004236:	b004      	add	sp, #16
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40c90fdb 	.word	0x40c90fdb

08004240 <scaraInitLSPB>:

SCARA_StatusTypeDef	scaraInitLSPB	(Trajectory_LSPB_TypeDef *lspb,
									Trajectory_TargetTypeDef target,
									float total_s,
									ModeInitTypeDef modeinit) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b094      	sub	sp, #80	; 0x50
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	460b      	mov	r3, r1
 800424a:	ed87 0a01 	vstr	s0, [r7, #4]
 800424e:	72fb      	strb	r3, [r7, #11]
 8004250:	4613      	mov	r3, r2
 8004252:	72bb      	strb	r3, [r7, #10]
	 float v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d104      	bne.n	8004264 <scaraInitLSPB+0x24>
		 v_design = V_DESIGN_3D;
 800425a:	4b8e      	ldr	r3, [pc, #568]	; (8004494 <scaraInitLSPB+0x254>)
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_3D;
 800425e:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <scaraInitLSPB+0x258>)
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
 8004262:	e029      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_ROLL == target) {
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d104      	bne.n	8004274 <scaraInitLSPB+0x34>
		 v_design = V_DESIGN_ROLL;
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <scaraInitLSPB+0x25c>)
 800426c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_ROLL;
 800426e:	4b8c      	ldr	r3, [pc, #560]	; (80044a0 <scaraInitLSPB+0x260>)
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
 8004272:	e021      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J0 == target) {
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <scaraInitLSPB+0x44>
		 v_design = V_DESIGN_J0;
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <scaraInitLSPB+0x25c>)
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J0;
 800427e:	4b88      	ldr	r3, [pc, #544]	; (80044a0 <scaraInitLSPB+0x260>)
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
 8004282:	e019      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J1 == target) {
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d104      	bne.n	8004294 <scaraInitLSPB+0x54>
		 v_design = V_DESIGN_J1;
 800428a:	4b84      	ldr	r3, [pc, #528]	; (800449c <scaraInitLSPB+0x25c>)
 800428c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J1;
 800428e:	4b84      	ldr	r3, [pc, #528]	; (80044a0 <scaraInitLSPB+0x260>)
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
 8004292:	e011      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J2 == target) {
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d104      	bne.n	80042a4 <scaraInitLSPB+0x64>
		 v_design = V_DESIGN_J2;
 800429a:	4b7e      	ldr	r3, [pc, #504]	; (8004494 <scaraInitLSPB+0x254>)
 800429c:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J2;
 800429e:	4b7e      	ldr	r3, [pc, #504]	; (8004498 <scaraInitLSPB+0x258>)
 80042a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a2:	e009      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else if (TRAJECTORY_J3 == target) {
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d104      	bne.n	80042b4 <scaraInitLSPB+0x74>
		 v_design = V_DESIGN_J3;
 80042aa:	4b7c      	ldr	r3, [pc, #496]	; (800449c <scaraInitLSPB+0x25c>)
 80042ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		 a_design = A_DESIGN_J3;
 80042ae:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <scaraInitLSPB+0x260>)
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b2:	e001      	b.n	80042b8 <scaraInitLSPB+0x78>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80042b4:	2306      	movs	r3, #6
 80042b6:	e1a5      	b.n	8004604 <scaraInitLSPB+0x3c4>
	 }

	 q0 = 0;
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	 q1 = total_s;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
	 v0 = 0;
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
	 v1 = 0;
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24

	 if ( q0 <= q1) {
 80042ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80042d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80042d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d803      	bhi.n	80042e8 <scaraInitLSPB+0xa8>
		 dir = 1;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042e6:	e008      	b.n	80042fa <scaraInitLSPB+0xba>
	 } else {
		 dir = -1;
 80042e8:	23ff      	movs	r3, #255	; 0xff
 80042ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 q1 = -q1;
 80042ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80042f2:	eef1 7a67 	vneg.f32	s15, s15
 80042f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80042fa:	7abb      	ldrb	r3, [r7, #10]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d157      	bne.n	80043b0 <scaraInitLSPB+0x170>
		 float v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
		 v_lower 	= (q1 - q0) / tf;
 8004306:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800430a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800430e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004312:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431a:	edc7 7a08 	vstr	s15, [r7, #32]
		 v_upper 	= 2*(q1 - q0) / tf;
 800431e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004322:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800432e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004336:	edc7 7a07 	vstr	s15, [r7, #28]

		 if ( v_design < v_lower) {
 800433a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800433e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	d501      	bpl.n	8004350 <scaraInitLSPB+0x110>
			 return SCARA_STATUS_ERROR_OVER_VELOC;
 800434c:	2309      	movs	r3, #9
 800434e:	e159      	b.n	8004604 <scaraInitLSPB+0x3c4>
		 } else {

			 if ( v_upper <= v_design) {
 8004350:	ed97 7a07 	vldr	s14, [r7, #28]
 8004354:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d801      	bhi.n	8004366 <scaraInitLSPB+0x126>
				 v_design = v_upper;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	64fb      	str	r3, [r7, #76]	; 0x4c
			 }

			 tc_upper	= tf - (q1 - q0)/v_design;
 8004366:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800436a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800436e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004372:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800437a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800437e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004382:	edc7 7a06 	vstr	s15, [r7, #24]
			 a_upper	= v_design/tc_upper;
 8004386:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800438a:	ed97 7a06 	vldr	s14, [r7, #24]
 800438e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004392:	edc7 7a05 	vstr	s15, [r7, #20]

			 if ( a_upper > a_design) {
 8004396:	ed97 7a05 	vldr	s14, [r7, #20]
 800439a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800439e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	dd01      	ble.n	80043ac <scaraInitLSPB+0x16c>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80043a8:	230a      	movs	r3, #10
 80043aa:	e12b      	b.n	8004604 <scaraInitLSPB+0x3c4>
			 } else {
				 a_design = a_upper;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
			 }
		 }
	 }

	 // Check condition trapezoidal ---> triangle
	 if ( (fabsf(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80043b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80043b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80043b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80043c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80043c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80043cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80043d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80043d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043e0:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80043e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80043f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80043f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	d850      	bhi.n	80044a8 <scaraInitLSPB+0x268>
		 v_lim 	= sqrtf(fabsf(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8004406:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800440a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	eeb0 7ae7 	vabs.f32	s14, s15
 8004416:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800441a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800441e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8004422:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004426:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800442a:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800442e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004432:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004436:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800443a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800443e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004446:	eeb0 0a67 	vmov.f32	s0, s15
 800444a:	f010 fc2d 	bl	8014ca8 <sqrtf>
 800444e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		 ta		= (v_lim - v0)/a_design;
 8004452:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004456:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800445a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800445e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004466:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 td		= (v_lim - v1)/a_design;
 800446a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800446e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004472:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004476:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800447a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		 tf		= ta + td;
 8004482:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004486:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800448a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004492:	e075      	b.n	8004580 <scaraInitLSPB+0x340>
 8004494:	41a00000 	.word	0x41a00000
 8004498:	40a00000 	.word	0x40a00000
 800449c:	3ea0d97c 	.word	0x3ea0d97c
 80044a0:	3d00adfd 	.word	0x3d00adfd
 80044a4:	3c23d70a 	.word	0x3c23d70a
	 } else {
		 v_lim	= v_design;
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
		 ta		= (v_lim - v0)/a_design;
 80044ac:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80044b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80044b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 td		= (v_lim - v1)/a_design;
 80044c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80044c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		 tf		= fabsf(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80044dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80044e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80044e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e8:	eef0 6ae7 	vabs.f32	s13, s15
 80044ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80044f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044fc:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004500:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004504:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8004508:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 800450c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004510:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004514:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004518:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800451c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8004520:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004524:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004528:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800452c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004534:	ee37 7a27 	vadd.f32	s14, s14, s15
					 	+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8004538:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800453c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004540:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004544:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004548:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 800454c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004550:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004554:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004558:	ee76 7a67 	vsub.f32	s15, s12, s15
 800455c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004560:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8004564:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8004568:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800456c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004570:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004574:	ee66 7aa7 	vmul.f32	s15, s13, s15
		 tf		= fabsf(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8004578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8004580:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004584:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 80044a4 <scaraInitLSPB+0x264>
 8004588:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800458c:	eeb0 0a66 	vmov.f32	s0, s13
 8004590:	f010 fac6 	bl	8014b20 <ceilf>
 8004594:	eef0 7a40 	vmov.f32	s15, s0
 8004598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459c:	ee17 3a90 	vmov	r3, s15
 80045a0:	613b      	str	r3, [r7, #16]
	 // Init lspb params
	 lspb->dir= dir;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80045a8:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ae:	605a      	str	r2, [r3, #4]
	 lspb->s1 = q1;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b4:	609a      	str	r2, [r3, #8]
	 lspb->Ta = ta;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ba:	621a      	str	r2, [r3, #32]
	 lspb->Td = td;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
	 lspb->Tf = tf;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
	 lspb->a_design = a_design;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045cc:	619a      	str	r2, [r3, #24]
	 lspb->v_design = v_design;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d2:	615a      	str	r2, [r3, #20]
	 lspb->v_lim = v_lim;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d8:	61da      	str	r2, [r3, #28]
	 lspb->v0 = v0;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	60da      	str	r2, [r3, #12]
	 lspb->v1 = v1;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	611a      	str	r2, [r3, #16]
	 lspb->num_of_sampling = no_sample;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c
	 lspb->total_s = lspb->s1 - lspb->s0;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80045f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	 return SCARA_STATUS_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3750      	adds	r7, #80	; 0x50
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	0000      	movs	r0, r0
	...

08004610 <scaraInitScurve>:

SCARA_StatusTypeDef	scaraInitScurve	(Trajectory_Scurve_TypeDef *scurve,
									Trajectory_TargetTypeDef target,
									float total_s,
									ModeInitTypeDef modeinit) {
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b09e      	sub	sp, #120	; 0x78
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	460b      	mov	r3, r1
 800461a:	ed87 0a01 	vstr	s0, [r7, #4]
 800461e:	72fb      	strb	r3, [r7, #11]
 8004620:	4613      	mov	r3, r2
 8004622:	72bb      	strb	r3, [r7, #10]
	 float v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 float v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d104      	bne.n	8004634 <scaraInitScurve+0x24>
		 v_design = V_DESIGN_3D;
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <scaraInitScurve+0x1b0>)
 800462c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_3D;
 800462e:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <scaraInitScurve+0x1b4>)
 8004630:	673b      	str	r3, [r7, #112]	; 0x70
 8004632:	e021      	b.n	8004678 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J0 == target) {
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <scaraInitScurve+0x34>
		 v_design = V_DESIGN_J0;
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <scaraInitScurve+0x1b8>)
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J0;
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <scaraInitScurve+0x1bc>)
 8004640:	673b      	str	r3, [r7, #112]	; 0x70
 8004642:	e019      	b.n	8004678 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J1 == target) {
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d104      	bne.n	8004654 <scaraInitScurve+0x44>
		 v_design = V_DESIGN_J1;
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <scaraInitScurve+0x1b8>)
 800464c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J1;
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <scaraInitScurve+0x1bc>)
 8004650:	673b      	str	r3, [r7, #112]	; 0x70
 8004652:	e011      	b.n	8004678 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J2 == target) {
 8004654:	7afb      	ldrb	r3, [r7, #11]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d104      	bne.n	8004664 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_J2;
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <scaraInitScurve+0x1b0>)
 800465c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J2;
 800465e:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <scaraInitScurve+0x1b4>)
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
 8004662:	e009      	b.n	8004678 <scaraInitScurve+0x68>
	 } else if (TRAJECTORY_J3 == target) {
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d104      	bne.n	8004674 <scaraInitScurve+0x64>
		 v_design = V_DESIGN_J3;
 800466a:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <scaraInitScurve+0x1b8>)
 800466c:	677b      	str	r3, [r7, #116]	; 0x74
		 a_design = A_DESIGN_J3;
 800466e:	4b57      	ldr	r3, [pc, #348]	; (80047cc <scaraInitScurve+0x1bc>)
 8004670:	673b      	str	r3, [r7, #112]	; 0x70
 8004672:	e001      	b.n	8004678 <scaraInitScurve+0x68>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004674:	2306      	movs	r3, #6
 8004676:	e1a5      	b.n	80049c4 <scaraInitScurve+0x3b4>
	 }

	 v0 = 0;
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	657b      	str	r3, [r7, #84]	; 0x54
	 v1 = 0;
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	653b      	str	r3, [r7, #80]	; 0x50
	 q0 = 0;
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
	 q1 = total_s;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	66fb      	str	r3, [r7, #108]	; 0x6c

	 if ( q1 < q0) {
 800468e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8004692:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d508      	bpl.n	80046b2 <scaraInitScurve+0xa2>
		 dir = -1;
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <scaraInitScurve+0x1c0>)
 80046a2:	65fb      	str	r3, [r7, #92]	; 0x5c
		 q1 = -q1;
 80046a4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80046a8:	eef1 7a67 	vneg.f32	s15, s15
 80046ac:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 80046b0:	e002      	b.n	80046b8 <scaraInitScurve+0xa8>

	 } else {
		 dir = 1;
 80046b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80046b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80046b8:	7abb      	ldrb	r3, [r7, #10]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d138      	bne.n	8004730 <scaraInitScurve+0x120>
		 float t_upper, v_upper, a_upper;

		 tf = scurve->Tf;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	64bb      	str	r3, [r7, #72]	; 0x48
		 t_upper = tf / 4;
 80046c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80046c8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80046cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046d0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		 v_upper = (q1 - q0) / t_upper;
 80046d4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80046d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80046dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80046e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		 if ( v_upper > v_design) {
 80046ec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80046f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80046f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	dd01      	ble.n	8004702 <scaraInitScurve+0xf2>
			 return SCARA_STATUS_ERROR_OVER_VELOC;
 80046fe:	2309      	movs	r3, #9
 8004700:	e160      	b.n	80049c4 <scaraInitScurve+0x3b4>
		 } else {
			 v_design = v_upper;
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	677b      	str	r3, [r7, #116]	; 0x74
		 }

		 a_upper = v_design / t_upper;
 8004706:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800470a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		 if ( a_upper > a_design) {
 8004716:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800471a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800471e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	dd01      	ble.n	800472c <scaraInitScurve+0x11c>
			 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8004728:	230a      	movs	r3, #10
 800472a:	e14b      	b.n	80049c4 <scaraInitScurve+0x3b4>
		 } else {
			 a_design = a_upper;
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	673b      	str	r3, [r7, #112]	; 0x70
		 }
	 }

	 no_phases = 5;
 8004730:	2305      	movs	r3, #5
 8004732:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	 tm = v_design/a_design;
 8004736:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800473a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	 tc = total_s/v_design - 2*tm;
 8004746:	edd7 6a01 	vldr	s13, [r7, #4]
 800474a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004756:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800475a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800475e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	 // Check condition 4 phase
	 if( 0.0 > tc) {
 8004762:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	d513      	bpl.n	8004798 <scaraInitScurve+0x188>
		 tc = 0;
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
		 no_phases = 4;
 8004776:	2304      	movs	r3, #4
 8004778:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		 tm = sqrtf(total_s/(2*a_design));
 800477c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004784:	ed97 7a01 	vldr	s14, [r7, #4]
 8004788:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800478c:	eeb0 0a66 	vmov.f32	s0, s13
 8004790:	f010 fa8a 	bl	8014ca8 <sqrtf>
 8004794:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	 }
	 if ( 0.001 > tm) {
 8004798:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800479a:	f7fb fee5 	bl	8000568 <__aeabi_f2d>
 800479e:	a306      	add	r3, pc, #24	; (adr r3, 80047b8 <scaraInitScurve+0x1a8>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fc f9aa 	bl	8000afc <__aeabi_dcmplt>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <scaraInitScurve+0x1c8>
		 j_max = 0;
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b4:	e018      	b.n	80047e8 <scaraInitScurve+0x1d8>
 80047b6:	bf00      	nop
 80047b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80047bc:	3f50624d 	.word	0x3f50624d
 80047c0:	41a00000 	.word	0x41a00000
 80047c4:	40a00000 	.word	0x40a00000
 80047c8:	3ea0d97c 	.word	0x3ea0d97c
 80047cc:	3d00adfd 	.word	0x3d00adfd
 80047d0:	bf800000 	.word	0xbf800000
 80047d4:	3c23d70a 	.word	0x3c23d70a
	 } else {
		 j_max = a_design/tm;
 80047d8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80047dc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80047e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	 }
	 v_lim = a_design*tm;
 80047e8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80047ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	 tf    = 4*tm + tc;
 80047f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80047fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004804:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	 no_sample = ceilf(tf / T_SAMPLING);
 8004810:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004814:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80047d4 <scaraInitScurve+0x1c4>
 8004818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800481c:	eeb0 0a66 	vmov.f32	s0, s13
 8004820:	f010 f97e 	bl	8014b20 <ceilf>
 8004824:	eef0 7a40 	vmov.f32	s15, s0
 8004828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482c:	ee17 3a90 	vmov	r3, s15
 8004830:	637b      	str	r3, [r7, #52]	; 0x34

	 v_1 = 0.5*j_max*tm*tm;
 8004832:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004834:	f7fb fe98 	bl	8000568 <__aeabi_f2d>
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	4b63      	ldr	r3, [pc, #396]	; (80049cc <scaraInitScurve+0x3bc>)
 800483e:	f7fb feeb 	bl	8000618 <__aeabi_dmul>
 8004842:	4603      	mov	r3, r0
 8004844:	460c      	mov	r4, r1
 8004846:	4625      	mov	r5, r4
 8004848:	461c      	mov	r4, r3
 800484a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800484c:	f7fb fe8c 	bl	8000568 <__aeabi_f2d>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	f7fb fede 	bl	8000618 <__aeabi_dmul>
 800485c:	4603      	mov	r3, r0
 800485e:	460c      	mov	r4, r1
 8004860:	4625      	mov	r5, r4
 8004862:	461c      	mov	r4, r3
 8004864:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004866:	f7fb fe7f 	bl	8000568 <__aeabi_f2d>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fed1 	bl	8000618 <__aeabi_dmul>
 8004876:	4603      	mov	r3, r0
 8004878:	460c      	mov	r4, r1
 800487a:	4618      	mov	r0, r3
 800487c:	4621      	mov	r1, r4
 800487e:	f7fc f9c3 	bl	8000c08 <__aeabi_d2f>
 8004882:	4603      	mov	r3, r0
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
	 s_1 = j_max*tm*tm*tm/6;
 8004886:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800488a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800488e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004892:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800489a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800489e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048a2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80048a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	 v_2 = j_max*tm*tm;
 80048ae:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80048b2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	 s_2 = v_2*tm;
 80048c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80048ca:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	 v_3 = v_2;
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	623b      	str	r3, [r7, #32]
	 s_3 = s_2 + v_2*tc;
 80048da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80048de:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80048ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
	 v_4 = v_1;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	61bb      	str	r3, [r7, #24]
	 s_4 = s_3 + s_2 - s_1;
 80048f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80048fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004902:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800490a:	edc7 7a05 	vstr	s15, [r7, #20]

	 scurve->Tc = tc;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
	 scurve->Tf = tf;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
	 scurve->Tm = tm;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
	 scurve->a_design = a_design;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004924:	619a      	str	r2, [r3, #24]
	 scurve->v_design = v_design;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800492a:	615a      	str	r2, [r3, #20]
	 scurve->v_lim = v_lim;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004930:	61da      	str	r2, [r3, #28]
	 scurve->v0 = v0;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004936:	60da      	str	r2, [r3, #12]
	 scurve->v1 = v1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800493c:	611a      	str	r2, [r3, #16]
	 scurve->j_max = j_max;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
	 scurve->s0   = q0;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004948:	605a      	str	r2, [r3, #4]
	 scurve->s1   = q1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800494e:	609a      	str	r2, [r3, #8]
	 scurve->num_of_phase = no_phases;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8004956:	f883 2020 	strb.w	r2, [r3, #32]
	 scurve->num_of_sampling = no_sample;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495e:	635a      	str	r2, [r3, #52]	; 0x34
	 scurve->total_s = total_s;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
	 scurve->dir = dir;
 8004966:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800496a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800496e:	edc7 7a00 	vstr	s15, [r7]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b25a      	sxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	65da      	str	r2, [r3, #92]	; 0x5c
	 scurve->v_current = 0;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	661a      	str	r2, [r3, #96]	; 0x60
	 scurve->s_current = 0;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	665a      	str	r2, [r3, #100]	; 0x64
	 scurve->v_1 = v_1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	63da      	str	r2, [r3, #60]	; 0x3c
	 scurve->v_2 = v_2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
	 scurve->v_3 = v_3;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c
	 scurve->v_4 = v_4;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
	 scurve->s_1 = s_1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40
	 scurve->s_2 = s_2;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	649a      	str	r2, [r3, #72]	; 0x48
	 scurve->s_3 = s_3;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	651a      	str	r2, [r3, #80]	; 0x50
	 scurve->s_4 = s_4;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58

	 return SCARA_STATUS_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3778      	adds	r7, #120	; 0x78
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}
 80049cc:	3fe00000 	.word	0x3fe00000

080049d0 <scaraFlowDuty>:

SCARA_StatusTypeDef	scaraFlowDuty		(float time) {
 80049d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d2:	b0a5      	sub	sp, #148	; 0x94
 80049d4:	af0a      	add	r7, sp, #40	; 0x28
 80049d6:	ed87 0a01 	vstr	s0, [r7, #4]
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80049de:	4bb6      	ldr	r3, [pc, #728]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 80ae 	bne.w	8004b44 <scaraFlowDuty+0x174>
		float s, angle, x, y, z;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80049e8:	4bb3      	ldr	r3, [pc, #716]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 80049ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <scaraFlowDuty+0x54>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80049f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80049f6:	48b1      	ldr	r0, [pc, #708]	; (8004cbc <scaraFlowDuty+0x2ec>)
 80049f8:	f000 fab0 	bl	8004f5c <scaraFlowLSPB>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8004a02:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a06:	48ae      	ldr	r0, [pc, #696]	; (8004cc0 <scaraFlowDuty+0x2f0>)
 8004a08:	f000 faa8 	bl	8004f5c <scaraFlowLSPB>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8004a12:	4ba9      	ldr	r3, [pc, #676]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a14:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004a18:	663b      	str	r3, [r7, #96]	; 0x60
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8004a1a:	4ba7      	ldr	r3, [pc, #668]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a1c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a22:	e01f      	b.n	8004a64 <scaraFlowDuty+0x94>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8004a24:	4ba4      	ldr	r3, [pc, #656]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a26:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d118      	bne.n	8004a60 <scaraFlowDuty+0x90>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8004a2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a32:	48a4      	ldr	r0, [pc, #656]	; (8004cc4 <scaraFlowDuty+0x2f4>)
 8004a34:	f000 fbc8 	bl	80051c8 <scaraFLowScurve>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8004a3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a42:	48a1      	ldr	r0, [pc, #644]	; (8004cc8 <scaraFlowDuty+0x2f8>)
 8004a44:	f000 fbc0 	bl	80051c8 <scaraFLowScurve>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8004a4e:	4b9a      	ldr	r3, [pc, #616]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a50:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004a54:	663b      	str	r3, [r7, #96]	; 0x60
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8004a56:	4b98      	ldr	r3, [pc, #608]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a58:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8004a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5e:	e001      	b.n	8004a64 <scaraFlowDuty+0x94>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004a60:	2305      	movs	r3, #5
 8004a62:	e1c1      	b.n	8004de8 <scaraFlowDuty+0x418>
		}

		if ( SCARA_STATUS_OK != status1) {
 8004a64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <scaraFlowDuty+0xa2>
			return status1;
 8004a6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a70:	e1ba      	b.n	8004de8 <scaraFlowDuty+0x418>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004a72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <scaraFlowDuty+0xb0>
			return status2;
 8004a7a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a7e:	e1b3      	b.n	8004de8 <scaraFlowDuty+0x418>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8004a80:	4b8d      	ldr	r3, [pc, #564]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d111      	bne.n	8004aac <scaraFlowDuty+0xdc>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8004a88:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004a8c:	488f      	ldr	r0, [pc, #572]	; (8004ccc <scaraFlowDuty+0x2fc>)
 8004a8e:	f000 f9b3 	bl	8004df8 <scaraFlowLine>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			x = myDUTY.task.path.line.x_current;
 8004a98:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	65bb      	str	r3, [r7, #88]	; 0x58
			y = myDUTY.task.path.line.y_current;
 8004a9e:	4b86      	ldr	r3, [pc, #536]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
			z = myDUTY.task.path.line.z_current;
 8004aa4:	4b84      	ldr	r3, [pc, #528]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aaa:	e019      	b.n	8004ae0 <scaraFlowDuty+0x110>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8004aac:	4b82      	ldr	r3, [pc, #520]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004aae:	791b      	ldrb	r3, [r3, #4]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d113      	bne.n	8004adc <scaraFlowDuty+0x10c>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8004ab4:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004ab8:	4885      	ldr	r0, [pc, #532]	; (8004cd0 <scaraFlowDuty+0x300>)
 8004aba:	f000 f9e7 	bl	8004e8c <scaraFlowCircle>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			x = myDUTY.task.path.circle.x_current;
 8004ac4:	4b7c      	ldr	r3, [pc, #496]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	65bb      	str	r3, [r7, #88]	; 0x58
			y = myDUTY.task.path.circle.y_current;
 8004aca:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad0:	657b      	str	r3, [r7, #84]	; 0x54
			z = myDUTY.task.path.circle.z_current;
 8004ad2:	4b79      	ldr	r3, [pc, #484]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8004ada:	e001      	b.n	8004ae0 <scaraFlowDuty+0x110>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e183      	b.n	8004de8 <scaraFlowDuty+0x418>
		}

		positionCompute.x 		= x;
 8004ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae2:	61fb      	str	r3, [r7, #28]
		positionCompute.y		= y;
 8004ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae6:	623b      	str	r3, [r7, #32]
		positionCompute.z 		= z;
 8004ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
		positionCompute.roll 	= myDUTY.task.roll_start + angle;
 8004aec:	4b72      	ldr	r3, [pc, #456]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004aee:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8004af2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		if ( FALSE == kinematicInverse(&positionCompute, positionCurrent)) {
 8004afe:	4e75      	ldr	r6, [pc, #468]	; (8004cd4 <scaraFlowDuty+0x304>)
 8004b00:	f107 0c0c 	add.w	ip, r7, #12
 8004b04:	466d      	mov	r5, sp
 8004b06:	f106 040c 	add.w	r4, r6, #12
 8004b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004b1a:	4660      	mov	r0, ip
 8004b1c:	f7fd ff0e 	bl	800293c <kinematicInverse>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <scaraFlowDuty+0x15a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004b26:	2307      	movs	r3, #7
 8004b28:	e15e      	b.n	8004de8 <scaraFlowDuty+0x418>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8004b2a:	4b6b      	ldr	r3, [pc, #428]	; (8004cd8 <scaraFlowDuty+0x308>)
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	f107 040c 	add.w	r4, r7, #12
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b42:	e150      	b.n	8004de6 <scaraFlowDuty+0x416>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8004b44:	4b5c      	ldr	r3, [pc, #368]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f040 814a 	bne.w	8004de2 <scaraFlowDuty+0x412>
		float s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8004b4e:	4b5a      	ldr	r3, [pc, #360]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004b50:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d145      	bne.n	8004be4 <scaraFlowDuty+0x214>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8004b58:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b5c:	485f      	ldr	r0, [pc, #380]	; (8004cdc <scaraFlowDuty+0x30c>)
 8004b5e:	f000 f9fd 	bl	8004f5c <scaraFlowLSPB>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8004b68:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b6c:	485c      	ldr	r0, [pc, #368]	; (8004ce0 <scaraFlowDuty+0x310>)
 8004b6e:	f000 f9f5 	bl	8004f5c <scaraFlowLSPB>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8004b78:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b7c:	4859      	ldr	r0, [pc, #356]	; (8004ce4 <scaraFlowDuty+0x314>)
 8004b7e:	f000 f9ed 	bl	8004f5c <scaraFlowLSPB>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8004b88:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b8c:	4856      	ldr	r0, [pc, #344]	; (8004ce8 <scaraFlowDuty+0x318>)
 8004b8e:	f000 f9e5 	bl	8004f5c <scaraFlowLSPB>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004b9a:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8004b9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8004ba2:	4b45      	ldr	r3, [pc, #276]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004ba4:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8004ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8004bac:	4b42      	ldr	r3, [pc, #264]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bae:	f893 3340 	ldrb.w	r3, [r3, #832]	; 0x340
 8004bb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8004bb6:	4b40      	ldr	r3, [pc, #256]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bb8:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8004bbc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8004bc0:	4b3d      	ldr	r3, [pc, #244]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bc2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bca:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bd6:	647b      	str	r3, [r7, #68]	; 0x44
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8004bd8:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004bda:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	643b      	str	r3, [r7, #64]	; 0x40
 8004be2:	e04c      	b.n	8004c7e <scaraFlowDuty+0x2ae>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8004be4:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004be6:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d145      	bne.n	8004c7a <scaraFlowDuty+0x2aa>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8004bee:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bf2:	483e      	ldr	r0, [pc, #248]	; (8004cec <scaraFlowDuty+0x31c>)
 8004bf4:	f000 fae8 	bl	80051c8 <scaraFLowScurve>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8004bfe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c02:	483b      	ldr	r0, [pc, #236]	; (8004cf0 <scaraFlowDuty+0x320>)
 8004c04:	f000 fae0 	bl	80051c8 <scaraFLowScurve>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8004c0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c12:	4838      	ldr	r0, [pc, #224]	; (8004cf4 <scaraFlowDuty+0x324>)
 8004c14:	f000 fad8 	bl	80051c8 <scaraFLowScurve>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8004c1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c22:	4835      	ldr	r0, [pc, #212]	; (8004cf8 <scaraFlowDuty+0x328>)
 8004c24:	f000 fad0 	bl	80051c8 <scaraFLowScurve>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c30:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8004c38:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c3a:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 8004c3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8004c42:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c44:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8004c48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c4e:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 8004c52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8004c5e:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c60:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c68:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <scaraFlowDuty+0x2e8>)
 8004c70:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	643b      	str	r3, [r7, #64]	; 0x40
 8004c78:	e001      	b.n	8004c7e <scaraFlowDuty+0x2ae>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004c7a:	2305      	movs	r3, #5
 8004c7c:	e0b4      	b.n	8004de8 <scaraFlowDuty+0x418>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8004c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <scaraFlowDuty+0x2bc>
			return status1;
 8004c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c8a:	e0ad      	b.n	8004de8 <scaraFlowDuty+0x418>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004c8c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <scaraFlowDuty+0x2ca>
			return status2;
 8004c94:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c98:	e0a6      	b.n	8004de8 <scaraFlowDuty+0x418>
		}
		if ( SCARA_STATUS_OK != status3) {
 8004c9a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <scaraFlowDuty+0x2d8>
			return status3;
 8004ca2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004ca6:	e09f      	b.n	8004de8 <scaraFlowDuty+0x418>
		}
		if ( SCARA_STATUS_OK != status4) {
 8004ca8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d025      	beq.n	8004cfc <scaraFlowDuty+0x32c>
			return status4;
 8004cb0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004cb4:	e098      	b.n	8004de8 <scaraFlowDuty+0x418>
 8004cb6:	bf00      	nop
 8004cb8:	200052e8 	.word	0x200052e8
 8004cbc:	20005374 	.word	0x20005374
 8004cc0:	20005420 	.word	0x20005420
 8004cc4:	200053b4 	.word	0x200053b4
 8004cc8:	20005460 	.word	0x20005460
 8004ccc:	200052f0 	.word	0x200052f0
 8004cd0:	20005328 	.word	0x20005328
 8004cd4:	20005790 	.word	0x20005790
 8004cd8:	200057c0 	.word	0x200057c0
 8004cdc:	200054d0 	.word	0x200054d0
 8004ce0:	2000557c 	.word	0x2000557c
 8004ce4:	20005628 	.word	0x20005628
 8004ce8:	200056d4 	.word	0x200056d4
 8004cec:	20005510 	.word	0x20005510
 8004cf0:	200055bc 	.word	0x200055bc
 8004cf4:	20005668 	.word	0x20005668
 8004cf8:	20005714 	.word	0x20005714
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8004cfc:	4b3c      	ldr	r3, [pc, #240]	; (8004df0 <scaraFlowDuty+0x420>)
 8004cfe:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8004d02:	ed93 7a00 	vldr	s14, [r3]
 8004d06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d1e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <scaraFlowDuty+0x420>)
 8004d24:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8004d28:	ed93 7a00 	vldr	s14, [r3]
 8004d2c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d44:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8004d48:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <scaraFlowDuty+0x420>)
 8004d4a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d4e:	ed93 7a00 	vldr	s14, [r3]
 8004d52:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <scaraFlowDuty+0x420>)
 8004d70:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8004d74:	ed93 7a00 	vldr	s14, [r3]
 8004d78:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d84:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8004d94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004d9c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004da0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8004da4:	eef0 1a46 	vmov.f32	s3, s12
 8004da8:	eeb0 1a66 	vmov.f32	s2, s13
 8004dac:	eef0 0a47 	vmov.f32	s1, s14
 8004db0:	eeb0 0a67 	vmov.f32	s0, s15
 8004db4:	f001 f822 	bl	8005dfc <scaraCheckWorkSpace4>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <scaraFlowDuty+0x3f2>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004dbe:	2307      	movs	r3, #7
 8004dc0:	e012      	b.n	8004de8 <scaraFlowDuty+0x418>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <scaraFlowDuty+0x424>)
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	f107 040c 	add.w	r4, r7, #12
 8004dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dd6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		}
		kinematicForward(&positionNext);
 8004dda:	4806      	ldr	r0, [pc, #24]	; (8004df4 <scaraFlowDuty+0x424>)
 8004ddc:	f7fd fcf8 	bl	80027d0 <kinematicForward>
 8004de0:	e001      	b.n	8004de6 <scaraFlowDuty+0x416>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8004de2:	2302      	movs	r3, #2
 8004de4:	e000      	b.n	8004de8 <scaraFlowDuty+0x418>
	}

	return SCARA_STATUS_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	376c      	adds	r7, #108	; 0x6c
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df0:	200052e8 	.word	0x200052e8
 8004df4:	200057c0 	.word	0x200057c0

08004df8 <scaraFlowLine>:

SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, float s) {
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	ed87 0a00 	vstr	s0, [r7]
	line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	ed93 7a00 	vldr	s14, [r3]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	edd3 6a06 	vldr	s13, [r3, #24]
 8004e10:	edd7 7a00 	vldr	s15, [r7]
 8004e14:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004e1e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	edd3 6a07 	vldr	s13, [r3, #28]
 8004e38:	edd7 7a00 	vldr	s15, [r7]
 8004e3c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004e46:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e60:	edd7 7a00 	vldr	s15, [r7]
 8004e64:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004e6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return SCARA_STATUS_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <scaraFlowCircle>:

SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, float s) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	ed2d 8b02 	vpush	{d8}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	ed87 0a00 	vstr	s0, [r7]
	float angle;
	angle = s/(2*PI*circle->radius);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ea2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004f58 <scaraFlowCircle+0xcc>
 8004ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004eaa:	edd7 6a00 	vldr	s13, [r7]
 8004eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb2:	edc7 7a03 	vstr	s15, [r7, #12]
	circle->x_current = circle->xi + circle->radius*cosf(circle->angle_start + circle->dir*angle);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	ed93 8a08 	vldr	s16, [r3, #32]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	edd3 8a01 	vldr	s17, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f993 3000 	ldrsb.w	r3, [r3]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee6:	f00f fe5b 	bl	8014ba0 <cosf>
 8004eea:	eef0 7a40 	vmov.f32	s15, s0
 8004eee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ef2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	circle->y_current = circle->yi + circle->radius*sinf(circle->angle_start + circle->dir*angle);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	edd3 8a01 	vldr	s17, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f993 3000 	ldrsb.w	r3, [r3]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f28:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2c:	f00f fe78 	bl	8014c20 <sinf>
 8004f30:	eef0 7a40 	vmov.f32	s15, s0
 8004f34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004f38:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	circle->z_current = circle->zi; // XY plane
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44

	return SCARA_STATUS_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	ecbd 8b02 	vpop	{d8}
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40c90fdb 	.word	0x40c90fdb

08004f5c <scaraFlowLSPB>:

SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, float time) {
 8004f5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	ed87 0a00 	vstr	s0, [r7]
	float tf, td, ta;

	tf = lspb->Tf;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	617b      	str	r3, [r7, #20]
	td = lspb->Td;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	613b      	str	r3, [r7, #16]
	ta = lspb->Ta;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	60fb      	str	r3, [r7, #12]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8004f7c:	edd7 7a00 	vldr	s15, [r7]
 8004f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	db61      	blt.n	800504e <scaraFlowLSPB+0xf2>
 8004f8a:	ed97 7a00 	vldr	s14, [r7]
 8004f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	d858      	bhi.n	800504e <scaraFlowLSPB+0xf2>
		lspb->a_current		=	lspb->a_design;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	edd3 6a06 	vldr	s13, [r3, #24]
 8004fb0:	edd7 7a00 	vldr	s15, [r7]
 8004fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	edd3 6a03 	vldr	s13, [r3, #12]
 8004fce:	edd7 7a00 	vldr	s15, [r7]
 8004fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fda:	ee17 0a90 	vmov	r0, s15
 8004fde:	f7fb fac3 	bl	8000568 <__aeabi_f2d>
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb fabc 	bl	8000568 <__aeabi_f2d>
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	4b73      	ldr	r3, [pc, #460]	; (80051c4 <scaraFlowLSPB+0x268>)
 8004ff6:	f7fb fb0f 	bl	8000618 <__aeabi_dmul>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4690      	mov	r8, r2
 8005000:	4699      	mov	r9, r3
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	f7fb fab0 	bl	8000568 <__aeabi_f2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fb02 	bl	8000618 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4690      	mov	r8, r2
 800501a:	4699      	mov	r9, r3
 800501c:	6838      	ldr	r0, [r7, #0]
 800501e:	f7fb faa3 	bl	8000568 <__aeabi_f2d>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb faf5 	bl	8000618 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb f939 	bl	80002ac <__adddf3>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	4618      	mov	r0, r3
 8005040:	4621      	mov	r1, r4
 8005042:	f7fb fde1 	bl	8000c08 <__aeabi_d2f>
 8005046:	4602      	mov	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c
 800504c:	e0b3      	b.n	80051b6 <scaraFlowLSPB+0x25a>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 800504e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005052:	edd7 7a00 	vldr	s15, [r7]
 8005056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	d839      	bhi.n	80050d4 <scaraFlowLSPB+0x178>
 8005060:	ed97 7a05 	vldr	s14, [r7, #20]
 8005064:	edd7 7a04 	vldr	s15, [r7, #16]
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	ed97 7a00 	vldr	s14, [r7]
 8005070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	d82c      	bhi.n	80050d4 <scaraFlowLSPB+0x178>
		lspb->a_current		=	0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v_lim;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	edd3 6a03 	vldr	s13, [r3, #12]
 8005096:	edd7 7a03 	vldr	s15, [r7, #12]
 800509a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800509e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80050a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80050a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	edd3 6a07 	vldr	s13, [r3, #28]
 80050b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80050b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050bc:	ed97 6a00 	vldr	s12, [r7]
 80050c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80050c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80050d2:	e070      	b.n	80051b6 <scaraFlowLSPB+0x25a>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 80050d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80050d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80050dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050e0:	ed97 7a00 	vldr	s14, [r7]
 80050e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ec:	db57      	blt.n	800519e <scaraFlowLSPB+0x242>
 80050ee:	ed97 7a00 	vldr	s14, [r7]
 80050f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80050f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	d84e      	bhi.n	800519e <scaraFlowLSPB+0x242>
		lspb->a_current		=	-lspb->a_design;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	edd3 7a06 	vldr	s15, [r3, #24]
 8005106:	eef1 7a67 	vneg.f32	s15, s15
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	ed93 7a04 	vldr	s14, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	edd3 6a06 	vldr	s13, [r3, #24]
 800511c:	ed97 6a05 	vldr	s12, [r7, #20]
 8005120:	edd7 7a00 	vldr	s15, [r7]
 8005124:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800512c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	ed93 7a02 	vldr	s14, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	edd3 6a04 	vldr	s13, [r3, #16]
 8005142:	ed97 6a05 	vldr	s12, [r7, #20]
 8005146:	edd7 7a00 	vldr	s15, [r7]
 800514a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800514e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005152:	ee37 7a67 	vsub.f32	s14, s14, s15
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf -time)/(2*td);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	edd3 6a07 	vldr	s13, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005162:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005166:	ed97 6a05 	vldr	s12, [r7, #20]
 800516a:	edd7 7a00 	vldr	s15, [r7]
 800516e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005172:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005176:	ed97 6a05 	vldr	s12, [r7, #20]
 800517a:	edd7 7a00 	vldr	s15, [r7]
 800517e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005182:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005186:	edd7 7a04 	vldr	s15, [r7, #16]
 800518a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800518e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005192:	ee77 7a67 	vsub.f32	s15, s14, s15
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800519c:	e00b      	b.n	80051b6 <scaraFlowLSPB+0x25a>
	} else {
		lspb->a_current 	=	0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34
		lspb->v_current		=	0;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
		lspb->s_current		=	lspb->total_s;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return SCARA_STATUS_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051c2:	bf00      	nop
 80051c4:	3fe00000 	.word	0x3fe00000

080051c8 <scaraFLowScurve>:

SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, float time) {
 80051c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	ed87 0a00 	vstr	s0, [r7]
	float j_max, tm, tc, t;

	j_max = scurve->j_max;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	617b      	str	r3, [r7, #20]
	tm	  = scurve->Tm;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	613b      	str	r3, [r7, #16]
	tc	  = scurve->Tc;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	60fb      	str	r3, [r7, #12]

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	f040 82d1 	bne.w	8005796 <scaraFLowScurve+0x5ce>
		 // Phase 1
		 if ( (0.0f <= time) && ( time <= tm)) {
 80051f4:	edd7 7a00 	vldr	s15, [r7]
 80051f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	db55      	blt.n	80052ae <scaraFLowScurve+0xe6>
 8005202:	ed97 7a00 	vldr	s14, [r7]
 8005206:	edd7 7a04 	vldr	s15, [r7, #16]
 800520a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	d84c      	bhi.n	80052ae <scaraFLowScurve+0xe6>
			 t = time;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	60bb      	str	r3, [r7, #8]
			 scurve->a_current 	= 	j_max*t;
 8005218:	ed97 7a05 	vldr	s14, [r7, #20]
 800521c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	= 	0.5*j_max*t*t;
 800522a:	6978      	ldr	r0, [r7, #20]
 800522c:	f7fb f99c 	bl	8000568 <__aeabi_f2d>
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	4bd7      	ldr	r3, [pc, #860]	; (8005594 <scaraFLowScurve+0x3cc>)
 8005236:	f7fb f9ef 	bl	8000618 <__aeabi_dmul>
 800523a:	4603      	mov	r3, r0
 800523c:	460c      	mov	r4, r1
 800523e:	4625      	mov	r5, r4
 8005240:	461c      	mov	r4, r3
 8005242:	68b8      	ldr	r0, [r7, #8]
 8005244:	f7fb f990 	bl	8000568 <__aeabi_f2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	f7fb f9e2 	bl	8000618 <__aeabi_dmul>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4625      	mov	r5, r4
 800525a:	461c      	mov	r4, r3
 800525c:	68b8      	ldr	r0, [r7, #8]
 800525e:	f7fb f983 	bl	8000568 <__aeabi_f2d>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fb f9d5 	bl	8000618 <__aeabi_dmul>
 800526e:	4603      	mov	r3, r0
 8005270:	460c      	mov	r4, r1
 8005272:	4618      	mov	r0, r3
 8005274:	4621      	mov	r1, r4
 8005276:	f7fb fcc7 	bl	8000c08 <__aeabi_d2f>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8005280:	ed97 7a05 	vldr	s14, [r7, #20]
 8005284:	edd7 7a02 	vldr	s15, [r7, #8]
 8005288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800528c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005294:	edd7 7a02 	vldr	s15, [r7, #8]
 8005298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800529c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80052a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 80052aa:	f000 bd9f 	b.w	8005dec <scaraFLowScurve+0xc24>
		 // Phase 2
		 } else if ( (tm <= time) && ( time <= (2*tm) ) ) {
 80052ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80052b2:	edd7 7a00 	vldr	s15, [r7]
 80052b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	f200 80dd 	bhi.w	800547c <scaraFLowScurve+0x2b4>
 80052c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052ca:	ed97 7a00 	vldr	s14, [r7]
 80052ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	f200 80d1 	bhi.w	800547c <scaraFLowScurve+0x2b4>
			 t = time - tm;
 80052da:	ed97 7a00 	vldr	s14, [r7]
 80052de:	edd7 7a04 	vldr	s15, [r7, #16]
 80052e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e6:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80052ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80052ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80052f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80052fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80052fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005312:	edd7 6a05 	vldr	s13, [r7, #20]
 8005316:	edd7 7a04 	vldr	s15, [r7, #16]
 800531a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800531e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800532a:	ee17 0a90 	vmov	r0, s15
 800532e:	f7fb f91b 	bl	8000568 <__aeabi_f2d>
 8005332:	4604      	mov	r4, r0
 8005334:	460d      	mov	r5, r1
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f7fb f916 	bl	8000568 <__aeabi_f2d>
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	4b94      	ldr	r3, [pc, #592]	; (8005594 <scaraFLowScurve+0x3cc>)
 8005342:	f7fb f969 	bl	8000618 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	68b8      	ldr	r0, [r7, #8]
 8005350:	f7fb f90a 	bl	8000568 <__aeabi_f2d>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb f95c 	bl	8000618 <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4690      	mov	r8, r2
 8005366:	4699      	mov	r9, r3
 8005368:	68b8      	ldr	r0, [r7, #8]
 800536a:	f7fb f8fd 	bl	8000568 <__aeabi_f2d>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4640      	mov	r0, r8
 8005374:	4649      	mov	r1, r9
 8005376:	f7fb f94f 	bl	8000618 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fa ff91 	bl	80002a8 <__aeabi_dsub>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	4618      	mov	r0, r3
 800538c:	4621      	mov	r1, r4
 800538e:	f7fb fc3b 	bl	8000c08 <__aeabi_d2f>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80053a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80053a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b0:	ee17 0a90 	vmov	r0, s15
 80053b4:	f7fb f8d8 	bl	8000568 <__aeabi_f2d>
 80053b8:	4604      	mov	r4, r0
 80053ba:	460d      	mov	r5, r1
 80053bc:	6978      	ldr	r0, [r7, #20]
 80053be:	f7fb f8d3 	bl	8000568 <__aeabi_f2d>
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	4b73      	ldr	r3, [pc, #460]	; (8005594 <scaraFLowScurve+0x3cc>)
 80053c8:	f7fb f926 	bl	8000618 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4690      	mov	r8, r2
 80053d2:	4699      	mov	r9, r3
 80053d4:	6938      	ldr	r0, [r7, #16]
 80053d6:	f7fb f8c7 	bl	8000568 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fb f919 	bl	8000618 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	68b8      	ldr	r0, [r7, #8]
 80053f0:	f7fb f8ba 	bl	8000568 <__aeabi_f2d>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb f90c 	bl	8000618 <__aeabi_dmul>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4690      	mov	r8, r2
 8005406:	4699      	mov	r9, r3
 8005408:	68b8      	ldr	r0, [r7, #8]
 800540a:	f7fb f8ad 	bl	8000568 <__aeabi_f2d>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fb f8ff 	bl	8000618 <__aeabi_dmul>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fa ff43 	bl	80002ac <__adddf3>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	4625      	mov	r5, r4
 800542c:	461c      	mov	r4, r3
 800542e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005432:	edd7 7a02 	vldr	s15, [r7, #8]
 8005436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800543a:	edd7 7a02 	vldr	s15, [r7, #8]
 800543e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005442:	edd7 7a02 	vldr	s15, [r7, #8]
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800544e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005452:	ee16 0a90 	vmov	r0, s13
 8005456:	f7fb f887 	bl	8000568 <__aeabi_f2d>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fa ff21 	bl	80002a8 <__aeabi_dsub>
 8005466:	4603      	mov	r3, r0
 8005468:	460c      	mov	r4, r1
 800546a:	4618      	mov	r0, r3
 800546c:	4621      	mov	r1, r4
 800546e:	f7fb fbcb 	bl	8000c08 <__aeabi_d2f>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	665a      	str	r2, [r3, #100]	; 0x64
 8005478:	f000 bcb8 	b.w	8005dec <scaraFLowScurve+0xc24>
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time <= (3*tm)) ) {
 800547c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005484:	ed97 7a00 	vldr	s14, [r7]
 8005488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005490:	f2c0 8082 	blt.w	8005598 <scaraFLowScurve+0x3d0>
 8005494:	edd7 7a04 	vldr	s15, [r7, #16]
 8005498:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800549c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a0:	ed97 7a00 	vldr	s14, [r7]
 80054a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ac:	d874      	bhi.n	8005598 <scaraFLowScurve+0x3d0>
			 t = time - 2*tm;
 80054ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80054b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054b6:	ed97 7a00 	vldr	s14, [r7]
 80054ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054be:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	-j_max*t;
 80054c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80054c6:	eeb1 7a67 	vneg.f32	s14, s15
 80054ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f843 	bl	8000568 <__aeabi_f2d>
 80054e2:	4604      	mov	r4, r0
 80054e4:	460d      	mov	r5, r1
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7fb f83e 	bl	8000568 <__aeabi_f2d>
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <scaraFLowScurve+0x3cc>)
 80054f2:	f7fb f891 	bl	8000618 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4690      	mov	r8, r2
 80054fc:	4699      	mov	r9, r3
 80054fe:	68b8      	ldr	r0, [r7, #8]
 8005500:	f7fb f832 	bl	8000568 <__aeabi_f2d>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	f7fb f884 	bl	8000618 <__aeabi_dmul>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4690      	mov	r8, r2
 8005516:	4699      	mov	r9, r3
 8005518:	68b8      	ldr	r0, [r7, #8]
 800551a:	f7fb f825 	bl	8000568 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fb f877 	bl	8000618 <__aeabi_dmul>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fa feb9 	bl	80002a8 <__aeabi_dsub>
 8005536:	4603      	mov	r3, r0
 8005538:	460c      	mov	r4, r1
 800553a:	4618      	mov	r0, r3
 800553c:	4621      	mov	r1, r4
 800553e:	f7fb fb63 	bl	8000c08 <__aeabi_d2f>
 8005542:	4602      	mov	r2, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005554:	edd7 7a02 	vldr	s15, [r7, #8]
 8005558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800555c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005560:	edd7 6a05 	vldr	s13, [r7, #20]
 8005564:	edd7 7a02 	vldr	s15, [r7, #8]
 8005568:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800556c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005570:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005574:	edd7 7a02 	vldr	s15, [r7, #8]
 8005578:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800557c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8005580:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800558e:	f000 bc2d 	b.w	8005dec <scaraFLowScurve+0xc24>
 8005592:	bf00      	nop
 8005594:	3fe00000 	.word	0x3fe00000
		 // Phase 4
		 } else if ( ((3*tm) <= time) && ( time <= (4*tm)) ) {
 8005598:	edd7 7a04 	vldr	s15, [r7, #16]
 800559c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80055a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a4:	ed97 7a00 	vldr	s14, [r7]
 80055a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	f2c0 80e4 	blt.w	800577c <scaraFLowScurve+0x5b4>
 80055b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80055b8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80055bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c0:	ed97 7a00 	vldr	s14, [r7]
 80055c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055cc:	f200 80d6 	bhi.w	800577c <scaraFLowScurve+0x5b4>
			 t = time - 3*tm;
 80055d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80055d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80055d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055dc:	ed97 7a00 	vldr	s14, [r7]
 80055e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e4:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80055e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80055ec:	eeb1 7a67 	vneg.f32	s14, s15
 80055f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80055f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80055fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005614:	edd7 6a05 	vldr	s13, [r7, #20]
 8005618:	edd7 7a04 	vldr	s15, [r7, #16]
 800561c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005620:	edd7 7a02 	vldr	s15, [r7, #8]
 8005624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562c:	ee17 0a90 	vmov	r0, s15
 8005630:	f7fa ff9a 	bl	8000568 <__aeabi_f2d>
 8005634:	4604      	mov	r4, r0
 8005636:	460d      	mov	r5, r1
 8005638:	6978      	ldr	r0, [r7, #20]
 800563a:	f7fa ff95 	bl	8000568 <__aeabi_f2d>
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	4b86      	ldr	r3, [pc, #536]	; (800585c <scaraFLowScurve+0x694>)
 8005644:	f7fa ffe8 	bl	8000618 <__aeabi_dmul>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4690      	mov	r8, r2
 800564e:	4699      	mov	r9, r3
 8005650:	68b8      	ldr	r0, [r7, #8]
 8005652:	f7fa ff89 	bl	8000568 <__aeabi_f2d>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	f7fa ffdb 	bl	8000618 <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	68b8      	ldr	r0, [r7, #8]
 800566c:	f7fa ff7c 	bl	8000568 <__aeabi_f2d>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4640      	mov	r0, r8
 8005676:	4649      	mov	r1, r9
 8005678:	f7fa ffce 	bl	8000618 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fa fe12 	bl	80002ac <__adddf3>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4618      	mov	r0, r3
 800568e:	4621      	mov	r1, r4
 8005690:	f7fb faba 	bl	8000c08 <__aeabi_d2f>
 8005694:	4602      	mov	r2, r0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80056a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80056aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b2:	ee17 0a90 	vmov	r0, s15
 80056b6:	f7fa ff57 	bl	8000568 <__aeabi_f2d>
 80056ba:	4604      	mov	r4, r0
 80056bc:	460d      	mov	r5, r1
									- 0.5*j_max*tm*t*t
 80056be:	6978      	ldr	r0, [r7, #20]
 80056c0:	f7fa ff52 	bl	8000568 <__aeabi_f2d>
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <scaraFLowScurve+0x694>)
 80056ca:	f7fa ffa5 	bl	8000618 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4690      	mov	r8, r2
 80056d4:	4699      	mov	r9, r3
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f7fa ff46 	bl	8000568 <__aeabi_f2d>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa ff98 	bl	8000618 <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4690      	mov	r8, r2
 80056ee:	4699      	mov	r9, r3
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f7fa ff39 	bl	8000568 <__aeabi_f2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fa ff8b 	bl	8000618 <__aeabi_dmul>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4690      	mov	r8, r2
 8005708:	4699      	mov	r9, r3
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f7fa ff2c 	bl	8000568 <__aeabi_f2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4640      	mov	r0, r8
 8005716:	4649      	mov	r1, r9
 8005718:	f7fa ff7e 	bl	8000618 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa fdc0 	bl	80002a8 <__aeabi_dsub>
 8005728:	4603      	mov	r3, r0
 800572a:	460c      	mov	r4, r1
 800572c:	4625      	mov	r5, r4
 800572e:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8005730:	ed97 7a05 	vldr	s14, [r7, #20]
 8005734:	edd7 7a02 	vldr	s15, [r7, #8]
 8005738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800573c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005744:	edd7 7a02 	vldr	s15, [r7, #8]
 8005748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005750:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005754:	ee16 0a90 	vmov	r0, s13
 8005758:	f7fa ff06 	bl	8000568 <__aeabi_f2d>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fda2 	bl	80002ac <__adddf3>
 8005768:	4603      	mov	r3, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4618      	mov	r0, r3
 800576e:	4621      	mov	r1, r4
 8005770:	f7fb fa4a 	bl	8000c08 <__aeabi_d2f>
 8005774:	4602      	mov	r2, r0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	665a      	str	r2, [r3, #100]	; 0x64
 800577a:	e337      	b.n	8005dec <scaraFLowScurve+0xc24>
		 } else {
			 scurve->a_current = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current = 0;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current = scurve->total_s;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	665a      	str	r2, [r3, #100]	; 0x64
 8005794:	e32a      	b.n	8005dec <scaraFLowScurve+0xc24>
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579c:	2b05      	cmp	r3, #5
 800579e:	f040 8323 	bne.w	8005de8 <scaraFLowScurve+0xc20>
		 // Phase 1
		 if ( (0 <= time) && ( time <= tm)) {
 80057a2:	edd7 7a00 	vldr	s15, [r7]
 80057a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	db57      	blt.n	8005860 <scaraFLowScurve+0x698>
 80057b0:	ed97 7a00 	vldr	s14, [r7]
 80057b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80057b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c0:	d84e      	bhi.n	8005860 <scaraFLowScurve+0x698>
			 t = time;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	60bb      	str	r3, [r7, #8]
			 scurve->a_current 	= 	j_max*t;
 80057c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80057ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	= 	0.5*j_max*t*t;
 80057d8:	6978      	ldr	r0, [r7, #20]
 80057da:	f7fa fec5 	bl	8000568 <__aeabi_f2d>
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <scaraFLowScurve+0x694>)
 80057e4:	f7fa ff18 	bl	8000618 <__aeabi_dmul>
 80057e8:	4603      	mov	r3, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	4625      	mov	r5, r4
 80057ee:	461c      	mov	r4, r3
 80057f0:	68b8      	ldr	r0, [r7, #8]
 80057f2:	f7fa feb9 	bl	8000568 <__aeabi_f2d>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	f7fa ff0b 	bl	8000618 <__aeabi_dmul>
 8005802:	4603      	mov	r3, r0
 8005804:	460c      	mov	r4, r1
 8005806:	4625      	mov	r5, r4
 8005808:	461c      	mov	r4, r3
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7fa feac 	bl	8000568 <__aeabi_f2d>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	f7fa fefe 	bl	8000618 <__aeabi_dmul>
 800581c:	4603      	mov	r3, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4618      	mov	r0, r3
 8005822:	4621      	mov	r1, r4
 8005824:	f7fb f9f0 	bl	8000c08 <__aeabi_d2f>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800582e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005832:	edd7 7a02 	vldr	s15, [r7, #8]
 8005836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800583a:	edd7 7a02 	vldr	s15, [r7, #8]
 800583e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005842:	edd7 7a02 	vldr	s15, [r7, #8]
 8005846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800584e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005858:	e2c8      	b.n	8005dec <scaraFLowScurve+0xc24>
 800585a:	bf00      	nop
 800585c:	3fe00000 	.word	0x3fe00000
		 // Phase 2
		 } else if ( (tm <= time) && ( time <= (2*tm) ) ) {
 8005860:	ed97 7a04 	vldr	s14, [r7, #16]
 8005864:	edd7 7a00 	vldr	s15, [r7]
 8005868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	f200 80dc 	bhi.w	8005a2c <scaraFLowScurve+0x864>
 8005874:	edd7 7a04 	vldr	s15, [r7, #16]
 8005878:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800587c:	ed97 7a00 	vldr	s14, [r7]
 8005880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005888:	f200 80d0 	bhi.w	8005a2c <scaraFLowScurve+0x864>
			 t = time - tm;
 800588c:	ed97 7a00 	vldr	s14, [r7]
 8005890:	edd7 7a04 	vldr	s15, [r7, #16]
 8005894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005898:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800589c:	ed97 7a05 	vldr	s14, [r7, #20]
 80058a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80058a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80058ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80058b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80058c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80058c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80058cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80058d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	ee17 0a90 	vmov	r0, s15
 80058e0:	f7fa fe42 	bl	8000568 <__aeabi_f2d>
 80058e4:	4604      	mov	r4, r0
 80058e6:	460d      	mov	r5, r1
 80058e8:	6978      	ldr	r0, [r7, #20]
 80058ea:	f7fa fe3d 	bl	8000568 <__aeabi_f2d>
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4bbd      	ldr	r3, [pc, #756]	; (8005be8 <scaraFLowScurve+0xa20>)
 80058f4:	f7fa fe90 	bl	8000618 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4690      	mov	r8, r2
 80058fe:	4699      	mov	r9, r3
 8005900:	68b8      	ldr	r0, [r7, #8]
 8005902:	f7fa fe31 	bl	8000568 <__aeabi_f2d>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fa fe83 	bl	8000618 <__aeabi_dmul>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4690      	mov	r8, r2
 8005918:	4699      	mov	r9, r3
 800591a:	68b8      	ldr	r0, [r7, #8]
 800591c:	f7fa fe24 	bl	8000568 <__aeabi_f2d>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4640      	mov	r0, r8
 8005926:	4649      	mov	r1, r9
 8005928:	f7fa fe76 	bl	8000618 <__aeabi_dmul>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4620      	mov	r0, r4
 8005932:	4629      	mov	r1, r5
 8005934:	f7fa fcb8 	bl	80002a8 <__aeabi_dsub>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4618      	mov	r0, r3
 800593e:	4621      	mov	r1, r4
 8005940:	f7fb f962 	bl	8000c08 <__aeabi_d2f>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005956:	edd7 7a02 	vldr	s15, [r7, #8]
 800595a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005962:	ee17 0a90 	vmov	r0, s15
 8005966:	f7fa fdff 	bl	8000568 <__aeabi_f2d>
 800596a:	4604      	mov	r4, r0
 800596c:	460d      	mov	r5, r1
 800596e:	6978      	ldr	r0, [r7, #20]
 8005970:	f7fa fdfa 	bl	8000568 <__aeabi_f2d>
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	4b9b      	ldr	r3, [pc, #620]	; (8005be8 <scaraFLowScurve+0xa20>)
 800597a:	f7fa fe4d 	bl	8000618 <__aeabi_dmul>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4690      	mov	r8, r2
 8005984:	4699      	mov	r9, r3
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f7fa fdee 	bl	8000568 <__aeabi_f2d>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fe40 	bl	8000618 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4690      	mov	r8, r2
 800599e:	4699      	mov	r9, r3
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f7fa fde1 	bl	8000568 <__aeabi_f2d>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	f7fa fe33 	bl	8000618 <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4690      	mov	r8, r2
 80059b8:	4699      	mov	r9, r3
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	f7fa fdd4 	bl	8000568 <__aeabi_f2d>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fe26 	bl	8000618 <__aeabi_dmul>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4620      	mov	r0, r4
 80059d2:	4629      	mov	r1, r5
 80059d4:	f7fa fc6a 	bl	80002ac <__adddf3>
 80059d8:	4603      	mov	r3, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	4625      	mov	r5, r4
 80059de:	461c      	mov	r4, r3
 80059e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80059e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80059e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80059f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005a00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a04:	ee16 0a90 	vmov	r0, s13
 8005a08:	f7fa fdae 	bl	8000568 <__aeabi_f2d>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fc48 	bl	80002a8 <__aeabi_dsub>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	4621      	mov	r1, r4
 8005a20:	f7fb f8f2 	bl	8000c08 <__aeabi_d2f>
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	665a      	str	r2, [r3, #100]	; 0x64
 8005a2a:	e1df      	b.n	8005dec <scaraFLowScurve+0xc24>
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time <= (2*tm + tc)) ) {
 8005a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a34:	ed97 7a00 	vldr	s14, [r7]
 8005a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	db30      	blt.n	8005aa4 <scaraFLowScurve+0x8dc>
 8005a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a46:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a52:	ed97 7a00 	vldr	s14, [r7]
 8005a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	d821      	bhi.n	8005aa4 <scaraFLowScurve+0x8dc>
			 t = time - 2*tm;
 8005a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a68:	ed97 7a00 	vldr	s14, [r7]
 8005a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a70:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	0;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005aa2:	e1a3      	b.n	8005dec <scaraFLowScurve+0xc24>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time <= (3*tm + tc)) ) {
 8005aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aa8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab4:	ed97 7a00 	vldr	s14, [r7]
 8005ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	f2c0 8094 	blt.w	8005bec <scaraFLowScurve+0xa24>
 8005ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ac8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad8:	ed97 7a00 	vldr	s14, [r7]
 8005adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	f200 8082 	bhi.w	8005bec <scaraFLowScurve+0xa24>
			 t = time - (2*tm + tc);
 8005ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af8:	ed97 7a00 	vldr	s14, [r7]
 8005afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b00:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current 	=	-j_max*(t - (2*tm + tc));
 8005b04:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b08:	eeb1 7a67 	vneg.f32	s14, s15
 8005b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005b20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fa fd18 	bl	8000568 <__aeabi_f2d>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	6978      	ldr	r0, [r7, #20]
 8005b3e:	f7fa fd13 	bl	8000568 <__aeabi_f2d>
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <scaraFLowScurve+0xa20>)
 8005b48:	f7fa fd66 	bl	8000618 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4690      	mov	r8, r2
 8005b52:	4699      	mov	r9, r3
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f7fa fd07 	bl	8000568 <__aeabi_f2d>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fd59 	bl	8000618 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	68b8      	ldr	r0, [r7, #8]
 8005b70:	f7fa fcfa 	bl	8000568 <__aeabi_f2d>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa fd4c 	bl	8000618 <__aeabi_dmul>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4620      	mov	r0, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	f7fa fb8e 	bl	80002a8 <__aeabi_dsub>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	4618      	mov	r0, r3
 8005b92:	4621      	mov	r1, r4
 8005b94:	f7fb f838 	bl	8000c08 <__aeabi_d2f>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_3 + scurve->v_2*t - j_max*t*t*t/6;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bb6:	edd7 6a05 	vldr	s13, [r7, #20]
 8005bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bca:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bd2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8005bd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8005be4:	e102      	b.n	8005dec <scaraFLowScurve+0xc24>
 8005be6:	bf00      	nop
 8005be8:	3fe00000 	.word	0x3fe00000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time <= (4*tm + tc)) ) {
 8005bec:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bf0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005bf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c00:	ed97 7a00 	vldr	s14, [r7]
 8005c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	f2c0 80df 	blt.w	8005dce <scaraFLowScurve+0xc06>
 8005c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c14:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c24:	ed97 7a00 	vldr	s14, [r7]
 8005c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	f200 80cd 	bhi.w	8005dce <scaraFLowScurve+0xc06>
			 t = time - (3*tm + tc);
 8005c34:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c38:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c48:	ed97 7a00 	vldr	s14, [r7]
 8005c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c50:	edc7 7a02 	vstr	s15, [r7, #8]
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8005c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c58:	eeb1 7a67 	vneg.f32	s14, s15
 8005c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c64:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005c80:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c84:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c98:	ee17 0a90 	vmov	r0, s15
 8005c9c:	f7fa fc64 	bl	8000568 <__aeabi_f2d>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	6978      	ldr	r0, [r7, #20]
 8005ca6:	f7fa fc5f 	bl	8000568 <__aeabi_f2d>
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	4b52      	ldr	r3, [pc, #328]	; (8005df8 <scaraFLowScurve+0xc30>)
 8005cb0:	f7fa fcb2 	bl	8000618 <__aeabi_dmul>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4690      	mov	r8, r2
 8005cba:	4699      	mov	r9, r3
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f7fa fc53 	bl	8000568 <__aeabi_f2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	4649      	mov	r1, r9
 8005cca:	f7fa fca5 	bl	8000618 <__aeabi_dmul>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4690      	mov	r8, r2
 8005cd4:	4699      	mov	r9, r3
 8005cd6:	68b8      	ldr	r0, [r7, #8]
 8005cd8:	f7fa fc46 	bl	8000568 <__aeabi_f2d>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	f7fa fc98 	bl	8000618 <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fadc 	bl	80002ac <__adddf3>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	f7fa ff84 	bl	8000c08 <__aeabi_d2f>
 8005d00:	4602      	mov	r2, r0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t + j_max*t*t*t/6;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8005d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1e:	ee17 0a90 	vmov	r0, s15
 8005d22:	f7fa fc21 	bl	8000568 <__aeabi_f2d>
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	6978      	ldr	r0, [r7, #20]
 8005d2c:	f7fa fc1c 	bl	8000568 <__aeabi_f2d>
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <scaraFLowScurve+0xc30>)
 8005d36:	f7fa fc6f 	bl	8000618 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4690      	mov	r8, r2
 8005d40:	4699      	mov	r9, r3
 8005d42:	6938      	ldr	r0, [r7, #16]
 8005d44:	f7fa fc10 	bl	8000568 <__aeabi_f2d>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fc62 	bl	8000618 <__aeabi_dmul>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4690      	mov	r8, r2
 8005d5a:	4699      	mov	r9, r3
 8005d5c:	68b8      	ldr	r0, [r7, #8]
 8005d5e:	f7fa fc03 	bl	8000568 <__aeabi_f2d>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4640      	mov	r0, r8
 8005d68:	4649      	mov	r1, r9
 8005d6a:	f7fa fc55 	bl	8000618 <__aeabi_dmul>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa fa97 	bl	80002a8 <__aeabi_dsub>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4625      	mov	r5, r4
 8005d80:	461c      	mov	r4, r3
 8005d82:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005da2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005da6:	ee16 0a90 	vmov	r0, s13
 8005daa:	f7fa fbdd 	bl	8000568 <__aeabi_f2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fa79 	bl	80002ac <__adddf3>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7fa ff21 	bl	8000c08 <__aeabi_d2f>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	665a      	str	r2, [r3, #100]	; 0x64
 8005dcc:	e00e      	b.n	8005dec <scaraFLowScurve+0xc24>
		 } else {
			 scurve->a_current = 0;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	65da      	str	r2, [r3, #92]	; 0x5c
			 scurve->v_current = 0;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	661a      	str	r2, [r3, #96]	; 0x60
			 scurve->s_current = scurve->total_s;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64
 8005de6:	e001      	b.n	8005dec <scaraFLowScurve+0xc24>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <scaraFLowScurve+0xc26>
	 }

	 return SCARA_STATUS_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005df8:	3fe00000 	.word	0x3fe00000

08005dfc <scaraCheckWorkSpace4>:

SCARA_StatusTypeDef	scaraCheckWorkSpace4 (float theta1, float theta2, float d3, float theta4) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e06:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e0a:	ed87 1a01 	vstr	s2, [r7, #4]
 8005e0e:	edc7 1a00 	vstr	s3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8005e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e16:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005ebc <scaraCheckWorkSpace4+0xc0>
 8005e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e22:	d408      	bmi.n	8005e36 <scaraCheckWorkSpace4+0x3a>
 8005e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e28:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005ec0 <scaraCheckWorkSpace4+0xc4>
 8005e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	dd01      	ble.n	8005e3a <scaraCheckWorkSpace4+0x3e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e36:	2307      	movs	r3, #7
 8005e38:	e03a      	b.n	8005eb0 <scaraCheckWorkSpace4+0xb4>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8005e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e3e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005ec4 <scaraCheckWorkSpace4+0xc8>
 8005e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4a:	d408      	bmi.n	8005e5e <scaraCheckWorkSpace4+0x62>
 8005e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e50:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005ec8 <scaraCheckWorkSpace4+0xcc>
 8005e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	dd01      	ble.n	8005e62 <scaraCheckWorkSpace4+0x66>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e5e:	2307      	movs	r3, #7
 8005e60:	e026      	b.n	8005eb0 <scaraCheckWorkSpace4+0xb4>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8005e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6e:	d408      	bmi.n	8005e82 <scaraCheckWorkSpace4+0x86>
 8005e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e74:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005ecc <scaraCheckWorkSpace4+0xd0>
 8005e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e80:	dd01      	ble.n	8005e86 <scaraCheckWorkSpace4+0x8a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e82:	2307      	movs	r3, #7
 8005e84:	e014      	b.n	8005eb0 <scaraCheckWorkSpace4+0xb4>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8005e86:	edd7 7a00 	vldr	s15, [r7]
 8005e8a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005ed0 <scaraCheckWorkSpace4+0xd4>
 8005e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e96:	d408      	bmi.n	8005eaa <scaraCheckWorkSpace4+0xae>
 8005e98:	edd7 7a00 	vldr	s15, [r7]
 8005e9c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005ed4 <scaraCheckWorkSpace4+0xd8>
 8005ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea8:	dd01      	ble.n	8005eae <scaraCheckWorkSpace4+0xb2>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005eaa:	2307      	movs	r3, #7
 8005eac:	e000      	b.n	8005eb0 <scaraCheckWorkSpace4+0xb4>
	}
	return SCARA_STATUS_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	bfc90fdb 	.word	0xbfc90fdb
 8005ec0:	3fc90fdb 	.word	0x3fc90fdb
 8005ec4:	c016cbe4 	.word	0xc016cbe4
 8005ec8:	4016cbe4 	.word	0x4016cbe4
 8005ecc:	42c80000 	.word	0x42c80000
 8005ed0:	c0490fdb 	.word	0xc0490fdb
 8005ed4:	40490fdb 	.word	0x40490fdb

08005ed8 <scaraCheckWorkSpace1>:

SCARA_StatusTypeDef			scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, float value) {
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	ed87 0a00 	vstr	s0, [r7]
 8005ee4:	71fb      	strb	r3, [r7, #7]
	if ( TRAJECTORY_J0 == target) {
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <scaraCheckWorkSpace1+0x40>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8005eec:	edd7 7a00 	vldr	s15, [r7]
 8005ef0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005fb8 <scaraCheckWorkSpace1+0xe0>
 8005ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	db0a      	blt.n	8005f14 <scaraCheckWorkSpace1+0x3c>
 8005efe:	edd7 7a00 	vldr	s15, [r7]
 8005f02:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005fbc <scaraCheckWorkSpace1+0xe4>
 8005f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0e:	d801      	bhi.n	8005f14 <scaraCheckWorkSpace1+0x3c>
			return SCARA_STATUS_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e04b      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f14:	2307      	movs	r3, #7
 8005f16:	e049      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J1 == target) {
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d115      	bne.n	8005f4a <scaraCheckWorkSpace1+0x72>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8005f1e:	edd7 7a00 	vldr	s15, [r7]
 8005f22:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005fc0 <scaraCheckWorkSpace1+0xe8>
 8005f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2e:	db0a      	blt.n	8005f46 <scaraCheckWorkSpace1+0x6e>
 8005f30:	edd7 7a00 	vldr	s15, [r7]
 8005f34:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005fc4 <scaraCheckWorkSpace1+0xec>
 8005f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f40:	d801      	bhi.n	8005f46 <scaraCheckWorkSpace1+0x6e>
			return SCARA_STATUS_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e032      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f46:	2307      	movs	r3, #7
 8005f48:	e030      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J2 == target) {
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d113      	bne.n	8005f78 <scaraCheckWorkSpace1+0xa0>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8005f50:	edd7 7a00 	vldr	s15, [r7]
 8005f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	db0a      	blt.n	8005f74 <scaraCheckWorkSpace1+0x9c>
 8005f5e:	edd7 7a00 	vldr	s15, [r7]
 8005f62:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005fc8 <scaraCheckWorkSpace1+0xf0>
 8005f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	d801      	bhi.n	8005f74 <scaraCheckWorkSpace1+0x9c>
			return SCARA_STATUS_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e01b      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f74:	2307      	movs	r3, #7
 8005f76:	e019      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		}
	} else if (TRAJECTORY_J3 == target) {
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d115      	bne.n	8005faa <scaraCheckWorkSpace1+0xd2>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8005f7e:	edd7 7a00 	vldr	s15, [r7]
 8005f82:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005fcc <scaraCheckWorkSpace1+0xf4>
 8005f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8e:	db0a      	blt.n	8005fa6 <scaraCheckWorkSpace1+0xce>
 8005f90:	edd7 7a00 	vldr	s15, [r7]
 8005f94:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005fd0 <scaraCheckWorkSpace1+0xf8>
 8005f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	d801      	bhi.n	8005fa6 <scaraCheckWorkSpace1+0xce>
			return SCARA_STATUS_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e002      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005fa6:	2307      	movs	r3, #7
 8005fa8:	e000      	b.n	8005fac <scaraCheckWorkSpace1+0xd4>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8005faa:	2301      	movs	r3, #1
	}
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	bfc90fdb 	.word	0xbfc90fdb
 8005fbc:	3fc90fdb 	.word	0x3fc90fdb
 8005fc0:	c016cbe4 	.word	0xc016cbe4
 8005fc4:	4016cbe4 	.word	0x4016cbe4
 8005fc8:	42c80000 	.word	0x42c80000
 8005fcc:	c0490fdb 	.word	0xc0490fdb
 8005fd0:	40490fdb 	.word	0x40490fdb

08005fd4 <scaraSetOutput>:
void				scaraSetScanFlag(void) {
	mySCARA.isScanLitmit = TRUE;
}


void				scaraSetOutput		(int8_t level) {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8005fde:	79fa      	ldrb	r2, [r7, #7]
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <scaraSetOutput+0x1c>)
 8005fe2:	70da      	strb	r2, [r3, #3]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000c78 	.word	0x20000c78

08005ff4 <scaraSetDutyState>:


void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8005ffe:	4a04      	ldr	r2, [pc, #16]	; (8006010 <scaraSetDutyState+0x1c>)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	7053      	strb	r3, [r2, #1]
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	20000c78 	.word	0x20000c78

08006014 <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800601c:	2230      	movs	r2, #48	; 0x30
 800601e:	4904      	ldr	r1, [pc, #16]	; (8006030 <scaraGetPosition+0x1c>)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f00a fbcd 	bl	80107c0 <memcpy>
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20005790 	.word	0x20005790

08006034 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800603e:	4a04      	ldr	r2, [pc, #16]	; (8006050 <scaraSetMode+0x1c>)
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	7013      	strb	r3, [r2, #0]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20000c78 	.word	0x20000c78

08006054 <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <scaraGetMode+0x14>)
 800605a:	781b      	ldrb	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000c78 	.word	0x20000c78

0800606c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <scaraGetDutyState+0x14>)
 8006072:	785b      	ldrb	r3, [r3, #1]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000c78 	.word	0x20000c78

08006084 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <scaraIsScanLimit+0x14>)
 800608a:	789b      	ldrb	r3, [r3, #2]
}
 800608c:	4618      	mov	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000c78 	.word	0x20000c78
 800609c:	00000000 	.word	0x00000000

080060a0 <scaraIsFinish>:

uint8_t					scaraIsFinish		(float run_time) {
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(myDUTY.time_total < (run_time + 0.01)) {
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <scaraIsFinish+0x58>)
 80060ac:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fa fa58 	bl	8000568 <__aeabi_f2d>
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fa fa53 	bl	8000568 <__aeabi_f2d>
 80060c2:	a30b      	add	r3, pc, #44	; (adr r3, 80060f0 <scaraIsFinish+0x50>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa f8f0 	bl	80002ac <__adddf3>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa fd12 	bl	8000afc <__aeabi_dcmplt>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <scaraIsFinish+0x42>
		return TRUE;
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <scaraIsFinish+0x44>
	} else {
		return FALSE;
 80060e2:	2300      	movs	r3, #0
	}
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bdb0      	pop	{r4, r5, r7, pc}
 80060ec:	f3af 8000 	nop.w
 80060f0:	47ae147b 	.word	0x47ae147b
 80060f4:	3f847ae1 	.word	0x3f847ae1
 80060f8:	200052e8 	.word	0x200052e8

080060fc <scaraPosition2String>:

int32_t					scaraPosition2String(char * result, SCARA_PositionTypeDef position) {
 80060fc:	b084      	sub	sp, #16
 80060fe:	b580      	push	{r7, lr}
 8006100:	b0a6      	sub	sp, #152	; 0x98
 8006102:	af08      	add	r7, sp, #32
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t z[12];
	uint8_t roll[12];
	uint8_t time[12];
	int32_t lenght;

	float2string(theta1, position.Theta1, 6);
 800610e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006116:	2106      	movs	r1, #6
 8006118:	eeb0 0a67 	vmov.f32	s0, s15
 800611c:	4618      	mov	r0, r3
 800611e:	f7fb fb65 	bl	80017ec <float2string>
	float2string(theta2, position.Theta2, 6);
 8006122:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006126:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800612a:	2106      	movs	r1, #6
 800612c:	eeb0 0a67 	vmov.f32	s0, s15
 8006130:	4618      	mov	r0, r3
 8006132:	f7fb fb5b 	bl	80017ec <float2string>
	float2string(d3, position.D3, 6);
 8006136:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800613a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800613e:	2106      	movs	r1, #6
 8006140:	eeb0 0a67 	vmov.f32	s0, s15
 8006144:	4618      	mov	r0, r3
 8006146:	f7fb fb51 	bl	80017ec <float2string>
	float2string(theta4, position.Theta4, 6);
 800614a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800614e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006152:	2106      	movs	r1, #6
 8006154:	eeb0 0a67 	vmov.f32	s0, s15
 8006158:	4618      	mov	r0, r3
 800615a:	f7fb fb47 	bl	80017ec <float2string>
	float2string(x, position.x, 6);
 800615e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006166:	2106      	movs	r1, #6
 8006168:	eeb0 0a67 	vmov.f32	s0, s15
 800616c:	4618      	mov	r0, r3
 800616e:	f7fb fb3d 	bl	80017ec <float2string>
	float2string(y, position.y, 6);
 8006172:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800617a:	2106      	movs	r1, #6
 800617c:	eeb0 0a67 	vmov.f32	s0, s15
 8006180:	4618      	mov	r0, r3
 8006182:	f7fb fb33 	bl	80017ec <float2string>
	float2string(z, position.z, 6);
 8006186:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800618a:	f107 0320 	add.w	r3, r7, #32
 800618e:	2106      	movs	r1, #6
 8006190:	eeb0 0a67 	vmov.f32	s0, s15
 8006194:	4618      	mov	r0, r3
 8006196:	f7fb fb29 	bl	80017ec <float2string>
	float2string(roll, position.roll, 6);
 800619a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	2106      	movs	r1, #6
 80061a4:	eeb0 0a67 	vmov.f32	s0, s15
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fb fb1f 	bl	80017ec <float2string>
	float2string(time, position.t, 4);
 80061ae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	2104      	movs	r1, #4
 80061b8:	eeb0 0a67 	vmov.f32	s0, s15
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fb fb15 	bl	80017ec <float2string>
	lenght = snprintf( (char *)result, 108,
 80061c2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	9306      	str	r3, [sp, #24]
 80061d2:	f107 0320 	add.w	r3, r7, #32
 80061d6:	9305      	str	r3, [sp, #20]
 80061d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061e2:	9303      	str	r3, [sp, #12]
 80061e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061e8:	9302      	str	r3, [sp, #8]
 80061ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <scaraPosition2String+0x118>)
 80061fa:	216c      	movs	r1, #108	; 0x6c
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f00b fa07 	bl	8011610 <sniprintf>
 8006202:	6778      	str	r0, [r7, #116]	; 0x74
						x,
						y,
						z,
						roll,
						time);
	return lenght;
 8006204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8006206:	4618      	mov	r0, r3
 8006208:	3778      	adds	r7, #120	; 0x78
 800620a:	46bd      	mov	sp, r7
 800620c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006210:	b004      	add	sp, #16
 8006212:	4770      	bx	lr
 8006214:	08015ea0 	.word	0x08015ea0

08006218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_MspInit+0x54>)
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	4a11      	ldr	r2, [pc, #68]	; (800626c <HAL_MspInit+0x54>)
 8006228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800622c:	6453      	str	r3, [r2, #68]	; 0x44
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <HAL_MspInit+0x54>)
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_MspInit+0x54>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	4a0a      	ldr	r2, [pc, #40]	; (800626c <HAL_MspInit+0x54>)
 8006244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006248:	6413      	str	r3, [r2, #64]	; 0x40
 800624a:	4b08      	ldr	r3, [pc, #32]	; (800626c <HAL_MspInit+0x54>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006256:	2200      	movs	r2, #0
 8006258:	210f      	movs	r1, #15
 800625a:	f06f 0001 	mvn.w	r0, #1
 800625e:	f000 fb15 	bl	800688c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800

08006270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006280:	2200      	movs	r2, #0
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	2036      	movs	r0, #54	; 0x36
 8006286:	f000 fb01 	bl	800688c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800628a:	2036      	movs	r0, #54	; 0x36
 800628c:	f000 fb1a 	bl	80068c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <HAL_InitTick+0xa4>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_InitTick+0xa4>)
 800629a:	f043 0310 	orr.w	r3, r3, #16
 800629e:	6413      	str	r3, [r2, #64]	; 0x40
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <HAL_InitTick+0xa4>)
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062ac:	f107 0210 	add.w	r2, r7, #16
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f002 fe36 	bl	8008f28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80062bc:	f002 fe0c 	bl	8008ed8 <HAL_RCC_GetPCLK1Freq>
 80062c0:	4603      	mov	r3, r0
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <HAL_InitTick+0xa8>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	0c9b      	lsrs	r3, r3, #18
 80062d0:	3b01      	subs	r3, #1
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <HAL_InitTick+0xac>)
 80062d6:	4a12      	ldr	r2, [pc, #72]	; (8006320 <HAL_InitTick+0xb0>)
 80062d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80062da:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_InitTick+0xac>)
 80062dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80062e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80062e2:	4a0e      	ldr	r2, [pc, #56]	; (800631c <HAL_InitTick+0xac>)
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_InitTick+0xac>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_InitTick+0xac>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80062f4:	4809      	ldr	r0, [pc, #36]	; (800631c <HAL_InitTick+0xac>)
 80062f6:	f002 fe49 	bl	8008f8c <HAL_TIM_Base_Init>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006300:	4806      	ldr	r0, [pc, #24]	; (800631c <HAL_InitTick+0xac>)
 8006302:	f002 fe78 	bl	8008ff6 <HAL_TIM_Base_Start_IT>
 8006306:	4603      	mov	r3, r0
 8006308:	e000      	b.n	800630c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
}
 800630c:	4618      	mov	r0, r3
 800630e:	3730      	adds	r7, #48	; 0x30
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40023800 	.word	0x40023800
 8006318:	431bde83 	.word	0x431bde83
 800631c:	200057f0 	.word	0x200057f0
 8006320:	40001000 	.word	0x40001000

08006324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006328:	bf00      	nop
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 8006338:	2162      	movs	r1, #98	; 0x62
 800633a:	4802      	ldr	r0, [pc, #8]	; (8006344 <HardFault_Handler+0x10>)
 800633c:	f7fb fa10 	bl	8001760 <LOG_REPORT>
 8006340:	e7fa      	b.n	8006338 <HardFault_Handler+0x4>
 8006342:	bf00      	nop
 8006344:	08015ebc 	.word	0x08015ebc

08006348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800634c:	2172      	movs	r1, #114	; 0x72
 800634e:	4802      	ldr	r0, [pc, #8]	; (8006358 <MemManage_Handler+0x10>)
 8006350:	f7fb fa06 	bl	8001760 <LOG_REPORT>
 8006354:	e7fa      	b.n	800634c <MemManage_Handler+0x4>
 8006356:	bf00      	nop
 8006358:	08015ed4 	.word	0x08015ed4

0800635c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 8006360:	2182      	movs	r1, #130	; 0x82
 8006362:	4802      	ldr	r0, [pc, #8]	; (800636c <BusFault_Handler+0x10>)
 8006364:	f7fb f9fc 	bl	8001760 <LOG_REPORT>
 8006368:	e7fa      	b.n	8006360 <BusFault_Handler+0x4>
 800636a:	bf00      	nop
 800636c:	08015ee8 	.word	0x08015ee8

08006370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006374:	e7fe      	b.n	8006374 <UsageFault_Handler+0x4>

08006376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006388:	4802      	ldr	r0, [pc, #8]	; (8006394 <DMA1_Stream4_IRQHandler+0x10>)
 800638a:	f000 fbd1 	bl	8006b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800638e:	bf00      	nop
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20005870 	.word	0x20005870

08006398 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800639c:	4802      	ldr	r0, [pc, #8]	; (80063a8 <UART4_IRQHandler+0x10>)
 800639e:	f003 f8ed 	bl	800957c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20005830 	.word	0x20005830

080063ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80063b0:	4802      	ldr	r0, [pc, #8]	; (80063bc <TIM6_DAC_IRQHandler+0x10>)
 80063b2:	f002 fe44 	bl	800903e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200057f0 	.word	0x200057f0

080063c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80063c4:	4802      	ldr	r0, [pc, #8]	; (80063d0 <OTG_FS_IRQHandler+0x10>)
 80063c6:	f001 f913 	bl	80075f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20006178 	.word	0x20006178

080063d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063dc:	4b11      	ldr	r3, [pc, #68]	; (8006424 <_sbrk+0x50>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <_sbrk+0x16>
		heap_end = &end;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <_sbrk+0x50>)
 80063e6:	4a10      	ldr	r2, [pc, #64]	; (8006428 <_sbrk+0x54>)
 80063e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <_sbrk+0x50>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <_sbrk+0x50>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	466a      	mov	r2, sp
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d907      	bls.n	800640e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80063fe:	f00a f9a5 	bl	801074c <__errno>
 8006402:	4602      	mov	r2, r0
 8006404:	230c      	movs	r3, #12
 8006406:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e006      	b.n	800641c <_sbrk+0x48>
	}

	heap_end += incr;
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <_sbrk+0x50>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	4a03      	ldr	r2, [pc, #12]	; (8006424 <_sbrk+0x50>)
 8006418:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800641a:	68fb      	ldr	r3, [r7, #12]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20001478 	.word	0x20001478
 8006428:	20006588 	.word	0x20006588

0800642c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <SystemInit+0x28>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006436:	4a07      	ldr	r2, [pc, #28]	; (8006454 <SystemInit+0x28>)
 8006438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800643c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <SystemInit+0x28>)
 8006442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006446:	609a      	str	r2, [r3, #8]
#endif
}
 8006448:	bf00      	nop
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800645c:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <MX_UART4_Init+0x4c>)
 800645e:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <MX_UART4_Init+0x50>)
 8006460:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <MX_UART4_Init+0x4c>)
 8006464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006468:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800646a:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <MX_UART4_Init+0x4c>)
 800646c:	2200      	movs	r2, #0
 800646e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <MX_UART4_Init+0x4c>)
 8006472:	2200      	movs	r2, #0
 8006474:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <MX_UART4_Init+0x4c>)
 8006478:	2200      	movs	r2, #0
 800647a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <MX_UART4_Init+0x4c>)
 800647e:	220c      	movs	r2, #12
 8006480:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <MX_UART4_Init+0x4c>)
 8006484:	2200      	movs	r2, #0
 8006486:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <MX_UART4_Init+0x4c>)
 800648a:	2200      	movs	r2, #0
 800648c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800648e:	4805      	ldr	r0, [pc, #20]	; (80064a4 <MX_UART4_Init+0x4c>)
 8006490:	f002 ffba 	bl	8009408 <HAL_UART_Init>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800649a:	f7fc fc23 	bl	8002ce4 <Error_Handler>
  }

}
 800649e:	bf00      	nop
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20005830 	.word	0x20005830
 80064a8:	40004c00 	.word	0x40004c00

080064ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_UART_MspInit+0xf0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d161      	bne.n	8006592 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064dc:	6413      	str	r3, [r2, #64]	; 0x40
 80064de:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	4b2c      	ldr	r3, [pc, #176]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <HAL_UART_MspInit+0xf4>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006506:	2303      	movs	r3, #3
 8006508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800650e:	2301      	movs	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006512:	2303      	movs	r3, #3
 8006514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006516:	2308      	movs	r3, #8
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	4820      	ldr	r0, [pc, #128]	; (80065a4 <HAL_UART_MspInit+0xf8>)
 8006522:	f000 fd7b 	bl	800701c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006526:	4b20      	ldr	r3, [pc, #128]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006528:	4a20      	ldr	r2, [pc, #128]	; (80065ac <HAL_UART_MspInit+0x100>)
 800652a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800652e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006532:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006534:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800653a:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006546:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800654a:	2200      	movs	r2, #0
 800654c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800654e:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006554:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800655a:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800655c:	2200      	movs	r2, #0
 800655e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006560:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006562:	2200      	movs	r2, #0
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006566:	4810      	ldr	r0, [pc, #64]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 8006568:	f000 f9ba 	bl	80068e0 <HAL_DMA_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006572:	f7fc fbb7 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a0b      	ldr	r2, [pc, #44]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_UART_MspInit+0xfc>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8006582:	2200      	movs	r2, #0
 8006584:	2105      	movs	r1, #5
 8006586:	2034      	movs	r0, #52	; 0x34
 8006588:	f000 f980 	bl	800688c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800658c:	2034      	movs	r0, #52	; 0x34
 800658e:	f000 f999 	bl	80068c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8006592:	bf00      	nop
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40004c00 	.word	0x40004c00
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40020000 	.word	0x40020000
 80065a8:	20005870 	.word	0x20005870
 80065ac:	40026070 	.word	0x40026070

080065b0 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <HAL_UART_TxCpltCallback+0x40>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d112      	bne.n	80065e8 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80065c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c6:	490b      	ldr	r1, [pc, #44]	; (80065f4 <HAL_UART_TxCpltCallback+0x44>)
 80065c8:	480b      	ldr	r0, [pc, #44]	; (80065f8 <HAL_UART_TxCpltCallback+0x48>)
 80065ca:	f7fc fc2a 	bl	8002e22 <ringBuff_PopArray>
 80065ce:	4603      	mov	r3, r0
 80065d0:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 80065d2:	89fb      	ldrh	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d006      	beq.n	80065e6 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	461a      	mov	r2, r3
 80065dc:	4905      	ldr	r1, [pc, #20]	; (80065f4 <HAL_UART_TxCpltCallback+0x44>)
 80065de:	4807      	ldr	r0, [pc, #28]	; (80065fc <HAL_UART_TxCpltCallback+0x4c>)
 80065e0:	f002 ff60 	bl	80094a4 <HAL_UART_Transmit_DMA>
 80065e4:	e000      	b.n	80065e8 <HAL_UART_TxCpltCallback+0x38>
			return;
 80065e6:	bf00      	nop
	}
}
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40004c00 	.word	0x40004c00
 80065f4:	200051d4 	.word	0x200051d4
 80065f8:	2000086c 	.word	0x2000086c
 80065fc:	20005830 	.word	0x20005830

08006600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006638 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006604:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006606:	e003      	b.n	8006610 <LoopCopyDataInit>

08006608 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800660a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800660c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800660e:	3104      	adds	r1, #4

08006610 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006610:	480b      	ldr	r0, [pc, #44]	; (8006640 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006614:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006616:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006618:	d3f6      	bcc.n	8006608 <CopyDataInit>
  ldr  r2, =_sbss
 800661a:	4a0b      	ldr	r2, [pc, #44]	; (8006648 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800661c:	e002      	b.n	8006624 <LoopFillZerobss>

0800661e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800661e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006620:	f842 3b04 	str.w	r3, [r2], #4

08006624 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006624:	4b09      	ldr	r3, [pc, #36]	; (800664c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006626:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006628:	d3f9      	bcc.n	800661e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800662a:	f7ff feff 	bl	800642c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800662e:	f00a f893 	bl	8010758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006632:	f7fc fac9 	bl	8002bc8 <main>
  bx  lr    
 8006636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006638:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800663c:	080166ac 	.word	0x080166ac
  ldr  r0, =_sdata
 8006640:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006644:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 8006648:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 800664c:	20006584 	.word	0x20006584

08006650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006650:	e7fe      	b.n	8006650 <ADC_IRQHandler>
	...

08006654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <HAL_Init+0x40>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0d      	ldr	r2, [pc, #52]	; (8006694 <HAL_Init+0x40>)
 800665e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_Init+0x40>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <HAL_Init+0x40>)
 800666a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800666e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <HAL_Init+0x40>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a07      	ldr	r2, [pc, #28]	; (8006694 <HAL_Init+0x40>)
 8006676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800667c:	2003      	movs	r0, #3
 800667e:	f000 f8fa 	bl	8006876 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006682:	2000      	movs	r0, #0
 8006684:	f7ff fdf4 	bl	8006270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006688:	f7ff fdc6 	bl	8006218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40023c00 	.word	0x40023c00

08006698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_IncTick+0x20>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b06      	ldr	r3, [pc, #24]	; (80066bc <HAL_IncTick+0x24>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4413      	add	r3, r2
 80066a8:	4a04      	ldr	r2, [pc, #16]	; (80066bc <HAL_IncTick+0x24>)
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000cbc 	.word	0x20000cbc
 80066bc:	200058d0 	.word	0x200058d0

080066c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return uwTick;
 80066c4:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <HAL_GetTick+0x14>)
 80066c6:	681b      	ldr	r3, [r3, #0]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	200058d0 	.word	0x200058d0

080066d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066e0:	f7ff ffee 	bl	80066c0 <HAL_GetTick>
 80066e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d005      	beq.n	80066fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_Delay+0x40>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066fe:	bf00      	nop
 8006700:	f7ff ffde 	bl	80066c0 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	429a      	cmp	r2, r3
 800670e:	d8f7      	bhi.n	8006700 <HAL_Delay+0x28>
  {
  }
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000cbc 	.word	0x20000cbc

0800671c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <__NVIC_SetPriorityGrouping+0x44>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006738:	4013      	ands	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800674e:	4a04      	ldr	r2, [pc, #16]	; (8006760 <__NVIC_SetPriorityGrouping+0x44>)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	60d3      	str	r3, [r2, #12]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <__NVIC_GetPriorityGrouping+0x18>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	f003 0307 	and.w	r3, r3, #7
}
 8006772:	4618      	mov	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	e000ed00 	.word	0xe000ed00

08006780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800678a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678e:	2b00      	cmp	r3, #0
 8006790:	db0b      	blt.n	80067aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	f003 021f 	and.w	r2, r3, #31
 8006798:	4907      	ldr	r1, [pc, #28]	; (80067b8 <__NVIC_EnableIRQ+0x38>)
 800679a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	2001      	movs	r0, #1
 80067a2:	fa00 f202 	lsl.w	r2, r0, r2
 80067a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	e000e100 	.word	0xe000e100

080067bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	db0a      	blt.n	80067e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	490c      	ldr	r1, [pc, #48]	; (8006808 <__NVIC_SetPriority+0x4c>)
 80067d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067da:	0112      	lsls	r2, r2, #4
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	440b      	add	r3, r1
 80067e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067e4:	e00a      	b.n	80067fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4908      	ldr	r1, [pc, #32]	; (800680c <__NVIC_SetPriority+0x50>)
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	3b04      	subs	r3, #4
 80067f4:	0112      	lsls	r2, r2, #4
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	440b      	add	r3, r1
 80067fa:	761a      	strb	r2, [r3, #24]
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	e000e100 	.word	0xe000e100
 800680c:	e000ed00 	.word	0xe000ed00

08006810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006810:	b480      	push	{r7}
 8006812:	b089      	sub	sp, #36	; 0x24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f1c3 0307 	rsb	r3, r3, #7
 800682a:	2b04      	cmp	r3, #4
 800682c:	bf28      	it	cs
 800682e:	2304      	movcs	r3, #4
 8006830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3304      	adds	r3, #4
 8006836:	2b06      	cmp	r3, #6
 8006838:	d902      	bls.n	8006840 <NVIC_EncodePriority+0x30>
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3b03      	subs	r3, #3
 800683e:	e000      	b.n	8006842 <NVIC_EncodePriority+0x32>
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43da      	mvns	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	401a      	ands	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006858:	f04f 31ff 	mov.w	r1, #4294967295
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	fa01 f303 	lsl.w	r3, r1, r3
 8006862:	43d9      	mvns	r1, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006868:	4313      	orrs	r3, r2
         );
}
 800686a:	4618      	mov	r0, r3
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff ff4c 	bl	800671c <__NVIC_SetPriorityGrouping>
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800689e:	f7ff ff61 	bl	8006764 <__NVIC_GetPriorityGrouping>
 80068a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f7ff ffb1 	bl	8006810 <NVIC_EncodePriority>
 80068ae:	4602      	mov	r2, r0
 80068b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff ff80 	bl	80067bc <__NVIC_SetPriority>
}
 80068bc:	bf00      	nop
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ff54 	bl	8006780 <__NVIC_EnableIRQ>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068ec:	f7ff fee8 	bl	80066c0 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e099      	b.n	8006a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800691c:	e00f      	b.n	800693e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800691e:	f7ff fecf 	bl	80066c0 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b05      	cmp	r3, #5
 800692a:	d908      	bls.n	800693e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2203      	movs	r2, #3
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e078      	b.n	8006a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e8      	bne.n	800691e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4b38      	ldr	r3, [pc, #224]	; (8006a38 <HAL_DMA_Init+0x158>)
 8006958:	4013      	ands	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800696a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b04      	cmp	r3, #4
 8006996:	d107      	bne.n	80069a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	4313      	orrs	r3, r2
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d117      	bne.n	8006a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00e      	beq.n	8006a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa9f 	bl	8006f28 <DMA_CheckFifoParam>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80069fe:	2301      	movs	r3, #1
 8006a00:	e016      	b.n	8006a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa56 	bl	8006ebc <DMA_CalcBaseAndBitshift>
 8006a10:	4603      	mov	r3, r0
 8006a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	223f      	movs	r2, #63	; 0x3f
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	f010803f 	.word	0xf010803f

08006a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_DMA_Start_IT+0x26>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e040      	b.n	8006ae4 <HAL_DMA_Start_IT+0xa8>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d12f      	bne.n	8006ad6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f9e8 	bl	8006e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	223f      	movs	r2, #63	; 0x3f
 8006a96:	409a      	lsls	r2, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0216 	orr.w	r2, r2, #22
 8006aaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0208 	orr.w	r2, r2, #8
 8006ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e005      	b.n	8006ae2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d004      	beq.n	8006b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2280      	movs	r2, #128	; 0x80
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e00c      	b.n	8006b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2205      	movs	r2, #5
 8006b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b3c:	4b92      	ldr	r3, [pc, #584]	; (8006d88 <HAL_DMA_IRQHandler+0x258>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a92      	ldr	r2, [pc, #584]	; (8006d8c <HAL_DMA_IRQHandler+0x25c>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0a9b      	lsrs	r3, r3, #10
 8006b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01a      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	2208      	movs	r2, #8
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d012      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f043 0202 	orr.w	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	409a      	lsls	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	409a      	lsls	r2, r3
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d043      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d03c      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d024      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
 8006c5e:	e01f      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01b      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	e016      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0208 	bic.w	r2, r2, #8
 8006c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 808e 	beq.w	8006dce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8086 	beq.w	8006dce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b05      	cmp	r3, #5
 8006cd8:	d136      	bne.n	8006d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0216 	bic.w	r2, r2, #22
 8006ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <HAL_DMA_IRQHandler+0x1da>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0208 	bic.w	r2, r2, #8
 8006d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	223f      	movs	r2, #63	; 0x3f
 8006d20:	409a      	lsls	r2, r3
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d07d      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
        }
        return;
 8006d46:	e078      	b.n	8006e3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01c      	beq.n	8006d90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d030      	beq.n	8006dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
 8006d74:	e02b      	b.n	8006dce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d027      	beq.n	8006dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	e022      	b.n	8006dce <HAL_DMA_IRQHandler+0x29e>
 8006d88:	20000cb4 	.word	0x20000cb4
 8006d8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0210 	bic.w	r2, r2, #16
 8006dac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d032      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d022      	beq.n	8006e28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2205      	movs	r2, #5
 8006de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d307      	bcc.n	8006e16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f2      	bne.n	8006dfa <HAL_DMA_IRQHandler+0x2ca>
 8006e14:	e000      	b.n	8006e18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006e16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
 8006e38:	e000      	b.n	8006e3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8006e3a:	bf00      	nop
    }
  }
}
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop

08006e44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e52:	b2db      	uxtb	r3, r3
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d108      	bne.n	8006ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e9e:	e007      	b.n	8006eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	3b10      	subs	r3, #16
 8006ecc:	4a14      	ldr	r2, [pc, #80]	; (8006f20 <DMA_CalcBaseAndBitshift+0x64>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <DMA_CalcBaseAndBitshift+0x68>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d909      	bls.n	8006efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	1d1a      	adds	r2, r3, #4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	659a      	str	r2, [r3, #88]	; 0x58
 8006efc:	e007      	b.n	8006f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	aaaaaaab 	.word	0xaaaaaaab
 8006f24:	08015f6c 	.word	0x08015f6c

08006f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11f      	bne.n	8006f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d855      	bhi.n	8006ff4 <DMA_CheckFifoParam+0xcc>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <DMA_CheckFifoParam+0x28>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f73 	.word	0x08006f73
 8006f58:	08006f61 	.word	0x08006f61
 8006f5c:	08006ff5 	.word	0x08006ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d045      	beq.n	8006ff8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f70:	e042      	b.n	8006ff8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f7a:	d13f      	bne.n	8006ffc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f80:	e03c      	b.n	8006ffc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d121      	bne.n	8006fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d836      	bhi.n	8007000 <DMA_CheckFifoParam+0xd8>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <DMA_CheckFifoParam+0x70>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fa9 	.word	0x08006fa9
 8006f9c:	08006faf 	.word	0x08006faf
 8006fa0:	08006fa9 	.word	0x08006fa9
 8006fa4:	08006fc1 	.word	0x08006fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e02f      	b.n	800700e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d024      	beq.n	8007004 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fbe:	e021      	b.n	8007004 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fc8:	d11e      	bne.n	8007008 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fce:	e01b      	b.n	8007008 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d902      	bls.n	8006fdc <DMA_CheckFifoParam+0xb4>
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d003      	beq.n	8006fe2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fda:	e018      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	e015      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff2:	e00b      	b.n	800700c <DMA_CheckFifoParam+0xe4>
      break;
 8006ff4:	bf00      	nop
 8006ff6:	e00a      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;
 8006ff8:	bf00      	nop
 8006ffa:	e008      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;
 8006ffc:	bf00      	nop
 8006ffe:	e006      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;
 8007000:	bf00      	nop
 8007002:	e004      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;   
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <DMA_CheckFifoParam+0xe6>
      break;
 800700c:	bf00      	nop
    }
  } 
  
  return status; 
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	e16b      	b.n	8007310 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007038:	2201      	movs	r2, #1
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4013      	ands	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	429a      	cmp	r2, r3
 8007052:	f040 815a 	bne.w	800730a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d00b      	beq.n	8007076 <HAL_GPIO_Init+0x5a>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d007      	beq.n	8007076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800706a:	2b11      	cmp	r3, #17
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b12      	cmp	r3, #18
 8007074:	d130      	bne.n	80070d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	2203      	movs	r2, #3
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	4313      	orrs	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070ac:	2201      	movs	r2, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	f003 0201 	and.w	r2, r3, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	2203      	movs	r2, #3
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d003      	beq.n	8007118 <HAL_GPIO_Init+0xfc>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b12      	cmp	r3, #18
 8007116:	d123      	bne.n	8007160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	08da      	lsrs	r2, r3, #3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3208      	adds	r2, #8
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	220f      	movs	r2, #15
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	4013      	ands	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4313      	orrs	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	08da      	lsrs	r2, r3, #3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3208      	adds	r2, #8
 800715a:	69b9      	ldr	r1, [r7, #24]
 800715c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	2203      	movs	r2, #3
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	4013      	ands	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0203 	and.w	r2, r3, #3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4313      	orrs	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80b4 	beq.w	800730a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	4b5f      	ldr	r3, [pc, #380]	; (8007324 <HAL_GPIO_Init+0x308>)
 80071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071aa:	4a5e      	ldr	r2, [pc, #376]	; (8007324 <HAL_GPIO_Init+0x308>)
 80071ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b0:	6453      	str	r3, [r2, #68]	; 0x44
 80071b2:	4b5c      	ldr	r3, [pc, #368]	; (8007324 <HAL_GPIO_Init+0x308>)
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071be:	4a5a      	ldr	r2, [pc, #360]	; (8007328 <HAL_GPIO_Init+0x30c>)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	089b      	lsrs	r3, r3, #2
 80071c4:	3302      	adds	r3, #2
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	220f      	movs	r2, #15
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a51      	ldr	r2, [pc, #324]	; (800732c <HAL_GPIO_Init+0x310>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d02b      	beq.n	8007242 <HAL_GPIO_Init+0x226>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a50      	ldr	r2, [pc, #320]	; (8007330 <HAL_GPIO_Init+0x314>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d025      	beq.n	800723e <HAL_GPIO_Init+0x222>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a4f      	ldr	r2, [pc, #316]	; (8007334 <HAL_GPIO_Init+0x318>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01f      	beq.n	800723a <HAL_GPIO_Init+0x21e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a4e      	ldr	r2, [pc, #312]	; (8007338 <HAL_GPIO_Init+0x31c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d019      	beq.n	8007236 <HAL_GPIO_Init+0x21a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a4d      	ldr	r2, [pc, #308]	; (800733c <HAL_GPIO_Init+0x320>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_GPIO_Init+0x216>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a4c      	ldr	r2, [pc, #304]	; (8007340 <HAL_GPIO_Init+0x324>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00d      	beq.n	800722e <HAL_GPIO_Init+0x212>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a4b      	ldr	r2, [pc, #300]	; (8007344 <HAL_GPIO_Init+0x328>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d007      	beq.n	800722a <HAL_GPIO_Init+0x20e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a4a      	ldr	r2, [pc, #296]	; (8007348 <HAL_GPIO_Init+0x32c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_GPIO_Init+0x20a>
 8007222:	2307      	movs	r3, #7
 8007224:	e00e      	b.n	8007244 <HAL_GPIO_Init+0x228>
 8007226:	2308      	movs	r3, #8
 8007228:	e00c      	b.n	8007244 <HAL_GPIO_Init+0x228>
 800722a:	2306      	movs	r3, #6
 800722c:	e00a      	b.n	8007244 <HAL_GPIO_Init+0x228>
 800722e:	2305      	movs	r3, #5
 8007230:	e008      	b.n	8007244 <HAL_GPIO_Init+0x228>
 8007232:	2304      	movs	r3, #4
 8007234:	e006      	b.n	8007244 <HAL_GPIO_Init+0x228>
 8007236:	2303      	movs	r3, #3
 8007238:	e004      	b.n	8007244 <HAL_GPIO_Init+0x228>
 800723a:	2302      	movs	r3, #2
 800723c:	e002      	b.n	8007244 <HAL_GPIO_Init+0x228>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <HAL_GPIO_Init+0x228>
 8007242:	2300      	movs	r3, #0
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	f002 0203 	and.w	r2, r2, #3
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	4093      	lsls	r3, r2
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	4313      	orrs	r3, r2
 8007252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007254:	4934      	ldr	r1, [pc, #208]	; (8007328 <HAL_GPIO_Init+0x30c>)
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	3302      	adds	r3, #2
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007262:	4b3a      	ldr	r3, [pc, #232]	; (800734c <HAL_GPIO_Init+0x330>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	43db      	mvns	r3, r3
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4013      	ands	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007286:	4a31      	ldr	r2, [pc, #196]	; (800734c <HAL_GPIO_Init+0x330>)
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800728c:	4b2f      	ldr	r3, [pc, #188]	; (800734c <HAL_GPIO_Init+0x330>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	43db      	mvns	r3, r3
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	4013      	ands	r3, r2
 800729a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072b0:	4a26      	ldr	r2, [pc, #152]	; (800734c <HAL_GPIO_Init+0x330>)
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072b6:	4b25      	ldr	r3, [pc, #148]	; (800734c <HAL_GPIO_Init+0x330>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	43db      	mvns	r3, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	4013      	ands	r3, r2
 80072c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072da:	4a1c      	ldr	r2, [pc, #112]	; (800734c <HAL_GPIO_Init+0x330>)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072e0:	4b1a      	ldr	r3, [pc, #104]	; (800734c <HAL_GPIO_Init+0x330>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	4013      	ands	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007304:	4a11      	ldr	r2, [pc, #68]	; (800734c <HAL_GPIO_Init+0x330>)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3301      	adds	r3, #1
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b0f      	cmp	r3, #15
 8007314:	f67f ae90 	bls.w	8007038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007318:	bf00      	nop
 800731a:	3724      	adds	r7, #36	; 0x24
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40023800 	.word	0x40023800
 8007328:	40013800 	.word	0x40013800
 800732c:	40020000 	.word	0x40020000
 8007330:	40020400 	.word	0x40020400
 8007334:	40020800 	.word	0x40020800
 8007338:	40020c00 	.word	0x40020c00
 800733c:	40021000 	.word	0x40021000
 8007340:	40021400 	.word	0x40021400
 8007344:	40021800 	.word	0x40021800
 8007348:	40021c00 	.word	0x40021c00
 800734c:	40013c00 	.word	0x40013c00

08007350 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007352:	b08f      	sub	sp, #60	; 0x3c
 8007354:	af0a      	add	r7, sp, #40	; 0x28
 8007356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e10f      	b.n	8007582 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f008 fee5 	bl	801014c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2203      	movs	r2, #3
 8007386:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f003 f852 	bl	800a44a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	687e      	ldr	r6, [r7, #4]
 80073ae:	466d      	mov	r5, sp
 80073b0:	f106 0410 	add.w	r4, r6, #16
 80073b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80073c4:	1d33      	adds	r3, r6, #4
 80073c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073c8:	6838      	ldr	r0, [r7, #0]
 80073ca:	f002 ff29 	bl	800a220 <USB_CoreInit>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e0d0      	b.n	8007582 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f003 f840 	bl	800a46c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e04a      	b.n	8007488 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	333d      	adds	r3, #61	; 0x3d
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	333c      	adds	r3, #60	; 0x3c
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	b298      	uxth	r0, r3
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	3342      	adds	r3, #66	; 0x42
 800742e:	4602      	mov	r2, r0
 8007430:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007432:	7bfa      	ldrb	r2, [r7, #15]
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	333f      	adds	r3, #63	; 0x3f
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007446:	7bfa      	ldrb	r2, [r7, #15]
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	3344      	adds	r3, #68	; 0x44
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800745a:	7bfa      	ldrb	r2, [r7, #15]
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	3348      	adds	r3, #72	; 0x48
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3350      	adds	r3, #80	; 0x50
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	3301      	adds	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	7bfa      	ldrb	r2, [r7, #15]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3af      	bcc.n	80073f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e044      	b.n	8007522 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80074c0:	7bfa      	ldrb	r2, [r7, #15]
 80074c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074c4:	7bfa      	ldrb	r2, [r7, #15]
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4613      	mov	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074da:	7bfa      	ldrb	r2, [r7, #15]
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	1a9b      	subs	r3, r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074f0:	7bfa      	ldrb	r2, [r7, #15]
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	1a9b      	subs	r3, r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007506:	7bfa      	ldrb	r2, [r7, #15]
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	3301      	adds	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
 8007522:	7bfa      	ldrb	r2, [r7, #15]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d3b5      	bcc.n	8007498 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	687e      	ldr	r6, [r7, #4]
 8007534:	466d      	mov	r5, sp
 8007536:	f106 0410 	add.w	r4, r6, #16
 800753a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800753e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007546:	e885 0003 	stmia.w	r5, {r0, r1}
 800754a:	1d33      	adds	r3, r6, #4
 800754c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800754e:	6838      	ldr	r0, [r7, #0]
 8007550:	f002 ffb6 	bl	800a4c0 <USB_DevInit>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e00d      	b.n	8007582 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4618      	mov	r0, r3
 800757c:	f003 ffab 	bl	800b4d6 <USB_DevDisconnect>

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800758a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_PCD_Start+0x1c>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e020      	b.n	80075e8 <HAL_PCD_Start+0x5e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d109      	bne.n	80075ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d005      	beq.n	80075ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f003 ff69 	bl	800b4a6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f002 ff25 	bl	800a428 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b08d      	sub	sp, #52	; 0x34
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f004 f810 	bl	800b62c <USB_GetMode>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	f040 838e 	bne.w	8007d30 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f003 ff74 	bl	800b506 <USB_ReadInterrupts>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8384 	beq.w	8007d2e <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f003 ff6b 	bl	800b506 <USB_ReadInterrupts>
 8007630:	4603      	mov	r3, r0
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f002 0202 	and.w	r2, r2, #2
 8007648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f003 ff59 	bl	800b506 <USB_ReadInterrupts>
 8007654:	4603      	mov	r3, r0
 8007656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800765a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800765e:	d17b      	bne.n	8007758 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f003 ff5f 	bl	800b52c <USB_ReadDevAllOutEpInterrupt>
 800766e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007670:	e06f      	b.n	8007752 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d064      	beq.n	8007746 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f003 ff84 	bl	800b594 <USB_ReadDevOutEPInterrupt>
 800768c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	461a      	mov	r2, r3
 80076a6:	2301      	movs	r3, #1
 80076a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80076aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fe0d 	bl	80082cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 ff0c 	bl	80084dc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	461a      	mov	r2, r3
 80076d2:	2308      	movs	r3, #8
 80076d4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	461a      	mov	r2, r3
 80076ee:	2310      	movs	r3, #16
 80076f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d015      	beq.n	8007728 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d108      	bne.n	8007716 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800770e:	461a      	mov	r2, r3
 8007710:	2101      	movs	r1, #1
 8007712:	f003 ffcf 	bl	800b6b4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	2320      	movs	r3, #32
 8007726:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	461a      	mov	r2, r3
 8007740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007744:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	3301      	adds	r3, #1
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	2b00      	cmp	r3, #0
 8007756:	d18c      	bne.n	8007672 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f003 fed2 	bl	800b506 <USB_ReadInterrupts>
 8007762:	4603      	mov	r3, r0
 8007764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800776c:	f040 80c4 	bne.w	80078f8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fef3 	bl	800b560 <USB_ReadDevAllInEpInterrupt>
 800777a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007780:	e0b6      	b.n	80078f0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80ab 	beq.w	80078e4 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f003 ff19 	bl	800b5d0 <USB_ReadDevInEPInterrupt>
 800779e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05b      	beq.n	8007862 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	2201      	movs	r2, #1
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ca:	4013      	ands	r3, r2
 80077cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	461a      	mov	r2, r3
 80077dc:	2301      	movs	r3, #1
 80077de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d11b      	bne.n	8007820 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3348      	adds	r3, #72	; 0x48
 80077f8:	6819      	ldr	r1, [r3, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4403      	add	r3, r0
 8007808:	3344      	adds	r3, #68	; 0x44
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4419      	add	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4403      	add	r3, r0
 800781c:	3348      	adds	r3, #72	; 0x48
 800781e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f008 fd11 	bl	801024e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d116      	bne.n	8007862 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d113      	bne.n	8007862 <HAL_PCD_IRQHandler+0x272>
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783e:	4613      	mov	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3350      	adds	r3, #80	; 0x50
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d108      	bne.n	8007862 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800785a:	461a      	mov	r2, r3
 800785c:	2101      	movs	r1, #1
 800785e:	f003 ff29 	bl	800b6b4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	461a      	mov	r2, r3
 800787a:	2308      	movs	r3, #8
 800787c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	2310      	movs	r3, #16
 8007898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	461a      	mov	r2, r3
 80078b2:	2340      	movs	r3, #64	; 0x40
 80078b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	461a      	mov	r2, r3
 80078ce:	2302      	movs	r3, #2
 80078d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80078dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc67 	bl	80081b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	3301      	adds	r3, #1
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af45 	bne.w	8007782 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f003 fe02 	bl	800b506 <USB_ReadInterrupts>
 8007902:	4603      	mov	r3, r0
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d122      	bne.n	8007954 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007928:	2b01      	cmp	r3, #1
 800792a:	d108      	bne.n	800793e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007934:	2100      	movs	r1, #0
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fe88 	bl	800864c <HAL_PCDEx_LPM_Callback>
 800793c:	e002      	b.n	8007944 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f008 fcfc 	bl	801033c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f003 fdd4 	bl	800b506 <USB_ReadInterrupts>
 800795e:	4603      	mov	r3, r0
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007968:	d112      	bne.n	8007990 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b01      	cmp	r3, #1
 8007978:	d102      	bne.n	8007980 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f008 fcb8 	bl	80102f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800798e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f003 fdb6 	bl	800b506 <USB_ReadInterrupts>
 800799a:	4603      	mov	r3, r0
 800799c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	f040 80a7 	bne.w	8007af6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2110      	movs	r1, #16
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 feee 	bl	800a7a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079c8:	2300      	movs	r3, #0
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079cc:	e036      	b.n	8007a3c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079da:	461a      	mov	r2, r3
 80079dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	3301      	adds	r3, #1
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3c3      	bcc.n	80079ce <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a54:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a72:	f043 030b 	orr.w	r3, r3, #11
 8007a76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a88:	f043 030b 	orr.w	r3, r3, #11
 8007a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8e:	e015      	b.n	8007abc <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007aa2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007aa6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab6:	f043 030b 	orr.w	r3, r3, #11
 8007aba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ace:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f003 fde7 	bl	800b6b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f003 fd03 	bl	800b506 <USB_ReadInterrupts>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0a:	d124      	bne.n	8007b56 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f003 fd99 	bl	800b648 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f002 fea3 	bl	800a866 <USB_GetDevSpeed>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681c      	ldr	r4, [r3, #0]
 8007b2c:	f001 f9c8 	bl	8008ec0 <HAL_RCC_GetHCLKFreq>
 8007b30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f002 fbd2 	bl	800a2e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f008 fbac 	bl	801029e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f003 fcd3 	bl	800b506 <USB_ReadInterrupts>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d161      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0210 	bic.w	r2, r2, #16
 8007b78:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	4613      	mov	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	3304      	adds	r3, #4
 8007b98:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	0c5b      	lsrs	r3, r3, #17
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d124      	bne.n	8007bf0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d035      	beq.n	8007c1e <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6a38      	ldr	r0, [r7, #32]
 8007bc6:	f003 fb4b 	bl	800b260 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bd6:	441a      	add	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	091b      	lsrs	r3, r3, #4
 8007be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]
 8007bee:	e016      	b.n	8007c1e <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	0c5b      	lsrs	r3, r3, #17
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	2b06      	cmp	r3, #6
 8007bfa:	d110      	bne.n	8007c1e <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c02:	2208      	movs	r2, #8
 8007c04:	4619      	mov	r1, r3
 8007c06:	6a38      	ldr	r0, [r7, #32]
 8007c08:	f003 fb2a 	bl	800b260 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c18:	441a      	add	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699a      	ldr	r2, [r3, #24]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0210 	orr.w	r2, r2, #16
 8007c2c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f003 fc67 	bl	800b506 <USB_ReadInterrupts>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d10a      	bne.n	8007c58 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f008 fb1d 	bl	8010282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f002 0208 	and.w	r2, r2, #8
 8007c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f003 fc52 	bl	800b506 <USB_ReadInterrupts>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d10f      	bne.n	8007c8e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f008 fb7f 	bl	801037c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695a      	ldr	r2, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f003 fc37 	bl	800b506 <USB_ReadInterrupts>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca2:	d10f      	bne.n	8007cc4 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f008 fb52 	bl	8010358 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f003 fc1c 	bl	800b506 <USB_ReadInterrupts>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd8:	d10a      	bne.n	8007cf0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f008 fb60 	bl	80103a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695a      	ldr	r2, [r3, #20]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f003 fc06 	bl	800b506 <USB_ReadInterrupts>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d115      	bne.n	8007d30 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f008 fb50 	bl	80103bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6859      	ldr	r1, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	e000      	b.n	8007d30 <HAL_PCD_IRQHandler+0x740>
      return;
 8007d2e:	bf00      	nop
    }
  }
}
 8007d30:	3734      	adds	r7, #52	; 0x34
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}

08007d36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_PCD_SetAddress+0x1a>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e013      	b.n	8007d78 <HAL_PCD_SetAddress+0x42>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f003 fb76 	bl	800b45a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	4608      	mov	r0, r1
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	70fb      	strb	r3, [r7, #3]
 8007d92:	460b      	mov	r3, r1
 8007d94:	803b      	strh	r3, [r7, #0]
 8007d96:	4613      	mov	r3, r2
 8007d98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da0f      	bge.n	8007dc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	3338      	adds	r3, #56	; 0x38
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	705a      	strb	r2, [r3, #1]
 8007dc4:	e00f      	b.n	8007de6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	f003 020f 	and.w	r2, r3, #15
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007df2:	883a      	ldrh	r2, [r7, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	78ba      	ldrb	r2, [r7, #2]
 8007dfc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e10:	78bb      	ldrb	r3, [r7, #2]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d102      	bne.n	8007e1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_PCD_EP_Open+0xaa>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e00e      	b.n	8007e48 <HAL_PCD_EP_Open+0xc8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 fd39 	bl	800a8b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da0f      	bge.n	8007e84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	f003 020f 	and.w	r2, r3, #15
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	3338      	adds	r3, #56	; 0x38
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	3304      	adds	r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	705a      	strb	r2, [r3, #1]
 8007e82:	e00f      	b.n	8007ea4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	f003 020f 	and.w	r2, r3, #15
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_PCD_EP_Close+0x6e>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e00e      	b.n	8007edc <HAL_PCD_EP_Close+0x8c>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 fd77 	bl	800a9c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	f003 020f 	and.w	r2, r3, #15
 8007efa:	4613      	mov	r3, r2
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d102      	bne.n	8007f40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	6979      	ldr	r1, [r7, #20]
 8007f58:	f002 fffa 	bl	800af50 <USB_EP0StartXfer>
 8007f5c:	e008      	b.n	8007f70 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6979      	ldr	r1, [r7, #20]
 8007f6c:	f002 fdac 	bl	800aac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007f9c:	681b      	ldr	r3, [r3, #0]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	3338      	adds	r3, #56	; 0x38
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d102      	bne.n	8008004 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6979      	ldr	r1, [r7, #20]
 800801c:	f002 ff98 	bl	800af50 <USB_EP0StartXfer>
 8008020:	e008      	b.n	8008034 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	f002 fd4a 	bl	800aac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 020f 	and.w	r2, r3, #15
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d901      	bls.n	800805c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e050      	b.n	80080fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800805c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da0f      	bge.n	8008084 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	f003 020f 	and.w	r2, r3, #15
 800806a:	4613      	mov	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	1a9b      	subs	r3, r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	3338      	adds	r3, #56	; 0x38
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	705a      	strb	r2, [r3, #1]
 8008082:	e00d      	b.n	80080a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	4613      	mov	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_PCD_EP_SetStall+0x82>
 80080bc:	2302      	movs	r3, #2
 80080be:	e01e      	b.n	80080fe <HAL_PCD_EP_SetStall+0xc0>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68f9      	ldr	r1, [r7, #12]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 f8ef 	bl	800b2b2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	b2d9      	uxtb	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080ee:	461a      	mov	r2, r3
 80080f0:	f003 fae0 	bl	800b6b4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d901      	bls.n	8008124 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e042      	b.n	80081aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008128:	2b00      	cmp	r3, #0
 800812a:	da0f      	bge.n	800814c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 020f 	and.w	r2, r3, #15
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	3338      	adds	r3, #56	; 0x38
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	3304      	adds	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	705a      	strb	r2, [r3, #1]
 800814a:	e00f      	b.n	800816c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	f003 020f 	and.w	r2, r3, #15
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	3304      	adds	r3, #4
 8008164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	b2da      	uxtb	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_PCD_EP_ClrStall+0x86>
 8008188:	2302      	movs	r3, #2
 800818a:	e00e      	b.n	80081aa <HAL_PCD_EP_ClrStall+0xa4>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	4618      	mov	r0, r3
 800819c:	f003 f8f7 	bl	800b38e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08a      	sub	sp, #40	; 0x28
 80081b6:	af02      	add	r7, sp, #8
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	3338      	adds	r3, #56	; 0x38
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d901      	bls.n	80081ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e06c      	b.n	80082c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d902      	bls.n	8008206 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3303      	adds	r3, #3
 800820a:	089b      	lsrs	r3, r3, #2
 800820c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800820e:	e02b      	b.n	8008268 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	429a      	cmp	r2, r3
 8008224:	d902      	bls.n	800822c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	3303      	adds	r3, #3
 8008230:	089b      	lsrs	r3, r3, #2
 8008232:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68d9      	ldr	r1, [r3, #12]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008244:	b2db      	uxtb	r3, r3
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4603      	mov	r3, r0
 800824a:	6978      	ldr	r0, [r7, #20]
 800824c:	f002 ffd3 	bl	800b1f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	441a      	add	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	441a      	add	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	b29b      	uxth	r3, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	429a      	cmp	r2, r3
 800827c:	d809      	bhi.n	8008292 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008286:	429a      	cmp	r2, r3
 8008288:	d203      	bcs.n	8008292 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1be      	bne.n	8008210 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d811      	bhi.n	80082c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2201      	movs	r2, #1
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	43db      	mvns	r3, r3
 80082b8:	6939      	ldr	r1, [r7, #16]
 80082ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082be:	4013      	ands	r3, r2
 80082c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	333c      	adds	r3, #60	; 0x3c
 80082e4:	3304      	adds	r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	f040 80b3 	bne.w	800846a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d028      	beq.n	8008360 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a70      	ldr	r2, [pc, #448]	; (80084d4 <PCD_EP_OutXfrComplete_int+0x208>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d90e      	bls.n	8008334 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832c:	461a      	mov	r2, r3
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f007 ff5d 	bl	80101f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008344:	461a      	mov	r2, r3
 8008346:	2101      	movs	r1, #1
 8008348:	f003 f9b4 	bl	800b6b4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	461a      	mov	r2, r3
 800835a:	2308      	movs	r3, #8
 800835c:	6093      	str	r3, [r2, #8]
 800835e:	e0b3      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008376:	461a      	mov	r2, r3
 8008378:	2320      	movs	r3, #32
 800837a:	6093      	str	r3, [r2, #8]
 800837c:	e0a4      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 809f 	bne.w	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4a51      	ldr	r2, [pc, #324]	; (80084d4 <PCD_EP_OutXfrComplete_int+0x208>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d90f      	bls.n	80083b2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	461a      	mov	r2, r3
 80083aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ae:	6093      	str	r3, [r2, #8]
 80083b0:	e08a      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	4613      	mov	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083c4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	0159      	lsls	r1, r3, #5
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80083d8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4403      	add	r3, r0
 80083e8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083ec:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	4613      	mov	r3, r2
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	4613      	mov	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4403      	add	r3, r0
 8008410:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4419      	add	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4613      	mov	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4403      	add	r3, r0
 8008426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800842a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f007 fef0 	bl	8010218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d144      	bne.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d138      	bne.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008460:	461a      	mov	r2, r3
 8008462:	2101      	movs	r1, #1
 8008464:	f003 f926 	bl	800b6b4 <USB_EP0_OutStart>
 8008468:	e02e      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4a1a      	ldr	r2, [pc, #104]	; (80084d8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d124      	bne.n	80084bc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00a      	beq.n	8008492 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	461a      	mov	r2, r3
 800848a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848e:	6093      	str	r3, [r2, #8]
 8008490:	e01a      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	461a      	mov	r2, r3
 80084aa:	2320      	movs	r3, #32
 80084ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f007 feaf 	bl	8010218 <HAL_PCD_DataOutStageCallback>
 80084ba:	e005      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f007 fea8 	bl	8010218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	4f54300a 	.word	0x4f54300a
 80084d8:	4f54310a 	.word	0x4f54310a

080084dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	333c      	adds	r3, #60	; 0x3c
 80084f4:	3304      	adds	r3, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d113      	bne.n	800853a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <PCD_EP_OutSetupPacket_int+0xb8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d922      	bls.n	8008560 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01d      	beq.n	8008560 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008536:	6093      	str	r3, [r2, #8]
 8008538:	e012      	b.n	8008560 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a16      	ldr	r2, [pc, #88]	; (8008598 <PCD_EP_OutSetupPacket_int+0xbc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d10e      	bne.n	8008560 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	461a      	mov	r2, r3
 800855a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f007 fe47 	bl	80101f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a0a      	ldr	r2, [pc, #40]	; (8008594 <PCD_EP_OutSetupPacket_int+0xb8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d90c      	bls.n	8008588 <PCD_EP_OutSetupPacket_int+0xac>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d108      	bne.n	8008588 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008580:	461a      	mov	r2, r3
 8008582:	2101      	movs	r1, #1
 8008584:	f003 f896 	bl	800b6b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	4f54300a 	.word	0x4f54300a
 8008598:	4f54310a 	.word	0x4f54310a

0800859c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
 80085a8:	4613      	mov	r3, r2
 80085aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d107      	bne.n	80085ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80085ba:	883b      	ldrh	r3, [r7, #0]
 80085bc:	0419      	lsls	r1, r3, #16
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28
 80085c8:	e028      	b.n	800861c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	0c1b      	lsrs	r3, r3, #16
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
 80085dc:	e00d      	b.n	80085fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	3340      	adds	r3, #64	; 0x40
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	3301      	adds	r3, #1
 80085f8:	73fb      	strb	r3, [r7, #15]
 80085fa:	7bfa      	ldrb	r2, [r7, #15]
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	3b01      	subs	r3, #1
 8008600:	429a      	cmp	r2, r3
 8008602:	d3ec      	bcc.n	80085de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008604:	883b      	ldrh	r3, [r7, #0]
 8008606:	0418      	lsls	r0, r3, #16
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	3b01      	subs	r3, #1
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	4302      	orrs	r2, r0
 8008614:	3340      	adds	r3, #64	; 0x40
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	887a      	ldrh	r2, [r7, #2]
 800863c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e25b      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d075      	beq.n	800876e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008682:	4ba3      	ldr	r3, [pc, #652]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 030c 	and.w	r3, r3, #12
 800868a:	2b04      	cmp	r3, #4
 800868c:	d00c      	beq.n	80086a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800868e:	4ba0      	ldr	r3, [pc, #640]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008696:	2b08      	cmp	r3, #8
 8008698:	d112      	bne.n	80086c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800869a:	4b9d      	ldr	r3, [pc, #628]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a6:	d10b      	bne.n	80086c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a8:	4b99      	ldr	r3, [pc, #612]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d05b      	beq.n	800876c <HAL_RCC_OscConfig+0x108>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d157      	bne.n	800876c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e236      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c8:	d106      	bne.n	80086d8 <HAL_RCC_OscConfig+0x74>
 80086ca:	4b91      	ldr	r3, [pc, #580]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a90      	ldr	r2, [pc, #576]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	e01d      	b.n	8008714 <HAL_RCC_OscConfig+0xb0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086e0:	d10c      	bne.n	80086fc <HAL_RCC_OscConfig+0x98>
 80086e2:	4b8b      	ldr	r3, [pc, #556]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a8a      	ldr	r2, [pc, #552]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	4b88      	ldr	r3, [pc, #544]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a87      	ldr	r2, [pc, #540]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e00b      	b.n	8008714 <HAL_RCC_OscConfig+0xb0>
 80086fc:	4b84      	ldr	r3, [pc, #528]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a83      	ldr	r2, [pc, #524]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	4b81      	ldr	r3, [pc, #516]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a80      	ldr	r2, [pc, #512]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 800870e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d013      	beq.n	8008744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800871c:	f7fd ffd0 	bl	80066c0 <HAL_GetTick>
 8008720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008724:	f7fd ffcc 	bl	80066c0 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b64      	cmp	r3, #100	; 0x64
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e1fb      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008736:	4b76      	ldr	r3, [pc, #472]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0xc0>
 8008742:	e014      	b.n	800876e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008744:	f7fd ffbc 	bl	80066c0 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800874c:	f7fd ffb8 	bl	80066c0 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b64      	cmp	r3, #100	; 0x64
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e1e7      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800875e:	4b6c      	ldr	r3, [pc, #432]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0xe8>
 800876a:	e000      	b.n	800876e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d063      	beq.n	8008842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800877a:	4b65      	ldr	r3, [pc, #404]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 030c 	and.w	r3, r3, #12
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00b      	beq.n	800879e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008786:	4b62      	ldr	r3, [pc, #392]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800878e:	2b08      	cmp	r3, #8
 8008790:	d11c      	bne.n	80087cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008792:	4b5f      	ldr	r3, [pc, #380]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d116      	bne.n	80087cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800879e:	4b5c      	ldr	r3, [pc, #368]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <HAL_RCC_OscConfig+0x152>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d001      	beq.n	80087b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e1bb      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b6:	4b56      	ldr	r3, [pc, #344]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4952      	ldr	r1, [pc, #328]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ca:	e03a      	b.n	8008842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d020      	beq.n	8008816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087d4:	4b4f      	ldr	r3, [pc, #316]	; (8008914 <HAL_RCC_OscConfig+0x2b0>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087da:	f7fd ff71 	bl	80066c0 <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087e2:	f7fd ff6d 	bl	80066c0 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e19c      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087f4:	4b46      	ldr	r3, [pc, #280]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008800:	4b43      	ldr	r3, [pc, #268]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	4940      	ldr	r1, [pc, #256]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008810:	4313      	orrs	r3, r2
 8008812:	600b      	str	r3, [r1, #0]
 8008814:	e015      	b.n	8008842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008816:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <HAL_RCC_OscConfig+0x2b0>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fd ff50 	bl	80066c0 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008824:	f7fd ff4c 	bl	80066c0 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e17b      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008836:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d030      	beq.n	80088b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d016      	beq.n	8008884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008856:	4b30      	ldr	r3, [pc, #192]	; (8008918 <HAL_RCC_OscConfig+0x2b4>)
 8008858:	2201      	movs	r2, #1
 800885a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885c:	f7fd ff30 	bl	80066c0 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008864:	f7fd ff2c 	bl	80066c0 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e15b      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008876:	4b26      	ldr	r3, [pc, #152]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 8008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f0      	beq.n	8008864 <HAL_RCC_OscConfig+0x200>
 8008882:	e015      	b.n	80088b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008884:	4b24      	ldr	r3, [pc, #144]	; (8008918 <HAL_RCC_OscConfig+0x2b4>)
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800888a:	f7fd ff19 	bl	80066c0 <HAL_GetTick>
 800888e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008892:	f7fd ff15 	bl	80066c0 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e144      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088a4:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80088a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f0      	bne.n	8008892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80a0 	beq.w	80089fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088c2:	4b13      	ldr	r3, [pc, #76]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10f      	bne.n	80088ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ce:	2300      	movs	r3, #0
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80088d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088dc:	6413      	str	r3, [r2, #64]	; 0x40
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_RCC_OscConfig+0x2ac>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ea:	2301      	movs	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <HAL_RCC_OscConfig+0x2b8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d121      	bne.n	800893e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088fa:	4b08      	ldr	r3, [pc, #32]	; (800891c <HAL_RCC_OscConfig+0x2b8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <HAL_RCC_OscConfig+0x2b8>)
 8008900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008906:	f7fd fedb 	bl	80066c0 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800890c:	e011      	b.n	8008932 <HAL_RCC_OscConfig+0x2ce>
 800890e:	bf00      	nop
 8008910:	40023800 	.word	0x40023800
 8008914:	42470000 	.word	0x42470000
 8008918:	42470e80 	.word	0x42470e80
 800891c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008920:	f7fd fece 	bl	80066c0 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e0fd      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008932:	4b81      	ldr	r3, [pc, #516]	; (8008b38 <HAL_RCC_OscConfig+0x4d4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f0      	beq.n	8008920 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d106      	bne.n	8008954 <HAL_RCC_OscConfig+0x2f0>
 8008946:	4b7d      	ldr	r3, [pc, #500]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	4a7c      	ldr	r2, [pc, #496]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6713      	str	r3, [r2, #112]	; 0x70
 8008952:	e01c      	b.n	800898e <HAL_RCC_OscConfig+0x32a>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b05      	cmp	r3, #5
 800895a:	d10c      	bne.n	8008976 <HAL_RCC_OscConfig+0x312>
 800895c:	4b77      	ldr	r3, [pc, #476]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	4a76      	ldr	r2, [pc, #472]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008962:	f043 0304 	orr.w	r3, r3, #4
 8008966:	6713      	str	r3, [r2, #112]	; 0x70
 8008968:	4b74      	ldr	r3, [pc, #464]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	4a73      	ldr	r2, [pc, #460]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 800896e:	f043 0301 	orr.w	r3, r3, #1
 8008972:	6713      	str	r3, [r2, #112]	; 0x70
 8008974:	e00b      	b.n	800898e <HAL_RCC_OscConfig+0x32a>
 8008976:	4b71      	ldr	r3, [pc, #452]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897a:	4a70      	ldr	r2, [pc, #448]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	6713      	str	r3, [r2, #112]	; 0x70
 8008982:	4b6e      	ldr	r3, [pc, #440]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	4a6d      	ldr	r2, [pc, #436]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008988:	f023 0304 	bic.w	r3, r3, #4
 800898c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d015      	beq.n	80089c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008996:	f7fd fe93 	bl	80066c0 <HAL_GetTick>
 800899a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800899c:	e00a      	b.n	80089b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800899e:	f7fd fe8f 	bl	80066c0 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e0bc      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b4:	4b61      	ldr	r3, [pc, #388]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 80089b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0ee      	beq.n	800899e <HAL_RCC_OscConfig+0x33a>
 80089c0:	e014      	b.n	80089ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089c2:	f7fd fe7d 	bl	80066c0 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089c8:	e00a      	b.n	80089e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ca:	f7fd fe79 	bl	80066c0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d8:	4293      	cmp	r3, r2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e0a6      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089e0:	4b56      	ldr	r3, [pc, #344]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1ee      	bne.n	80089ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d105      	bne.n	80089fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089f2:	4b52      	ldr	r3, [pc, #328]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	4a51      	ldr	r2, [pc, #324]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 80089f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8092 	beq.w	8008b2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a08:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 030c 	and.w	r3, r3, #12
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d05c      	beq.n	8008ace <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d141      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1c:	4b48      	ldr	r3, [pc, #288]	; (8008b40 <HAL_RCC_OscConfig+0x4dc>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a22:	f7fd fe4d 	bl	80066c0 <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a28:	e008      	b.n	8008a3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a2a:	f7fd fe49 	bl	80066c0 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e078      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3c:	4b3f      	ldr	r3, [pc, #252]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f0      	bne.n	8008a2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	019b      	lsls	r3, r3, #6
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	3b01      	subs	r3, #1
 8008a62:	041b      	lsls	r3, r3, #16
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	4933      	ldr	r1, [pc, #204]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a72:	4b33      	ldr	r3, [pc, #204]	; (8008b40 <HAL_RCC_OscConfig+0x4dc>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a78:	f7fd fe22 	bl	80066c0 <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a80:	f7fd fe1e 	bl	80066c0 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e04d      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a92:	4b2a      	ldr	r3, [pc, #168]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x41c>
 8008a9e:	e045      	b.n	8008b2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa0:	4b27      	ldr	r3, [pc, #156]	; (8008b40 <HAL_RCC_OscConfig+0x4dc>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa6:	f7fd fe0b 	bl	80066c0 <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aae:	f7fd fe07 	bl	80066c0 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e036      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ac0:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f0      	bne.n	8008aae <HAL_RCC_OscConfig+0x44a>
 8008acc:	e02e      	b.n	8008b2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e029      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ada:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <HAL_RCC_OscConfig+0x4d8>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d11c      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d115      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b02:	4013      	ands	r3, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d10d      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d106      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d001      	beq.n	8008b2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40007000 	.word	0x40007000
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	42470060 	.word	0x42470060

08008b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e0cc      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b58:	4b68      	ldr	r3, [pc, #416]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d90c      	bls.n	8008b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b66:	4b65      	ldr	r3, [pc, #404]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	4b63      	ldr	r3, [pc, #396]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e0b8      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d020      	beq.n	8008bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b98:	4b59      	ldr	r3, [pc, #356]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4a58      	ldr	r2, [pc, #352]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bb0:	4b53      	ldr	r3, [pc, #332]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4a52      	ldr	r2, [pc, #328]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bbc:	4b50      	ldr	r3, [pc, #320]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	494d      	ldr	r1, [pc, #308]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d044      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be2:	4b47      	ldr	r3, [pc, #284]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d119      	bne.n	8008c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e07f      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d003      	beq.n	8008c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d107      	bne.n	8008c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c02:	4b3f      	ldr	r3, [pc, #252]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e06f      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c12:	4b3b      	ldr	r3, [pc, #236]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e067      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c22:	4b37      	ldr	r3, [pc, #220]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f023 0203 	bic.w	r2, r3, #3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4934      	ldr	r1, [pc, #208]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c34:	f7fd fd44 	bl	80066c0 <HAL_GetTick>
 8008c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c3a:	e00a      	b.n	8008c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c3c:	f7fd fd40 	bl	80066c0 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e04f      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c52:	4b2b      	ldr	r3, [pc, #172]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 020c 	and.w	r2, r3, #12
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d1eb      	bne.n	8008c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d20c      	bcs.n	8008c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7a:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <HAL_RCC_ClockConfig+0x1b8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e032      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c98:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	4916      	ldr	r1, [pc, #88]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	490e      	ldr	r1, [pc, #56]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cca:	f000 f821 	bl	8008d10 <HAL_RCC_GetSysClockFreq>
 8008cce:	4601      	mov	r1, r0
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	091b      	lsrs	r3, r3, #4
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	4a0a      	ldr	r2, [pc, #40]	; (8008d04 <HAL_RCC_ClockConfig+0x1c0>)
 8008cdc:	5cd3      	ldrb	r3, [r2, r3]
 8008cde:	fa21 f303 	lsr.w	r3, r1, r3
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <HAL_RCC_ClockConfig+0x1c4>)
 8008ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <HAL_RCC_ClockConfig+0x1c8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fd fac0 	bl	8006270 <HAL_InitTick>

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40023c00 	.word	0x40023c00
 8008d00:	40023800 	.word	0x40023800
 8008d04:	08015f54 	.word	0x08015f54
 8008d08:	20000cb4 	.word	0x20000cb4
 8008d0c:	20000cb8 	.word	0x20000cb8

08008d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d26:	4b63      	ldr	r3, [pc, #396]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d007      	beq.n	8008d42 <HAL_RCC_GetSysClockFreq+0x32>
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d008      	beq.n	8008d48 <HAL_RCC_GetSysClockFreq+0x38>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 80b4 	bne.w	8008ea4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d3c:	4b5e      	ldr	r3, [pc, #376]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008d3e:	60bb      	str	r3, [r7, #8]
       break;
 8008d40:	e0b3      	b.n	8008eaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d42:	4b5e      	ldr	r3, [pc, #376]	; (8008ebc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008d44:	60bb      	str	r3, [r7, #8]
      break;
 8008d46:	e0b0      	b.n	8008eaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d48:	4b5a      	ldr	r3, [pc, #360]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d52:	4b58      	ldr	r3, [pc, #352]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d04a      	beq.n	8008df4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d5e:	4b55      	ldr	r3, [pc, #340]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	099b      	lsrs	r3, r3, #6
 8008d64:	f04f 0400 	mov.w	r4, #0
 8008d68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	ea03 0501 	and.w	r5, r3, r1
 8008d74:	ea04 0602 	and.w	r6, r4, r2
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	f04f 0400 	mov.w	r4, #0
 8008d84:	0154      	lsls	r4, r2, #5
 8008d86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d8a:	014b      	lsls	r3, r1, #5
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4622      	mov	r2, r4
 8008d90:	1b49      	subs	r1, r1, r5
 8008d92:	eb62 0206 	sbc.w	r2, r2, r6
 8008d96:	f04f 0300 	mov.w	r3, #0
 8008d9a:	f04f 0400 	mov.w	r4, #0
 8008d9e:	0194      	lsls	r4, r2, #6
 8008da0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008da4:	018b      	lsls	r3, r1, #6
 8008da6:	1a5b      	subs	r3, r3, r1
 8008da8:	eb64 0402 	sbc.w	r4, r4, r2
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	00e2      	lsls	r2, r4, #3
 8008db6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008dba:	00d9      	lsls	r1, r3, #3
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4614      	mov	r4, r2
 8008dc0:	195b      	adds	r3, r3, r5
 8008dc2:	eb44 0406 	adc.w	r4, r4, r6
 8008dc6:	f04f 0100 	mov.w	r1, #0
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	0262      	lsls	r2, r4, #9
 8008dd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008dd4:	0259      	lsls	r1, r3, #9
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4614      	mov	r4, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	4621      	mov	r1, r4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f04f 0400 	mov.w	r4, #0
 8008de4:	461a      	mov	r2, r3
 8008de6:	4623      	mov	r3, r4
 8008de8:	f7f7 ff5e 	bl	8000ca8 <__aeabi_uldivmod>
 8008dec:	4603      	mov	r3, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	e049      	b.n	8008e88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008df4:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	099b      	lsrs	r3, r3, #6
 8008dfa:	f04f 0400 	mov.w	r4, #0
 8008dfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	ea03 0501 	and.w	r5, r3, r1
 8008e0a:	ea04 0602 	and.w	r6, r4, r2
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4632      	mov	r2, r6
 8008e12:	f04f 0300 	mov.w	r3, #0
 8008e16:	f04f 0400 	mov.w	r4, #0
 8008e1a:	0154      	lsls	r4, r2, #5
 8008e1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008e20:	014b      	lsls	r3, r1, #5
 8008e22:	4619      	mov	r1, r3
 8008e24:	4622      	mov	r2, r4
 8008e26:	1b49      	subs	r1, r1, r5
 8008e28:	eb62 0206 	sbc.w	r2, r2, r6
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f04f 0400 	mov.w	r4, #0
 8008e34:	0194      	lsls	r4, r2, #6
 8008e36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008e3a:	018b      	lsls	r3, r1, #6
 8008e3c:	1a5b      	subs	r3, r3, r1
 8008e3e:	eb64 0402 	sbc.w	r4, r4, r2
 8008e42:	f04f 0100 	mov.w	r1, #0
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	00e2      	lsls	r2, r4, #3
 8008e4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e50:	00d9      	lsls	r1, r3, #3
 8008e52:	460b      	mov	r3, r1
 8008e54:	4614      	mov	r4, r2
 8008e56:	195b      	adds	r3, r3, r5
 8008e58:	eb44 0406 	adc.w	r4, r4, r6
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	02a2      	lsls	r2, r4, #10
 8008e66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008e6a:	0299      	lsls	r1, r3, #10
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4614      	mov	r4, r2
 8008e70:	4618      	mov	r0, r3
 8008e72:	4621      	mov	r1, r4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f04f 0400 	mov.w	r4, #0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	f7f7 ff13 	bl	8000ca8 <__aeabi_uldivmod>
 8008e82:	4603      	mov	r3, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	0c1b      	lsrs	r3, r3, #16
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	3301      	adds	r3, #1
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea0:	60bb      	str	r3, [r7, #8]
      break;
 8008ea2:	e002      	b.n	8008eaa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ea4:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008ea6:	60bb      	str	r3, [r7, #8]
      break;
 8008ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	00f42400 	.word	0x00f42400
 8008ebc:	007a1200 	.word	0x007a1200

08008ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ec4:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000cb4 	.word	0x20000cb4

08008ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008edc:	f7ff fff0 	bl	8008ec0 <HAL_RCC_GetHCLKFreq>
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	0a9b      	lsrs	r3, r3, #10
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	4a03      	ldr	r2, [pc, #12]	; (8008efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eee:	5cd3      	ldrb	r3, [r2, r3]
 8008ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	40023800 	.word	0x40023800
 8008efc:	08015f64 	.word	0x08015f64

08008f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f04:	f7ff ffdc 	bl	8008ec0 <HAL_RCC_GetHCLKFreq>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	0b5b      	lsrs	r3, r3, #13
 8008f10:	f003 0307 	and.w	r3, r3, #7
 8008f14:	4a03      	ldr	r2, [pc, #12]	; (8008f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f16:	5cd3      	ldrb	r3, [r2, r3]
 8008f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	40023800 	.word	0x40023800
 8008f24:	08015f64 	.word	0x08015f64

08008f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	220f      	movs	r2, #15
 8008f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f38:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <HAL_RCC_GetClockConfig+0x5c>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0203 	and.w	r2, r3, #3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <HAL_RCC_GetClockConfig+0x5c>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <HAL_RCC_GetClockConfig+0x5c>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <HAL_RCC_GetClockConfig+0x5c>)
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	08db      	lsrs	r3, r3, #3
 8008f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <HAL_RCC_GetClockConfig+0x60>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 020f 	and.w	r2, r3, #15
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	601a      	str	r2, [r3, #0]
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40023c00 	.word	0x40023c00

08008f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e01d      	b.n	8008fda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f815 	bl	8008fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f000 f968 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0201 	orr.w	r2, r2, #1
 800900c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b06      	cmp	r3, #6
 800901e:	d007      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0201 	orr.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b02      	cmp	r3, #2
 8009052:	d122      	bne.n	800909a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b02      	cmp	r3, #2
 8009060:	d11b      	bne.n	800909a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f06f 0202 	mvn.w	r2, #2
 800906a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f8ee 	bl	8009262 <HAL_TIM_IC_CaptureCallback>
 8009086:	e005      	b.n	8009094 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8e0 	bl	800924e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f8f1 	bl	8009276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d122      	bne.n	80090ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d11b      	bne.n	80090ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f06f 0204 	mvn.w	r2, #4
 80090be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f8c4 	bl	8009262 <HAL_TIM_IC_CaptureCallback>
 80090da:	e005      	b.n	80090e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8b6 	bl	800924e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f8c7 	bl	8009276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d122      	bne.n	8009142 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b08      	cmp	r3, #8
 8009108:	d11b      	bne.n	8009142 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f06f 0208 	mvn.w	r2, #8
 8009112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2204      	movs	r2, #4
 8009118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f89a 	bl	8009262 <HAL_TIM_IC_CaptureCallback>
 800912e:	e005      	b.n	800913c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f88c 	bl	800924e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f89d 	bl	8009276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b10      	cmp	r3, #16
 800914e:	d122      	bne.n	8009196 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b10      	cmp	r3, #16
 800915c:	d11b      	bne.n	8009196 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f06f 0210 	mvn.w	r2, #16
 8009166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2208      	movs	r2, #8
 800916c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f870 	bl	8009262 <HAL_TIM_IC_CaptureCallback>
 8009182:	e005      	b.n	8009190 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f862 	bl	800924e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f873 	bl	8009276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d10e      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d107      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f06f 0201 	mvn.w	r2, #1
 80091ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7f9 fd7f 	bl	8002cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091cc:	2b80      	cmp	r3, #128	; 0x80
 80091ce:	d10e      	bne.n	80091ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091da:	2b80      	cmp	r3, #128	; 0x80
 80091dc:	d107      	bne.n	80091ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f903 	bl	80093f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f8:	2b40      	cmp	r3, #64	; 0x40
 80091fa:	d10e      	bne.n	800921a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009206:	2b40      	cmp	r3, #64	; 0x40
 8009208:	d107      	bne.n	800921a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f838 	bl	800928a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b20      	cmp	r3, #32
 8009226:	d10e      	bne.n	8009246 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b20      	cmp	r3, #32
 8009234:	d107      	bne.n	8009246 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f06f 0220 	mvn.w	r2, #32
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f8cd 	bl	80093e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a40      	ldr	r2, [pc, #256]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d013      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092be:	d00f      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a3d      	ldr	r2, [pc, #244]	; (80093b8 <TIM_Base_SetConfig+0x118>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a3c      	ldr	r2, [pc, #240]	; (80093bc <TIM_Base_SetConfig+0x11c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a3b      	ldr	r2, [pc, #236]	; (80093c0 <TIM_Base_SetConfig+0x120>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a3a      	ldr	r2, [pc, #232]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d108      	bne.n	80092f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2f      	ldr	r2, [pc, #188]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d02b      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009300:	d027      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a2c      	ldr	r2, [pc, #176]	; (80093b8 <TIM_Base_SetConfig+0x118>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d023      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a2b      	ldr	r2, [pc, #172]	; (80093bc <TIM_Base_SetConfig+0x11c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d01f      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <TIM_Base_SetConfig+0x120>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d01b      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a29      	ldr	r2, [pc, #164]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d017      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <TIM_Base_SetConfig+0x128>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d013      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <TIM_Base_SetConfig+0x12c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00f      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <TIM_Base_SetConfig+0x130>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d00b      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a25      	ldr	r2, [pc, #148]	; (80093d4 <TIM_Base_SetConfig+0x134>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d007      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a24      	ldr	r2, [pc, #144]	; (80093d8 <TIM_Base_SetConfig+0x138>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d003      	beq.n	8009352 <TIM_Base_SetConfig+0xb2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a23      	ldr	r2, [pc, #140]	; (80093dc <TIM_Base_SetConfig+0x13c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d108      	bne.n	8009364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a0a      	ldr	r2, [pc, #40]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d103      	bne.n	80093a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	615a      	str	r2, [r3, #20]
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40000400 	.word	0x40000400
 80093bc:	40000800 	.word	0x40000800
 80093c0:	40000c00 	.word	0x40000c00
 80093c4:	40010400 	.word	0x40010400
 80093c8:	40014000 	.word	0x40014000
 80093cc:	40014400 	.word	0x40014400
 80093d0:	40014800 	.word	0x40014800
 80093d4:	40001800 	.word	0x40001800
 80093d8:	40001c00 	.word	0x40001c00
 80093dc:	40002000 	.word	0x40002000

080093e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e03f      	b.n	800949a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fd f83c 	bl	80064ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2224      	movs	r2, #36	; 0x24
 8009438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800944a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb6b 	bl	8009b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691a      	ldr	r2, [r3, #16]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	d153      	bne.n	8009566 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <HAL_UART_Transmit_DMA+0x26>
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e04c      	b.n	8009568 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <HAL_UART_Transmit_DMA+0x38>
 80094d8:	2302      	movs	r3, #2
 80094da:	e045      	b.n	8009568 <HAL_UART_Transmit_DMA+0xc4>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	88fa      	ldrh	r2, [r7, #6]
 80094f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2221      	movs	r2, #33	; 0x21
 8009500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	4a19      	ldr	r2, [pc, #100]	; (8009570 <HAL_UART_Transmit_DMA+0xcc>)
 800950a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_UART_Transmit_DMA+0xd0>)
 8009512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	4a17      	ldr	r2, [pc, #92]	; (8009578 <HAL_UART_Transmit_DMA+0xd4>)
 800951a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	2200      	movs	r2, #0
 8009522:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3304      	adds	r3, #4
 8009538:	461a      	mov	r2, r3
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	f7fd fa7e 	bl	8006a3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009548:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695a      	ldr	r2, [r3, #20]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009560:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	e000      	b.n	8009568 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009566:	2302      	movs	r3, #2
  }
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	080097b9 	.word	0x080097b9
 8009574:	0800980b 	.word	0x0800980b
 8009578:	08009827 	.word	0x08009827

0800957c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800959c:	2300      	movs	r3, #0
 800959e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10d      	bne.n	80095ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d008      	beq.n	80095ce <HAL_UART_IRQHandler+0x52>
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa2d 	bl	8009a26 <UART_Receive_IT>
      return;
 80095cc:	e0d1      	b.n	8009772 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80b0 	beq.w	8009736 <HAL_UART_IRQHandler+0x1ba>
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <HAL_UART_IRQHandler+0x70>
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 80a5 	beq.w	8009736 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <HAL_UART_IRQHandler+0x90>
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009604:	f043 0201 	orr.w	r2, r3, #1
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <HAL_UART_IRQHandler+0xb0>
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009624:	f043 0202 	orr.w	r2, r3, #2
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <HAL_UART_IRQHandler+0xd0>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009644:	f043 0204 	orr.w	r2, r3, #4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00f      	beq.n	8009676 <HAL_UART_IRQHandler+0xfa>
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <HAL_UART_IRQHandler+0xee>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	f043 0208 	orr.w	r2, r3, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d078      	beq.n	8009770 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d007      	beq.n	8009698 <HAL_UART_IRQHandler+0x11c>
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f9c7 	bl	8009a26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <HAL_UART_IRQHandler+0x144>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d031      	beq.n	8009724 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f910 	bl	80098e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	d123      	bne.n	800971c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d013      	beq.n	8009714 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f0:	4a21      	ldr	r2, [pc, #132]	; (8009778 <HAL_UART_IRQHandler+0x1fc>)
 80096f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd f9f7 	bl	8006aec <HAL_DMA_Abort_IT>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d016      	beq.n	8009732 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800970e:	4610      	mov	r0, r2
 8009710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009712:	e00e      	b.n	8009732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f845 	bl	80097a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971a:	e00a      	b.n	8009732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f841 	bl	80097a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009722:	e006      	b.n	8009732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f83d 	bl	80097a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009730:	e01e      	b.n	8009770 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009732:	bf00      	nop
    return;
 8009734:	e01c      	b.n	8009770 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_UART_IRQHandler+0x1d6>
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8fd 	bl	800994a <UART_Transmit_IT>
    return;
 8009750:	e00f      	b.n	8009772 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <HAL_UART_IRQHandler+0x1f6>
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f945 	bl	80099f6 <UART_EndTransmit_IT>
    return;
 800976c:	bf00      	nop
 800976e:	e000      	b.n	8009772 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009770:	bf00      	nop
  }
}
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	08009923 	.word	0x08009923

0800977c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d113      	bne.n	80097fc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695a      	ldr	r2, [r3, #20]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097fa:	e002      	b.n	8009802 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7fc fed7 	bl	80065b0 <HAL_UART_TxCpltCallback>
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff ffaf 	bl	800977c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	bf0c      	ite	eq
 8009846:	2301      	moveq	r3, #1
 8009848:	2300      	movne	r3, #0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b21      	cmp	r3, #33	; 0x21
 8009858:	d108      	bne.n	800986c <UART_DMAError+0x46>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009866:	68b8      	ldr	r0, [r7, #8]
 8009868:	f000 f827 	bl	80098ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	bf0c      	ite	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	2300      	movne	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b22      	cmp	r3, #34	; 0x22
 800988c:	d108      	bne.n	80098a0 <UART_DMAError+0x7a>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800989a:	68b8      	ldr	r0, [r7, #8]
 800989c:	f000 f823 	bl	80098e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	f043 0210 	orr.w	r2, r3, #16
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ac:	68b8      	ldr	r0, [r7, #8]
 80098ae:	f7ff ff79 	bl	80097a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80098d0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695a      	ldr	r2, [r3, #20]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0201 	bic.w	r2, r2, #1
 800990c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff ff31 	bl	80097a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800994a:	b480      	push	{r7}
 800994c:	b085      	sub	sp, #20
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b21      	cmp	r3, #33	; 0x21
 800995c:	d144      	bne.n	80099e8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009966:	d11a      	bne.n	800999e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800997c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d105      	bne.n	8009992 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	1c9a      	adds	r2, r3, #2
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	621a      	str	r2, [r3, #32]
 8009990:	e00e      	b.n	80099b0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	1c5a      	adds	r2, r3, #1
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	621a      	str	r2, [r3, #32]
 800999c:	e008      	b.n	80099b0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6211      	str	r1, [r2, #32]
 80099a8:	781a      	ldrb	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	4619      	mov	r1, r3
 80099be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10f      	bne.n	80099e4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fc fdca 	bl	80065b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b22      	cmp	r3, #34	; 0x22
 8009a38:	d171      	bne.n	8009b1e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a42:	d123      	bne.n	8009a8c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10e      	bne.n	8009a70 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	1c9a      	adds	r2, r3, #2
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8009a6e:	e029      	b.n	8009ac4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	629a      	str	r2, [r3, #40]	; 0x28
 8009a8a:	e01b      	b.n	8009ac4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6858      	ldr	r0, [r3, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	1c59      	adds	r1, r3, #1
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	6291      	str	r1, [r2, #40]	; 0x28
 8009aa4:	b2c2      	uxtb	r2, r0
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e00c      	b.n	8009ac4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	1c58      	adds	r0, r3, #1
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	6288      	str	r0, [r1, #40]	; 0x28
 8009abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d120      	bne.n	8009b1a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0220 	bic.w	r2, r2, #32
 8009ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695a      	ldr	r2, [r3, #20]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0201 	bic.w	r2, r2, #1
 8009b06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff fe3d 	bl	8009790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e002      	b.n	8009b20 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e000      	b.n	8009b20 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009b1e:	2302      	movs	r3, #2
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b6a:	f023 030c 	bic.w	r3, r3, #12
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	6812      	ldr	r2, [r2, #0]
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	430b      	orrs	r3, r1
 8009b76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b96:	f040 818b 	bne.w	8009eb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4ac1      	ldr	r2, [pc, #772]	; (8009ea4 <UART_SetConfig+0x37c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d005      	beq.n	8009bb0 <UART_SetConfig+0x88>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4abf      	ldr	r2, [pc, #764]	; (8009ea8 <UART_SetConfig+0x380>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f040 80bd 	bne.w	8009d2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bb0:	f7ff f9a6 	bl	8008f00 <HAL_RCC_GetPCLK2Freq>
 8009bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	461d      	mov	r5, r3
 8009bba:	f04f 0600 	mov.w	r6, #0
 8009bbe:	46a8      	mov	r8, r5
 8009bc0:	46b1      	mov	r9, r6
 8009bc2:	eb18 0308 	adds.w	r3, r8, r8
 8009bc6:	eb49 0409 	adc.w	r4, r9, r9
 8009bca:	4698      	mov	r8, r3
 8009bcc:	46a1      	mov	r9, r4
 8009bce:	eb18 0805 	adds.w	r8, r8, r5
 8009bd2:	eb49 0906 	adc.w	r9, r9, r6
 8009bd6:	f04f 0100 	mov.w	r1, #0
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009bea:	4688      	mov	r8, r1
 8009bec:	4691      	mov	r9, r2
 8009bee:	eb18 0005 	adds.w	r0, r8, r5
 8009bf2:	eb49 0106 	adc.w	r1, r9, r6
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	461d      	mov	r5, r3
 8009bfc:	f04f 0600 	mov.w	r6, #0
 8009c00:	196b      	adds	r3, r5, r5
 8009c02:	eb46 0406 	adc.w	r4, r6, r6
 8009c06:	461a      	mov	r2, r3
 8009c08:	4623      	mov	r3, r4
 8009c0a:	f7f7 f84d 	bl	8000ca8 <__aeabi_uldivmod>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	460c      	mov	r4, r1
 8009c12:	461a      	mov	r2, r3
 8009c14:	4ba5      	ldr	r3, [pc, #660]	; (8009eac <UART_SetConfig+0x384>)
 8009c16:	fba3 2302 	umull	r2, r3, r3, r2
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	461d      	mov	r5, r3
 8009c24:	f04f 0600 	mov.w	r6, #0
 8009c28:	46a9      	mov	r9, r5
 8009c2a:	46b2      	mov	sl, r6
 8009c2c:	eb19 0309 	adds.w	r3, r9, r9
 8009c30:	eb4a 040a 	adc.w	r4, sl, sl
 8009c34:	4699      	mov	r9, r3
 8009c36:	46a2      	mov	sl, r4
 8009c38:	eb19 0905 	adds.w	r9, r9, r5
 8009c3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c40:	f04f 0100 	mov.w	r1, #0
 8009c44:	f04f 0200 	mov.w	r2, #0
 8009c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c54:	4689      	mov	r9, r1
 8009c56:	4692      	mov	sl, r2
 8009c58:	eb19 0005 	adds.w	r0, r9, r5
 8009c5c:	eb4a 0106 	adc.w	r1, sl, r6
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	461d      	mov	r5, r3
 8009c66:	f04f 0600 	mov.w	r6, #0
 8009c6a:	196b      	adds	r3, r5, r5
 8009c6c:	eb46 0406 	adc.w	r4, r6, r6
 8009c70:	461a      	mov	r2, r3
 8009c72:	4623      	mov	r3, r4
 8009c74:	f7f7 f818 	bl	8000ca8 <__aeabi_uldivmod>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b8b      	ldr	r3, [pc, #556]	; (8009eac <UART_SetConfig+0x384>)
 8009c80:	fba3 1302 	umull	r1, r3, r3, r2
 8009c84:	095b      	lsrs	r3, r3, #5
 8009c86:	2164      	movs	r1, #100	; 0x64
 8009c88:	fb01 f303 	mul.w	r3, r1, r3
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	3332      	adds	r3, #50	; 0x32
 8009c92:	4a86      	ldr	r2, [pc, #536]	; (8009eac <UART_SetConfig+0x384>)
 8009c94:	fba2 2303 	umull	r2, r3, r2, r3
 8009c98:	095b      	lsrs	r3, r3, #5
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ca0:	4498      	add	r8, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	f04f 0600 	mov.w	r6, #0
 8009caa:	46a9      	mov	r9, r5
 8009cac:	46b2      	mov	sl, r6
 8009cae:	eb19 0309 	adds.w	r3, r9, r9
 8009cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8009cb6:	4699      	mov	r9, r3
 8009cb8:	46a2      	mov	sl, r4
 8009cba:	eb19 0905 	adds.w	r9, r9, r5
 8009cbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cc2:	f04f 0100 	mov.w	r1, #0
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	4692      	mov	sl, r2
 8009cda:	eb19 0005 	adds.w	r0, r9, r5
 8009cde:	eb4a 0106 	adc.w	r1, sl, r6
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	f04f 0600 	mov.w	r6, #0
 8009cec:	196b      	adds	r3, r5, r5
 8009cee:	eb46 0406 	adc.w	r4, r6, r6
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	f7f6 ffd7 	bl	8000ca8 <__aeabi_uldivmod>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4b6a      	ldr	r3, [pc, #424]	; (8009eac <UART_SetConfig+0x384>)
 8009d02:	fba3 1302 	umull	r1, r3, r3, r2
 8009d06:	095b      	lsrs	r3, r3, #5
 8009d08:	2164      	movs	r1, #100	; 0x64
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	3332      	adds	r3, #50	; 0x32
 8009d14:	4a65      	ldr	r2, [pc, #404]	; (8009eac <UART_SetConfig+0x384>)
 8009d16:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	f003 0207 	and.w	r2, r3, #7
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4442      	add	r2, r8
 8009d26:	609a      	str	r2, [r3, #8]
 8009d28:	e26f      	b.n	800a20a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d2a:	f7ff f8d5 	bl	8008ed8 <HAL_RCC_GetPCLK1Freq>
 8009d2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	461d      	mov	r5, r3
 8009d34:	f04f 0600 	mov.w	r6, #0
 8009d38:	46a8      	mov	r8, r5
 8009d3a:	46b1      	mov	r9, r6
 8009d3c:	eb18 0308 	adds.w	r3, r8, r8
 8009d40:	eb49 0409 	adc.w	r4, r9, r9
 8009d44:	4698      	mov	r8, r3
 8009d46:	46a1      	mov	r9, r4
 8009d48:	eb18 0805 	adds.w	r8, r8, r5
 8009d4c:	eb49 0906 	adc.w	r9, r9, r6
 8009d50:	f04f 0100 	mov.w	r1, #0
 8009d54:	f04f 0200 	mov.w	r2, #0
 8009d58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d64:	4688      	mov	r8, r1
 8009d66:	4691      	mov	r9, r2
 8009d68:	eb18 0005 	adds.w	r0, r8, r5
 8009d6c:	eb49 0106 	adc.w	r1, r9, r6
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	461d      	mov	r5, r3
 8009d76:	f04f 0600 	mov.w	r6, #0
 8009d7a:	196b      	adds	r3, r5, r5
 8009d7c:	eb46 0406 	adc.w	r4, r6, r6
 8009d80:	461a      	mov	r2, r3
 8009d82:	4623      	mov	r3, r4
 8009d84:	f7f6 ff90 	bl	8000ca8 <__aeabi_uldivmod>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4b47      	ldr	r3, [pc, #284]	; (8009eac <UART_SetConfig+0x384>)
 8009d90:	fba3 2302 	umull	r2, r3, r3, r2
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	461d      	mov	r5, r3
 8009d9e:	f04f 0600 	mov.w	r6, #0
 8009da2:	46a9      	mov	r9, r5
 8009da4:	46b2      	mov	sl, r6
 8009da6:	eb19 0309 	adds.w	r3, r9, r9
 8009daa:	eb4a 040a 	adc.w	r4, sl, sl
 8009dae:	4699      	mov	r9, r3
 8009db0:	46a2      	mov	sl, r4
 8009db2:	eb19 0905 	adds.w	r9, r9, r5
 8009db6:	eb4a 0a06 	adc.w	sl, sl, r6
 8009dba:	f04f 0100 	mov.w	r1, #0
 8009dbe:	f04f 0200 	mov.w	r2, #0
 8009dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009dce:	4689      	mov	r9, r1
 8009dd0:	4692      	mov	sl, r2
 8009dd2:	eb19 0005 	adds.w	r0, r9, r5
 8009dd6:	eb4a 0106 	adc.w	r1, sl, r6
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	461d      	mov	r5, r3
 8009de0:	f04f 0600 	mov.w	r6, #0
 8009de4:	196b      	adds	r3, r5, r5
 8009de6:	eb46 0406 	adc.w	r4, r6, r6
 8009dea:	461a      	mov	r2, r3
 8009dec:	4623      	mov	r3, r4
 8009dee:	f7f6 ff5b 	bl	8000ca8 <__aeabi_uldivmod>
 8009df2:	4603      	mov	r3, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	461a      	mov	r2, r3
 8009df8:	4b2c      	ldr	r3, [pc, #176]	; (8009eac <UART_SetConfig+0x384>)
 8009dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	2164      	movs	r1, #100	; 0x64
 8009e02:	fb01 f303 	mul.w	r3, r1, r3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	3332      	adds	r3, #50	; 0x32
 8009e0c:	4a27      	ldr	r2, [pc, #156]	; (8009eac <UART_SetConfig+0x384>)
 8009e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e1a:	4498      	add	r8, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	461d      	mov	r5, r3
 8009e20:	f04f 0600 	mov.w	r6, #0
 8009e24:	46a9      	mov	r9, r5
 8009e26:	46b2      	mov	sl, r6
 8009e28:	eb19 0309 	adds.w	r3, r9, r9
 8009e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8009e30:	4699      	mov	r9, r3
 8009e32:	46a2      	mov	sl, r4
 8009e34:	eb19 0905 	adds.w	r9, r9, r5
 8009e38:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e3c:	f04f 0100 	mov.w	r1, #0
 8009e40:	f04f 0200 	mov.w	r2, #0
 8009e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e50:	4689      	mov	r9, r1
 8009e52:	4692      	mov	sl, r2
 8009e54:	eb19 0005 	adds.w	r0, r9, r5
 8009e58:	eb4a 0106 	adc.w	r1, sl, r6
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	461d      	mov	r5, r3
 8009e62:	f04f 0600 	mov.w	r6, #0
 8009e66:	196b      	adds	r3, r5, r5
 8009e68:	eb46 0406 	adc.w	r4, r6, r6
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4623      	mov	r3, r4
 8009e70:	f7f6 ff1a 	bl	8000ca8 <__aeabi_uldivmod>
 8009e74:	4603      	mov	r3, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <UART_SetConfig+0x384>)
 8009e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	2164      	movs	r1, #100	; 0x64
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	3332      	adds	r3, #50	; 0x32
 8009e8e:	4a07      	ldr	r2, [pc, #28]	; (8009eac <UART_SetConfig+0x384>)
 8009e90:	fba2 2303 	umull	r2, r3, r2, r3
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	f003 0207 	and.w	r2, r3, #7
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4442      	add	r2, r8
 8009ea0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009ea2:	e1b2      	b.n	800a20a <UART_SetConfig+0x6e2>
 8009ea4:	40011000 	.word	0x40011000
 8009ea8:	40011400 	.word	0x40011400
 8009eac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4ad7      	ldr	r2, [pc, #860]	; (800a214 <UART_SetConfig+0x6ec>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d005      	beq.n	8009ec6 <UART_SetConfig+0x39e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4ad6      	ldr	r2, [pc, #856]	; (800a218 <UART_SetConfig+0x6f0>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	f040 80d1 	bne.w	800a068 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ec6:	f7ff f81b 	bl	8008f00 <HAL_RCC_GetPCLK2Freq>
 8009eca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	469a      	mov	sl, r3
 8009ed0:	f04f 0b00 	mov.w	fp, #0
 8009ed4:	46d0      	mov	r8, sl
 8009ed6:	46d9      	mov	r9, fp
 8009ed8:	eb18 0308 	adds.w	r3, r8, r8
 8009edc:	eb49 0409 	adc.w	r4, r9, r9
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	46a1      	mov	r9, r4
 8009ee4:	eb18 080a 	adds.w	r8, r8, sl
 8009ee8:	eb49 090b 	adc.w	r9, r9, fp
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009ef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009efc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f00:	4688      	mov	r8, r1
 8009f02:	4691      	mov	r9, r2
 8009f04:	eb1a 0508 	adds.w	r5, sl, r8
 8009f08:	eb4b 0609 	adc.w	r6, fp, r9
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4619      	mov	r1, r3
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	f04f 0300 	mov.w	r3, #0
 8009f1a:	f04f 0400 	mov.w	r4, #0
 8009f1e:	0094      	lsls	r4, r2, #2
 8009f20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f24:	008b      	lsls	r3, r1, #2
 8009f26:	461a      	mov	r2, r3
 8009f28:	4623      	mov	r3, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	f7f6 febb 	bl	8000ca8 <__aeabi_uldivmod>
 8009f32:	4603      	mov	r3, r0
 8009f34:	460c      	mov	r4, r1
 8009f36:	461a      	mov	r2, r3
 8009f38:	4bb8      	ldr	r3, [pc, #736]	; (800a21c <UART_SetConfig+0x6f4>)
 8009f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f3e:	095b      	lsrs	r3, r3, #5
 8009f40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	469b      	mov	fp, r3
 8009f48:	f04f 0c00 	mov.w	ip, #0
 8009f4c:	46d9      	mov	r9, fp
 8009f4e:	46e2      	mov	sl, ip
 8009f50:	eb19 0309 	adds.w	r3, r9, r9
 8009f54:	eb4a 040a 	adc.w	r4, sl, sl
 8009f58:	4699      	mov	r9, r3
 8009f5a:	46a2      	mov	sl, r4
 8009f5c:	eb19 090b 	adds.w	r9, r9, fp
 8009f60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f64:	f04f 0100 	mov.w	r1, #0
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f78:	4689      	mov	r9, r1
 8009f7a:	4692      	mov	sl, r2
 8009f7c:	eb1b 0509 	adds.w	r5, fp, r9
 8009f80:	eb4c 060a 	adc.w	r6, ip, sl
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	f04f 0400 	mov.w	r4, #0
 8009f96:	0094      	lsls	r4, r2, #2
 8009f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f9c:	008b      	lsls	r3, r1, #2
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	f7f6 fe7f 	bl	8000ca8 <__aeabi_uldivmod>
 8009faa:	4603      	mov	r3, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4b9a      	ldr	r3, [pc, #616]	; (800a21c <UART_SetConfig+0x6f4>)
 8009fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	2164      	movs	r1, #100	; 0x64
 8009fba:	fb01 f303 	mul.w	r3, r1, r3
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	3332      	adds	r3, #50	; 0x32
 8009fc4:	4a95      	ldr	r2, [pc, #596]	; (800a21c <UART_SetConfig+0x6f4>)
 8009fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fca:	095b      	lsrs	r3, r3, #5
 8009fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fd0:	4498      	add	r8, r3
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	469b      	mov	fp, r3
 8009fd6:	f04f 0c00 	mov.w	ip, #0
 8009fda:	46d9      	mov	r9, fp
 8009fdc:	46e2      	mov	sl, ip
 8009fde:	eb19 0309 	adds.w	r3, r9, r9
 8009fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8009fe6:	4699      	mov	r9, r3
 8009fe8:	46a2      	mov	sl, r4
 8009fea:	eb19 090b 	adds.w	r9, r9, fp
 8009fee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ff2:	f04f 0100 	mov.w	r1, #0
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a006:	4689      	mov	r9, r1
 800a008:	4692      	mov	sl, r2
 800a00a:	eb1b 0509 	adds.w	r5, fp, r9
 800a00e:	eb4c 060a 	adc.w	r6, ip, sl
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4619      	mov	r1, r3
 800a018:	f04f 0200 	mov.w	r2, #0
 800a01c:	f04f 0300 	mov.w	r3, #0
 800a020:	f04f 0400 	mov.w	r4, #0
 800a024:	0094      	lsls	r4, r2, #2
 800a026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a02a:	008b      	lsls	r3, r1, #2
 800a02c:	461a      	mov	r2, r3
 800a02e:	4623      	mov	r3, r4
 800a030:	4628      	mov	r0, r5
 800a032:	4631      	mov	r1, r6
 800a034:	f7f6 fe38 	bl	8000ca8 <__aeabi_uldivmod>
 800a038:	4603      	mov	r3, r0
 800a03a:	460c      	mov	r4, r1
 800a03c:	461a      	mov	r2, r3
 800a03e:	4b77      	ldr	r3, [pc, #476]	; (800a21c <UART_SetConfig+0x6f4>)
 800a040:	fba3 1302 	umull	r1, r3, r3, r2
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	2164      	movs	r1, #100	; 0x64
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	3332      	adds	r3, #50	; 0x32
 800a052:	4a72      	ldr	r2, [pc, #456]	; (800a21c <UART_SetConfig+0x6f4>)
 800a054:	fba2 2303 	umull	r2, r3, r2, r3
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4442      	add	r2, r8
 800a064:	609a      	str	r2, [r3, #8]
 800a066:	e0d0      	b.n	800a20a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a068:	f7fe ff36 	bl	8008ed8 <HAL_RCC_GetPCLK1Freq>
 800a06c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	469a      	mov	sl, r3
 800a072:	f04f 0b00 	mov.w	fp, #0
 800a076:	46d0      	mov	r8, sl
 800a078:	46d9      	mov	r9, fp
 800a07a:	eb18 0308 	adds.w	r3, r8, r8
 800a07e:	eb49 0409 	adc.w	r4, r9, r9
 800a082:	4698      	mov	r8, r3
 800a084:	46a1      	mov	r9, r4
 800a086:	eb18 080a 	adds.w	r8, r8, sl
 800a08a:	eb49 090b 	adc.w	r9, r9, fp
 800a08e:	f04f 0100 	mov.w	r1, #0
 800a092:	f04f 0200 	mov.w	r2, #0
 800a096:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a09a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a09e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a0a2:	4688      	mov	r8, r1
 800a0a4:	4691      	mov	r9, r2
 800a0a6:	eb1a 0508 	adds.w	r5, sl, r8
 800a0aa:	eb4b 0609 	adc.w	r6, fp, r9
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	f04f 0400 	mov.w	r4, #0
 800a0c0:	0094      	lsls	r4, r2, #2
 800a0c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0c6:	008b      	lsls	r3, r1, #2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4623      	mov	r3, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	f7f6 fdea 	bl	8000ca8 <__aeabi_uldivmod>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b50      	ldr	r3, [pc, #320]	; (800a21c <UART_SetConfig+0x6f4>)
 800a0dc:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	469b      	mov	fp, r3
 800a0ea:	f04f 0c00 	mov.w	ip, #0
 800a0ee:	46d9      	mov	r9, fp
 800a0f0:	46e2      	mov	sl, ip
 800a0f2:	eb19 0309 	adds.w	r3, r9, r9
 800a0f6:	eb4a 040a 	adc.w	r4, sl, sl
 800a0fa:	4699      	mov	r9, r3
 800a0fc:	46a2      	mov	sl, r4
 800a0fe:	eb19 090b 	adds.w	r9, r9, fp
 800a102:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a106:	f04f 0100 	mov.w	r1, #0
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a11a:	4689      	mov	r9, r1
 800a11c:	4692      	mov	sl, r2
 800a11e:	eb1b 0509 	adds.w	r5, fp, r9
 800a122:	eb4c 060a 	adc.w	r6, ip, sl
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	4619      	mov	r1, r3
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	f04f 0400 	mov.w	r4, #0
 800a138:	0094      	lsls	r4, r2, #2
 800a13a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a13e:	008b      	lsls	r3, r1, #2
 800a140:	461a      	mov	r2, r3
 800a142:	4623      	mov	r3, r4
 800a144:	4628      	mov	r0, r5
 800a146:	4631      	mov	r1, r6
 800a148:	f7f6 fdae 	bl	8000ca8 <__aeabi_uldivmod>
 800a14c:	4603      	mov	r3, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	461a      	mov	r2, r3
 800a152:	4b32      	ldr	r3, [pc, #200]	; (800a21c <UART_SetConfig+0x6f4>)
 800a154:	fba3 1302 	umull	r1, r3, r3, r2
 800a158:	095b      	lsrs	r3, r3, #5
 800a15a:	2164      	movs	r1, #100	; 0x64
 800a15c:	fb01 f303 	mul.w	r3, r1, r3
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	011b      	lsls	r3, r3, #4
 800a164:	3332      	adds	r3, #50	; 0x32
 800a166:	4a2d      	ldr	r2, [pc, #180]	; (800a21c <UART_SetConfig+0x6f4>)
 800a168:	fba2 2303 	umull	r2, r3, r2, r3
 800a16c:	095b      	lsrs	r3, r3, #5
 800a16e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a172:	4498      	add	r8, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	469b      	mov	fp, r3
 800a178:	f04f 0c00 	mov.w	ip, #0
 800a17c:	46d9      	mov	r9, fp
 800a17e:	46e2      	mov	sl, ip
 800a180:	eb19 0309 	adds.w	r3, r9, r9
 800a184:	eb4a 040a 	adc.w	r4, sl, sl
 800a188:	4699      	mov	r9, r3
 800a18a:	46a2      	mov	sl, r4
 800a18c:	eb19 090b 	adds.w	r9, r9, fp
 800a190:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a194:	f04f 0100 	mov.w	r1, #0
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1a8:	4689      	mov	r9, r1
 800a1aa:	4692      	mov	sl, r2
 800a1ac:	eb1b 0509 	adds.w	r5, fp, r9
 800a1b0:	eb4c 060a 	adc.w	r6, ip, sl
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	f04f 0400 	mov.w	r4, #0
 800a1c6:	0094      	lsls	r4, r2, #2
 800a1c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1cc:	008b      	lsls	r3, r1, #2
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	f7f6 fd67 	bl	8000ca8 <__aeabi_uldivmod>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <UART_SetConfig+0x6f4>)
 800a1e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	2164      	movs	r1, #100	; 0x64
 800a1ea:	fb01 f303 	mul.w	r3, r1, r3
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	3332      	adds	r3, #50	; 0x32
 800a1f4:	4a09      	ldr	r2, [pc, #36]	; (800a21c <UART_SetConfig+0x6f4>)
 800a1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	f003 020f 	and.w	r2, r3, #15
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4442      	add	r2, r8
 800a206:	609a      	str	r2, [r3, #8]
}
 800a208:	e7ff      	b.n	800a20a <UART_SetConfig+0x6e2>
 800a20a:	bf00      	nop
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a214:	40011000 	.word	0x40011000
 800a218:	40011400 	.word	0x40011400
 800a21c:	51eb851f 	.word	0x51eb851f

0800a220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a220:	b084      	sub	sp, #16
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	f107 001c 	add.w	r0, r7, #28
 800a22e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	2b01      	cmp	r3, #1
 800a236:	d122      	bne.n	800a27e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a24c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a262:	2b01      	cmp	r3, #1
 800a264:	d105      	bne.n	800a272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fa7c 	bl	800b770 <USB_CoreReset>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]
 800a27c:	e01a      	b.n	800a2b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f001 fa70 	bl	800b770 <USB_CoreReset>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a296:	2b00      	cmp	r3, #0
 800a298:	d106      	bne.n	800a2a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38
 800a2a6:	e005      	b.n	800a2b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d10b      	bne.n	800a2d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f043 0206 	orr.w	r2, r3, #6
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f043 0220 	orr.w	r2, r3, #32
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2de:	b004      	add	sp, #16
 800a2e0:	4770      	bx	lr
	...

0800a2e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d165      	bne.n	800a3c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4a41      	ldr	r2, [pc, #260]	; (800a400 <USB_SetTurnaroundTime+0x11c>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d906      	bls.n	800a30e <USB_SetTurnaroundTime+0x2a>
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4a40      	ldr	r2, [pc, #256]	; (800a404 <USB_SetTurnaroundTime+0x120>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d802      	bhi.n	800a30e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a308:	230f      	movs	r3, #15
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e062      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	4a3c      	ldr	r2, [pc, #240]	; (800a404 <USB_SetTurnaroundTime+0x120>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d906      	bls.n	800a324 <USB_SetTurnaroundTime+0x40>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4a3b      	ldr	r2, [pc, #236]	; (800a408 <USB_SetTurnaroundTime+0x124>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d802      	bhi.n	800a324 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a31e:	230e      	movs	r3, #14
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	e057      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4a38      	ldr	r2, [pc, #224]	; (800a408 <USB_SetTurnaroundTime+0x124>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d906      	bls.n	800a33a <USB_SetTurnaroundTime+0x56>
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4a37      	ldr	r2, [pc, #220]	; (800a40c <USB_SetTurnaroundTime+0x128>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d802      	bhi.n	800a33a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a334:	230d      	movs	r3, #13
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	e04c      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	4a33      	ldr	r2, [pc, #204]	; (800a40c <USB_SetTurnaroundTime+0x128>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d906      	bls.n	800a350 <USB_SetTurnaroundTime+0x6c>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	4a32      	ldr	r2, [pc, #200]	; (800a410 <USB_SetTurnaroundTime+0x12c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d802      	bhi.n	800a350 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a34a:	230c      	movs	r3, #12
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	e041      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4a2f      	ldr	r2, [pc, #188]	; (800a410 <USB_SetTurnaroundTime+0x12c>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d906      	bls.n	800a366 <USB_SetTurnaroundTime+0x82>
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	4a2e      	ldr	r2, [pc, #184]	; (800a414 <USB_SetTurnaroundTime+0x130>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d802      	bhi.n	800a366 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a360:	230b      	movs	r3, #11
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	e036      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	4a2a      	ldr	r2, [pc, #168]	; (800a414 <USB_SetTurnaroundTime+0x130>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d906      	bls.n	800a37c <USB_SetTurnaroundTime+0x98>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a29      	ldr	r2, [pc, #164]	; (800a418 <USB_SetTurnaroundTime+0x134>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d802      	bhi.n	800a37c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a376:	230a      	movs	r3, #10
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	e02b      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4a26      	ldr	r2, [pc, #152]	; (800a418 <USB_SetTurnaroundTime+0x134>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d906      	bls.n	800a392 <USB_SetTurnaroundTime+0xae>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4a25      	ldr	r2, [pc, #148]	; (800a41c <USB_SetTurnaroundTime+0x138>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d802      	bhi.n	800a392 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a38c:	2309      	movs	r3, #9
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e020      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4a21      	ldr	r2, [pc, #132]	; (800a41c <USB_SetTurnaroundTime+0x138>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d906      	bls.n	800a3a8 <USB_SetTurnaroundTime+0xc4>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4a20      	ldr	r2, [pc, #128]	; (800a420 <USB_SetTurnaroundTime+0x13c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d802      	bhi.n	800a3a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e015      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <USB_SetTurnaroundTime+0x13c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d906      	bls.n	800a3be <USB_SetTurnaroundTime+0xda>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <USB_SetTurnaroundTime+0x140>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d802      	bhi.n	800a3be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a3b8:	2307      	movs	r3, #7
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e00a      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a3be:	2306      	movs	r3, #6
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	e007      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a3ca:	2309      	movs	r3, #9
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	e001      	b.n	800a3d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3d0:	2309      	movs	r3, #9
 800a3d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68da      	ldr	r2, [r3, #12]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	029b      	lsls	r3, r3, #10
 800a3e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	371c      	adds	r7, #28
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	00d8acbf 	.word	0x00d8acbf
 800a404:	00e4e1bf 	.word	0x00e4e1bf
 800a408:	00f423ff 	.word	0x00f423ff
 800a40c:	0106737f 	.word	0x0106737f
 800a410:	011a499f 	.word	0x011a499f
 800a414:	01312cff 	.word	0x01312cff
 800a418:	014ca43f 	.word	0x014ca43f
 800a41c:	016e35ff 	.word	0x016e35ff
 800a420:	01a6ab1f 	.word	0x01a6ab1f
 800a424:	01e847ff 	.word	0x01e847ff

0800a428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f043 0201 	orr.w	r2, r3, #1
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f023 0201 	bic.w	r2, r3, #1
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d106      	bne.n	800a498 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60da      	str	r2, [r3, #12]
 800a496:	e00b      	b.n	800a4b0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60da      	str	r2, [r3, #12]
 800a4aa:	e001      	b.n	800a4b0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e003      	b.n	800a4b8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a4b0:	2032      	movs	r0, #50	; 0x32
 800a4b2:	f7fc f911 	bl	80066d8 <HAL_Delay>

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b086      	sub	sp, #24
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
 800a4de:	e009      	b.n	800a4f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3340      	adds	r3, #64	; 0x40
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b0e      	cmp	r3, #14
 800a4f8:	d9f2      	bls.n	800a4e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d112      	bne.n	800a526 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	639a      	str	r2, [r3, #56]	; 0x38
 800a524:	e00b      	b.n	800a53e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a544:	461a      	mov	r2, r3
 800a546:	2300      	movs	r3, #0
 800a548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a550:	4619      	mov	r1, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a558:	461a      	mov	r2, r3
 800a55a:	680b      	ldr	r3, [r1, #0]
 800a55c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	2b01      	cmp	r3, #1
 800a562:	d10c      	bne.n	800a57e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d104      	bne.n	800a574 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a56a:	2100      	movs	r1, #0
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f961 	bl	800a834 <USB_SetDevSpeed>
 800a572:	e008      	b.n	800a586 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a574:	2101      	movs	r1, #1
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f95c 	bl	800a834 <USB_SetDevSpeed>
 800a57c:	e003      	b.n	800a586 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a57e:	2103      	movs	r1, #3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f957 	bl	800a834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a586:	2110      	movs	r1, #16
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f90b 	bl	800a7a4 <USB_FlushTxFifo>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f929 	bl	800a7f0 <USB_FlushRxFifo>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	2300      	movs	r3, #0
 800a5be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	e043      	b.n	800a65a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5e8:	d118      	bne.n	800a61c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	e013      	b.n	800a62e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a612:	461a      	mov	r2, r3
 800a614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	e008      	b.n	800a62e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a628:	461a      	mov	r2, r3
 800a62a:	2300      	movs	r3, #0
 800a62c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63a:	461a      	mov	r2, r3
 800a63c:	2300      	movs	r3, #0
 800a63e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64c:	461a      	mov	r2, r3
 800a64e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	3301      	adds	r3, #1
 800a658:	613b      	str	r3, [r7, #16]
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d3b7      	bcc.n	800a5d2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a662:	2300      	movs	r3, #0
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	e043      	b.n	800a6f0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a67a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a67e:	d118      	bne.n	800a6b2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a692:	461a      	mov	r2, r3
 800a694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e013      	b.n	800a6c4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	e008      	b.n	800a6c4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6be:	461a      	mov	r2, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d3b7      	bcc.n	800a668 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a70a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d111      	bne.n	800a736 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a718:	461a      	mov	r2, r3
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <USB_DevInit+0x2dc>)
 800a71c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a72c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a730:	f043 0303 	orr.w	r3, r3, #3
 800a734:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a742:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f043 0210 	orr.w	r2, r3, #16
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <USB_DevInit+0x2e0>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f043 0208 	orr.w	r2, r3, #8
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d107      	bne.n	800a78a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a782:	f043 0304 	orr.w	r3, r3, #4
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a796:	b004      	add	sp, #16
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	00800100 	.word	0x00800100
 800a7a0:	803c3800 	.word	0x803c3800

0800a7a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	019b      	lsls	r3, r3, #6
 800a7b6:	f043 0220 	orr.w	r2, r3, #32
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <USB_FlushTxFifo+0x48>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d901      	bls.n	800a7d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e006      	b.n	800a7de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d0f0      	beq.n	800a7be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	00030d40 	.word	0x00030d40

0800a7f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2210      	movs	r2, #16
 800a800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3301      	adds	r3, #1
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4a09      	ldr	r2, [pc, #36]	; (800a830 <USB_FlushRxFifo+0x40>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d901      	bls.n	800a814 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	e006      	b.n	800a822 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	f003 0310 	and.w	r3, r3, #16
 800a81c:	2b10      	cmp	r3, #16
 800a81e:	d0f0      	beq.n	800a802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	00030d40 	.word	0x00030d40

0800a834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	68f9      	ldr	r1, [r7, #12]
 800a850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a854:	4313      	orrs	r3, r2
 800a856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a866:	b480      	push	{r7}
 800a868:	b087      	sub	sp, #28
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0306 	and.w	r3, r3, #6
 800a87e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a886:	2300      	movs	r3, #0
 800a888:	75fb      	strb	r3, [r7, #23]
 800a88a:	e00a      	b.n	800a8a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d002      	beq.n	800a898 <USB_GetDevSpeed+0x32>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b06      	cmp	r3, #6
 800a896:	d102      	bne.n	800a89e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a898:	2302      	movs	r3, #2
 800a89a:	75fb      	strb	r3, [r7, #23]
 800a89c:	e001      	b.n	800a8a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a89e:	230f      	movs	r3, #15
 800a8a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d13a      	bne.n	800a942 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	69da      	ldr	r2, [r3, #28]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 030f 	and.w	r3, r3, #15
 800a8dc:	2101      	movs	r1, #1
 800a8de:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	68f9      	ldr	r1, [r7, #12]
 800a8e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d155      	bne.n	800a9b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	78db      	ldrb	r3, [r3, #3]
 800a91e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a920:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	059b      	lsls	r3, r3, #22
 800a926:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a928:	4313      	orrs	r3, r2
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a93a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e036      	b.n	800a9b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a948:	69da      	ldr	r2, [r3, #28]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 030f 	and.w	r3, r3, #15
 800a952:	2101      	movs	r1, #1
 800a954:	fa01 f303 	lsl.w	r3, r1, r3
 800a958:	041b      	lsls	r3, r3, #16
 800a95a:	68f9      	ldr	r1, [r7, #12]
 800a95c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a960:	4313      	orrs	r3, r2
 800a962:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d11a      	bne.n	800a9b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	78db      	ldrb	r3, [r3, #3]
 800a994:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a996:	430b      	orrs	r3, r1
 800a998:	4313      	orrs	r3, r2
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	0151      	lsls	r1, r2, #5
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	440a      	add	r2, r1
 800a9a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d135      	bne.n	800aa48 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 030f 	and.w	r3, r3, #15
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	69da      	ldr	r2, [r3, #28]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	2101      	movs	r1, #1
 800aa12:	fa01 f303 	lsl.w	r3, r1, r3
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa20:	4013      	ands	r3, r2
 800aa22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	0159      	lsls	r1, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	440b      	add	r3, r1
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4b1f      	ldr	r3, [pc, #124]	; (800aac0 <USB_DeactivateEndpoint+0x100>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	600b      	str	r3, [r1, #0]
 800aa46:	e034      	b.n	800aab2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa5e:	041b      	lsls	r3, r3, #16
 800aa60:	43db      	mvns	r3, r3
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa68:	4013      	ands	r3, r2
 800aa6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa72:	69da      	ldr	r2, [r3, #28]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 030f 	and.w	r3, r3, #15
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	43db      	mvns	r3, r3
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	0159      	lsls	r1, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	440b      	add	r3, r1
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <USB_DeactivateEndpoint+0x104>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	ec337800 	.word	0xec337800
 800aac4:	eff37800 	.word	0xeff37800

0800aac8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08a      	sub	sp, #40	; 0x28
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	f040 815c 	bne.w	800ada2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d132      	bne.n	800ab58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab50:	0cdb      	lsrs	r3, r3, #19
 800ab52:	04db      	lsls	r3, r3, #19
 800ab54:	6113      	str	r3, [r2, #16]
 800ab56:	e074      	b.n	800ac42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab72:	0cdb      	lsrs	r3, r3, #19
 800ab74:	04db      	lsls	r3, r3, #19
 800ab76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	69fa      	ldr	r2, [r7, #28]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba8:	691a      	ldr	r2, [r3, #16]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6959      	ldr	r1, [r3, #20]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	440b      	add	r3, r1
 800abb4:	1e59      	subs	r1, r3, #1
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	fbb1 f3f3 	udiv	r3, r1, r3
 800abbe:	04d9      	lsls	r1, r3, #19
 800abc0:	4b9d      	ldr	r3, [pc, #628]	; (800ae38 <USB_EPStartXfer+0x370>)
 800abc2:	400b      	ands	r3, r1
 800abc4:	69b9      	ldr	r1, [r7, #24]
 800abc6:	0148      	lsls	r0, r1, #5
 800abc8:	69f9      	ldr	r1, [r7, #28]
 800abca:	4401      	add	r1, r0
 800abcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abd0:	4313      	orrs	r3, r2
 800abd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abea:	69b9      	ldr	r1, [r7, #24]
 800abec:	0148      	lsls	r0, r1, #5
 800abee:	69f9      	ldr	r1, [r7, #28]
 800abf0:	4401      	add	r1, r0
 800abf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abf6:	4313      	orrs	r3, r2
 800abf8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	78db      	ldrb	r3, [r3, #3]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d11f      	bne.n	800ac42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ac20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d14b      	bne.n	800ace0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	78db      	ldrb	r3, [r3, #3]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d128      	bne.n	800acbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d110      	bne.n	800ac9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	0151      	lsls	r1, r2, #5
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	440a      	add	r2, r1
 800ac92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	e00f      	b.n	800acbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	0151      	lsls	r1, r2, #5
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	440a      	add	r2, r1
 800acb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69ba      	ldr	r2, [r7, #24]
 800acce:	0151      	lsls	r1, r2, #5
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	440a      	add	r2, r1
 800acd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	e12f      	b.n	800af40 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	0151      	lsls	r1, r2, #5
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	440a      	add	r2, r1
 800acf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acfe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	78db      	ldrb	r3, [r3, #3]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d015      	beq.n	800ad34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 8117 	beq.w	800af40 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	f003 030f 	and.w	r3, r3, #15
 800ad22:	2101      	movs	r1, #1
 800ad24:	fa01 f303 	lsl.w	r3, r1, r3
 800ad28:	69f9      	ldr	r1, [r7, #28]
 800ad2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	634b      	str	r3, [r1, #52]	; 0x34
 800ad32:	e105      	b.n	800af40 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d110      	bne.n	800ad66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	0151      	lsls	r1, r2, #5
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	440a      	add	r2, r1
 800ad5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	e00f      	b.n	800ad86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	0151      	lsls	r1, r2, #5
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	440a      	add	r2, r1
 800ad7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	68d9      	ldr	r1, [r3, #12]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	b298      	uxth	r0, r3
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	4603      	mov	r3, r0
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fa2b 	bl	800b1f6 <USB_WritePacket>
 800ada0:	e0ce      	b.n	800af40 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	0151      	lsls	r1, r2, #5
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	440a      	add	r2, r1
 800adb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adbc:	0cdb      	lsrs	r3, r3, #19
 800adbe:	04db      	lsls	r3, r3, #19
 800adc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	0151      	lsls	r1, r2, #5
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	440a      	add	r2, r1
 800add8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800addc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ade0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ade4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d126      	bne.n	800ae3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae04:	69b9      	ldr	r1, [r7, #24]
 800ae06:	0148      	lsls	r0, r1, #5
 800ae08:	69f9      	ldr	r1, [r7, #28]
 800ae0a:	4401      	add	r1, r0
 800ae0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae10:	4313      	orrs	r3, r2
 800ae12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae32:	6113      	str	r3, [r2, #16]
 800ae34:	e036      	b.n	800aea4 <USB_EPStartXfer+0x3dc>
 800ae36:	bf00      	nop
 800ae38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	695a      	ldr	r2, [r3, #20]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4413      	add	r3, r2
 800ae46:	1e5a      	subs	r2, r3, #1
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	8afb      	ldrh	r3, [r7, #22]
 800ae62:	04d9      	lsls	r1, r3, #19
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <USB_EPStartXfer+0x484>)
 800ae66:	400b      	ands	r3, r1
 800ae68:	69b9      	ldr	r1, [r7, #24]
 800ae6a:	0148      	lsls	r0, r1, #5
 800ae6c:	69f9      	ldr	r1, [r7, #28]
 800ae6e:	4401      	add	r1, r0
 800ae70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae74:	4313      	orrs	r3, r2
 800ae76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae84:	691a      	ldr	r2, [r3, #16]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	8af9      	ldrh	r1, [r7, #22]
 800ae8c:	fb01 f303 	mul.w	r3, r1, r3
 800ae90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae94:	69b9      	ldr	r1, [r7, #24]
 800ae96:	0148      	lsls	r0, r1, #5
 800ae98:	69f9      	ldr	r1, [r7, #28]
 800ae9a:	4401      	add	r1, r0
 800ae9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aea0:	4313      	orrs	r3, r2
 800aea2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d10d      	bne.n	800aec6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	68d9      	ldr	r1, [r3, #12]
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec2:	460a      	mov	r2, r1
 800aec4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	78db      	ldrb	r3, [r3, #3]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d128      	bne.n	800af20 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d110      	bne.n	800af00 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e00f      	b.n	800af20 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	0151      	lsls	r1, r2, #5
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	440a      	add	r2, r1
 800af36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	1ff80000 	.word	0x1ff80000

0800af50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	f040 80cd 	bne.w	800b10c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d132      	bne.n	800afe0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	0151      	lsls	r1, r2, #5
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	440a      	add	r2, r1
 800af90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd8:	0cdb      	lsrs	r3, r3, #19
 800afda:	04db      	lsls	r3, r3, #19
 800afdc:	6113      	str	r3, [r2, #16]
 800afde:	e04e      	b.n	800b07e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	0151      	lsls	r1, r2, #5
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	440a      	add	r2, r1
 800aff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affa:	0cdb      	lsrs	r3, r3, #19
 800affc:	04db      	lsls	r3, r3, #19
 800affe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	0151      	lsls	r1, r2, #5
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	440a      	add	r2, r1
 800b016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b01e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b022:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	695a      	ldr	r2, [r3, #20]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d903      	bls.n	800b038 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	691a      	ldr	r2, [r3, #16]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b06e:	6939      	ldr	r1, [r7, #16]
 800b070:	0148      	lsls	r0, r1, #5
 800b072:	6979      	ldr	r1, [r7, #20]
 800b074:	4401      	add	r1, r0
 800b076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b07a:	4313      	orrs	r3, r2
 800b07c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d11e      	bne.n	800b0c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d009      	beq.n	800b0a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b098:	461a      	mov	r2, r3
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	e092      	b.n	800b1e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d07e      	beq.n	800b1e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f003 030f 	and.w	r3, r3, #15
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b100:	6979      	ldr	r1, [r7, #20]
 800b102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b106:	4313      	orrs	r3, r2
 800b108:	634b      	str	r3, [r1, #52]	; 0x34
 800b10a:	e06d      	b.n	800b1e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	4413      	add	r3, r2
 800b114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	0151      	lsls	r1, r2, #5
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	440a      	add	r2, r1
 800b122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b126:	0cdb      	lsrs	r3, r3, #19
 800b128:	04db      	lsls	r3, r3, #19
 800b12a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	015a      	lsls	r2, r3, #5
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	4413      	add	r3, r2
 800b134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	0151      	lsls	r1, r2, #5
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	440a      	add	r2, r1
 800b142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b14a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b14e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	689a      	ldr	r2, [r3, #8]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	0151      	lsls	r1, r2, #5
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	440a      	add	r2, r1
 800b176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b17a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b17e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b196:	6939      	ldr	r1, [r7, #16]
 800b198:	0148      	lsls	r0, r1, #5
 800b19a:	6979      	ldr	r1, [r7, #20]
 800b19c:	4401      	add	r1, r0
 800b19e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d10d      	bne.n	800b1c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d009      	beq.n	800b1c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	68d9      	ldr	r1, [r3, #12]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	460a      	mov	r2, r1
 800b1c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	0151      	lsls	r1, r2, #5
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	440a      	add	r2, r1
 800b1de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b089      	sub	sp, #36	; 0x24
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	4611      	mov	r1, r2
 800b202:	461a      	mov	r2, r3
 800b204:	460b      	mov	r3, r1
 800b206:	71fb      	strb	r3, [r7, #7]
 800b208:	4613      	mov	r3, r2
 800b20a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d11a      	bne.n	800b252 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b21c:	88bb      	ldrh	r3, [r7, #4]
 800b21e:	3303      	adds	r3, #3
 800b220:	089b      	lsrs	r3, r3, #2
 800b222:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b224:	2300      	movs	r3, #0
 800b226:	61bb      	str	r3, [r7, #24]
 800b228:	e00f      	b.n	800b24a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b22a:	79fb      	ldrb	r3, [r7, #7]
 800b22c:	031a      	lsls	r2, r3, #12
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	4413      	add	r3, r2
 800b232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b236:	461a      	mov	r2, r3
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	3304      	adds	r3, #4
 800b242:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	3301      	adds	r3, #1
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d3eb      	bcc.n	800b22a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3724      	adds	r7, #36	; 0x24
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b260:	b480      	push	{r7}
 800b262:	b089      	sub	sp, #36	; 0x24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	3303      	adds	r3, #3
 800b27a:	089b      	lsrs	r3, r3, #2
 800b27c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b27e:	2300      	movs	r3, #0
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e00b      	b.n	800b29c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3304      	adds	r3, #4
 800b294:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	3301      	adds	r3, #1
 800b29a:	61bb      	str	r3, [r7, #24]
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d3ef      	bcc.n	800b284 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3724      	adds	r7, #36	; 0x24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d12c      	bne.n	800b328 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	db12      	blt.n	800b306 <USB_EPSetStall+0x54>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00f      	beq.n	800b306 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b304:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	0151      	lsls	r1, r2, #5
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	440a      	add	r2, r1
 800b31c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	e02b      	b.n	800b380 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	db12      	blt.n	800b360 <USB_EPSetStall+0xae>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00f      	beq.n	800b360 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	0151      	lsls	r1, r2, #5
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	440a      	add	r2, r1
 800b356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b35a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b35e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	0151      	lsls	r1, r2, #5
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	440a      	add	r2, r1
 800b376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b37a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b37e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d128      	bne.n	800b3fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	78db      	ldrb	r3, [r3, #3]
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d003      	beq.n	800b3da <USB_EPClearStall+0x4c>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	78db      	ldrb	r3, [r3, #3]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d138      	bne.n	800b44c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	0151      	lsls	r1, r2, #5
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	440a      	add	r2, r1
 800b3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	e027      	b.n	800b44c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	0151      	lsls	r1, r2, #5
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	440a      	add	r2, r1
 800b412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b41a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	78db      	ldrb	r3, [r3, #3]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d003      	beq.n	800b42c <USB_EPClearStall+0x9e>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d10f      	bne.n	800b44c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	0151      	lsls	r1, r2, #5
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	440a      	add	r2, r1
 800b442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b44a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b085      	sub	sp, #20
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b478:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b47c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b48e:	68f9      	ldr	r1, [r7, #12]
 800b490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b494:	4313      	orrs	r3, r2
 800b496:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4c0:	f023 0302 	bic.w	r3, r3, #2
 800b4c4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b4c6:	2003      	movs	r0, #3
 800b4c8:	f7fb f906 	bl	80066d8 <HAL_Delay>

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4f0:	f043 0302 	orr.w	r3, r3, #2
 800b4f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b4f6:	2003      	movs	r0, #3
 800b4f8:	f7fb f8ee 	bl	80066d8 <HAL_Delay>

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	4013      	ands	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b51e:	68fb      	ldr	r3, [r7, #12]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	4013      	ands	r3, r2
 800b54e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	0c1b      	lsrs	r3, r3, #16
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4013      	ands	r3, r2
 800b582:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	b29b      	uxth	r3, r3
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	4013      	ands	r3, r2
 800b5c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	f003 030f 	and.w	r3, r3, #15
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b600:	01db      	lsls	r3, r3, #7
 800b602:	b2db      	uxtb	r3, r3
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	4013      	ands	r3, r2
 800b61c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b61e:	68bb      	ldr	r3, [r7, #8]
}
 800b620:	4618      	mov	r0, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	f003 0301 	and.w	r3, r3, #1
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b662:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b666:	f023 0307 	bic.w	r3, r3, #7
 800b66a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f003 0306 	and.w	r3, r3, #6
 800b678:	2b04      	cmp	r3, #4
 800b67a:	d109      	bne.n	800b690 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68a:	f043 0303 	orr.w	r3, r3, #3
 800b68e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b69e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	333c      	adds	r3, #60	; 0x3c
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4a26      	ldr	r2, [pc, #152]	; (800b76c <USB_EP0_OutStart+0xb8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d90a      	bls.n	800b6ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6e8:	d101      	bne.n	800b6ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e037      	b.n	800b75e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71c:	f043 0318 	orr.w	r3, r3, #24
 800b720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b730:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b734:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d10f      	bne.n	800b75c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	461a      	mov	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b756:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b75a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	4f54300a 	.word	0x4f54300a

0800b770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <USB_CoreReset+0x64>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d901      	bls.n	800b78e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e01b      	b.n	800b7c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	daf2      	bge.n	800b77c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f043 0201 	orr.w	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4a09      	ldr	r2, [pc, #36]	; (800b7d4 <USB_CoreReset+0x64>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d901      	bls.n	800b7b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e006      	b.n	800b7c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d0f0      	beq.n	800b7a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	00030d40 	.word	0x00030d40

0800b7d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	7c1b      	ldrb	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d115      	bne.n	800b81c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	2181      	movs	r1, #129	; 0x81
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f004 fe54 	bl	80104a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b804:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b808:	2202      	movs	r2, #2
 800b80a:	2101      	movs	r1, #1
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f004 fe4a 	bl	80104a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b81a:	e012      	b.n	800b842 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b81c:	2340      	movs	r3, #64	; 0x40
 800b81e:	2202      	movs	r2, #2
 800b820:	2181      	movs	r1, #129	; 0x81
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f004 fe3f 	bl	80104a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b82e:	2340      	movs	r3, #64	; 0x40
 800b830:	2202      	movs	r2, #2
 800b832:	2101      	movs	r1, #1
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f004 fe36 	bl	80104a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b842:	2308      	movs	r3, #8
 800b844:	2203      	movs	r2, #3
 800b846:	2182      	movs	r1, #130	; 0x82
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f004 fe2c 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b854:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b858:	f004 ffa2 	bl	80107a0 <malloc>
 800b85c:	4603      	mov	r3, r0
 800b85e:	461a      	mov	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
 800b874:	e026      	b.n	800b8c4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b87c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7c1b      	ldrb	r3, [r3, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f004 feeb 	bl	8010688 <USBD_LL_PrepareReceive>
 800b8b2:	e007      	b.n	800b8c4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8ba:	2340      	movs	r3, #64	; 0x40
 800b8bc:	2101      	movs	r1, #1
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f004 fee2 	bl	8010688 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b8de:	2181      	movs	r1, #129	; 0x81
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f004 fe06 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f004 fdff 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b8fc:	2182      	movs	r1, #130	; 0x82
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f004 fdf7 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00e      	beq.n	800b932 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b924:	4618      	mov	r0, r3
 800b926:	f004 ff43 	bl	80107b0 <free>
    pdev->pClassData = NULL;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b94c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b952:	2300      	movs	r3, #0
 800b954:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b962:	2b00      	cmp	r3, #0
 800b964:	d039      	beq.n	800b9da <USBD_CDC_Setup+0x9e>
 800b966:	2b20      	cmp	r3, #32
 800b968:	d17c      	bne.n	800ba64 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d029      	beq.n	800b9c6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	b25b      	sxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da11      	bge.n	800b9a0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b988:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	88d2      	ldrh	r2, [r2, #6]
 800b98e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b990:	6939      	ldr	r1, [r7, #16]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	88db      	ldrh	r3, [r3, #6]
 800b996:	461a      	mov	r2, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 f9c9 	bl	800cd30 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b99e:	e068      	b.n	800ba72 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	785a      	ldrb	r2, [r3, #1]
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	88db      	ldrh	r3, [r3, #6]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b9b6:	6939      	ldr	r1, [r7, #16]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	88db      	ldrh	r3, [r3, #6]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 f9e4 	bl	800cd8c <USBD_CtlPrepareRx>
    break;
 800b9c4:	e055      	b.n	800ba72 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	7850      	ldrb	r0, [r2, #1]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	4798      	blx	r3
    break;
 800b9d8:	e04b      	b.n	800ba72 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b0a      	cmp	r3, #10
 800b9e0:	d017      	beq.n	800ba12 <USBD_CDC_Setup+0xd6>
 800b9e2:	2b0b      	cmp	r3, #11
 800b9e4:	d029      	beq.n	800ba3a <USBD_CDC_Setup+0xfe>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d133      	bne.n	800ba52 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d107      	bne.n	800ba04 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b9f4:	f107 030c 	add.w	r3, r7, #12
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 f997 	bl	800cd30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ba02:	e02e      	b.n	800ba62 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 f927 	bl	800cc5a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba10:	e027      	b.n	800ba62 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d107      	bne.n	800ba2c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ba1c:	f107 030f 	add.w	r3, r7, #15
 800ba20:	2201      	movs	r2, #1
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f001 f983 	bl	800cd30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ba2a:	e01a      	b.n	800ba62 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 f913 	bl	800cc5a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ba34:	2302      	movs	r3, #2
 800ba36:	75fb      	strb	r3, [r7, #23]
      break;
 800ba38:	e013      	b.n	800ba62 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d00d      	beq.n	800ba60 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f001 f907 	bl	800cc5a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ba50:	e006      	b.n	800ba60 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f001 f900 	bl	800cc5a <USBD_CtlError>
      ret = USBD_FAIL;
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5e:	e000      	b.n	800ba62 <USBD_CDC_Setup+0x126>
      break;
 800ba60:	bf00      	nop
    }
    break;
 800ba62:	e006      	b.n	800ba72 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 f8f7 	bl	800cc5a <USBD_CtlError>
    ret = USBD_FAIL;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	75fb      	strb	r3, [r7, #23]
    break;
 800ba70:	bf00      	nop
  }

  return ret;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ba8e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba96:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d03a      	beq.n	800bb18 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800baa2:	78fa      	ldrb	r2, [r7, #3]
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	331c      	adds	r3, #28
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d029      	beq.n	800bb0c <USBD_CDC_DataIn+0x90>
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	440b      	add	r3, r1
 800bac6:	331c      	adds	r3, #28
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	78f9      	ldrb	r1, [r7, #3]
 800bacc:	68b8      	ldr	r0, [r7, #8]
 800bace:	460b      	mov	r3, r1
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	1a5b      	subs	r3, r3, r1
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4403      	add	r3, r0
 800bad8:	3344      	adds	r3, #68	; 0x44
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bae0:	fb03 f301 	mul.w	r3, r3, r1
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d110      	bne.n	800bb0c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800baea:	78fa      	ldrb	r2, [r7, #3]
 800baec:	6879      	ldr	r1, [r7, #4]
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	440b      	add	r3, r1
 800baf8:	331c      	adds	r3, #28
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800bafe:	78f9      	ldrb	r1, [r7, #3]
 800bb00:	2300      	movs	r3, #0
 800bb02:	2200      	movs	r2, #0
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f004 fd9c 	bl	8010642 <USBD_LL_Transmit>
 800bb0a:	e003      	b.n	800bb14 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e000      	b.n	800bb1a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bb18:	2302      	movs	r3, #2
  }
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f004 fdc7 	bl	80106ce <USBD_LL_GetRxDataSize>
 800bb40:	4602      	mov	r2, r0
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00d      	beq.n	800bb6e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb66:	4611      	mov	r1, r2
 800bb68:	4798      	blx	r3

    return USBD_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e000      	b.n	800bb70 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bb6e:	2302      	movs	r3, #2
  }
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb86:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d015      	beq.n	800bbbe <USBD_CDC_EP0_RxReady+0x46>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb98:	2bff      	cmp	r3, #255	; 0xff
 800bb9a:	d010      	beq.n	800bbbe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bbaa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	22ff      	movs	r2, #255	; 0xff
 800bbba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2243      	movs	r2, #67	; 0x43
 800bbd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bbd6:	4b03      	ldr	r3, [pc, #12]	; (800bbe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	20000d48 	.word	0x20000d48

0800bbe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2243      	movs	r2, #67	; 0x43
 800bbf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bbf6:	4b03      	ldr	r3, [pc, #12]	; (800bc04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20000d04 	.word	0x20000d04

0800bc08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2243      	movs	r2, #67	; 0x43
 800bc14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bc16:	4b03      	ldr	r3, [pc, #12]	; (800bc24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	20000d8c 	.word	0x20000d8c

0800bc28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	220a      	movs	r2, #10
 800bc34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bc36:	4b03      	ldr	r3, [pc, #12]	; (800bc44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	20000cc0 	.word	0x20000cc0

0800bc48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d005      	beq.n	800bc68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b087      	sub	sp, #28
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	4613      	mov	r3, r2
 800bc82:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc8a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc94:	88fa      	ldrh	r2, [r7, #6]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bce0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01c      	beq.n	800bd26 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d115      	bne.n	800bd22 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	2181      	movs	r1, #129	; 0x81
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f004 fc92 	bl	8010642 <USBD_LL_Transmit>

      return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e002      	b.n	800bd28 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bd26:	2302      	movs	r3, #2
  }
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d017      	beq.n	800bd7a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7c1b      	ldrb	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d109      	bne.n	800bd66 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f004 fc92 	bl	8010688 <USBD_LL_PrepareReceive>
 800bd64:	e007      	b.n	800bd76 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd6c:	2340      	movs	r3, #64	; 0x40
 800bd6e:	2101      	movs	r1, #1
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f004 fc89 	bl	8010688 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e000      	b.n	800bd7c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bd7a:	2302      	movs	r3, #2
  }
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e01a      	b.n	800bdd2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	79fa      	ldrb	r2, [r7, #7]
 800bdc8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f004 fb04 	bl	80103d8 <USBD_LL_Init>

  return USBD_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b085      	sub	sp, #20
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]
 800bdfa:	e001      	b.n	800be00 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f004 fb2a 	bl	8010470 <USBD_LL_Start>

  return USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800be26:	b480      	push	{r7}
 800be28:	b083      	sub	sp, #12
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800be48:	2302      	movs	r3, #2
 800be4a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00c      	beq.n	800be70 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	460b      	mov	r3, r1
 800be84:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	78fa      	ldrb	r2, [r7, #3]
 800be90:	4611      	mov	r1, r2
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fe94 	bl	800cbe0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800bec6:	461a      	mov	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bed4:	f003 031f 	and.w	r3, r3, #31
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d00c      	beq.n	800bef6 <USBD_LL_SetupStage+0x56>
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d302      	bcc.n	800bee6 <USBD_LL_SetupStage+0x46>
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d010      	beq.n	800bf06 <USBD_LL_SetupStage+0x66>
 800bee4:	e017      	b.n	800bf16 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa04 	bl	800c2fc <USBD_StdDevReq>
    break;
 800bef4:	e01a      	b.n	800bf2c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa66 	bl	800c3d0 <USBD_StdItfReq>
    break;
 800bf04:	e012      	b.n	800bf2c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 faa4 	bl	800c45c <USBD_StdEPReq>
    break;
 800bf14:	e00a      	b.n	800bf2c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bf1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f004 fb03 	bl	8010530 <USBD_LL_StallEP>
    break;
 800bf2a:	bf00      	nop
  }

  return USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b086      	sub	sp, #24
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	607a      	str	r2, [r7, #4]
 800bf42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800bf44:	7afb      	ldrb	r3, [r7, #11]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d14b      	bne.n	800bfe2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bf50:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d134      	bne.n	800bfc6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	68da      	ldr	r2, [r3, #12]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d919      	bls.n	800bf9c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	1ad2      	subs	r2, r2, r3
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	68da      	ldr	r2, [r3, #12]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d203      	bcs.n	800bf8a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	e002      	b.n	800bf90 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	461a      	mov	r2, r3
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 ff17 	bl	800cdc8 <USBD_CtlContinueRx>
 800bf9a:	e038      	b.n	800c00e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00a      	beq.n	800bfbe <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	d105      	bne.n	800bfbe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 ff14 	bl	800cdec <USBD_CtlSendStatus>
 800bfc4:	e023      	b.n	800c00e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bfcc:	2b05      	cmp	r3, #5
 800bfce:	d11e      	bne.n	800c00e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800bfd8:	2100      	movs	r1, #0
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f004 faa8 	bl	8010530 <USBD_LL_StallEP>
 800bfe0:	e015      	b.n	800c00e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00d      	beq.n	800c00a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d108      	bne.n	800c00a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	7afa      	ldrb	r2, [r7, #11]
 800c002:	4611      	mov	r1, r2
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	4798      	blx	r3
 800c008:	e001      	b.n	800c00e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c00a:	2302      	movs	r3, #2
 800c00c:	e000      	b.n	800c010 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	460b      	mov	r3, r1
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d17f      	bne.n	800c12c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3314      	adds	r3, #20
 800c030:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d15c      	bne.n	800c0f6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	429a      	cmp	r2, r3
 800c046:	d915      	bls.n	800c074 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	1ad2      	subs	r2, r2, r3
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	461a      	mov	r2, r3
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 fe81 	bl	800cd68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c066:	2300      	movs	r3, #0
 800c068:	2200      	movs	r2, #0
 800c06a:	2100      	movs	r1, #0
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f004 fb0b 	bl	8010688 <USBD_LL_PrepareReceive>
 800c072:	e04e      	b.n	800c112 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	6912      	ldr	r2, [r2, #16]
 800c07c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c080:	fb02 f201 	mul.w	r2, r2, r1
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d11c      	bne.n	800c0c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c092:	429a      	cmp	r2, r3
 800c094:	d316      	bcc.n	800c0c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d20f      	bcs.n	800c0c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 fe5d 	bl	800cd68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f004 fae3 	bl	8010688 <USBD_LL_PrepareReceive>
 800c0c2:	e026      	b.n	800c112 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d105      	bne.n	800c0e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c0e6:	2180      	movs	r1, #128	; 0x80
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f004 fa21 	bl	8010530 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f000 fe8f 	bl	800ce12 <USBD_CtlReceiveStatus>
 800c0f4:	e00d      	b.n	800c112 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d004      	beq.n	800c10a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c106:	2b00      	cmp	r3, #0
 800c108:	d103      	bne.n	800c112 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c10a:	2180      	movs	r1, #128	; 0x80
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f004 fa0f 	bl	8010530 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d11d      	bne.n	800c158 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff fe82 	bl	800be26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c12a:	e015      	b.n	800c158 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00d      	beq.n	800c154 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d108      	bne.n	800c154 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	7afa      	ldrb	r2, [r7, #11]
 800c14c:	4611      	mov	r1, r2
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	4798      	blx	r3
 800c152:	e001      	b.n	800c158 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c154:	2302      	movs	r3, #2
 800c156:	e000      	b.n	800c15a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	2200      	movs	r2, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f004 f998 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2240      	movs	r2, #64	; 0x40
 800c182:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	2200      	movs	r2, #0
 800c18a:	2180      	movs	r1, #128	; 0x80
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f004 f98a 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2240      	movs	r2, #64	; 0x40
 800c19c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d009      	beq.n	800c1da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6852      	ldr	r2, [r2, #4]
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
  }

  return USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	78fa      	ldrb	r2, [r7, #3]
 800c1f4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2204      	movs	r2, #4
 800c21c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d10b      	bne.n	800c27a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6852      	ldr	r2, [r2, #4]
 800c2ea:	b2d2      	uxtb	r2, r2
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	4798      	blx	r3

  return USBD_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c312:	2b20      	cmp	r3, #32
 800c314:	d004      	beq.n	800c320 <USBD_StdDevReq+0x24>
 800c316:	2b40      	cmp	r3, #64	; 0x40
 800c318:	d002      	beq.n	800c320 <USBD_StdDevReq+0x24>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d008      	beq.n	800c330 <USBD_StdDevReq+0x34>
 800c31e:	e04c      	b.n	800c3ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	4798      	blx	r3
    break;
 800c32e:	e049      	b.n	800c3c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b09      	cmp	r3, #9
 800c336:	d83a      	bhi.n	800c3ae <USBD_StdDevReq+0xb2>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <USBD_StdDevReq+0x44>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c391 	.word	0x0800c391
 800c344:	0800c3a5 	.word	0x0800c3a5
 800c348:	0800c3af 	.word	0x0800c3af
 800c34c:	0800c39b 	.word	0x0800c39b
 800c350:	0800c3af 	.word	0x0800c3af
 800c354:	0800c373 	.word	0x0800c373
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c3af 	.word	0x0800c3af
 800c360:	0800c387 	.word	0x0800c387
 800c364:	0800c37d 	.word	0x0800c37d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f9d2 	bl	800c714 <USBD_GetDescriptor>
      break;
 800c370:	e022      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fac7 	bl	800c908 <USBD_SetAddress>
      break;
 800c37a:	e01d      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fb04 	bl	800c98c <USBD_SetConfig>
      break;
 800c384:	e018      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fb8d 	bl	800caa8 <USBD_GetConfig>
      break;
 800c38e:	e013      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fbbc 	bl	800cb10 <USBD_GetStatus>
      break;
 800c398:	e00e      	b.n	800c3b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbea 	bl	800cb76 <USBD_SetFeature>
      break;
 800c3a2:	e009      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fbf9 	bl	800cb9e <USBD_ClrFeature>
      break;
 800c3ac:	e004      	b.n	800c3b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fc52 	bl	800cc5a <USBD_CtlError>
      break;
 800c3b6:	bf00      	nop
    }
    break;
 800c3b8:	e004      	b.n	800c3c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fc4c 	bl	800cc5a <USBD_CtlError>
    break;
 800c3c2:	bf00      	nop
  }

  return ret;
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop

0800c3d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	d003      	beq.n	800c3f2 <USBD_StdItfReq+0x22>
 800c3ea:	2b40      	cmp	r3, #64	; 0x40
 800c3ec:	d001      	beq.n	800c3f2 <USBD_StdItfReq+0x22>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d12a      	bne.n	800c448 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d81d      	bhi.n	800c43a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	889b      	ldrh	r3, [r3, #4]
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b01      	cmp	r3, #1
 800c406:	d813      	bhi.n	800c430 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	4798      	blx	r3
 800c416:	4603      	mov	r3, r0
 800c418:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	88db      	ldrh	r3, [r3, #6]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d110      	bne.n	800c444 <USBD_StdItfReq+0x74>
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10d      	bne.n	800c444 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fcdf 	bl	800cdec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c42e:	e009      	b.n	800c444 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fc11 	bl	800cc5a <USBD_CtlError>
      break;
 800c438:	e004      	b.n	800c444 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc0c 	bl	800cc5a <USBD_CtlError>
      break;
 800c442:	e000      	b.n	800c446 <USBD_StdItfReq+0x76>
      break;
 800c444:	bf00      	nop
    }
    break;
 800c446:	e004      	b.n	800c452 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fc05 	bl	800cc5a <USBD_CtlError>
    break;
 800c450:	bf00      	nop
  }

  return USBD_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	889b      	ldrh	r3, [r3, #4]
 800c46e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d004      	beq.n	800c486 <USBD_StdEPReq+0x2a>
 800c47c:	2b40      	cmp	r3, #64	; 0x40
 800c47e:	d002      	beq.n	800c486 <USBD_StdEPReq+0x2a>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d008      	beq.n	800c496 <USBD_StdEPReq+0x3a>
 800c484:	e13b      	b.n	800c6fe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	4798      	blx	r3
    break;
 800c494:	e138      	b.n	800c708 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	d10a      	bne.n	800c4b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	4798      	blx	r3
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	e128      	b.n	800c70a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	785b      	ldrb	r3, [r3, #1]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d03e      	beq.n	800c53e <USBD_StdEPReq+0xe2>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d002      	beq.n	800c4ca <USBD_StdEPReq+0x6e>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d070      	beq.n	800c5aa <USBD_StdEPReq+0x14e>
 800c4c8:	e113      	b.n	800c6f2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d002      	beq.n	800c4da <USBD_StdEPReq+0x7e>
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d015      	beq.n	800c504 <USBD_StdEPReq+0xa8>
 800c4d8:	e02b      	b.n	800c532 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00c      	beq.n	800c4fa <USBD_StdEPReq+0x9e>
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	2b80      	cmp	r3, #128	; 0x80
 800c4e4:	d009      	beq.n	800c4fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c4e6:	7bbb      	ldrb	r3, [r7, #14]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f004 f820 	bl	8010530 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c4f0:	2180      	movs	r1, #128	; 0x80
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f004 f81c 	bl	8010530 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c4f8:	e020      	b.n	800c53c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fbac 	bl	800cc5a <USBD_CtlError>
        break;
 800c502:	e01b      	b.n	800c53c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	885b      	ldrh	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10e      	bne.n	800c52a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00b      	beq.n	800c52a <USBD_StdEPReq+0xce>
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b80      	cmp	r3, #128	; 0x80
 800c516:	d008      	beq.n	800c52a <USBD_StdEPReq+0xce>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f004 f803 	bl	8010530 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fc5e 	bl	800cdec <USBD_CtlSendStatus>

        break;
 800c530:	e004      	b.n	800c53c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fb90 	bl	800cc5a <USBD_CtlError>
        break;
 800c53a:	bf00      	nop
      }
      break;
 800c53c:	e0de      	b.n	800c6fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c544:	2b02      	cmp	r3, #2
 800c546:	d002      	beq.n	800c54e <USBD_StdEPReq+0xf2>
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d015      	beq.n	800c578 <USBD_StdEPReq+0x11c>
 800c54c:	e026      	b.n	800c59c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00c      	beq.n	800c56e <USBD_StdEPReq+0x112>
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b80      	cmp	r3, #128	; 0x80
 800c558:	d009      	beq.n	800c56e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f003 ffe6 	bl	8010530 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c564:	2180      	movs	r1, #128	; 0x80
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f003 ffe2 	bl	8010530 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c56c:	e01c      	b.n	800c5a8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fb72 	bl	800cc5a <USBD_CtlError>
        break;
 800c576:	e017      	b.n	800c5a8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	885b      	ldrh	r3, [r3, #2]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d112      	bne.n	800c5a6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c580:	7bbb      	ldrb	r3, [r7, #14]
 800c582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c58a:	7bbb      	ldrb	r3, [r7, #14]
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f003 ffed 	bl	801056e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fc29 	bl	800cdec <USBD_CtlSendStatus>
        }
        break;
 800c59a:	e004      	b.n	800c5a6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fb5b 	bl	800cc5a <USBD_CtlError>
        break;
 800c5a4:	e000      	b.n	800c5a8 <USBD_StdEPReq+0x14c>
        break;
 800c5a6:	bf00      	nop
      }
      break;
 800c5a8:	e0a8      	b.n	800c6fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d002      	beq.n	800c5ba <USBD_StdEPReq+0x15e>
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d031      	beq.n	800c61c <USBD_StdEPReq+0x1c0>
 800c5b8:	e095      	b.n	800c6e6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5ba:	7bbb      	ldrb	r3, [r7, #14]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <USBD_StdEPReq+0x174>
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
 800c5c2:	2b80      	cmp	r3, #128	; 0x80
 800c5c4:	d004      	beq.n	800c5d0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fb46 	bl	800cc5a <USBD_CtlError>
          break;
 800c5ce:	e08f      	b.n	800c6f0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c5d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	da0b      	bge.n	800c5f0 <USBD_StdEPReq+0x194>
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5de:	4613      	mov	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	3310      	adds	r3, #16
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	e00a      	b.n	800c606 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4413      	add	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	4413      	add	r3, r2
 800c606:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2202      	movs	r2, #2
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fb8b 	bl	800cd30 <USBD_CtlSendData>
          break;
 800c61a:	e069      	b.n	800c6f0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c620:	2b00      	cmp	r3, #0
 800c622:	da11      	bge.n	800c648 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c624:	7bbb      	ldrb	r3, [r7, #14]
 800c626:	f003 020f 	and.w	r2, r3, #15
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	3318      	adds	r3, #24
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d117      	bne.n	800c66e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fb0a 	bl	800cc5a <USBD_CtlError>
            break;
 800c646:	e053      	b.n	800c6f0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	f003 020f 	and.w	r2, r3, #15
 800c64e:	6879      	ldr	r1, [r7, #4]
 800c650:	4613      	mov	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	440b      	add	r3, r1
 800c65a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 faf7 	bl	800cc5a <USBD_CtlError>
            break;
 800c66c:	e040      	b.n	800c6f0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c66e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c672:	2b00      	cmp	r3, #0
 800c674:	da0b      	bge.n	800c68e <USBD_StdEPReq+0x232>
 800c676:	7bbb      	ldrb	r3, [r7, #14]
 800c678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	3310      	adds	r3, #16
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	4413      	add	r3, r2
 800c68a:	3304      	adds	r3, #4
 800c68c:	e00a      	b.n	800c6a4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c68e:	7bbb      	ldrb	r3, [r7, #14]
 800c690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <USBD_StdEPReq+0x256>
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	2b80      	cmp	r3, #128	; 0x80
 800c6b0:	d103      	bne.n	800c6ba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	e00e      	b.n	800c6d8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f003 ff74 	bl	80105ac <USBD_LL_IsStallEP>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
 800c6d0:	e002      	b.n	800c6d8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fb26 	bl	800cd30 <USBD_CtlSendData>
          break;
 800c6e4:	e004      	b.n	800c6f0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fab6 	bl	800cc5a <USBD_CtlError>
        break;
 800c6ee:	bf00      	nop
      }
      break;
 800c6f0:	e004      	b.n	800c6fc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fab0 	bl	800cc5a <USBD_CtlError>
      break;
 800c6fa:	bf00      	nop
    }
    break;
 800c6fc:	e004      	b.n	800c708 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 faaa 	bl	800cc5a <USBD_CtlError>
    break;
 800c706:	bf00      	nop
  }

  return ret;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	885b      	ldrh	r3, [r3, #2]
 800c722:	0a1b      	lsrs	r3, r3, #8
 800c724:	b29b      	uxth	r3, r3
 800c726:	3b01      	subs	r3, #1
 800c728:	2b06      	cmp	r3, #6
 800c72a:	f200 80c9 	bhi.w	800c8c0 <USBD_GetDescriptor+0x1ac>
 800c72e:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <USBD_GetDescriptor+0x20>)
 800c730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c734:	0800c751 	.word	0x0800c751
 800c738:	0800c769 	.word	0x0800c769
 800c73c:	0800c7a9 	.word	0x0800c7a9
 800c740:	0800c8c1 	.word	0x0800c8c1
 800c744:	0800c8c1 	.word	0x0800c8c1
 800c748:	0800c86d 	.word	0x0800c86d
 800c74c:	0800c893 	.word	0x0800c893
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	7c12      	ldrb	r2, [r2, #16]
 800c75c:	f107 010a 	add.w	r1, r7, #10
 800c760:	4610      	mov	r0, r2
 800c762:	4798      	blx	r3
 800c764:	60f8      	str	r0, [r7, #12]
    break;
 800c766:	e0b0      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7c1b      	ldrb	r3, [r3, #16]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10d      	bne.n	800c78c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	f107 020a 	add.w	r2, r7, #10
 800c77c:	4610      	mov	r0, r2
 800c77e:	4798      	blx	r3
 800c780:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3301      	adds	r3, #1
 800c786:	2202      	movs	r2, #2
 800c788:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c78a:	e09e      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c794:	f107 020a 	add.w	r2, r7, #10
 800c798:	4610      	mov	r0, r2
 800c79a:	4798      	blx	r3
 800c79c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	701a      	strb	r2, [r3, #0]
    break;
 800c7a6:	e090      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	885b      	ldrh	r3, [r3, #2]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b05      	cmp	r3, #5
 800c7b0:	d856      	bhi.n	800c860 <USBD_GetDescriptor+0x14c>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <USBD_GetDescriptor+0xa4>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7d1 	.word	0x0800c7d1
 800c7bc:	0800c7e9 	.word	0x0800c7e9
 800c7c0:	0800c801 	.word	0x0800c801
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c831 	.word	0x0800c831
 800c7cc:	0800c849 	.word	0x0800c849
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7c12      	ldrb	r2, [r2, #16]
 800c7dc:	f107 010a 	add.w	r1, r7, #10
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
      break;
 800c7e6:	e040      	b.n	800c86a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	7c12      	ldrb	r2, [r2, #16]
 800c7f4:	f107 010a 	add.w	r1, r7, #10
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	60f8      	str	r0, [r7, #12]
      break;
 800c7fe:	e034      	b.n	800c86a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	7c12      	ldrb	r2, [r2, #16]
 800c80c:	f107 010a 	add.w	r1, r7, #10
 800c810:	4610      	mov	r0, r2
 800c812:	4798      	blx	r3
 800c814:	60f8      	str	r0, [r7, #12]
      break;
 800c816:	e028      	b.n	800c86a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	7c12      	ldrb	r2, [r2, #16]
 800c824:	f107 010a 	add.w	r1, r7, #10
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
 800c82c:	60f8      	str	r0, [r7, #12]
      break;
 800c82e:	e01c      	b.n	800c86a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	7c12      	ldrb	r2, [r2, #16]
 800c83c:	f107 010a 	add.w	r1, r7, #10
 800c840:	4610      	mov	r0, r2
 800c842:	4798      	blx	r3
 800c844:	60f8      	str	r0, [r7, #12]
      break;
 800c846:	e010      	b.n	800c86a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	7c12      	ldrb	r2, [r2, #16]
 800c854:	f107 010a 	add.w	r1, r7, #10
 800c858:	4610      	mov	r0, r2
 800c85a:	4798      	blx	r3
 800c85c:	60f8      	str	r0, [r7, #12]
      break;
 800c85e:	e004      	b.n	800c86a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f9f9 	bl	800cc5a <USBD_CtlError>
      return;
 800c868:	e04b      	b.n	800c902 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800c86a:	e02e      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	7c1b      	ldrb	r3, [r3, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d109      	bne.n	800c888 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87c:	f107 020a 	add.w	r2, r7, #10
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
      break;
 800c886:	e020      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f9e5 	bl	800cc5a <USBD_CtlError>
      return;
 800c890:	e037      	b.n	800c902 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7c1b      	ldrb	r3, [r3, #16]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10d      	bne.n	800c8b6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a2:	f107 020a 	add.w	r2, r7, #10
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	4798      	blx	r3
 800c8aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	701a      	strb	r2, [r3, #0]
      break;
 800c8b4:	e009      	b.n	800c8ca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f9ce 	bl	800cc5a <USBD_CtlError>
      return;
 800c8be:	e020      	b.n	800c902 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f9c9 	bl	800cc5a <USBD_CtlError>
    return;
 800c8c8:	e01b      	b.n	800c902 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c8ca:	897b      	ldrh	r3, [r7, #10]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d011      	beq.n	800c8f4 <USBD_GetDescriptor+0x1e0>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	88db      	ldrh	r3, [r3, #6]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00d      	beq.n	800c8f4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	88da      	ldrh	r2, [r3, #6]
 800c8dc:	897b      	ldrh	r3, [r7, #10]
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	bf28      	it	cs
 800c8e2:	4613      	movcs	r3, r2
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c8e8:	897b      	ldrh	r3, [r7, #10]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	68f9      	ldr	r1, [r7, #12]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fa1e 	bl	800cd30 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	88db      	ldrh	r3, [r3, #6]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fa75 	bl	800cdec <USBD_CtlSendStatus>
  }
}
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	889b      	ldrh	r3, [r3, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d130      	bne.n	800c97c <USBD_SetAddress+0x74>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	88db      	ldrh	r3, [r3, #6]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d12c      	bne.n	800c97c <USBD_SetAddress+0x74>
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	2b7f      	cmp	r3, #127	; 0x7f
 800c928:	d828      	bhi.n	800c97c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	885b      	ldrh	r3, [r3, #2]
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c934:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d104      	bne.n	800c94a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f989 	bl	800cc5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c948:	e01c      	b.n	800c984 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7bfa      	ldrb	r2, [r7, #15]
 800c94e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f003 fe54 	bl	8010604 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fa45 	bl	800cdec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d004      	beq.n	800c972 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c970:	e008      	b.n	800c984 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c97a:	e003      	b.n	800c984 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f96b 	bl	800cc5a <USBD_CtlError>
  }
}
 800c984:	bf00      	nop
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	885b      	ldrh	r3, [r3, #2]
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	4b41      	ldr	r3, [pc, #260]	; (800caa4 <USBD_SetConfig+0x118>)
 800c99e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c9a0:	4b40      	ldr	r3, [pc, #256]	; (800caa4 <USBD_SetConfig+0x118>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d904      	bls.n	800c9b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f955 	bl	800cc5a <USBD_CtlError>
 800c9b0:	e075      	b.n	800ca9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d002      	beq.n	800c9c2 <USBD_SetConfig+0x36>
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d023      	beq.n	800ca08 <USBD_SetConfig+0x7c>
 800c9c0:	e062      	b.n	800ca88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c9c2:	4b38      	ldr	r3, [pc, #224]	; (800caa4 <USBD_SetConfig+0x118>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01a      	beq.n	800ca00 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c9ca:	4b36      	ldr	r3, [pc, #216]	; (800caa4 <USBD_SetConfig+0x118>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2203      	movs	r2, #3
 800c9d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c9dc:	4b31      	ldr	r3, [pc, #196]	; (800caa4 <USBD_SetConfig+0x118>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fa2a 	bl	800be3c <USBD_SetClassConfig>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d104      	bne.n	800c9f8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f932 	bl	800cc5a <USBD_CtlError>
          return;
 800c9f6:	e052      	b.n	800ca9e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f9f7 	bl	800cdec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c9fe:	e04e      	b.n	800ca9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f9f3 	bl	800cdec <USBD_CtlSendStatus>
      break;
 800ca06:	e04a      	b.n	800ca9e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca08:	4b26      	ldr	r3, [pc, #152]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d112      	bne.n	800ca36 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ca18:	4b22      	ldr	r3, [pc, #136]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ca22:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	4619      	mov	r1, r3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff fa26 	bl	800be7a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f9dc 	bl	800cdec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ca34:	e033      	b.n	800ca9e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ca36:	4b1b      	ldr	r3, [pc, #108]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d01d      	beq.n	800ca80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff fa14 	bl	800be7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca52:	4b14      	ldr	r3, [pc, #80]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	4619      	mov	r1, r3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff f9ea 	bl	800be3c <USBD_SetClassConfig>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d104      	bne.n	800ca78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f8f2 	bl	800cc5a <USBD_CtlError>
          return;
 800ca76:	e012      	b.n	800ca9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f9b7 	bl	800cdec <USBD_CtlSendStatus>
      break;
 800ca7e:	e00e      	b.n	800ca9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f9b3 	bl	800cdec <USBD_CtlSendStatus>
      break;
 800ca86:	e00a      	b.n	800ca9e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f8e5 	bl	800cc5a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ca90:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <USBD_SetConfig+0x118>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff f9ef 	bl	800be7a <USBD_ClrClassConfig>
      break;
 800ca9c:	bf00      	nop
    }
  }
}
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000147c 	.word	0x2000147c

0800caa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	88db      	ldrh	r3, [r3, #6]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d004      	beq.n	800cac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f8cc 	bl	800cc5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800cac2:	e021      	b.n	800cb08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800caca:	2b01      	cmp	r3, #1
 800cacc:	db17      	blt.n	800cafe <USBD_GetConfig+0x56>
 800cace:	2b02      	cmp	r3, #2
 800cad0:	dd02      	ble.n	800cad8 <USBD_GetConfig+0x30>
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d00b      	beq.n	800caee <USBD_GetConfig+0x46>
 800cad6:	e012      	b.n	800cafe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3308      	adds	r3, #8
 800cae2:	2201      	movs	r2, #1
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f922 	bl	800cd30 <USBD_CtlSendData>
      break;
 800caec:	e00c      	b.n	800cb08 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	2201      	movs	r2, #1
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f91a 	bl	800cd30 <USBD_CtlSendData>
      break;
 800cafc:	e004      	b.n	800cb08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f8aa 	bl	800cc5a <USBD_CtlError>
      break;
 800cb06:	bf00      	nop
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb20:	3b01      	subs	r3, #1
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d81e      	bhi.n	800cb64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	88db      	ldrh	r3, [r3, #6]
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d004      	beq.n	800cb38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f892 	bl	800cc5a <USBD_CtlError>
      break;
 800cb36:	e01a      	b.n	800cb6e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d005      	beq.n	800cb54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f043 0202 	orr.w	r2, r3, #2
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	330c      	adds	r3, #12
 800cb58:	2202      	movs	r2, #2
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f8e7 	bl	800cd30 <USBD_CtlSendData>
    break;
 800cb62:	e004      	b.n	800cb6e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f877 	bl	800cc5a <USBD_CtlError>
    break;
 800cb6c:	bf00      	nop
  }
}
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	885b      	ldrh	r3, [r3, #2]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d106      	bne.n	800cb96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f92b 	bl	800cdec <USBD_CtlSendStatus>
  }

}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d80b      	bhi.n	800cbcc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	885b      	ldrh	r3, [r3, #2]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d10c      	bne.n	800cbd6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f911 	bl	800cdec <USBD_CtlSendStatus>
    }
    break;
 800cbca:	e004      	b.n	800cbd6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f843 	bl	800cc5a <USBD_CtlError>
    break;
 800cbd4:	e000      	b.n	800cbd8 <USBD_ClrFeature+0x3a>
    break;
 800cbd6:	bf00      	nop
  }
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	785a      	ldrb	r2, [r3, #1]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	3303      	adds	r3, #3
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	021b      	lsls	r3, r3, #8
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	4413      	add	r3, r2
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	3305      	adds	r3, #5
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	4413      	add	r3, r2
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	3306      	adds	r3, #6
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	3307      	adds	r3, #7
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4413      	add	r3, r2
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	80da      	strh	r2, [r3, #6]

}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800cc64:	2180      	movs	r1, #128	; 0x80
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f003 fc62 	bl	8010530 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f003 fc5e 	bl	8010530 <USBD_LL_StallEP>
}
 800cc74:	bf00      	nop
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d032      	beq.n	800ccf8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f000 f834 	bl	800cd00 <USBD_GetLen>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	75fa      	strb	r2, [r7, #23]
 800ccac:	461a      	mov	r2, r3
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	7812      	ldrb	r2, [r2, #0]
 800ccb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	75fa      	strb	r2, [r7, #23]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ccc8:	e012      	b.n	800ccf0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	60fa      	str	r2, [r7, #12]
 800ccd0:	7dfa      	ldrb	r2, [r7, #23]
 800ccd2:	1c51      	adds	r1, r2, #1
 800ccd4:	75f9      	strb	r1, [r7, #23]
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	440a      	add	r2, r1
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	75fa      	strb	r2, [r7, #23]
 800cce6:	461a      	mov	r2, r3
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	4413      	add	r3, r2
 800ccec:	2200      	movs	r2, #0
 800ccee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1e8      	bne.n	800ccca <USBD_GetString+0x4e>
    }
  }
}
 800ccf8:	bf00      	nop
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800cd0c:	e005      	b.n	800cd1a <USBD_GetLen+0x1a>
    {
        len++;
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	3301      	adds	r3, #1
 800cd12:	73fb      	strb	r3, [r7, #15]
        buf++;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3301      	adds	r3, #1
 800cd18:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1f5      	bne.n	800cd0e <USBD_GetLen+0xe>
    }

    return len;
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2202      	movs	r2, #2
 800cd42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800cd46:	88fa      	ldrh	r2, [r7, #6]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cd4c:	88fa      	ldrh	r2, [r7, #6]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	2100      	movs	r1, #0
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f003 fc72 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	4613      	mov	r3, r2
 800cd74:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd76:	88fb      	ldrh	r3, [r7, #6]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f003 fc60 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2203      	movs	r2, #3
 800cd9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800cda2:	88fa      	ldrh	r2, [r7, #6]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800cdaa:	88fa      	ldrh	r2, [r7, #6]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f003 fc65 	bl	8010688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdd6:	88fb      	ldrh	r3, [r7, #6]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	2100      	movs	r1, #0
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f003 fc53 	bl	8010688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2200      	movs	r2, #0
 800ce00:	2100      	movs	r1, #0
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f003 fc1d 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2205      	movs	r2, #5
 800ce1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ce22:	2300      	movs	r3, #0
 800ce24:	2200      	movs	r2, #0
 800ce26:	2100      	movs	r1, #0
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f003 fc2d 	bl	8010688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ce46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce4a:	2b84      	cmp	r3, #132	; 0x84
 800ce4c:	d005      	beq.n	800ce5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ce4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4413      	add	r3, r2
 800ce56:	3303      	adds	r3, #3
 800ce58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce6e:	f3ef 8305 	mrs	r3, IPSR
 800ce72:	607b      	str	r3, [r7, #4]
  return(result);
 800ce74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	bf14      	ite	ne
 800ce7a:	2301      	movne	r3, #1
 800ce7c:	2300      	moveq	r3, #0
 800ce7e:	b2db      	uxtb	r3, r3
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ce90:	f001 fcca 	bl	800e828 <vTaskStartScheduler>
  
  return osOK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ce9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9c:	b089      	sub	sp, #36	; 0x24
 800ce9e:	af04      	add	r7, sp, #16
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d020      	beq.n	800ceee <osThreadCreate+0x54>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01c      	beq.n	800ceee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685c      	ldr	r4, [r3, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681d      	ldr	r5, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	691e      	ldr	r6, [r3, #16]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff ffb6 	bl	800ce38 <makeFreeRtosPriority>
 800cecc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ced6:	9202      	str	r2, [sp, #8]
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	9100      	str	r1, [sp, #0]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	4632      	mov	r2, r6
 800cee0:	4629      	mov	r1, r5
 800cee2:	4620      	mov	r0, r4
 800cee4:	f001 fae5 	bl	800e4b2 <xTaskCreateStatic>
 800cee8:	4603      	mov	r3, r0
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	e01c      	b.n	800cf28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685c      	ldr	r4, [r3, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cefa:	b29e      	uxth	r6, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff ff98 	bl	800ce38 <makeFreeRtosPriority>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	f107 030c 	add.w	r3, r7, #12
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	9200      	str	r2, [sp, #0]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	4632      	mov	r2, r6
 800cf16:	4629      	mov	r1, r5
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f001 fb23 	bl	800e564 <xTaskCreate>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d001      	beq.n	800cf28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e000      	b.n	800cf2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cf28:	68fb      	ldr	r3, [r7, #12]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <osDelay+0x16>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	e000      	b.n	800cf4a <osDelay+0x18>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 fc38 	bl	800e7c0 <vTaskDelay>
  
  return osOK;
 800cf50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d007      	beq.n	800cf7a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	2001      	movs	r0, #1
 800cf72:	f000 fce1 	bl	800d938 <xQueueCreateMutexStatic>
 800cf76:	4603      	mov	r3, r0
 800cf78:	e003      	b.n	800cf82 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	f000 fcc4 	bl	800d908 <xQueueCreateMutex>
 800cf80:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cf96:	2300      	movs	r3, #0
 800cf98:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <osMutexWait+0x18>
    return osErrorParameter;
 800cfa0:	2380      	movs	r3, #128	; 0x80
 800cfa2:	e03a      	b.n	800d01a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfae:	d103      	bne.n	800cfb8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb4:	60fb      	str	r3, [r7, #12]
 800cfb6:	e009      	b.n	800cfcc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d006      	beq.n	800cfcc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <osMutexWait+0x40>
      ticks = 1;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cfcc:	f7ff ff4c 	bl	800ce68 <inHandlerMode>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d017      	beq.n	800d006 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	461a      	mov	r2, r3
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f001 f8c2 	bl	800e168 <xQueueReceiveFromISR>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d001      	beq.n	800cfee <osMutexWait+0x62>
      return osErrorOS;
 800cfea:	23ff      	movs	r3, #255	; 0xff
 800cfec:	e015      	b.n	800d01a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d011      	beq.n	800d018 <osMutexWait+0x8c>
 800cff4:	4b0b      	ldr	r3, [pc, #44]	; (800d024 <osMutexWait+0x98>)
 800cff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	e008      	b.n	800d018 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 ffa5 	bl	800df58 <xQueueSemaphoreTake>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b01      	cmp	r3, #1
 800d012:	d001      	beq.n	800d018 <osMutexWait+0x8c>
    return osErrorOS;
 800d014:	23ff      	movs	r3, #255	; 0xff
 800d016:	e000      	b.n	800d01a <osMutexWait+0x8e>
  }
  
  return osOK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	e000ed04 	.word	0xe000ed04

0800d028 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d034:	2300      	movs	r3, #0
 800d036:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d038:	f7ff ff16 	bl	800ce68 <inHandlerMode>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d016      	beq.n	800d070 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d042:	f107 0308 	add.w	r3, r7, #8
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fe1f 	bl	800dc8c <xQueueGiveFromISR>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b01      	cmp	r3, #1
 800d052:	d001      	beq.n	800d058 <osMutexRelease+0x30>
      return osErrorOS;
 800d054:	23ff      	movs	r3, #255	; 0xff
 800d056:	e017      	b.n	800d088 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d013      	beq.n	800d086 <osMutexRelease+0x5e>
 800d05e:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <osMutexRelease+0x68>)
 800d060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	f3bf 8f4f 	dsb	sy
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	e00a      	b.n	800d086 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d070:	2300      	movs	r3, #0
 800d072:	2200      	movs	r2, #0
 800d074:	2100      	movs	r1, #0
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fc7a 	bl	800d970 <xQueueGenericSend>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d001      	beq.n	800d086 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d082:	23ff      	movs	r3, #255	; 0xff
 800d084:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d086:	68fb      	ldr	r3, [r7, #12]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	3303      	adds	r3, #3
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800d0a8:	2014      	movs	r0, #20
 800d0aa:	f002 fc39 	bl	800f920 <pvPortMalloc>
 800d0ae:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d046      	beq.n	800d144 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f002 fc26 	bl	800f920 <pvPortMalloc>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d02b      	beq.n	800d13a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 fc17 	bl	800f920 <pvPortMalloc>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d011      	beq.n	800d124 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800d100:	2300      	movs	r3, #0
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	e008      	b.n	800d118 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	4413      	add	r3, r2
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3301      	adds	r3, #1
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d3f1      	bcc.n	800d106 <osPoolCreate+0x72>
 800d122:	e00f      	b.n	800d144 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	4618      	mov	r0, r3
 800d12a:	f002 fcbb 	bl	800faa4 <vPortFree>
        vPortFree(thePool);
 800d12e:	6978      	ldr	r0, [r7, #20]
 800d130:	f002 fcb8 	bl	800faa4 <vPortFree>
        thePool = NULL;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e004      	b.n	800d144 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800d13a:	6978      	ldr	r0, [r7, #20]
 800d13c:	f002 fcb2 	bl	800faa4 <vPortFree>
      thePool = NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800d144:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b08a      	sub	sp, #40	; 0x28
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800d15e:	f7ff fe83 	bl	800ce68 <inHandlerMode>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00e      	beq.n	800d186 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d168:	f3ef 8211 	mrs	r2, BASEPRI
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	617a      	str	r2, [r7, #20]
 800d17e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d180:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
 800d184:	e001      	b.n	800d18a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800d186:	f002 fab1 	bl	800f6ec <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800d18a:	2300      	movs	r3, #0
 800d18c:	61fb      	str	r3, [r7, #28]
 800d18e:	e029      	b.n	800d1e4 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	4413      	add	r3, r2
 800d198:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d301      	bcc.n	800d1a8 <osPoolAlloc+0x5a>
      index = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d113      	bne.n	800d1de <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	4413      	add	r3, r2
 800d1be:	2201      	movs	r2, #1
 800d1c0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	69ba      	ldr	r2, [r7, #24]
 800d1ce:	fb02 f303 	mul.w	r3, r2, r3
 800d1d2:	440b      	add	r3, r1
 800d1d4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	69ba      	ldr	r2, [r7, #24]
 800d1da:	611a      	str	r2, [r3, #16]
      break;
 800d1dc:	e007      	b.n	800d1ee <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	61fb      	str	r3, [r7, #28]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	69fa      	ldr	r2, [r7, #28]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d3d0      	bcc.n	800d190 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800d1ee:	f7ff fe3b 	bl	800ce68 <inHandlerMode>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d005      	beq.n	800d204 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	e001      	b.n	800d208 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800d204:	f002 faa0 	bl	800f748 <vPortExitCritical>
  }
  
  return p;
 800d208:	6a3b      	ldr	r3, [r7, #32]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3728      	adds	r7, #40	; 0x28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800d212:	b480      	push	{r7}
 800d214:	b085      	sub	sp, #20
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d101      	bne.n	800d226 <osPoolFree+0x14>
    return osErrorParameter;
 800d222:	2380      	movs	r3, #128	; 0x80
 800d224:	e030      	b.n	800d288 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <osPoolFree+0x1e>
    return osErrorParameter;
 800d22c:	2380      	movs	r3, #128	; 0x80
 800d22e:	e02b      	b.n	800d288 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d201      	bcs.n	800d23e <osPoolFree+0x2c>
    return osErrorParameter;
 800d23a:	2380      	movs	r3, #128	; 0x80
 800d23c:	e024      	b.n	800d288 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d252:	fb02 f201 	mul.w	r2, r2, r1
 800d256:	1a9b      	subs	r3, r3, r2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <osPoolFree+0x4e>
    return osErrorParameter;
 800d25c:	2380      	movs	r3, #128	; 0x80
 800d25e:	e013      	b.n	800d288 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	fbb2 f3f3 	udiv	r3, r2, r3
 800d26a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	429a      	cmp	r2, r3
 800d274:	d301      	bcc.n	800d27a <osPoolFree+0x68>
    return osErrorParameter;
 800d276:	2380      	movs	r3, #128	; 0x80
 800d278:	e006      	b.n	800d288 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	4413      	add	r3, r2
 800d282:	2200      	movs	r2, #0
 800d284:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800d294:	b590      	push	{r4, r7, lr}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	613b      	str	r3, [r7, #16]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689c      	ldr	r4, [r3, #8]
 800d2b2:	200c      	movs	r0, #12
 800d2b4:	f002 fb34 	bl	800f920 <pvPortMalloc>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <osMailCreate+0x36>
    return NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e038      	b.n	800d33c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6818      	ldr	r0, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	681c      	ldr	r4, [r3, #0]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2104      	movs	r1, #4
 800d2e2:	f000 fa9b 	bl	800d81c <xQueueGenericCreate>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d107      	bne.n	800d306 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f002 fbd1 	bl	800faa4 <vPortFree>
    return NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	e01a      	b.n	800d33c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	681c      	ldr	r4, [r3, #0]
 800d30c:	f107 030c 	add.w	r3, r7, #12
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff febf 	bl	800d094 <osPoolCreate>
 800d316:	4603      	mov	r3, r0
 800d318:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d107      	bne.n	800d336 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f002 fbb9 	bl	800faa4 <vPortFree>
    return NULL;
 800d332:	2300      	movs	r3, #0
 800d334:	e002      	b.n	800d33c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	371c      	adds	r7, #28
 800d340:	46bd      	mov	sp, r7
 800d342:	bd90      	pop	{r4, r7, pc}

0800d344 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <osMailAlloc+0x14>
    return NULL;
 800d354:	2300      	movs	r3, #0
 800d356:	e006      	b.n	800d366 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fef6 	bl	800d14e <osPoolAlloc>
 800d362:	60f8      	str	r0, [r7, #12]
  
  return p;
 800d364:	68fb      	ldr	r3, [r7, #12]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <osMailPut+0x14>
    return osErrorParameter;
 800d380:	2380      	movs	r3, #128	; 0x80
 800d382:	e02c      	b.n	800d3de <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800d384:	2300      	movs	r3, #0
 800d386:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800d388:	f7ff fd6e 	bl	800ce68 <inHandlerMode>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6858      	ldr	r0, [r3, #4]
 800d396:	f107 020c 	add.w	r2, r7, #12
 800d39a:	4639      	mov	r1, r7
 800d39c:	2300      	movs	r3, #0
 800d39e:	f000 fbe1 	bl	800db64 <xQueueGenericSendFromISR>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d001      	beq.n	800d3ac <osMailPut+0x3c>
      return osErrorOS;
 800d3a8:	23ff      	movs	r3, #255	; 0xff
 800d3aa:	e018      	b.n	800d3de <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d014      	beq.n	800d3dc <osMailPut+0x6c>
 800d3b2:	4b0d      	ldr	r3, [pc, #52]	; (800d3e8 <osMailPut+0x78>)
 800d3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	e00b      	b.n	800d3dc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6858      	ldr	r0, [r3, #4]
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f000 facf 	bl	800d970 <xQueueGenericSend>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d001      	beq.n	800d3dc <osMailPut+0x6c>
      return osErrorOS;
 800d3d8:	23ff      	movs	r3, #255	; 0xff
 800d3da:	e000      	b.n	800d3de <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800d3ec:	b590      	push	{r4, r7, lr}
 800d3ee:	b08b      	sub	sp, #44	; 0x2c
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10a      	bne.n	800d418 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800d402:	2380      	movs	r3, #128	; 0x80
 800d404:	617b      	str	r3, [r7, #20]
    return event;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	461c      	mov	r4, r3
 800d40a:	f107 0314 	add.w	r3, r7, #20
 800d40e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d416:	e056      	b.n	800d4c6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d418:	2300      	movs	r3, #0
 800d41a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d426:	d103      	bne.n	800d430 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800d428:	f04f 33ff 	mov.w	r3, #4294967295
 800d42c:	627b      	str	r3, [r7, #36]	; 0x24
 800d42e:	e009      	b.n	800d444 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d006      	beq.n	800d444 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d101      	bne.n	800d444 <osMailGet+0x58>
      ticks = 1;
 800d440:	2301      	movs	r3, #1
 800d442:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d444:	f7ff fd10 	bl	800ce68 <inHandlerMode>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d01d      	beq.n	800d48a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	6858      	ldr	r0, [r3, #4]
 800d452:	f107 0220 	add.w	r2, r7, #32
 800d456:	f107 0314 	add.w	r3, r7, #20
 800d45a:	3304      	adds	r3, #4
 800d45c:	4619      	mov	r1, r3
 800d45e:	f000 fe83 	bl	800e168 <xQueueReceiveFromISR>
 800d462:	4603      	mov	r3, r0
 800d464:	2b01      	cmp	r3, #1
 800d466:	d102      	bne.n	800d46e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800d468:	2320      	movs	r3, #32
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	e001      	b.n	800d472 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01e      	beq.n	800d4b6 <osMailGet+0xca>
 800d478:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <osMailGet+0xe4>)
 800d47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	e015      	b.n	800d4b6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	6858      	ldr	r0, [r3, #4]
 800d48e:	f107 0314 	add.w	r3, r7, #20
 800d492:	3304      	adds	r3, #4
 800d494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d496:	4619      	mov	r1, r3
 800d498:	f000 fc82 	bl	800dda0 <xQueueReceive>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d102      	bne.n	800d4a8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800d4a2:	2320      	movs	r3, #32
 800d4a4:	617b      	str	r3, [r7, #20]
 800d4a6:	e006      	b.n	800d4b6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <osMailGet+0xc6>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e000      	b.n	800d4b4 <osMailGet+0xc8>
 800d4b2:	2340      	movs	r3, #64	; 0x40
 800d4b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	f107 0314 	add.w	r3, r7, #20
 800d4be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	372c      	adds	r7, #44	; 0x2c
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd90      	pop	{r4, r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	e000ed04 	.word	0xe000ed04

0800d4d4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d101      	bne.n	800d4e8 <osMailFree+0x14>
    return osErrorParameter;
 800d4e4:	2380      	movs	r3, #128	; 0x80
 800d4e6:	e006      	b.n	800d4f6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fe8f 	bl	800d212 <osPoolFree>
 800d4f4:	4603      	mov	r3, r0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3708      	adds	r7, #8
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4fe:	b480      	push	{r7}
 800d500:	b083      	sub	sp, #12
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f103 0208 	add.w	r2, r3, #8
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f04f 32ff 	mov.w	r2, #4294967295
 800d516:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f103 0208 	add.w	r2, r3, #8
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f103 0208 	add.w	r2, r3, #8
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d532:	bf00      	nop
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d53e:	b480      	push	{r7}
 800d540:	b083      	sub	sp, #12
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	689a      	ldr	r2, [r3, #8]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	601a      	str	r2, [r3, #0]
}
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d103      	bne.n	800d5c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e00c      	b.n	800d5da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e002      	b.n	800d5ce <vListInsert+0x2e>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d2f6      	bcs.n	800d5c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
}
 800d606:	bf00      	nop
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d612:	b480      	push	{r7}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	6892      	ldr	r2, [r2, #8]
 800d628:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	6852      	ldr	r2, [r2, #4]
 800d632:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d103      	bne.n	800d646 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689a      	ldr	r2, [r3, #8]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	1e5a      	subs	r2, r3, #1
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
	...

0800d668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d109      	bne.n	800d690 <xQueueGenericReset+0x28>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	60bb      	str	r3, [r7, #8]
 800d68e:	e7fe      	b.n	800d68e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d690:	f002 f82c 	bl	800f6ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d6a0:	fb01 f303 	mul.w	r3, r1, r3
 800d6a4:	441a      	add	r2, r3
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	68f9      	ldr	r1, [r7, #12]
 800d6c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d6c6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ca:	441a      	add	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	22ff      	movs	r2, #255	; 0xff
 800d6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	22ff      	movs	r2, #255	; 0xff
 800d6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d114      	bne.n	800d710 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d01a      	beq.n	800d724 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f001 fada 	bl	800ecac <xTaskRemoveFromEventList>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d012      	beq.n	800d724 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <xQueueGenericReset+0xcc>)
 800d700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	e009      	b.n	800d724 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	3310      	adds	r3, #16
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fef2 	bl	800d4fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3324      	adds	r3, #36	; 0x24
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff feed 	bl	800d4fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d724:	f002 f810 	bl	800f748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d728:	2301      	movs	r3, #1
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	e000ed04 	.word	0xe000ed04

0800d738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	; 0x38
 800d73c:	af02      	add	r7, sp, #8
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d109      	bne.n	800d760 <xQueueGenericCreateStatic+0x28>
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d75e:	e7fe      	b.n	800d75e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d109      	bne.n	800d77a <xQueueGenericCreateStatic+0x42>
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	627b      	str	r3, [r7, #36]	; 0x24
 800d778:	e7fe      	b.n	800d778 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <xQueueGenericCreateStatic+0x4e>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <xQueueGenericCreateStatic+0x52>
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <xQueueGenericCreateStatic+0x54>
 800d78a:	2300      	movs	r3, #0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d109      	bne.n	800d7a4 <xQueueGenericCreateStatic+0x6c>
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	623b      	str	r3, [r7, #32]
 800d7a2:	e7fe      	b.n	800d7a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <xQueueGenericCreateStatic+0x78>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <xQueueGenericCreateStatic+0x7c>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <xQueueGenericCreateStatic+0x7e>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d109      	bne.n	800d7ce <xQueueGenericCreateStatic+0x96>
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	61fb      	str	r3, [r7, #28]
 800d7cc:	e7fe      	b.n	800d7cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d7ce:	2348      	movs	r3, #72	; 0x48
 800d7d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2b48      	cmp	r3, #72	; 0x48
 800d7d6:	d009      	beq.n	800d7ec <xQueueGenericCreateStatic+0xb4>
 800d7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	61bb      	str	r3, [r7, #24]
 800d7ea:	e7fe      	b.n	800d7ea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00d      	beq.n	800d812 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	4613      	mov	r3, r2
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	68b9      	ldr	r1, [r7, #8]
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f842 	bl	800d896 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d814:	4618      	mov	r0, r3
 800d816:	3730      	adds	r7, #48	; 0x30
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08a      	sub	sp, #40	; 0x28
 800d820:	af02      	add	r7, sp, #8
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	4613      	mov	r3, r2
 800d828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <xQueueGenericCreate+0x28>
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	613b      	str	r3, [r7, #16]
 800d842:	e7fe      	b.n	800d842 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	e004      	b.n	800d85a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	fb02 f303 	mul.w	r3, r2, r3
 800d858:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	3348      	adds	r3, #72	; 0x48
 800d85e:	4618      	mov	r0, r3
 800d860:	f002 f85e 	bl	800f920 <pvPortMalloc>
 800d864:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00f      	beq.n	800d88c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	3348      	adds	r3, #72	; 0x48
 800d870:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d87a:	79fa      	ldrb	r2, [r7, #7]
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4613      	mov	r3, r2
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 f805 	bl	800d896 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d88c:	69bb      	ldr	r3, [r7, #24]
	}
 800d88e:	4618      	mov	r0, r3
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d103      	bne.n	800d8b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	e002      	b.n	800d8b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	69b8      	ldr	r0, [r7, #24]
 800d8c8:	f7ff fece 	bl	800d668 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d8cc:	bf00      	nop
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00e      	beq.n	800d900 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f838 	bl	800d970 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d900:	bf00      	nop
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d912:	2301      	movs	r3, #1
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	2300      	movs	r3, #0
 800d918:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d91a:	79fb      	ldrb	r3, [r7, #7]
 800d91c:	461a      	mov	r2, r3
 800d91e:	6939      	ldr	r1, [r7, #16]
 800d920:	6978      	ldr	r0, [r7, #20]
 800d922:	f7ff ff7b 	bl	800d81c <xQueueGenericCreate>
 800d926:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff ffd3 	bl	800d8d4 <prvInitialiseMutex>

		return pxNewQueue;
 800d92e:	68fb      	ldr	r3, [r7, #12]
	}
 800d930:	4618      	mov	r0, r3
 800d932:	3718      	adds	r7, #24
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af02      	add	r7, sp, #8
 800d93e:	4603      	mov	r3, r0
 800d940:	6039      	str	r1, [r7, #0]
 800d942:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d944:	2301      	movs	r3, #1
 800d946:	617b      	str	r3, [r7, #20]
 800d948:	2300      	movs	r3, #0
 800d94a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2200      	movs	r2, #0
 800d954:	6939      	ldr	r1, [r7, #16]
 800d956:	6978      	ldr	r0, [r7, #20]
 800d958:	f7ff feee 	bl	800d738 <xQueueGenericCreateStatic>
 800d95c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7ff ffb8 	bl	800d8d4 <prvInitialiseMutex>

		return pxNewQueue;
 800d964:	68fb      	ldr	r3, [r7, #12]
	}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
	...

0800d970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08e      	sub	sp, #56	; 0x38
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d97e:	2300      	movs	r3, #0
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d109      	bne.n	800d9a0 <xQueueGenericSend+0x30>
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d99e:	e7fe      	b.n	800d99e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d103      	bne.n	800d9ae <xQueueGenericSend+0x3e>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <xQueueGenericSend+0x42>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e000      	b.n	800d9b4 <xQueueGenericSend+0x44>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d109      	bne.n	800d9cc <xQueueGenericSend+0x5c>
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ca:	e7fe      	b.n	800d9ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d103      	bne.n	800d9da <xQueueGenericSend+0x6a>
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d101      	bne.n	800d9de <xQueueGenericSend+0x6e>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e000      	b.n	800d9e0 <xQueueGenericSend+0x70>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d109      	bne.n	800d9f8 <xQueueGenericSend+0x88>
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	623b      	str	r3, [r7, #32]
 800d9f6:	e7fe      	b.n	800d9f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9f8:	f001 fb14 	bl	800f024 <xTaskGetSchedulerState>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d102      	bne.n	800da08 <xQueueGenericSend+0x98>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <xQueueGenericSend+0x9c>
 800da08:	2301      	movs	r3, #1
 800da0a:	e000      	b.n	800da0e <xQueueGenericSend+0x9e>
 800da0c:	2300      	movs	r3, #0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <xQueueGenericSend+0xb6>
 800da12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	61fb      	str	r3, [r7, #28]
 800da24:	e7fe      	b.n	800da24 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da26:	f001 fe61 	bl	800f6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da32:	429a      	cmp	r2, r3
 800da34:	d302      	bcc.n	800da3c <xQueueGenericSend+0xcc>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d129      	bne.n	800da90 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da42:	f000 fc26 	bl	800e292 <prvCopyDataToQueue>
 800da46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d010      	beq.n	800da72 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	3324      	adds	r3, #36	; 0x24
 800da54:	4618      	mov	r0, r3
 800da56:	f001 f929 	bl	800ecac <xTaskRemoveFromEventList>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d013      	beq.n	800da88 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da60:	4b3f      	ldr	r3, [pc, #252]	; (800db60 <xQueueGenericSend+0x1f0>)
 800da62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	e00a      	b.n	800da88 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da74:	2b00      	cmp	r3, #0
 800da76:	d007      	beq.n	800da88 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da78:	4b39      	ldr	r3, [pc, #228]	; (800db60 <xQueueGenericSend+0x1f0>)
 800da7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da88:	f001 fe5e 	bl	800f748 <vPortExitCritical>
				return pdPASS;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e063      	b.n	800db58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d103      	bne.n	800da9e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da96:	f001 fe57 	bl	800f748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	e05c      	b.n	800db58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d106      	bne.n	800dab2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daa4:	f107 0314 	add.w	r3, r7, #20
 800daa8:	4618      	mov	r0, r3
 800daaa:	f001 f961 	bl	800ed70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daae:	2301      	movs	r3, #1
 800dab0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dab2:	f001 fe49 	bl	800f748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dab6:	f000 ff15 	bl	800e8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800daba:	f001 fe17 	bl	800f6ec <vPortEnterCritical>
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daca:	d103      	bne.n	800dad4 <xQueueGenericSend+0x164>
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dada:	b25b      	sxtb	r3, r3
 800dadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae0:	d103      	bne.n	800daea <xQueueGenericSend+0x17a>
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daea:	f001 fe2d 	bl	800f748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daee:	1d3a      	adds	r2, r7, #4
 800daf0:	f107 0314 	add.w	r3, r7, #20
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f001 f950 	bl	800ed9c <xTaskCheckForTimeOut>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d124      	bne.n	800db4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db04:	f000 fcbd 	bl	800e482 <prvIsQueueFull>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d018      	beq.n	800db40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	3310      	adds	r3, #16
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f001 f8a4 	bl	800ec64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db1e:	f000 fc48 	bl	800e3b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db22:	f000 feed 	bl	800e900 <xTaskResumeAll>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f47f af7c 	bne.w	800da26 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800db2e:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <xQueueGenericSend+0x1f0>)
 800db30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	e772      	b.n	800da26 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db42:	f000 fc36 	bl	800e3b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db46:	f000 fedb 	bl	800e900 <xTaskResumeAll>
 800db4a:	e76c      	b.n	800da26 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db4e:	f000 fc30 	bl	800e3b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db52:	f000 fed5 	bl	800e900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db56:	2300      	movs	r3, #0
		}
	}
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3738      	adds	r7, #56	; 0x38
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	e000ed04 	.word	0xe000ed04

0800db64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08e      	sub	sp, #56	; 0x38
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d109      	bne.n	800db90 <xQueueGenericSendFromISR+0x2c>
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
 800db8e:	e7fe      	b.n	800db8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <xQueueGenericSendFromISR+0x3a>
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <xQueueGenericSendFromISR+0x3e>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e000      	b.n	800dba4 <xQueueGenericSendFromISR+0x40>
 800dba2:	2300      	movs	r3, #0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d109      	bne.n	800dbbc <xQueueGenericSendFromISR+0x58>
 800dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	623b      	str	r3, [r7, #32]
 800dbba:	e7fe      	b.n	800dbba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d103      	bne.n	800dbca <xQueueGenericSendFromISR+0x66>
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d101      	bne.n	800dbce <xQueueGenericSendFromISR+0x6a>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e000      	b.n	800dbd0 <xQueueGenericSendFromISR+0x6c>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <xQueueGenericSendFromISR+0x84>
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	61fb      	str	r3, [r7, #28]
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbe8:	f001 fe5c 	bl	800f8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800dbec:	f3ef 8211 	mrs	r2, BASEPRI
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	61ba      	str	r2, [r7, #24]
 800dc02:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d302      	bcc.n	800dc1a <xQueueGenericSendFromISR+0xb6>
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d12c      	bne.n	800dc74 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	68b9      	ldr	r1, [r7, #8]
 800dc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc2a:	f000 fb32 	bl	800e292 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc2e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d112      	bne.n	800dc5e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d016      	beq.n	800dc6e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	3324      	adds	r3, #36	; 0x24
 800dc44:	4618      	mov	r0, r3
 800dc46:	f001 f831 	bl	800ecac <xTaskRemoveFromEventList>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00e      	beq.n	800dc6e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	e007      	b.n	800dc6e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc62:	3301      	adds	r3, #1
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	b25a      	sxtb	r2, r3
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dc72:	e001      	b.n	800dc78 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	637b      	str	r3, [r7, #52]	; 0x34
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3738      	adds	r7, #56	; 0x38
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08e      	sub	sp, #56	; 0x38
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d109      	bne.n	800dcb4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	623b      	str	r3, [r7, #32]
 800dcb2:	e7fe      	b.n	800dcb2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <xQueueGiveFromISR+0x44>
 800dcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	61fb      	str	r3, [r7, #28]
 800dcce:	e7fe      	b.n	800dcce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d103      	bne.n	800dce0 <xQueueGiveFromISR+0x54>
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <xQueueGiveFromISR+0x58>
 800dce0:	2301      	movs	r3, #1
 800dce2:	e000      	b.n	800dce6 <xQueueGiveFromISR+0x5a>
 800dce4:	2300      	movs	r3, #0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d109      	bne.n	800dcfe <xQueueGiveFromISR+0x72>
 800dcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	61bb      	str	r3, [r7, #24]
 800dcfc:	e7fe      	b.n	800dcfc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcfe:	f001 fdd1 	bl	800f8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800dd02:	f3ef 8211 	mrs	r2, BASEPRI
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	617a      	str	r2, [r7, #20]
 800dd18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dd1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d22b      	bcs.n	800dd86 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d112      	bne.n	800dd70 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d016      	beq.n	800dd80 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd54:	3324      	adds	r3, #36	; 0x24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f000 ffa8 	bl	800ecac <xTaskRemoveFromEventList>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00e      	beq.n	800dd80 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00b      	beq.n	800dd80 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	e007      	b.n	800dd80 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd74:	3301      	adds	r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	b25a      	sxtb	r2, r3
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dd80:	2301      	movs	r3, #1
 800dd82:	637b      	str	r3, [r7, #52]	; 0x34
 800dd84:	e001      	b.n	800dd8a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd86:	2300      	movs	r3, #0
 800dd88:	637b      	str	r3, [r7, #52]	; 0x34
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3738      	adds	r7, #56	; 0x38
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08c      	sub	sp, #48	; 0x30
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d109      	bne.n	800ddce <xQueueReceive+0x2e>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	623b      	str	r3, [r7, #32]
 800ddcc:	e7fe      	b.n	800ddcc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d103      	bne.n	800dddc <xQueueReceive+0x3c>
 800ddd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <xQueueReceive+0x40>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <xQueueReceive+0x42>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d109      	bne.n	800ddfa <xQueueReceive+0x5a>
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	e7fe      	b.n	800ddf8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddfa:	f001 f913 	bl	800f024 <xTaskGetSchedulerState>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <xQueueReceive+0x6a>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <xQueueReceive+0x6e>
 800de0a:	2301      	movs	r3, #1
 800de0c:	e000      	b.n	800de10 <xQueueReceive+0x70>
 800de0e:	2300      	movs	r3, #0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d109      	bne.n	800de28 <xQueueReceive+0x88>
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	61bb      	str	r3, [r7, #24]
 800de26:	e7fe      	b.n	800de26 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800de28:	f001 fc60 	bl	800f6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01f      	beq.n	800de78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de3c:	f000 fa93 	bl	800e366 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	1e5a      	subs	r2, r3, #1
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00f      	beq.n	800de70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	3310      	adds	r3, #16
 800de54:	4618      	mov	r0, r3
 800de56:	f000 ff29 	bl	800ecac <xTaskRemoveFromEventList>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d007      	beq.n	800de70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de60:	4b3c      	ldr	r3, [pc, #240]	; (800df54 <xQueueReceive+0x1b4>)
 800de62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de70:	f001 fc6a 	bl	800f748 <vPortExitCritical>
				return pdPASS;
 800de74:	2301      	movs	r3, #1
 800de76:	e069      	b.n	800df4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d103      	bne.n	800de86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de7e:	f001 fc63 	bl	800f748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de82:	2300      	movs	r3, #0
 800de84:	e062      	b.n	800df4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d106      	bne.n	800de9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de8c:	f107 0310 	add.w	r3, r7, #16
 800de90:	4618      	mov	r0, r3
 800de92:	f000 ff6d 	bl	800ed70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de96:	2301      	movs	r3, #1
 800de98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de9a:	f001 fc55 	bl	800f748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de9e:	f000 fd21 	bl	800e8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dea2:	f001 fc23 	bl	800f6ec <vPortEnterCritical>
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deac:	b25b      	sxtb	r3, r3
 800deae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb2:	d103      	bne.n	800debc <xQueueReceive+0x11c>
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dec2:	b25b      	sxtb	r3, r3
 800dec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec8:	d103      	bne.n	800ded2 <xQueueReceive+0x132>
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ded2:	f001 fc39 	bl	800f748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ded6:	1d3a      	adds	r2, r7, #4
 800ded8:	f107 0310 	add.w	r3, r7, #16
 800dedc:	4611      	mov	r1, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 ff5c 	bl	800ed9c <xTaskCheckForTimeOut>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d123      	bne.n	800df32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deec:	f000 fab3 	bl	800e456 <prvIsQueueEmpty>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d017      	beq.n	800df26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	3324      	adds	r3, #36	; 0x24
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f000 feb0 	bl	800ec64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df06:	f000 fa54 	bl	800e3b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df0a:	f000 fcf9 	bl	800e900 <xTaskResumeAll>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d189      	bne.n	800de28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <xQueueReceive+0x1b4>)
 800df16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	e780      	b.n	800de28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df28:	f000 fa43 	bl	800e3b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df2c:	f000 fce8 	bl	800e900 <xTaskResumeAll>
 800df30:	e77a      	b.n	800de28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df34:	f000 fa3d 	bl	800e3b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df38:	f000 fce2 	bl	800e900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df3e:	f000 fa8a 	bl	800e456 <prvIsQueueEmpty>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	f43f af6f 	beq.w	800de28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3730      	adds	r7, #48	; 0x30
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08e      	sub	sp, #56	; 0x38
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df62:	2300      	movs	r3, #0
 800df64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df6a:	2300      	movs	r3, #0
 800df6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d109      	bne.n	800df88 <xQueueSemaphoreTake+0x30>
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	623b      	str	r3, [r7, #32]
 800df86:	e7fe      	b.n	800df86 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d009      	beq.n	800dfa4 <xQueueSemaphoreTake+0x4c>
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	e7fe      	b.n	800dfa2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfa4:	f001 f83e 	bl	800f024 <xTaskGetSchedulerState>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d102      	bne.n	800dfb4 <xQueueSemaphoreTake+0x5c>
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <xQueueSemaphoreTake+0x60>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <xQueueSemaphoreTake+0x62>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d109      	bne.n	800dfd2 <xQueueSemaphoreTake+0x7a>
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	61bb      	str	r3, [r7, #24]
 800dfd0:	e7fe      	b.n	800dfd0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfd2:	f001 fb8b 	bl	800f6ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d024      	beq.n	800e02c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	1e5a      	subs	r2, r3, #1
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d104      	bne.n	800dffc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dff2:	f001 f9dd 	bl	800f3b0 <pvTaskIncrementMutexHeldCount>
 800dff6:	4602      	mov	r2, r0
 800dff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	691b      	ldr	r3, [r3, #16]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00f      	beq.n	800e024 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	3310      	adds	r3, #16
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 fe4f 	bl	800ecac <xTaskRemoveFromEventList>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d007      	beq.n	800e024 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e014:	4b53      	ldr	r3, [pc, #332]	; (800e164 <xQueueSemaphoreTake+0x20c>)
 800e016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e024:	f001 fb90 	bl	800f748 <vPortExitCritical>
				return pdPASS;
 800e028:	2301      	movs	r3, #1
 800e02a:	e096      	b.n	800e15a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d110      	bne.n	800e054 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	2b00      	cmp	r3, #0
 800e036:	d009      	beq.n	800e04c <xQueueSemaphoreTake+0xf4>
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	617b      	str	r3, [r7, #20]
 800e04a:	e7fe      	b.n	800e04a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e04c:	f001 fb7c 	bl	800f748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e050:	2300      	movs	r3, #0
 800e052:	e082      	b.n	800e15a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e056:	2b00      	cmp	r3, #0
 800e058:	d106      	bne.n	800e068 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e05a:	f107 030c 	add.w	r3, r7, #12
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 fe86 	bl	800ed70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e064:	2301      	movs	r3, #1
 800e066:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e068:	f001 fb6e 	bl	800f748 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e06c:	f000 fc3a 	bl	800e8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e070:	f001 fb3c 	bl	800f6ec <vPortEnterCritical>
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e07a:	b25b      	sxtb	r3, r3
 800e07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e080:	d103      	bne.n	800e08a <xQueueSemaphoreTake+0x132>
 800e082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e090:	b25b      	sxtb	r3, r3
 800e092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e096:	d103      	bne.n	800e0a0 <xQueueSemaphoreTake+0x148>
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0a0:	f001 fb52 	bl	800f748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	f107 030c 	add.w	r3, r7, #12
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f000 fe75 	bl	800ed9c <xTaskCheckForTimeOut>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d132      	bne.n	800e11e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0ba:	f000 f9cc 	bl	800e456 <prvIsQueueEmpty>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d026      	beq.n	800e112 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d109      	bne.n	800e0e0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e0cc:	f001 fb0e 	bl	800f6ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 ffc3 	bl	800f060 <xTaskPriorityInherit>
 800e0da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e0dc:	f001 fb34 	bl	800f748 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	3324      	adds	r3, #36	; 0x24
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f000 fdbb 	bl	800ec64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0f0:	f000 f95f 	bl	800e3b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0f4:	f000 fc04 	bl	800e900 <xTaskResumeAll>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f47f af69 	bne.w	800dfd2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e100:	4b18      	ldr	r3, [pc, #96]	; (800e164 <xQueueSemaphoreTake+0x20c>)
 800e102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	e75f      	b.n	800dfd2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e114:	f000 f94d 	bl	800e3b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e118:	f000 fbf2 	bl	800e900 <xTaskResumeAll>
 800e11c:	e759      	b.n	800dfd2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e11e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e120:	f000 f947 	bl	800e3b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e124:	f000 fbec 	bl	800e900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e12a:	f000 f994 	bl	800e456 <prvIsQueueEmpty>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	f43f af4e 	beq.w	800dfd2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00d      	beq.n	800e158 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e13c:	f001 fad6 	bl	800f6ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e142:	f000 f88e 	bl	800e262 <prvGetDisinheritPriorityAfterTimeout>
 800e146:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e14e:	4618      	mov	r0, r3
 800e150:	f001 f890 	bl	800f274 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e154:	f001 faf8 	bl	800f748 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3738      	adds	r7, #56	; 0x38
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	e000ed04 	.word	0xe000ed04

0800e168 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08e      	sub	sp, #56	; 0x38
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d109      	bne.n	800e192 <xQueueReceiveFromISR+0x2a>
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	623b      	str	r3, [r7, #32]
 800e190:	e7fe      	b.n	800e190 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <xQueueReceiveFromISR+0x38>
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <xQueueReceiveFromISR+0x3c>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e000      	b.n	800e1a6 <xQueueReceiveFromISR+0x3e>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d109      	bne.n	800e1be <xQueueReceiveFromISR+0x56>
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	61fb      	str	r3, [r7, #28]
 800e1bc:	e7fe      	b.n	800e1bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1be:	f001 fb71 	bl	800f8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800e1c2:	f3ef 8211 	mrs	r2, BASEPRI
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	61ba      	str	r2, [r7, #24]
 800e1d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d02f      	beq.n	800e24a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1f4:	68b9      	ldr	r1, [r7, #8]
 800e1f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1f8:	f000 f8b5 	bl	800e366 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	1e5a      	subs	r2, r3, #1
 800e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e202:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e20c:	d112      	bne.n	800e234 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d016      	beq.n	800e244 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	3310      	adds	r3, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f000 fd46 	bl	800ecac <xTaskRemoveFromEventList>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00e      	beq.n	800e244 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	e007      	b.n	800e244 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e238:	3301      	adds	r3, #1
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	b25a      	sxtb	r2, r3
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e244:	2301      	movs	r3, #1
 800e246:	637b      	str	r3, [r7, #52]	; 0x34
 800e248:	e001      	b.n	800e24e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	637b      	str	r3, [r7, #52]	; 0x34
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3738      	adds	r7, #56	; 0x38
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e262:	b480      	push	{r7}
 800e264:	b085      	sub	sp, #20
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d006      	beq.n	800e280 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f1c3 0307 	rsb	r3, r3, #7
 800e27c:	60fb      	str	r3, [r7, #12]
 800e27e:	e001      	b.n	800e284 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e280:	2300      	movs	r3, #0
 800e282:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e284:	68fb      	ldr	r3, [r7, #12]
	}
 800e286:	4618      	mov	r0, r3
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b086      	sub	sp, #24
 800e296:	af00      	add	r7, sp, #0
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	60b9      	str	r1, [r7, #8]
 800e29c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10d      	bne.n	800e2cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d14d      	bne.n	800e354 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 ff55 	bl	800f16c <xTaskPriorityDisinherit>
 800e2c2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	605a      	str	r2, [r3, #4]
 800e2ca:	e043      	b.n	800e354 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d119      	bne.n	800e306 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6898      	ldr	r0, [r3, #8]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2da:	461a      	mov	r2, r3
 800e2dc:	68b9      	ldr	r1, [r7, #8]
 800e2de:	f002 fa6f 	bl	80107c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	689a      	ldr	r2, [r3, #8]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ea:	441a      	add	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	689a      	ldr	r2, [r3, #8]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d32b      	bcc.n	800e354 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	609a      	str	r2, [r3, #8]
 800e304:	e026      	b.n	800e354 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68d8      	ldr	r0, [r3, #12]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e30e:	461a      	mov	r2, r3
 800e310:	68b9      	ldr	r1, [r7, #8]
 800e312:	f002 fa55 	bl	80107c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	68da      	ldr	r2, [r3, #12]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e31e:	425b      	negs	r3, r3
 800e320:	441a      	add	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68da      	ldr	r2, [r3, #12]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d207      	bcs.n	800e342 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	685a      	ldr	r2, [r3, #4]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e33a:	425b      	negs	r3, r3
 800e33c:	441a      	add	r2, r3
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b02      	cmp	r3, #2
 800e346:	d105      	bne.n	800e354 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d002      	beq.n	800e354 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	3b01      	subs	r3, #1
 800e352:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e35c:	697b      	ldr	r3, [r7, #20]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d018      	beq.n	800e3aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e380:	441a      	add	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68da      	ldr	r2, [r3, #12]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d303      	bcc.n	800e39a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68d9      	ldr	r1, [r3, #12]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	6838      	ldr	r0, [r7, #0]
 800e3a6:	f002 fa0b 	bl	80107c0 <memcpy>
	}
}
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e3ba:	f001 f997 	bl	800f6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3c6:	e011      	b.n	800e3ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d012      	beq.n	800e3f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3324      	adds	r3, #36	; 0x24
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 fc69 	bl	800ecac <xTaskRemoveFromEventList>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3e0:	f000 fd3c 	bl	800ee5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	dce9      	bgt.n	800e3c8 <prvUnlockQueue+0x16>
 800e3f4:	e000      	b.n	800e3f8 <prvUnlockQueue+0x46>
					break;
 800e3f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	22ff      	movs	r2, #255	; 0xff
 800e3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e400:	f001 f9a2 	bl	800f748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e404:	f001 f972 	bl	800f6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e40e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e410:	e011      	b.n	800e436 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d012      	beq.n	800e440 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	3310      	adds	r3, #16
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fc44 	bl	800ecac <xTaskRemoveFromEventList>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e42a:	f000 fd17 	bl	800ee5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	3b01      	subs	r3, #1
 800e432:	b2db      	uxtb	r3, r3
 800e434:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dce9      	bgt.n	800e412 <prvUnlockQueue+0x60>
 800e43e:	e000      	b.n	800e442 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e440:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	22ff      	movs	r2, #255	; 0xff
 800e446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e44a:	f001 f97d 	bl	800f748 <vPortExitCritical>
}
 800e44e:	bf00      	nop
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e45e:	f001 f945 	bl	800f6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e466:	2b00      	cmp	r3, #0
 800e468:	d102      	bne.n	800e470 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e46a:	2301      	movs	r3, #1
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	e001      	b.n	800e474 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e474:	f001 f968 	bl	800f748 <vPortExitCritical>

	return xReturn;
 800e478:	68fb      	ldr	r3, [r7, #12]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e48a:	f001 f92f 	bl	800f6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e496:	429a      	cmp	r2, r3
 800e498:	d102      	bne.n	800e4a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e49a:	2301      	movs	r3, #1
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	e001      	b.n	800e4a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4a4:	f001 f950 	bl	800f748 <vPortExitCritical>

	return xReturn;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b08e      	sub	sp, #56	; 0x38
 800e4b6:	af04      	add	r7, sp, #16
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	607a      	str	r2, [r7, #4]
 800e4be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d109      	bne.n	800e4da <xTaskCreateStatic+0x28>
	__asm volatile
 800e4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	623b      	str	r3, [r7, #32]
 800e4d8:	e7fe      	b.n	800e4d8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d109      	bne.n	800e4f4 <xTaskCreateStatic+0x42>
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	61fb      	str	r3, [r7, #28]
 800e4f2:	e7fe      	b.n	800e4f2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4f4:	2354      	movs	r3, #84	; 0x54
 800e4f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	2b54      	cmp	r3, #84	; 0x54
 800e4fc:	d009      	beq.n	800e512 <xTaskCreateStatic+0x60>
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	61bb      	str	r3, [r7, #24]
 800e510:	e7fe      	b.n	800e510 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01e      	beq.n	800e556 <xTaskCreateStatic+0xa4>
 800e518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d01b      	beq.n	800e556 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e526:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e530:	2300      	movs	r3, #0
 800e532:	9303      	str	r3, [sp, #12]
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	9302      	str	r3, [sp, #8]
 800e538:	f107 0314 	add.w	r3, r7, #20
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	68b9      	ldr	r1, [r7, #8]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 f850 	bl	800e5ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e54e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e550:	f000 f8cc 	bl	800e6ec <prvAddNewTaskToReadyList>
 800e554:	e001      	b.n	800e55a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800e556:	2300      	movs	r3, #0
 800e558:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e55a:	697b      	ldr	r3, [r7, #20]
	}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3728      	adds	r7, #40	; 0x28
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08c      	sub	sp, #48	; 0x30
 800e568:	af04      	add	r7, sp, #16
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	603b      	str	r3, [r7, #0]
 800e570:	4613      	mov	r3, r2
 800e572:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4618      	mov	r0, r3
 800e57a:	f001 f9d1 	bl	800f920 <pvPortMalloc>
 800e57e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00e      	beq.n	800e5a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e586:	2054      	movs	r0, #84	; 0x54
 800e588:	f001 f9ca 	bl	800f920 <pvPortMalloc>
 800e58c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d003      	beq.n	800e59c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	631a      	str	r2, [r3, #48]	; 0x30
 800e59a:	e005      	b.n	800e5a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e59c:	6978      	ldr	r0, [r7, #20]
 800e59e:	f001 fa81 	bl	800faa4 <vPortFree>
 800e5a2:	e001      	b.n	800e5a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d017      	beq.n	800e5de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e5b6:	88fa      	ldrh	r2, [r7, #6]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	9303      	str	r3, [sp, #12]
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	9302      	str	r3, [sp, #8]
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	9301      	str	r3, [sp, #4]
 800e5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	68b9      	ldr	r1, [r7, #8]
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 f80e 	bl	800e5ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5d2:	69f8      	ldr	r0, [r7, #28]
 800e5d4:	f000 f88a 	bl	800e6ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	61bb      	str	r3, [r7, #24]
 800e5dc:	e002      	b.n	800e5e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5de:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5e4:	69bb      	ldr	r3, [r7, #24]
	}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3720      	adds	r7, #32
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b088      	sub	sp, #32
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	60f8      	str	r0, [r7, #12]
 800e5f6:	60b9      	str	r1, [r7, #8]
 800e5f8:	607a      	str	r2, [r7, #4]
 800e5fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e606:	3b01      	subs	r3, #1
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	f023 0307 	bic.w	r3, r3, #7
 800e614:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	f003 0307 	and.w	r3, r3, #7
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d009      	beq.n	800e634 <prvInitialiseNewTask+0x46>
 800e620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	617b      	str	r3, [r7, #20]
 800e632:	e7fe      	b.n	800e632 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e634:	2300      	movs	r3, #0
 800e636:	61fb      	str	r3, [r7, #28]
 800e638:	e012      	b.n	800e660 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	4413      	add	r3, r2
 800e640:	7819      	ldrb	r1, [r3, #0]
 800e642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	4413      	add	r3, r2
 800e648:	3334      	adds	r3, #52	; 0x34
 800e64a:	460a      	mov	r2, r1
 800e64c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	4413      	add	r3, r2
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d006      	beq.n	800e668 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	3301      	adds	r3, #1
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	2b0f      	cmp	r3, #15
 800e664:	d9e9      	bls.n	800e63a <prvInitialiseNewTask+0x4c>
 800e666:	e000      	b.n	800e66a <prvInitialiseNewTask+0x7c>
		{
			break;
 800e668:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	2b06      	cmp	r3, #6
 800e676:	d901      	bls.n	800e67c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e678:	2306      	movs	r3, #6
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e680:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e686:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	2200      	movs	r2, #0
 800e68c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	3304      	adds	r3, #4
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe ff53 	bl	800d53e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	3318      	adds	r3, #24
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fe ff4e 	bl	800d53e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	f1c3 0207 	rsb	r2, r3, #7
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	68f9      	ldr	r1, [r7, #12]
 800e6ca:	69b8      	ldr	r0, [r7, #24]
 800e6cc:	f000 feea 	bl	800f4a4 <pxPortInitialiseStack>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6e2:	bf00      	nop
 800e6e4:	3720      	adds	r7, #32
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
	...

0800e6ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6f4:	f000 fffa 	bl	800f6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6f8:	4b2a      	ldr	r3, [pc, #168]	; (800e7a4 <prvAddNewTaskToReadyList+0xb8>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	4a29      	ldr	r2, [pc, #164]	; (800e7a4 <prvAddNewTaskToReadyList+0xb8>)
 800e700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e702:	4b29      	ldr	r3, [pc, #164]	; (800e7a8 <prvAddNewTaskToReadyList+0xbc>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d109      	bne.n	800e71e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e70a:	4a27      	ldr	r2, [pc, #156]	; (800e7a8 <prvAddNewTaskToReadyList+0xbc>)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e710:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <prvAddNewTaskToReadyList+0xb8>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d110      	bne.n	800e73a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e718:	f000 fbc4 	bl	800eea4 <prvInitialiseTaskLists>
 800e71c:	e00d      	b.n	800e73a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e71e:	4b23      	ldr	r3, [pc, #140]	; (800e7ac <prvAddNewTaskToReadyList+0xc0>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d109      	bne.n	800e73a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e726:	4b20      	ldr	r3, [pc, #128]	; (800e7a8 <prvAddNewTaskToReadyList+0xbc>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e730:	429a      	cmp	r2, r3
 800e732:	d802      	bhi.n	800e73a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e734:	4a1c      	ldr	r2, [pc, #112]	; (800e7a8 <prvAddNewTaskToReadyList+0xbc>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e73a:	4b1d      	ldr	r3, [pc, #116]	; (800e7b0 <prvAddNewTaskToReadyList+0xc4>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3301      	adds	r3, #1
 800e740:	4a1b      	ldr	r2, [pc, #108]	; (800e7b0 <prvAddNewTaskToReadyList+0xc4>)
 800e742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	2201      	movs	r2, #1
 800e74a:	409a      	lsls	r2, r3
 800e74c:	4b19      	ldr	r3, [pc, #100]	; (800e7b4 <prvAddNewTaskToReadyList+0xc8>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4313      	orrs	r3, r2
 800e752:	4a18      	ldr	r2, [pc, #96]	; (800e7b4 <prvAddNewTaskToReadyList+0xc8>)
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4a15      	ldr	r2, [pc, #84]	; (800e7b8 <prvAddNewTaskToReadyList+0xcc>)
 800e764:	441a      	add	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f7fe fef3 	bl	800d558 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e772:	f000 ffe9 	bl	800f748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e776:	4b0d      	ldr	r3, [pc, #52]	; (800e7ac <prvAddNewTaskToReadyList+0xc0>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00e      	beq.n	800e79c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e77e:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <prvAddNewTaskToReadyList+0xbc>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	429a      	cmp	r2, r3
 800e78a:	d207      	bcs.n	800e79c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e78c:	4b0b      	ldr	r3, [pc, #44]	; (800e7bc <prvAddNewTaskToReadyList+0xd0>)
 800e78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20001580 	.word	0x20001580
 800e7a8:	20001480 	.word	0x20001480
 800e7ac:	2000158c 	.word	0x2000158c
 800e7b0:	2000159c 	.word	0x2000159c
 800e7b4:	20001588 	.word	0x20001588
 800e7b8:	20001484 	.word	0x20001484
 800e7bc:	e000ed04 	.word	0xe000ed04

0800e7c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d016      	beq.n	800e800 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e7d2:	4b13      	ldr	r3, [pc, #76]	; (800e820 <vTaskDelay+0x60>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d009      	beq.n	800e7ee <vTaskDelay+0x2e>
 800e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	60bb      	str	r3, [r7, #8]
 800e7ec:	e7fe      	b.n	800e7ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e7ee:	f000 f879 	bl	800e8e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fdef 	bl	800f3d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e7fa:	f000 f881 	bl	800e900 <xTaskResumeAll>
 800e7fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d107      	bne.n	800e816 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e806:	4b07      	ldr	r3, [pc, #28]	; (800e824 <vTaskDelay+0x64>)
 800e808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e80c:	601a      	str	r2, [r3, #0]
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	200015a8 	.word	0x200015a8
 800e824:	e000ed04 	.word	0xe000ed04

0800e828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b08a      	sub	sp, #40	; 0x28
 800e82c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e836:	463a      	mov	r2, r7
 800e838:	1d39      	adds	r1, r7, #4
 800e83a:	f107 0308 	add.w	r3, r7, #8
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f3 fb00 	bl	8001e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e844:	6839      	ldr	r1, [r7, #0]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	9202      	str	r2, [sp, #8]
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	2300      	movs	r3, #0
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	460a      	mov	r2, r1
 800e856:	491d      	ldr	r1, [pc, #116]	; (800e8cc <vTaskStartScheduler+0xa4>)
 800e858:	481d      	ldr	r0, [pc, #116]	; (800e8d0 <vTaskStartScheduler+0xa8>)
 800e85a:	f7ff fe2a 	bl	800e4b2 <xTaskCreateStatic>
 800e85e:	4602      	mov	r2, r0
 800e860:	4b1c      	ldr	r3, [pc, #112]	; (800e8d4 <vTaskStartScheduler+0xac>)
 800e862:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e864:	4b1b      	ldr	r3, [pc, #108]	; (800e8d4 <vTaskStartScheduler+0xac>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e86c:	2301      	movs	r3, #1
 800e86e:	617b      	str	r3, [r7, #20]
 800e870:	e001      	b.n	800e876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d115      	bne.n	800e8a8 <vTaskStartScheduler+0x80>
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e88e:	4b12      	ldr	r3, [pc, #72]	; (800e8d8 <vTaskStartScheduler+0xb0>)
 800e890:	f04f 32ff 	mov.w	r2, #4294967295
 800e894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e896:	4b11      	ldr	r3, [pc, #68]	; (800e8dc <vTaskStartScheduler+0xb4>)
 800e898:	2201      	movs	r2, #1
 800e89a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e89c:	4b10      	ldr	r3, [pc, #64]	; (800e8e0 <vTaskStartScheduler+0xb8>)
 800e89e:	2200      	movs	r2, #0
 800e8a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e8a2:	f000 fe85 	bl	800f5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e8a6:	e00d      	b.n	800e8c4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ae:	d109      	bne.n	800e8c4 <vTaskStartScheduler+0x9c>
 800e8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	60fb      	str	r3, [r7, #12]
 800e8c2:	e7fe      	b.n	800e8c2 <vTaskStartScheduler+0x9a>
}
 800e8c4:	bf00      	nop
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	08015ef8 	.word	0x08015ef8
 800e8d0:	0800ee75 	.word	0x0800ee75
 800e8d4:	200015a4 	.word	0x200015a4
 800e8d8:	200015a0 	.word	0x200015a0
 800e8dc:	2000158c 	.word	0x2000158c
 800e8e0:	20001584 	.word	0x20001584

0800e8e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e8e8:	4b04      	ldr	r3, [pc, #16]	; (800e8fc <vTaskSuspendAll+0x18>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	4a03      	ldr	r2, [pc, #12]	; (800e8fc <vTaskSuspendAll+0x18>)
 800e8f0:	6013      	str	r3, [r2, #0]
}
 800e8f2:	bf00      	nop
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	200015a8 	.word	0x200015a8

0800e900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e90a:	2300      	movs	r3, #0
 800e90c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e90e:	4b41      	ldr	r3, [pc, #260]	; (800ea14 <xTaskResumeAll+0x114>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d109      	bne.n	800e92a <xTaskResumeAll+0x2a>
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	e7fe      	b.n	800e928 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e92a:	f000 fedf 	bl	800f6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e92e:	4b39      	ldr	r3, [pc, #228]	; (800ea14 <xTaskResumeAll+0x114>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3b01      	subs	r3, #1
 800e934:	4a37      	ldr	r2, [pc, #220]	; (800ea14 <xTaskResumeAll+0x114>)
 800e936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e938:	4b36      	ldr	r3, [pc, #216]	; (800ea14 <xTaskResumeAll+0x114>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d161      	bne.n	800ea04 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e940:	4b35      	ldr	r3, [pc, #212]	; (800ea18 <xTaskResumeAll+0x118>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d05d      	beq.n	800ea04 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e948:	e02e      	b.n	800e9a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e94a:	4b34      	ldr	r3, [pc, #208]	; (800ea1c <xTaskResumeAll+0x11c>)
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3318      	adds	r3, #24
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fe5b 	bl	800d612 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3304      	adds	r3, #4
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe fe56 	bl	800d612 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96a:	2201      	movs	r2, #1
 800e96c:	409a      	lsls	r2, r3
 800e96e:	4b2c      	ldr	r3, [pc, #176]	; (800ea20 <xTaskResumeAll+0x120>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4313      	orrs	r3, r2
 800e974:	4a2a      	ldr	r2, [pc, #168]	; (800ea20 <xTaskResumeAll+0x120>)
 800e976:	6013      	str	r3, [r2, #0]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97c:	4613      	mov	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4413      	add	r3, r2
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	4a27      	ldr	r2, [pc, #156]	; (800ea24 <xTaskResumeAll+0x124>)
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	3304      	adds	r3, #4
 800e98c:	4619      	mov	r1, r3
 800e98e:	4610      	mov	r0, r2
 800e990:	f7fe fde2 	bl	800d558 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e998:	4b23      	ldr	r3, [pc, #140]	; (800ea28 <xTaskResumeAll+0x128>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d302      	bcc.n	800e9a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800e9a2:	4b22      	ldr	r3, [pc, #136]	; (800ea2c <xTaskResumeAll+0x12c>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9a8:	4b1c      	ldr	r3, [pc, #112]	; (800ea1c <xTaskResumeAll+0x11c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1cc      	bne.n	800e94a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e9b6:	f000 fb0f 	bl	800efd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ea30 <xTaskResumeAll+0x130>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d010      	beq.n	800e9e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e9c6:	f000 f837 	bl	800ea38 <xTaskIncrementTick>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800e9d0:	4b16      	ldr	r3, [pc, #88]	; (800ea2c <xTaskResumeAll+0x12c>)
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1f1      	bne.n	800e9c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800e9e2:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <xTaskResumeAll+0x130>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e9e8:	4b10      	ldr	r3, [pc, #64]	; (800ea2c <xTaskResumeAll+0x12c>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d009      	beq.n	800ea04 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	; (800ea34 <xTaskResumeAll+0x134>)
 800e9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea04:	f000 fea0 	bl	800f748 <vPortExitCritical>

	return xAlreadyYielded;
 800ea08:	68bb      	ldr	r3, [r7, #8]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	200015a8 	.word	0x200015a8
 800ea18:	20001580 	.word	0x20001580
 800ea1c:	20001540 	.word	0x20001540
 800ea20:	20001588 	.word	0x20001588
 800ea24:	20001484 	.word	0x20001484
 800ea28:	20001480 	.word	0x20001480
 800ea2c:	20001594 	.word	0x20001594
 800ea30:	20001590 	.word	0x20001590
 800ea34:	e000ed04 	.word	0xe000ed04

0800ea38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea42:	4b50      	ldr	r3, [pc, #320]	; (800eb84 <xTaskIncrementTick+0x14c>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f040 808c 	bne.w	800eb64 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea4c:	4b4e      	ldr	r3, [pc, #312]	; (800eb88 <xTaskIncrementTick+0x150>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3301      	adds	r3, #1
 800ea52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea54:	4a4c      	ldr	r2, [pc, #304]	; (800eb88 <xTaskIncrementTick+0x150>)
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d11f      	bne.n	800eaa0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea60:	4b4a      	ldr	r3, [pc, #296]	; (800eb8c <xTaskIncrementTick+0x154>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d009      	beq.n	800ea7e <xTaskIncrementTick+0x46>
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	603b      	str	r3, [r7, #0]
 800ea7c:	e7fe      	b.n	800ea7c <xTaskIncrementTick+0x44>
 800ea7e:	4b43      	ldr	r3, [pc, #268]	; (800eb8c <xTaskIncrementTick+0x154>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	4b42      	ldr	r3, [pc, #264]	; (800eb90 <xTaskIncrementTick+0x158>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a40      	ldr	r2, [pc, #256]	; (800eb8c <xTaskIncrementTick+0x154>)
 800ea8a:	6013      	str	r3, [r2, #0]
 800ea8c:	4a40      	ldr	r2, [pc, #256]	; (800eb90 <xTaskIncrementTick+0x158>)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	4b40      	ldr	r3, [pc, #256]	; (800eb94 <xTaskIncrementTick+0x15c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	3301      	adds	r3, #1
 800ea98:	4a3e      	ldr	r2, [pc, #248]	; (800eb94 <xTaskIncrementTick+0x15c>)
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	f000 fa9c 	bl	800efd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eaa0:	4b3d      	ldr	r3, [pc, #244]	; (800eb98 <xTaskIncrementTick+0x160>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d34d      	bcc.n	800eb46 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaaa:	4b38      	ldr	r3, [pc, #224]	; (800eb8c <xTaskIncrementTick+0x154>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <xTaskIncrementTick+0x80>
 800eab4:	2301      	movs	r3, #1
 800eab6:	e000      	b.n	800eaba <xTaskIncrementTick+0x82>
 800eab8:	2300      	movs	r3, #0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d004      	beq.n	800eac8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eabe:	4b36      	ldr	r3, [pc, #216]	; (800eb98 <xTaskIncrementTick+0x160>)
 800eac0:	f04f 32ff 	mov.w	r2, #4294967295
 800eac4:	601a      	str	r2, [r3, #0]
					break;
 800eac6:	e03e      	b.n	800eb46 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eac8:	4b30      	ldr	r3, [pc, #192]	; (800eb8c <xTaskIncrementTick+0x154>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ead8:	693a      	ldr	r2, [r7, #16]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d203      	bcs.n	800eae8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eae0:	4a2d      	ldr	r2, [pc, #180]	; (800eb98 <xTaskIncrementTick+0x160>)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6013      	str	r3, [r2, #0]
						break;
 800eae6:	e02e      	b.n	800eb46 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	3304      	adds	r3, #4
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe fd90 	bl	800d612 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d004      	beq.n	800eb04 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	3318      	adds	r3, #24
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fd87 	bl	800d612 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	2201      	movs	r2, #1
 800eb0a:	409a      	lsls	r2, r3
 800eb0c:	4b23      	ldr	r3, [pc, #140]	; (800eb9c <xTaskIncrementTick+0x164>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4313      	orrs	r3, r2
 800eb12:	4a22      	ldr	r2, [pc, #136]	; (800eb9c <xTaskIncrementTick+0x164>)
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	4a1f      	ldr	r2, [pc, #124]	; (800eba0 <xTaskIncrementTick+0x168>)
 800eb24:	441a      	add	r2, r3
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3304      	adds	r3, #4
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	f7fe fd13 	bl	800d558 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb36:	4b1b      	ldr	r3, [pc, #108]	; (800eba4 <xTaskIncrementTick+0x16c>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d3b4      	bcc.n	800eaaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800eb40:	2301      	movs	r3, #1
 800eb42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb44:	e7b1      	b.n	800eaaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb46:	4b17      	ldr	r3, [pc, #92]	; (800eba4 <xTaskIncrementTick+0x16c>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4c:	4914      	ldr	r1, [pc, #80]	; (800eba0 <xTaskIncrementTick+0x168>)
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d907      	bls.n	800eb6e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	617b      	str	r3, [r7, #20]
 800eb62:	e004      	b.n	800eb6e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eb64:	4b10      	ldr	r3, [pc, #64]	; (800eba8 <xTaskIncrementTick+0x170>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	4a0f      	ldr	r2, [pc, #60]	; (800eba8 <xTaskIncrementTick+0x170>)
 800eb6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb6e:	4b0f      	ldr	r3, [pc, #60]	; (800ebac <xTaskIncrementTick+0x174>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800eb76:	2301      	movs	r3, #1
 800eb78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb7a:	697b      	ldr	r3, [r7, #20]
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	200015a8 	.word	0x200015a8
 800eb88:	20001584 	.word	0x20001584
 800eb8c:	20001538 	.word	0x20001538
 800eb90:	2000153c 	.word	0x2000153c
 800eb94:	20001598 	.word	0x20001598
 800eb98:	200015a0 	.word	0x200015a0
 800eb9c:	20001588 	.word	0x20001588
 800eba0:	20001484 	.word	0x20001484
 800eba4:	20001480 	.word	0x20001480
 800eba8:	20001590 	.word	0x20001590
 800ebac:	20001594 	.word	0x20001594

0800ebb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ebb6:	4b26      	ldr	r3, [pc, #152]	; (800ec50 <vTaskSwitchContext+0xa0>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d003      	beq.n	800ebc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ebbe:	4b25      	ldr	r3, [pc, #148]	; (800ec54 <vTaskSwitchContext+0xa4>)
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ebc4:	e03e      	b.n	800ec44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ebc6:	4b23      	ldr	r3, [pc, #140]	; (800ec54 <vTaskSwitchContext+0xa4>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ebcc:	4b22      	ldr	r3, [pc, #136]	; (800ec58 <vTaskSwitchContext+0xa8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	fab3 f383 	clz	r3, r3
 800ebd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ebda:	7afb      	ldrb	r3, [r7, #11]
 800ebdc:	f1c3 031f 	rsb	r3, r3, #31
 800ebe0:	617b      	str	r3, [r7, #20]
 800ebe2:	491e      	ldr	r1, [pc, #120]	; (800ec5c <vTaskSwitchContext+0xac>)
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4413      	add	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	440b      	add	r3, r1
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d109      	bne.n	800ec0a <vTaskSwitchContext+0x5a>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	607b      	str	r3, [r7, #4]
 800ec08:	e7fe      	b.n	800ec08 <vTaskSwitchContext+0x58>
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	4413      	add	r3, r2
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	4a11      	ldr	r2, [pc, #68]	; (800ec5c <vTaskSwitchContext+0xac>)
 800ec16:	4413      	add	r3, r2
 800ec18:	613b      	str	r3, [r7, #16]
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	605a      	str	r2, [r3, #4]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	685a      	ldr	r2, [r3, #4]
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d104      	bne.n	800ec3a <vTaskSwitchContext+0x8a>
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	605a      	str	r2, [r3, #4]
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	4a07      	ldr	r2, [pc, #28]	; (800ec60 <vTaskSwitchContext+0xb0>)
 800ec42:	6013      	str	r3, [r2, #0]
}
 800ec44:	bf00      	nop
 800ec46:	371c      	adds	r7, #28
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	200015a8 	.word	0x200015a8
 800ec54:	20001594 	.word	0x20001594
 800ec58:	20001588 	.word	0x20001588
 800ec5c:	20001484 	.word	0x20001484
 800ec60:	20001480 	.word	0x20001480

0800ec64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d109      	bne.n	800ec88 <vTaskPlaceOnEventList+0x24>
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	e7fe      	b.n	800ec86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec88:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <vTaskPlaceOnEventList+0x44>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3318      	adds	r3, #24
 800ec8e:	4619      	mov	r1, r3
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7fe fc85 	bl	800d5a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec96:	2101      	movs	r1, #1
 800ec98:	6838      	ldr	r0, [r7, #0]
 800ec9a:	f000 fb9d 	bl	800f3d8 <prvAddCurrentTaskToDelayedList>
}
 800ec9e:	bf00      	nop
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20001480 	.word	0x20001480

0800ecac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d109      	bne.n	800ecd6 <xTaskRemoveFromEventList+0x2a>
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	e7fe      	b.n	800ecd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	3318      	adds	r3, #24
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe fc99 	bl	800d612 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ece0:	4b1d      	ldr	r3, [pc, #116]	; (800ed58 <xTaskRemoveFromEventList+0xac>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d11c      	bne.n	800ed22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	3304      	adds	r3, #4
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fe fc90 	bl	800d612 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	409a      	lsls	r2, r3
 800ecfa:	4b18      	ldr	r3, [pc, #96]	; (800ed5c <xTaskRemoveFromEventList+0xb0>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	4a16      	ldr	r2, [pc, #88]	; (800ed5c <xTaskRemoveFromEventList+0xb0>)
 800ed02:	6013      	str	r3, [r2, #0]
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4a13      	ldr	r2, [pc, #76]	; (800ed60 <xTaskRemoveFromEventList+0xb4>)
 800ed12:	441a      	add	r2, r3
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	3304      	adds	r3, #4
 800ed18:	4619      	mov	r1, r3
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	f7fe fc1c 	bl	800d558 <vListInsertEnd>
 800ed20:	e005      	b.n	800ed2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	3318      	adds	r3, #24
 800ed26:	4619      	mov	r1, r3
 800ed28:	480e      	ldr	r0, [pc, #56]	; (800ed64 <xTaskRemoveFromEventList+0xb8>)
 800ed2a:	f7fe fc15 	bl	800d558 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed32:	4b0d      	ldr	r3, [pc, #52]	; (800ed68 <xTaskRemoveFromEventList+0xbc>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d905      	bls.n	800ed48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed40:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <xTaskRemoveFromEventList+0xc0>)
 800ed42:	2201      	movs	r2, #1
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	e001      	b.n	800ed4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ed4c:	697b      	ldr	r3, [r7, #20]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	200015a8 	.word	0x200015a8
 800ed5c:	20001588 	.word	0x20001588
 800ed60:	20001484 	.word	0x20001484
 800ed64:	20001540 	.word	0x20001540
 800ed68:	20001480 	.word	0x20001480
 800ed6c:	20001594 	.word	0x20001594

0800ed70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed78:	4b06      	ldr	r3, [pc, #24]	; (800ed94 <vTaskInternalSetTimeOutState+0x24>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed80:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <vTaskInternalSetTimeOutState+0x28>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	605a      	str	r2, [r3, #4]
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	20001598 	.word	0x20001598
 800ed98:	20001584 	.word	0x20001584

0800ed9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b088      	sub	sp, #32
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d109      	bne.n	800edc0 <xTaskCheckForTimeOut+0x24>
 800edac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	e7fe      	b.n	800edbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d109      	bne.n	800edda <xTaskCheckForTimeOut+0x3e>
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	60fb      	str	r3, [r7, #12]
 800edd8:	e7fe      	b.n	800edd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800edda:	f000 fc87 	bl	800f6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edde:	4b1d      	ldr	r3, [pc, #116]	; (800ee54 <xTaskCheckForTimeOut+0xb8>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	69ba      	ldr	r2, [r7, #24]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf6:	d102      	bne.n	800edfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800edf8:	2300      	movs	r3, #0
 800edfa:	61fb      	str	r3, [r7, #28]
 800edfc:	e023      	b.n	800ee46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	4b15      	ldr	r3, [pc, #84]	; (800ee58 <xTaskCheckForTimeOut+0xbc>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d007      	beq.n	800ee1a <xTaskCheckForTimeOut+0x7e>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d302      	bcc.n	800ee1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee14:	2301      	movs	r3, #1
 800ee16:	61fb      	str	r3, [r7, #28]
 800ee18:	e015      	b.n	800ee46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d20b      	bcs.n	800ee3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	1ad2      	subs	r2, r2, r3
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff ff9d 	bl	800ed70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee36:	2300      	movs	r3, #0
 800ee38:	61fb      	str	r3, [r7, #28]
 800ee3a:	e004      	b.n	800ee46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee42:	2301      	movs	r3, #1
 800ee44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee46:	f000 fc7f 	bl	800f748 <vPortExitCritical>

	return xReturn;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20001584 	.word	0x20001584
 800ee58:	20001598 	.word	0x20001598

0800ee5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee60:	4b03      	ldr	r3, [pc, #12]	; (800ee70 <vTaskMissedYield+0x14>)
 800ee62:	2201      	movs	r2, #1
 800ee64:	601a      	str	r2, [r3, #0]
}
 800ee66:	bf00      	nop
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	20001594 	.word	0x20001594

0800ee74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee7c:	f000 f852 	bl	800ef24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee80:	4b06      	ldr	r3, [pc, #24]	; (800ee9c <prvIdleTask+0x28>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d9f9      	bls.n	800ee7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <prvIdleTask+0x2c>)
 800ee8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee8e:	601a      	str	r2, [r3, #0]
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee98:	e7f0      	b.n	800ee7c <prvIdleTask+0x8>
 800ee9a:	bf00      	nop
 800ee9c:	20001484 	.word	0x20001484
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeaa:	2300      	movs	r3, #0
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	e00c      	b.n	800eeca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4a12      	ldr	r2, [pc, #72]	; (800ef04 <prvInitialiseTaskLists+0x60>)
 800eebc:	4413      	add	r3, r2
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fb1d 	bl	800d4fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3301      	adds	r3, #1
 800eec8:	607b      	str	r3, [r7, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b06      	cmp	r3, #6
 800eece:	d9ef      	bls.n	800eeb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eed0:	480d      	ldr	r0, [pc, #52]	; (800ef08 <prvInitialiseTaskLists+0x64>)
 800eed2:	f7fe fb14 	bl	800d4fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eed6:	480d      	ldr	r0, [pc, #52]	; (800ef0c <prvInitialiseTaskLists+0x68>)
 800eed8:	f7fe fb11 	bl	800d4fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eedc:	480c      	ldr	r0, [pc, #48]	; (800ef10 <prvInitialiseTaskLists+0x6c>)
 800eede:	f7fe fb0e 	bl	800d4fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eee2:	480c      	ldr	r0, [pc, #48]	; (800ef14 <prvInitialiseTaskLists+0x70>)
 800eee4:	f7fe fb0b 	bl	800d4fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eee8:	480b      	ldr	r0, [pc, #44]	; (800ef18 <prvInitialiseTaskLists+0x74>)
 800eeea:	f7fe fb08 	bl	800d4fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eeee:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <prvInitialiseTaskLists+0x78>)
 800eef0:	4a05      	ldr	r2, [pc, #20]	; (800ef08 <prvInitialiseTaskLists+0x64>)
 800eef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eef4:	4b0a      	ldr	r3, [pc, #40]	; (800ef20 <prvInitialiseTaskLists+0x7c>)
 800eef6:	4a05      	ldr	r2, [pc, #20]	; (800ef0c <prvInitialiseTaskLists+0x68>)
 800eef8:	601a      	str	r2, [r3, #0]
}
 800eefa:	bf00      	nop
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	20001484 	.word	0x20001484
 800ef08:	20001510 	.word	0x20001510
 800ef0c:	20001524 	.word	0x20001524
 800ef10:	20001540 	.word	0x20001540
 800ef14:	20001554 	.word	0x20001554
 800ef18:	2000156c 	.word	0x2000156c
 800ef1c:	20001538 	.word	0x20001538
 800ef20:	2000153c 	.word	0x2000153c

0800ef24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef2a:	e019      	b.n	800ef60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef2c:	f000 fbde 	bl	800f6ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ef30:	4b0f      	ldr	r3, [pc, #60]	; (800ef70 <prvCheckTasksWaitingTermination+0x4c>)
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fe fb68 	bl	800d612 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef42:	4b0c      	ldr	r3, [pc, #48]	; (800ef74 <prvCheckTasksWaitingTermination+0x50>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	4a0a      	ldr	r2, [pc, #40]	; (800ef74 <prvCheckTasksWaitingTermination+0x50>)
 800ef4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef4c:	4b0a      	ldr	r3, [pc, #40]	; (800ef78 <prvCheckTasksWaitingTermination+0x54>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	3b01      	subs	r3, #1
 800ef52:	4a09      	ldr	r2, [pc, #36]	; (800ef78 <prvCheckTasksWaitingTermination+0x54>)
 800ef54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef56:	f000 fbf7 	bl	800f748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f80e 	bl	800ef7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef60:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <prvCheckTasksWaitingTermination+0x54>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1e1      	bne.n	800ef2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef68:	bf00      	nop
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	20001554 	.word	0x20001554
 800ef74:	20001580 	.word	0x20001580
 800ef78:	20001568 	.word	0x20001568

0800ef7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d108      	bne.n	800efa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 fd86 	bl	800faa4 <vPortFree>
				vPortFree( pxTCB );
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fd83 	bl	800faa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef9e:	e017      	b.n	800efd0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d103      	bne.n	800efb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fd7a 	bl	800faa4 <vPortFree>
	}
 800efb0:	e00e      	b.n	800efd0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d009      	beq.n	800efd0 <prvDeleteTCB+0x54>
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	60fb      	str	r3, [r7, #12]
 800efce:	e7fe      	b.n	800efce <prvDeleteTCB+0x52>
	}
 800efd0:	bf00      	nop
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efde:	4b0f      	ldr	r3, [pc, #60]	; (800f01c <prvResetNextTaskUnblockTime+0x44>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d101      	bne.n	800efec <prvResetNextTaskUnblockTime+0x14>
 800efe8:	2301      	movs	r3, #1
 800efea:	e000      	b.n	800efee <prvResetNextTaskUnblockTime+0x16>
 800efec:	2300      	movs	r3, #0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d004      	beq.n	800effc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eff2:	4b0b      	ldr	r3, [pc, #44]	; (800f020 <prvResetNextTaskUnblockTime+0x48>)
 800eff4:	f04f 32ff 	mov.w	r2, #4294967295
 800eff8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800effa:	e008      	b.n	800f00e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800effc:	4b07      	ldr	r3, [pc, #28]	; (800f01c <prvResetNextTaskUnblockTime+0x44>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	4a05      	ldr	r2, [pc, #20]	; (800f020 <prvResetNextTaskUnblockTime+0x48>)
 800f00c:	6013      	str	r3, [r2, #0]
}
 800f00e:	bf00      	nop
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	20001538 	.word	0x20001538
 800f020:	200015a0 	.word	0x200015a0

0800f024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f02a:	4b0b      	ldr	r3, [pc, #44]	; (800f058 <xTaskGetSchedulerState+0x34>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f032:	2301      	movs	r3, #1
 800f034:	607b      	str	r3, [r7, #4]
 800f036:	e008      	b.n	800f04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f038:	4b08      	ldr	r3, [pc, #32]	; (800f05c <xTaskGetSchedulerState+0x38>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f040:	2302      	movs	r3, #2
 800f042:	607b      	str	r3, [r7, #4]
 800f044:	e001      	b.n	800f04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f046:	2300      	movs	r3, #0
 800f048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f04a:	687b      	ldr	r3, [r7, #4]
	}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	2000158c 	.word	0x2000158c
 800f05c:	200015a8 	.word	0x200015a8

0800f060 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f06c:	2300      	movs	r3, #0
 800f06e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d06e      	beq.n	800f154 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07a:	4b39      	ldr	r3, [pc, #228]	; (800f160 <xTaskPriorityInherit+0x100>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f080:	429a      	cmp	r2, r3
 800f082:	d25e      	bcs.n	800f142 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	699b      	ldr	r3, [r3, #24]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	db06      	blt.n	800f09a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f08c:	4b34      	ldr	r3, [pc, #208]	; (800f160 <xTaskPriorityInherit+0x100>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f092:	f1c3 0207 	rsb	r2, r3, #7
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	6959      	ldr	r1, [r3, #20]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	4413      	add	r3, r2
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	4a2e      	ldr	r2, [pc, #184]	; (800f164 <xTaskPriorityInherit+0x104>)
 800f0ac:	4413      	add	r3, r2
 800f0ae:	4299      	cmp	r1, r3
 800f0b0:	d101      	bne.n	800f0b6 <xTaskPriorityInherit+0x56>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e000      	b.n	800f0b8 <xTaskPriorityInherit+0x58>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d03a      	beq.n	800f132 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe faa6 	bl	800d612 <uxListRemove>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d115      	bne.n	800f0f8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d0:	4924      	ldr	r1, [pc, #144]	; (800f164 <xTaskPriorityInherit+0x104>)
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	4413      	add	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	440b      	add	r3, r1
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <xTaskPriorityInherit+0x98>
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ec:	43da      	mvns	r2, r3
 800f0ee:	4b1e      	ldr	r3, [pc, #120]	; (800f168 <xTaskPriorityInherit+0x108>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	4a1c      	ldr	r2, [pc, #112]	; (800f168 <xTaskPriorityInherit+0x108>)
 800f0f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0f8:	4b19      	ldr	r3, [pc, #100]	; (800f160 <xTaskPriorityInherit+0x100>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f106:	2201      	movs	r2, #1
 800f108:	409a      	lsls	r2, r3
 800f10a:	4b17      	ldr	r3, [pc, #92]	; (800f168 <xTaskPriorityInherit+0x108>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4313      	orrs	r3, r2
 800f110:	4a15      	ldr	r2, [pc, #84]	; (800f168 <xTaskPriorityInherit+0x108>)
 800f112:	6013      	str	r3, [r2, #0]
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f118:	4613      	mov	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4a10      	ldr	r2, [pc, #64]	; (800f164 <xTaskPriorityInherit+0x104>)
 800f122:	441a      	add	r2, r3
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	3304      	adds	r3, #4
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7fe fa14 	bl	800d558 <vListInsertEnd>
 800f130:	e004      	b.n	800f13c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f132:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <xTaskPriorityInherit+0x100>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f13c:	2301      	movs	r3, #1
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	e008      	b.n	800f154 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f146:	4b06      	ldr	r3, [pc, #24]	; (800f160 <xTaskPriorityInherit+0x100>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d201      	bcs.n	800f154 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f150:	2301      	movs	r3, #1
 800f152:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f154:	68fb      	ldr	r3, [r7, #12]
	}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20001480 	.word	0x20001480
 800f164:	20001484 	.word	0x20001484
 800f168:	20001588 	.word	0x20001588

0800f16c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f178:	2300      	movs	r3, #0
 800f17a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d06c      	beq.n	800f25c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f182:	4b39      	ldr	r3, [pc, #228]	; (800f268 <xTaskPriorityDisinherit+0xfc>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	693a      	ldr	r2, [r7, #16]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d009      	beq.n	800f1a0 <xTaskPriorityDisinherit+0x34>
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	e7fe      	b.n	800f19e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d109      	bne.n	800f1bc <xTaskPriorityDisinherit+0x50>
 800f1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ac:	f383 8811 	msr	BASEPRI, r3
 800f1b0:	f3bf 8f6f 	isb	sy
 800f1b4:	f3bf 8f4f 	dsb	sy
 800f1b8:	60bb      	str	r3, [r7, #8]
 800f1ba:	e7fe      	b.n	800f1ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1c0:	1e5a      	subs	r2, r3, #1
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d044      	beq.n	800f25c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d140      	bne.n	800f25c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fe fa17 	bl	800d612 <uxListRemove>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d115      	bne.n	800f216 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ee:	491f      	ldr	r1, [pc, #124]	; (800f26c <xTaskPriorityDisinherit+0x100>)
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	440b      	add	r3, r1
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10a      	bne.n	800f216 <xTaskPriorityDisinherit+0xaa>
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f204:	2201      	movs	r2, #1
 800f206:	fa02 f303 	lsl.w	r3, r2, r3
 800f20a:	43da      	mvns	r2, r3
 800f20c:	4b18      	ldr	r3, [pc, #96]	; (800f270 <xTaskPriorityDisinherit+0x104>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4013      	ands	r3, r2
 800f212:	4a17      	ldr	r2, [pc, #92]	; (800f270 <xTaskPriorityDisinherit+0x104>)
 800f214:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f222:	f1c3 0207 	rsb	r2, r3, #7
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22e:	2201      	movs	r2, #1
 800f230:	409a      	lsls	r2, r3
 800f232:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <xTaskPriorityDisinherit+0x104>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4313      	orrs	r3, r2
 800f238:	4a0d      	ldr	r2, [pc, #52]	; (800f270 <xTaskPriorityDisinherit+0x104>)
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f240:	4613      	mov	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4a08      	ldr	r2, [pc, #32]	; (800f26c <xTaskPriorityDisinherit+0x100>)
 800f24a:	441a      	add	r2, r3
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	3304      	adds	r3, #4
 800f250:	4619      	mov	r1, r3
 800f252:	4610      	mov	r0, r2
 800f254:	f7fe f980 	bl	800d558 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f258:	2301      	movs	r3, #1
 800f25a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f25c:	697b      	ldr	r3, [r7, #20]
	}
 800f25e:	4618      	mov	r0, r3
 800f260:	3718      	adds	r7, #24
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20001480 	.word	0x20001480
 800f26c:	20001484 	.word	0x20001484
 800f270:	20001588 	.word	0x20001588

0800f274 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f282:	2301      	movs	r3, #1
 800f284:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f000 8086 	beq.w	800f39a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f292:	2b00      	cmp	r3, #0
 800f294:	d109      	bne.n	800f2aa <vTaskPriorityDisinheritAfterTimeout+0x36>
 800f296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	60fb      	str	r3, [r7, #12]
 800f2a8:	e7fe      	b.n	800f2a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d902      	bls.n	800f2ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	61fb      	str	r3, [r7, #28]
 800f2b8:	e002      	b.n	800f2c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c4:	69fa      	ldr	r2, [r7, #28]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d067      	beq.n	800f39a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d162      	bne.n	800f39a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f2d4:	4b33      	ldr	r3, [pc, #204]	; (800f3a4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	69ba      	ldr	r2, [r7, #24]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d109      	bne.n	800f2f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800f2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	60bb      	str	r3, [r7, #8]
 800f2f0:	e7fe      	b.n	800f2f0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	69fa      	ldr	r2, [r7, #28]
 800f2fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	2b00      	cmp	r3, #0
 800f304:	db04      	blt.n	800f310 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	f1c3 0207 	rsb	r2, r3, #7
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	6959      	ldr	r1, [r3, #20]
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	4a22      	ldr	r2, [pc, #136]	; (800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f320:	4413      	add	r3, r2
 800f322:	4299      	cmp	r1, r3
 800f324:	d101      	bne.n	800f32a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800f326:	2301      	movs	r3, #1
 800f328:	e000      	b.n	800f32c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800f32a:	2300      	movs	r3, #0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d034      	beq.n	800f39a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	3304      	adds	r3, #4
 800f334:	4618      	mov	r0, r3
 800f336:	f7fe f96c 	bl	800d612 <uxListRemove>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d115      	bne.n	800f36c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f344:	4918      	ldr	r1, [pc, #96]	; (800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f346:	4613      	mov	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	440b      	add	r3, r1
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10a      	bne.n	800f36c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35a:	2201      	movs	r2, #1
 800f35c:	fa02 f303 	lsl.w	r3, r2, r3
 800f360:	43da      	mvns	r2, r3
 800f362:	4b12      	ldr	r3, [pc, #72]	; (800f3ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4013      	ands	r3, r2
 800f368:	4a10      	ldr	r2, [pc, #64]	; (800f3ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f36a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f370:	2201      	movs	r2, #1
 800f372:	409a      	lsls	r2, r3
 800f374:	4b0d      	ldr	r3, [pc, #52]	; (800f3ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4313      	orrs	r3, r2
 800f37a:	4a0c      	ldr	r2, [pc, #48]	; (800f3ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4a07      	ldr	r2, [pc, #28]	; (800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f38c:	441a      	add	r2, r3
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	3304      	adds	r3, #4
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7fe f8df 	bl	800d558 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f39a:	bf00      	nop
 800f39c:	3720      	adds	r7, #32
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20001480 	.word	0x20001480
 800f3a8:	20001484 	.word	0x20001484
 800f3ac:	20001588 	.word	0x20001588

0800f3b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3b4:	4b07      	ldr	r3, [pc, #28]	; (800f3d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d004      	beq.n	800f3c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3bc:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3c2:	3201      	adds	r2, #1
 800f3c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f3c6:	4b03      	ldr	r3, [pc, #12]	; (800f3d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
	}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	20001480 	.word	0x20001480

0800f3d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3e2:	4b29      	ldr	r3, [pc, #164]	; (800f488 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3e8:	4b28      	ldr	r3, [pc, #160]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe f90f 	bl	800d612 <uxListRemove>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10b      	bne.n	800f412 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800f3fa:	4b24      	ldr	r3, [pc, #144]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f400:	2201      	movs	r2, #1
 800f402:	fa02 f303 	lsl.w	r3, r2, r3
 800f406:	43da      	mvns	r2, r3
 800f408:	4b21      	ldr	r3, [pc, #132]	; (800f490 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4013      	ands	r3, r2
 800f40e:	4a20      	ldr	r2, [pc, #128]	; (800f490 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f410:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f418:	d10a      	bne.n	800f430 <prvAddCurrentTaskToDelayedList+0x58>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f420:	4b1a      	ldr	r3, [pc, #104]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3304      	adds	r3, #4
 800f426:	4619      	mov	r1, r3
 800f428:	481a      	ldr	r0, [pc, #104]	; (800f494 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f42a:	f7fe f895 	bl	800d558 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f42e:	e026      	b.n	800f47e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4413      	add	r3, r2
 800f436:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f438:	4b14      	ldr	r3, [pc, #80]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	429a      	cmp	r2, r3
 800f446:	d209      	bcs.n	800f45c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f448:	4b13      	ldr	r3, [pc, #76]	; (800f498 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3304      	adds	r3, #4
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7fe f8a3 	bl	800d5a0 <vListInsert>
}
 800f45a:	e010      	b.n	800f47e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f45c:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	4b0a      	ldr	r3, [pc, #40]	; (800f48c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	3304      	adds	r3, #4
 800f466:	4619      	mov	r1, r3
 800f468:	4610      	mov	r0, r2
 800f46a:	f7fe f899 	bl	800d5a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f46e:	4b0c      	ldr	r3, [pc, #48]	; (800f4a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	68ba      	ldr	r2, [r7, #8]
 800f474:	429a      	cmp	r2, r3
 800f476:	d202      	bcs.n	800f47e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f478:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	6013      	str	r3, [r2, #0]
}
 800f47e:	bf00      	nop
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	20001584 	.word	0x20001584
 800f48c:	20001480 	.word	0x20001480
 800f490:	20001588 	.word	0x20001588
 800f494:	2000156c 	.word	0x2000156c
 800f498:	2000153c 	.word	0x2000153c
 800f49c:	20001538 	.word	0x20001538
 800f4a0:	200015a0 	.word	0x200015a0

0800f4a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3b04      	subs	r3, #4
 800f4b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3b04      	subs	r3, #4
 800f4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f023 0201 	bic.w	r2, r3, #1
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	3b04      	subs	r3, #4
 800f4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4d4:	4a0c      	ldr	r2, [pc, #48]	; (800f508 <pxPortInitialiseStack+0x64>)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3b14      	subs	r3, #20
 800f4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3b04      	subs	r3, #4
 800f4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f06f 0202 	mvn.w	r2, #2
 800f4f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	3b20      	subs	r3, #32
 800f4f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	0800f50d 	.word	0x0800f50d

0800f50c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b085      	sub	sp, #20
 800f510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f516:	4b11      	ldr	r3, [pc, #68]	; (800f55c <prvTaskExitError+0x50>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51e:	d009      	beq.n	800f534 <prvTaskExitError+0x28>
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	60fb      	str	r3, [r7, #12]
 800f532:	e7fe      	b.n	800f532 <prvTaskExitError+0x26>
 800f534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f546:	bf00      	nop
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d0fc      	beq.n	800f548 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f54e:	bf00      	nop
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	20000dd0 	.word	0x20000dd0

0800f560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f560:	4b07      	ldr	r3, [pc, #28]	; (800f580 <pxCurrentTCBConst2>)
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	6808      	ldr	r0, [r1, #0]
 800f566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	f380 8809 	msr	PSP, r0
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f04f 0000 	mov.w	r0, #0
 800f576:	f380 8811 	msr	BASEPRI, r0
 800f57a:	4770      	bx	lr
 800f57c:	f3af 8000 	nop.w

0800f580 <pxCurrentTCBConst2>:
 800f580:	20001480 	.word	0x20001480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop

0800f588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f588:	4808      	ldr	r0, [pc, #32]	; (800f5ac <prvPortStartFirstTask+0x24>)
 800f58a:	6800      	ldr	r0, [r0, #0]
 800f58c:	6800      	ldr	r0, [r0, #0]
 800f58e:	f380 8808 	msr	MSP, r0
 800f592:	f04f 0000 	mov.w	r0, #0
 800f596:	f380 8814 	msr	CONTROL, r0
 800f59a:	b662      	cpsie	i
 800f59c:	b661      	cpsie	f
 800f59e:	f3bf 8f4f 	dsb	sy
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	df00      	svc	0
 800f5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5aa:	bf00      	nop
 800f5ac:	e000ed08 	.word	0xe000ed08

0800f5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5b6:	4b44      	ldr	r3, [pc, #272]	; (800f6c8 <xPortStartScheduler+0x118>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a44      	ldr	r2, [pc, #272]	; (800f6cc <xPortStartScheduler+0x11c>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d109      	bne.n	800f5d4 <xPortStartScheduler+0x24>
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	613b      	str	r3, [r7, #16]
 800f5d2:	e7fe      	b.n	800f5d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5d4:	4b3c      	ldr	r3, [pc, #240]	; (800f6c8 <xPortStartScheduler+0x118>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a3d      	ldr	r2, [pc, #244]	; (800f6d0 <xPortStartScheduler+0x120>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d109      	bne.n	800f5f2 <xPortStartScheduler+0x42>
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	e7fe      	b.n	800f5f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5f2:	4b38      	ldr	r3, [pc, #224]	; (800f6d4 <xPortStartScheduler+0x124>)
 800f5f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	22ff      	movs	r2, #255	; 0xff
 800f602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f60c:	78fb      	ldrb	r3, [r7, #3]
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f614:	b2da      	uxtb	r2, r3
 800f616:	4b30      	ldr	r3, [pc, #192]	; (800f6d8 <xPortStartScheduler+0x128>)
 800f618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f61a:	4b30      	ldr	r3, [pc, #192]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f61c:	2207      	movs	r2, #7
 800f61e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f620:	e009      	b.n	800f636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f622:	4b2e      	ldr	r3, [pc, #184]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3b01      	subs	r3, #1
 800f628:	4a2c      	ldr	r2, [pc, #176]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f62a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f62c:	78fb      	ldrb	r3, [r7, #3]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	b2db      	uxtb	r3, r3
 800f634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f63e:	2b80      	cmp	r3, #128	; 0x80
 800f640:	d0ef      	beq.n	800f622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f642:	4b26      	ldr	r3, [pc, #152]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f1c3 0307 	rsb	r3, r3, #7
 800f64a:	2b04      	cmp	r3, #4
 800f64c:	d009      	beq.n	800f662 <xPortStartScheduler+0xb2>
 800f64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	60bb      	str	r3, [r7, #8]
 800f660:	e7fe      	b.n	800f660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f662:	4b1e      	ldr	r3, [pc, #120]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	021b      	lsls	r3, r3, #8
 800f668:	4a1c      	ldr	r2, [pc, #112]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f66a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f66c:	4b1b      	ldr	r3, [pc, #108]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f674:	4a19      	ldr	r2, [pc, #100]	; (800f6dc <xPortStartScheduler+0x12c>)
 800f676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f680:	4b17      	ldr	r3, [pc, #92]	; (800f6e0 <xPortStartScheduler+0x130>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a16      	ldr	r2, [pc, #88]	; (800f6e0 <xPortStartScheduler+0x130>)
 800f686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f68a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f68c:	4b14      	ldr	r3, [pc, #80]	; (800f6e0 <xPortStartScheduler+0x130>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a13      	ldr	r2, [pc, #76]	; (800f6e0 <xPortStartScheduler+0x130>)
 800f692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f698:	f000 f8d6 	bl	800f848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f69c:	4b11      	ldr	r3, [pc, #68]	; (800f6e4 <xPortStartScheduler+0x134>)
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6a2:	f000 f8f5 	bl	800f890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6a6:	4b10      	ldr	r3, [pc, #64]	; (800f6e8 <xPortStartScheduler+0x138>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a0f      	ldr	r2, [pc, #60]	; (800f6e8 <xPortStartScheduler+0x138>)
 800f6ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6b2:	f7ff ff69 	bl	800f588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6b6:	f7ff fa7b 	bl	800ebb0 <vTaskSwitchContext>
	prvTaskExitError();
 800f6ba:	f7ff ff27 	bl	800f50c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	e000ed00 	.word	0xe000ed00
 800f6cc:	410fc271 	.word	0x410fc271
 800f6d0:	410fc270 	.word	0x410fc270
 800f6d4:	e000e400 	.word	0xe000e400
 800f6d8:	200015ac 	.word	0x200015ac
 800f6dc:	200015b0 	.word	0x200015b0
 800f6e0:	e000ed20 	.word	0xe000ed20
 800f6e4:	20000dd0 	.word	0x20000dd0
 800f6e8:	e000ef34 	.word	0xe000ef34

0800f6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f704:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <vPortEnterCritical+0x54>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3301      	adds	r3, #1
 800f70a:	4a0d      	ldr	r2, [pc, #52]	; (800f740 <vPortEnterCritical+0x54>)
 800f70c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f70e:	4b0c      	ldr	r3, [pc, #48]	; (800f740 <vPortEnterCritical+0x54>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d10e      	bne.n	800f734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f716:	4b0b      	ldr	r3, [pc, #44]	; (800f744 <vPortEnterCritical+0x58>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d009      	beq.n	800f734 <vPortEnterCritical+0x48>
 800f720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	603b      	str	r3, [r7, #0]
 800f732:	e7fe      	b.n	800f732 <vPortEnterCritical+0x46>
	}
}
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	20000dd0 	.word	0x20000dd0
 800f744:	e000ed04 	.word	0xe000ed04

0800f748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f74e:	4b11      	ldr	r3, [pc, #68]	; (800f794 <vPortExitCritical+0x4c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d109      	bne.n	800f76a <vPortExitCritical+0x22>
 800f756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	607b      	str	r3, [r7, #4]
 800f768:	e7fe      	b.n	800f768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f76a:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <vPortExitCritical+0x4c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	3b01      	subs	r3, #1
 800f770:	4a08      	ldr	r2, [pc, #32]	; (800f794 <vPortExitCritical+0x4c>)
 800f772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f774:	4b07      	ldr	r3, [pc, #28]	; (800f794 <vPortExitCritical+0x4c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <vPortExitCritical+0x3e>
 800f77c:	2300      	movs	r3, #0
 800f77e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f786:	bf00      	nop
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	20000dd0 	.word	0x20000dd0
	...

0800f7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7a0:	f3ef 8009 	mrs	r0, PSP
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4b15      	ldr	r3, [pc, #84]	; (800f800 <pxCurrentTCBConst>)
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	f01e 0f10 	tst.w	lr, #16
 800f7b0:	bf08      	it	eq
 800f7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7c4:	f380 8811 	msr	BASEPRI, r0
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f7ff f9ee 	bl	800ebb0 <vTaskSwitchContext>
 800f7d4:	f04f 0000 	mov.w	r0, #0
 800f7d8:	f380 8811 	msr	BASEPRI, r0
 800f7dc:	bc09      	pop	{r0, r3}
 800f7de:	6819      	ldr	r1, [r3, #0]
 800f7e0:	6808      	ldr	r0, [r1, #0]
 800f7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e6:	f01e 0f10 	tst.w	lr, #16
 800f7ea:	bf08      	it	eq
 800f7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7f0:	f380 8809 	msr	PSP, r0
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst>:
 800f800:	20001480 	.word	0x20001480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f820:	f7ff f90a 	bl	800ea38 <xTaskIncrementTick>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d003      	beq.n	800f832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f82a:	4b06      	ldr	r3, [pc, #24]	; (800f844 <SysTick_Handler+0x3c>)
 800f82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f830:	601a      	str	r2, [r3, #0]
 800f832:	2300      	movs	r3, #0
 800f834:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f83c:	bf00      	nop
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	e000ed04 	.word	0xe000ed04

0800f848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <vPortSetupTimerInterrupt+0x34>)
 800f84e:	2200      	movs	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f852:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <vPortSetupTimerInterrupt+0x38>)
 800f854:	2200      	movs	r2, #0
 800f856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f858:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <vPortSetupTimerInterrupt+0x3c>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a0a      	ldr	r2, [pc, #40]	; (800f888 <vPortSetupTimerInterrupt+0x40>)
 800f85e:	fba2 2303 	umull	r2, r3, r2, r3
 800f862:	099b      	lsrs	r3, r3, #6
 800f864:	4a09      	ldr	r2, [pc, #36]	; (800f88c <vPortSetupTimerInterrupt+0x44>)
 800f866:	3b01      	subs	r3, #1
 800f868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f86a:	4b04      	ldr	r3, [pc, #16]	; (800f87c <vPortSetupTimerInterrupt+0x34>)
 800f86c:	2207      	movs	r2, #7
 800f86e:	601a      	str	r2, [r3, #0]
}
 800f870:	bf00      	nop
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	e000e010 	.word	0xe000e010
 800f880:	e000e018 	.word	0xe000e018
 800f884:	20000cb4 	.word	0x20000cb4
 800f888:	10624dd3 	.word	0x10624dd3
 800f88c:	e000e014 	.word	0xe000e014

0800f890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8a0 <vPortEnableVFP+0x10>
 800f894:	6801      	ldr	r1, [r0, #0]
 800f896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f89a:	6001      	str	r1, [r0, #0]
 800f89c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f89e:	bf00      	nop
 800f8a0:	e000ed88 	.word	0xe000ed88

0800f8a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8aa:	f3ef 8305 	mrs	r3, IPSR
 800f8ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b0f      	cmp	r3, #15
 800f8b4:	d913      	bls.n	800f8de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8b6:	4a16      	ldr	r2, [pc, #88]	; (800f910 <vPortValidateInterruptPriority+0x6c>)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8c0:	4b14      	ldr	r3, [pc, #80]	; (800f914 <vPortValidateInterruptPriority+0x70>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	7afa      	ldrb	r2, [r7, #11]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d209      	bcs.n	800f8de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	607b      	str	r3, [r7, #4]
 800f8dc:	e7fe      	b.n	800f8dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8de:	4b0e      	ldr	r3, [pc, #56]	; (800f918 <vPortValidateInterruptPriority+0x74>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8e6:	4b0d      	ldr	r3, [pc, #52]	; (800f91c <vPortValidateInterruptPriority+0x78>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d909      	bls.n	800f902 <vPortValidateInterruptPriority+0x5e>
 800f8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	603b      	str	r3, [r7, #0]
 800f900:	e7fe      	b.n	800f900 <vPortValidateInterruptPriority+0x5c>
	}
 800f902:	bf00      	nop
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	e000e3f0 	.word	0xe000e3f0
 800f914:	200015ac 	.word	0x200015ac
 800f918:	e000ed0c 	.word	0xe000ed0c
 800f91c:	200015b0 	.word	0x200015b0

0800f920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b08a      	sub	sp, #40	; 0x28
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f928:	2300      	movs	r3, #0
 800f92a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f92c:	f7fe ffda 	bl	800e8e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f930:	4b57      	ldr	r3, [pc, #348]	; (800fa90 <pvPortMalloc+0x170>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d101      	bne.n	800f93c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f938:	f000 f90c 	bl	800fb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f93c:	4b55      	ldr	r3, [pc, #340]	; (800fa94 <pvPortMalloc+0x174>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4013      	ands	r3, r2
 800f944:	2b00      	cmp	r3, #0
 800f946:	f040 808c 	bne.w	800fa62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d01c      	beq.n	800f98a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f950:	2208      	movs	r2, #8
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4413      	add	r3, r2
 800f956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f003 0307 	and.w	r3, r3, #7
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d013      	beq.n	800f98a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f023 0307 	bic.w	r3, r3, #7
 800f968:	3308      	adds	r3, #8
 800f96a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f003 0307 	and.w	r3, r3, #7
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <pvPortMalloc+0x6a>
 800f976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	617b      	str	r3, [r7, #20]
 800f988:	e7fe      	b.n	800f988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d068      	beq.n	800fa62 <pvPortMalloc+0x142>
 800f990:	4b41      	ldr	r3, [pc, #260]	; (800fa98 <pvPortMalloc+0x178>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	429a      	cmp	r2, r3
 800f998:	d863      	bhi.n	800fa62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f99a:	4b40      	ldr	r3, [pc, #256]	; (800fa9c <pvPortMalloc+0x17c>)
 800f99c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f99e:	4b3f      	ldr	r3, [pc, #252]	; (800fa9c <pvPortMalloc+0x17c>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9a4:	e004      	b.n	800f9b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d903      	bls.n	800f9c2 <pvPortMalloc+0xa2>
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1f1      	bne.n	800f9a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9c2:	4b33      	ldr	r3, [pc, #204]	; (800fa90 <pvPortMalloc+0x170>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d04a      	beq.n	800fa62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9cc:	6a3b      	ldr	r3, [r7, #32]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2208      	movs	r2, #8
 800f9d2:	4413      	add	r3, r2
 800f9d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	6a3b      	ldr	r3, [r7, #32]
 800f9dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	1ad2      	subs	r2, r2, r3
 800f9e6:	2308      	movs	r3, #8
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d91e      	bls.n	800fa2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	f003 0307 	and.w	r3, r3, #7
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <pvPortMalloc+0xf4>
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	613b      	str	r3, [r7, #16]
 800fa12:	e7fe      	b.n	800fa12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	1ad2      	subs	r2, r2, r3
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa26:	69b8      	ldr	r0, [r7, #24]
 800fa28:	f000 f8f6 	bl	800fc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa2c:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <pvPortMalloc+0x178>)
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	4a18      	ldr	r2, [pc, #96]	; (800fa98 <pvPortMalloc+0x178>)
 800fa38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa3a:	4b17      	ldr	r3, [pc, #92]	; (800fa98 <pvPortMalloc+0x178>)
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	4b18      	ldr	r3, [pc, #96]	; (800faa0 <pvPortMalloc+0x180>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d203      	bcs.n	800fa4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa46:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <pvPortMalloc+0x178>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a15      	ldr	r2, [pc, #84]	; (800faa0 <pvPortMalloc+0x180>)
 800fa4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	4b10      	ldr	r3, [pc, #64]	; (800fa94 <pvPortMalloc+0x174>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	431a      	orrs	r2, r3
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	2200      	movs	r2, #0
 800fa60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa62:	f7fe ff4d 	bl	800e900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	f003 0307 	and.w	r3, r3, #7
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d009      	beq.n	800fa84 <pvPortMalloc+0x164>
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	e7fe      	b.n	800fa82 <pvPortMalloc+0x162>
	return pvReturn;
 800fa84:	69fb      	ldr	r3, [r7, #28]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3728      	adds	r7, #40	; 0x28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	200051bc 	.word	0x200051bc
 800fa94:	200051c8 	.word	0x200051c8
 800fa98:	200051c0 	.word	0x200051c0
 800fa9c:	200051b4 	.word	0x200051b4
 800faa0:	200051c4 	.word	0x200051c4

0800faa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d046      	beq.n	800fb44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fab6:	2308      	movs	r3, #8
 800fab8:	425b      	negs	r3, r3
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	4413      	add	r3, r2
 800fabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	685a      	ldr	r2, [r3, #4]
 800fac8:	4b20      	ldr	r3, [pc, #128]	; (800fb4c <vPortFree+0xa8>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4013      	ands	r3, r2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d109      	bne.n	800fae6 <vPortFree+0x42>
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	60fb      	str	r3, [r7, #12]
 800fae4:	e7fe      	b.n	800fae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d009      	beq.n	800fb02 <vPortFree+0x5e>
 800faee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	60bb      	str	r3, [r7, #8]
 800fb00:	e7fe      	b.n	800fb00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4b11      	ldr	r3, [pc, #68]	; (800fb4c <vPortFree+0xa8>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d019      	beq.n	800fb44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d115      	bne.n	800fb44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	685a      	ldr	r2, [r3, #4]
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <vPortFree+0xa8>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	43db      	mvns	r3, r3
 800fb22:	401a      	ands	r2, r3
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb28:	f7fe fedc 	bl	800e8e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <vPortFree+0xac>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	4a06      	ldr	r2, [pc, #24]	; (800fb50 <vPortFree+0xac>)
 800fb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb3a:	6938      	ldr	r0, [r7, #16]
 800fb3c:	f000 f86c 	bl	800fc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fb40:	f7fe fede 	bl	800e900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb44:	bf00      	nop
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	200051c8 	.word	0x200051c8
 800fb50:	200051c0 	.word	0x200051c0

0800fb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <prvHeapInit+0xac>)
 800fb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00c      	beq.n	800fb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3307      	adds	r3, #7
 800fb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	4a1f      	ldr	r2, [pc, #124]	; (800fc00 <prvHeapInit+0xac>)
 800fb84:	4413      	add	r3, r2
 800fb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb8c:	4a1d      	ldr	r2, [pc, #116]	; (800fc04 <prvHeapInit+0xb0>)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <prvHeapInit+0xb0>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fba0:	2208      	movs	r2, #8
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	1a9b      	subs	r3, r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0307 	bic.w	r3, r3, #7
 800fbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4a15      	ldr	r2, [pc, #84]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbb6:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbbe:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <prvHeapInit+0xb4>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	1ad2      	subs	r2, r2, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvHeapInit+0xb4>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <prvHeapInit+0xb8>)
 800fbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	4a09      	ldr	r2, [pc, #36]	; (800fc10 <prvHeapInit+0xbc>)
 800fbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <prvHeapInit+0xc0>)
 800fbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	200015b4 	.word	0x200015b4
 800fc04:	200051b4 	.word	0x200051b4
 800fc08:	200051bc 	.word	0x200051bc
 800fc0c:	200051c4 	.word	0x200051c4
 800fc10:	200051c0 	.word	0x200051c0
 800fc14:	200051c8 	.word	0x200051c8

0800fc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc20:	4b28      	ldr	r3, [pc, #160]	; (800fcc4 <prvInsertBlockIntoFreeList+0xac>)
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e002      	b.n	800fc2c <prvInsertBlockIntoFreeList+0x14>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d8f7      	bhi.n	800fc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d108      	bne.n	800fc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	441a      	add	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	441a      	add	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d118      	bne.n	800fca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d00d      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	441a      	add	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	e008      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc96:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	e003      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d002      	beq.n	800fcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	200051b4 	.word	0x200051b4
 800fcc8:	200051bc 	.word	0x200051bc

0800fccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4912      	ldr	r1, [pc, #72]	; (800fd1c <MX_USB_DEVICE_Init+0x50>)
 800fcd4:	4812      	ldr	r0, [pc, #72]	; (800fd20 <MX_USB_DEVICE_Init+0x54>)
 800fcd6:	f7fc f855 	bl	800bd84 <USBD_Init>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fce0:	f7f3 f800 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fce4:	490f      	ldr	r1, [pc, #60]	; (800fd24 <MX_USB_DEVICE_Init+0x58>)
 800fce6:	480e      	ldr	r0, [pc, #56]	; (800fd20 <MX_USB_DEVICE_Init+0x54>)
 800fce8:	f7fc f877 	bl	800bdda <USBD_RegisterClass>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fcf2:	f7f2 fff7 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fcf6:	490c      	ldr	r1, [pc, #48]	; (800fd28 <MX_USB_DEVICE_Init+0x5c>)
 800fcf8:	4809      	ldr	r0, [pc, #36]	; (800fd20 <MX_USB_DEVICE_Init+0x54>)
 800fcfa:	f7fb ffa5 	bl	800bc48 <USBD_CDC_RegisterInterface>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fd04:	f7f2 ffee 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fd08:	4805      	ldr	r0, [pc, #20]	; (800fd20 <MX_USB_DEVICE_Init+0x54>)
 800fd0a:	f7fc f880 	bl	800be0e <USBD_Start>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fd14:	f7f2 ffe6 	bl	8002ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd18:	bf00      	nop
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20000de4 	.word	0x20000de4
 800fd20:	200058d4 	.word	0x200058d4
 800fd24:	20000ccc 	.word	0x20000ccc
 800fd28:	20000dd4 	.word	0x20000dd4

0800fd2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd30:	2200      	movs	r2, #0
 800fd32:	4905      	ldr	r1, [pc, #20]	; (800fd48 <CDC_Init_FS+0x1c>)
 800fd34:	4805      	ldr	r0, [pc, #20]	; (800fd4c <CDC_Init_FS+0x20>)
 800fd36:	f7fb ff9e 	bl	800bc76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd3a:	4905      	ldr	r1, [pc, #20]	; (800fd50 <CDC_Init_FS+0x24>)
 800fd3c:	4803      	ldr	r0, [pc, #12]	; (800fd4c <CDC_Init_FS+0x20>)
 800fd3e:	f7fb ffb4 	bl	800bcaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20005d70 	.word	0x20005d70
 800fd4c:	200058d4 	.word	0x200058d4
 800fd50:	20005b70 	.word	0x20005b70

0800fd54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd54:	b480      	push	{r7}
 800fd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	6039      	str	r1, [r7, #0]
 800fd6e:	71fb      	strb	r3, [r7, #7]
 800fd70:	4613      	mov	r3, r2
 800fd72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	2b23      	cmp	r3, #35	; 0x23
 800fd78:	f200 808c 	bhi.w	800fe94 <CDC_Control_FS+0x130>
 800fd7c:	a201      	add	r2, pc, #4	; (adr r2, 800fd84 <CDC_Control_FS+0x20>)
 800fd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd82:	bf00      	nop
 800fd84:	0800fe95 	.word	0x0800fe95
 800fd88:	0800fe95 	.word	0x0800fe95
 800fd8c:	0800fe95 	.word	0x0800fe95
 800fd90:	0800fe95 	.word	0x0800fe95
 800fd94:	0800fe95 	.word	0x0800fe95
 800fd98:	0800fe95 	.word	0x0800fe95
 800fd9c:	0800fe95 	.word	0x0800fe95
 800fda0:	0800fe95 	.word	0x0800fe95
 800fda4:	0800fe95 	.word	0x0800fe95
 800fda8:	0800fe95 	.word	0x0800fe95
 800fdac:	0800fe95 	.word	0x0800fe95
 800fdb0:	0800fe95 	.word	0x0800fe95
 800fdb4:	0800fe95 	.word	0x0800fe95
 800fdb8:	0800fe95 	.word	0x0800fe95
 800fdbc:	0800fe95 	.word	0x0800fe95
 800fdc0:	0800fe95 	.word	0x0800fe95
 800fdc4:	0800fe95 	.word	0x0800fe95
 800fdc8:	0800fe95 	.word	0x0800fe95
 800fdcc:	0800fe95 	.word	0x0800fe95
 800fdd0:	0800fe95 	.word	0x0800fe95
 800fdd4:	0800fe95 	.word	0x0800fe95
 800fdd8:	0800fe95 	.word	0x0800fe95
 800fddc:	0800fe95 	.word	0x0800fe95
 800fde0:	0800fe95 	.word	0x0800fe95
 800fde4:	0800fe95 	.word	0x0800fe95
 800fde8:	0800fe95 	.word	0x0800fe95
 800fdec:	0800fe95 	.word	0x0800fe95
 800fdf0:	0800fe95 	.word	0x0800fe95
 800fdf4:	0800fe95 	.word	0x0800fe95
 800fdf8:	0800fe95 	.word	0x0800fe95
 800fdfc:	0800fe95 	.word	0x0800fe95
 800fe00:	0800fe95 	.word	0x0800fe95
 800fe04:	0800fe15 	.word	0x0800fe15
 800fe08:	0800fe4f 	.word	0x0800fe4f
 800fe0c:	0800fe95 	.word	0x0800fe95
 800fe10:	0800fe95 	.word	0x0800fe95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781a      	ldrb	r2, [r3, #0]
 800fe18:	4b22      	ldr	r3, [pc, #136]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe1a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	785a      	ldrb	r2, [r3, #1]
 800fe20:	4b20      	ldr	r3, [pc, #128]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe22:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	789a      	ldrb	r2, [r3, #2]
 800fe28:	4b1e      	ldr	r3, [pc, #120]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe2a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	78da      	ldrb	r2, [r3, #3]
 800fe30:	4b1c      	ldr	r3, [pc, #112]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe32:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	791a      	ldrb	r2, [r3, #4]
 800fe38:	4b1a      	ldr	r3, [pc, #104]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe3a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	795a      	ldrb	r2, [r3, #5]
 800fe40:	4b18      	ldr	r3, [pc, #96]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe42:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	799a      	ldrb	r2, [r3, #6]
 800fe48:	4b16      	ldr	r3, [pc, #88]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe4a:	719a      	strb	r2, [r3, #6]
    	break;
 800fe4c:	e023      	b.n	800fe96 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 800fe4e:	4b15      	ldr	r3, [pc, #84]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe50:	781a      	ldrb	r2, [r3, #0]
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	4a12      	ldr	r2, [pc, #72]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe5c:	7852      	ldrb	r2, [r2, #1]
 800fe5e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	3302      	adds	r3, #2
 800fe64:	4a0f      	ldr	r2, [pc, #60]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe66:	7892      	ldrb	r2, [r2, #2]
 800fe68:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	3303      	adds	r3, #3
 800fe6e:	4a0d      	ldr	r2, [pc, #52]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe70:	78d2      	ldrb	r2, [r2, #3]
 800fe72:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	3304      	adds	r3, #4
 800fe78:	4a0a      	ldr	r2, [pc, #40]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe7a:	7912      	ldrb	r2, [r2, #4]
 800fe7c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	3305      	adds	r3, #5
 800fe82:	4a08      	ldr	r2, [pc, #32]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe84:	7952      	ldrb	r2, [r2, #5]
 800fe86:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	3306      	adds	r3, #6
 800fe8c:	4a05      	ldr	r2, [pc, #20]	; (800fea4 <CDC_Control_FS+0x140>)
 800fe8e:	7992      	ldrb	r2, [r2, #6]
 800fe90:	701a      	strb	r2, [r3, #0]
    break;
 800fe92:	e000      	b.n	800fe96 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe94:	bf00      	nop
  }

  return (USBD_OK);
 800fe96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr
 800fea4:	20005f70 	.word	0x20005f70

0800fea8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	461a      	mov	r2, r3
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	4807      	ldr	r0, [pc, #28]	; (800fedc <CDC_Receive_FS+0x34>)
 800febe:	f7f2 ff88 	bl	8002dd2 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fec2:	6879      	ldr	r1, [r7, #4]
 800fec4:	4806      	ldr	r0, [pc, #24]	; (800fee0 <CDC_Receive_FS+0x38>)
 800fec6:	f7fb fef0 	bl	800bcaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800feca:	4805      	ldr	r0, [pc, #20]	; (800fee0 <CDC_Receive_FS+0x38>)
 800fecc:	f7fb ff30 	bl	800bd30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	20000054 	.word	0x20000054
 800fee0:	200058d4 	.word	0x200058d4

0800fee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fef0:	2300      	movs	r3, #0
 800fef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fef4:	4b0d      	ldr	r3, [pc, #52]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800fef6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fefa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff06:	2301      	movs	r3, #1
 800ff08:	e00b      	b.n	800ff22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff0a:	887b      	ldrh	r3, [r7, #2]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	4806      	ldr	r0, [pc, #24]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800ff12:	f7fb feb0 	bl	800bc76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff16:	4805      	ldr	r0, [pc, #20]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800ff18:	f7fb fedb 	bl	800bcd2 <USBD_CDC_TransmitPacket>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	200058d4 	.word	0x200058d4

0800ff30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	6039      	str	r1, [r7, #0]
 800ff3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2212      	movs	r2, #18
 800ff40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff42:	4b03      	ldr	r3, [pc, #12]	; (800ff50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr
 800ff50:	20000e00 	.word	0x20000e00

0800ff54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	6039      	str	r1, [r7, #0]
 800ff5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2204      	movs	r2, #4
 800ff64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff66:	4b03      	ldr	r3, [pc, #12]	; (800ff74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr
 800ff74:	20000e14 	.word	0x20000e14

0800ff78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	6039      	str	r1, [r7, #0]
 800ff82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d105      	bne.n	800ff96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff8a:	683a      	ldr	r2, [r7, #0]
 800ff8c:	4907      	ldr	r1, [pc, #28]	; (800ffac <USBD_FS_ProductStrDescriptor+0x34>)
 800ff8e:	4808      	ldr	r0, [pc, #32]	; (800ffb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff90:	f7fc fe74 	bl	800cc7c <USBD_GetString>
 800ff94:	e004      	b.n	800ffa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	4904      	ldr	r1, [pc, #16]	; (800ffac <USBD_FS_ProductStrDescriptor+0x34>)
 800ff9a:	4805      	ldr	r0, [pc, #20]	; (800ffb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff9c:	f7fc fe6e 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffa0:	4b02      	ldr	r3, [pc, #8]	; (800ffac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3708      	adds	r7, #8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	20005f78 	.word	0x20005f78
 800ffb0:	08015f00 	.word	0x08015f00

0800ffb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	4603      	mov	r3, r0
 800ffbc:	6039      	str	r1, [r7, #0]
 800ffbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffc0:	683a      	ldr	r2, [r7, #0]
 800ffc2:	4904      	ldr	r1, [pc, #16]	; (800ffd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ffc4:	4804      	ldr	r0, [pc, #16]	; (800ffd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ffc6:	f7fc fe59 	bl	800cc7c <USBD_GetString>
  return USBD_StrDesc;
 800ffca:	4b02      	ldr	r3, [pc, #8]	; (800ffd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	20005f78 	.word	0x20005f78
 800ffd8:	08015f18 	.word	0x08015f18

0800ffdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	221a      	movs	r2, #26
 800ffec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffee:	f000 f843 	bl	8010078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fff2:	4b02      	ldr	r3, [pc, #8]	; (800fffc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20000e18 	.word	0x20000e18

08010000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	6039      	str	r1, [r7, #0]
 801000a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d105      	bne.n	801001e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4907      	ldr	r1, [pc, #28]	; (8010034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010016:	4808      	ldr	r0, [pc, #32]	; (8010038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010018:	f7fc fe30 	bl	800cc7c <USBD_GetString>
 801001c:	e004      	b.n	8010028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	4904      	ldr	r1, [pc, #16]	; (8010034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010022:	4805      	ldr	r0, [pc, #20]	; (8010038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010024:	f7fc fe2a 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010028:	4b02      	ldr	r3, [pc, #8]	; (8010034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801002a:	4618      	mov	r0, r3
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	20005f78 	.word	0x20005f78
 8010038:	08015f2c 	.word	0x08015f2c

0801003c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	4603      	mov	r3, r0
 8010044:	6039      	str	r1, [r7, #0]
 8010046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d105      	bne.n	801005a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	4907      	ldr	r1, [pc, #28]	; (8010070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010052:	4808      	ldr	r0, [pc, #32]	; (8010074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010054:	f7fc fe12 	bl	800cc7c <USBD_GetString>
 8010058:	e004      	b.n	8010064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	4904      	ldr	r1, [pc, #16]	; (8010070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801005e:	4805      	ldr	r0, [pc, #20]	; (8010074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010060:	f7fc fe0c 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010064:	4b02      	ldr	r3, [pc, #8]	; (8010070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	20005f78 	.word	0x20005f78
 8010074:	08015f38 	.word	0x08015f38

08010078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801007e:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <Get_SerialNum+0x44>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010084:	4b0e      	ldr	r3, [pc, #56]	; (80100c0 <Get_SerialNum+0x48>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801008a:	4b0e      	ldr	r3, [pc, #56]	; (80100c4 <Get_SerialNum+0x4c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4413      	add	r3, r2
 8010096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d009      	beq.n	80100b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801009e:	2208      	movs	r2, #8
 80100a0:	4909      	ldr	r1, [pc, #36]	; (80100c8 <Get_SerialNum+0x50>)
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f000 f814 	bl	80100d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100a8:	2204      	movs	r2, #4
 80100aa:	4908      	ldr	r1, [pc, #32]	; (80100cc <Get_SerialNum+0x54>)
 80100ac:	68b8      	ldr	r0, [r7, #8]
 80100ae:	f000 f80f 	bl	80100d0 <IntToUnicode>
  }
}
 80100b2:	bf00      	nop
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	1fff7a10 	.word	0x1fff7a10
 80100c0:	1fff7a14 	.word	0x1fff7a14
 80100c4:	1fff7a18 	.word	0x1fff7a18
 80100c8:	20000e1a 	.word	0x20000e1a
 80100cc:	20000e2a 	.word	0x20000e2a

080100d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b087      	sub	sp, #28
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	4613      	mov	r3, r2
 80100dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100e2:	2300      	movs	r3, #0
 80100e4:	75fb      	strb	r3, [r7, #23]
 80100e6:	e027      	b.n	8010138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	0f1b      	lsrs	r3, r3, #28
 80100ec:	2b09      	cmp	r3, #9
 80100ee:	d80b      	bhi.n	8010108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	0f1b      	lsrs	r3, r3, #28
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	4619      	mov	r1, r3
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	440b      	add	r3, r1
 8010100:	3230      	adds	r2, #48	; 0x30
 8010102:	b2d2      	uxtb	r2, r2
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	e00a      	b.n	801011e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	0f1b      	lsrs	r3, r3, #28
 801010c:	b2da      	uxtb	r2, r3
 801010e:	7dfb      	ldrb	r3, [r7, #23]
 8010110:	005b      	lsls	r3, r3, #1
 8010112:	4619      	mov	r1, r3
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	440b      	add	r3, r1
 8010118:	3237      	adds	r2, #55	; 0x37
 801011a:	b2d2      	uxtb	r2, r2
 801011c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	011b      	lsls	r3, r3, #4
 8010122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
 8010126:	005b      	lsls	r3, r3, #1
 8010128:	3301      	adds	r3, #1
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	4413      	add	r3, r2
 801012e:	2200      	movs	r2, #0
 8010130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010132:	7dfb      	ldrb	r3, [r7, #23]
 8010134:	3301      	adds	r3, #1
 8010136:	75fb      	strb	r3, [r7, #23]
 8010138:	7dfa      	ldrb	r2, [r7, #23]
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	429a      	cmp	r2, r3
 801013e:	d3d3      	bcc.n	80100e8 <IntToUnicode+0x18>
  }
}
 8010140:	bf00      	nop
 8010142:	371c      	adds	r7, #28
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b08a      	sub	sp, #40	; 0x28
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010154:	f107 0314 	add.w	r3, r7, #20
 8010158:	2200      	movs	r2, #0
 801015a:	601a      	str	r2, [r3, #0]
 801015c:	605a      	str	r2, [r3, #4]
 801015e:	609a      	str	r2, [r3, #8]
 8010160:	60da      	str	r2, [r3, #12]
 8010162:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801016c:	d13a      	bne.n	80101e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801016e:	2300      	movs	r3, #0
 8010170:	613b      	str	r3, [r7, #16]
 8010172:	4b1e      	ldr	r3, [pc, #120]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 8010174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010176:	4a1d      	ldr	r2, [pc, #116]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 8010178:	f043 0301 	orr.w	r3, r3, #1
 801017c:	6313      	str	r3, [r2, #48]	; 0x30
 801017e:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 8010180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	613b      	str	r3, [r7, #16]
 8010188:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801018a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801018e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010190:	2302      	movs	r3, #2
 8010192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010194:	2300      	movs	r3, #0
 8010196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010198:	2303      	movs	r3, #3
 801019a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801019c:	230a      	movs	r3, #10
 801019e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101a0:	f107 0314 	add.w	r3, r7, #20
 80101a4:	4619      	mov	r1, r3
 80101a6:	4812      	ldr	r0, [pc, #72]	; (80101f0 <HAL_PCD_MspInit+0xa4>)
 80101a8:	f7f6 ff38 	bl	800701c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101ac:	4b0f      	ldr	r3, [pc, #60]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 80101ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101b0:	4a0e      	ldr	r2, [pc, #56]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 80101b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101b6:	6353      	str	r3, [r2, #52]	; 0x34
 80101b8:	2300      	movs	r3, #0
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	4b0b      	ldr	r3, [pc, #44]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 80101be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101c0:	4a0a      	ldr	r2, [pc, #40]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 80101c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101c6:	6453      	str	r3, [r2, #68]	; 0x44
 80101c8:	4b08      	ldr	r3, [pc, #32]	; (80101ec <HAL_PCD_MspInit+0xa0>)
 80101ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80101d4:	2200      	movs	r2, #0
 80101d6:	2105      	movs	r1, #5
 80101d8:	2043      	movs	r0, #67	; 0x43
 80101da:	f7f6 fb57 	bl	800688c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80101de:	2043      	movs	r0, #67	; 0x43
 80101e0:	f7f6 fb70 	bl	80068c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80101e4:	bf00      	nop
 80101e6:	3728      	adds	r7, #40	; 0x28
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	40023800 	.word	0x40023800
 80101f0:	40020000 	.word	0x40020000

080101f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7fb fe48 	bl	800bea0 <USBD_LL_SetupStage>
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801022a:	78fa      	ldrb	r2, [r7, #3]
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	4613      	mov	r3, r2
 8010230:	00db      	lsls	r3, r3, #3
 8010232:	1a9b      	subs	r3, r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	440b      	add	r3, r1
 8010238:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	4619      	mov	r1, r3
 8010242:	f7fb fe78 	bl	800bf36 <USBD_LL_DataOutStage>
}
 8010246:	bf00      	nop
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	460b      	mov	r3, r1
 8010258:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010260:	78fa      	ldrb	r2, [r7, #3]
 8010262:	6879      	ldr	r1, [r7, #4]
 8010264:	4613      	mov	r3, r2
 8010266:	00db      	lsls	r3, r3, #3
 8010268:	1a9b      	subs	r3, r3, r2
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	440b      	add	r3, r1
 801026e:	3348      	adds	r3, #72	; 0x48
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	78fb      	ldrb	r3, [r7, #3]
 8010274:	4619      	mov	r1, r3
 8010276:	f7fb fecf 	bl	800c018 <USBD_LL_DataInStage>
}
 801027a:	bf00      	nop
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b082      	sub	sp, #8
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010290:	4618      	mov	r0, r3
 8010292:	f7fb ffdd 	bl	800c250 <USBD_LL_SOF>
}
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801029e:	b580      	push	{r7, lr}
 80102a0:	b084      	sub	sp, #16
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102a6:	2301      	movs	r3, #1
 80102a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d102      	bne.n	80102b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80102b2:	2300      	movs	r3, #0
 80102b4:	73fb      	strb	r3, [r7, #15]
 80102b6:	e008      	b.n	80102ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	2b02      	cmp	r3, #2
 80102be:	d102      	bne.n	80102c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80102c0:	2301      	movs	r3, #1
 80102c2:	73fb      	strb	r3, [r7, #15]
 80102c4:	e001      	b.n	80102ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80102c6:	f7f2 fd0d 	bl	8002ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102d0:	7bfa      	ldrb	r2, [r7, #15]
 80102d2:	4611      	mov	r1, r2
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fb ff85 	bl	800c1e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fb ff3e 	bl	800c162 <USBD_LL_Reset>
}
 80102e6:	bf00      	nop
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
	...

080102f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fb ff80 	bl	800c204 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	6812      	ldr	r2, [r2, #0]
 8010312:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010316:	f043 0301 	orr.w	r3, r3, #1
 801031a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a1b      	ldr	r3, [r3, #32]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d005      	beq.n	8010330 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010324:	4b04      	ldr	r3, [pc, #16]	; (8010338 <HAL_PCD_SuspendCallback+0x48>)
 8010326:	691b      	ldr	r3, [r3, #16]
 8010328:	4a03      	ldr	r2, [pc, #12]	; (8010338 <HAL_PCD_SuspendCallback+0x48>)
 801032a:	f043 0306 	orr.w	r3, r3, #6
 801032e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	e000ed00 	.word	0xe000ed00

0801033c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801034a:	4618      	mov	r0, r3
 801034c:	f7fb ff6f 	bl	800c22e <USBD_LL_Resume>
}
 8010350:	bf00      	nop
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	460b      	mov	r3, r1
 8010362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801036a:	78fa      	ldrb	r2, [r7, #3]
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f7fb ff95 	bl	800c29e <USBD_LL_IsoOUTIncomplete>
}
 8010374:	bf00      	nop
 8010376:	3708      	adds	r7, #8
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	460b      	mov	r3, r1
 8010386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801038e:	78fa      	ldrb	r2, [r7, #3]
 8010390:	4611      	mov	r1, r2
 8010392:	4618      	mov	r0, r3
 8010394:	f7fb ff76 	bl	800c284 <USBD_LL_IsoINIncomplete>
}
 8010398:	bf00      	nop
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fb ff82 	bl	800c2b8 <USBD_LL_DevConnected>
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fb ff7f 	bl	800c2ce <USBD_LL_DevDisconnected>
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d13c      	bne.n	8010462 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80103e8:	4a20      	ldr	r2, [pc, #128]	; (801046c <USBD_LL_Init+0x94>)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4a1e      	ldr	r2, [pc, #120]	; (801046c <USBD_LL_Init+0x94>)
 80103f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103f8:	4b1c      	ldr	r3, [pc, #112]	; (801046c <USBD_LL_Init+0x94>)
 80103fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80103fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010400:	4b1a      	ldr	r3, [pc, #104]	; (801046c <USBD_LL_Init+0x94>)
 8010402:	2204      	movs	r2, #4
 8010404:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010406:	4b19      	ldr	r3, [pc, #100]	; (801046c <USBD_LL_Init+0x94>)
 8010408:	2202      	movs	r2, #2
 801040a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801040c:	4b17      	ldr	r3, [pc, #92]	; (801046c <USBD_LL_Init+0x94>)
 801040e:	2200      	movs	r2, #0
 8010410:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010412:	4b16      	ldr	r3, [pc, #88]	; (801046c <USBD_LL_Init+0x94>)
 8010414:	2202      	movs	r2, #2
 8010416:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010418:	4b14      	ldr	r3, [pc, #80]	; (801046c <USBD_LL_Init+0x94>)
 801041a:	2200      	movs	r2, #0
 801041c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801041e:	4b13      	ldr	r3, [pc, #76]	; (801046c <USBD_LL_Init+0x94>)
 8010420:	2200      	movs	r2, #0
 8010422:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010424:	4b11      	ldr	r3, [pc, #68]	; (801046c <USBD_LL_Init+0x94>)
 8010426:	2200      	movs	r2, #0
 8010428:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801042a:	4b10      	ldr	r3, [pc, #64]	; (801046c <USBD_LL_Init+0x94>)
 801042c:	2200      	movs	r2, #0
 801042e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010430:	4b0e      	ldr	r3, [pc, #56]	; (801046c <USBD_LL_Init+0x94>)
 8010432:	2200      	movs	r2, #0
 8010434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010436:	480d      	ldr	r0, [pc, #52]	; (801046c <USBD_LL_Init+0x94>)
 8010438:	f7f6 ff8a 	bl	8007350 <HAL_PCD_Init>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010442:	f7f2 fc4f 	bl	8002ce4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010446:	2180      	movs	r1, #128	; 0x80
 8010448:	4808      	ldr	r0, [pc, #32]	; (801046c <USBD_LL_Init+0x94>)
 801044a:	f7f8 f8ee 	bl	800862a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801044e:	2240      	movs	r2, #64	; 0x40
 8010450:	2100      	movs	r1, #0
 8010452:	4806      	ldr	r0, [pc, #24]	; (801046c <USBD_LL_Init+0x94>)
 8010454:	f7f8 f8a2 	bl	800859c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010458:	2280      	movs	r2, #128	; 0x80
 801045a:	2101      	movs	r1, #1
 801045c:	4803      	ldr	r0, [pc, #12]	; (801046c <USBD_LL_Init+0x94>)
 801045e:	f7f8 f89d 	bl	800859c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	20006178 	.word	0x20006178

08010470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801047c:	2300      	movs	r3, #0
 801047e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010486:	4618      	mov	r0, r3
 8010488:	f7f7 f87f 	bl	800758a <HAL_PCD_Start>
 801048c:	4603      	mov	r3, r0
 801048e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8010490:	7bfb      	ldrb	r3, [r7, #15]
 8010492:	4618      	mov	r0, r3
 8010494:	f000 f92e 	bl	80106f4 <USBD_Get_USB_Status>
 8010498:	4603      	mov	r3, r0
 801049a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801049c:	7bbb      	ldrb	r3, [r7, #14]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
 80104ae:	4608      	mov	r0, r1
 80104b0:	4611      	mov	r1, r2
 80104b2:	461a      	mov	r2, r3
 80104b4:	4603      	mov	r3, r0
 80104b6:	70fb      	strb	r3, [r7, #3]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70bb      	strb	r3, [r7, #2]
 80104bc:	4613      	mov	r3, r2
 80104be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104c0:	2300      	movs	r3, #0
 80104c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104c4:	2300      	movs	r3, #0
 80104c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80104ce:	78bb      	ldrb	r3, [r7, #2]
 80104d0:	883a      	ldrh	r2, [r7, #0]
 80104d2:	78f9      	ldrb	r1, [r7, #3]
 80104d4:	f7f7 fc54 	bl	8007d80 <HAL_PCD_EP_Open>
 80104d8:	4603      	mov	r3, r0
 80104da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	4618      	mov	r0, r3
 80104e0:	f000 f908 	bl	80106f4 <USBD_Get_USB_Status>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b084      	sub	sp, #16
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104fe:	2300      	movs	r3, #0
 8010500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801050c:	78fa      	ldrb	r2, [r7, #3]
 801050e:	4611      	mov	r1, r2
 8010510:	4618      	mov	r0, r3
 8010512:	f7f7 fc9d 	bl	8007e50 <HAL_PCD_EP_Close>
 8010516:	4603      	mov	r3, r0
 8010518:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	4618      	mov	r0, r3
 801051e:	f000 f8e9 	bl	80106f4 <USBD_Get_USB_Status>
 8010522:	4603      	mov	r3, r0
 8010524:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8010526:	7bbb      	ldrb	r3, [r7, #14]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801054a:	78fa      	ldrb	r2, [r7, #3]
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f7f7 fd75 	bl	800803e <HAL_PCD_EP_SetStall>
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	4618      	mov	r0, r3
 801055c:	f000 f8ca 	bl	80106f4 <USBD_Get_USB_Status>
 8010560:	4603      	mov	r3, r0
 8010562:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010564:	7bbb      	ldrb	r3, [r7, #14]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b084      	sub	sp, #16
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	460b      	mov	r3, r1
 8010578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801057a:	2300      	movs	r3, #0
 801057c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801057e:	2300      	movs	r3, #0
 8010580:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010588:	78fa      	ldrb	r2, [r7, #3]
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f7f7 fdba 	bl	8008106 <HAL_PCD_EP_ClrStall>
 8010592:	4603      	mov	r3, r0
 8010594:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	4618      	mov	r0, r3
 801059a:	f000 f8ab 	bl	80106f4 <USBD_Get_USB_Status>
 801059e:	4603      	mov	r3, r0
 80105a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80105be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80105c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da0b      	bge.n	80105e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80105c8:	78fb      	ldrb	r3, [r7, #3]
 80105ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105ce:	68f9      	ldr	r1, [r7, #12]
 80105d0:	4613      	mov	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	1a9b      	subs	r3, r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	440b      	add	r3, r1
 80105da:	333e      	adds	r3, #62	; 0x3e
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	e00b      	b.n	80105f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105e6:	68f9      	ldr	r1, [r7, #12]
 80105e8:	4613      	mov	r3, r2
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	1a9b      	subs	r3, r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	440b      	add	r3, r1
 80105f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801061e:	78fa      	ldrb	r2, [r7, #3]
 8010620:	4611      	mov	r1, r2
 8010622:	4618      	mov	r0, r3
 8010624:	f7f7 fb87 	bl	8007d36 <HAL_PCD_SetAddress>
 8010628:	4603      	mov	r3, r0
 801062a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801062c:	7bfb      	ldrb	r3, [r7, #15]
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f860 	bl	80106f4 <USBD_Get_USB_Status>
 8010634:	4603      	mov	r3, r0
 8010636:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010638:	7bbb      	ldrb	r3, [r7, #14]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b086      	sub	sp, #24
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	461a      	mov	r2, r3
 801064e:	460b      	mov	r3, r1
 8010650:	72fb      	strb	r3, [r7, #11]
 8010652:	4613      	mov	r3, r2
 8010654:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010656:	2300      	movs	r3, #0
 8010658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010664:	893b      	ldrh	r3, [r7, #8]
 8010666:	7af9      	ldrb	r1, [r7, #11]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	f7f7 fc9e 	bl	8007faa <HAL_PCD_EP_Transmit>
 801066e:	4603      	mov	r3, r0
 8010670:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8010672:	7dfb      	ldrb	r3, [r7, #23]
 8010674:	4618      	mov	r0, r3
 8010676:	f000 f83d 	bl	80106f4 <USBD_Get_USB_Status>
 801067a:	4603      	mov	r3, r0
 801067c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801067e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3718      	adds	r7, #24
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	607a      	str	r2, [r7, #4]
 8010692:	461a      	mov	r2, r3
 8010694:	460b      	mov	r3, r1
 8010696:	72fb      	strb	r3, [r7, #11]
 8010698:	4613      	mov	r3, r2
 801069a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106a0:	2300      	movs	r3, #0
 80106a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80106aa:	893b      	ldrh	r3, [r7, #8]
 80106ac:	7af9      	ldrb	r1, [r7, #11]
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	f7f7 fc18 	bl	8007ee4 <HAL_PCD_EP_Receive>
 80106b4:	4603      	mov	r3, r0
 80106b6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80106b8:	7dfb      	ldrb	r3, [r7, #23]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 f81a 	bl	80106f4 <USBD_Get_USB_Status>
 80106c0:	4603      	mov	r3, r0
 80106c2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80106c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3718      	adds	r7, #24
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b082      	sub	sp, #8
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	460b      	mov	r3, r1
 80106d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80106e0:	78fa      	ldrb	r2, [r7, #3]
 80106e2:	4611      	mov	r1, r2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f7 fc48 	bl	8007f7a <HAL_PCD_EP_GetRxCount>
 80106ea:	4603      	mov	r3, r0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	2b03      	cmp	r3, #3
 8010706:	d817      	bhi.n	8010738 <USBD_Get_USB_Status+0x44>
 8010708:	a201      	add	r2, pc, #4	; (adr r2, 8010710 <USBD_Get_USB_Status+0x1c>)
 801070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070e:	bf00      	nop
 8010710:	08010721 	.word	0x08010721
 8010714:	08010727 	.word	0x08010727
 8010718:	0801072d 	.word	0x0801072d
 801071c:	08010733 	.word	0x08010733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	73fb      	strb	r3, [r7, #15]
    break;
 8010724:	e00b      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010726:	2302      	movs	r3, #2
 8010728:	73fb      	strb	r3, [r7, #15]
    break;
 801072a:	e008      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801072c:	2301      	movs	r3, #1
 801072e:	73fb      	strb	r3, [r7, #15]
    break;
 8010730:	e005      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010732:	2302      	movs	r3, #2
 8010734:	73fb      	strb	r3, [r7, #15]
    break;
 8010736:	e002      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010738:	2302      	movs	r3, #2
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	bf00      	nop
  }
  return usb_status;
 801073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <__errno>:
 801074c:	4b01      	ldr	r3, [pc, #4]	; (8010754 <__errno+0x8>)
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	20000e34 	.word	0x20000e34

08010758 <__libc_init_array>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	4e0d      	ldr	r6, [pc, #52]	; (8010790 <__libc_init_array+0x38>)
 801075c:	4c0d      	ldr	r4, [pc, #52]	; (8010794 <__libc_init_array+0x3c>)
 801075e:	1ba4      	subs	r4, r4, r6
 8010760:	10a4      	asrs	r4, r4, #2
 8010762:	2500      	movs	r5, #0
 8010764:	42a5      	cmp	r5, r4
 8010766:	d109      	bne.n	801077c <__libc_init_array+0x24>
 8010768:	4e0b      	ldr	r6, [pc, #44]	; (8010798 <__libc_init_array+0x40>)
 801076a:	4c0c      	ldr	r4, [pc, #48]	; (801079c <__libc_init_array+0x44>)
 801076c:	f005 f97e 	bl	8015a6c <_init>
 8010770:	1ba4      	subs	r4, r4, r6
 8010772:	10a4      	asrs	r4, r4, #2
 8010774:	2500      	movs	r5, #0
 8010776:	42a5      	cmp	r5, r4
 8010778:	d105      	bne.n	8010786 <__libc_init_array+0x2e>
 801077a:	bd70      	pop	{r4, r5, r6, pc}
 801077c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010780:	4798      	blx	r3
 8010782:	3501      	adds	r5, #1
 8010784:	e7ee      	b.n	8010764 <__libc_init_array+0xc>
 8010786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801078a:	4798      	blx	r3
 801078c:	3501      	adds	r5, #1
 801078e:	e7f2      	b.n	8010776 <__libc_init_array+0x1e>
 8010790:	080166a4 	.word	0x080166a4
 8010794:	080166a4 	.word	0x080166a4
 8010798:	080166a4 	.word	0x080166a4
 801079c:	080166a8 	.word	0x080166a8

080107a0 <malloc>:
 80107a0:	4b02      	ldr	r3, [pc, #8]	; (80107ac <malloc+0xc>)
 80107a2:	4601      	mov	r1, r0
 80107a4:	6818      	ldr	r0, [r3, #0]
 80107a6:	f000 b885 	b.w	80108b4 <_malloc_r>
 80107aa:	bf00      	nop
 80107ac:	20000e34 	.word	0x20000e34

080107b0 <free>:
 80107b0:	4b02      	ldr	r3, [pc, #8]	; (80107bc <free+0xc>)
 80107b2:	4601      	mov	r1, r0
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	f000 b82f 	b.w	8010818 <_free_r>
 80107ba:	bf00      	nop
 80107bc:	20000e34 	.word	0x20000e34

080107c0 <memcpy>:
 80107c0:	b510      	push	{r4, lr}
 80107c2:	1e43      	subs	r3, r0, #1
 80107c4:	440a      	add	r2, r1
 80107c6:	4291      	cmp	r1, r2
 80107c8:	d100      	bne.n	80107cc <memcpy+0xc>
 80107ca:	bd10      	pop	{r4, pc}
 80107cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107d4:	e7f7      	b.n	80107c6 <memcpy+0x6>

080107d6 <memmove>:
 80107d6:	4288      	cmp	r0, r1
 80107d8:	b510      	push	{r4, lr}
 80107da:	eb01 0302 	add.w	r3, r1, r2
 80107de:	d807      	bhi.n	80107f0 <memmove+0x1a>
 80107e0:	1e42      	subs	r2, r0, #1
 80107e2:	4299      	cmp	r1, r3
 80107e4:	d00a      	beq.n	80107fc <memmove+0x26>
 80107e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80107ee:	e7f8      	b.n	80107e2 <memmove+0xc>
 80107f0:	4283      	cmp	r3, r0
 80107f2:	d9f5      	bls.n	80107e0 <memmove+0xa>
 80107f4:	1881      	adds	r1, r0, r2
 80107f6:	1ad2      	subs	r2, r2, r3
 80107f8:	42d3      	cmn	r3, r2
 80107fa:	d100      	bne.n	80107fe <memmove+0x28>
 80107fc:	bd10      	pop	{r4, pc}
 80107fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010802:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010806:	e7f7      	b.n	80107f8 <memmove+0x22>

08010808 <memset>:
 8010808:	4402      	add	r2, r0
 801080a:	4603      	mov	r3, r0
 801080c:	4293      	cmp	r3, r2
 801080e:	d100      	bne.n	8010812 <memset+0xa>
 8010810:	4770      	bx	lr
 8010812:	f803 1b01 	strb.w	r1, [r3], #1
 8010816:	e7f9      	b.n	801080c <memset+0x4>

08010818 <_free_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4605      	mov	r5, r0
 801081c:	2900      	cmp	r1, #0
 801081e:	d045      	beq.n	80108ac <_free_r+0x94>
 8010820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010824:	1f0c      	subs	r4, r1, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfb8      	it	lt
 801082a:	18e4      	addlt	r4, r4, r3
 801082c:	f002 ffce 	bl	80137cc <__malloc_lock>
 8010830:	4a1f      	ldr	r2, [pc, #124]	; (80108b0 <_free_r+0x98>)
 8010832:	6813      	ldr	r3, [r2, #0]
 8010834:	4610      	mov	r0, r2
 8010836:	b933      	cbnz	r3, 8010846 <_free_r+0x2e>
 8010838:	6063      	str	r3, [r4, #4]
 801083a:	6014      	str	r4, [r2, #0]
 801083c:	4628      	mov	r0, r5
 801083e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010842:	f002 bfc4 	b.w	80137ce <__malloc_unlock>
 8010846:	42a3      	cmp	r3, r4
 8010848:	d90c      	bls.n	8010864 <_free_r+0x4c>
 801084a:	6821      	ldr	r1, [r4, #0]
 801084c:	1862      	adds	r2, r4, r1
 801084e:	4293      	cmp	r3, r2
 8010850:	bf04      	itt	eq
 8010852:	681a      	ldreq	r2, [r3, #0]
 8010854:	685b      	ldreq	r3, [r3, #4]
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	bf04      	itt	eq
 801085a:	1852      	addeq	r2, r2, r1
 801085c:	6022      	streq	r2, [r4, #0]
 801085e:	6004      	str	r4, [r0, #0]
 8010860:	e7ec      	b.n	801083c <_free_r+0x24>
 8010862:	4613      	mov	r3, r2
 8010864:	685a      	ldr	r2, [r3, #4]
 8010866:	b10a      	cbz	r2, 801086c <_free_r+0x54>
 8010868:	42a2      	cmp	r2, r4
 801086a:	d9fa      	bls.n	8010862 <_free_r+0x4a>
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	1858      	adds	r0, r3, r1
 8010870:	42a0      	cmp	r0, r4
 8010872:	d10b      	bne.n	801088c <_free_r+0x74>
 8010874:	6820      	ldr	r0, [r4, #0]
 8010876:	4401      	add	r1, r0
 8010878:	1858      	adds	r0, r3, r1
 801087a:	4282      	cmp	r2, r0
 801087c:	6019      	str	r1, [r3, #0]
 801087e:	d1dd      	bne.n	801083c <_free_r+0x24>
 8010880:	6810      	ldr	r0, [r2, #0]
 8010882:	6852      	ldr	r2, [r2, #4]
 8010884:	605a      	str	r2, [r3, #4]
 8010886:	4401      	add	r1, r0
 8010888:	6019      	str	r1, [r3, #0]
 801088a:	e7d7      	b.n	801083c <_free_r+0x24>
 801088c:	d902      	bls.n	8010894 <_free_r+0x7c>
 801088e:	230c      	movs	r3, #12
 8010890:	602b      	str	r3, [r5, #0]
 8010892:	e7d3      	b.n	801083c <_free_r+0x24>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	1821      	adds	r1, r4, r0
 8010898:	428a      	cmp	r2, r1
 801089a:	bf04      	itt	eq
 801089c:	6811      	ldreq	r1, [r2, #0]
 801089e:	6852      	ldreq	r2, [r2, #4]
 80108a0:	6062      	str	r2, [r4, #4]
 80108a2:	bf04      	itt	eq
 80108a4:	1809      	addeq	r1, r1, r0
 80108a6:	6021      	streq	r1, [r4, #0]
 80108a8:	605c      	str	r4, [r3, #4]
 80108aa:	e7c7      	b.n	801083c <_free_r+0x24>
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop
 80108b0:	200051cc 	.word	0x200051cc

080108b4 <_malloc_r>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	1ccd      	adds	r5, r1, #3
 80108b8:	f025 0503 	bic.w	r5, r5, #3
 80108bc:	3508      	adds	r5, #8
 80108be:	2d0c      	cmp	r5, #12
 80108c0:	bf38      	it	cc
 80108c2:	250c      	movcc	r5, #12
 80108c4:	2d00      	cmp	r5, #0
 80108c6:	4606      	mov	r6, r0
 80108c8:	db01      	blt.n	80108ce <_malloc_r+0x1a>
 80108ca:	42a9      	cmp	r1, r5
 80108cc:	d903      	bls.n	80108d6 <_malloc_r+0x22>
 80108ce:	230c      	movs	r3, #12
 80108d0:	6033      	str	r3, [r6, #0]
 80108d2:	2000      	movs	r0, #0
 80108d4:	bd70      	pop	{r4, r5, r6, pc}
 80108d6:	f002 ff79 	bl	80137cc <__malloc_lock>
 80108da:	4a21      	ldr	r2, [pc, #132]	; (8010960 <_malloc_r+0xac>)
 80108dc:	6814      	ldr	r4, [r2, #0]
 80108de:	4621      	mov	r1, r4
 80108e0:	b991      	cbnz	r1, 8010908 <_malloc_r+0x54>
 80108e2:	4c20      	ldr	r4, [pc, #128]	; (8010964 <_malloc_r+0xb0>)
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	b91b      	cbnz	r3, 80108f0 <_malloc_r+0x3c>
 80108e8:	4630      	mov	r0, r6
 80108ea:	f000 fe7b 	bl	80115e4 <_sbrk_r>
 80108ee:	6020      	str	r0, [r4, #0]
 80108f0:	4629      	mov	r1, r5
 80108f2:	4630      	mov	r0, r6
 80108f4:	f000 fe76 	bl	80115e4 <_sbrk_r>
 80108f8:	1c43      	adds	r3, r0, #1
 80108fa:	d124      	bne.n	8010946 <_malloc_r+0x92>
 80108fc:	230c      	movs	r3, #12
 80108fe:	6033      	str	r3, [r6, #0]
 8010900:	4630      	mov	r0, r6
 8010902:	f002 ff64 	bl	80137ce <__malloc_unlock>
 8010906:	e7e4      	b.n	80108d2 <_malloc_r+0x1e>
 8010908:	680b      	ldr	r3, [r1, #0]
 801090a:	1b5b      	subs	r3, r3, r5
 801090c:	d418      	bmi.n	8010940 <_malloc_r+0x8c>
 801090e:	2b0b      	cmp	r3, #11
 8010910:	d90f      	bls.n	8010932 <_malloc_r+0x7e>
 8010912:	600b      	str	r3, [r1, #0]
 8010914:	50cd      	str	r5, [r1, r3]
 8010916:	18cc      	adds	r4, r1, r3
 8010918:	4630      	mov	r0, r6
 801091a:	f002 ff58 	bl	80137ce <__malloc_unlock>
 801091e:	f104 000b 	add.w	r0, r4, #11
 8010922:	1d23      	adds	r3, r4, #4
 8010924:	f020 0007 	bic.w	r0, r0, #7
 8010928:	1ac3      	subs	r3, r0, r3
 801092a:	d0d3      	beq.n	80108d4 <_malloc_r+0x20>
 801092c:	425a      	negs	r2, r3
 801092e:	50e2      	str	r2, [r4, r3]
 8010930:	e7d0      	b.n	80108d4 <_malloc_r+0x20>
 8010932:	428c      	cmp	r4, r1
 8010934:	684b      	ldr	r3, [r1, #4]
 8010936:	bf16      	itet	ne
 8010938:	6063      	strne	r3, [r4, #4]
 801093a:	6013      	streq	r3, [r2, #0]
 801093c:	460c      	movne	r4, r1
 801093e:	e7eb      	b.n	8010918 <_malloc_r+0x64>
 8010940:	460c      	mov	r4, r1
 8010942:	6849      	ldr	r1, [r1, #4]
 8010944:	e7cc      	b.n	80108e0 <_malloc_r+0x2c>
 8010946:	1cc4      	adds	r4, r0, #3
 8010948:	f024 0403 	bic.w	r4, r4, #3
 801094c:	42a0      	cmp	r0, r4
 801094e:	d005      	beq.n	801095c <_malloc_r+0xa8>
 8010950:	1a21      	subs	r1, r4, r0
 8010952:	4630      	mov	r0, r6
 8010954:	f000 fe46 	bl	80115e4 <_sbrk_r>
 8010958:	3001      	adds	r0, #1
 801095a:	d0cf      	beq.n	80108fc <_malloc_r+0x48>
 801095c:	6025      	str	r5, [r4, #0]
 801095e:	e7db      	b.n	8010918 <_malloc_r+0x64>
 8010960:	200051cc 	.word	0x200051cc
 8010964:	200051d0 	.word	0x200051d0

08010968 <__cvt>:
 8010968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801096c:	ec55 4b10 	vmov	r4, r5, d0
 8010970:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010972:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010976:	2d00      	cmp	r5, #0
 8010978:	460e      	mov	r6, r1
 801097a:	4691      	mov	r9, r2
 801097c:	4619      	mov	r1, r3
 801097e:	bfb8      	it	lt
 8010980:	4622      	movlt	r2, r4
 8010982:	462b      	mov	r3, r5
 8010984:	f027 0720 	bic.w	r7, r7, #32
 8010988:	bfbb      	ittet	lt
 801098a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801098e:	461d      	movlt	r5, r3
 8010990:	2300      	movge	r3, #0
 8010992:	232d      	movlt	r3, #45	; 0x2d
 8010994:	bfb8      	it	lt
 8010996:	4614      	movlt	r4, r2
 8010998:	2f46      	cmp	r7, #70	; 0x46
 801099a:	700b      	strb	r3, [r1, #0]
 801099c:	d004      	beq.n	80109a8 <__cvt+0x40>
 801099e:	2f45      	cmp	r7, #69	; 0x45
 80109a0:	d100      	bne.n	80109a4 <__cvt+0x3c>
 80109a2:	3601      	adds	r6, #1
 80109a4:	2102      	movs	r1, #2
 80109a6:	e000      	b.n	80109aa <__cvt+0x42>
 80109a8:	2103      	movs	r1, #3
 80109aa:	ab03      	add	r3, sp, #12
 80109ac:	9301      	str	r3, [sp, #4]
 80109ae:	ab02      	add	r3, sp, #8
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	4632      	mov	r2, r6
 80109b4:	4653      	mov	r3, sl
 80109b6:	ec45 4b10 	vmov	d0, r4, r5
 80109ba:	f001 fdf5 	bl	80125a8 <_dtoa_r>
 80109be:	2f47      	cmp	r7, #71	; 0x47
 80109c0:	4680      	mov	r8, r0
 80109c2:	d102      	bne.n	80109ca <__cvt+0x62>
 80109c4:	f019 0f01 	tst.w	r9, #1
 80109c8:	d026      	beq.n	8010a18 <__cvt+0xb0>
 80109ca:	2f46      	cmp	r7, #70	; 0x46
 80109cc:	eb08 0906 	add.w	r9, r8, r6
 80109d0:	d111      	bne.n	80109f6 <__cvt+0x8e>
 80109d2:	f898 3000 	ldrb.w	r3, [r8]
 80109d6:	2b30      	cmp	r3, #48	; 0x30
 80109d8:	d10a      	bne.n	80109f0 <__cvt+0x88>
 80109da:	2200      	movs	r2, #0
 80109dc:	2300      	movs	r3, #0
 80109de:	4620      	mov	r0, r4
 80109e0:	4629      	mov	r1, r5
 80109e2:	f7f0 f881 	bl	8000ae8 <__aeabi_dcmpeq>
 80109e6:	b918      	cbnz	r0, 80109f0 <__cvt+0x88>
 80109e8:	f1c6 0601 	rsb	r6, r6, #1
 80109ec:	f8ca 6000 	str.w	r6, [sl]
 80109f0:	f8da 3000 	ldr.w	r3, [sl]
 80109f4:	4499      	add	r9, r3
 80109f6:	2200      	movs	r2, #0
 80109f8:	2300      	movs	r3, #0
 80109fa:	4620      	mov	r0, r4
 80109fc:	4629      	mov	r1, r5
 80109fe:	f7f0 f873 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a02:	b938      	cbnz	r0, 8010a14 <__cvt+0xac>
 8010a04:	2230      	movs	r2, #48	; 0x30
 8010a06:	9b03      	ldr	r3, [sp, #12]
 8010a08:	454b      	cmp	r3, r9
 8010a0a:	d205      	bcs.n	8010a18 <__cvt+0xb0>
 8010a0c:	1c59      	adds	r1, r3, #1
 8010a0e:	9103      	str	r1, [sp, #12]
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	e7f8      	b.n	8010a06 <__cvt+0x9e>
 8010a14:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a18:	9b03      	ldr	r3, [sp, #12]
 8010a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a1c:	eba3 0308 	sub.w	r3, r3, r8
 8010a20:	4640      	mov	r0, r8
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	b004      	add	sp, #16
 8010a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010a2a <__exponent>:
 8010a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a2c:	2900      	cmp	r1, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	bfba      	itte	lt
 8010a32:	4249      	neglt	r1, r1
 8010a34:	232d      	movlt	r3, #45	; 0x2d
 8010a36:	232b      	movge	r3, #43	; 0x2b
 8010a38:	2909      	cmp	r1, #9
 8010a3a:	f804 2b02 	strb.w	r2, [r4], #2
 8010a3e:	7043      	strb	r3, [r0, #1]
 8010a40:	dd20      	ble.n	8010a84 <__exponent+0x5a>
 8010a42:	f10d 0307 	add.w	r3, sp, #7
 8010a46:	461f      	mov	r7, r3
 8010a48:	260a      	movs	r6, #10
 8010a4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8010a4e:	fb06 1115 	mls	r1, r6, r5, r1
 8010a52:	3130      	adds	r1, #48	; 0x30
 8010a54:	2d09      	cmp	r5, #9
 8010a56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a5a:	f103 32ff 	add.w	r2, r3, #4294967295
 8010a5e:	4629      	mov	r1, r5
 8010a60:	dc09      	bgt.n	8010a76 <__exponent+0x4c>
 8010a62:	3130      	adds	r1, #48	; 0x30
 8010a64:	3b02      	subs	r3, #2
 8010a66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010a6a:	42bb      	cmp	r3, r7
 8010a6c:	4622      	mov	r2, r4
 8010a6e:	d304      	bcc.n	8010a7a <__exponent+0x50>
 8010a70:	1a10      	subs	r0, r2, r0
 8010a72:	b003      	add	sp, #12
 8010a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a76:	4613      	mov	r3, r2
 8010a78:	e7e7      	b.n	8010a4a <__exponent+0x20>
 8010a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a7e:	f804 2b01 	strb.w	r2, [r4], #1
 8010a82:	e7f2      	b.n	8010a6a <__exponent+0x40>
 8010a84:	2330      	movs	r3, #48	; 0x30
 8010a86:	4419      	add	r1, r3
 8010a88:	7083      	strb	r3, [r0, #2]
 8010a8a:	1d02      	adds	r2, r0, #4
 8010a8c:	70c1      	strb	r1, [r0, #3]
 8010a8e:	e7ef      	b.n	8010a70 <__exponent+0x46>

08010a90 <_printf_float>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	b08d      	sub	sp, #52	; 0x34
 8010a96:	460c      	mov	r4, r1
 8010a98:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010a9c:	4616      	mov	r6, r2
 8010a9e:	461f      	mov	r7, r3
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	f002 fe73 	bl	801378c <_localeconv_r>
 8010aa6:	6803      	ldr	r3, [r0, #0]
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ef fb9a 	bl	80001e4 <strlen>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ab8:	9005      	str	r0, [sp, #20]
 8010aba:	3307      	adds	r3, #7
 8010abc:	f023 0307 	bic.w	r3, r3, #7
 8010ac0:	f103 0208 	add.w	r2, r3, #8
 8010ac4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010ac8:	f8d4 b000 	ldr.w	fp, [r4]
 8010acc:	f8c8 2000 	str.w	r2, [r8]
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ad8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010adc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010ae0:	9307      	str	r3, [sp, #28]
 8010ae2:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aea:	4ba7      	ldr	r3, [pc, #668]	; (8010d88 <_printf_float+0x2f8>)
 8010aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010af0:	f7f0 f82c 	bl	8000b4c <__aeabi_dcmpun>
 8010af4:	bb70      	cbnz	r0, 8010b54 <_printf_float+0xc4>
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295
 8010afa:	4ba3      	ldr	r3, [pc, #652]	; (8010d88 <_printf_float+0x2f8>)
 8010afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b00:	f7f0 f806 	bl	8000b10 <__aeabi_dcmple>
 8010b04:	bb30      	cbnz	r0, 8010b54 <_printf_float+0xc4>
 8010b06:	2200      	movs	r2, #0
 8010b08:	2300      	movs	r3, #0
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	f7ef fff5 	bl	8000afc <__aeabi_dcmplt>
 8010b12:	b110      	cbz	r0, 8010b1a <_printf_float+0x8a>
 8010b14:	232d      	movs	r3, #45	; 0x2d
 8010b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b1a:	4a9c      	ldr	r2, [pc, #624]	; (8010d8c <_printf_float+0x2fc>)
 8010b1c:	4b9c      	ldr	r3, [pc, #624]	; (8010d90 <_printf_float+0x300>)
 8010b1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010b22:	bf8c      	ite	hi
 8010b24:	4690      	movhi	r8, r2
 8010b26:	4698      	movls	r8, r3
 8010b28:	2303      	movs	r3, #3
 8010b2a:	f02b 0204 	bic.w	r2, fp, #4
 8010b2e:	6123      	str	r3, [r4, #16]
 8010b30:	6022      	str	r2, [r4, #0]
 8010b32:	f04f 0900 	mov.w	r9, #0
 8010b36:	9700      	str	r7, [sp, #0]
 8010b38:	4633      	mov	r3, r6
 8010b3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f000 f9e6 	bl	8010f10 <_printf_common>
 8010b44:	3001      	adds	r0, #1
 8010b46:	f040 808d 	bne.w	8010c64 <_printf_float+0x1d4>
 8010b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4e:	b00d      	add	sp, #52	; 0x34
 8010b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b54:	4642      	mov	r2, r8
 8010b56:	464b      	mov	r3, r9
 8010b58:	4640      	mov	r0, r8
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	f7ef fff6 	bl	8000b4c <__aeabi_dcmpun>
 8010b60:	b110      	cbz	r0, 8010b68 <_printf_float+0xd8>
 8010b62:	4a8c      	ldr	r2, [pc, #560]	; (8010d94 <_printf_float+0x304>)
 8010b64:	4b8c      	ldr	r3, [pc, #560]	; (8010d98 <_printf_float+0x308>)
 8010b66:	e7da      	b.n	8010b1e <_printf_float+0x8e>
 8010b68:	6861      	ldr	r1, [r4, #4]
 8010b6a:	1c4b      	adds	r3, r1, #1
 8010b6c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010b70:	a80a      	add	r0, sp, #40	; 0x28
 8010b72:	d13e      	bne.n	8010bf2 <_printf_float+0x162>
 8010b74:	2306      	movs	r3, #6
 8010b76:	6063      	str	r3, [r4, #4]
 8010b78:	2300      	movs	r3, #0
 8010b7a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b7e:	ab09      	add	r3, sp, #36	; 0x24
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	ec49 8b10 	vmov	d0, r8, r9
 8010b86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b8a:	6022      	str	r2, [r4, #0]
 8010b8c:	f8cd a004 	str.w	sl, [sp, #4]
 8010b90:	6861      	ldr	r1, [r4, #4]
 8010b92:	4628      	mov	r0, r5
 8010b94:	f7ff fee8 	bl	8010968 <__cvt>
 8010b98:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010b9c:	2b47      	cmp	r3, #71	; 0x47
 8010b9e:	4680      	mov	r8, r0
 8010ba0:	d109      	bne.n	8010bb6 <_printf_float+0x126>
 8010ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba4:	1cd8      	adds	r0, r3, #3
 8010ba6:	db02      	blt.n	8010bae <_printf_float+0x11e>
 8010ba8:	6862      	ldr	r2, [r4, #4]
 8010baa:	4293      	cmp	r3, r2
 8010bac:	dd47      	ble.n	8010c3e <_printf_float+0x1ae>
 8010bae:	f1aa 0a02 	sub.w	sl, sl, #2
 8010bb2:	fa5f fa8a 	uxtb.w	sl, sl
 8010bb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bbc:	d824      	bhi.n	8010c08 <_printf_float+0x178>
 8010bbe:	3901      	subs	r1, #1
 8010bc0:	4652      	mov	r2, sl
 8010bc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010bc6:	9109      	str	r1, [sp, #36]	; 0x24
 8010bc8:	f7ff ff2f 	bl	8010a2a <__exponent>
 8010bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bce:	1813      	adds	r3, r2, r0
 8010bd0:	2a01      	cmp	r2, #1
 8010bd2:	4681      	mov	r9, r0
 8010bd4:	6123      	str	r3, [r4, #16]
 8010bd6:	dc02      	bgt.n	8010bde <_printf_float+0x14e>
 8010bd8:	6822      	ldr	r2, [r4, #0]
 8010bda:	07d1      	lsls	r1, r2, #31
 8010bdc:	d501      	bpl.n	8010be2 <_printf_float+0x152>
 8010bde:	3301      	adds	r3, #1
 8010be0:	6123      	str	r3, [r4, #16]
 8010be2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0a5      	beq.n	8010b36 <_printf_float+0xa6>
 8010bea:	232d      	movs	r3, #45	; 0x2d
 8010bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bf0:	e7a1      	b.n	8010b36 <_printf_float+0xa6>
 8010bf2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010bf6:	f000 8177 	beq.w	8010ee8 <_printf_float+0x458>
 8010bfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010bfe:	d1bb      	bne.n	8010b78 <_printf_float+0xe8>
 8010c00:	2900      	cmp	r1, #0
 8010c02:	d1b9      	bne.n	8010b78 <_printf_float+0xe8>
 8010c04:	2301      	movs	r3, #1
 8010c06:	e7b6      	b.n	8010b76 <_printf_float+0xe6>
 8010c08:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010c0c:	d119      	bne.n	8010c42 <_printf_float+0x1b2>
 8010c0e:	2900      	cmp	r1, #0
 8010c10:	6863      	ldr	r3, [r4, #4]
 8010c12:	dd0c      	ble.n	8010c2e <_printf_float+0x19e>
 8010c14:	6121      	str	r1, [r4, #16]
 8010c16:	b913      	cbnz	r3, 8010c1e <_printf_float+0x18e>
 8010c18:	6822      	ldr	r2, [r4, #0]
 8010c1a:	07d2      	lsls	r2, r2, #31
 8010c1c:	d502      	bpl.n	8010c24 <_printf_float+0x194>
 8010c1e:	3301      	adds	r3, #1
 8010c20:	440b      	add	r3, r1
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c26:	65a3      	str	r3, [r4, #88]	; 0x58
 8010c28:	f04f 0900 	mov.w	r9, #0
 8010c2c:	e7d9      	b.n	8010be2 <_printf_float+0x152>
 8010c2e:	b913      	cbnz	r3, 8010c36 <_printf_float+0x1a6>
 8010c30:	6822      	ldr	r2, [r4, #0]
 8010c32:	07d0      	lsls	r0, r2, #31
 8010c34:	d501      	bpl.n	8010c3a <_printf_float+0x1aa>
 8010c36:	3302      	adds	r3, #2
 8010c38:	e7f3      	b.n	8010c22 <_printf_float+0x192>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e7f1      	b.n	8010c22 <_printf_float+0x192>
 8010c3e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010c42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010c46:	4293      	cmp	r3, r2
 8010c48:	db05      	blt.n	8010c56 <_printf_float+0x1c6>
 8010c4a:	6822      	ldr	r2, [r4, #0]
 8010c4c:	6123      	str	r3, [r4, #16]
 8010c4e:	07d1      	lsls	r1, r2, #31
 8010c50:	d5e8      	bpl.n	8010c24 <_printf_float+0x194>
 8010c52:	3301      	adds	r3, #1
 8010c54:	e7e5      	b.n	8010c22 <_printf_float+0x192>
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	bfd4      	ite	le
 8010c5a:	f1c3 0302 	rsble	r3, r3, #2
 8010c5e:	2301      	movgt	r3, #1
 8010c60:	4413      	add	r3, r2
 8010c62:	e7de      	b.n	8010c22 <_printf_float+0x192>
 8010c64:	6823      	ldr	r3, [r4, #0]
 8010c66:	055a      	lsls	r2, r3, #21
 8010c68:	d407      	bmi.n	8010c7a <_printf_float+0x1ea>
 8010c6a:	6923      	ldr	r3, [r4, #16]
 8010c6c:	4642      	mov	r2, r8
 8010c6e:	4631      	mov	r1, r6
 8010c70:	4628      	mov	r0, r5
 8010c72:	47b8      	blx	r7
 8010c74:	3001      	adds	r0, #1
 8010c76:	d12b      	bne.n	8010cd0 <_printf_float+0x240>
 8010c78:	e767      	b.n	8010b4a <_printf_float+0xba>
 8010c7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010c7e:	f240 80dc 	bls.w	8010e3a <_printf_float+0x3aa>
 8010c82:	2200      	movs	r2, #0
 8010c84:	2300      	movs	r3, #0
 8010c86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c8a:	f7ef ff2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d033      	beq.n	8010cfa <_printf_float+0x26a>
 8010c92:	2301      	movs	r3, #1
 8010c94:	4a41      	ldr	r2, [pc, #260]	; (8010d9c <_printf_float+0x30c>)
 8010c96:	4631      	mov	r1, r6
 8010c98:	4628      	mov	r0, r5
 8010c9a:	47b8      	blx	r7
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	f43f af54 	beq.w	8010b4a <_printf_float+0xba>
 8010ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	db02      	blt.n	8010cb0 <_printf_float+0x220>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	07d8      	lsls	r0, r3, #31
 8010cae:	d50f      	bpl.n	8010cd0 <_printf_float+0x240>
 8010cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cb4:	4631      	mov	r1, r6
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	47b8      	blx	r7
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f43f af45 	beq.w	8010b4a <_printf_float+0xba>
 8010cc0:	f04f 0800 	mov.w	r8, #0
 8010cc4:	f104 091a 	add.w	r9, r4, #26
 8010cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	4543      	cmp	r3, r8
 8010cce:	dc09      	bgt.n	8010ce4 <_printf_float+0x254>
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	079b      	lsls	r3, r3, #30
 8010cd4:	f100 8103 	bmi.w	8010ede <_printf_float+0x44e>
 8010cd8:	68e0      	ldr	r0, [r4, #12]
 8010cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cdc:	4298      	cmp	r0, r3
 8010cde:	bfb8      	it	lt
 8010ce0:	4618      	movlt	r0, r3
 8010ce2:	e734      	b.n	8010b4e <_printf_float+0xbe>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	464a      	mov	r2, r9
 8010ce8:	4631      	mov	r1, r6
 8010cea:	4628      	mov	r0, r5
 8010cec:	47b8      	blx	r7
 8010cee:	3001      	adds	r0, #1
 8010cf0:	f43f af2b 	beq.w	8010b4a <_printf_float+0xba>
 8010cf4:	f108 0801 	add.w	r8, r8, #1
 8010cf8:	e7e6      	b.n	8010cc8 <_printf_float+0x238>
 8010cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dc2b      	bgt.n	8010d58 <_printf_float+0x2c8>
 8010d00:	2301      	movs	r3, #1
 8010d02:	4a26      	ldr	r2, [pc, #152]	; (8010d9c <_printf_float+0x30c>)
 8010d04:	4631      	mov	r1, r6
 8010d06:	4628      	mov	r0, r5
 8010d08:	47b8      	blx	r7
 8010d0a:	3001      	adds	r0, #1
 8010d0c:	f43f af1d 	beq.w	8010b4a <_printf_float+0xba>
 8010d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d12:	b923      	cbnz	r3, 8010d1e <_printf_float+0x28e>
 8010d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d16:	b913      	cbnz	r3, 8010d1e <_printf_float+0x28e>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	07d9      	lsls	r1, r3, #31
 8010d1c:	d5d8      	bpl.n	8010cd0 <_printf_float+0x240>
 8010d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d22:	4631      	mov	r1, r6
 8010d24:	4628      	mov	r0, r5
 8010d26:	47b8      	blx	r7
 8010d28:	3001      	adds	r0, #1
 8010d2a:	f43f af0e 	beq.w	8010b4a <_printf_float+0xba>
 8010d2e:	f04f 0900 	mov.w	r9, #0
 8010d32:	f104 0a1a 	add.w	sl, r4, #26
 8010d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d38:	425b      	negs	r3, r3
 8010d3a:	454b      	cmp	r3, r9
 8010d3c:	dc01      	bgt.n	8010d42 <_printf_float+0x2b2>
 8010d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d40:	e794      	b.n	8010c6c <_printf_float+0x1dc>
 8010d42:	2301      	movs	r3, #1
 8010d44:	4652      	mov	r2, sl
 8010d46:	4631      	mov	r1, r6
 8010d48:	4628      	mov	r0, r5
 8010d4a:	47b8      	blx	r7
 8010d4c:	3001      	adds	r0, #1
 8010d4e:	f43f aefc 	beq.w	8010b4a <_printf_float+0xba>
 8010d52:	f109 0901 	add.w	r9, r9, #1
 8010d56:	e7ee      	b.n	8010d36 <_printf_float+0x2a6>
 8010d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	bfa8      	it	ge
 8010d60:	461a      	movge	r2, r3
 8010d62:	2a00      	cmp	r2, #0
 8010d64:	4691      	mov	r9, r2
 8010d66:	dd07      	ble.n	8010d78 <_printf_float+0x2e8>
 8010d68:	4613      	mov	r3, r2
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4642      	mov	r2, r8
 8010d6e:	4628      	mov	r0, r5
 8010d70:	47b8      	blx	r7
 8010d72:	3001      	adds	r0, #1
 8010d74:	f43f aee9 	beq.w	8010b4a <_printf_float+0xba>
 8010d78:	f104 031a 	add.w	r3, r4, #26
 8010d7c:	f04f 0b00 	mov.w	fp, #0
 8010d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d84:	9306      	str	r3, [sp, #24]
 8010d86:	e015      	b.n	8010db4 <_printf_float+0x324>
 8010d88:	7fefffff 	.word	0x7fefffff
 8010d8c:	08015f78 	.word	0x08015f78
 8010d90:	08015f74 	.word	0x08015f74
 8010d94:	08015f80 	.word	0x08015f80
 8010d98:	08015f7c 	.word	0x08015f7c
 8010d9c:	0801613b 	.word	0x0801613b
 8010da0:	2301      	movs	r3, #1
 8010da2:	9a06      	ldr	r2, [sp, #24]
 8010da4:	4631      	mov	r1, r6
 8010da6:	4628      	mov	r0, r5
 8010da8:	47b8      	blx	r7
 8010daa:	3001      	adds	r0, #1
 8010dac:	f43f aecd 	beq.w	8010b4a <_printf_float+0xba>
 8010db0:	f10b 0b01 	add.w	fp, fp, #1
 8010db4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010db8:	ebaa 0309 	sub.w	r3, sl, r9
 8010dbc:	455b      	cmp	r3, fp
 8010dbe:	dcef      	bgt.n	8010da0 <_printf_float+0x310>
 8010dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	44d0      	add	r8, sl
 8010dc8:	db15      	blt.n	8010df6 <_printf_float+0x366>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	07da      	lsls	r2, r3, #31
 8010dce:	d412      	bmi.n	8010df6 <_printf_float+0x366>
 8010dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010dd4:	eba3 020a 	sub.w	r2, r3, sl
 8010dd8:	eba3 0a01 	sub.w	sl, r3, r1
 8010ddc:	4592      	cmp	sl, r2
 8010dde:	bfa8      	it	ge
 8010de0:	4692      	movge	sl, r2
 8010de2:	f1ba 0f00 	cmp.w	sl, #0
 8010de6:	dc0e      	bgt.n	8010e06 <_printf_float+0x376>
 8010de8:	f04f 0800 	mov.w	r8, #0
 8010dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010df0:	f104 091a 	add.w	r9, r4, #26
 8010df4:	e019      	b.n	8010e2a <_printf_float+0x39a>
 8010df6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	47b8      	blx	r7
 8010e00:	3001      	adds	r0, #1
 8010e02:	d1e5      	bne.n	8010dd0 <_printf_float+0x340>
 8010e04:	e6a1      	b.n	8010b4a <_printf_float+0xba>
 8010e06:	4653      	mov	r3, sl
 8010e08:	4642      	mov	r2, r8
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	47b8      	blx	r7
 8010e10:	3001      	adds	r0, #1
 8010e12:	d1e9      	bne.n	8010de8 <_printf_float+0x358>
 8010e14:	e699      	b.n	8010b4a <_printf_float+0xba>
 8010e16:	2301      	movs	r3, #1
 8010e18:	464a      	mov	r2, r9
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	f43f ae92 	beq.w	8010b4a <_printf_float+0xba>
 8010e26:	f108 0801 	add.w	r8, r8, #1
 8010e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	eba3 030a 	sub.w	r3, r3, sl
 8010e34:	4543      	cmp	r3, r8
 8010e36:	dcee      	bgt.n	8010e16 <_printf_float+0x386>
 8010e38:	e74a      	b.n	8010cd0 <_printf_float+0x240>
 8010e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e3c:	2a01      	cmp	r2, #1
 8010e3e:	dc01      	bgt.n	8010e44 <_printf_float+0x3b4>
 8010e40:	07db      	lsls	r3, r3, #31
 8010e42:	d53a      	bpl.n	8010eba <_printf_float+0x42a>
 8010e44:	2301      	movs	r3, #1
 8010e46:	4642      	mov	r2, r8
 8010e48:	4631      	mov	r1, r6
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	47b8      	blx	r7
 8010e4e:	3001      	adds	r0, #1
 8010e50:	f43f ae7b 	beq.w	8010b4a <_printf_float+0xba>
 8010e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	47b8      	blx	r7
 8010e5e:	3001      	adds	r0, #1
 8010e60:	f108 0801 	add.w	r8, r8, #1
 8010e64:	f43f ae71 	beq.w	8010b4a <_printf_float+0xba>
 8010e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f103 3aff 	add.w	sl, r3, #4294967295
 8010e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e74:	2300      	movs	r3, #0
 8010e76:	f7ef fe37 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e7a:	b9c8      	cbnz	r0, 8010eb0 <_printf_float+0x420>
 8010e7c:	4653      	mov	r3, sl
 8010e7e:	4642      	mov	r2, r8
 8010e80:	4631      	mov	r1, r6
 8010e82:	4628      	mov	r0, r5
 8010e84:	47b8      	blx	r7
 8010e86:	3001      	adds	r0, #1
 8010e88:	d10e      	bne.n	8010ea8 <_printf_float+0x418>
 8010e8a:	e65e      	b.n	8010b4a <_printf_float+0xba>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	4652      	mov	r2, sl
 8010e90:	4631      	mov	r1, r6
 8010e92:	4628      	mov	r0, r5
 8010e94:	47b8      	blx	r7
 8010e96:	3001      	adds	r0, #1
 8010e98:	f43f ae57 	beq.w	8010b4a <_printf_float+0xba>
 8010e9c:	f108 0801 	add.w	r8, r8, #1
 8010ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	4543      	cmp	r3, r8
 8010ea6:	dcf1      	bgt.n	8010e8c <_printf_float+0x3fc>
 8010ea8:	464b      	mov	r3, r9
 8010eaa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010eae:	e6de      	b.n	8010c6e <_printf_float+0x1de>
 8010eb0:	f04f 0800 	mov.w	r8, #0
 8010eb4:	f104 0a1a 	add.w	sl, r4, #26
 8010eb8:	e7f2      	b.n	8010ea0 <_printf_float+0x410>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	e7df      	b.n	8010e7e <_printf_float+0x3ee>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	464a      	mov	r2, r9
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	47b8      	blx	r7
 8010ec8:	3001      	adds	r0, #1
 8010eca:	f43f ae3e 	beq.w	8010b4a <_printf_float+0xba>
 8010ece:	f108 0801 	add.w	r8, r8, #1
 8010ed2:	68e3      	ldr	r3, [r4, #12]
 8010ed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ed6:	1a9b      	subs	r3, r3, r2
 8010ed8:	4543      	cmp	r3, r8
 8010eda:	dcf0      	bgt.n	8010ebe <_printf_float+0x42e>
 8010edc:	e6fc      	b.n	8010cd8 <_printf_float+0x248>
 8010ede:	f04f 0800 	mov.w	r8, #0
 8010ee2:	f104 0919 	add.w	r9, r4, #25
 8010ee6:	e7f4      	b.n	8010ed2 <_printf_float+0x442>
 8010ee8:	2900      	cmp	r1, #0
 8010eea:	f43f ae8b 	beq.w	8010c04 <_printf_float+0x174>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010ef4:	ab09      	add	r3, sp, #36	; 0x24
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	ec49 8b10 	vmov	d0, r8, r9
 8010efc:	6022      	str	r2, [r4, #0]
 8010efe:	f8cd a004 	str.w	sl, [sp, #4]
 8010f02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7ff fd2e 	bl	8010968 <__cvt>
 8010f0c:	4680      	mov	r8, r0
 8010f0e:	e648      	b.n	8010ba2 <_printf_float+0x112>

08010f10 <_printf_common>:
 8010f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f14:	4691      	mov	r9, r2
 8010f16:	461f      	mov	r7, r3
 8010f18:	688a      	ldr	r2, [r1, #8]
 8010f1a:	690b      	ldr	r3, [r1, #16]
 8010f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f20:	4293      	cmp	r3, r2
 8010f22:	bfb8      	it	lt
 8010f24:	4613      	movlt	r3, r2
 8010f26:	f8c9 3000 	str.w	r3, [r9]
 8010f2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f2e:	4606      	mov	r6, r0
 8010f30:	460c      	mov	r4, r1
 8010f32:	b112      	cbz	r2, 8010f3a <_printf_common+0x2a>
 8010f34:	3301      	adds	r3, #1
 8010f36:	f8c9 3000 	str.w	r3, [r9]
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	0699      	lsls	r1, r3, #26
 8010f3e:	bf42      	ittt	mi
 8010f40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010f44:	3302      	addmi	r3, #2
 8010f46:	f8c9 3000 	strmi.w	r3, [r9]
 8010f4a:	6825      	ldr	r5, [r4, #0]
 8010f4c:	f015 0506 	ands.w	r5, r5, #6
 8010f50:	d107      	bne.n	8010f62 <_printf_common+0x52>
 8010f52:	f104 0a19 	add.w	sl, r4, #25
 8010f56:	68e3      	ldr	r3, [r4, #12]
 8010f58:	f8d9 2000 	ldr.w	r2, [r9]
 8010f5c:	1a9b      	subs	r3, r3, r2
 8010f5e:	42ab      	cmp	r3, r5
 8010f60:	dc28      	bgt.n	8010fb4 <_printf_common+0xa4>
 8010f62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010f66:	6822      	ldr	r2, [r4, #0]
 8010f68:	3300      	adds	r3, #0
 8010f6a:	bf18      	it	ne
 8010f6c:	2301      	movne	r3, #1
 8010f6e:	0692      	lsls	r2, r2, #26
 8010f70:	d42d      	bmi.n	8010fce <_printf_common+0xbe>
 8010f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f76:	4639      	mov	r1, r7
 8010f78:	4630      	mov	r0, r6
 8010f7a:	47c0      	blx	r8
 8010f7c:	3001      	adds	r0, #1
 8010f7e:	d020      	beq.n	8010fc2 <_printf_common+0xb2>
 8010f80:	6823      	ldr	r3, [r4, #0]
 8010f82:	68e5      	ldr	r5, [r4, #12]
 8010f84:	f8d9 2000 	ldr.w	r2, [r9]
 8010f88:	f003 0306 	and.w	r3, r3, #6
 8010f8c:	2b04      	cmp	r3, #4
 8010f8e:	bf08      	it	eq
 8010f90:	1aad      	subeq	r5, r5, r2
 8010f92:	68a3      	ldr	r3, [r4, #8]
 8010f94:	6922      	ldr	r2, [r4, #16]
 8010f96:	bf0c      	ite	eq
 8010f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f9c:	2500      	movne	r5, #0
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	bfc4      	itt	gt
 8010fa2:	1a9b      	subgt	r3, r3, r2
 8010fa4:	18ed      	addgt	r5, r5, r3
 8010fa6:	f04f 0900 	mov.w	r9, #0
 8010faa:	341a      	adds	r4, #26
 8010fac:	454d      	cmp	r5, r9
 8010fae:	d11a      	bne.n	8010fe6 <_printf_common+0xd6>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e008      	b.n	8010fc6 <_printf_common+0xb6>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	4652      	mov	r2, sl
 8010fb8:	4639      	mov	r1, r7
 8010fba:	4630      	mov	r0, r6
 8010fbc:	47c0      	blx	r8
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	d103      	bne.n	8010fca <_printf_common+0xba>
 8010fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fca:	3501      	adds	r5, #1
 8010fcc:	e7c3      	b.n	8010f56 <_printf_common+0x46>
 8010fce:	18e1      	adds	r1, r4, r3
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	2030      	movs	r0, #48	; 0x30
 8010fd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010fd8:	4422      	add	r2, r4
 8010fda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010fde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010fe2:	3302      	adds	r3, #2
 8010fe4:	e7c5      	b.n	8010f72 <_printf_common+0x62>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	4622      	mov	r2, r4
 8010fea:	4639      	mov	r1, r7
 8010fec:	4630      	mov	r0, r6
 8010fee:	47c0      	blx	r8
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d0e6      	beq.n	8010fc2 <_printf_common+0xb2>
 8010ff4:	f109 0901 	add.w	r9, r9, #1
 8010ff8:	e7d8      	b.n	8010fac <_printf_common+0x9c>
	...

08010ffc <_printf_i>:
 8010ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011000:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011004:	460c      	mov	r4, r1
 8011006:	7e09      	ldrb	r1, [r1, #24]
 8011008:	b085      	sub	sp, #20
 801100a:	296e      	cmp	r1, #110	; 0x6e
 801100c:	4617      	mov	r7, r2
 801100e:	4606      	mov	r6, r0
 8011010:	4698      	mov	r8, r3
 8011012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011014:	f000 80b3 	beq.w	801117e <_printf_i+0x182>
 8011018:	d822      	bhi.n	8011060 <_printf_i+0x64>
 801101a:	2963      	cmp	r1, #99	; 0x63
 801101c:	d036      	beq.n	801108c <_printf_i+0x90>
 801101e:	d80a      	bhi.n	8011036 <_printf_i+0x3a>
 8011020:	2900      	cmp	r1, #0
 8011022:	f000 80b9 	beq.w	8011198 <_printf_i+0x19c>
 8011026:	2958      	cmp	r1, #88	; 0x58
 8011028:	f000 8083 	beq.w	8011132 <_printf_i+0x136>
 801102c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011030:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011034:	e032      	b.n	801109c <_printf_i+0xa0>
 8011036:	2964      	cmp	r1, #100	; 0x64
 8011038:	d001      	beq.n	801103e <_printf_i+0x42>
 801103a:	2969      	cmp	r1, #105	; 0x69
 801103c:	d1f6      	bne.n	801102c <_printf_i+0x30>
 801103e:	6820      	ldr	r0, [r4, #0]
 8011040:	6813      	ldr	r3, [r2, #0]
 8011042:	0605      	lsls	r5, r0, #24
 8011044:	f103 0104 	add.w	r1, r3, #4
 8011048:	d52a      	bpl.n	80110a0 <_printf_i+0xa4>
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6011      	str	r1, [r2, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	da03      	bge.n	801105a <_printf_i+0x5e>
 8011052:	222d      	movs	r2, #45	; 0x2d
 8011054:	425b      	negs	r3, r3
 8011056:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801105a:	486f      	ldr	r0, [pc, #444]	; (8011218 <_printf_i+0x21c>)
 801105c:	220a      	movs	r2, #10
 801105e:	e039      	b.n	80110d4 <_printf_i+0xd8>
 8011060:	2973      	cmp	r1, #115	; 0x73
 8011062:	f000 809d 	beq.w	80111a0 <_printf_i+0x1a4>
 8011066:	d808      	bhi.n	801107a <_printf_i+0x7e>
 8011068:	296f      	cmp	r1, #111	; 0x6f
 801106a:	d020      	beq.n	80110ae <_printf_i+0xb2>
 801106c:	2970      	cmp	r1, #112	; 0x70
 801106e:	d1dd      	bne.n	801102c <_printf_i+0x30>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	f043 0320 	orr.w	r3, r3, #32
 8011076:	6023      	str	r3, [r4, #0]
 8011078:	e003      	b.n	8011082 <_printf_i+0x86>
 801107a:	2975      	cmp	r1, #117	; 0x75
 801107c:	d017      	beq.n	80110ae <_printf_i+0xb2>
 801107e:	2978      	cmp	r1, #120	; 0x78
 8011080:	d1d4      	bne.n	801102c <_printf_i+0x30>
 8011082:	2378      	movs	r3, #120	; 0x78
 8011084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011088:	4864      	ldr	r0, [pc, #400]	; (801121c <_printf_i+0x220>)
 801108a:	e055      	b.n	8011138 <_printf_i+0x13c>
 801108c:	6813      	ldr	r3, [r2, #0]
 801108e:	1d19      	adds	r1, r3, #4
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	6011      	str	r1, [r2, #0]
 8011094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801109c:	2301      	movs	r3, #1
 801109e:	e08c      	b.n	80111ba <_printf_i+0x1be>
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6011      	str	r1, [r2, #0]
 80110a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80110a8:	bf18      	it	ne
 80110aa:	b21b      	sxthne	r3, r3
 80110ac:	e7cf      	b.n	801104e <_printf_i+0x52>
 80110ae:	6813      	ldr	r3, [r2, #0]
 80110b0:	6825      	ldr	r5, [r4, #0]
 80110b2:	1d18      	adds	r0, r3, #4
 80110b4:	6010      	str	r0, [r2, #0]
 80110b6:	0628      	lsls	r0, r5, #24
 80110b8:	d501      	bpl.n	80110be <_printf_i+0xc2>
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	e002      	b.n	80110c4 <_printf_i+0xc8>
 80110be:	0668      	lsls	r0, r5, #25
 80110c0:	d5fb      	bpl.n	80110ba <_printf_i+0xbe>
 80110c2:	881b      	ldrh	r3, [r3, #0]
 80110c4:	4854      	ldr	r0, [pc, #336]	; (8011218 <_printf_i+0x21c>)
 80110c6:	296f      	cmp	r1, #111	; 0x6f
 80110c8:	bf14      	ite	ne
 80110ca:	220a      	movne	r2, #10
 80110cc:	2208      	moveq	r2, #8
 80110ce:	2100      	movs	r1, #0
 80110d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110d4:	6865      	ldr	r5, [r4, #4]
 80110d6:	60a5      	str	r5, [r4, #8]
 80110d8:	2d00      	cmp	r5, #0
 80110da:	f2c0 8095 	blt.w	8011208 <_printf_i+0x20c>
 80110de:	6821      	ldr	r1, [r4, #0]
 80110e0:	f021 0104 	bic.w	r1, r1, #4
 80110e4:	6021      	str	r1, [r4, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d13d      	bne.n	8011166 <_printf_i+0x16a>
 80110ea:	2d00      	cmp	r5, #0
 80110ec:	f040 808e 	bne.w	801120c <_printf_i+0x210>
 80110f0:	4665      	mov	r5, ip
 80110f2:	2a08      	cmp	r2, #8
 80110f4:	d10b      	bne.n	801110e <_printf_i+0x112>
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	07db      	lsls	r3, r3, #31
 80110fa:	d508      	bpl.n	801110e <_printf_i+0x112>
 80110fc:	6923      	ldr	r3, [r4, #16]
 80110fe:	6862      	ldr	r2, [r4, #4]
 8011100:	429a      	cmp	r2, r3
 8011102:	bfde      	ittt	le
 8011104:	2330      	movle	r3, #48	; 0x30
 8011106:	f805 3c01 	strble.w	r3, [r5, #-1]
 801110a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801110e:	ebac 0305 	sub.w	r3, ip, r5
 8011112:	6123      	str	r3, [r4, #16]
 8011114:	f8cd 8000 	str.w	r8, [sp]
 8011118:	463b      	mov	r3, r7
 801111a:	aa03      	add	r2, sp, #12
 801111c:	4621      	mov	r1, r4
 801111e:	4630      	mov	r0, r6
 8011120:	f7ff fef6 	bl	8010f10 <_printf_common>
 8011124:	3001      	adds	r0, #1
 8011126:	d14d      	bne.n	80111c4 <_printf_i+0x1c8>
 8011128:	f04f 30ff 	mov.w	r0, #4294967295
 801112c:	b005      	add	sp, #20
 801112e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011132:	4839      	ldr	r0, [pc, #228]	; (8011218 <_printf_i+0x21c>)
 8011134:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011138:	6813      	ldr	r3, [r2, #0]
 801113a:	6821      	ldr	r1, [r4, #0]
 801113c:	1d1d      	adds	r5, r3, #4
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	6015      	str	r5, [r2, #0]
 8011142:	060a      	lsls	r2, r1, #24
 8011144:	d50b      	bpl.n	801115e <_printf_i+0x162>
 8011146:	07ca      	lsls	r2, r1, #31
 8011148:	bf44      	itt	mi
 801114a:	f041 0120 	orrmi.w	r1, r1, #32
 801114e:	6021      	strmi	r1, [r4, #0]
 8011150:	b91b      	cbnz	r3, 801115a <_printf_i+0x15e>
 8011152:	6822      	ldr	r2, [r4, #0]
 8011154:	f022 0220 	bic.w	r2, r2, #32
 8011158:	6022      	str	r2, [r4, #0]
 801115a:	2210      	movs	r2, #16
 801115c:	e7b7      	b.n	80110ce <_printf_i+0xd2>
 801115e:	064d      	lsls	r5, r1, #25
 8011160:	bf48      	it	mi
 8011162:	b29b      	uxthmi	r3, r3
 8011164:	e7ef      	b.n	8011146 <_printf_i+0x14a>
 8011166:	4665      	mov	r5, ip
 8011168:	fbb3 f1f2 	udiv	r1, r3, r2
 801116c:	fb02 3311 	mls	r3, r2, r1, r3
 8011170:	5cc3      	ldrb	r3, [r0, r3]
 8011172:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011176:	460b      	mov	r3, r1
 8011178:	2900      	cmp	r1, #0
 801117a:	d1f5      	bne.n	8011168 <_printf_i+0x16c>
 801117c:	e7b9      	b.n	80110f2 <_printf_i+0xf6>
 801117e:	6813      	ldr	r3, [r2, #0]
 8011180:	6825      	ldr	r5, [r4, #0]
 8011182:	6961      	ldr	r1, [r4, #20]
 8011184:	1d18      	adds	r0, r3, #4
 8011186:	6010      	str	r0, [r2, #0]
 8011188:	0628      	lsls	r0, r5, #24
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	d501      	bpl.n	8011192 <_printf_i+0x196>
 801118e:	6019      	str	r1, [r3, #0]
 8011190:	e002      	b.n	8011198 <_printf_i+0x19c>
 8011192:	066a      	lsls	r2, r5, #25
 8011194:	d5fb      	bpl.n	801118e <_printf_i+0x192>
 8011196:	8019      	strh	r1, [r3, #0]
 8011198:	2300      	movs	r3, #0
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	4665      	mov	r5, ip
 801119e:	e7b9      	b.n	8011114 <_printf_i+0x118>
 80111a0:	6813      	ldr	r3, [r2, #0]
 80111a2:	1d19      	adds	r1, r3, #4
 80111a4:	6011      	str	r1, [r2, #0]
 80111a6:	681d      	ldr	r5, [r3, #0]
 80111a8:	6862      	ldr	r2, [r4, #4]
 80111aa:	2100      	movs	r1, #0
 80111ac:	4628      	mov	r0, r5
 80111ae:	f7ef f827 	bl	8000200 <memchr>
 80111b2:	b108      	cbz	r0, 80111b8 <_printf_i+0x1bc>
 80111b4:	1b40      	subs	r0, r0, r5
 80111b6:	6060      	str	r0, [r4, #4]
 80111b8:	6863      	ldr	r3, [r4, #4]
 80111ba:	6123      	str	r3, [r4, #16]
 80111bc:	2300      	movs	r3, #0
 80111be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111c2:	e7a7      	b.n	8011114 <_printf_i+0x118>
 80111c4:	6923      	ldr	r3, [r4, #16]
 80111c6:	462a      	mov	r2, r5
 80111c8:	4639      	mov	r1, r7
 80111ca:	4630      	mov	r0, r6
 80111cc:	47c0      	blx	r8
 80111ce:	3001      	adds	r0, #1
 80111d0:	d0aa      	beq.n	8011128 <_printf_i+0x12c>
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	079b      	lsls	r3, r3, #30
 80111d6:	d413      	bmi.n	8011200 <_printf_i+0x204>
 80111d8:	68e0      	ldr	r0, [r4, #12]
 80111da:	9b03      	ldr	r3, [sp, #12]
 80111dc:	4298      	cmp	r0, r3
 80111de:	bfb8      	it	lt
 80111e0:	4618      	movlt	r0, r3
 80111e2:	e7a3      	b.n	801112c <_printf_i+0x130>
 80111e4:	2301      	movs	r3, #1
 80111e6:	464a      	mov	r2, r9
 80111e8:	4639      	mov	r1, r7
 80111ea:	4630      	mov	r0, r6
 80111ec:	47c0      	blx	r8
 80111ee:	3001      	adds	r0, #1
 80111f0:	d09a      	beq.n	8011128 <_printf_i+0x12c>
 80111f2:	3501      	adds	r5, #1
 80111f4:	68e3      	ldr	r3, [r4, #12]
 80111f6:	9a03      	ldr	r2, [sp, #12]
 80111f8:	1a9b      	subs	r3, r3, r2
 80111fa:	42ab      	cmp	r3, r5
 80111fc:	dcf2      	bgt.n	80111e4 <_printf_i+0x1e8>
 80111fe:	e7eb      	b.n	80111d8 <_printf_i+0x1dc>
 8011200:	2500      	movs	r5, #0
 8011202:	f104 0919 	add.w	r9, r4, #25
 8011206:	e7f5      	b.n	80111f4 <_printf_i+0x1f8>
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1ac      	bne.n	8011166 <_printf_i+0x16a>
 801120c:	7803      	ldrb	r3, [r0, #0]
 801120e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011212:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011216:	e76c      	b.n	80110f2 <_printf_i+0xf6>
 8011218:	08015f84 	.word	0x08015f84
 801121c:	08015f95 	.word	0x08015f95

08011220 <_scanf_float>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	469a      	mov	sl, r3
 8011226:	688b      	ldr	r3, [r1, #8]
 8011228:	4616      	mov	r6, r2
 801122a:	1e5a      	subs	r2, r3, #1
 801122c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011230:	b087      	sub	sp, #28
 8011232:	bf83      	ittte	hi
 8011234:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011238:	189b      	addhi	r3, r3, r2
 801123a:	9301      	strhi	r3, [sp, #4]
 801123c:	2300      	movls	r3, #0
 801123e:	bf86      	itte	hi
 8011240:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011244:	608b      	strhi	r3, [r1, #8]
 8011246:	9301      	strls	r3, [sp, #4]
 8011248:	680b      	ldr	r3, [r1, #0]
 801124a:	4688      	mov	r8, r1
 801124c:	f04f 0b00 	mov.w	fp, #0
 8011250:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011254:	f848 3b1c 	str.w	r3, [r8], #28
 8011258:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801125c:	4607      	mov	r7, r0
 801125e:	460c      	mov	r4, r1
 8011260:	4645      	mov	r5, r8
 8011262:	465a      	mov	r2, fp
 8011264:	46d9      	mov	r9, fp
 8011266:	f8cd b008 	str.w	fp, [sp, #8]
 801126a:	68a1      	ldr	r1, [r4, #8]
 801126c:	b181      	cbz	r1, 8011290 <_scanf_float+0x70>
 801126e:	6833      	ldr	r3, [r6, #0]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	2b49      	cmp	r3, #73	; 0x49
 8011274:	d071      	beq.n	801135a <_scanf_float+0x13a>
 8011276:	d84d      	bhi.n	8011314 <_scanf_float+0xf4>
 8011278:	2b39      	cmp	r3, #57	; 0x39
 801127a:	d840      	bhi.n	80112fe <_scanf_float+0xde>
 801127c:	2b31      	cmp	r3, #49	; 0x31
 801127e:	f080 8088 	bcs.w	8011392 <_scanf_float+0x172>
 8011282:	2b2d      	cmp	r3, #45	; 0x2d
 8011284:	f000 8090 	beq.w	80113a8 <_scanf_float+0x188>
 8011288:	d815      	bhi.n	80112b6 <_scanf_float+0x96>
 801128a:	2b2b      	cmp	r3, #43	; 0x2b
 801128c:	f000 808c 	beq.w	80113a8 <_scanf_float+0x188>
 8011290:	f1b9 0f00 	cmp.w	r9, #0
 8011294:	d003      	beq.n	801129e <_scanf_float+0x7e>
 8011296:	6823      	ldr	r3, [r4, #0]
 8011298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	3a01      	subs	r2, #1
 80112a0:	2a01      	cmp	r2, #1
 80112a2:	f200 80ea 	bhi.w	801147a <_scanf_float+0x25a>
 80112a6:	4545      	cmp	r5, r8
 80112a8:	f200 80dc 	bhi.w	8011464 <_scanf_float+0x244>
 80112ac:	2601      	movs	r6, #1
 80112ae:	4630      	mov	r0, r6
 80112b0:	b007      	add	sp, #28
 80112b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b6:	2b2e      	cmp	r3, #46	; 0x2e
 80112b8:	f000 809f 	beq.w	80113fa <_scanf_float+0x1da>
 80112bc:	2b30      	cmp	r3, #48	; 0x30
 80112be:	d1e7      	bne.n	8011290 <_scanf_float+0x70>
 80112c0:	6820      	ldr	r0, [r4, #0]
 80112c2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80112c6:	d064      	beq.n	8011392 <_scanf_float+0x172>
 80112c8:	9b01      	ldr	r3, [sp, #4]
 80112ca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80112ce:	6020      	str	r0, [r4, #0]
 80112d0:	f109 0901 	add.w	r9, r9, #1
 80112d4:	b11b      	cbz	r3, 80112de <_scanf_float+0xbe>
 80112d6:	3b01      	subs	r3, #1
 80112d8:	3101      	adds	r1, #1
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	60a1      	str	r1, [r4, #8]
 80112de:	68a3      	ldr	r3, [r4, #8]
 80112e0:	3b01      	subs	r3, #1
 80112e2:	60a3      	str	r3, [r4, #8]
 80112e4:	6923      	ldr	r3, [r4, #16]
 80112e6:	3301      	adds	r3, #1
 80112e8:	6123      	str	r3, [r4, #16]
 80112ea:	6873      	ldr	r3, [r6, #4]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	6073      	str	r3, [r6, #4]
 80112f2:	f340 80ac 	ble.w	801144e <_scanf_float+0x22e>
 80112f6:	6833      	ldr	r3, [r6, #0]
 80112f8:	3301      	adds	r3, #1
 80112fa:	6033      	str	r3, [r6, #0]
 80112fc:	e7b5      	b.n	801126a <_scanf_float+0x4a>
 80112fe:	2b45      	cmp	r3, #69	; 0x45
 8011300:	f000 8085 	beq.w	801140e <_scanf_float+0x1ee>
 8011304:	2b46      	cmp	r3, #70	; 0x46
 8011306:	d06a      	beq.n	80113de <_scanf_float+0x1be>
 8011308:	2b41      	cmp	r3, #65	; 0x41
 801130a:	d1c1      	bne.n	8011290 <_scanf_float+0x70>
 801130c:	2a01      	cmp	r2, #1
 801130e:	d1bf      	bne.n	8011290 <_scanf_float+0x70>
 8011310:	2202      	movs	r2, #2
 8011312:	e046      	b.n	80113a2 <_scanf_float+0x182>
 8011314:	2b65      	cmp	r3, #101	; 0x65
 8011316:	d07a      	beq.n	801140e <_scanf_float+0x1ee>
 8011318:	d818      	bhi.n	801134c <_scanf_float+0x12c>
 801131a:	2b54      	cmp	r3, #84	; 0x54
 801131c:	d066      	beq.n	80113ec <_scanf_float+0x1cc>
 801131e:	d811      	bhi.n	8011344 <_scanf_float+0x124>
 8011320:	2b4e      	cmp	r3, #78	; 0x4e
 8011322:	d1b5      	bne.n	8011290 <_scanf_float+0x70>
 8011324:	2a00      	cmp	r2, #0
 8011326:	d146      	bne.n	80113b6 <_scanf_float+0x196>
 8011328:	f1b9 0f00 	cmp.w	r9, #0
 801132c:	d145      	bne.n	80113ba <_scanf_float+0x19a>
 801132e:	6821      	ldr	r1, [r4, #0]
 8011330:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011334:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011338:	d13f      	bne.n	80113ba <_scanf_float+0x19a>
 801133a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801133e:	6021      	str	r1, [r4, #0]
 8011340:	2201      	movs	r2, #1
 8011342:	e02e      	b.n	80113a2 <_scanf_float+0x182>
 8011344:	2b59      	cmp	r3, #89	; 0x59
 8011346:	d01e      	beq.n	8011386 <_scanf_float+0x166>
 8011348:	2b61      	cmp	r3, #97	; 0x61
 801134a:	e7de      	b.n	801130a <_scanf_float+0xea>
 801134c:	2b6e      	cmp	r3, #110	; 0x6e
 801134e:	d0e9      	beq.n	8011324 <_scanf_float+0x104>
 8011350:	d815      	bhi.n	801137e <_scanf_float+0x15e>
 8011352:	2b66      	cmp	r3, #102	; 0x66
 8011354:	d043      	beq.n	80113de <_scanf_float+0x1be>
 8011356:	2b69      	cmp	r3, #105	; 0x69
 8011358:	d19a      	bne.n	8011290 <_scanf_float+0x70>
 801135a:	f1bb 0f00 	cmp.w	fp, #0
 801135e:	d138      	bne.n	80113d2 <_scanf_float+0x1b2>
 8011360:	f1b9 0f00 	cmp.w	r9, #0
 8011364:	d197      	bne.n	8011296 <_scanf_float+0x76>
 8011366:	6821      	ldr	r1, [r4, #0]
 8011368:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801136c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011370:	d195      	bne.n	801129e <_scanf_float+0x7e>
 8011372:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011376:	6021      	str	r1, [r4, #0]
 8011378:	f04f 0b01 	mov.w	fp, #1
 801137c:	e011      	b.n	80113a2 <_scanf_float+0x182>
 801137e:	2b74      	cmp	r3, #116	; 0x74
 8011380:	d034      	beq.n	80113ec <_scanf_float+0x1cc>
 8011382:	2b79      	cmp	r3, #121	; 0x79
 8011384:	d184      	bne.n	8011290 <_scanf_float+0x70>
 8011386:	f1bb 0f07 	cmp.w	fp, #7
 801138a:	d181      	bne.n	8011290 <_scanf_float+0x70>
 801138c:	f04f 0b08 	mov.w	fp, #8
 8011390:	e007      	b.n	80113a2 <_scanf_float+0x182>
 8011392:	eb12 0f0b 	cmn.w	r2, fp
 8011396:	f47f af7b 	bne.w	8011290 <_scanf_float+0x70>
 801139a:	6821      	ldr	r1, [r4, #0]
 801139c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80113a0:	6021      	str	r1, [r4, #0]
 80113a2:	702b      	strb	r3, [r5, #0]
 80113a4:	3501      	adds	r5, #1
 80113a6:	e79a      	b.n	80112de <_scanf_float+0xbe>
 80113a8:	6821      	ldr	r1, [r4, #0]
 80113aa:	0608      	lsls	r0, r1, #24
 80113ac:	f57f af70 	bpl.w	8011290 <_scanf_float+0x70>
 80113b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80113b4:	e7f4      	b.n	80113a0 <_scanf_float+0x180>
 80113b6:	2a02      	cmp	r2, #2
 80113b8:	d047      	beq.n	801144a <_scanf_float+0x22a>
 80113ba:	f1bb 0f01 	cmp.w	fp, #1
 80113be:	d003      	beq.n	80113c8 <_scanf_float+0x1a8>
 80113c0:	f1bb 0f04 	cmp.w	fp, #4
 80113c4:	f47f af64 	bne.w	8011290 <_scanf_float+0x70>
 80113c8:	f10b 0b01 	add.w	fp, fp, #1
 80113cc:	fa5f fb8b 	uxtb.w	fp, fp
 80113d0:	e7e7      	b.n	80113a2 <_scanf_float+0x182>
 80113d2:	f1bb 0f03 	cmp.w	fp, #3
 80113d6:	d0f7      	beq.n	80113c8 <_scanf_float+0x1a8>
 80113d8:	f1bb 0f05 	cmp.w	fp, #5
 80113dc:	e7f2      	b.n	80113c4 <_scanf_float+0x1a4>
 80113de:	f1bb 0f02 	cmp.w	fp, #2
 80113e2:	f47f af55 	bne.w	8011290 <_scanf_float+0x70>
 80113e6:	f04f 0b03 	mov.w	fp, #3
 80113ea:	e7da      	b.n	80113a2 <_scanf_float+0x182>
 80113ec:	f1bb 0f06 	cmp.w	fp, #6
 80113f0:	f47f af4e 	bne.w	8011290 <_scanf_float+0x70>
 80113f4:	f04f 0b07 	mov.w	fp, #7
 80113f8:	e7d3      	b.n	80113a2 <_scanf_float+0x182>
 80113fa:	6821      	ldr	r1, [r4, #0]
 80113fc:	0588      	lsls	r0, r1, #22
 80113fe:	f57f af47 	bpl.w	8011290 <_scanf_float+0x70>
 8011402:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011406:	6021      	str	r1, [r4, #0]
 8011408:	f8cd 9008 	str.w	r9, [sp, #8]
 801140c:	e7c9      	b.n	80113a2 <_scanf_float+0x182>
 801140e:	6821      	ldr	r1, [r4, #0]
 8011410:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011414:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011418:	d006      	beq.n	8011428 <_scanf_float+0x208>
 801141a:	0548      	lsls	r0, r1, #21
 801141c:	f57f af38 	bpl.w	8011290 <_scanf_float+0x70>
 8011420:	f1b9 0f00 	cmp.w	r9, #0
 8011424:	f43f af3b 	beq.w	801129e <_scanf_float+0x7e>
 8011428:	0588      	lsls	r0, r1, #22
 801142a:	bf58      	it	pl
 801142c:	9802      	ldrpl	r0, [sp, #8]
 801142e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011432:	bf58      	it	pl
 8011434:	eba9 0000 	subpl.w	r0, r9, r0
 8011438:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801143c:	bf58      	it	pl
 801143e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011442:	6021      	str	r1, [r4, #0]
 8011444:	f04f 0900 	mov.w	r9, #0
 8011448:	e7ab      	b.n	80113a2 <_scanf_float+0x182>
 801144a:	2203      	movs	r2, #3
 801144c:	e7a9      	b.n	80113a2 <_scanf_float+0x182>
 801144e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011452:	9205      	str	r2, [sp, #20]
 8011454:	4631      	mov	r1, r6
 8011456:	4638      	mov	r0, r7
 8011458:	4798      	blx	r3
 801145a:	9a05      	ldr	r2, [sp, #20]
 801145c:	2800      	cmp	r0, #0
 801145e:	f43f af04 	beq.w	801126a <_scanf_float+0x4a>
 8011462:	e715      	b.n	8011290 <_scanf_float+0x70>
 8011464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011468:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801146c:	4632      	mov	r2, r6
 801146e:	4638      	mov	r0, r7
 8011470:	4798      	blx	r3
 8011472:	6923      	ldr	r3, [r4, #16]
 8011474:	3b01      	subs	r3, #1
 8011476:	6123      	str	r3, [r4, #16]
 8011478:	e715      	b.n	80112a6 <_scanf_float+0x86>
 801147a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801147e:	2b06      	cmp	r3, #6
 8011480:	d80a      	bhi.n	8011498 <_scanf_float+0x278>
 8011482:	f1bb 0f02 	cmp.w	fp, #2
 8011486:	d968      	bls.n	801155a <_scanf_float+0x33a>
 8011488:	f1ab 0b03 	sub.w	fp, fp, #3
 801148c:	fa5f fb8b 	uxtb.w	fp, fp
 8011490:	eba5 0b0b 	sub.w	fp, r5, fp
 8011494:	455d      	cmp	r5, fp
 8011496:	d14b      	bne.n	8011530 <_scanf_float+0x310>
 8011498:	6823      	ldr	r3, [r4, #0]
 801149a:	05da      	lsls	r2, r3, #23
 801149c:	d51f      	bpl.n	80114de <_scanf_float+0x2be>
 801149e:	055b      	lsls	r3, r3, #21
 80114a0:	d468      	bmi.n	8011574 <_scanf_float+0x354>
 80114a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80114a6:	6923      	ldr	r3, [r4, #16]
 80114a8:	2965      	cmp	r1, #101	; 0x65
 80114aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80114ae:	f105 3bff 	add.w	fp, r5, #4294967295
 80114b2:	6123      	str	r3, [r4, #16]
 80114b4:	d00d      	beq.n	80114d2 <_scanf_float+0x2b2>
 80114b6:	2945      	cmp	r1, #69	; 0x45
 80114b8:	d00b      	beq.n	80114d2 <_scanf_float+0x2b2>
 80114ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114be:	4632      	mov	r2, r6
 80114c0:	4638      	mov	r0, r7
 80114c2:	4798      	blx	r3
 80114c4:	6923      	ldr	r3, [r4, #16]
 80114c6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80114ca:	3b01      	subs	r3, #1
 80114cc:	f1a5 0b02 	sub.w	fp, r5, #2
 80114d0:	6123      	str	r3, [r4, #16]
 80114d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114d6:	4632      	mov	r2, r6
 80114d8:	4638      	mov	r0, r7
 80114da:	4798      	blx	r3
 80114dc:	465d      	mov	r5, fp
 80114de:	6826      	ldr	r6, [r4, #0]
 80114e0:	f016 0610 	ands.w	r6, r6, #16
 80114e4:	d17a      	bne.n	80115dc <_scanf_float+0x3bc>
 80114e6:	702e      	strb	r6, [r5, #0]
 80114e8:	6823      	ldr	r3, [r4, #0]
 80114ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80114ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114f2:	d142      	bne.n	801157a <_scanf_float+0x35a>
 80114f4:	9b02      	ldr	r3, [sp, #8]
 80114f6:	eba9 0303 	sub.w	r3, r9, r3
 80114fa:	425a      	negs	r2, r3
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d149      	bne.n	8011594 <_scanf_float+0x374>
 8011500:	2200      	movs	r2, #0
 8011502:	4641      	mov	r1, r8
 8011504:	4638      	mov	r0, r7
 8011506:	f000 ff23 	bl	8012350 <_strtod_r>
 801150a:	6825      	ldr	r5, [r4, #0]
 801150c:	f8da 3000 	ldr.w	r3, [sl]
 8011510:	f015 0f02 	tst.w	r5, #2
 8011514:	f103 0204 	add.w	r2, r3, #4
 8011518:	ec59 8b10 	vmov	r8, r9, d0
 801151c:	f8ca 2000 	str.w	r2, [sl]
 8011520:	d043      	beq.n	80115aa <_scanf_float+0x38a>
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	e9c3 8900 	strd	r8, r9, [r3]
 8011528:	68e3      	ldr	r3, [r4, #12]
 801152a:	3301      	adds	r3, #1
 801152c:	60e3      	str	r3, [r4, #12]
 801152e:	e6be      	b.n	80112ae <_scanf_float+0x8e>
 8011530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011534:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011538:	4632      	mov	r2, r6
 801153a:	4638      	mov	r0, r7
 801153c:	4798      	blx	r3
 801153e:	6923      	ldr	r3, [r4, #16]
 8011540:	3b01      	subs	r3, #1
 8011542:	6123      	str	r3, [r4, #16]
 8011544:	e7a6      	b.n	8011494 <_scanf_float+0x274>
 8011546:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801154a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801154e:	4632      	mov	r2, r6
 8011550:	4638      	mov	r0, r7
 8011552:	4798      	blx	r3
 8011554:	6923      	ldr	r3, [r4, #16]
 8011556:	3b01      	subs	r3, #1
 8011558:	6123      	str	r3, [r4, #16]
 801155a:	4545      	cmp	r5, r8
 801155c:	d8f3      	bhi.n	8011546 <_scanf_float+0x326>
 801155e:	e6a5      	b.n	80112ac <_scanf_float+0x8c>
 8011560:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011564:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011568:	4632      	mov	r2, r6
 801156a:	4638      	mov	r0, r7
 801156c:	4798      	blx	r3
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	3b01      	subs	r3, #1
 8011572:	6123      	str	r3, [r4, #16]
 8011574:	4545      	cmp	r5, r8
 8011576:	d8f3      	bhi.n	8011560 <_scanf_float+0x340>
 8011578:	e698      	b.n	80112ac <_scanf_float+0x8c>
 801157a:	9b03      	ldr	r3, [sp, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d0bf      	beq.n	8011500 <_scanf_float+0x2e0>
 8011580:	9904      	ldr	r1, [sp, #16]
 8011582:	230a      	movs	r3, #10
 8011584:	4632      	mov	r2, r6
 8011586:	3101      	adds	r1, #1
 8011588:	4638      	mov	r0, r7
 801158a:	f000 ff6d 	bl	8012468 <_strtol_r>
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	9d04      	ldr	r5, [sp, #16]
 8011592:	1ac2      	subs	r2, r0, r3
 8011594:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011598:	429d      	cmp	r5, r3
 801159a:	bf28      	it	cs
 801159c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80115a0:	490f      	ldr	r1, [pc, #60]	; (80115e0 <_scanf_float+0x3c0>)
 80115a2:	4628      	mov	r0, r5
 80115a4:	f000 f868 	bl	8011678 <siprintf>
 80115a8:	e7aa      	b.n	8011500 <_scanf_float+0x2e0>
 80115aa:	f015 0504 	ands.w	r5, r5, #4
 80115ae:	d1b8      	bne.n	8011522 <_scanf_float+0x302>
 80115b0:	681f      	ldr	r7, [r3, #0]
 80115b2:	ee10 2a10 	vmov	r2, s0
 80115b6:	464b      	mov	r3, r9
 80115b8:	ee10 0a10 	vmov	r0, s0
 80115bc:	4649      	mov	r1, r9
 80115be:	f7ef fac5 	bl	8000b4c <__aeabi_dcmpun>
 80115c2:	b128      	cbz	r0, 80115d0 <_scanf_float+0x3b0>
 80115c4:	4628      	mov	r0, r5
 80115c6:	f000 f81d 	bl	8011604 <nanf>
 80115ca:	ed87 0a00 	vstr	s0, [r7]
 80115ce:	e7ab      	b.n	8011528 <_scanf_float+0x308>
 80115d0:	4640      	mov	r0, r8
 80115d2:	4649      	mov	r1, r9
 80115d4:	f7ef fb18 	bl	8000c08 <__aeabi_d2f>
 80115d8:	6038      	str	r0, [r7, #0]
 80115da:	e7a5      	b.n	8011528 <_scanf_float+0x308>
 80115dc:	2600      	movs	r6, #0
 80115de:	e666      	b.n	80112ae <_scanf_float+0x8e>
 80115e0:	08015fa6 	.word	0x08015fa6

080115e4 <_sbrk_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4c06      	ldr	r4, [pc, #24]	; (8011600 <_sbrk_r+0x1c>)
 80115e8:	2300      	movs	r3, #0
 80115ea:	4605      	mov	r5, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	6023      	str	r3, [r4, #0]
 80115f0:	f7f4 fef0 	bl	80063d4 <_sbrk>
 80115f4:	1c43      	adds	r3, r0, #1
 80115f6:	d102      	bne.n	80115fe <_sbrk_r+0x1a>
 80115f8:	6823      	ldr	r3, [r4, #0]
 80115fa:	b103      	cbz	r3, 80115fe <_sbrk_r+0x1a>
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	bd38      	pop	{r3, r4, r5, pc}
 8011600:	20006580 	.word	0x20006580

08011604 <nanf>:
 8011604:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801160c <nanf+0x8>
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop
 801160c:	7fc00000 	.word	0x7fc00000

08011610 <sniprintf>:
 8011610:	b40c      	push	{r2, r3}
 8011612:	b530      	push	{r4, r5, lr}
 8011614:	4b17      	ldr	r3, [pc, #92]	; (8011674 <sniprintf+0x64>)
 8011616:	1e0c      	subs	r4, r1, #0
 8011618:	b09d      	sub	sp, #116	; 0x74
 801161a:	681d      	ldr	r5, [r3, #0]
 801161c:	da08      	bge.n	8011630 <sniprintf+0x20>
 801161e:	238b      	movs	r3, #139	; 0x8b
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	f04f 30ff 	mov.w	r0, #4294967295
 8011626:	b01d      	add	sp, #116	; 0x74
 8011628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801162c:	b002      	add	sp, #8
 801162e:	4770      	bx	lr
 8011630:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011634:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011638:	bf14      	ite	ne
 801163a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801163e:	4623      	moveq	r3, r4
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	9307      	str	r3, [sp, #28]
 8011644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011648:	9002      	str	r0, [sp, #8]
 801164a:	9006      	str	r0, [sp, #24]
 801164c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011650:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011652:	ab21      	add	r3, sp, #132	; 0x84
 8011654:	a902      	add	r1, sp, #8
 8011656:	4628      	mov	r0, r5
 8011658:	9301      	str	r3, [sp, #4]
 801165a:	f002 fd21 	bl	80140a0 <_svfiprintf_r>
 801165e:	1c43      	adds	r3, r0, #1
 8011660:	bfbc      	itt	lt
 8011662:	238b      	movlt	r3, #139	; 0x8b
 8011664:	602b      	strlt	r3, [r5, #0]
 8011666:	2c00      	cmp	r4, #0
 8011668:	d0dd      	beq.n	8011626 <sniprintf+0x16>
 801166a:	9b02      	ldr	r3, [sp, #8]
 801166c:	2200      	movs	r2, #0
 801166e:	701a      	strb	r2, [r3, #0]
 8011670:	e7d9      	b.n	8011626 <sniprintf+0x16>
 8011672:	bf00      	nop
 8011674:	20000e34 	.word	0x20000e34

08011678 <siprintf>:
 8011678:	b40e      	push	{r1, r2, r3}
 801167a:	b500      	push	{lr}
 801167c:	b09c      	sub	sp, #112	; 0x70
 801167e:	ab1d      	add	r3, sp, #116	; 0x74
 8011680:	9002      	str	r0, [sp, #8]
 8011682:	9006      	str	r0, [sp, #24]
 8011684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011688:	4809      	ldr	r0, [pc, #36]	; (80116b0 <siprintf+0x38>)
 801168a:	9107      	str	r1, [sp, #28]
 801168c:	9104      	str	r1, [sp, #16]
 801168e:	4909      	ldr	r1, [pc, #36]	; (80116b4 <siprintf+0x3c>)
 8011690:	f853 2b04 	ldr.w	r2, [r3], #4
 8011694:	9105      	str	r1, [sp, #20]
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	9301      	str	r3, [sp, #4]
 801169a:	a902      	add	r1, sp, #8
 801169c:	f002 fd00 	bl	80140a0 <_svfiprintf_r>
 80116a0:	9b02      	ldr	r3, [sp, #8]
 80116a2:	2200      	movs	r2, #0
 80116a4:	701a      	strb	r2, [r3, #0]
 80116a6:	b01c      	add	sp, #112	; 0x70
 80116a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116ac:	b003      	add	sp, #12
 80116ae:	4770      	bx	lr
 80116b0:	20000e34 	.word	0x20000e34
 80116b4:	ffff0208 	.word	0xffff0208

080116b8 <siscanf>:
 80116b8:	b40e      	push	{r1, r2, r3}
 80116ba:	b530      	push	{r4, r5, lr}
 80116bc:	b09c      	sub	sp, #112	; 0x70
 80116be:	ac1f      	add	r4, sp, #124	; 0x7c
 80116c0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80116c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80116c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80116cc:	9002      	str	r0, [sp, #8]
 80116ce:	9006      	str	r0, [sp, #24]
 80116d0:	f7ee fd88 	bl	80001e4 <strlen>
 80116d4:	4b0b      	ldr	r3, [pc, #44]	; (8011704 <siscanf+0x4c>)
 80116d6:	9003      	str	r0, [sp, #12]
 80116d8:	9007      	str	r0, [sp, #28]
 80116da:	930b      	str	r3, [sp, #44]	; 0x2c
 80116dc:	480a      	ldr	r0, [pc, #40]	; (8011708 <siscanf+0x50>)
 80116de:	9401      	str	r4, [sp, #4]
 80116e0:	2300      	movs	r3, #0
 80116e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80116e4:	9314      	str	r3, [sp, #80]	; 0x50
 80116e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80116ee:	462a      	mov	r2, r5
 80116f0:	4623      	mov	r3, r4
 80116f2:	a902      	add	r1, sp, #8
 80116f4:	6800      	ldr	r0, [r0, #0]
 80116f6:	f002 fe25 	bl	8014344 <__ssvfiscanf_r>
 80116fa:	b01c      	add	sp, #112	; 0x70
 80116fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011700:	b003      	add	sp, #12
 8011702:	4770      	bx	lr
 8011704:	0801170d 	.word	0x0801170d
 8011708:	20000e34 	.word	0x20000e34

0801170c <__seofread>:
 801170c:	2000      	movs	r0, #0
 801170e:	4770      	bx	lr

08011710 <strcat>:
 8011710:	b510      	push	{r4, lr}
 8011712:	4603      	mov	r3, r0
 8011714:	781a      	ldrb	r2, [r3, #0]
 8011716:	1c5c      	adds	r4, r3, #1
 8011718:	b93a      	cbnz	r2, 801172a <strcat+0x1a>
 801171a:	3b01      	subs	r3, #1
 801171c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011720:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011724:	2a00      	cmp	r2, #0
 8011726:	d1f9      	bne.n	801171c <strcat+0xc>
 8011728:	bd10      	pop	{r4, pc}
 801172a:	4623      	mov	r3, r4
 801172c:	e7f2      	b.n	8011714 <strcat+0x4>

0801172e <sulp>:
 801172e:	b570      	push	{r4, r5, r6, lr}
 8011730:	4604      	mov	r4, r0
 8011732:	460d      	mov	r5, r1
 8011734:	ec45 4b10 	vmov	d0, r4, r5
 8011738:	4616      	mov	r6, r2
 801173a:	f002 fb15 	bl	8013d68 <__ulp>
 801173e:	ec51 0b10 	vmov	r0, r1, d0
 8011742:	b17e      	cbz	r6, 8011764 <sulp+0x36>
 8011744:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011748:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801174c:	2b00      	cmp	r3, #0
 801174e:	dd09      	ble.n	8011764 <sulp+0x36>
 8011750:	051b      	lsls	r3, r3, #20
 8011752:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011756:	2400      	movs	r4, #0
 8011758:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801175c:	4622      	mov	r2, r4
 801175e:	462b      	mov	r3, r5
 8011760:	f7ee ff5a 	bl	8000618 <__aeabi_dmul>
 8011764:	bd70      	pop	{r4, r5, r6, pc}
	...

08011768 <_strtod_l>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	461f      	mov	r7, r3
 801176e:	b0a1      	sub	sp, #132	; 0x84
 8011770:	2300      	movs	r3, #0
 8011772:	4681      	mov	r9, r0
 8011774:	4638      	mov	r0, r7
 8011776:	460e      	mov	r6, r1
 8011778:	9217      	str	r2, [sp, #92]	; 0x5c
 801177a:	931c      	str	r3, [sp, #112]	; 0x70
 801177c:	f002 f804 	bl	8013788 <__localeconv_l>
 8011780:	4680      	mov	r8, r0
 8011782:	6800      	ldr	r0, [r0, #0]
 8011784:	f7ee fd2e 	bl	80001e4 <strlen>
 8011788:	f04f 0a00 	mov.w	sl, #0
 801178c:	4604      	mov	r4, r0
 801178e:	f04f 0b00 	mov.w	fp, #0
 8011792:	961b      	str	r6, [sp, #108]	; 0x6c
 8011794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011796:	781a      	ldrb	r2, [r3, #0]
 8011798:	2a0d      	cmp	r2, #13
 801179a:	d832      	bhi.n	8011802 <_strtod_l+0x9a>
 801179c:	2a09      	cmp	r2, #9
 801179e:	d236      	bcs.n	801180e <_strtod_l+0xa6>
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	d03e      	beq.n	8011822 <_strtod_l+0xba>
 80117a4:	2300      	movs	r3, #0
 80117a6:	930d      	str	r3, [sp, #52]	; 0x34
 80117a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80117aa:	782b      	ldrb	r3, [r5, #0]
 80117ac:	2b30      	cmp	r3, #48	; 0x30
 80117ae:	f040 80ac 	bne.w	801190a <_strtod_l+0x1a2>
 80117b2:	786b      	ldrb	r3, [r5, #1]
 80117b4:	2b58      	cmp	r3, #88	; 0x58
 80117b6:	d001      	beq.n	80117bc <_strtod_l+0x54>
 80117b8:	2b78      	cmp	r3, #120	; 0x78
 80117ba:	d167      	bne.n	801188c <_strtod_l+0x124>
 80117bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117be:	9301      	str	r3, [sp, #4]
 80117c0:	ab1c      	add	r3, sp, #112	; 0x70
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	9702      	str	r7, [sp, #8]
 80117c6:	ab1d      	add	r3, sp, #116	; 0x74
 80117c8:	4a88      	ldr	r2, [pc, #544]	; (80119ec <_strtod_l+0x284>)
 80117ca:	a91b      	add	r1, sp, #108	; 0x6c
 80117cc:	4648      	mov	r0, r9
 80117ce:	f001 fcf2 	bl	80131b6 <__gethex>
 80117d2:	f010 0407 	ands.w	r4, r0, #7
 80117d6:	4606      	mov	r6, r0
 80117d8:	d005      	beq.n	80117e6 <_strtod_l+0x7e>
 80117da:	2c06      	cmp	r4, #6
 80117dc:	d12b      	bne.n	8011836 <_strtod_l+0xce>
 80117de:	3501      	adds	r5, #1
 80117e0:	2300      	movs	r3, #0
 80117e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80117e4:	930d      	str	r3, [sp, #52]	; 0x34
 80117e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f040 859a 	bne.w	8012322 <_strtod_l+0xbba>
 80117ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117f0:	b1e3      	cbz	r3, 801182c <_strtod_l+0xc4>
 80117f2:	4652      	mov	r2, sl
 80117f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80117f8:	ec43 2b10 	vmov	d0, r2, r3
 80117fc:	b021      	add	sp, #132	; 0x84
 80117fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011802:	2a2b      	cmp	r2, #43	; 0x2b
 8011804:	d015      	beq.n	8011832 <_strtod_l+0xca>
 8011806:	2a2d      	cmp	r2, #45	; 0x2d
 8011808:	d004      	beq.n	8011814 <_strtod_l+0xac>
 801180a:	2a20      	cmp	r2, #32
 801180c:	d1ca      	bne.n	80117a4 <_strtod_l+0x3c>
 801180e:	3301      	adds	r3, #1
 8011810:	931b      	str	r3, [sp, #108]	; 0x6c
 8011812:	e7bf      	b.n	8011794 <_strtod_l+0x2c>
 8011814:	2201      	movs	r2, #1
 8011816:	920d      	str	r2, [sp, #52]	; 0x34
 8011818:	1c5a      	adds	r2, r3, #1
 801181a:	921b      	str	r2, [sp, #108]	; 0x6c
 801181c:	785b      	ldrb	r3, [r3, #1]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d1c2      	bne.n	80117a8 <_strtod_l+0x40>
 8011822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011824:	961b      	str	r6, [sp, #108]	; 0x6c
 8011826:	2b00      	cmp	r3, #0
 8011828:	f040 8579 	bne.w	801231e <_strtod_l+0xbb6>
 801182c:	4652      	mov	r2, sl
 801182e:	465b      	mov	r3, fp
 8011830:	e7e2      	b.n	80117f8 <_strtod_l+0x90>
 8011832:	2200      	movs	r2, #0
 8011834:	e7ef      	b.n	8011816 <_strtod_l+0xae>
 8011836:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011838:	b13a      	cbz	r2, 801184a <_strtod_l+0xe2>
 801183a:	2135      	movs	r1, #53	; 0x35
 801183c:	a81e      	add	r0, sp, #120	; 0x78
 801183e:	f002 fb8b 	bl	8013f58 <__copybits>
 8011842:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011844:	4648      	mov	r0, r9
 8011846:	f001 fff7 	bl	8013838 <_Bfree>
 801184a:	3c01      	subs	r4, #1
 801184c:	2c04      	cmp	r4, #4
 801184e:	d806      	bhi.n	801185e <_strtod_l+0xf6>
 8011850:	e8df f004 	tbb	[pc, r4]
 8011854:	1714030a 	.word	0x1714030a
 8011858:	0a          	.byte	0x0a
 8011859:	00          	.byte	0x00
 801185a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801185e:	0730      	lsls	r0, r6, #28
 8011860:	d5c1      	bpl.n	80117e6 <_strtod_l+0x7e>
 8011862:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011866:	e7be      	b.n	80117e6 <_strtod_l+0x7e>
 8011868:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801186c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801186e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011872:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011876:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801187a:	e7f0      	b.n	801185e <_strtod_l+0xf6>
 801187c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80119f0 <_strtod_l+0x288>
 8011880:	e7ed      	b.n	801185e <_strtod_l+0xf6>
 8011882:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011886:	f04f 3aff 	mov.w	sl, #4294967295
 801188a:	e7e8      	b.n	801185e <_strtod_l+0xf6>
 801188c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801188e:	1c5a      	adds	r2, r3, #1
 8011890:	921b      	str	r2, [sp, #108]	; 0x6c
 8011892:	785b      	ldrb	r3, [r3, #1]
 8011894:	2b30      	cmp	r3, #48	; 0x30
 8011896:	d0f9      	beq.n	801188c <_strtod_l+0x124>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d0a4      	beq.n	80117e6 <_strtod_l+0x7e>
 801189c:	2301      	movs	r3, #1
 801189e:	2500      	movs	r5, #0
 80118a0:	9306      	str	r3, [sp, #24]
 80118a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118a4:	9308      	str	r3, [sp, #32]
 80118a6:	9507      	str	r5, [sp, #28]
 80118a8:	9505      	str	r5, [sp, #20]
 80118aa:	220a      	movs	r2, #10
 80118ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80118ae:	7807      	ldrb	r7, [r0, #0]
 80118b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80118b4:	b2d9      	uxtb	r1, r3
 80118b6:	2909      	cmp	r1, #9
 80118b8:	d929      	bls.n	801190e <_strtod_l+0x1a6>
 80118ba:	4622      	mov	r2, r4
 80118bc:	f8d8 1000 	ldr.w	r1, [r8]
 80118c0:	f003 f81a 	bl	80148f8 <strncmp>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d031      	beq.n	801192c <_strtod_l+0x1c4>
 80118c8:	2000      	movs	r0, #0
 80118ca:	9c05      	ldr	r4, [sp, #20]
 80118cc:	9004      	str	r0, [sp, #16]
 80118ce:	463b      	mov	r3, r7
 80118d0:	4602      	mov	r2, r0
 80118d2:	2b65      	cmp	r3, #101	; 0x65
 80118d4:	d001      	beq.n	80118da <_strtod_l+0x172>
 80118d6:	2b45      	cmp	r3, #69	; 0x45
 80118d8:	d114      	bne.n	8011904 <_strtod_l+0x19c>
 80118da:	b924      	cbnz	r4, 80118e6 <_strtod_l+0x17e>
 80118dc:	b910      	cbnz	r0, 80118e4 <_strtod_l+0x17c>
 80118de:	9b06      	ldr	r3, [sp, #24]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d09e      	beq.n	8011822 <_strtod_l+0xba>
 80118e4:	2400      	movs	r4, #0
 80118e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80118e8:	1c73      	adds	r3, r6, #1
 80118ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80118ec:	7873      	ldrb	r3, [r6, #1]
 80118ee:	2b2b      	cmp	r3, #43	; 0x2b
 80118f0:	d078      	beq.n	80119e4 <_strtod_l+0x27c>
 80118f2:	2b2d      	cmp	r3, #45	; 0x2d
 80118f4:	d070      	beq.n	80119d8 <_strtod_l+0x270>
 80118f6:	f04f 0c00 	mov.w	ip, #0
 80118fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80118fe:	2f09      	cmp	r7, #9
 8011900:	d97c      	bls.n	80119fc <_strtod_l+0x294>
 8011902:	961b      	str	r6, [sp, #108]	; 0x6c
 8011904:	f04f 0e00 	mov.w	lr, #0
 8011908:	e09a      	b.n	8011a40 <_strtod_l+0x2d8>
 801190a:	2300      	movs	r3, #0
 801190c:	e7c7      	b.n	801189e <_strtod_l+0x136>
 801190e:	9905      	ldr	r1, [sp, #20]
 8011910:	2908      	cmp	r1, #8
 8011912:	bfdd      	ittte	le
 8011914:	9907      	ldrle	r1, [sp, #28]
 8011916:	fb02 3301 	mlale	r3, r2, r1, r3
 801191a:	9307      	strle	r3, [sp, #28]
 801191c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011920:	9b05      	ldr	r3, [sp, #20]
 8011922:	3001      	adds	r0, #1
 8011924:	3301      	adds	r3, #1
 8011926:	9305      	str	r3, [sp, #20]
 8011928:	901b      	str	r0, [sp, #108]	; 0x6c
 801192a:	e7bf      	b.n	80118ac <_strtod_l+0x144>
 801192c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801192e:	191a      	adds	r2, r3, r4
 8011930:	921b      	str	r2, [sp, #108]	; 0x6c
 8011932:	9a05      	ldr	r2, [sp, #20]
 8011934:	5d1b      	ldrb	r3, [r3, r4]
 8011936:	2a00      	cmp	r2, #0
 8011938:	d037      	beq.n	80119aa <_strtod_l+0x242>
 801193a:	9c05      	ldr	r4, [sp, #20]
 801193c:	4602      	mov	r2, r0
 801193e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011942:	2909      	cmp	r1, #9
 8011944:	d913      	bls.n	801196e <_strtod_l+0x206>
 8011946:	2101      	movs	r1, #1
 8011948:	9104      	str	r1, [sp, #16]
 801194a:	e7c2      	b.n	80118d2 <_strtod_l+0x16a>
 801194c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	921b      	str	r2, [sp, #108]	; 0x6c
 8011952:	785b      	ldrb	r3, [r3, #1]
 8011954:	3001      	adds	r0, #1
 8011956:	2b30      	cmp	r3, #48	; 0x30
 8011958:	d0f8      	beq.n	801194c <_strtod_l+0x1e4>
 801195a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801195e:	2a08      	cmp	r2, #8
 8011960:	f200 84e4 	bhi.w	801232c <_strtod_l+0xbc4>
 8011964:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011966:	9208      	str	r2, [sp, #32]
 8011968:	4602      	mov	r2, r0
 801196a:	2000      	movs	r0, #0
 801196c:	4604      	mov	r4, r0
 801196e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011972:	f100 0101 	add.w	r1, r0, #1
 8011976:	d012      	beq.n	801199e <_strtod_l+0x236>
 8011978:	440a      	add	r2, r1
 801197a:	eb00 0c04 	add.w	ip, r0, r4
 801197e:	4621      	mov	r1, r4
 8011980:	270a      	movs	r7, #10
 8011982:	458c      	cmp	ip, r1
 8011984:	d113      	bne.n	80119ae <_strtod_l+0x246>
 8011986:	1821      	adds	r1, r4, r0
 8011988:	2908      	cmp	r1, #8
 801198a:	f104 0401 	add.w	r4, r4, #1
 801198e:	4404      	add	r4, r0
 8011990:	dc19      	bgt.n	80119c6 <_strtod_l+0x25e>
 8011992:	9b07      	ldr	r3, [sp, #28]
 8011994:	210a      	movs	r1, #10
 8011996:	fb01 e303 	mla	r3, r1, r3, lr
 801199a:	9307      	str	r3, [sp, #28]
 801199c:	2100      	movs	r1, #0
 801199e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119a0:	1c58      	adds	r0, r3, #1
 80119a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80119a4:	785b      	ldrb	r3, [r3, #1]
 80119a6:	4608      	mov	r0, r1
 80119a8:	e7c9      	b.n	801193e <_strtod_l+0x1d6>
 80119aa:	9805      	ldr	r0, [sp, #20]
 80119ac:	e7d3      	b.n	8011956 <_strtod_l+0x1ee>
 80119ae:	2908      	cmp	r1, #8
 80119b0:	f101 0101 	add.w	r1, r1, #1
 80119b4:	dc03      	bgt.n	80119be <_strtod_l+0x256>
 80119b6:	9b07      	ldr	r3, [sp, #28]
 80119b8:	437b      	muls	r3, r7
 80119ba:	9307      	str	r3, [sp, #28]
 80119bc:	e7e1      	b.n	8011982 <_strtod_l+0x21a>
 80119be:	2910      	cmp	r1, #16
 80119c0:	bfd8      	it	le
 80119c2:	437d      	mulle	r5, r7
 80119c4:	e7dd      	b.n	8011982 <_strtod_l+0x21a>
 80119c6:	2c10      	cmp	r4, #16
 80119c8:	bfdc      	itt	le
 80119ca:	210a      	movle	r1, #10
 80119cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80119d0:	e7e4      	b.n	801199c <_strtod_l+0x234>
 80119d2:	2301      	movs	r3, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	e781      	b.n	80118dc <_strtod_l+0x174>
 80119d8:	f04f 0c01 	mov.w	ip, #1
 80119dc:	1cb3      	adds	r3, r6, #2
 80119de:	931b      	str	r3, [sp, #108]	; 0x6c
 80119e0:	78b3      	ldrb	r3, [r6, #2]
 80119e2:	e78a      	b.n	80118fa <_strtod_l+0x192>
 80119e4:	f04f 0c00 	mov.w	ip, #0
 80119e8:	e7f8      	b.n	80119dc <_strtod_l+0x274>
 80119ea:	bf00      	nop
 80119ec:	08015fac 	.word	0x08015fac
 80119f0:	7ff00000 	.word	0x7ff00000
 80119f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119f6:	1c5f      	adds	r7, r3, #1
 80119f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80119fa:	785b      	ldrb	r3, [r3, #1]
 80119fc:	2b30      	cmp	r3, #48	; 0x30
 80119fe:	d0f9      	beq.n	80119f4 <_strtod_l+0x28c>
 8011a00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011a04:	2f08      	cmp	r7, #8
 8011a06:	f63f af7d 	bhi.w	8011904 <_strtod_l+0x19c>
 8011a0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011a0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a10:	930a      	str	r3, [sp, #40]	; 0x28
 8011a12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a14:	1c5f      	adds	r7, r3, #1
 8011a16:	971b      	str	r7, [sp, #108]	; 0x6c
 8011a18:	785b      	ldrb	r3, [r3, #1]
 8011a1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011a1e:	f1b8 0f09 	cmp.w	r8, #9
 8011a22:	d937      	bls.n	8011a94 <_strtod_l+0x32c>
 8011a24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a26:	1a7f      	subs	r7, r7, r1
 8011a28:	2f08      	cmp	r7, #8
 8011a2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011a2e:	dc37      	bgt.n	8011aa0 <_strtod_l+0x338>
 8011a30:	45be      	cmp	lr, r7
 8011a32:	bfa8      	it	ge
 8011a34:	46be      	movge	lr, r7
 8011a36:	f1bc 0f00 	cmp.w	ip, #0
 8011a3a:	d001      	beq.n	8011a40 <_strtod_l+0x2d8>
 8011a3c:	f1ce 0e00 	rsb	lr, lr, #0
 8011a40:	2c00      	cmp	r4, #0
 8011a42:	d151      	bne.n	8011ae8 <_strtod_l+0x380>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	f47f aece 	bne.w	80117e6 <_strtod_l+0x7e>
 8011a4a:	9a06      	ldr	r2, [sp, #24]
 8011a4c:	2a00      	cmp	r2, #0
 8011a4e:	f47f aeca 	bne.w	80117e6 <_strtod_l+0x7e>
 8011a52:	9a04      	ldr	r2, [sp, #16]
 8011a54:	2a00      	cmp	r2, #0
 8011a56:	f47f aee4 	bne.w	8011822 <_strtod_l+0xba>
 8011a5a:	2b4e      	cmp	r3, #78	; 0x4e
 8011a5c:	d027      	beq.n	8011aae <_strtod_l+0x346>
 8011a5e:	dc21      	bgt.n	8011aa4 <_strtod_l+0x33c>
 8011a60:	2b49      	cmp	r3, #73	; 0x49
 8011a62:	f47f aede 	bne.w	8011822 <_strtod_l+0xba>
 8011a66:	49a0      	ldr	r1, [pc, #640]	; (8011ce8 <_strtod_l+0x580>)
 8011a68:	a81b      	add	r0, sp, #108	; 0x6c
 8011a6a:	f001 fdd7 	bl	801361c <__match>
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	f43f aed7 	beq.w	8011822 <_strtod_l+0xba>
 8011a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a76:	499d      	ldr	r1, [pc, #628]	; (8011cec <_strtod_l+0x584>)
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	a81b      	add	r0, sp, #108	; 0x6c
 8011a7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a7e:	f001 fdcd 	bl	801361c <__match>
 8011a82:	b910      	cbnz	r0, 8011a8a <_strtod_l+0x322>
 8011a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a86:	3301      	adds	r3, #1
 8011a88:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011d00 <_strtod_l+0x598>
 8011a8e:	f04f 0a00 	mov.w	sl, #0
 8011a92:	e6a8      	b.n	80117e6 <_strtod_l+0x7e>
 8011a94:	210a      	movs	r1, #10
 8011a96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011a9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011a9e:	e7b8      	b.n	8011a12 <_strtod_l+0x2aa>
 8011aa0:	46be      	mov	lr, r7
 8011aa2:	e7c8      	b.n	8011a36 <_strtod_l+0x2ce>
 8011aa4:	2b69      	cmp	r3, #105	; 0x69
 8011aa6:	d0de      	beq.n	8011a66 <_strtod_l+0x2fe>
 8011aa8:	2b6e      	cmp	r3, #110	; 0x6e
 8011aaa:	f47f aeba 	bne.w	8011822 <_strtod_l+0xba>
 8011aae:	4990      	ldr	r1, [pc, #576]	; (8011cf0 <_strtod_l+0x588>)
 8011ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8011ab2:	f001 fdb3 	bl	801361c <__match>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f43f aeb3 	beq.w	8011822 <_strtod_l+0xba>
 8011abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b28      	cmp	r3, #40	; 0x28
 8011ac2:	d10e      	bne.n	8011ae2 <_strtod_l+0x37a>
 8011ac4:	aa1e      	add	r2, sp, #120	; 0x78
 8011ac6:	498b      	ldr	r1, [pc, #556]	; (8011cf4 <_strtod_l+0x58c>)
 8011ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8011aca:	f001 fdbb 	bl	8013644 <__hexnan>
 8011ace:	2805      	cmp	r0, #5
 8011ad0:	d107      	bne.n	8011ae2 <_strtod_l+0x37a>
 8011ad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ad4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011ad8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011adc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011ae0:	e681      	b.n	80117e6 <_strtod_l+0x7e>
 8011ae2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011d08 <_strtod_l+0x5a0>
 8011ae6:	e7d2      	b.n	8011a8e <_strtod_l+0x326>
 8011ae8:	ebae 0302 	sub.w	r3, lr, r2
 8011aec:	9306      	str	r3, [sp, #24]
 8011aee:	9b05      	ldr	r3, [sp, #20]
 8011af0:	9807      	ldr	r0, [sp, #28]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	bf08      	it	eq
 8011af6:	4623      	moveq	r3, r4
 8011af8:	2c10      	cmp	r4, #16
 8011afa:	9305      	str	r3, [sp, #20]
 8011afc:	46a0      	mov	r8, r4
 8011afe:	bfa8      	it	ge
 8011b00:	f04f 0810 	movge.w	r8, #16
 8011b04:	f7ee fd0e 	bl	8000524 <__aeabi_ui2d>
 8011b08:	2c09      	cmp	r4, #9
 8011b0a:	4682      	mov	sl, r0
 8011b0c:	468b      	mov	fp, r1
 8011b0e:	dc13      	bgt.n	8011b38 <_strtod_l+0x3d0>
 8011b10:	9b06      	ldr	r3, [sp, #24]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f43f ae67 	beq.w	80117e6 <_strtod_l+0x7e>
 8011b18:	9b06      	ldr	r3, [sp, #24]
 8011b1a:	dd7a      	ble.n	8011c12 <_strtod_l+0x4aa>
 8011b1c:	2b16      	cmp	r3, #22
 8011b1e:	dc61      	bgt.n	8011be4 <_strtod_l+0x47c>
 8011b20:	4a75      	ldr	r2, [pc, #468]	; (8011cf8 <_strtod_l+0x590>)
 8011b22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011b26:	e9de 0100 	ldrd	r0, r1, [lr]
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	465b      	mov	r3, fp
 8011b2e:	f7ee fd73 	bl	8000618 <__aeabi_dmul>
 8011b32:	4682      	mov	sl, r0
 8011b34:	468b      	mov	fp, r1
 8011b36:	e656      	b.n	80117e6 <_strtod_l+0x7e>
 8011b38:	4b6f      	ldr	r3, [pc, #444]	; (8011cf8 <_strtod_l+0x590>)
 8011b3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011b42:	f7ee fd69 	bl	8000618 <__aeabi_dmul>
 8011b46:	4606      	mov	r6, r0
 8011b48:	4628      	mov	r0, r5
 8011b4a:	460f      	mov	r7, r1
 8011b4c:	f7ee fcea 	bl	8000524 <__aeabi_ui2d>
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	4630      	mov	r0, r6
 8011b56:	4639      	mov	r1, r7
 8011b58:	f7ee fba8 	bl	80002ac <__adddf3>
 8011b5c:	2c0f      	cmp	r4, #15
 8011b5e:	4682      	mov	sl, r0
 8011b60:	468b      	mov	fp, r1
 8011b62:	ddd5      	ble.n	8011b10 <_strtod_l+0x3a8>
 8011b64:	9b06      	ldr	r3, [sp, #24]
 8011b66:	eba4 0808 	sub.w	r8, r4, r8
 8011b6a:	4498      	add	r8, r3
 8011b6c:	f1b8 0f00 	cmp.w	r8, #0
 8011b70:	f340 8096 	ble.w	8011ca0 <_strtod_l+0x538>
 8011b74:	f018 030f 	ands.w	r3, r8, #15
 8011b78:	d00a      	beq.n	8011b90 <_strtod_l+0x428>
 8011b7a:	495f      	ldr	r1, [pc, #380]	; (8011cf8 <_strtod_l+0x590>)
 8011b7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b80:	4652      	mov	r2, sl
 8011b82:	465b      	mov	r3, fp
 8011b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b88:	f7ee fd46 	bl	8000618 <__aeabi_dmul>
 8011b8c:	4682      	mov	sl, r0
 8011b8e:	468b      	mov	fp, r1
 8011b90:	f038 080f 	bics.w	r8, r8, #15
 8011b94:	d073      	beq.n	8011c7e <_strtod_l+0x516>
 8011b96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b9a:	dd47      	ble.n	8011c2c <_strtod_l+0x4c4>
 8011b9c:	2400      	movs	r4, #0
 8011b9e:	46a0      	mov	r8, r4
 8011ba0:	9407      	str	r4, [sp, #28]
 8011ba2:	9405      	str	r4, [sp, #20]
 8011ba4:	2322      	movs	r3, #34	; 0x22
 8011ba6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011d00 <_strtod_l+0x598>
 8011baa:	f8c9 3000 	str.w	r3, [r9]
 8011bae:	f04f 0a00 	mov.w	sl, #0
 8011bb2:	9b07      	ldr	r3, [sp, #28]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f43f ae16 	beq.w	80117e6 <_strtod_l+0x7e>
 8011bba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011bbc:	4648      	mov	r0, r9
 8011bbe:	f001 fe3b 	bl	8013838 <_Bfree>
 8011bc2:	9905      	ldr	r1, [sp, #20]
 8011bc4:	4648      	mov	r0, r9
 8011bc6:	f001 fe37 	bl	8013838 <_Bfree>
 8011bca:	4641      	mov	r1, r8
 8011bcc:	4648      	mov	r0, r9
 8011bce:	f001 fe33 	bl	8013838 <_Bfree>
 8011bd2:	9907      	ldr	r1, [sp, #28]
 8011bd4:	4648      	mov	r0, r9
 8011bd6:	f001 fe2f 	bl	8013838 <_Bfree>
 8011bda:	4621      	mov	r1, r4
 8011bdc:	4648      	mov	r0, r9
 8011bde:	f001 fe2b 	bl	8013838 <_Bfree>
 8011be2:	e600      	b.n	80117e6 <_strtod_l+0x7e>
 8011be4:	9a06      	ldr	r2, [sp, #24]
 8011be6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011bea:	4293      	cmp	r3, r2
 8011bec:	dbba      	blt.n	8011b64 <_strtod_l+0x3fc>
 8011bee:	4d42      	ldr	r5, [pc, #264]	; (8011cf8 <_strtod_l+0x590>)
 8011bf0:	f1c4 040f 	rsb	r4, r4, #15
 8011bf4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011bf8:	4652      	mov	r2, sl
 8011bfa:	465b      	mov	r3, fp
 8011bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c00:	f7ee fd0a 	bl	8000618 <__aeabi_dmul>
 8011c04:	9b06      	ldr	r3, [sp, #24]
 8011c06:	1b1c      	subs	r4, r3, r4
 8011c08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011c0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c10:	e78d      	b.n	8011b2e <_strtod_l+0x3c6>
 8011c12:	f113 0f16 	cmn.w	r3, #22
 8011c16:	dba5      	blt.n	8011b64 <_strtod_l+0x3fc>
 8011c18:	4a37      	ldr	r2, [pc, #220]	; (8011cf8 <_strtod_l+0x590>)
 8011c1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011c1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011c22:	4650      	mov	r0, sl
 8011c24:	4659      	mov	r1, fp
 8011c26:	f7ee fe21 	bl	800086c <__aeabi_ddiv>
 8011c2a:	e782      	b.n	8011b32 <_strtod_l+0x3ca>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4e33      	ldr	r6, [pc, #204]	; (8011cfc <_strtod_l+0x594>)
 8011c30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011c34:	4650      	mov	r0, sl
 8011c36:	4659      	mov	r1, fp
 8011c38:	461d      	mov	r5, r3
 8011c3a:	f1b8 0f01 	cmp.w	r8, #1
 8011c3e:	dc21      	bgt.n	8011c84 <_strtod_l+0x51c>
 8011c40:	b10b      	cbz	r3, 8011c46 <_strtod_l+0x4de>
 8011c42:	4682      	mov	sl, r0
 8011c44:	468b      	mov	fp, r1
 8011c46:	4b2d      	ldr	r3, [pc, #180]	; (8011cfc <_strtod_l+0x594>)
 8011c48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011c4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011c50:	4652      	mov	r2, sl
 8011c52:	465b      	mov	r3, fp
 8011c54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011c58:	f7ee fcde 	bl	8000618 <__aeabi_dmul>
 8011c5c:	4b28      	ldr	r3, [pc, #160]	; (8011d00 <_strtod_l+0x598>)
 8011c5e:	460a      	mov	r2, r1
 8011c60:	400b      	ands	r3, r1
 8011c62:	4928      	ldr	r1, [pc, #160]	; (8011d04 <_strtod_l+0x59c>)
 8011c64:	428b      	cmp	r3, r1
 8011c66:	4682      	mov	sl, r0
 8011c68:	d898      	bhi.n	8011b9c <_strtod_l+0x434>
 8011c6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011c6e:	428b      	cmp	r3, r1
 8011c70:	bf86      	itte	hi
 8011c72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011d0c <_strtod_l+0x5a4>
 8011c76:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9304      	str	r3, [sp, #16]
 8011c82:	e077      	b.n	8011d74 <_strtod_l+0x60c>
 8011c84:	f018 0f01 	tst.w	r8, #1
 8011c88:	d006      	beq.n	8011c98 <_strtod_l+0x530>
 8011c8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	f7ee fcc1 	bl	8000618 <__aeabi_dmul>
 8011c96:	2301      	movs	r3, #1
 8011c98:	3501      	adds	r5, #1
 8011c9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c9e:	e7cc      	b.n	8011c3a <_strtod_l+0x4d2>
 8011ca0:	d0ed      	beq.n	8011c7e <_strtod_l+0x516>
 8011ca2:	f1c8 0800 	rsb	r8, r8, #0
 8011ca6:	f018 020f 	ands.w	r2, r8, #15
 8011caa:	d00a      	beq.n	8011cc2 <_strtod_l+0x55a>
 8011cac:	4b12      	ldr	r3, [pc, #72]	; (8011cf8 <_strtod_l+0x590>)
 8011cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cb2:	4650      	mov	r0, sl
 8011cb4:	4659      	mov	r1, fp
 8011cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cba:	f7ee fdd7 	bl	800086c <__aeabi_ddiv>
 8011cbe:	4682      	mov	sl, r0
 8011cc0:	468b      	mov	fp, r1
 8011cc2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011cc6:	d0da      	beq.n	8011c7e <_strtod_l+0x516>
 8011cc8:	f1b8 0f1f 	cmp.w	r8, #31
 8011ccc:	dd20      	ble.n	8011d10 <_strtod_l+0x5a8>
 8011cce:	2400      	movs	r4, #0
 8011cd0:	46a0      	mov	r8, r4
 8011cd2:	9407      	str	r4, [sp, #28]
 8011cd4:	9405      	str	r4, [sp, #20]
 8011cd6:	2322      	movs	r3, #34	; 0x22
 8011cd8:	f04f 0a00 	mov.w	sl, #0
 8011cdc:	f04f 0b00 	mov.w	fp, #0
 8011ce0:	f8c9 3000 	str.w	r3, [r9]
 8011ce4:	e765      	b.n	8011bb2 <_strtod_l+0x44a>
 8011ce6:	bf00      	nop
 8011ce8:	08015f79 	.word	0x08015f79
 8011cec:	08016003 	.word	0x08016003
 8011cf0:	08015f81 	.word	0x08015f81
 8011cf4:	08015fc0 	.word	0x08015fc0
 8011cf8:	08016040 	.word	0x08016040
 8011cfc:	08016018 	.word	0x08016018
 8011d00:	7ff00000 	.word	0x7ff00000
 8011d04:	7ca00000 	.word	0x7ca00000
 8011d08:	fff80000 	.word	0xfff80000
 8011d0c:	7fefffff 	.word	0x7fefffff
 8011d10:	f018 0310 	ands.w	r3, r8, #16
 8011d14:	bf18      	it	ne
 8011d16:	236a      	movne	r3, #106	; 0x6a
 8011d18:	4da0      	ldr	r5, [pc, #640]	; (8011f9c <_strtod_l+0x834>)
 8011d1a:	9304      	str	r3, [sp, #16]
 8011d1c:	4650      	mov	r0, sl
 8011d1e:	4659      	mov	r1, fp
 8011d20:	2300      	movs	r3, #0
 8011d22:	f1b8 0f00 	cmp.w	r8, #0
 8011d26:	f300 810a 	bgt.w	8011f3e <_strtod_l+0x7d6>
 8011d2a:	b10b      	cbz	r3, 8011d30 <_strtod_l+0x5c8>
 8011d2c:	4682      	mov	sl, r0
 8011d2e:	468b      	mov	fp, r1
 8011d30:	9b04      	ldr	r3, [sp, #16]
 8011d32:	b1bb      	cbz	r3, 8011d64 <_strtod_l+0x5fc>
 8011d34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011d38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	4659      	mov	r1, fp
 8011d40:	dd10      	ble.n	8011d64 <_strtod_l+0x5fc>
 8011d42:	2b1f      	cmp	r3, #31
 8011d44:	f340 8107 	ble.w	8011f56 <_strtod_l+0x7ee>
 8011d48:	2b34      	cmp	r3, #52	; 0x34
 8011d4a:	bfde      	ittt	le
 8011d4c:	3b20      	suble	r3, #32
 8011d4e:	f04f 32ff 	movle.w	r2, #4294967295
 8011d52:	fa02 f303 	lslle.w	r3, r2, r3
 8011d56:	f04f 0a00 	mov.w	sl, #0
 8011d5a:	bfcc      	ite	gt
 8011d5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011d60:	ea03 0b01 	andle.w	fp, r3, r1
 8011d64:	2200      	movs	r2, #0
 8011d66:	2300      	movs	r3, #0
 8011d68:	4650      	mov	r0, sl
 8011d6a:	4659      	mov	r1, fp
 8011d6c:	f7ee febc 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d1ac      	bne.n	8011cce <_strtod_l+0x566>
 8011d74:	9b07      	ldr	r3, [sp, #28]
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	9a05      	ldr	r2, [sp, #20]
 8011d7a:	9908      	ldr	r1, [sp, #32]
 8011d7c:	4623      	mov	r3, r4
 8011d7e:	4648      	mov	r0, r9
 8011d80:	f001 fdac 	bl	80138dc <__s2b>
 8011d84:	9007      	str	r0, [sp, #28]
 8011d86:	2800      	cmp	r0, #0
 8011d88:	f43f af08 	beq.w	8011b9c <_strtod_l+0x434>
 8011d8c:	9a06      	ldr	r2, [sp, #24]
 8011d8e:	9b06      	ldr	r3, [sp, #24]
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	f1c3 0300 	rsb	r3, r3, #0
 8011d96:	bfa8      	it	ge
 8011d98:	2300      	movge	r3, #0
 8011d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8011d9c:	2400      	movs	r4, #0
 8011d9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011da2:	9316      	str	r3, [sp, #88]	; 0x58
 8011da4:	46a0      	mov	r8, r4
 8011da6:	9b07      	ldr	r3, [sp, #28]
 8011da8:	4648      	mov	r0, r9
 8011daa:	6859      	ldr	r1, [r3, #4]
 8011dac:	f001 fd10 	bl	80137d0 <_Balloc>
 8011db0:	9005      	str	r0, [sp, #20]
 8011db2:	2800      	cmp	r0, #0
 8011db4:	f43f aef6 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011db8:	9b07      	ldr	r3, [sp, #28]
 8011dba:	691a      	ldr	r2, [r3, #16]
 8011dbc:	3202      	adds	r2, #2
 8011dbe:	f103 010c 	add.w	r1, r3, #12
 8011dc2:	0092      	lsls	r2, r2, #2
 8011dc4:	300c      	adds	r0, #12
 8011dc6:	f7fe fcfb 	bl	80107c0 <memcpy>
 8011dca:	aa1e      	add	r2, sp, #120	; 0x78
 8011dcc:	a91d      	add	r1, sp, #116	; 0x74
 8011dce:	ec4b ab10 	vmov	d0, sl, fp
 8011dd2:	4648      	mov	r0, r9
 8011dd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011dd8:	f002 f83c 	bl	8013e54 <__d2b>
 8011ddc:	901c      	str	r0, [sp, #112]	; 0x70
 8011dde:	2800      	cmp	r0, #0
 8011de0:	f43f aee0 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011de4:	2101      	movs	r1, #1
 8011de6:	4648      	mov	r0, r9
 8011de8:	f001 fe04 	bl	80139f4 <__i2b>
 8011dec:	4680      	mov	r8, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f43f aed8 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011df4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011df6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011df8:	2e00      	cmp	r6, #0
 8011dfa:	bfab      	itete	ge
 8011dfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011dfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011e00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011e02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011e04:	bfac      	ite	ge
 8011e06:	18f7      	addge	r7, r6, r3
 8011e08:	1b9d      	sublt	r5, r3, r6
 8011e0a:	9b04      	ldr	r3, [sp, #16]
 8011e0c:	1af6      	subs	r6, r6, r3
 8011e0e:	4416      	add	r6, r2
 8011e10:	4b63      	ldr	r3, [pc, #396]	; (8011fa0 <_strtod_l+0x838>)
 8011e12:	3e01      	subs	r6, #1
 8011e14:	429e      	cmp	r6, r3
 8011e16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e1a:	f280 80af 	bge.w	8011f7c <_strtod_l+0x814>
 8011e1e:	1b9b      	subs	r3, r3, r6
 8011e20:	2b1f      	cmp	r3, #31
 8011e22:	eba2 0203 	sub.w	r2, r2, r3
 8011e26:	f04f 0101 	mov.w	r1, #1
 8011e2a:	f300 809b 	bgt.w	8011f64 <_strtod_l+0x7fc>
 8011e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e32:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e34:	2300      	movs	r3, #0
 8011e36:	930a      	str	r3, [sp, #40]	; 0x28
 8011e38:	18be      	adds	r6, r7, r2
 8011e3a:	9b04      	ldr	r3, [sp, #16]
 8011e3c:	42b7      	cmp	r7, r6
 8011e3e:	4415      	add	r5, r2
 8011e40:	441d      	add	r5, r3
 8011e42:	463b      	mov	r3, r7
 8011e44:	bfa8      	it	ge
 8011e46:	4633      	movge	r3, r6
 8011e48:	42ab      	cmp	r3, r5
 8011e4a:	bfa8      	it	ge
 8011e4c:	462b      	movge	r3, r5
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	bfc2      	ittt	gt
 8011e52:	1af6      	subgt	r6, r6, r3
 8011e54:	1aed      	subgt	r5, r5, r3
 8011e56:	1aff      	subgt	r7, r7, r3
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	b1bb      	cbz	r3, 8011e8c <_strtod_l+0x724>
 8011e5c:	4641      	mov	r1, r8
 8011e5e:	461a      	mov	r2, r3
 8011e60:	4648      	mov	r0, r9
 8011e62:	f001 fe67 	bl	8013b34 <__pow5mult>
 8011e66:	4680      	mov	r8, r0
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	f43f ae9b 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011e6e:	4601      	mov	r1, r0
 8011e70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011e72:	4648      	mov	r0, r9
 8011e74:	f001 fdc7 	bl	8013a06 <__multiply>
 8011e78:	900c      	str	r0, [sp, #48]	; 0x30
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	f43f ae92 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011e80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e82:	4648      	mov	r0, r9
 8011e84:	f001 fcd8 	bl	8013838 <_Bfree>
 8011e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8011e8c:	2e00      	cmp	r6, #0
 8011e8e:	dc7a      	bgt.n	8011f86 <_strtod_l+0x81e>
 8011e90:	9b06      	ldr	r3, [sp, #24]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dd08      	ble.n	8011ea8 <_strtod_l+0x740>
 8011e96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011e98:	9905      	ldr	r1, [sp, #20]
 8011e9a:	4648      	mov	r0, r9
 8011e9c:	f001 fe4a 	bl	8013b34 <__pow5mult>
 8011ea0:	9005      	str	r0, [sp, #20]
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	f43f ae7e 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011ea8:	2d00      	cmp	r5, #0
 8011eaa:	dd08      	ble.n	8011ebe <_strtod_l+0x756>
 8011eac:	462a      	mov	r2, r5
 8011eae:	9905      	ldr	r1, [sp, #20]
 8011eb0:	4648      	mov	r0, r9
 8011eb2:	f001 fe8d 	bl	8013bd0 <__lshift>
 8011eb6:	9005      	str	r0, [sp, #20]
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	f43f ae73 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011ebe:	2f00      	cmp	r7, #0
 8011ec0:	dd08      	ble.n	8011ed4 <_strtod_l+0x76c>
 8011ec2:	4641      	mov	r1, r8
 8011ec4:	463a      	mov	r2, r7
 8011ec6:	4648      	mov	r0, r9
 8011ec8:	f001 fe82 	bl	8013bd0 <__lshift>
 8011ecc:	4680      	mov	r8, r0
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	f43f ae68 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011ed4:	9a05      	ldr	r2, [sp, #20]
 8011ed6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011ed8:	4648      	mov	r0, r9
 8011eda:	f001 fee7 	bl	8013cac <__mdiff>
 8011ede:	4604      	mov	r4, r0
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	f43f ae5f 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011ee6:	68c3      	ldr	r3, [r0, #12]
 8011ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8011eea:	2300      	movs	r3, #0
 8011eec:	60c3      	str	r3, [r0, #12]
 8011eee:	4641      	mov	r1, r8
 8011ef0:	f001 fec2 	bl	8013c78 <__mcmp>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	da55      	bge.n	8011fa4 <_strtod_l+0x83c>
 8011ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011efa:	b9e3      	cbnz	r3, 8011f36 <_strtod_l+0x7ce>
 8011efc:	f1ba 0f00 	cmp.w	sl, #0
 8011f00:	d119      	bne.n	8011f36 <_strtod_l+0x7ce>
 8011f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f06:	b9b3      	cbnz	r3, 8011f36 <_strtod_l+0x7ce>
 8011f08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f0c:	0d1b      	lsrs	r3, r3, #20
 8011f0e:	051b      	lsls	r3, r3, #20
 8011f10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011f14:	d90f      	bls.n	8011f36 <_strtod_l+0x7ce>
 8011f16:	6963      	ldr	r3, [r4, #20]
 8011f18:	b913      	cbnz	r3, 8011f20 <_strtod_l+0x7b8>
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	dd0a      	ble.n	8011f36 <_strtod_l+0x7ce>
 8011f20:	4621      	mov	r1, r4
 8011f22:	2201      	movs	r2, #1
 8011f24:	4648      	mov	r0, r9
 8011f26:	f001 fe53 	bl	8013bd0 <__lshift>
 8011f2a:	4641      	mov	r1, r8
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	f001 fea3 	bl	8013c78 <__mcmp>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	dc67      	bgt.n	8012006 <_strtod_l+0x89e>
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d171      	bne.n	8012020 <_strtod_l+0x8b8>
 8011f3c:	e63d      	b.n	8011bba <_strtod_l+0x452>
 8011f3e:	f018 0f01 	tst.w	r8, #1
 8011f42:	d004      	beq.n	8011f4e <_strtod_l+0x7e6>
 8011f44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f48:	f7ee fb66 	bl	8000618 <__aeabi_dmul>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f52:	3508      	adds	r5, #8
 8011f54:	e6e5      	b.n	8011d22 <_strtod_l+0x5ba>
 8011f56:	f04f 32ff 	mov.w	r2, #4294967295
 8011f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5e:	ea03 0a0a 	and.w	sl, r3, sl
 8011f62:	e6ff      	b.n	8011d64 <_strtod_l+0x5fc>
 8011f64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011f68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011f6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011f70:	36e2      	adds	r6, #226	; 0xe2
 8011f72:	fa01 f306 	lsl.w	r3, r1, r6
 8011f76:	930a      	str	r3, [sp, #40]	; 0x28
 8011f78:	910f      	str	r1, [sp, #60]	; 0x3c
 8011f7a:	e75d      	b.n	8011e38 <_strtod_l+0x6d0>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011f80:	2301      	movs	r3, #1
 8011f82:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f84:	e758      	b.n	8011e38 <_strtod_l+0x6d0>
 8011f86:	4632      	mov	r2, r6
 8011f88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f8a:	4648      	mov	r0, r9
 8011f8c:	f001 fe20 	bl	8013bd0 <__lshift>
 8011f90:	901c      	str	r0, [sp, #112]	; 0x70
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f47f af7c 	bne.w	8011e90 <_strtod_l+0x728>
 8011f98:	e604      	b.n	8011ba4 <_strtod_l+0x43c>
 8011f9a:	bf00      	nop
 8011f9c:	08015fd8 	.word	0x08015fd8
 8011fa0:	fffffc02 	.word	0xfffffc02
 8011fa4:	465d      	mov	r5, fp
 8011fa6:	f040 8086 	bne.w	80120b6 <_strtod_l+0x94e>
 8011faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fb0:	b32a      	cbz	r2, 8011ffe <_strtod_l+0x896>
 8011fb2:	4aaf      	ldr	r2, [pc, #700]	; (8012270 <_strtod_l+0xb08>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d153      	bne.n	8012060 <_strtod_l+0x8f8>
 8011fb8:	9b04      	ldr	r3, [sp, #16]
 8011fba:	4650      	mov	r0, sl
 8011fbc:	b1d3      	cbz	r3, 8011ff4 <_strtod_l+0x88c>
 8011fbe:	4aad      	ldr	r2, [pc, #692]	; (8012274 <_strtod_l+0xb0c>)
 8011fc0:	402a      	ands	r2, r5
 8011fc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8011fca:	d816      	bhi.n	8011ffa <_strtod_l+0x892>
 8011fcc:	0d12      	lsrs	r2, r2, #20
 8011fce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8011fd6:	4298      	cmp	r0, r3
 8011fd8:	d142      	bne.n	8012060 <_strtod_l+0x8f8>
 8011fda:	4ba7      	ldr	r3, [pc, #668]	; (8012278 <_strtod_l+0xb10>)
 8011fdc:	429d      	cmp	r5, r3
 8011fde:	d102      	bne.n	8011fe6 <_strtod_l+0x87e>
 8011fe0:	3001      	adds	r0, #1
 8011fe2:	f43f addf 	beq.w	8011ba4 <_strtod_l+0x43c>
 8011fe6:	4ba3      	ldr	r3, [pc, #652]	; (8012274 <_strtod_l+0xb0c>)
 8011fe8:	402b      	ands	r3, r5
 8011fea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011fee:	f04f 0a00 	mov.w	sl, #0
 8011ff2:	e7a0      	b.n	8011f36 <_strtod_l+0x7ce>
 8011ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff8:	e7ed      	b.n	8011fd6 <_strtod_l+0x86e>
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	e7eb      	b.n	8011fd6 <_strtod_l+0x86e>
 8011ffe:	bb7b      	cbnz	r3, 8012060 <_strtod_l+0x8f8>
 8012000:	f1ba 0f00 	cmp.w	sl, #0
 8012004:	d12c      	bne.n	8012060 <_strtod_l+0x8f8>
 8012006:	9904      	ldr	r1, [sp, #16]
 8012008:	4a9a      	ldr	r2, [pc, #616]	; (8012274 <_strtod_l+0xb0c>)
 801200a:	465b      	mov	r3, fp
 801200c:	b1f1      	cbz	r1, 801204c <_strtod_l+0x8e4>
 801200e:	ea02 010b 	and.w	r1, r2, fp
 8012012:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012016:	dc19      	bgt.n	801204c <_strtod_l+0x8e4>
 8012018:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801201c:	f77f ae5b 	ble.w	8011cd6 <_strtod_l+0x56e>
 8012020:	4a96      	ldr	r2, [pc, #600]	; (801227c <_strtod_l+0xb14>)
 8012022:	2300      	movs	r3, #0
 8012024:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012028:	4650      	mov	r0, sl
 801202a:	4659      	mov	r1, fp
 801202c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012030:	f7ee faf2 	bl	8000618 <__aeabi_dmul>
 8012034:	4682      	mov	sl, r0
 8012036:	468b      	mov	fp, r1
 8012038:	2900      	cmp	r1, #0
 801203a:	f47f adbe 	bne.w	8011bba <_strtod_l+0x452>
 801203e:	2800      	cmp	r0, #0
 8012040:	f47f adbb 	bne.w	8011bba <_strtod_l+0x452>
 8012044:	2322      	movs	r3, #34	; 0x22
 8012046:	f8c9 3000 	str.w	r3, [r9]
 801204a:	e5b6      	b.n	8011bba <_strtod_l+0x452>
 801204c:	4013      	ands	r3, r2
 801204e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012052:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012056:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801205a:	f04f 3aff 	mov.w	sl, #4294967295
 801205e:	e76a      	b.n	8011f36 <_strtod_l+0x7ce>
 8012060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012062:	b193      	cbz	r3, 801208a <_strtod_l+0x922>
 8012064:	422b      	tst	r3, r5
 8012066:	f43f af66 	beq.w	8011f36 <_strtod_l+0x7ce>
 801206a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801206c:	9a04      	ldr	r2, [sp, #16]
 801206e:	4650      	mov	r0, sl
 8012070:	4659      	mov	r1, fp
 8012072:	b173      	cbz	r3, 8012092 <_strtod_l+0x92a>
 8012074:	f7ff fb5b 	bl	801172e <sulp>
 8012078:	4602      	mov	r2, r0
 801207a:	460b      	mov	r3, r1
 801207c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012080:	f7ee f914 	bl	80002ac <__adddf3>
 8012084:	4682      	mov	sl, r0
 8012086:	468b      	mov	fp, r1
 8012088:	e755      	b.n	8011f36 <_strtod_l+0x7ce>
 801208a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801208c:	ea13 0f0a 	tst.w	r3, sl
 8012090:	e7e9      	b.n	8012066 <_strtod_l+0x8fe>
 8012092:	f7ff fb4c 	bl	801172e <sulp>
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801209e:	f7ee f903 	bl	80002a8 <__aeabi_dsub>
 80120a2:	2200      	movs	r2, #0
 80120a4:	2300      	movs	r3, #0
 80120a6:	4682      	mov	sl, r0
 80120a8:	468b      	mov	fp, r1
 80120aa:	f7ee fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	f47f ae11 	bne.w	8011cd6 <_strtod_l+0x56e>
 80120b4:	e73f      	b.n	8011f36 <_strtod_l+0x7ce>
 80120b6:	4641      	mov	r1, r8
 80120b8:	4620      	mov	r0, r4
 80120ba:	f001 ff1a 	bl	8013ef2 <__ratio>
 80120be:	ec57 6b10 	vmov	r6, r7, d0
 80120c2:	2200      	movs	r2, #0
 80120c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80120c8:	ee10 0a10 	vmov	r0, s0
 80120cc:	4639      	mov	r1, r7
 80120ce:	f7ee fd1f 	bl	8000b10 <__aeabi_dcmple>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d077      	beq.n	80121c6 <_strtod_l+0xa5e>
 80120d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d04a      	beq.n	8012172 <_strtod_l+0xa0a>
 80120dc:	4b68      	ldr	r3, [pc, #416]	; (8012280 <_strtod_l+0xb18>)
 80120de:	2200      	movs	r2, #0
 80120e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80120e4:	4f66      	ldr	r7, [pc, #408]	; (8012280 <_strtod_l+0xb18>)
 80120e6:	2600      	movs	r6, #0
 80120e8:	4b62      	ldr	r3, [pc, #392]	; (8012274 <_strtod_l+0xb0c>)
 80120ea:	402b      	ands	r3, r5
 80120ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80120ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120f0:	4b64      	ldr	r3, [pc, #400]	; (8012284 <_strtod_l+0xb1c>)
 80120f2:	429a      	cmp	r2, r3
 80120f4:	f040 80ce 	bne.w	8012294 <_strtod_l+0xb2c>
 80120f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012100:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8012104:	ec4b ab10 	vmov	d0, sl, fp
 8012108:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801210c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012110:	f001 fe2a 	bl	8013d68 <__ulp>
 8012114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012118:	ec53 2b10 	vmov	r2, r3, d0
 801211c:	f7ee fa7c 	bl	8000618 <__aeabi_dmul>
 8012120:	4652      	mov	r2, sl
 8012122:	465b      	mov	r3, fp
 8012124:	f7ee f8c2 	bl	80002ac <__adddf3>
 8012128:	460b      	mov	r3, r1
 801212a:	4952      	ldr	r1, [pc, #328]	; (8012274 <_strtod_l+0xb0c>)
 801212c:	4a56      	ldr	r2, [pc, #344]	; (8012288 <_strtod_l+0xb20>)
 801212e:	4019      	ands	r1, r3
 8012130:	4291      	cmp	r1, r2
 8012132:	4682      	mov	sl, r0
 8012134:	d95b      	bls.n	80121ee <_strtod_l+0xa86>
 8012136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012138:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801213c:	4293      	cmp	r3, r2
 801213e:	d103      	bne.n	8012148 <_strtod_l+0x9e0>
 8012140:	9b08      	ldr	r3, [sp, #32]
 8012142:	3301      	adds	r3, #1
 8012144:	f43f ad2e 	beq.w	8011ba4 <_strtod_l+0x43c>
 8012148:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012278 <_strtod_l+0xb10>
 801214c:	f04f 3aff 	mov.w	sl, #4294967295
 8012150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012152:	4648      	mov	r0, r9
 8012154:	f001 fb70 	bl	8013838 <_Bfree>
 8012158:	9905      	ldr	r1, [sp, #20]
 801215a:	4648      	mov	r0, r9
 801215c:	f001 fb6c 	bl	8013838 <_Bfree>
 8012160:	4641      	mov	r1, r8
 8012162:	4648      	mov	r0, r9
 8012164:	f001 fb68 	bl	8013838 <_Bfree>
 8012168:	4621      	mov	r1, r4
 801216a:	4648      	mov	r0, r9
 801216c:	f001 fb64 	bl	8013838 <_Bfree>
 8012170:	e619      	b.n	8011da6 <_strtod_l+0x63e>
 8012172:	f1ba 0f00 	cmp.w	sl, #0
 8012176:	d11a      	bne.n	80121ae <_strtod_l+0xa46>
 8012178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801217c:	b9eb      	cbnz	r3, 80121ba <_strtod_l+0xa52>
 801217e:	2200      	movs	r2, #0
 8012180:	4b3f      	ldr	r3, [pc, #252]	; (8012280 <_strtod_l+0xb18>)
 8012182:	4630      	mov	r0, r6
 8012184:	4639      	mov	r1, r7
 8012186:	f7ee fcb9 	bl	8000afc <__aeabi_dcmplt>
 801218a:	b9c8      	cbnz	r0, 80121c0 <_strtod_l+0xa58>
 801218c:	4630      	mov	r0, r6
 801218e:	4639      	mov	r1, r7
 8012190:	2200      	movs	r2, #0
 8012192:	4b3e      	ldr	r3, [pc, #248]	; (801228c <_strtod_l+0xb24>)
 8012194:	f7ee fa40 	bl	8000618 <__aeabi_dmul>
 8012198:	4606      	mov	r6, r0
 801219a:	460f      	mov	r7, r1
 801219c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80121a0:	9618      	str	r6, [sp, #96]	; 0x60
 80121a2:	9319      	str	r3, [sp, #100]	; 0x64
 80121a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80121a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80121ac:	e79c      	b.n	80120e8 <_strtod_l+0x980>
 80121ae:	f1ba 0f01 	cmp.w	sl, #1
 80121b2:	d102      	bne.n	80121ba <_strtod_l+0xa52>
 80121b4:	2d00      	cmp	r5, #0
 80121b6:	f43f ad8e 	beq.w	8011cd6 <_strtod_l+0x56e>
 80121ba:	2200      	movs	r2, #0
 80121bc:	4b34      	ldr	r3, [pc, #208]	; (8012290 <_strtod_l+0xb28>)
 80121be:	e78f      	b.n	80120e0 <_strtod_l+0x978>
 80121c0:	2600      	movs	r6, #0
 80121c2:	4f32      	ldr	r7, [pc, #200]	; (801228c <_strtod_l+0xb24>)
 80121c4:	e7ea      	b.n	801219c <_strtod_l+0xa34>
 80121c6:	4b31      	ldr	r3, [pc, #196]	; (801228c <_strtod_l+0xb24>)
 80121c8:	4630      	mov	r0, r6
 80121ca:	4639      	mov	r1, r7
 80121cc:	2200      	movs	r2, #0
 80121ce:	f7ee fa23 	bl	8000618 <__aeabi_dmul>
 80121d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121d4:	4606      	mov	r6, r0
 80121d6:	460f      	mov	r7, r1
 80121d8:	b933      	cbnz	r3, 80121e8 <_strtod_l+0xa80>
 80121da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121de:	9010      	str	r0, [sp, #64]	; 0x40
 80121e0:	9311      	str	r3, [sp, #68]	; 0x44
 80121e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80121e6:	e7df      	b.n	80121a8 <_strtod_l+0xa40>
 80121e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80121ec:	e7f9      	b.n	80121e2 <_strtod_l+0xa7a>
 80121ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1ab      	bne.n	8012150 <_strtod_l+0x9e8>
 80121f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121fc:	0d1b      	lsrs	r3, r3, #20
 80121fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012200:	051b      	lsls	r3, r3, #20
 8012202:	429a      	cmp	r2, r3
 8012204:	465d      	mov	r5, fp
 8012206:	d1a3      	bne.n	8012150 <_strtod_l+0x9e8>
 8012208:	4639      	mov	r1, r7
 801220a:	4630      	mov	r0, r6
 801220c:	f7ee fcb4 	bl	8000b78 <__aeabi_d2iz>
 8012210:	f7ee f998 	bl	8000544 <__aeabi_i2d>
 8012214:	460b      	mov	r3, r1
 8012216:	4602      	mov	r2, r0
 8012218:	4639      	mov	r1, r7
 801221a:	4630      	mov	r0, r6
 801221c:	f7ee f844 	bl	80002a8 <__aeabi_dsub>
 8012220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012222:	4606      	mov	r6, r0
 8012224:	460f      	mov	r7, r1
 8012226:	b933      	cbnz	r3, 8012236 <_strtod_l+0xace>
 8012228:	f1ba 0f00 	cmp.w	sl, #0
 801222c:	d103      	bne.n	8012236 <_strtod_l+0xace>
 801222e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8012232:	2d00      	cmp	r5, #0
 8012234:	d06d      	beq.n	8012312 <_strtod_l+0xbaa>
 8012236:	a30a      	add	r3, pc, #40	; (adr r3, 8012260 <_strtod_l+0xaf8>)
 8012238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223c:	4630      	mov	r0, r6
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee fc5c 	bl	8000afc <__aeabi_dcmplt>
 8012244:	2800      	cmp	r0, #0
 8012246:	f47f acb8 	bne.w	8011bba <_strtod_l+0x452>
 801224a:	a307      	add	r3, pc, #28	; (adr r3, 8012268 <_strtod_l+0xb00>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	4630      	mov	r0, r6
 8012252:	4639      	mov	r1, r7
 8012254:	f7ee fc70 	bl	8000b38 <__aeabi_dcmpgt>
 8012258:	2800      	cmp	r0, #0
 801225a:	f43f af79 	beq.w	8012150 <_strtod_l+0x9e8>
 801225e:	e4ac      	b.n	8011bba <_strtod_l+0x452>
 8012260:	94a03595 	.word	0x94a03595
 8012264:	3fdfffff 	.word	0x3fdfffff
 8012268:	35afe535 	.word	0x35afe535
 801226c:	3fe00000 	.word	0x3fe00000
 8012270:	000fffff 	.word	0x000fffff
 8012274:	7ff00000 	.word	0x7ff00000
 8012278:	7fefffff 	.word	0x7fefffff
 801227c:	39500000 	.word	0x39500000
 8012280:	3ff00000 	.word	0x3ff00000
 8012284:	7fe00000 	.word	0x7fe00000
 8012288:	7c9fffff 	.word	0x7c9fffff
 801228c:	3fe00000 	.word	0x3fe00000
 8012290:	bff00000 	.word	0xbff00000
 8012294:	9b04      	ldr	r3, [sp, #16]
 8012296:	b333      	cbz	r3, 80122e6 <_strtod_l+0xb7e>
 8012298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801229a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801229e:	d822      	bhi.n	80122e6 <_strtod_l+0xb7e>
 80122a0:	a327      	add	r3, pc, #156	; (adr r3, 8012340 <_strtod_l+0xbd8>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	4630      	mov	r0, r6
 80122a8:	4639      	mov	r1, r7
 80122aa:	f7ee fc31 	bl	8000b10 <__aeabi_dcmple>
 80122ae:	b1a0      	cbz	r0, 80122da <_strtod_l+0xb72>
 80122b0:	4639      	mov	r1, r7
 80122b2:	4630      	mov	r0, r6
 80122b4:	f7ee fc88 	bl	8000bc8 <__aeabi_d2uiz>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	bf08      	it	eq
 80122bc:	2001      	moveq	r0, #1
 80122be:	f7ee f931 	bl	8000524 <__aeabi_ui2d>
 80122c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122c4:	4606      	mov	r6, r0
 80122c6:	460f      	mov	r7, r1
 80122c8:	bb03      	cbnz	r3, 801230c <_strtod_l+0xba4>
 80122ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122ce:	9012      	str	r0, [sp, #72]	; 0x48
 80122d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80122d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80122d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80122da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80122e2:	1a9b      	subs	r3, r3, r2
 80122e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80122e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80122ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80122ee:	f001 fd3b 	bl	8013d68 <__ulp>
 80122f2:	4650      	mov	r0, sl
 80122f4:	ec53 2b10 	vmov	r2, r3, d0
 80122f8:	4659      	mov	r1, fp
 80122fa:	f7ee f98d 	bl	8000618 <__aeabi_dmul>
 80122fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012302:	f7ed ffd3 	bl	80002ac <__adddf3>
 8012306:	4682      	mov	sl, r0
 8012308:	468b      	mov	fp, r1
 801230a:	e772      	b.n	80121f2 <_strtod_l+0xa8a>
 801230c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012310:	e7df      	b.n	80122d2 <_strtod_l+0xb6a>
 8012312:	a30d      	add	r3, pc, #52	; (adr r3, 8012348 <_strtod_l+0xbe0>)
 8012314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012318:	f7ee fbf0 	bl	8000afc <__aeabi_dcmplt>
 801231c:	e79c      	b.n	8012258 <_strtod_l+0xaf0>
 801231e:	2300      	movs	r3, #0
 8012320:	930d      	str	r3, [sp, #52]	; 0x34
 8012322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012326:	6013      	str	r3, [r2, #0]
 8012328:	f7ff ba61 	b.w	80117ee <_strtod_l+0x86>
 801232c:	2b65      	cmp	r3, #101	; 0x65
 801232e:	f04f 0200 	mov.w	r2, #0
 8012332:	f43f ab4e 	beq.w	80119d2 <_strtod_l+0x26a>
 8012336:	2101      	movs	r1, #1
 8012338:	4614      	mov	r4, r2
 801233a:	9104      	str	r1, [sp, #16]
 801233c:	f7ff bacb 	b.w	80118d6 <_strtod_l+0x16e>
 8012340:	ffc00000 	.word	0xffc00000
 8012344:	41dfffff 	.word	0x41dfffff
 8012348:	94a03595 	.word	0x94a03595
 801234c:	3fcfffff 	.word	0x3fcfffff

08012350 <_strtod_r>:
 8012350:	4b05      	ldr	r3, [pc, #20]	; (8012368 <_strtod_r+0x18>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	b410      	push	{r4}
 8012356:	6a1b      	ldr	r3, [r3, #32]
 8012358:	4c04      	ldr	r4, [pc, #16]	; (801236c <_strtod_r+0x1c>)
 801235a:	2b00      	cmp	r3, #0
 801235c:	bf08      	it	eq
 801235e:	4623      	moveq	r3, r4
 8012360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012364:	f7ff ba00 	b.w	8011768 <_strtod_l>
 8012368:	20000e34 	.word	0x20000e34
 801236c:	20000e98 	.word	0x20000e98

08012370 <_strtol_l.isra.0>:
 8012370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012374:	4680      	mov	r8, r0
 8012376:	4689      	mov	r9, r1
 8012378:	4692      	mov	sl, r2
 801237a:	461e      	mov	r6, r3
 801237c:	460f      	mov	r7, r1
 801237e:	463d      	mov	r5, r7
 8012380:	9808      	ldr	r0, [sp, #32]
 8012382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012386:	f001 f9ed 	bl	8013764 <__locale_ctype_ptr_l>
 801238a:	4420      	add	r0, r4
 801238c:	7843      	ldrb	r3, [r0, #1]
 801238e:	f013 0308 	ands.w	r3, r3, #8
 8012392:	d132      	bne.n	80123fa <_strtol_l.isra.0+0x8a>
 8012394:	2c2d      	cmp	r4, #45	; 0x2d
 8012396:	d132      	bne.n	80123fe <_strtol_l.isra.0+0x8e>
 8012398:	787c      	ldrb	r4, [r7, #1]
 801239a:	1cbd      	adds	r5, r7, #2
 801239c:	2201      	movs	r2, #1
 801239e:	2e00      	cmp	r6, #0
 80123a0:	d05d      	beq.n	801245e <_strtol_l.isra.0+0xee>
 80123a2:	2e10      	cmp	r6, #16
 80123a4:	d109      	bne.n	80123ba <_strtol_l.isra.0+0x4a>
 80123a6:	2c30      	cmp	r4, #48	; 0x30
 80123a8:	d107      	bne.n	80123ba <_strtol_l.isra.0+0x4a>
 80123aa:	782b      	ldrb	r3, [r5, #0]
 80123ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80123b0:	2b58      	cmp	r3, #88	; 0x58
 80123b2:	d14f      	bne.n	8012454 <_strtol_l.isra.0+0xe4>
 80123b4:	786c      	ldrb	r4, [r5, #1]
 80123b6:	2610      	movs	r6, #16
 80123b8:	3502      	adds	r5, #2
 80123ba:	2a00      	cmp	r2, #0
 80123bc:	bf14      	ite	ne
 80123be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80123c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80123c6:	2700      	movs	r7, #0
 80123c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80123cc:	4638      	mov	r0, r7
 80123ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80123d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80123d6:	2b09      	cmp	r3, #9
 80123d8:	d817      	bhi.n	801240a <_strtol_l.isra.0+0x9a>
 80123da:	461c      	mov	r4, r3
 80123dc:	42a6      	cmp	r6, r4
 80123de:	dd23      	ble.n	8012428 <_strtol_l.isra.0+0xb8>
 80123e0:	1c7b      	adds	r3, r7, #1
 80123e2:	d007      	beq.n	80123f4 <_strtol_l.isra.0+0x84>
 80123e4:	4584      	cmp	ip, r0
 80123e6:	d31c      	bcc.n	8012422 <_strtol_l.isra.0+0xb2>
 80123e8:	d101      	bne.n	80123ee <_strtol_l.isra.0+0x7e>
 80123ea:	45a6      	cmp	lr, r4
 80123ec:	db19      	blt.n	8012422 <_strtol_l.isra.0+0xb2>
 80123ee:	fb00 4006 	mla	r0, r0, r6, r4
 80123f2:	2701      	movs	r7, #1
 80123f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123f8:	e7eb      	b.n	80123d2 <_strtol_l.isra.0+0x62>
 80123fa:	462f      	mov	r7, r5
 80123fc:	e7bf      	b.n	801237e <_strtol_l.isra.0+0xe>
 80123fe:	2c2b      	cmp	r4, #43	; 0x2b
 8012400:	bf04      	itt	eq
 8012402:	1cbd      	addeq	r5, r7, #2
 8012404:	787c      	ldrbeq	r4, [r7, #1]
 8012406:	461a      	mov	r2, r3
 8012408:	e7c9      	b.n	801239e <_strtol_l.isra.0+0x2e>
 801240a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801240e:	2b19      	cmp	r3, #25
 8012410:	d801      	bhi.n	8012416 <_strtol_l.isra.0+0xa6>
 8012412:	3c37      	subs	r4, #55	; 0x37
 8012414:	e7e2      	b.n	80123dc <_strtol_l.isra.0+0x6c>
 8012416:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801241a:	2b19      	cmp	r3, #25
 801241c:	d804      	bhi.n	8012428 <_strtol_l.isra.0+0xb8>
 801241e:	3c57      	subs	r4, #87	; 0x57
 8012420:	e7dc      	b.n	80123dc <_strtol_l.isra.0+0x6c>
 8012422:	f04f 37ff 	mov.w	r7, #4294967295
 8012426:	e7e5      	b.n	80123f4 <_strtol_l.isra.0+0x84>
 8012428:	1c7b      	adds	r3, r7, #1
 801242a:	d108      	bne.n	801243e <_strtol_l.isra.0+0xce>
 801242c:	2322      	movs	r3, #34	; 0x22
 801242e:	f8c8 3000 	str.w	r3, [r8]
 8012432:	4608      	mov	r0, r1
 8012434:	f1ba 0f00 	cmp.w	sl, #0
 8012438:	d107      	bne.n	801244a <_strtol_l.isra.0+0xda>
 801243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801243e:	b102      	cbz	r2, 8012442 <_strtol_l.isra.0+0xd2>
 8012440:	4240      	negs	r0, r0
 8012442:	f1ba 0f00 	cmp.w	sl, #0
 8012446:	d0f8      	beq.n	801243a <_strtol_l.isra.0+0xca>
 8012448:	b10f      	cbz	r7, 801244e <_strtol_l.isra.0+0xde>
 801244a:	f105 39ff 	add.w	r9, r5, #4294967295
 801244e:	f8ca 9000 	str.w	r9, [sl]
 8012452:	e7f2      	b.n	801243a <_strtol_l.isra.0+0xca>
 8012454:	2430      	movs	r4, #48	; 0x30
 8012456:	2e00      	cmp	r6, #0
 8012458:	d1af      	bne.n	80123ba <_strtol_l.isra.0+0x4a>
 801245a:	2608      	movs	r6, #8
 801245c:	e7ad      	b.n	80123ba <_strtol_l.isra.0+0x4a>
 801245e:	2c30      	cmp	r4, #48	; 0x30
 8012460:	d0a3      	beq.n	80123aa <_strtol_l.isra.0+0x3a>
 8012462:	260a      	movs	r6, #10
 8012464:	e7a9      	b.n	80123ba <_strtol_l.isra.0+0x4a>
	...

08012468 <_strtol_r>:
 8012468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801246a:	4c06      	ldr	r4, [pc, #24]	; (8012484 <_strtol_r+0x1c>)
 801246c:	4d06      	ldr	r5, [pc, #24]	; (8012488 <_strtol_r+0x20>)
 801246e:	6824      	ldr	r4, [r4, #0]
 8012470:	6a24      	ldr	r4, [r4, #32]
 8012472:	2c00      	cmp	r4, #0
 8012474:	bf08      	it	eq
 8012476:	462c      	moveq	r4, r5
 8012478:	9400      	str	r4, [sp, #0]
 801247a:	f7ff ff79 	bl	8012370 <_strtol_l.isra.0>
 801247e:	b003      	add	sp, #12
 8012480:	bd30      	pop	{r4, r5, pc}
 8012482:	bf00      	nop
 8012484:	20000e34 	.word	0x20000e34
 8012488:	20000e98 	.word	0x20000e98

0801248c <quorem>:
 801248c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012490:	6903      	ldr	r3, [r0, #16]
 8012492:	690c      	ldr	r4, [r1, #16]
 8012494:	42a3      	cmp	r3, r4
 8012496:	4680      	mov	r8, r0
 8012498:	f2c0 8082 	blt.w	80125a0 <quorem+0x114>
 801249c:	3c01      	subs	r4, #1
 801249e:	f101 0714 	add.w	r7, r1, #20
 80124a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80124a6:	f100 0614 	add.w	r6, r0, #20
 80124aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80124ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80124b2:	eb06 030c 	add.w	r3, r6, ip
 80124b6:	3501      	adds	r5, #1
 80124b8:	eb07 090c 	add.w	r9, r7, ip
 80124bc:	9301      	str	r3, [sp, #4]
 80124be:	fbb0 f5f5 	udiv	r5, r0, r5
 80124c2:	b395      	cbz	r5, 801252a <quorem+0x9e>
 80124c4:	f04f 0a00 	mov.w	sl, #0
 80124c8:	4638      	mov	r0, r7
 80124ca:	46b6      	mov	lr, r6
 80124cc:	46d3      	mov	fp, sl
 80124ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80124d2:	b293      	uxth	r3, r2
 80124d4:	fb05 a303 	mla	r3, r5, r3, sl
 80124d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124dc:	b29b      	uxth	r3, r3
 80124de:	ebab 0303 	sub.w	r3, fp, r3
 80124e2:	0c12      	lsrs	r2, r2, #16
 80124e4:	f8de b000 	ldr.w	fp, [lr]
 80124e8:	fb05 a202 	mla	r2, r5, r2, sl
 80124ec:	fa13 f38b 	uxtah	r3, r3, fp
 80124f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80124f4:	fa1f fb82 	uxth.w	fp, r2
 80124f8:	f8de 2000 	ldr.w	r2, [lr]
 80124fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012504:	b29b      	uxth	r3, r3
 8012506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801250a:	4581      	cmp	r9, r0
 801250c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012510:	f84e 3b04 	str.w	r3, [lr], #4
 8012514:	d2db      	bcs.n	80124ce <quorem+0x42>
 8012516:	f856 300c 	ldr.w	r3, [r6, ip]
 801251a:	b933      	cbnz	r3, 801252a <quorem+0x9e>
 801251c:	9b01      	ldr	r3, [sp, #4]
 801251e:	3b04      	subs	r3, #4
 8012520:	429e      	cmp	r6, r3
 8012522:	461a      	mov	r2, r3
 8012524:	d330      	bcc.n	8012588 <quorem+0xfc>
 8012526:	f8c8 4010 	str.w	r4, [r8, #16]
 801252a:	4640      	mov	r0, r8
 801252c:	f001 fba4 	bl	8013c78 <__mcmp>
 8012530:	2800      	cmp	r0, #0
 8012532:	db25      	blt.n	8012580 <quorem+0xf4>
 8012534:	3501      	adds	r5, #1
 8012536:	4630      	mov	r0, r6
 8012538:	f04f 0c00 	mov.w	ip, #0
 801253c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012540:	f8d0 e000 	ldr.w	lr, [r0]
 8012544:	b293      	uxth	r3, r2
 8012546:	ebac 0303 	sub.w	r3, ip, r3
 801254a:	0c12      	lsrs	r2, r2, #16
 801254c:	fa13 f38e 	uxtah	r3, r3, lr
 8012550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012558:	b29b      	uxth	r3, r3
 801255a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801255e:	45b9      	cmp	r9, r7
 8012560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012564:	f840 3b04 	str.w	r3, [r0], #4
 8012568:	d2e8      	bcs.n	801253c <quorem+0xb0>
 801256a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801256e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012572:	b92a      	cbnz	r2, 8012580 <quorem+0xf4>
 8012574:	3b04      	subs	r3, #4
 8012576:	429e      	cmp	r6, r3
 8012578:	461a      	mov	r2, r3
 801257a:	d30b      	bcc.n	8012594 <quorem+0x108>
 801257c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012580:	4628      	mov	r0, r5
 8012582:	b003      	add	sp, #12
 8012584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012588:	6812      	ldr	r2, [r2, #0]
 801258a:	3b04      	subs	r3, #4
 801258c:	2a00      	cmp	r2, #0
 801258e:	d1ca      	bne.n	8012526 <quorem+0x9a>
 8012590:	3c01      	subs	r4, #1
 8012592:	e7c5      	b.n	8012520 <quorem+0x94>
 8012594:	6812      	ldr	r2, [r2, #0]
 8012596:	3b04      	subs	r3, #4
 8012598:	2a00      	cmp	r2, #0
 801259a:	d1ef      	bne.n	801257c <quorem+0xf0>
 801259c:	3c01      	subs	r4, #1
 801259e:	e7ea      	b.n	8012576 <quorem+0xea>
 80125a0:	2000      	movs	r0, #0
 80125a2:	e7ee      	b.n	8012582 <quorem+0xf6>
 80125a4:	0000      	movs	r0, r0
	...

080125a8 <_dtoa_r>:
 80125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	ec57 6b10 	vmov	r6, r7, d0
 80125b0:	b097      	sub	sp, #92	; 0x5c
 80125b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80125b4:	9106      	str	r1, [sp, #24]
 80125b6:	4604      	mov	r4, r0
 80125b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80125ba:	9312      	str	r3, [sp, #72]	; 0x48
 80125bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80125c0:	e9cd 6700 	strd	r6, r7, [sp]
 80125c4:	b93d      	cbnz	r5, 80125d6 <_dtoa_r+0x2e>
 80125c6:	2010      	movs	r0, #16
 80125c8:	f7fe f8ea 	bl	80107a0 <malloc>
 80125cc:	6260      	str	r0, [r4, #36]	; 0x24
 80125ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80125d2:	6005      	str	r5, [r0, #0]
 80125d4:	60c5      	str	r5, [r0, #12]
 80125d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125d8:	6819      	ldr	r1, [r3, #0]
 80125da:	b151      	cbz	r1, 80125f2 <_dtoa_r+0x4a>
 80125dc:	685a      	ldr	r2, [r3, #4]
 80125de:	604a      	str	r2, [r1, #4]
 80125e0:	2301      	movs	r3, #1
 80125e2:	4093      	lsls	r3, r2
 80125e4:	608b      	str	r3, [r1, #8]
 80125e6:	4620      	mov	r0, r4
 80125e8:	f001 f926 	bl	8013838 <_Bfree>
 80125ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125ee:	2200      	movs	r2, #0
 80125f0:	601a      	str	r2, [r3, #0]
 80125f2:	1e3b      	subs	r3, r7, #0
 80125f4:	bfbb      	ittet	lt
 80125f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80125fa:	9301      	strlt	r3, [sp, #4]
 80125fc:	2300      	movge	r3, #0
 80125fe:	2201      	movlt	r2, #1
 8012600:	bfac      	ite	ge
 8012602:	f8c8 3000 	strge.w	r3, [r8]
 8012606:	f8c8 2000 	strlt.w	r2, [r8]
 801260a:	4baf      	ldr	r3, [pc, #700]	; (80128c8 <_dtoa_r+0x320>)
 801260c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012610:	ea33 0308 	bics.w	r3, r3, r8
 8012614:	d114      	bne.n	8012640 <_dtoa_r+0x98>
 8012616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012618:	f242 730f 	movw	r3, #9999	; 0x270f
 801261c:	6013      	str	r3, [r2, #0]
 801261e:	9b00      	ldr	r3, [sp, #0]
 8012620:	b923      	cbnz	r3, 801262c <_dtoa_r+0x84>
 8012622:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012626:	2800      	cmp	r0, #0
 8012628:	f000 8542 	beq.w	80130b0 <_dtoa_r+0xb08>
 801262c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801262e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80128dc <_dtoa_r+0x334>
 8012632:	2b00      	cmp	r3, #0
 8012634:	f000 8544 	beq.w	80130c0 <_dtoa_r+0xb18>
 8012638:	f10b 0303 	add.w	r3, fp, #3
 801263c:	f000 bd3e 	b.w	80130bc <_dtoa_r+0xb14>
 8012640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012644:	2200      	movs	r2, #0
 8012646:	2300      	movs	r3, #0
 8012648:	4630      	mov	r0, r6
 801264a:	4639      	mov	r1, r7
 801264c:	f7ee fa4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012650:	4681      	mov	r9, r0
 8012652:	b168      	cbz	r0, 8012670 <_dtoa_r+0xc8>
 8012654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012656:	2301      	movs	r3, #1
 8012658:	6013      	str	r3, [r2, #0]
 801265a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801265c:	2b00      	cmp	r3, #0
 801265e:	f000 8524 	beq.w	80130aa <_dtoa_r+0xb02>
 8012662:	4b9a      	ldr	r3, [pc, #616]	; (80128cc <_dtoa_r+0x324>)
 8012664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012666:	f103 3bff 	add.w	fp, r3, #4294967295
 801266a:	6013      	str	r3, [r2, #0]
 801266c:	f000 bd28 	b.w	80130c0 <_dtoa_r+0xb18>
 8012670:	aa14      	add	r2, sp, #80	; 0x50
 8012672:	a915      	add	r1, sp, #84	; 0x54
 8012674:	ec47 6b10 	vmov	d0, r6, r7
 8012678:	4620      	mov	r0, r4
 801267a:	f001 fbeb 	bl	8013e54 <__d2b>
 801267e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012682:	9004      	str	r0, [sp, #16]
 8012684:	2d00      	cmp	r5, #0
 8012686:	d07c      	beq.n	8012782 <_dtoa_r+0x1da>
 8012688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801268c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012690:	46b2      	mov	sl, r6
 8012692:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801269a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801269e:	2200      	movs	r2, #0
 80126a0:	4b8b      	ldr	r3, [pc, #556]	; (80128d0 <_dtoa_r+0x328>)
 80126a2:	4650      	mov	r0, sl
 80126a4:	4659      	mov	r1, fp
 80126a6:	f7ed fdff 	bl	80002a8 <__aeabi_dsub>
 80126aa:	a381      	add	r3, pc, #516	; (adr r3, 80128b0 <_dtoa_r+0x308>)
 80126ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b0:	f7ed ffb2 	bl	8000618 <__aeabi_dmul>
 80126b4:	a380      	add	r3, pc, #512	; (adr r3, 80128b8 <_dtoa_r+0x310>)
 80126b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ba:	f7ed fdf7 	bl	80002ac <__adddf3>
 80126be:	4606      	mov	r6, r0
 80126c0:	4628      	mov	r0, r5
 80126c2:	460f      	mov	r7, r1
 80126c4:	f7ed ff3e 	bl	8000544 <__aeabi_i2d>
 80126c8:	a37d      	add	r3, pc, #500	; (adr r3, 80128c0 <_dtoa_r+0x318>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	f7ed ffa3 	bl	8000618 <__aeabi_dmul>
 80126d2:	4602      	mov	r2, r0
 80126d4:	460b      	mov	r3, r1
 80126d6:	4630      	mov	r0, r6
 80126d8:	4639      	mov	r1, r7
 80126da:	f7ed fde7 	bl	80002ac <__adddf3>
 80126de:	4606      	mov	r6, r0
 80126e0:	460f      	mov	r7, r1
 80126e2:	f7ee fa49 	bl	8000b78 <__aeabi_d2iz>
 80126e6:	2200      	movs	r2, #0
 80126e8:	4682      	mov	sl, r0
 80126ea:	2300      	movs	r3, #0
 80126ec:	4630      	mov	r0, r6
 80126ee:	4639      	mov	r1, r7
 80126f0:	f7ee fa04 	bl	8000afc <__aeabi_dcmplt>
 80126f4:	b148      	cbz	r0, 801270a <_dtoa_r+0x162>
 80126f6:	4650      	mov	r0, sl
 80126f8:	f7ed ff24 	bl	8000544 <__aeabi_i2d>
 80126fc:	4632      	mov	r2, r6
 80126fe:	463b      	mov	r3, r7
 8012700:	f7ee f9f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8012704:	b908      	cbnz	r0, 801270a <_dtoa_r+0x162>
 8012706:	f10a 3aff 	add.w	sl, sl, #4294967295
 801270a:	f1ba 0f16 	cmp.w	sl, #22
 801270e:	d859      	bhi.n	80127c4 <_dtoa_r+0x21c>
 8012710:	4970      	ldr	r1, [pc, #448]	; (80128d4 <_dtoa_r+0x32c>)
 8012712:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801271a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801271e:	f7ee fa0b 	bl	8000b38 <__aeabi_dcmpgt>
 8012722:	2800      	cmp	r0, #0
 8012724:	d050      	beq.n	80127c8 <_dtoa_r+0x220>
 8012726:	f10a 3aff 	add.w	sl, sl, #4294967295
 801272a:	2300      	movs	r3, #0
 801272c:	930f      	str	r3, [sp, #60]	; 0x3c
 801272e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012730:	1b5d      	subs	r5, r3, r5
 8012732:	f1b5 0801 	subs.w	r8, r5, #1
 8012736:	bf49      	itett	mi
 8012738:	f1c5 0301 	rsbmi	r3, r5, #1
 801273c:	2300      	movpl	r3, #0
 801273e:	9305      	strmi	r3, [sp, #20]
 8012740:	f04f 0800 	movmi.w	r8, #0
 8012744:	bf58      	it	pl
 8012746:	9305      	strpl	r3, [sp, #20]
 8012748:	f1ba 0f00 	cmp.w	sl, #0
 801274c:	db3e      	blt.n	80127cc <_dtoa_r+0x224>
 801274e:	2300      	movs	r3, #0
 8012750:	44d0      	add	r8, sl
 8012752:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012756:	9307      	str	r3, [sp, #28]
 8012758:	9b06      	ldr	r3, [sp, #24]
 801275a:	2b09      	cmp	r3, #9
 801275c:	f200 8090 	bhi.w	8012880 <_dtoa_r+0x2d8>
 8012760:	2b05      	cmp	r3, #5
 8012762:	bfc4      	itt	gt
 8012764:	3b04      	subgt	r3, #4
 8012766:	9306      	strgt	r3, [sp, #24]
 8012768:	9b06      	ldr	r3, [sp, #24]
 801276a:	f1a3 0302 	sub.w	r3, r3, #2
 801276e:	bfcc      	ite	gt
 8012770:	2500      	movgt	r5, #0
 8012772:	2501      	movle	r5, #1
 8012774:	2b03      	cmp	r3, #3
 8012776:	f200 808f 	bhi.w	8012898 <_dtoa_r+0x2f0>
 801277a:	e8df f003 	tbb	[pc, r3]
 801277e:	7f7d      	.short	0x7f7d
 8012780:	7131      	.short	0x7131
 8012782:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012786:	441d      	add	r5, r3
 8012788:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801278c:	2820      	cmp	r0, #32
 801278e:	dd13      	ble.n	80127b8 <_dtoa_r+0x210>
 8012790:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012794:	9b00      	ldr	r3, [sp, #0]
 8012796:	fa08 f800 	lsl.w	r8, r8, r0
 801279a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801279e:	fa23 f000 	lsr.w	r0, r3, r0
 80127a2:	ea48 0000 	orr.w	r0, r8, r0
 80127a6:	f7ed febd 	bl	8000524 <__aeabi_ui2d>
 80127aa:	2301      	movs	r3, #1
 80127ac:	4682      	mov	sl, r0
 80127ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80127b2:	3d01      	subs	r5, #1
 80127b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80127b6:	e772      	b.n	801269e <_dtoa_r+0xf6>
 80127b8:	9b00      	ldr	r3, [sp, #0]
 80127ba:	f1c0 0020 	rsb	r0, r0, #32
 80127be:	fa03 f000 	lsl.w	r0, r3, r0
 80127c2:	e7f0      	b.n	80127a6 <_dtoa_r+0x1fe>
 80127c4:	2301      	movs	r3, #1
 80127c6:	e7b1      	b.n	801272c <_dtoa_r+0x184>
 80127c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80127ca:	e7b0      	b.n	801272e <_dtoa_r+0x186>
 80127cc:	9b05      	ldr	r3, [sp, #20]
 80127ce:	eba3 030a 	sub.w	r3, r3, sl
 80127d2:	9305      	str	r3, [sp, #20]
 80127d4:	f1ca 0300 	rsb	r3, sl, #0
 80127d8:	9307      	str	r3, [sp, #28]
 80127da:	2300      	movs	r3, #0
 80127dc:	930e      	str	r3, [sp, #56]	; 0x38
 80127de:	e7bb      	b.n	8012758 <_dtoa_r+0x1b0>
 80127e0:	2301      	movs	r3, #1
 80127e2:	930a      	str	r3, [sp, #40]	; 0x28
 80127e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dd59      	ble.n	801289e <_dtoa_r+0x2f6>
 80127ea:	9302      	str	r3, [sp, #8]
 80127ec:	4699      	mov	r9, r3
 80127ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127f0:	2200      	movs	r2, #0
 80127f2:	6072      	str	r2, [r6, #4]
 80127f4:	2204      	movs	r2, #4
 80127f6:	f102 0014 	add.w	r0, r2, #20
 80127fa:	4298      	cmp	r0, r3
 80127fc:	6871      	ldr	r1, [r6, #4]
 80127fe:	d953      	bls.n	80128a8 <_dtoa_r+0x300>
 8012800:	4620      	mov	r0, r4
 8012802:	f000 ffe5 	bl	80137d0 <_Balloc>
 8012806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012808:	6030      	str	r0, [r6, #0]
 801280a:	f1b9 0f0e 	cmp.w	r9, #14
 801280e:	f8d3 b000 	ldr.w	fp, [r3]
 8012812:	f200 80e6 	bhi.w	80129e2 <_dtoa_r+0x43a>
 8012816:	2d00      	cmp	r5, #0
 8012818:	f000 80e3 	beq.w	80129e2 <_dtoa_r+0x43a>
 801281c:	ed9d 7b00 	vldr	d7, [sp]
 8012820:	f1ba 0f00 	cmp.w	sl, #0
 8012824:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012828:	dd74      	ble.n	8012914 <_dtoa_r+0x36c>
 801282a:	4a2a      	ldr	r2, [pc, #168]	; (80128d4 <_dtoa_r+0x32c>)
 801282c:	f00a 030f 	and.w	r3, sl, #15
 8012830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012834:	ed93 7b00 	vldr	d7, [r3]
 8012838:	ea4f 162a 	mov.w	r6, sl, asr #4
 801283c:	06f0      	lsls	r0, r6, #27
 801283e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012842:	d565      	bpl.n	8012910 <_dtoa_r+0x368>
 8012844:	4b24      	ldr	r3, [pc, #144]	; (80128d8 <_dtoa_r+0x330>)
 8012846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801284a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801284e:	f7ee f80d 	bl	800086c <__aeabi_ddiv>
 8012852:	e9cd 0100 	strd	r0, r1, [sp]
 8012856:	f006 060f 	and.w	r6, r6, #15
 801285a:	2503      	movs	r5, #3
 801285c:	4f1e      	ldr	r7, [pc, #120]	; (80128d8 <_dtoa_r+0x330>)
 801285e:	e04c      	b.n	80128fa <_dtoa_r+0x352>
 8012860:	2301      	movs	r3, #1
 8012862:	930a      	str	r3, [sp, #40]	; 0x28
 8012864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012866:	4453      	add	r3, sl
 8012868:	f103 0901 	add.w	r9, r3, #1
 801286c:	9302      	str	r3, [sp, #8]
 801286e:	464b      	mov	r3, r9
 8012870:	2b01      	cmp	r3, #1
 8012872:	bfb8      	it	lt
 8012874:	2301      	movlt	r3, #1
 8012876:	e7ba      	b.n	80127ee <_dtoa_r+0x246>
 8012878:	2300      	movs	r3, #0
 801287a:	e7b2      	b.n	80127e2 <_dtoa_r+0x23a>
 801287c:	2300      	movs	r3, #0
 801287e:	e7f0      	b.n	8012862 <_dtoa_r+0x2ba>
 8012880:	2501      	movs	r5, #1
 8012882:	2300      	movs	r3, #0
 8012884:	9306      	str	r3, [sp, #24]
 8012886:	950a      	str	r5, [sp, #40]	; 0x28
 8012888:	f04f 33ff 	mov.w	r3, #4294967295
 801288c:	9302      	str	r3, [sp, #8]
 801288e:	4699      	mov	r9, r3
 8012890:	2200      	movs	r2, #0
 8012892:	2312      	movs	r3, #18
 8012894:	920b      	str	r2, [sp, #44]	; 0x2c
 8012896:	e7aa      	b.n	80127ee <_dtoa_r+0x246>
 8012898:	2301      	movs	r3, #1
 801289a:	930a      	str	r3, [sp, #40]	; 0x28
 801289c:	e7f4      	b.n	8012888 <_dtoa_r+0x2e0>
 801289e:	2301      	movs	r3, #1
 80128a0:	9302      	str	r3, [sp, #8]
 80128a2:	4699      	mov	r9, r3
 80128a4:	461a      	mov	r2, r3
 80128a6:	e7f5      	b.n	8012894 <_dtoa_r+0x2ec>
 80128a8:	3101      	adds	r1, #1
 80128aa:	6071      	str	r1, [r6, #4]
 80128ac:	0052      	lsls	r2, r2, #1
 80128ae:	e7a2      	b.n	80127f6 <_dtoa_r+0x24e>
 80128b0:	636f4361 	.word	0x636f4361
 80128b4:	3fd287a7 	.word	0x3fd287a7
 80128b8:	8b60c8b3 	.word	0x8b60c8b3
 80128bc:	3fc68a28 	.word	0x3fc68a28
 80128c0:	509f79fb 	.word	0x509f79fb
 80128c4:	3fd34413 	.word	0x3fd34413
 80128c8:	7ff00000 	.word	0x7ff00000
 80128cc:	0801613c 	.word	0x0801613c
 80128d0:	3ff80000 	.word	0x3ff80000
 80128d4:	08016040 	.word	0x08016040
 80128d8:	08016018 	.word	0x08016018
 80128dc:	08016009 	.word	0x08016009
 80128e0:	07f1      	lsls	r1, r6, #31
 80128e2:	d508      	bpl.n	80128f6 <_dtoa_r+0x34e>
 80128e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80128e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128ec:	f7ed fe94 	bl	8000618 <__aeabi_dmul>
 80128f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128f4:	3501      	adds	r5, #1
 80128f6:	1076      	asrs	r6, r6, #1
 80128f8:	3708      	adds	r7, #8
 80128fa:	2e00      	cmp	r6, #0
 80128fc:	d1f0      	bne.n	80128e0 <_dtoa_r+0x338>
 80128fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012906:	f7ed ffb1 	bl	800086c <__aeabi_ddiv>
 801290a:	e9cd 0100 	strd	r0, r1, [sp]
 801290e:	e01a      	b.n	8012946 <_dtoa_r+0x39e>
 8012910:	2502      	movs	r5, #2
 8012912:	e7a3      	b.n	801285c <_dtoa_r+0x2b4>
 8012914:	f000 80a0 	beq.w	8012a58 <_dtoa_r+0x4b0>
 8012918:	f1ca 0600 	rsb	r6, sl, #0
 801291c:	4b9f      	ldr	r3, [pc, #636]	; (8012b9c <_dtoa_r+0x5f4>)
 801291e:	4fa0      	ldr	r7, [pc, #640]	; (8012ba0 <_dtoa_r+0x5f8>)
 8012920:	f006 020f 	and.w	r2, r6, #15
 8012924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012930:	f7ed fe72 	bl	8000618 <__aeabi_dmul>
 8012934:	e9cd 0100 	strd	r0, r1, [sp]
 8012938:	1136      	asrs	r6, r6, #4
 801293a:	2300      	movs	r3, #0
 801293c:	2502      	movs	r5, #2
 801293e:	2e00      	cmp	r6, #0
 8012940:	d17f      	bne.n	8012a42 <_dtoa_r+0x49a>
 8012942:	2b00      	cmp	r3, #0
 8012944:	d1e1      	bne.n	801290a <_dtoa_r+0x362>
 8012946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 8087 	beq.w	8012a5c <_dtoa_r+0x4b4>
 801294e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012952:	2200      	movs	r2, #0
 8012954:	4b93      	ldr	r3, [pc, #588]	; (8012ba4 <_dtoa_r+0x5fc>)
 8012956:	4630      	mov	r0, r6
 8012958:	4639      	mov	r1, r7
 801295a:	f7ee f8cf 	bl	8000afc <__aeabi_dcmplt>
 801295e:	2800      	cmp	r0, #0
 8012960:	d07c      	beq.n	8012a5c <_dtoa_r+0x4b4>
 8012962:	f1b9 0f00 	cmp.w	r9, #0
 8012966:	d079      	beq.n	8012a5c <_dtoa_r+0x4b4>
 8012968:	9b02      	ldr	r3, [sp, #8]
 801296a:	2b00      	cmp	r3, #0
 801296c:	dd35      	ble.n	80129da <_dtoa_r+0x432>
 801296e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012972:	9308      	str	r3, [sp, #32]
 8012974:	4639      	mov	r1, r7
 8012976:	2200      	movs	r2, #0
 8012978:	4b8b      	ldr	r3, [pc, #556]	; (8012ba8 <_dtoa_r+0x600>)
 801297a:	4630      	mov	r0, r6
 801297c:	f7ed fe4c 	bl	8000618 <__aeabi_dmul>
 8012980:	e9cd 0100 	strd	r0, r1, [sp]
 8012984:	9f02      	ldr	r7, [sp, #8]
 8012986:	3501      	adds	r5, #1
 8012988:	4628      	mov	r0, r5
 801298a:	f7ed fddb 	bl	8000544 <__aeabi_i2d>
 801298e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012992:	f7ed fe41 	bl	8000618 <__aeabi_dmul>
 8012996:	2200      	movs	r2, #0
 8012998:	4b84      	ldr	r3, [pc, #528]	; (8012bac <_dtoa_r+0x604>)
 801299a:	f7ed fc87 	bl	80002ac <__adddf3>
 801299e:	4605      	mov	r5, r0
 80129a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80129a4:	2f00      	cmp	r7, #0
 80129a6:	d15d      	bne.n	8012a64 <_dtoa_r+0x4bc>
 80129a8:	2200      	movs	r2, #0
 80129aa:	4b81      	ldr	r3, [pc, #516]	; (8012bb0 <_dtoa_r+0x608>)
 80129ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129b0:	f7ed fc7a 	bl	80002a8 <__aeabi_dsub>
 80129b4:	462a      	mov	r2, r5
 80129b6:	4633      	mov	r3, r6
 80129b8:	e9cd 0100 	strd	r0, r1, [sp]
 80129bc:	f7ee f8bc 	bl	8000b38 <__aeabi_dcmpgt>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	f040 8288 	bne.w	8012ed6 <_dtoa_r+0x92e>
 80129c6:	462a      	mov	r2, r5
 80129c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80129cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129d0:	f7ee f894 	bl	8000afc <__aeabi_dcmplt>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	f040 827c 	bne.w	8012ed2 <_dtoa_r+0x92a>
 80129da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129de:	e9cd 2300 	strd	r2, r3, [sp]
 80129e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f2c0 8150 	blt.w	8012c8a <_dtoa_r+0x6e2>
 80129ea:	f1ba 0f0e 	cmp.w	sl, #14
 80129ee:	f300 814c 	bgt.w	8012c8a <_dtoa_r+0x6e2>
 80129f2:	4b6a      	ldr	r3, [pc, #424]	; (8012b9c <_dtoa_r+0x5f4>)
 80129f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80129f8:	ed93 7b00 	vldr	d7, [r3]
 80129fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a04:	f280 80d8 	bge.w	8012bb8 <_dtoa_r+0x610>
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	f300 80d4 	bgt.w	8012bb8 <_dtoa_r+0x610>
 8012a10:	f040 825e 	bne.w	8012ed0 <_dtoa_r+0x928>
 8012a14:	2200      	movs	r2, #0
 8012a16:	4b66      	ldr	r3, [pc, #408]	; (8012bb0 <_dtoa_r+0x608>)
 8012a18:	ec51 0b17 	vmov	r0, r1, d7
 8012a1c:	f7ed fdfc 	bl	8000618 <__aeabi_dmul>
 8012a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a24:	f7ee f87e 	bl	8000b24 <__aeabi_dcmpge>
 8012a28:	464f      	mov	r7, r9
 8012a2a:	464e      	mov	r6, r9
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	f040 8234 	bne.w	8012e9a <_dtoa_r+0x8f2>
 8012a32:	2331      	movs	r3, #49	; 0x31
 8012a34:	f10b 0501 	add.w	r5, fp, #1
 8012a38:	f88b 3000 	strb.w	r3, [fp]
 8012a3c:	f10a 0a01 	add.w	sl, sl, #1
 8012a40:	e22f      	b.n	8012ea2 <_dtoa_r+0x8fa>
 8012a42:	07f2      	lsls	r2, r6, #31
 8012a44:	d505      	bpl.n	8012a52 <_dtoa_r+0x4aa>
 8012a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a4a:	f7ed fde5 	bl	8000618 <__aeabi_dmul>
 8012a4e:	3501      	adds	r5, #1
 8012a50:	2301      	movs	r3, #1
 8012a52:	1076      	asrs	r6, r6, #1
 8012a54:	3708      	adds	r7, #8
 8012a56:	e772      	b.n	801293e <_dtoa_r+0x396>
 8012a58:	2502      	movs	r5, #2
 8012a5a:	e774      	b.n	8012946 <_dtoa_r+0x39e>
 8012a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8012a60:	464f      	mov	r7, r9
 8012a62:	e791      	b.n	8012988 <_dtoa_r+0x3e0>
 8012a64:	4b4d      	ldr	r3, [pc, #308]	; (8012b9c <_dtoa_r+0x5f4>)
 8012a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d047      	beq.n	8012b04 <_dtoa_r+0x55c>
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	2000      	movs	r0, #0
 8012a7a:	494e      	ldr	r1, [pc, #312]	; (8012bb4 <_dtoa_r+0x60c>)
 8012a7c:	f7ed fef6 	bl	800086c <__aeabi_ddiv>
 8012a80:	462a      	mov	r2, r5
 8012a82:	4633      	mov	r3, r6
 8012a84:	f7ed fc10 	bl	80002a8 <__aeabi_dsub>
 8012a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a8c:	465d      	mov	r5, fp
 8012a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a92:	f7ee f871 	bl	8000b78 <__aeabi_d2iz>
 8012a96:	4606      	mov	r6, r0
 8012a98:	f7ed fd54 	bl	8000544 <__aeabi_i2d>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aa4:	f7ed fc00 	bl	80002a8 <__aeabi_dsub>
 8012aa8:	3630      	adds	r6, #48	; 0x30
 8012aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8012aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8012ab6:	f7ee f821 	bl	8000afc <__aeabi_dcmplt>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d163      	bne.n	8012b86 <_dtoa_r+0x5de>
 8012abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	4937      	ldr	r1, [pc, #220]	; (8012ba4 <_dtoa_r+0x5fc>)
 8012ac6:	f7ed fbef 	bl	80002a8 <__aeabi_dsub>
 8012aca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ace:	f7ee f815 	bl	8000afc <__aeabi_dcmplt>
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	f040 80b7 	bne.w	8012c46 <_dtoa_r+0x69e>
 8012ad8:	eba5 030b 	sub.w	r3, r5, fp
 8012adc:	429f      	cmp	r7, r3
 8012ade:	f77f af7c 	ble.w	80129da <_dtoa_r+0x432>
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	4b30      	ldr	r3, [pc, #192]	; (8012ba8 <_dtoa_r+0x600>)
 8012ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012aea:	f7ed fd95 	bl	8000618 <__aeabi_dmul>
 8012aee:	2200      	movs	r2, #0
 8012af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012af4:	4b2c      	ldr	r3, [pc, #176]	; (8012ba8 <_dtoa_r+0x600>)
 8012af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012afa:	f7ed fd8d 	bl	8000618 <__aeabi_dmul>
 8012afe:	e9cd 0100 	strd	r0, r1, [sp]
 8012b02:	e7c4      	b.n	8012a8e <_dtoa_r+0x4e6>
 8012b04:	462a      	mov	r2, r5
 8012b06:	4633      	mov	r3, r6
 8012b08:	f7ed fd86 	bl	8000618 <__aeabi_dmul>
 8012b0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012b10:	eb0b 0507 	add.w	r5, fp, r7
 8012b14:	465e      	mov	r6, fp
 8012b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b1a:	f7ee f82d 	bl	8000b78 <__aeabi_d2iz>
 8012b1e:	4607      	mov	r7, r0
 8012b20:	f7ed fd10 	bl	8000544 <__aeabi_i2d>
 8012b24:	3730      	adds	r7, #48	; 0x30
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b2e:	f7ed fbbb 	bl	80002a8 <__aeabi_dsub>
 8012b32:	f806 7b01 	strb.w	r7, [r6], #1
 8012b36:	42ae      	cmp	r6, r5
 8012b38:	e9cd 0100 	strd	r0, r1, [sp]
 8012b3c:	f04f 0200 	mov.w	r2, #0
 8012b40:	d126      	bne.n	8012b90 <_dtoa_r+0x5e8>
 8012b42:	4b1c      	ldr	r3, [pc, #112]	; (8012bb4 <_dtoa_r+0x60c>)
 8012b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b48:	f7ed fbb0 	bl	80002ac <__adddf3>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	460b      	mov	r3, r1
 8012b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b54:	f7ed fff0 	bl	8000b38 <__aeabi_dcmpgt>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d174      	bne.n	8012c46 <_dtoa_r+0x69e>
 8012b5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012b60:	2000      	movs	r0, #0
 8012b62:	4914      	ldr	r1, [pc, #80]	; (8012bb4 <_dtoa_r+0x60c>)
 8012b64:	f7ed fba0 	bl	80002a8 <__aeabi_dsub>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b70:	f7ed ffc4 	bl	8000afc <__aeabi_dcmplt>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	f43f af30 	beq.w	80129da <_dtoa_r+0x432>
 8012b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012b7e:	2b30      	cmp	r3, #48	; 0x30
 8012b80:	f105 32ff 	add.w	r2, r5, #4294967295
 8012b84:	d002      	beq.n	8012b8c <_dtoa_r+0x5e4>
 8012b86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b8a:	e04a      	b.n	8012c22 <_dtoa_r+0x67a>
 8012b8c:	4615      	mov	r5, r2
 8012b8e:	e7f4      	b.n	8012b7a <_dtoa_r+0x5d2>
 8012b90:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <_dtoa_r+0x600>)
 8012b92:	f7ed fd41 	bl	8000618 <__aeabi_dmul>
 8012b96:	e9cd 0100 	strd	r0, r1, [sp]
 8012b9a:	e7bc      	b.n	8012b16 <_dtoa_r+0x56e>
 8012b9c:	08016040 	.word	0x08016040
 8012ba0:	08016018 	.word	0x08016018
 8012ba4:	3ff00000 	.word	0x3ff00000
 8012ba8:	40240000 	.word	0x40240000
 8012bac:	401c0000 	.word	0x401c0000
 8012bb0:	40140000 	.word	0x40140000
 8012bb4:	3fe00000 	.word	0x3fe00000
 8012bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012bbc:	465d      	mov	r5, fp
 8012bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	f7ed fe51 	bl	800086c <__aeabi_ddiv>
 8012bca:	f7ed ffd5 	bl	8000b78 <__aeabi_d2iz>
 8012bce:	4680      	mov	r8, r0
 8012bd0:	f7ed fcb8 	bl	8000544 <__aeabi_i2d>
 8012bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bd8:	f7ed fd1e 	bl	8000618 <__aeabi_dmul>
 8012bdc:	4602      	mov	r2, r0
 8012bde:	460b      	mov	r3, r1
 8012be0:	4630      	mov	r0, r6
 8012be2:	4639      	mov	r1, r7
 8012be4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012be8:	f7ed fb5e 	bl	80002a8 <__aeabi_dsub>
 8012bec:	f805 6b01 	strb.w	r6, [r5], #1
 8012bf0:	eba5 060b 	sub.w	r6, r5, fp
 8012bf4:	45b1      	cmp	r9, r6
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	d139      	bne.n	8012c70 <_dtoa_r+0x6c8>
 8012bfc:	f7ed fb56 	bl	80002ac <__adddf3>
 8012c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	f7ed ff96 	bl	8000b38 <__aeabi_dcmpgt>
 8012c0c:	b9c8      	cbnz	r0, 8012c42 <_dtoa_r+0x69a>
 8012c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c12:	4630      	mov	r0, r6
 8012c14:	4639      	mov	r1, r7
 8012c16:	f7ed ff67 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c1a:	b110      	cbz	r0, 8012c22 <_dtoa_r+0x67a>
 8012c1c:	f018 0f01 	tst.w	r8, #1
 8012c20:	d10f      	bne.n	8012c42 <_dtoa_r+0x69a>
 8012c22:	9904      	ldr	r1, [sp, #16]
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 fe07 	bl	8013838 <_Bfree>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c2e:	702b      	strb	r3, [r5, #0]
 8012c30:	f10a 0301 	add.w	r3, sl, #1
 8012c34:	6013      	str	r3, [r2, #0]
 8012c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 8241 	beq.w	80130c0 <_dtoa_r+0xb18>
 8012c3e:	601d      	str	r5, [r3, #0]
 8012c40:	e23e      	b.n	80130c0 <_dtoa_r+0xb18>
 8012c42:	f8cd a020 	str.w	sl, [sp, #32]
 8012c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012c4a:	2a39      	cmp	r2, #57	; 0x39
 8012c4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012c50:	d108      	bne.n	8012c64 <_dtoa_r+0x6bc>
 8012c52:	459b      	cmp	fp, r3
 8012c54:	d10a      	bne.n	8012c6c <_dtoa_r+0x6c4>
 8012c56:	9b08      	ldr	r3, [sp, #32]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	9308      	str	r3, [sp, #32]
 8012c5c:	2330      	movs	r3, #48	; 0x30
 8012c5e:	f88b 3000 	strb.w	r3, [fp]
 8012c62:	465b      	mov	r3, fp
 8012c64:	781a      	ldrb	r2, [r3, #0]
 8012c66:	3201      	adds	r2, #1
 8012c68:	701a      	strb	r2, [r3, #0]
 8012c6a:	e78c      	b.n	8012b86 <_dtoa_r+0x5de>
 8012c6c:	461d      	mov	r5, r3
 8012c6e:	e7ea      	b.n	8012c46 <_dtoa_r+0x69e>
 8012c70:	2200      	movs	r2, #0
 8012c72:	4b9b      	ldr	r3, [pc, #620]	; (8012ee0 <_dtoa_r+0x938>)
 8012c74:	f7ed fcd0 	bl	8000618 <__aeabi_dmul>
 8012c78:	2200      	movs	r2, #0
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	f7ed ff32 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d09a      	beq.n	8012bbe <_dtoa_r+0x616>
 8012c88:	e7cb      	b.n	8012c22 <_dtoa_r+0x67a>
 8012c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c8c:	2a00      	cmp	r2, #0
 8012c8e:	f000 808b 	beq.w	8012da8 <_dtoa_r+0x800>
 8012c92:	9a06      	ldr	r2, [sp, #24]
 8012c94:	2a01      	cmp	r2, #1
 8012c96:	dc6e      	bgt.n	8012d76 <_dtoa_r+0x7ce>
 8012c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012c9a:	2a00      	cmp	r2, #0
 8012c9c:	d067      	beq.n	8012d6e <_dtoa_r+0x7c6>
 8012c9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ca2:	9f07      	ldr	r7, [sp, #28]
 8012ca4:	9d05      	ldr	r5, [sp, #20]
 8012ca6:	9a05      	ldr	r2, [sp, #20]
 8012ca8:	2101      	movs	r1, #1
 8012caa:	441a      	add	r2, r3
 8012cac:	4620      	mov	r0, r4
 8012cae:	9205      	str	r2, [sp, #20]
 8012cb0:	4498      	add	r8, r3
 8012cb2:	f000 fe9f 	bl	80139f4 <__i2b>
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	2d00      	cmp	r5, #0
 8012cba:	dd0c      	ble.n	8012cd6 <_dtoa_r+0x72e>
 8012cbc:	f1b8 0f00 	cmp.w	r8, #0
 8012cc0:	dd09      	ble.n	8012cd6 <_dtoa_r+0x72e>
 8012cc2:	4545      	cmp	r5, r8
 8012cc4:	9a05      	ldr	r2, [sp, #20]
 8012cc6:	462b      	mov	r3, r5
 8012cc8:	bfa8      	it	ge
 8012cca:	4643      	movge	r3, r8
 8012ccc:	1ad2      	subs	r2, r2, r3
 8012cce:	9205      	str	r2, [sp, #20]
 8012cd0:	1aed      	subs	r5, r5, r3
 8012cd2:	eba8 0803 	sub.w	r8, r8, r3
 8012cd6:	9b07      	ldr	r3, [sp, #28]
 8012cd8:	b1eb      	cbz	r3, 8012d16 <_dtoa_r+0x76e>
 8012cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d067      	beq.n	8012db0 <_dtoa_r+0x808>
 8012ce0:	b18f      	cbz	r7, 8012d06 <_dtoa_r+0x75e>
 8012ce2:	4631      	mov	r1, r6
 8012ce4:	463a      	mov	r2, r7
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f000 ff24 	bl	8013b34 <__pow5mult>
 8012cec:	9a04      	ldr	r2, [sp, #16]
 8012cee:	4601      	mov	r1, r0
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f000 fe87 	bl	8013a06 <__multiply>
 8012cf8:	9904      	ldr	r1, [sp, #16]
 8012cfa:	9008      	str	r0, [sp, #32]
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f000 fd9b 	bl	8013838 <_Bfree>
 8012d02:	9b08      	ldr	r3, [sp, #32]
 8012d04:	9304      	str	r3, [sp, #16]
 8012d06:	9b07      	ldr	r3, [sp, #28]
 8012d08:	1bda      	subs	r2, r3, r7
 8012d0a:	d004      	beq.n	8012d16 <_dtoa_r+0x76e>
 8012d0c:	9904      	ldr	r1, [sp, #16]
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f000 ff10 	bl	8013b34 <__pow5mult>
 8012d14:	9004      	str	r0, [sp, #16]
 8012d16:	2101      	movs	r1, #1
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f000 fe6b 	bl	80139f4 <__i2b>
 8012d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d20:	4607      	mov	r7, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f000 81d0 	beq.w	80130c8 <_dtoa_r+0xb20>
 8012d28:	461a      	mov	r2, r3
 8012d2a:	4601      	mov	r1, r0
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f000 ff01 	bl	8013b34 <__pow5mult>
 8012d32:	9b06      	ldr	r3, [sp, #24]
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	4607      	mov	r7, r0
 8012d38:	dc40      	bgt.n	8012dbc <_dtoa_r+0x814>
 8012d3a:	9b00      	ldr	r3, [sp, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d139      	bne.n	8012db4 <_dtoa_r+0x80c>
 8012d40:	9b01      	ldr	r3, [sp, #4]
 8012d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d136      	bne.n	8012db8 <_dtoa_r+0x810>
 8012d4a:	9b01      	ldr	r3, [sp, #4]
 8012d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d50:	0d1b      	lsrs	r3, r3, #20
 8012d52:	051b      	lsls	r3, r3, #20
 8012d54:	b12b      	cbz	r3, 8012d62 <_dtoa_r+0x7ba>
 8012d56:	9b05      	ldr	r3, [sp, #20]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	9305      	str	r3, [sp, #20]
 8012d5c:	f108 0801 	add.w	r8, r8, #1
 8012d60:	2301      	movs	r3, #1
 8012d62:	9307      	str	r3, [sp, #28]
 8012d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d12a      	bne.n	8012dc0 <_dtoa_r+0x818>
 8012d6a:	2001      	movs	r0, #1
 8012d6c:	e030      	b.n	8012dd0 <_dtoa_r+0x828>
 8012d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d74:	e795      	b.n	8012ca2 <_dtoa_r+0x6fa>
 8012d76:	9b07      	ldr	r3, [sp, #28]
 8012d78:	f109 37ff 	add.w	r7, r9, #4294967295
 8012d7c:	42bb      	cmp	r3, r7
 8012d7e:	bfbf      	itttt	lt
 8012d80:	9b07      	ldrlt	r3, [sp, #28]
 8012d82:	9707      	strlt	r7, [sp, #28]
 8012d84:	1afa      	sublt	r2, r7, r3
 8012d86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012d88:	bfbb      	ittet	lt
 8012d8a:	189b      	addlt	r3, r3, r2
 8012d8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012d8e:	1bdf      	subge	r7, r3, r7
 8012d90:	2700      	movlt	r7, #0
 8012d92:	f1b9 0f00 	cmp.w	r9, #0
 8012d96:	bfb5      	itete	lt
 8012d98:	9b05      	ldrlt	r3, [sp, #20]
 8012d9a:	9d05      	ldrge	r5, [sp, #20]
 8012d9c:	eba3 0509 	sublt.w	r5, r3, r9
 8012da0:	464b      	movge	r3, r9
 8012da2:	bfb8      	it	lt
 8012da4:	2300      	movlt	r3, #0
 8012da6:	e77e      	b.n	8012ca6 <_dtoa_r+0x6fe>
 8012da8:	9f07      	ldr	r7, [sp, #28]
 8012daa:	9d05      	ldr	r5, [sp, #20]
 8012dac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012dae:	e783      	b.n	8012cb8 <_dtoa_r+0x710>
 8012db0:	9a07      	ldr	r2, [sp, #28]
 8012db2:	e7ab      	b.n	8012d0c <_dtoa_r+0x764>
 8012db4:	2300      	movs	r3, #0
 8012db6:	e7d4      	b.n	8012d62 <_dtoa_r+0x7ba>
 8012db8:	9b00      	ldr	r3, [sp, #0]
 8012dba:	e7d2      	b.n	8012d62 <_dtoa_r+0x7ba>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	9307      	str	r3, [sp, #28]
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012dc6:	6918      	ldr	r0, [r3, #16]
 8012dc8:	f000 fdc6 	bl	8013958 <__hi0bits>
 8012dcc:	f1c0 0020 	rsb	r0, r0, #32
 8012dd0:	4440      	add	r0, r8
 8012dd2:	f010 001f 	ands.w	r0, r0, #31
 8012dd6:	d047      	beq.n	8012e68 <_dtoa_r+0x8c0>
 8012dd8:	f1c0 0320 	rsb	r3, r0, #32
 8012ddc:	2b04      	cmp	r3, #4
 8012dde:	dd3b      	ble.n	8012e58 <_dtoa_r+0x8b0>
 8012de0:	9b05      	ldr	r3, [sp, #20]
 8012de2:	f1c0 001c 	rsb	r0, r0, #28
 8012de6:	4403      	add	r3, r0
 8012de8:	9305      	str	r3, [sp, #20]
 8012dea:	4405      	add	r5, r0
 8012dec:	4480      	add	r8, r0
 8012dee:	9b05      	ldr	r3, [sp, #20]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	dd05      	ble.n	8012e00 <_dtoa_r+0x858>
 8012df4:	461a      	mov	r2, r3
 8012df6:	9904      	ldr	r1, [sp, #16]
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f000 fee9 	bl	8013bd0 <__lshift>
 8012dfe:	9004      	str	r0, [sp, #16]
 8012e00:	f1b8 0f00 	cmp.w	r8, #0
 8012e04:	dd05      	ble.n	8012e12 <_dtoa_r+0x86a>
 8012e06:	4639      	mov	r1, r7
 8012e08:	4642      	mov	r2, r8
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fee0 	bl	8013bd0 <__lshift>
 8012e10:	4607      	mov	r7, r0
 8012e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e14:	b353      	cbz	r3, 8012e6c <_dtoa_r+0x8c4>
 8012e16:	4639      	mov	r1, r7
 8012e18:	9804      	ldr	r0, [sp, #16]
 8012e1a:	f000 ff2d 	bl	8013c78 <__mcmp>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	da24      	bge.n	8012e6c <_dtoa_r+0x8c4>
 8012e22:	2300      	movs	r3, #0
 8012e24:	220a      	movs	r2, #10
 8012e26:	9904      	ldr	r1, [sp, #16]
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f000 fd1c 	bl	8013866 <__multadd>
 8012e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e30:	9004      	str	r0, [sp, #16]
 8012e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	f000 814d 	beq.w	80130d6 <_dtoa_r+0xb2e>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	4631      	mov	r1, r6
 8012e40:	220a      	movs	r2, #10
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 fd0f 	bl	8013866 <__multadd>
 8012e48:	9b02      	ldr	r3, [sp, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	4606      	mov	r6, r0
 8012e4e:	dc4f      	bgt.n	8012ef0 <_dtoa_r+0x948>
 8012e50:	9b06      	ldr	r3, [sp, #24]
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	dd4c      	ble.n	8012ef0 <_dtoa_r+0x948>
 8012e56:	e011      	b.n	8012e7c <_dtoa_r+0x8d4>
 8012e58:	d0c9      	beq.n	8012dee <_dtoa_r+0x846>
 8012e5a:	9a05      	ldr	r2, [sp, #20]
 8012e5c:	331c      	adds	r3, #28
 8012e5e:	441a      	add	r2, r3
 8012e60:	9205      	str	r2, [sp, #20]
 8012e62:	441d      	add	r5, r3
 8012e64:	4498      	add	r8, r3
 8012e66:	e7c2      	b.n	8012dee <_dtoa_r+0x846>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	e7f6      	b.n	8012e5a <_dtoa_r+0x8b2>
 8012e6c:	f1b9 0f00 	cmp.w	r9, #0
 8012e70:	dc38      	bgt.n	8012ee4 <_dtoa_r+0x93c>
 8012e72:	9b06      	ldr	r3, [sp, #24]
 8012e74:	2b02      	cmp	r3, #2
 8012e76:	dd35      	ble.n	8012ee4 <_dtoa_r+0x93c>
 8012e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e7c:	9b02      	ldr	r3, [sp, #8]
 8012e7e:	b963      	cbnz	r3, 8012e9a <_dtoa_r+0x8f2>
 8012e80:	4639      	mov	r1, r7
 8012e82:	2205      	movs	r2, #5
 8012e84:	4620      	mov	r0, r4
 8012e86:	f000 fcee 	bl	8013866 <__multadd>
 8012e8a:	4601      	mov	r1, r0
 8012e8c:	4607      	mov	r7, r0
 8012e8e:	9804      	ldr	r0, [sp, #16]
 8012e90:	f000 fef2 	bl	8013c78 <__mcmp>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	f73f adcc 	bgt.w	8012a32 <_dtoa_r+0x48a>
 8012e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e9c:	465d      	mov	r5, fp
 8012e9e:	ea6f 0a03 	mvn.w	sl, r3
 8012ea2:	f04f 0900 	mov.w	r9, #0
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	f000 fcc5 	bl	8013838 <_Bfree>
 8012eae:	2e00      	cmp	r6, #0
 8012eb0:	f43f aeb7 	beq.w	8012c22 <_dtoa_r+0x67a>
 8012eb4:	f1b9 0f00 	cmp.w	r9, #0
 8012eb8:	d005      	beq.n	8012ec6 <_dtoa_r+0x91e>
 8012eba:	45b1      	cmp	r9, r6
 8012ebc:	d003      	beq.n	8012ec6 <_dtoa_r+0x91e>
 8012ebe:	4649      	mov	r1, r9
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f000 fcb9 	bl	8013838 <_Bfree>
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f000 fcb5 	bl	8013838 <_Bfree>
 8012ece:	e6a8      	b.n	8012c22 <_dtoa_r+0x67a>
 8012ed0:	2700      	movs	r7, #0
 8012ed2:	463e      	mov	r6, r7
 8012ed4:	e7e1      	b.n	8012e9a <_dtoa_r+0x8f2>
 8012ed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012eda:	463e      	mov	r6, r7
 8012edc:	e5a9      	b.n	8012a32 <_dtoa_r+0x48a>
 8012ede:	bf00      	nop
 8012ee0:	40240000 	.word	0x40240000
 8012ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ee6:	f8cd 9008 	str.w	r9, [sp, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	f000 80fa 	beq.w	80130e4 <_dtoa_r+0xb3c>
 8012ef0:	2d00      	cmp	r5, #0
 8012ef2:	dd05      	ble.n	8012f00 <_dtoa_r+0x958>
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	462a      	mov	r2, r5
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f000 fe69 	bl	8013bd0 <__lshift>
 8012efe:	4606      	mov	r6, r0
 8012f00:	9b07      	ldr	r3, [sp, #28]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d04c      	beq.n	8012fa0 <_dtoa_r+0x9f8>
 8012f06:	6871      	ldr	r1, [r6, #4]
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f000 fc61 	bl	80137d0 <_Balloc>
 8012f0e:	6932      	ldr	r2, [r6, #16]
 8012f10:	3202      	adds	r2, #2
 8012f12:	4605      	mov	r5, r0
 8012f14:	0092      	lsls	r2, r2, #2
 8012f16:	f106 010c 	add.w	r1, r6, #12
 8012f1a:	300c      	adds	r0, #12
 8012f1c:	f7fd fc50 	bl	80107c0 <memcpy>
 8012f20:	2201      	movs	r2, #1
 8012f22:	4629      	mov	r1, r5
 8012f24:	4620      	mov	r0, r4
 8012f26:	f000 fe53 	bl	8013bd0 <__lshift>
 8012f2a:	9b00      	ldr	r3, [sp, #0]
 8012f2c:	f8cd b014 	str.w	fp, [sp, #20]
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	46b1      	mov	r9, r6
 8012f36:	9307      	str	r3, [sp, #28]
 8012f38:	4606      	mov	r6, r0
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	9804      	ldr	r0, [sp, #16]
 8012f3e:	f7ff faa5 	bl	801248c <quorem>
 8012f42:	4649      	mov	r1, r9
 8012f44:	4605      	mov	r5, r0
 8012f46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012f4a:	9804      	ldr	r0, [sp, #16]
 8012f4c:	f000 fe94 	bl	8013c78 <__mcmp>
 8012f50:	4632      	mov	r2, r6
 8012f52:	9000      	str	r0, [sp, #0]
 8012f54:	4639      	mov	r1, r7
 8012f56:	4620      	mov	r0, r4
 8012f58:	f000 fea8 	bl	8013cac <__mdiff>
 8012f5c:	68c3      	ldr	r3, [r0, #12]
 8012f5e:	4602      	mov	r2, r0
 8012f60:	bb03      	cbnz	r3, 8012fa4 <_dtoa_r+0x9fc>
 8012f62:	4601      	mov	r1, r0
 8012f64:	9008      	str	r0, [sp, #32]
 8012f66:	9804      	ldr	r0, [sp, #16]
 8012f68:	f000 fe86 	bl	8013c78 <__mcmp>
 8012f6c:	9a08      	ldr	r2, [sp, #32]
 8012f6e:	4603      	mov	r3, r0
 8012f70:	4611      	mov	r1, r2
 8012f72:	4620      	mov	r0, r4
 8012f74:	9308      	str	r3, [sp, #32]
 8012f76:	f000 fc5f 	bl	8013838 <_Bfree>
 8012f7a:	9b08      	ldr	r3, [sp, #32]
 8012f7c:	b9a3      	cbnz	r3, 8012fa8 <_dtoa_r+0xa00>
 8012f7e:	9a06      	ldr	r2, [sp, #24]
 8012f80:	b992      	cbnz	r2, 8012fa8 <_dtoa_r+0xa00>
 8012f82:	9a07      	ldr	r2, [sp, #28]
 8012f84:	b982      	cbnz	r2, 8012fa8 <_dtoa_r+0xa00>
 8012f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f8a:	d029      	beq.n	8012fe0 <_dtoa_r+0xa38>
 8012f8c:	9b00      	ldr	r3, [sp, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	dd01      	ble.n	8012f96 <_dtoa_r+0x9ee>
 8012f92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012f96:	9b05      	ldr	r3, [sp, #20]
 8012f98:	1c5d      	adds	r5, r3, #1
 8012f9a:	f883 8000 	strb.w	r8, [r3]
 8012f9e:	e782      	b.n	8012ea6 <_dtoa_r+0x8fe>
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	e7c2      	b.n	8012f2a <_dtoa_r+0x982>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e7e3      	b.n	8012f70 <_dtoa_r+0x9c8>
 8012fa8:	9a00      	ldr	r2, [sp, #0]
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	db04      	blt.n	8012fb8 <_dtoa_r+0xa10>
 8012fae:	d125      	bne.n	8012ffc <_dtoa_r+0xa54>
 8012fb0:	9a06      	ldr	r2, [sp, #24]
 8012fb2:	bb1a      	cbnz	r2, 8012ffc <_dtoa_r+0xa54>
 8012fb4:	9a07      	ldr	r2, [sp, #28]
 8012fb6:	bb0a      	cbnz	r2, 8012ffc <_dtoa_r+0xa54>
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	ddec      	ble.n	8012f96 <_dtoa_r+0x9ee>
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	9904      	ldr	r1, [sp, #16]
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f000 fe05 	bl	8013bd0 <__lshift>
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	9004      	str	r0, [sp, #16]
 8012fca:	f000 fe55 	bl	8013c78 <__mcmp>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	dc03      	bgt.n	8012fda <_dtoa_r+0xa32>
 8012fd2:	d1e0      	bne.n	8012f96 <_dtoa_r+0x9ee>
 8012fd4:	f018 0f01 	tst.w	r8, #1
 8012fd8:	d0dd      	beq.n	8012f96 <_dtoa_r+0x9ee>
 8012fda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012fde:	d1d8      	bne.n	8012f92 <_dtoa_r+0x9ea>
 8012fe0:	9b05      	ldr	r3, [sp, #20]
 8012fe2:	9a05      	ldr	r2, [sp, #20]
 8012fe4:	1c5d      	adds	r5, r3, #1
 8012fe6:	2339      	movs	r3, #57	; 0x39
 8012fe8:	7013      	strb	r3, [r2, #0]
 8012fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fee:	2b39      	cmp	r3, #57	; 0x39
 8012ff0:	f105 32ff 	add.w	r2, r5, #4294967295
 8012ff4:	d04f      	beq.n	8013096 <_dtoa_r+0xaee>
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	7013      	strb	r3, [r2, #0]
 8012ffa:	e754      	b.n	8012ea6 <_dtoa_r+0x8fe>
 8012ffc:	9a05      	ldr	r2, [sp, #20]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f102 0501 	add.w	r5, r2, #1
 8013004:	dd06      	ble.n	8013014 <_dtoa_r+0xa6c>
 8013006:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801300a:	d0e9      	beq.n	8012fe0 <_dtoa_r+0xa38>
 801300c:	f108 0801 	add.w	r8, r8, #1
 8013010:	9b05      	ldr	r3, [sp, #20]
 8013012:	e7c2      	b.n	8012f9a <_dtoa_r+0x9f2>
 8013014:	9a02      	ldr	r2, [sp, #8]
 8013016:	f805 8c01 	strb.w	r8, [r5, #-1]
 801301a:	eba5 030b 	sub.w	r3, r5, fp
 801301e:	4293      	cmp	r3, r2
 8013020:	d021      	beq.n	8013066 <_dtoa_r+0xabe>
 8013022:	2300      	movs	r3, #0
 8013024:	220a      	movs	r2, #10
 8013026:	9904      	ldr	r1, [sp, #16]
 8013028:	4620      	mov	r0, r4
 801302a:	f000 fc1c 	bl	8013866 <__multadd>
 801302e:	45b1      	cmp	r9, r6
 8013030:	9004      	str	r0, [sp, #16]
 8013032:	f04f 0300 	mov.w	r3, #0
 8013036:	f04f 020a 	mov.w	r2, #10
 801303a:	4649      	mov	r1, r9
 801303c:	4620      	mov	r0, r4
 801303e:	d105      	bne.n	801304c <_dtoa_r+0xaa4>
 8013040:	f000 fc11 	bl	8013866 <__multadd>
 8013044:	4681      	mov	r9, r0
 8013046:	4606      	mov	r6, r0
 8013048:	9505      	str	r5, [sp, #20]
 801304a:	e776      	b.n	8012f3a <_dtoa_r+0x992>
 801304c:	f000 fc0b 	bl	8013866 <__multadd>
 8013050:	4631      	mov	r1, r6
 8013052:	4681      	mov	r9, r0
 8013054:	2300      	movs	r3, #0
 8013056:	220a      	movs	r2, #10
 8013058:	4620      	mov	r0, r4
 801305a:	f000 fc04 	bl	8013866 <__multadd>
 801305e:	4606      	mov	r6, r0
 8013060:	e7f2      	b.n	8013048 <_dtoa_r+0xaa0>
 8013062:	f04f 0900 	mov.w	r9, #0
 8013066:	2201      	movs	r2, #1
 8013068:	9904      	ldr	r1, [sp, #16]
 801306a:	4620      	mov	r0, r4
 801306c:	f000 fdb0 	bl	8013bd0 <__lshift>
 8013070:	4639      	mov	r1, r7
 8013072:	9004      	str	r0, [sp, #16]
 8013074:	f000 fe00 	bl	8013c78 <__mcmp>
 8013078:	2800      	cmp	r0, #0
 801307a:	dcb6      	bgt.n	8012fea <_dtoa_r+0xa42>
 801307c:	d102      	bne.n	8013084 <_dtoa_r+0xadc>
 801307e:	f018 0f01 	tst.w	r8, #1
 8013082:	d1b2      	bne.n	8012fea <_dtoa_r+0xa42>
 8013084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013088:	2b30      	cmp	r3, #48	; 0x30
 801308a:	f105 32ff 	add.w	r2, r5, #4294967295
 801308e:	f47f af0a 	bne.w	8012ea6 <_dtoa_r+0x8fe>
 8013092:	4615      	mov	r5, r2
 8013094:	e7f6      	b.n	8013084 <_dtoa_r+0xadc>
 8013096:	4593      	cmp	fp, r2
 8013098:	d105      	bne.n	80130a6 <_dtoa_r+0xafe>
 801309a:	2331      	movs	r3, #49	; 0x31
 801309c:	f10a 0a01 	add.w	sl, sl, #1
 80130a0:	f88b 3000 	strb.w	r3, [fp]
 80130a4:	e6ff      	b.n	8012ea6 <_dtoa_r+0x8fe>
 80130a6:	4615      	mov	r5, r2
 80130a8:	e79f      	b.n	8012fea <_dtoa_r+0xa42>
 80130aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013110 <_dtoa_r+0xb68>
 80130ae:	e007      	b.n	80130c0 <_dtoa_r+0xb18>
 80130b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013114 <_dtoa_r+0xb6c>
 80130b6:	b11b      	cbz	r3, 80130c0 <_dtoa_r+0xb18>
 80130b8:	f10b 0308 	add.w	r3, fp, #8
 80130bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80130be:	6013      	str	r3, [r2, #0]
 80130c0:	4658      	mov	r0, fp
 80130c2:	b017      	add	sp, #92	; 0x5c
 80130c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c8:	9b06      	ldr	r3, [sp, #24]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	f77f ae35 	ble.w	8012d3a <_dtoa_r+0x792>
 80130d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80130d2:	9307      	str	r3, [sp, #28]
 80130d4:	e649      	b.n	8012d6a <_dtoa_r+0x7c2>
 80130d6:	9b02      	ldr	r3, [sp, #8]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	dc03      	bgt.n	80130e4 <_dtoa_r+0xb3c>
 80130dc:	9b06      	ldr	r3, [sp, #24]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	f73f aecc 	bgt.w	8012e7c <_dtoa_r+0x8d4>
 80130e4:	465d      	mov	r5, fp
 80130e6:	4639      	mov	r1, r7
 80130e8:	9804      	ldr	r0, [sp, #16]
 80130ea:	f7ff f9cf 	bl	801248c <quorem>
 80130ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80130f2:	f805 8b01 	strb.w	r8, [r5], #1
 80130f6:	9a02      	ldr	r2, [sp, #8]
 80130f8:	eba5 030b 	sub.w	r3, r5, fp
 80130fc:	429a      	cmp	r2, r3
 80130fe:	ddb0      	ble.n	8013062 <_dtoa_r+0xaba>
 8013100:	2300      	movs	r3, #0
 8013102:	220a      	movs	r2, #10
 8013104:	9904      	ldr	r1, [sp, #16]
 8013106:	4620      	mov	r0, r4
 8013108:	f000 fbad 	bl	8013866 <__multadd>
 801310c:	9004      	str	r0, [sp, #16]
 801310e:	e7ea      	b.n	80130e6 <_dtoa_r+0xb3e>
 8013110:	0801613b 	.word	0x0801613b
 8013114:	08016000 	.word	0x08016000

08013118 <rshift>:
 8013118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801311a:	6906      	ldr	r6, [r0, #16]
 801311c:	114b      	asrs	r3, r1, #5
 801311e:	429e      	cmp	r6, r3
 8013120:	f100 0414 	add.w	r4, r0, #20
 8013124:	dd30      	ble.n	8013188 <rshift+0x70>
 8013126:	f011 011f 	ands.w	r1, r1, #31
 801312a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801312e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013132:	d108      	bne.n	8013146 <rshift+0x2e>
 8013134:	4621      	mov	r1, r4
 8013136:	42b2      	cmp	r2, r6
 8013138:	460b      	mov	r3, r1
 801313a:	d211      	bcs.n	8013160 <rshift+0x48>
 801313c:	f852 3b04 	ldr.w	r3, [r2], #4
 8013140:	f841 3b04 	str.w	r3, [r1], #4
 8013144:	e7f7      	b.n	8013136 <rshift+0x1e>
 8013146:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801314a:	f1c1 0c20 	rsb	ip, r1, #32
 801314e:	40cd      	lsrs	r5, r1
 8013150:	3204      	adds	r2, #4
 8013152:	4623      	mov	r3, r4
 8013154:	42b2      	cmp	r2, r6
 8013156:	4617      	mov	r7, r2
 8013158:	d30c      	bcc.n	8013174 <rshift+0x5c>
 801315a:	601d      	str	r5, [r3, #0]
 801315c:	b105      	cbz	r5, 8013160 <rshift+0x48>
 801315e:	3304      	adds	r3, #4
 8013160:	1b1a      	subs	r2, r3, r4
 8013162:	42a3      	cmp	r3, r4
 8013164:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013168:	bf08      	it	eq
 801316a:	2300      	moveq	r3, #0
 801316c:	6102      	str	r2, [r0, #16]
 801316e:	bf08      	it	eq
 8013170:	6143      	streq	r3, [r0, #20]
 8013172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013174:	683f      	ldr	r7, [r7, #0]
 8013176:	fa07 f70c 	lsl.w	r7, r7, ip
 801317a:	433d      	orrs	r5, r7
 801317c:	f843 5b04 	str.w	r5, [r3], #4
 8013180:	f852 5b04 	ldr.w	r5, [r2], #4
 8013184:	40cd      	lsrs	r5, r1
 8013186:	e7e5      	b.n	8013154 <rshift+0x3c>
 8013188:	4623      	mov	r3, r4
 801318a:	e7e9      	b.n	8013160 <rshift+0x48>

0801318c <__hexdig_fun>:
 801318c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013190:	2b09      	cmp	r3, #9
 8013192:	d802      	bhi.n	801319a <__hexdig_fun+0xe>
 8013194:	3820      	subs	r0, #32
 8013196:	b2c0      	uxtb	r0, r0
 8013198:	4770      	bx	lr
 801319a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801319e:	2b05      	cmp	r3, #5
 80131a0:	d801      	bhi.n	80131a6 <__hexdig_fun+0x1a>
 80131a2:	3847      	subs	r0, #71	; 0x47
 80131a4:	e7f7      	b.n	8013196 <__hexdig_fun+0xa>
 80131a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80131aa:	2b05      	cmp	r3, #5
 80131ac:	d801      	bhi.n	80131b2 <__hexdig_fun+0x26>
 80131ae:	3827      	subs	r0, #39	; 0x27
 80131b0:	e7f1      	b.n	8013196 <__hexdig_fun+0xa>
 80131b2:	2000      	movs	r0, #0
 80131b4:	4770      	bx	lr

080131b6 <__gethex>:
 80131b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ba:	b08b      	sub	sp, #44	; 0x2c
 80131bc:	468a      	mov	sl, r1
 80131be:	9002      	str	r0, [sp, #8]
 80131c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80131c2:	9306      	str	r3, [sp, #24]
 80131c4:	4690      	mov	r8, r2
 80131c6:	f000 fadf 	bl	8013788 <__localeconv_l>
 80131ca:	6803      	ldr	r3, [r0, #0]
 80131cc:	9303      	str	r3, [sp, #12]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ed f808 	bl	80001e4 <strlen>
 80131d4:	9b03      	ldr	r3, [sp, #12]
 80131d6:	9001      	str	r0, [sp, #4]
 80131d8:	4403      	add	r3, r0
 80131da:	f04f 0b00 	mov.w	fp, #0
 80131de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80131e2:	9307      	str	r3, [sp, #28]
 80131e4:	f8da 3000 	ldr.w	r3, [sl]
 80131e8:	3302      	adds	r3, #2
 80131ea:	461f      	mov	r7, r3
 80131ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80131f0:	2830      	cmp	r0, #48	; 0x30
 80131f2:	d06c      	beq.n	80132ce <__gethex+0x118>
 80131f4:	f7ff ffca 	bl	801318c <__hexdig_fun>
 80131f8:	4604      	mov	r4, r0
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d16a      	bne.n	80132d4 <__gethex+0x11e>
 80131fe:	9a01      	ldr	r2, [sp, #4]
 8013200:	9903      	ldr	r1, [sp, #12]
 8013202:	4638      	mov	r0, r7
 8013204:	f001 fb78 	bl	80148f8 <strncmp>
 8013208:	2800      	cmp	r0, #0
 801320a:	d166      	bne.n	80132da <__gethex+0x124>
 801320c:	9b01      	ldr	r3, [sp, #4]
 801320e:	5cf8      	ldrb	r0, [r7, r3]
 8013210:	18fe      	adds	r6, r7, r3
 8013212:	f7ff ffbb 	bl	801318c <__hexdig_fun>
 8013216:	2800      	cmp	r0, #0
 8013218:	d062      	beq.n	80132e0 <__gethex+0x12a>
 801321a:	4633      	mov	r3, r6
 801321c:	7818      	ldrb	r0, [r3, #0]
 801321e:	2830      	cmp	r0, #48	; 0x30
 8013220:	461f      	mov	r7, r3
 8013222:	f103 0301 	add.w	r3, r3, #1
 8013226:	d0f9      	beq.n	801321c <__gethex+0x66>
 8013228:	f7ff ffb0 	bl	801318c <__hexdig_fun>
 801322c:	fab0 f580 	clz	r5, r0
 8013230:	096d      	lsrs	r5, r5, #5
 8013232:	4634      	mov	r4, r6
 8013234:	f04f 0b01 	mov.w	fp, #1
 8013238:	463a      	mov	r2, r7
 801323a:	4616      	mov	r6, r2
 801323c:	3201      	adds	r2, #1
 801323e:	7830      	ldrb	r0, [r6, #0]
 8013240:	f7ff ffa4 	bl	801318c <__hexdig_fun>
 8013244:	2800      	cmp	r0, #0
 8013246:	d1f8      	bne.n	801323a <__gethex+0x84>
 8013248:	9a01      	ldr	r2, [sp, #4]
 801324a:	9903      	ldr	r1, [sp, #12]
 801324c:	4630      	mov	r0, r6
 801324e:	f001 fb53 	bl	80148f8 <strncmp>
 8013252:	b950      	cbnz	r0, 801326a <__gethex+0xb4>
 8013254:	b954      	cbnz	r4, 801326c <__gethex+0xb6>
 8013256:	9b01      	ldr	r3, [sp, #4]
 8013258:	18f4      	adds	r4, r6, r3
 801325a:	4622      	mov	r2, r4
 801325c:	4616      	mov	r6, r2
 801325e:	3201      	adds	r2, #1
 8013260:	7830      	ldrb	r0, [r6, #0]
 8013262:	f7ff ff93 	bl	801318c <__hexdig_fun>
 8013266:	2800      	cmp	r0, #0
 8013268:	d1f8      	bne.n	801325c <__gethex+0xa6>
 801326a:	b10c      	cbz	r4, 8013270 <__gethex+0xba>
 801326c:	1ba4      	subs	r4, r4, r6
 801326e:	00a4      	lsls	r4, r4, #2
 8013270:	7833      	ldrb	r3, [r6, #0]
 8013272:	2b50      	cmp	r3, #80	; 0x50
 8013274:	d001      	beq.n	801327a <__gethex+0xc4>
 8013276:	2b70      	cmp	r3, #112	; 0x70
 8013278:	d140      	bne.n	80132fc <__gethex+0x146>
 801327a:	7873      	ldrb	r3, [r6, #1]
 801327c:	2b2b      	cmp	r3, #43	; 0x2b
 801327e:	d031      	beq.n	80132e4 <__gethex+0x12e>
 8013280:	2b2d      	cmp	r3, #45	; 0x2d
 8013282:	d033      	beq.n	80132ec <__gethex+0x136>
 8013284:	1c71      	adds	r1, r6, #1
 8013286:	f04f 0900 	mov.w	r9, #0
 801328a:	7808      	ldrb	r0, [r1, #0]
 801328c:	f7ff ff7e 	bl	801318c <__hexdig_fun>
 8013290:	1e43      	subs	r3, r0, #1
 8013292:	b2db      	uxtb	r3, r3
 8013294:	2b18      	cmp	r3, #24
 8013296:	d831      	bhi.n	80132fc <__gethex+0x146>
 8013298:	f1a0 0210 	sub.w	r2, r0, #16
 801329c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80132a0:	f7ff ff74 	bl	801318c <__hexdig_fun>
 80132a4:	1e43      	subs	r3, r0, #1
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b18      	cmp	r3, #24
 80132aa:	d922      	bls.n	80132f2 <__gethex+0x13c>
 80132ac:	f1b9 0f00 	cmp.w	r9, #0
 80132b0:	d000      	beq.n	80132b4 <__gethex+0xfe>
 80132b2:	4252      	negs	r2, r2
 80132b4:	4414      	add	r4, r2
 80132b6:	f8ca 1000 	str.w	r1, [sl]
 80132ba:	b30d      	cbz	r5, 8013300 <__gethex+0x14a>
 80132bc:	f1bb 0f00 	cmp.w	fp, #0
 80132c0:	bf0c      	ite	eq
 80132c2:	2706      	moveq	r7, #6
 80132c4:	2700      	movne	r7, #0
 80132c6:	4638      	mov	r0, r7
 80132c8:	b00b      	add	sp, #44	; 0x2c
 80132ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ce:	f10b 0b01 	add.w	fp, fp, #1
 80132d2:	e78a      	b.n	80131ea <__gethex+0x34>
 80132d4:	2500      	movs	r5, #0
 80132d6:	462c      	mov	r4, r5
 80132d8:	e7ae      	b.n	8013238 <__gethex+0x82>
 80132da:	463e      	mov	r6, r7
 80132dc:	2501      	movs	r5, #1
 80132de:	e7c7      	b.n	8013270 <__gethex+0xba>
 80132e0:	4604      	mov	r4, r0
 80132e2:	e7fb      	b.n	80132dc <__gethex+0x126>
 80132e4:	f04f 0900 	mov.w	r9, #0
 80132e8:	1cb1      	adds	r1, r6, #2
 80132ea:	e7ce      	b.n	801328a <__gethex+0xd4>
 80132ec:	f04f 0901 	mov.w	r9, #1
 80132f0:	e7fa      	b.n	80132e8 <__gethex+0x132>
 80132f2:	230a      	movs	r3, #10
 80132f4:	fb03 0202 	mla	r2, r3, r2, r0
 80132f8:	3a10      	subs	r2, #16
 80132fa:	e7cf      	b.n	801329c <__gethex+0xe6>
 80132fc:	4631      	mov	r1, r6
 80132fe:	e7da      	b.n	80132b6 <__gethex+0x100>
 8013300:	1bf3      	subs	r3, r6, r7
 8013302:	3b01      	subs	r3, #1
 8013304:	4629      	mov	r1, r5
 8013306:	2b07      	cmp	r3, #7
 8013308:	dc49      	bgt.n	801339e <__gethex+0x1e8>
 801330a:	9802      	ldr	r0, [sp, #8]
 801330c:	f000 fa60 	bl	80137d0 <_Balloc>
 8013310:	9b01      	ldr	r3, [sp, #4]
 8013312:	f100 0914 	add.w	r9, r0, #20
 8013316:	f04f 0b00 	mov.w	fp, #0
 801331a:	f1c3 0301 	rsb	r3, r3, #1
 801331e:	4605      	mov	r5, r0
 8013320:	f8cd 9010 	str.w	r9, [sp, #16]
 8013324:	46da      	mov	sl, fp
 8013326:	9308      	str	r3, [sp, #32]
 8013328:	42b7      	cmp	r7, r6
 801332a:	d33b      	bcc.n	80133a4 <__gethex+0x1ee>
 801332c:	9804      	ldr	r0, [sp, #16]
 801332e:	f840 ab04 	str.w	sl, [r0], #4
 8013332:	eba0 0009 	sub.w	r0, r0, r9
 8013336:	1080      	asrs	r0, r0, #2
 8013338:	6128      	str	r0, [r5, #16]
 801333a:	0147      	lsls	r7, r0, #5
 801333c:	4650      	mov	r0, sl
 801333e:	f000 fb0b 	bl	8013958 <__hi0bits>
 8013342:	f8d8 6000 	ldr.w	r6, [r8]
 8013346:	1a3f      	subs	r7, r7, r0
 8013348:	42b7      	cmp	r7, r6
 801334a:	dd64      	ble.n	8013416 <__gethex+0x260>
 801334c:	1bbf      	subs	r7, r7, r6
 801334e:	4639      	mov	r1, r7
 8013350:	4628      	mov	r0, r5
 8013352:	f000 fe1b 	bl	8013f8c <__any_on>
 8013356:	4682      	mov	sl, r0
 8013358:	b178      	cbz	r0, 801337a <__gethex+0x1c4>
 801335a:	1e7b      	subs	r3, r7, #1
 801335c:	1159      	asrs	r1, r3, #5
 801335e:	f003 021f 	and.w	r2, r3, #31
 8013362:	f04f 0a01 	mov.w	sl, #1
 8013366:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801336a:	fa0a f202 	lsl.w	r2, sl, r2
 801336e:	420a      	tst	r2, r1
 8013370:	d003      	beq.n	801337a <__gethex+0x1c4>
 8013372:	4553      	cmp	r3, sl
 8013374:	dc46      	bgt.n	8013404 <__gethex+0x24e>
 8013376:	f04f 0a02 	mov.w	sl, #2
 801337a:	4639      	mov	r1, r7
 801337c:	4628      	mov	r0, r5
 801337e:	f7ff fecb 	bl	8013118 <rshift>
 8013382:	443c      	add	r4, r7
 8013384:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013388:	42a3      	cmp	r3, r4
 801338a:	da52      	bge.n	8013432 <__gethex+0x27c>
 801338c:	4629      	mov	r1, r5
 801338e:	9802      	ldr	r0, [sp, #8]
 8013390:	f000 fa52 	bl	8013838 <_Bfree>
 8013394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013396:	2300      	movs	r3, #0
 8013398:	6013      	str	r3, [r2, #0]
 801339a:	27a3      	movs	r7, #163	; 0xa3
 801339c:	e793      	b.n	80132c6 <__gethex+0x110>
 801339e:	3101      	adds	r1, #1
 80133a0:	105b      	asrs	r3, r3, #1
 80133a2:	e7b0      	b.n	8013306 <__gethex+0x150>
 80133a4:	1e73      	subs	r3, r6, #1
 80133a6:	9305      	str	r3, [sp, #20]
 80133a8:	9a07      	ldr	r2, [sp, #28]
 80133aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133ae:	4293      	cmp	r3, r2
 80133b0:	d018      	beq.n	80133e4 <__gethex+0x22e>
 80133b2:	f1bb 0f20 	cmp.w	fp, #32
 80133b6:	d107      	bne.n	80133c8 <__gethex+0x212>
 80133b8:	9b04      	ldr	r3, [sp, #16]
 80133ba:	f8c3 a000 	str.w	sl, [r3]
 80133be:	3304      	adds	r3, #4
 80133c0:	f04f 0a00 	mov.w	sl, #0
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	46d3      	mov	fp, sl
 80133c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80133cc:	f7ff fede 	bl	801318c <__hexdig_fun>
 80133d0:	f000 000f 	and.w	r0, r0, #15
 80133d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80133d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80133dc:	f10b 0b04 	add.w	fp, fp, #4
 80133e0:	9b05      	ldr	r3, [sp, #20]
 80133e2:	e00d      	b.n	8013400 <__gethex+0x24a>
 80133e4:	9b05      	ldr	r3, [sp, #20]
 80133e6:	9a08      	ldr	r2, [sp, #32]
 80133e8:	4413      	add	r3, r2
 80133ea:	42bb      	cmp	r3, r7
 80133ec:	d3e1      	bcc.n	80133b2 <__gethex+0x1fc>
 80133ee:	4618      	mov	r0, r3
 80133f0:	9a01      	ldr	r2, [sp, #4]
 80133f2:	9903      	ldr	r1, [sp, #12]
 80133f4:	9309      	str	r3, [sp, #36]	; 0x24
 80133f6:	f001 fa7f 	bl	80148f8 <strncmp>
 80133fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d1d8      	bne.n	80133b2 <__gethex+0x1fc>
 8013400:	461e      	mov	r6, r3
 8013402:	e791      	b.n	8013328 <__gethex+0x172>
 8013404:	1eb9      	subs	r1, r7, #2
 8013406:	4628      	mov	r0, r5
 8013408:	f000 fdc0 	bl	8013f8c <__any_on>
 801340c:	2800      	cmp	r0, #0
 801340e:	d0b2      	beq.n	8013376 <__gethex+0x1c0>
 8013410:	f04f 0a03 	mov.w	sl, #3
 8013414:	e7b1      	b.n	801337a <__gethex+0x1c4>
 8013416:	da09      	bge.n	801342c <__gethex+0x276>
 8013418:	1bf7      	subs	r7, r6, r7
 801341a:	4629      	mov	r1, r5
 801341c:	463a      	mov	r2, r7
 801341e:	9802      	ldr	r0, [sp, #8]
 8013420:	f000 fbd6 	bl	8013bd0 <__lshift>
 8013424:	1be4      	subs	r4, r4, r7
 8013426:	4605      	mov	r5, r0
 8013428:	f100 0914 	add.w	r9, r0, #20
 801342c:	f04f 0a00 	mov.w	sl, #0
 8013430:	e7a8      	b.n	8013384 <__gethex+0x1ce>
 8013432:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013436:	42a0      	cmp	r0, r4
 8013438:	dd6a      	ble.n	8013510 <__gethex+0x35a>
 801343a:	1b04      	subs	r4, r0, r4
 801343c:	42a6      	cmp	r6, r4
 801343e:	dc2e      	bgt.n	801349e <__gethex+0x2e8>
 8013440:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013444:	2b02      	cmp	r3, #2
 8013446:	d022      	beq.n	801348e <__gethex+0x2d8>
 8013448:	2b03      	cmp	r3, #3
 801344a:	d024      	beq.n	8013496 <__gethex+0x2e0>
 801344c:	2b01      	cmp	r3, #1
 801344e:	d115      	bne.n	801347c <__gethex+0x2c6>
 8013450:	42a6      	cmp	r6, r4
 8013452:	d113      	bne.n	801347c <__gethex+0x2c6>
 8013454:	2e01      	cmp	r6, #1
 8013456:	dc0b      	bgt.n	8013470 <__gethex+0x2ba>
 8013458:	9a06      	ldr	r2, [sp, #24]
 801345a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801345e:	6013      	str	r3, [r2, #0]
 8013460:	2301      	movs	r3, #1
 8013462:	612b      	str	r3, [r5, #16]
 8013464:	f8c9 3000 	str.w	r3, [r9]
 8013468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801346a:	2762      	movs	r7, #98	; 0x62
 801346c:	601d      	str	r5, [r3, #0]
 801346e:	e72a      	b.n	80132c6 <__gethex+0x110>
 8013470:	1e71      	subs	r1, r6, #1
 8013472:	4628      	mov	r0, r5
 8013474:	f000 fd8a 	bl	8013f8c <__any_on>
 8013478:	2800      	cmp	r0, #0
 801347a:	d1ed      	bne.n	8013458 <__gethex+0x2a2>
 801347c:	4629      	mov	r1, r5
 801347e:	9802      	ldr	r0, [sp, #8]
 8013480:	f000 f9da 	bl	8013838 <_Bfree>
 8013484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013486:	2300      	movs	r3, #0
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	2750      	movs	r7, #80	; 0x50
 801348c:	e71b      	b.n	80132c6 <__gethex+0x110>
 801348e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013490:	2b00      	cmp	r3, #0
 8013492:	d0e1      	beq.n	8013458 <__gethex+0x2a2>
 8013494:	e7f2      	b.n	801347c <__gethex+0x2c6>
 8013496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1dd      	bne.n	8013458 <__gethex+0x2a2>
 801349c:	e7ee      	b.n	801347c <__gethex+0x2c6>
 801349e:	1e67      	subs	r7, r4, #1
 80134a0:	f1ba 0f00 	cmp.w	sl, #0
 80134a4:	d131      	bne.n	801350a <__gethex+0x354>
 80134a6:	b127      	cbz	r7, 80134b2 <__gethex+0x2fc>
 80134a8:	4639      	mov	r1, r7
 80134aa:	4628      	mov	r0, r5
 80134ac:	f000 fd6e 	bl	8013f8c <__any_on>
 80134b0:	4682      	mov	sl, r0
 80134b2:	117a      	asrs	r2, r7, #5
 80134b4:	2301      	movs	r3, #1
 80134b6:	f007 071f 	and.w	r7, r7, #31
 80134ba:	fa03 f707 	lsl.w	r7, r3, r7
 80134be:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80134c2:	4621      	mov	r1, r4
 80134c4:	421f      	tst	r7, r3
 80134c6:	4628      	mov	r0, r5
 80134c8:	bf18      	it	ne
 80134ca:	f04a 0a02 	orrne.w	sl, sl, #2
 80134ce:	1b36      	subs	r6, r6, r4
 80134d0:	f7ff fe22 	bl	8013118 <rshift>
 80134d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80134d8:	2702      	movs	r7, #2
 80134da:	f1ba 0f00 	cmp.w	sl, #0
 80134de:	d048      	beq.n	8013572 <__gethex+0x3bc>
 80134e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134e4:	2b02      	cmp	r3, #2
 80134e6:	d015      	beq.n	8013514 <__gethex+0x35e>
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	d017      	beq.n	801351c <__gethex+0x366>
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d109      	bne.n	8013504 <__gethex+0x34e>
 80134f0:	f01a 0f02 	tst.w	sl, #2
 80134f4:	d006      	beq.n	8013504 <__gethex+0x34e>
 80134f6:	f8d9 3000 	ldr.w	r3, [r9]
 80134fa:	ea4a 0a03 	orr.w	sl, sl, r3
 80134fe:	f01a 0f01 	tst.w	sl, #1
 8013502:	d10e      	bne.n	8013522 <__gethex+0x36c>
 8013504:	f047 0710 	orr.w	r7, r7, #16
 8013508:	e033      	b.n	8013572 <__gethex+0x3bc>
 801350a:	f04f 0a01 	mov.w	sl, #1
 801350e:	e7d0      	b.n	80134b2 <__gethex+0x2fc>
 8013510:	2701      	movs	r7, #1
 8013512:	e7e2      	b.n	80134da <__gethex+0x324>
 8013514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013516:	f1c3 0301 	rsb	r3, r3, #1
 801351a:	9315      	str	r3, [sp, #84]	; 0x54
 801351c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801351e:	2b00      	cmp	r3, #0
 8013520:	d0f0      	beq.n	8013504 <__gethex+0x34e>
 8013522:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013526:	f105 0314 	add.w	r3, r5, #20
 801352a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801352e:	eb03 010a 	add.w	r1, r3, sl
 8013532:	f04f 0c00 	mov.w	ip, #0
 8013536:	4618      	mov	r0, r3
 8013538:	f853 2b04 	ldr.w	r2, [r3], #4
 801353c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013540:	d01c      	beq.n	801357c <__gethex+0x3c6>
 8013542:	3201      	adds	r2, #1
 8013544:	6002      	str	r2, [r0, #0]
 8013546:	2f02      	cmp	r7, #2
 8013548:	f105 0314 	add.w	r3, r5, #20
 801354c:	d138      	bne.n	80135c0 <__gethex+0x40a>
 801354e:	f8d8 2000 	ldr.w	r2, [r8]
 8013552:	3a01      	subs	r2, #1
 8013554:	42b2      	cmp	r2, r6
 8013556:	d10a      	bne.n	801356e <__gethex+0x3b8>
 8013558:	1171      	asrs	r1, r6, #5
 801355a:	2201      	movs	r2, #1
 801355c:	f006 061f 	and.w	r6, r6, #31
 8013560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013564:	fa02 f606 	lsl.w	r6, r2, r6
 8013568:	421e      	tst	r6, r3
 801356a:	bf18      	it	ne
 801356c:	4617      	movne	r7, r2
 801356e:	f047 0720 	orr.w	r7, r7, #32
 8013572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013574:	601d      	str	r5, [r3, #0]
 8013576:	9b06      	ldr	r3, [sp, #24]
 8013578:	601c      	str	r4, [r3, #0]
 801357a:	e6a4      	b.n	80132c6 <__gethex+0x110>
 801357c:	4299      	cmp	r1, r3
 801357e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013582:	d8d8      	bhi.n	8013536 <__gethex+0x380>
 8013584:	68ab      	ldr	r3, [r5, #8]
 8013586:	4599      	cmp	r9, r3
 8013588:	db12      	blt.n	80135b0 <__gethex+0x3fa>
 801358a:	6869      	ldr	r1, [r5, #4]
 801358c:	9802      	ldr	r0, [sp, #8]
 801358e:	3101      	adds	r1, #1
 8013590:	f000 f91e 	bl	80137d0 <_Balloc>
 8013594:	692a      	ldr	r2, [r5, #16]
 8013596:	3202      	adds	r2, #2
 8013598:	f105 010c 	add.w	r1, r5, #12
 801359c:	4683      	mov	fp, r0
 801359e:	0092      	lsls	r2, r2, #2
 80135a0:	300c      	adds	r0, #12
 80135a2:	f7fd f90d 	bl	80107c0 <memcpy>
 80135a6:	4629      	mov	r1, r5
 80135a8:	9802      	ldr	r0, [sp, #8]
 80135aa:	f000 f945 	bl	8013838 <_Bfree>
 80135ae:	465d      	mov	r5, fp
 80135b0:	692b      	ldr	r3, [r5, #16]
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80135b8:	612a      	str	r2, [r5, #16]
 80135ba:	2201      	movs	r2, #1
 80135bc:	615a      	str	r2, [r3, #20]
 80135be:	e7c2      	b.n	8013546 <__gethex+0x390>
 80135c0:	692a      	ldr	r2, [r5, #16]
 80135c2:	454a      	cmp	r2, r9
 80135c4:	dd0b      	ble.n	80135de <__gethex+0x428>
 80135c6:	2101      	movs	r1, #1
 80135c8:	4628      	mov	r0, r5
 80135ca:	f7ff fda5 	bl	8013118 <rshift>
 80135ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135d2:	3401      	adds	r4, #1
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	f6ff aed9 	blt.w	801338c <__gethex+0x1d6>
 80135da:	2701      	movs	r7, #1
 80135dc:	e7c7      	b.n	801356e <__gethex+0x3b8>
 80135de:	f016 061f 	ands.w	r6, r6, #31
 80135e2:	d0fa      	beq.n	80135da <__gethex+0x424>
 80135e4:	449a      	add	sl, r3
 80135e6:	f1c6 0620 	rsb	r6, r6, #32
 80135ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80135ee:	f000 f9b3 	bl	8013958 <__hi0bits>
 80135f2:	42b0      	cmp	r0, r6
 80135f4:	dbe7      	blt.n	80135c6 <__gethex+0x410>
 80135f6:	e7f0      	b.n	80135da <__gethex+0x424>

080135f8 <L_shift>:
 80135f8:	f1c2 0208 	rsb	r2, r2, #8
 80135fc:	0092      	lsls	r2, r2, #2
 80135fe:	b570      	push	{r4, r5, r6, lr}
 8013600:	f1c2 0620 	rsb	r6, r2, #32
 8013604:	6843      	ldr	r3, [r0, #4]
 8013606:	6804      	ldr	r4, [r0, #0]
 8013608:	fa03 f506 	lsl.w	r5, r3, r6
 801360c:	432c      	orrs	r4, r5
 801360e:	40d3      	lsrs	r3, r2
 8013610:	6004      	str	r4, [r0, #0]
 8013612:	f840 3f04 	str.w	r3, [r0, #4]!
 8013616:	4288      	cmp	r0, r1
 8013618:	d3f4      	bcc.n	8013604 <L_shift+0xc>
 801361a:	bd70      	pop	{r4, r5, r6, pc}

0801361c <__match>:
 801361c:	b530      	push	{r4, r5, lr}
 801361e:	6803      	ldr	r3, [r0, #0]
 8013620:	3301      	adds	r3, #1
 8013622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013626:	b914      	cbnz	r4, 801362e <__match+0x12>
 8013628:	6003      	str	r3, [r0, #0]
 801362a:	2001      	movs	r0, #1
 801362c:	bd30      	pop	{r4, r5, pc}
 801362e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013632:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013636:	2d19      	cmp	r5, #25
 8013638:	bf98      	it	ls
 801363a:	3220      	addls	r2, #32
 801363c:	42a2      	cmp	r2, r4
 801363e:	d0f0      	beq.n	8013622 <__match+0x6>
 8013640:	2000      	movs	r0, #0
 8013642:	e7f3      	b.n	801362c <__match+0x10>

08013644 <__hexnan>:
 8013644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013648:	680b      	ldr	r3, [r1, #0]
 801364a:	6801      	ldr	r1, [r0, #0]
 801364c:	115f      	asrs	r7, r3, #5
 801364e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013652:	f013 031f 	ands.w	r3, r3, #31
 8013656:	b087      	sub	sp, #28
 8013658:	bf18      	it	ne
 801365a:	3704      	addne	r7, #4
 801365c:	2500      	movs	r5, #0
 801365e:	1f3e      	subs	r6, r7, #4
 8013660:	4682      	mov	sl, r0
 8013662:	4690      	mov	r8, r2
 8013664:	9301      	str	r3, [sp, #4]
 8013666:	f847 5c04 	str.w	r5, [r7, #-4]
 801366a:	46b1      	mov	r9, r6
 801366c:	4634      	mov	r4, r6
 801366e:	9502      	str	r5, [sp, #8]
 8013670:	46ab      	mov	fp, r5
 8013672:	784a      	ldrb	r2, [r1, #1]
 8013674:	1c4b      	adds	r3, r1, #1
 8013676:	9303      	str	r3, [sp, #12]
 8013678:	b342      	cbz	r2, 80136cc <__hexnan+0x88>
 801367a:	4610      	mov	r0, r2
 801367c:	9105      	str	r1, [sp, #20]
 801367e:	9204      	str	r2, [sp, #16]
 8013680:	f7ff fd84 	bl	801318c <__hexdig_fun>
 8013684:	2800      	cmp	r0, #0
 8013686:	d143      	bne.n	8013710 <__hexnan+0xcc>
 8013688:	9a04      	ldr	r2, [sp, #16]
 801368a:	9905      	ldr	r1, [sp, #20]
 801368c:	2a20      	cmp	r2, #32
 801368e:	d818      	bhi.n	80136c2 <__hexnan+0x7e>
 8013690:	9b02      	ldr	r3, [sp, #8]
 8013692:	459b      	cmp	fp, r3
 8013694:	dd13      	ble.n	80136be <__hexnan+0x7a>
 8013696:	454c      	cmp	r4, r9
 8013698:	d206      	bcs.n	80136a8 <__hexnan+0x64>
 801369a:	2d07      	cmp	r5, #7
 801369c:	dc04      	bgt.n	80136a8 <__hexnan+0x64>
 801369e:	462a      	mov	r2, r5
 80136a0:	4649      	mov	r1, r9
 80136a2:	4620      	mov	r0, r4
 80136a4:	f7ff ffa8 	bl	80135f8 <L_shift>
 80136a8:	4544      	cmp	r4, r8
 80136aa:	d944      	bls.n	8013736 <__hexnan+0xf2>
 80136ac:	2300      	movs	r3, #0
 80136ae:	f1a4 0904 	sub.w	r9, r4, #4
 80136b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80136b6:	f8cd b008 	str.w	fp, [sp, #8]
 80136ba:	464c      	mov	r4, r9
 80136bc:	461d      	mov	r5, r3
 80136be:	9903      	ldr	r1, [sp, #12]
 80136c0:	e7d7      	b.n	8013672 <__hexnan+0x2e>
 80136c2:	2a29      	cmp	r2, #41	; 0x29
 80136c4:	d14a      	bne.n	801375c <__hexnan+0x118>
 80136c6:	3102      	adds	r1, #2
 80136c8:	f8ca 1000 	str.w	r1, [sl]
 80136cc:	f1bb 0f00 	cmp.w	fp, #0
 80136d0:	d044      	beq.n	801375c <__hexnan+0x118>
 80136d2:	454c      	cmp	r4, r9
 80136d4:	d206      	bcs.n	80136e4 <__hexnan+0xa0>
 80136d6:	2d07      	cmp	r5, #7
 80136d8:	dc04      	bgt.n	80136e4 <__hexnan+0xa0>
 80136da:	462a      	mov	r2, r5
 80136dc:	4649      	mov	r1, r9
 80136de:	4620      	mov	r0, r4
 80136e0:	f7ff ff8a 	bl	80135f8 <L_shift>
 80136e4:	4544      	cmp	r4, r8
 80136e6:	d928      	bls.n	801373a <__hexnan+0xf6>
 80136e8:	4643      	mov	r3, r8
 80136ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80136ee:	f843 2b04 	str.w	r2, [r3], #4
 80136f2:	42a6      	cmp	r6, r4
 80136f4:	d2f9      	bcs.n	80136ea <__hexnan+0xa6>
 80136f6:	2200      	movs	r2, #0
 80136f8:	f843 2b04 	str.w	r2, [r3], #4
 80136fc:	429e      	cmp	r6, r3
 80136fe:	d2fb      	bcs.n	80136f8 <__hexnan+0xb4>
 8013700:	6833      	ldr	r3, [r6, #0]
 8013702:	b91b      	cbnz	r3, 801370c <__hexnan+0xc8>
 8013704:	4546      	cmp	r6, r8
 8013706:	d127      	bne.n	8013758 <__hexnan+0x114>
 8013708:	2301      	movs	r3, #1
 801370a:	6033      	str	r3, [r6, #0]
 801370c:	2005      	movs	r0, #5
 801370e:	e026      	b.n	801375e <__hexnan+0x11a>
 8013710:	3501      	adds	r5, #1
 8013712:	2d08      	cmp	r5, #8
 8013714:	f10b 0b01 	add.w	fp, fp, #1
 8013718:	dd06      	ble.n	8013728 <__hexnan+0xe4>
 801371a:	4544      	cmp	r4, r8
 801371c:	d9cf      	bls.n	80136be <__hexnan+0x7a>
 801371e:	2300      	movs	r3, #0
 8013720:	f844 3c04 	str.w	r3, [r4, #-4]
 8013724:	2501      	movs	r5, #1
 8013726:	3c04      	subs	r4, #4
 8013728:	6822      	ldr	r2, [r4, #0]
 801372a:	f000 000f 	and.w	r0, r0, #15
 801372e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013732:	6020      	str	r0, [r4, #0]
 8013734:	e7c3      	b.n	80136be <__hexnan+0x7a>
 8013736:	2508      	movs	r5, #8
 8013738:	e7c1      	b.n	80136be <__hexnan+0x7a>
 801373a:	9b01      	ldr	r3, [sp, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d0df      	beq.n	8013700 <__hexnan+0xbc>
 8013740:	f04f 32ff 	mov.w	r2, #4294967295
 8013744:	f1c3 0320 	rsb	r3, r3, #32
 8013748:	fa22 f303 	lsr.w	r3, r2, r3
 801374c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013750:	401a      	ands	r2, r3
 8013752:	f847 2c04 	str.w	r2, [r7, #-4]
 8013756:	e7d3      	b.n	8013700 <__hexnan+0xbc>
 8013758:	3e04      	subs	r6, #4
 801375a:	e7d1      	b.n	8013700 <__hexnan+0xbc>
 801375c:	2004      	movs	r0, #4
 801375e:	b007      	add	sp, #28
 8013760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013764 <__locale_ctype_ptr_l>:
 8013764:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013768:	4770      	bx	lr
	...

0801376c <__locale_ctype_ptr>:
 801376c:	4b04      	ldr	r3, [pc, #16]	; (8013780 <__locale_ctype_ptr+0x14>)
 801376e:	4a05      	ldr	r2, [pc, #20]	; (8013784 <__locale_ctype_ptr+0x18>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	2b00      	cmp	r3, #0
 8013776:	bf08      	it	eq
 8013778:	4613      	moveq	r3, r2
 801377a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801377e:	4770      	bx	lr
 8013780:	20000e34 	.word	0x20000e34
 8013784:	20000e98 	.word	0x20000e98

08013788 <__localeconv_l>:
 8013788:	30f0      	adds	r0, #240	; 0xf0
 801378a:	4770      	bx	lr

0801378c <_localeconv_r>:
 801378c:	4b04      	ldr	r3, [pc, #16]	; (80137a0 <_localeconv_r+0x14>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	6a18      	ldr	r0, [r3, #32]
 8013792:	4b04      	ldr	r3, [pc, #16]	; (80137a4 <_localeconv_r+0x18>)
 8013794:	2800      	cmp	r0, #0
 8013796:	bf08      	it	eq
 8013798:	4618      	moveq	r0, r3
 801379a:	30f0      	adds	r0, #240	; 0xf0
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	20000e34 	.word	0x20000e34
 80137a4:	20000e98 	.word	0x20000e98

080137a8 <__ascii_mbtowc>:
 80137a8:	b082      	sub	sp, #8
 80137aa:	b901      	cbnz	r1, 80137ae <__ascii_mbtowc+0x6>
 80137ac:	a901      	add	r1, sp, #4
 80137ae:	b142      	cbz	r2, 80137c2 <__ascii_mbtowc+0x1a>
 80137b0:	b14b      	cbz	r3, 80137c6 <__ascii_mbtowc+0x1e>
 80137b2:	7813      	ldrb	r3, [r2, #0]
 80137b4:	600b      	str	r3, [r1, #0]
 80137b6:	7812      	ldrb	r2, [r2, #0]
 80137b8:	1c10      	adds	r0, r2, #0
 80137ba:	bf18      	it	ne
 80137bc:	2001      	movne	r0, #1
 80137be:	b002      	add	sp, #8
 80137c0:	4770      	bx	lr
 80137c2:	4610      	mov	r0, r2
 80137c4:	e7fb      	b.n	80137be <__ascii_mbtowc+0x16>
 80137c6:	f06f 0001 	mvn.w	r0, #1
 80137ca:	e7f8      	b.n	80137be <__ascii_mbtowc+0x16>

080137cc <__malloc_lock>:
 80137cc:	4770      	bx	lr

080137ce <__malloc_unlock>:
 80137ce:	4770      	bx	lr

080137d0 <_Balloc>:
 80137d0:	b570      	push	{r4, r5, r6, lr}
 80137d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137d4:	4604      	mov	r4, r0
 80137d6:	460e      	mov	r6, r1
 80137d8:	b93d      	cbnz	r5, 80137ea <_Balloc+0x1a>
 80137da:	2010      	movs	r0, #16
 80137dc:	f7fc ffe0 	bl	80107a0 <malloc>
 80137e0:	6260      	str	r0, [r4, #36]	; 0x24
 80137e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80137e6:	6005      	str	r5, [r0, #0]
 80137e8:	60c5      	str	r5, [r0, #12]
 80137ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80137ec:	68eb      	ldr	r3, [r5, #12]
 80137ee:	b183      	cbz	r3, 8013812 <_Balloc+0x42>
 80137f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80137f8:	b9b8      	cbnz	r0, 801382a <_Balloc+0x5a>
 80137fa:	2101      	movs	r1, #1
 80137fc:	fa01 f506 	lsl.w	r5, r1, r6
 8013800:	1d6a      	adds	r2, r5, #5
 8013802:	0092      	lsls	r2, r2, #2
 8013804:	4620      	mov	r0, r4
 8013806:	f000 fbe2 	bl	8013fce <_calloc_r>
 801380a:	b160      	cbz	r0, 8013826 <_Balloc+0x56>
 801380c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013810:	e00e      	b.n	8013830 <_Balloc+0x60>
 8013812:	2221      	movs	r2, #33	; 0x21
 8013814:	2104      	movs	r1, #4
 8013816:	4620      	mov	r0, r4
 8013818:	f000 fbd9 	bl	8013fce <_calloc_r>
 801381c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801381e:	60e8      	str	r0, [r5, #12]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d1e4      	bne.n	80137f0 <_Balloc+0x20>
 8013826:	2000      	movs	r0, #0
 8013828:	bd70      	pop	{r4, r5, r6, pc}
 801382a:	6802      	ldr	r2, [r0, #0]
 801382c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013830:	2300      	movs	r3, #0
 8013832:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013836:	e7f7      	b.n	8013828 <_Balloc+0x58>

08013838 <_Bfree>:
 8013838:	b570      	push	{r4, r5, r6, lr}
 801383a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801383c:	4606      	mov	r6, r0
 801383e:	460d      	mov	r5, r1
 8013840:	b93c      	cbnz	r4, 8013852 <_Bfree+0x1a>
 8013842:	2010      	movs	r0, #16
 8013844:	f7fc ffac 	bl	80107a0 <malloc>
 8013848:	6270      	str	r0, [r6, #36]	; 0x24
 801384a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801384e:	6004      	str	r4, [r0, #0]
 8013850:	60c4      	str	r4, [r0, #12]
 8013852:	b13d      	cbz	r5, 8013864 <_Bfree+0x2c>
 8013854:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013856:	686a      	ldr	r2, [r5, #4]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801385e:	6029      	str	r1, [r5, #0]
 8013860:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013864:	bd70      	pop	{r4, r5, r6, pc}

08013866 <__multadd>:
 8013866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801386a:	690d      	ldr	r5, [r1, #16]
 801386c:	461f      	mov	r7, r3
 801386e:	4606      	mov	r6, r0
 8013870:	460c      	mov	r4, r1
 8013872:	f101 0c14 	add.w	ip, r1, #20
 8013876:	2300      	movs	r3, #0
 8013878:	f8dc 0000 	ldr.w	r0, [ip]
 801387c:	b281      	uxth	r1, r0
 801387e:	fb02 7101 	mla	r1, r2, r1, r7
 8013882:	0c0f      	lsrs	r7, r1, #16
 8013884:	0c00      	lsrs	r0, r0, #16
 8013886:	fb02 7000 	mla	r0, r2, r0, r7
 801388a:	b289      	uxth	r1, r1
 801388c:	3301      	adds	r3, #1
 801388e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013892:	429d      	cmp	r5, r3
 8013894:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013898:	f84c 1b04 	str.w	r1, [ip], #4
 801389c:	dcec      	bgt.n	8013878 <__multadd+0x12>
 801389e:	b1d7      	cbz	r7, 80138d6 <__multadd+0x70>
 80138a0:	68a3      	ldr	r3, [r4, #8]
 80138a2:	42ab      	cmp	r3, r5
 80138a4:	dc12      	bgt.n	80138cc <__multadd+0x66>
 80138a6:	6861      	ldr	r1, [r4, #4]
 80138a8:	4630      	mov	r0, r6
 80138aa:	3101      	adds	r1, #1
 80138ac:	f7ff ff90 	bl	80137d0 <_Balloc>
 80138b0:	6922      	ldr	r2, [r4, #16]
 80138b2:	3202      	adds	r2, #2
 80138b4:	f104 010c 	add.w	r1, r4, #12
 80138b8:	4680      	mov	r8, r0
 80138ba:	0092      	lsls	r2, r2, #2
 80138bc:	300c      	adds	r0, #12
 80138be:	f7fc ff7f 	bl	80107c0 <memcpy>
 80138c2:	4621      	mov	r1, r4
 80138c4:	4630      	mov	r0, r6
 80138c6:	f7ff ffb7 	bl	8013838 <_Bfree>
 80138ca:	4644      	mov	r4, r8
 80138cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138d0:	3501      	adds	r5, #1
 80138d2:	615f      	str	r7, [r3, #20]
 80138d4:	6125      	str	r5, [r4, #16]
 80138d6:	4620      	mov	r0, r4
 80138d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138dc <__s2b>:
 80138dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e0:	460c      	mov	r4, r1
 80138e2:	4615      	mov	r5, r2
 80138e4:	461f      	mov	r7, r3
 80138e6:	2209      	movs	r2, #9
 80138e8:	3308      	adds	r3, #8
 80138ea:	4606      	mov	r6, r0
 80138ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80138f0:	2100      	movs	r1, #0
 80138f2:	2201      	movs	r2, #1
 80138f4:	429a      	cmp	r2, r3
 80138f6:	db20      	blt.n	801393a <__s2b+0x5e>
 80138f8:	4630      	mov	r0, r6
 80138fa:	f7ff ff69 	bl	80137d0 <_Balloc>
 80138fe:	9b08      	ldr	r3, [sp, #32]
 8013900:	6143      	str	r3, [r0, #20]
 8013902:	2d09      	cmp	r5, #9
 8013904:	f04f 0301 	mov.w	r3, #1
 8013908:	6103      	str	r3, [r0, #16]
 801390a:	dd19      	ble.n	8013940 <__s2b+0x64>
 801390c:	f104 0809 	add.w	r8, r4, #9
 8013910:	46c1      	mov	r9, r8
 8013912:	442c      	add	r4, r5
 8013914:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013918:	4601      	mov	r1, r0
 801391a:	3b30      	subs	r3, #48	; 0x30
 801391c:	220a      	movs	r2, #10
 801391e:	4630      	mov	r0, r6
 8013920:	f7ff ffa1 	bl	8013866 <__multadd>
 8013924:	45a1      	cmp	r9, r4
 8013926:	d1f5      	bne.n	8013914 <__s2b+0x38>
 8013928:	eb08 0405 	add.w	r4, r8, r5
 801392c:	3c08      	subs	r4, #8
 801392e:	1b2d      	subs	r5, r5, r4
 8013930:	1963      	adds	r3, r4, r5
 8013932:	42bb      	cmp	r3, r7
 8013934:	db07      	blt.n	8013946 <__s2b+0x6a>
 8013936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801393a:	0052      	lsls	r2, r2, #1
 801393c:	3101      	adds	r1, #1
 801393e:	e7d9      	b.n	80138f4 <__s2b+0x18>
 8013940:	340a      	adds	r4, #10
 8013942:	2509      	movs	r5, #9
 8013944:	e7f3      	b.n	801392e <__s2b+0x52>
 8013946:	f814 3b01 	ldrb.w	r3, [r4], #1
 801394a:	4601      	mov	r1, r0
 801394c:	3b30      	subs	r3, #48	; 0x30
 801394e:	220a      	movs	r2, #10
 8013950:	4630      	mov	r0, r6
 8013952:	f7ff ff88 	bl	8013866 <__multadd>
 8013956:	e7eb      	b.n	8013930 <__s2b+0x54>

08013958 <__hi0bits>:
 8013958:	0c02      	lsrs	r2, r0, #16
 801395a:	0412      	lsls	r2, r2, #16
 801395c:	4603      	mov	r3, r0
 801395e:	b9b2      	cbnz	r2, 801398e <__hi0bits+0x36>
 8013960:	0403      	lsls	r3, r0, #16
 8013962:	2010      	movs	r0, #16
 8013964:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013968:	bf04      	itt	eq
 801396a:	021b      	lsleq	r3, r3, #8
 801396c:	3008      	addeq	r0, #8
 801396e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013972:	bf04      	itt	eq
 8013974:	011b      	lsleq	r3, r3, #4
 8013976:	3004      	addeq	r0, #4
 8013978:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801397c:	bf04      	itt	eq
 801397e:	009b      	lsleq	r3, r3, #2
 8013980:	3002      	addeq	r0, #2
 8013982:	2b00      	cmp	r3, #0
 8013984:	db06      	blt.n	8013994 <__hi0bits+0x3c>
 8013986:	005b      	lsls	r3, r3, #1
 8013988:	d503      	bpl.n	8013992 <__hi0bits+0x3a>
 801398a:	3001      	adds	r0, #1
 801398c:	4770      	bx	lr
 801398e:	2000      	movs	r0, #0
 8013990:	e7e8      	b.n	8013964 <__hi0bits+0xc>
 8013992:	2020      	movs	r0, #32
 8013994:	4770      	bx	lr

08013996 <__lo0bits>:
 8013996:	6803      	ldr	r3, [r0, #0]
 8013998:	f013 0207 	ands.w	r2, r3, #7
 801399c:	4601      	mov	r1, r0
 801399e:	d00b      	beq.n	80139b8 <__lo0bits+0x22>
 80139a0:	07da      	lsls	r2, r3, #31
 80139a2:	d423      	bmi.n	80139ec <__lo0bits+0x56>
 80139a4:	0798      	lsls	r0, r3, #30
 80139a6:	bf49      	itett	mi
 80139a8:	085b      	lsrmi	r3, r3, #1
 80139aa:	089b      	lsrpl	r3, r3, #2
 80139ac:	2001      	movmi	r0, #1
 80139ae:	600b      	strmi	r3, [r1, #0]
 80139b0:	bf5c      	itt	pl
 80139b2:	600b      	strpl	r3, [r1, #0]
 80139b4:	2002      	movpl	r0, #2
 80139b6:	4770      	bx	lr
 80139b8:	b298      	uxth	r0, r3
 80139ba:	b9a8      	cbnz	r0, 80139e8 <__lo0bits+0x52>
 80139bc:	0c1b      	lsrs	r3, r3, #16
 80139be:	2010      	movs	r0, #16
 80139c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80139c4:	bf04      	itt	eq
 80139c6:	0a1b      	lsreq	r3, r3, #8
 80139c8:	3008      	addeq	r0, #8
 80139ca:	071a      	lsls	r2, r3, #28
 80139cc:	bf04      	itt	eq
 80139ce:	091b      	lsreq	r3, r3, #4
 80139d0:	3004      	addeq	r0, #4
 80139d2:	079a      	lsls	r2, r3, #30
 80139d4:	bf04      	itt	eq
 80139d6:	089b      	lsreq	r3, r3, #2
 80139d8:	3002      	addeq	r0, #2
 80139da:	07da      	lsls	r2, r3, #31
 80139dc:	d402      	bmi.n	80139e4 <__lo0bits+0x4e>
 80139de:	085b      	lsrs	r3, r3, #1
 80139e0:	d006      	beq.n	80139f0 <__lo0bits+0x5a>
 80139e2:	3001      	adds	r0, #1
 80139e4:	600b      	str	r3, [r1, #0]
 80139e6:	4770      	bx	lr
 80139e8:	4610      	mov	r0, r2
 80139ea:	e7e9      	b.n	80139c0 <__lo0bits+0x2a>
 80139ec:	2000      	movs	r0, #0
 80139ee:	4770      	bx	lr
 80139f0:	2020      	movs	r0, #32
 80139f2:	4770      	bx	lr

080139f4 <__i2b>:
 80139f4:	b510      	push	{r4, lr}
 80139f6:	460c      	mov	r4, r1
 80139f8:	2101      	movs	r1, #1
 80139fa:	f7ff fee9 	bl	80137d0 <_Balloc>
 80139fe:	2201      	movs	r2, #1
 8013a00:	6144      	str	r4, [r0, #20]
 8013a02:	6102      	str	r2, [r0, #16]
 8013a04:	bd10      	pop	{r4, pc}

08013a06 <__multiply>:
 8013a06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0a:	4614      	mov	r4, r2
 8013a0c:	690a      	ldr	r2, [r1, #16]
 8013a0e:	6923      	ldr	r3, [r4, #16]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	bfb8      	it	lt
 8013a14:	460b      	movlt	r3, r1
 8013a16:	4688      	mov	r8, r1
 8013a18:	bfbc      	itt	lt
 8013a1a:	46a0      	movlt	r8, r4
 8013a1c:	461c      	movlt	r4, r3
 8013a1e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013a22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013a26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013a2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013a2e:	eb07 0609 	add.w	r6, r7, r9
 8013a32:	42b3      	cmp	r3, r6
 8013a34:	bfb8      	it	lt
 8013a36:	3101      	addlt	r1, #1
 8013a38:	f7ff feca 	bl	80137d0 <_Balloc>
 8013a3c:	f100 0514 	add.w	r5, r0, #20
 8013a40:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013a44:	462b      	mov	r3, r5
 8013a46:	2200      	movs	r2, #0
 8013a48:	4573      	cmp	r3, lr
 8013a4a:	d316      	bcc.n	8013a7a <__multiply+0x74>
 8013a4c:	f104 0214 	add.w	r2, r4, #20
 8013a50:	f108 0114 	add.w	r1, r8, #20
 8013a54:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013a58:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	9b00      	ldr	r3, [sp, #0]
 8013a60:	9201      	str	r2, [sp, #4]
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d80c      	bhi.n	8013a80 <__multiply+0x7a>
 8013a66:	2e00      	cmp	r6, #0
 8013a68:	dd03      	ble.n	8013a72 <__multiply+0x6c>
 8013a6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d05d      	beq.n	8013b2e <__multiply+0x128>
 8013a72:	6106      	str	r6, [r0, #16]
 8013a74:	b003      	add	sp, #12
 8013a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a7a:	f843 2b04 	str.w	r2, [r3], #4
 8013a7e:	e7e3      	b.n	8013a48 <__multiply+0x42>
 8013a80:	f8b2 b000 	ldrh.w	fp, [r2]
 8013a84:	f1bb 0f00 	cmp.w	fp, #0
 8013a88:	d023      	beq.n	8013ad2 <__multiply+0xcc>
 8013a8a:	4689      	mov	r9, r1
 8013a8c:	46ac      	mov	ip, r5
 8013a8e:	f04f 0800 	mov.w	r8, #0
 8013a92:	f859 4b04 	ldr.w	r4, [r9], #4
 8013a96:	f8dc a000 	ldr.w	sl, [ip]
 8013a9a:	b2a3      	uxth	r3, r4
 8013a9c:	fa1f fa8a 	uxth.w	sl, sl
 8013aa0:	fb0b a303 	mla	r3, fp, r3, sl
 8013aa4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013aa8:	f8dc 4000 	ldr.w	r4, [ip]
 8013aac:	4443      	add	r3, r8
 8013aae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013ab2:	fb0b 840a 	mla	r4, fp, sl, r8
 8013ab6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013aba:	46e2      	mov	sl, ip
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013ac2:	454f      	cmp	r7, r9
 8013ac4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013ac8:	f84a 3b04 	str.w	r3, [sl], #4
 8013acc:	d82b      	bhi.n	8013b26 <__multiply+0x120>
 8013ace:	f8cc 8004 	str.w	r8, [ip, #4]
 8013ad2:	9b01      	ldr	r3, [sp, #4]
 8013ad4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013ad8:	3204      	adds	r2, #4
 8013ada:	f1ba 0f00 	cmp.w	sl, #0
 8013ade:	d020      	beq.n	8013b22 <__multiply+0x11c>
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	4689      	mov	r9, r1
 8013ae4:	46a8      	mov	r8, r5
 8013ae6:	f04f 0b00 	mov.w	fp, #0
 8013aea:	f8b9 c000 	ldrh.w	ip, [r9]
 8013aee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013af2:	fb0a 440c 	mla	r4, sl, ip, r4
 8013af6:	445c      	add	r4, fp
 8013af8:	46c4      	mov	ip, r8
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013b00:	f84c 3b04 	str.w	r3, [ip], #4
 8013b04:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b08:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013b0c:	0c1b      	lsrs	r3, r3, #16
 8013b0e:	fb0a b303 	mla	r3, sl, r3, fp
 8013b12:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013b16:	454f      	cmp	r7, r9
 8013b18:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013b1c:	d805      	bhi.n	8013b2a <__multiply+0x124>
 8013b1e:	f8c8 3004 	str.w	r3, [r8, #4]
 8013b22:	3504      	adds	r5, #4
 8013b24:	e79b      	b.n	8013a5e <__multiply+0x58>
 8013b26:	46d4      	mov	ip, sl
 8013b28:	e7b3      	b.n	8013a92 <__multiply+0x8c>
 8013b2a:	46e0      	mov	r8, ip
 8013b2c:	e7dd      	b.n	8013aea <__multiply+0xe4>
 8013b2e:	3e01      	subs	r6, #1
 8013b30:	e799      	b.n	8013a66 <__multiply+0x60>
	...

08013b34 <__pow5mult>:
 8013b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b38:	4615      	mov	r5, r2
 8013b3a:	f012 0203 	ands.w	r2, r2, #3
 8013b3e:	4606      	mov	r6, r0
 8013b40:	460f      	mov	r7, r1
 8013b42:	d007      	beq.n	8013b54 <__pow5mult+0x20>
 8013b44:	3a01      	subs	r2, #1
 8013b46:	4c21      	ldr	r4, [pc, #132]	; (8013bcc <__pow5mult+0x98>)
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b4e:	f7ff fe8a 	bl	8013866 <__multadd>
 8013b52:	4607      	mov	r7, r0
 8013b54:	10ad      	asrs	r5, r5, #2
 8013b56:	d035      	beq.n	8013bc4 <__pow5mult+0x90>
 8013b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013b5a:	b93c      	cbnz	r4, 8013b6c <__pow5mult+0x38>
 8013b5c:	2010      	movs	r0, #16
 8013b5e:	f7fc fe1f 	bl	80107a0 <malloc>
 8013b62:	6270      	str	r0, [r6, #36]	; 0x24
 8013b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b68:	6004      	str	r4, [r0, #0]
 8013b6a:	60c4      	str	r4, [r0, #12]
 8013b6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b74:	b94c      	cbnz	r4, 8013b8a <__pow5mult+0x56>
 8013b76:	f240 2171 	movw	r1, #625	; 0x271
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f7ff ff3a 	bl	80139f4 <__i2b>
 8013b80:	2300      	movs	r3, #0
 8013b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b86:	4604      	mov	r4, r0
 8013b88:	6003      	str	r3, [r0, #0]
 8013b8a:	f04f 0800 	mov.w	r8, #0
 8013b8e:	07eb      	lsls	r3, r5, #31
 8013b90:	d50a      	bpl.n	8013ba8 <__pow5mult+0x74>
 8013b92:	4639      	mov	r1, r7
 8013b94:	4622      	mov	r2, r4
 8013b96:	4630      	mov	r0, r6
 8013b98:	f7ff ff35 	bl	8013a06 <__multiply>
 8013b9c:	4639      	mov	r1, r7
 8013b9e:	4681      	mov	r9, r0
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f7ff fe49 	bl	8013838 <_Bfree>
 8013ba6:	464f      	mov	r7, r9
 8013ba8:	106d      	asrs	r5, r5, #1
 8013baa:	d00b      	beq.n	8013bc4 <__pow5mult+0x90>
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	b938      	cbnz	r0, 8013bc0 <__pow5mult+0x8c>
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f7ff ff26 	bl	8013a06 <__multiply>
 8013bba:	6020      	str	r0, [r4, #0]
 8013bbc:	f8c0 8000 	str.w	r8, [r0]
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	e7e4      	b.n	8013b8e <__pow5mult+0x5a>
 8013bc4:	4638      	mov	r0, r7
 8013bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bca:	bf00      	nop
 8013bcc:	08016108 	.word	0x08016108

08013bd0 <__lshift>:
 8013bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd4:	460c      	mov	r4, r1
 8013bd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bda:	6923      	ldr	r3, [r4, #16]
 8013bdc:	6849      	ldr	r1, [r1, #4]
 8013bde:	eb0a 0903 	add.w	r9, sl, r3
 8013be2:	68a3      	ldr	r3, [r4, #8]
 8013be4:	4607      	mov	r7, r0
 8013be6:	4616      	mov	r6, r2
 8013be8:	f109 0501 	add.w	r5, r9, #1
 8013bec:	42ab      	cmp	r3, r5
 8013bee:	db32      	blt.n	8013c56 <__lshift+0x86>
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	f7ff fded 	bl	80137d0 <_Balloc>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	4680      	mov	r8, r0
 8013bfa:	f100 0114 	add.w	r1, r0, #20
 8013bfe:	461a      	mov	r2, r3
 8013c00:	4553      	cmp	r3, sl
 8013c02:	db2b      	blt.n	8013c5c <__lshift+0x8c>
 8013c04:	6920      	ldr	r0, [r4, #16]
 8013c06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c0a:	f104 0314 	add.w	r3, r4, #20
 8013c0e:	f016 021f 	ands.w	r2, r6, #31
 8013c12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c1a:	d025      	beq.n	8013c68 <__lshift+0x98>
 8013c1c:	f1c2 0e20 	rsb	lr, r2, #32
 8013c20:	2000      	movs	r0, #0
 8013c22:	681e      	ldr	r6, [r3, #0]
 8013c24:	468a      	mov	sl, r1
 8013c26:	4096      	lsls	r6, r2
 8013c28:	4330      	orrs	r0, r6
 8013c2a:	f84a 0b04 	str.w	r0, [sl], #4
 8013c2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013c32:	459c      	cmp	ip, r3
 8013c34:	fa20 f00e 	lsr.w	r0, r0, lr
 8013c38:	d814      	bhi.n	8013c64 <__lshift+0x94>
 8013c3a:	6048      	str	r0, [r1, #4]
 8013c3c:	b108      	cbz	r0, 8013c42 <__lshift+0x72>
 8013c3e:	f109 0502 	add.w	r5, r9, #2
 8013c42:	3d01      	subs	r5, #1
 8013c44:	4638      	mov	r0, r7
 8013c46:	f8c8 5010 	str.w	r5, [r8, #16]
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	f7ff fdf4 	bl	8013838 <_Bfree>
 8013c50:	4640      	mov	r0, r8
 8013c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c56:	3101      	adds	r1, #1
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	e7c7      	b.n	8013bec <__lshift+0x1c>
 8013c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013c60:	3301      	adds	r3, #1
 8013c62:	e7cd      	b.n	8013c00 <__lshift+0x30>
 8013c64:	4651      	mov	r1, sl
 8013c66:	e7dc      	b.n	8013c22 <__lshift+0x52>
 8013c68:	3904      	subs	r1, #4
 8013c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c72:	459c      	cmp	ip, r3
 8013c74:	d8f9      	bhi.n	8013c6a <__lshift+0x9a>
 8013c76:	e7e4      	b.n	8013c42 <__lshift+0x72>

08013c78 <__mcmp>:
 8013c78:	6903      	ldr	r3, [r0, #16]
 8013c7a:	690a      	ldr	r2, [r1, #16]
 8013c7c:	1a9b      	subs	r3, r3, r2
 8013c7e:	b530      	push	{r4, r5, lr}
 8013c80:	d10c      	bne.n	8013c9c <__mcmp+0x24>
 8013c82:	0092      	lsls	r2, r2, #2
 8013c84:	3014      	adds	r0, #20
 8013c86:	3114      	adds	r1, #20
 8013c88:	1884      	adds	r4, r0, r2
 8013c8a:	4411      	add	r1, r2
 8013c8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c94:	4295      	cmp	r5, r2
 8013c96:	d003      	beq.n	8013ca0 <__mcmp+0x28>
 8013c98:	d305      	bcc.n	8013ca6 <__mcmp+0x2e>
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	bd30      	pop	{r4, r5, pc}
 8013ca0:	42a0      	cmp	r0, r4
 8013ca2:	d3f3      	bcc.n	8013c8c <__mcmp+0x14>
 8013ca4:	e7fa      	b.n	8013c9c <__mcmp+0x24>
 8013ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8013caa:	e7f7      	b.n	8013c9c <__mcmp+0x24>

08013cac <__mdiff>:
 8013cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	4607      	mov	r7, r0
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	4614      	mov	r4, r2
 8013cba:	f7ff ffdd 	bl	8013c78 <__mcmp>
 8013cbe:	1e06      	subs	r6, r0, #0
 8013cc0:	d108      	bne.n	8013cd4 <__mdiff+0x28>
 8013cc2:	4631      	mov	r1, r6
 8013cc4:	4638      	mov	r0, r7
 8013cc6:	f7ff fd83 	bl	80137d0 <_Balloc>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd4:	bfa4      	itt	ge
 8013cd6:	4623      	movge	r3, r4
 8013cd8:	462c      	movge	r4, r5
 8013cda:	4638      	mov	r0, r7
 8013cdc:	6861      	ldr	r1, [r4, #4]
 8013cde:	bfa6      	itte	ge
 8013ce0:	461d      	movge	r5, r3
 8013ce2:	2600      	movge	r6, #0
 8013ce4:	2601      	movlt	r6, #1
 8013ce6:	f7ff fd73 	bl	80137d0 <_Balloc>
 8013cea:	692b      	ldr	r3, [r5, #16]
 8013cec:	60c6      	str	r6, [r0, #12]
 8013cee:	6926      	ldr	r6, [r4, #16]
 8013cf0:	f105 0914 	add.w	r9, r5, #20
 8013cf4:	f104 0214 	add.w	r2, r4, #20
 8013cf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013cfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013d00:	f100 0514 	add.w	r5, r0, #20
 8013d04:	f04f 0e00 	mov.w	lr, #0
 8013d08:	f852 ab04 	ldr.w	sl, [r2], #4
 8013d0c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013d10:	fa1e f18a 	uxtah	r1, lr, sl
 8013d14:	b2a3      	uxth	r3, r4
 8013d16:	1ac9      	subs	r1, r1, r3
 8013d18:	0c23      	lsrs	r3, r4, #16
 8013d1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013d1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013d22:	b289      	uxth	r1, r1
 8013d24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013d28:	45c8      	cmp	r8, r9
 8013d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013d2e:	4694      	mov	ip, r2
 8013d30:	f845 3b04 	str.w	r3, [r5], #4
 8013d34:	d8e8      	bhi.n	8013d08 <__mdiff+0x5c>
 8013d36:	45bc      	cmp	ip, r7
 8013d38:	d304      	bcc.n	8013d44 <__mdiff+0x98>
 8013d3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013d3e:	b183      	cbz	r3, 8013d62 <__mdiff+0xb6>
 8013d40:	6106      	str	r6, [r0, #16]
 8013d42:	e7c5      	b.n	8013cd0 <__mdiff+0x24>
 8013d44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013d48:	fa1e f381 	uxtah	r3, lr, r1
 8013d4c:	141a      	asrs	r2, r3, #16
 8013d4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013d5c:	f845 3b04 	str.w	r3, [r5], #4
 8013d60:	e7e9      	b.n	8013d36 <__mdiff+0x8a>
 8013d62:	3e01      	subs	r6, #1
 8013d64:	e7e9      	b.n	8013d3a <__mdiff+0x8e>
	...

08013d68 <__ulp>:
 8013d68:	4b12      	ldr	r3, [pc, #72]	; (8013db4 <__ulp+0x4c>)
 8013d6a:	ee10 2a90 	vmov	r2, s1
 8013d6e:	401a      	ands	r2, r3
 8013d70:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	dd04      	ble.n	8013d82 <__ulp+0x1a>
 8013d78:	2000      	movs	r0, #0
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	ec41 0b10 	vmov	d0, r0, r1
 8013d80:	4770      	bx	lr
 8013d82:	425b      	negs	r3, r3
 8013d84:	151b      	asrs	r3, r3, #20
 8013d86:	2b13      	cmp	r3, #19
 8013d88:	f04f 0000 	mov.w	r0, #0
 8013d8c:	f04f 0100 	mov.w	r1, #0
 8013d90:	dc04      	bgt.n	8013d9c <__ulp+0x34>
 8013d92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013d96:	fa42 f103 	asr.w	r1, r2, r3
 8013d9a:	e7ef      	b.n	8013d7c <__ulp+0x14>
 8013d9c:	3b14      	subs	r3, #20
 8013d9e:	2b1e      	cmp	r3, #30
 8013da0:	f04f 0201 	mov.w	r2, #1
 8013da4:	bfda      	itte	le
 8013da6:	f1c3 031f 	rsble	r3, r3, #31
 8013daa:	fa02 f303 	lslle.w	r3, r2, r3
 8013dae:	4613      	movgt	r3, r2
 8013db0:	4618      	mov	r0, r3
 8013db2:	e7e3      	b.n	8013d7c <__ulp+0x14>
 8013db4:	7ff00000 	.word	0x7ff00000

08013db8 <__b2d>:
 8013db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dba:	6905      	ldr	r5, [r0, #16]
 8013dbc:	f100 0714 	add.w	r7, r0, #20
 8013dc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013dc4:	1f2e      	subs	r6, r5, #4
 8013dc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f7ff fdc4 	bl	8013958 <__hi0bits>
 8013dd0:	f1c0 0320 	rsb	r3, r0, #32
 8013dd4:	280a      	cmp	r0, #10
 8013dd6:	600b      	str	r3, [r1, #0]
 8013dd8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013e50 <__b2d+0x98>
 8013ddc:	dc14      	bgt.n	8013e08 <__b2d+0x50>
 8013dde:	f1c0 0e0b 	rsb	lr, r0, #11
 8013de2:	fa24 f10e 	lsr.w	r1, r4, lr
 8013de6:	42b7      	cmp	r7, r6
 8013de8:	ea41 030c 	orr.w	r3, r1, ip
 8013dec:	bf34      	ite	cc
 8013dee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013df2:	2100      	movcs	r1, #0
 8013df4:	3015      	adds	r0, #21
 8013df6:	fa04 f000 	lsl.w	r0, r4, r0
 8013dfa:	fa21 f10e 	lsr.w	r1, r1, lr
 8013dfe:	ea40 0201 	orr.w	r2, r0, r1
 8013e02:	ec43 2b10 	vmov	d0, r2, r3
 8013e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e08:	42b7      	cmp	r7, r6
 8013e0a:	bf3a      	itte	cc
 8013e0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013e10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e14:	2100      	movcs	r1, #0
 8013e16:	380b      	subs	r0, #11
 8013e18:	d015      	beq.n	8013e46 <__b2d+0x8e>
 8013e1a:	4084      	lsls	r4, r0
 8013e1c:	f1c0 0520 	rsb	r5, r0, #32
 8013e20:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013e24:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013e28:	42be      	cmp	r6, r7
 8013e2a:	fa21 fc05 	lsr.w	ip, r1, r5
 8013e2e:	ea44 030c 	orr.w	r3, r4, ip
 8013e32:	bf8c      	ite	hi
 8013e34:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013e38:	2400      	movls	r4, #0
 8013e3a:	fa01 f000 	lsl.w	r0, r1, r0
 8013e3e:	40ec      	lsrs	r4, r5
 8013e40:	ea40 0204 	orr.w	r2, r0, r4
 8013e44:	e7dd      	b.n	8013e02 <__b2d+0x4a>
 8013e46:	ea44 030c 	orr.w	r3, r4, ip
 8013e4a:	460a      	mov	r2, r1
 8013e4c:	e7d9      	b.n	8013e02 <__b2d+0x4a>
 8013e4e:	bf00      	nop
 8013e50:	3ff00000 	.word	0x3ff00000

08013e54 <__d2b>:
 8013e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e58:	460e      	mov	r6, r1
 8013e5a:	2101      	movs	r1, #1
 8013e5c:	ec59 8b10 	vmov	r8, r9, d0
 8013e60:	4615      	mov	r5, r2
 8013e62:	f7ff fcb5 	bl	80137d0 <_Balloc>
 8013e66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e70:	bb34      	cbnz	r4, 8013ec0 <__d2b+0x6c>
 8013e72:	9301      	str	r3, [sp, #4]
 8013e74:	f1b8 0300 	subs.w	r3, r8, #0
 8013e78:	d027      	beq.n	8013eca <__d2b+0x76>
 8013e7a:	a802      	add	r0, sp, #8
 8013e7c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013e80:	f7ff fd89 	bl	8013996 <__lo0bits>
 8013e84:	9900      	ldr	r1, [sp, #0]
 8013e86:	b1f0      	cbz	r0, 8013ec6 <__d2b+0x72>
 8013e88:	9a01      	ldr	r2, [sp, #4]
 8013e8a:	f1c0 0320 	rsb	r3, r0, #32
 8013e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013e92:	430b      	orrs	r3, r1
 8013e94:	40c2      	lsrs	r2, r0
 8013e96:	617b      	str	r3, [r7, #20]
 8013e98:	9201      	str	r2, [sp, #4]
 8013e9a:	9b01      	ldr	r3, [sp, #4]
 8013e9c:	61bb      	str	r3, [r7, #24]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	bf14      	ite	ne
 8013ea2:	2102      	movne	r1, #2
 8013ea4:	2101      	moveq	r1, #1
 8013ea6:	6139      	str	r1, [r7, #16]
 8013ea8:	b1c4      	cbz	r4, 8013edc <__d2b+0x88>
 8013eaa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013eae:	4404      	add	r4, r0
 8013eb0:	6034      	str	r4, [r6, #0]
 8013eb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013eb6:	6028      	str	r0, [r5, #0]
 8013eb8:	4638      	mov	r0, r7
 8013eba:	b003      	add	sp, #12
 8013ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ec4:	e7d5      	b.n	8013e72 <__d2b+0x1e>
 8013ec6:	6179      	str	r1, [r7, #20]
 8013ec8:	e7e7      	b.n	8013e9a <__d2b+0x46>
 8013eca:	a801      	add	r0, sp, #4
 8013ecc:	f7ff fd63 	bl	8013996 <__lo0bits>
 8013ed0:	9b01      	ldr	r3, [sp, #4]
 8013ed2:	617b      	str	r3, [r7, #20]
 8013ed4:	2101      	movs	r1, #1
 8013ed6:	6139      	str	r1, [r7, #16]
 8013ed8:	3020      	adds	r0, #32
 8013eda:	e7e5      	b.n	8013ea8 <__d2b+0x54>
 8013edc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013ee0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013ee4:	6030      	str	r0, [r6, #0]
 8013ee6:	6918      	ldr	r0, [r3, #16]
 8013ee8:	f7ff fd36 	bl	8013958 <__hi0bits>
 8013eec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013ef0:	e7e1      	b.n	8013eb6 <__d2b+0x62>

08013ef2 <__ratio>:
 8013ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef6:	4688      	mov	r8, r1
 8013ef8:	4669      	mov	r1, sp
 8013efa:	4681      	mov	r9, r0
 8013efc:	f7ff ff5c 	bl	8013db8 <__b2d>
 8013f00:	a901      	add	r1, sp, #4
 8013f02:	4640      	mov	r0, r8
 8013f04:	ec57 6b10 	vmov	r6, r7, d0
 8013f08:	f7ff ff56 	bl	8013db8 <__b2d>
 8013f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013f14:	eba3 0c02 	sub.w	ip, r3, r2
 8013f18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013f1c:	1a9b      	subs	r3, r3, r2
 8013f1e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013f22:	ec5b ab10 	vmov	sl, fp, d0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	bfce      	itee	gt
 8013f2a:	463a      	movgt	r2, r7
 8013f2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013f30:	465a      	movle	r2, fp
 8013f32:	4659      	mov	r1, fp
 8013f34:	463d      	mov	r5, r7
 8013f36:	bfd4      	ite	le
 8013f38:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013f3c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013f40:	4630      	mov	r0, r6
 8013f42:	ee10 2a10 	vmov	r2, s0
 8013f46:	460b      	mov	r3, r1
 8013f48:	4629      	mov	r1, r5
 8013f4a:	f7ec fc8f 	bl	800086c <__aeabi_ddiv>
 8013f4e:	ec41 0b10 	vmov	d0, r0, r1
 8013f52:	b003      	add	sp, #12
 8013f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f58 <__copybits>:
 8013f58:	3901      	subs	r1, #1
 8013f5a:	b510      	push	{r4, lr}
 8013f5c:	1149      	asrs	r1, r1, #5
 8013f5e:	6914      	ldr	r4, [r2, #16]
 8013f60:	3101      	adds	r1, #1
 8013f62:	f102 0314 	add.w	r3, r2, #20
 8013f66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013f6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f6e:	42a3      	cmp	r3, r4
 8013f70:	4602      	mov	r2, r0
 8013f72:	d303      	bcc.n	8013f7c <__copybits+0x24>
 8013f74:	2300      	movs	r3, #0
 8013f76:	428a      	cmp	r2, r1
 8013f78:	d305      	bcc.n	8013f86 <__copybits+0x2e>
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f80:	f840 2b04 	str.w	r2, [r0], #4
 8013f84:	e7f3      	b.n	8013f6e <__copybits+0x16>
 8013f86:	f842 3b04 	str.w	r3, [r2], #4
 8013f8a:	e7f4      	b.n	8013f76 <__copybits+0x1e>

08013f8c <__any_on>:
 8013f8c:	f100 0214 	add.w	r2, r0, #20
 8013f90:	6900      	ldr	r0, [r0, #16]
 8013f92:	114b      	asrs	r3, r1, #5
 8013f94:	4298      	cmp	r0, r3
 8013f96:	b510      	push	{r4, lr}
 8013f98:	db11      	blt.n	8013fbe <__any_on+0x32>
 8013f9a:	dd0a      	ble.n	8013fb2 <__any_on+0x26>
 8013f9c:	f011 011f 	ands.w	r1, r1, #31
 8013fa0:	d007      	beq.n	8013fb2 <__any_on+0x26>
 8013fa2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013fa6:	fa24 f001 	lsr.w	r0, r4, r1
 8013faa:	fa00 f101 	lsl.w	r1, r0, r1
 8013fae:	428c      	cmp	r4, r1
 8013fb0:	d10b      	bne.n	8013fca <__any_on+0x3e>
 8013fb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d803      	bhi.n	8013fc2 <__any_on+0x36>
 8013fba:	2000      	movs	r0, #0
 8013fbc:	bd10      	pop	{r4, pc}
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	e7f7      	b.n	8013fb2 <__any_on+0x26>
 8013fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013fc6:	2900      	cmp	r1, #0
 8013fc8:	d0f5      	beq.n	8013fb6 <__any_on+0x2a>
 8013fca:	2001      	movs	r0, #1
 8013fcc:	e7f6      	b.n	8013fbc <__any_on+0x30>

08013fce <_calloc_r>:
 8013fce:	b538      	push	{r3, r4, r5, lr}
 8013fd0:	fb02 f401 	mul.w	r4, r2, r1
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	f7fc fc6d 	bl	80108b4 <_malloc_r>
 8013fda:	4605      	mov	r5, r0
 8013fdc:	b118      	cbz	r0, 8013fe6 <_calloc_r+0x18>
 8013fde:	4622      	mov	r2, r4
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	f7fc fc11 	bl	8010808 <memset>
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	bd38      	pop	{r3, r4, r5, pc}

08013fea <__ssputs_r>:
 8013fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fee:	688e      	ldr	r6, [r1, #8]
 8013ff0:	429e      	cmp	r6, r3
 8013ff2:	4682      	mov	sl, r0
 8013ff4:	460c      	mov	r4, r1
 8013ff6:	4690      	mov	r8, r2
 8013ff8:	4699      	mov	r9, r3
 8013ffa:	d837      	bhi.n	801406c <__ssputs_r+0x82>
 8013ffc:	898a      	ldrh	r2, [r1, #12]
 8013ffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014002:	d031      	beq.n	8014068 <__ssputs_r+0x7e>
 8014004:	6825      	ldr	r5, [r4, #0]
 8014006:	6909      	ldr	r1, [r1, #16]
 8014008:	1a6f      	subs	r7, r5, r1
 801400a:	6965      	ldr	r5, [r4, #20]
 801400c:	2302      	movs	r3, #2
 801400e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014012:	fb95 f5f3 	sdiv	r5, r5, r3
 8014016:	f109 0301 	add.w	r3, r9, #1
 801401a:	443b      	add	r3, r7
 801401c:	429d      	cmp	r5, r3
 801401e:	bf38      	it	cc
 8014020:	461d      	movcc	r5, r3
 8014022:	0553      	lsls	r3, r2, #21
 8014024:	d530      	bpl.n	8014088 <__ssputs_r+0x9e>
 8014026:	4629      	mov	r1, r5
 8014028:	f7fc fc44 	bl	80108b4 <_malloc_r>
 801402c:	4606      	mov	r6, r0
 801402e:	b950      	cbnz	r0, 8014046 <__ssputs_r+0x5c>
 8014030:	230c      	movs	r3, #12
 8014032:	f8ca 3000 	str.w	r3, [sl]
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801403c:	81a3      	strh	r3, [r4, #12]
 801403e:	f04f 30ff 	mov.w	r0, #4294967295
 8014042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014046:	463a      	mov	r2, r7
 8014048:	6921      	ldr	r1, [r4, #16]
 801404a:	f7fc fbb9 	bl	80107c0 <memcpy>
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014058:	81a3      	strh	r3, [r4, #12]
 801405a:	6126      	str	r6, [r4, #16]
 801405c:	6165      	str	r5, [r4, #20]
 801405e:	443e      	add	r6, r7
 8014060:	1bed      	subs	r5, r5, r7
 8014062:	6026      	str	r6, [r4, #0]
 8014064:	60a5      	str	r5, [r4, #8]
 8014066:	464e      	mov	r6, r9
 8014068:	454e      	cmp	r6, r9
 801406a:	d900      	bls.n	801406e <__ssputs_r+0x84>
 801406c:	464e      	mov	r6, r9
 801406e:	4632      	mov	r2, r6
 8014070:	4641      	mov	r1, r8
 8014072:	6820      	ldr	r0, [r4, #0]
 8014074:	f7fc fbaf 	bl	80107d6 <memmove>
 8014078:	68a3      	ldr	r3, [r4, #8]
 801407a:	1b9b      	subs	r3, r3, r6
 801407c:	60a3      	str	r3, [r4, #8]
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	441e      	add	r6, r3
 8014082:	6026      	str	r6, [r4, #0]
 8014084:	2000      	movs	r0, #0
 8014086:	e7dc      	b.n	8014042 <__ssputs_r+0x58>
 8014088:	462a      	mov	r2, r5
 801408a:	f000 fd1a 	bl	8014ac2 <_realloc_r>
 801408e:	4606      	mov	r6, r0
 8014090:	2800      	cmp	r0, #0
 8014092:	d1e2      	bne.n	801405a <__ssputs_r+0x70>
 8014094:	6921      	ldr	r1, [r4, #16]
 8014096:	4650      	mov	r0, sl
 8014098:	f7fc fbbe 	bl	8010818 <_free_r>
 801409c:	e7c8      	b.n	8014030 <__ssputs_r+0x46>
	...

080140a0 <_svfiprintf_r>:
 80140a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	461d      	mov	r5, r3
 80140a6:	898b      	ldrh	r3, [r1, #12]
 80140a8:	061f      	lsls	r7, r3, #24
 80140aa:	b09d      	sub	sp, #116	; 0x74
 80140ac:	4680      	mov	r8, r0
 80140ae:	460c      	mov	r4, r1
 80140b0:	4616      	mov	r6, r2
 80140b2:	d50f      	bpl.n	80140d4 <_svfiprintf_r+0x34>
 80140b4:	690b      	ldr	r3, [r1, #16]
 80140b6:	b96b      	cbnz	r3, 80140d4 <_svfiprintf_r+0x34>
 80140b8:	2140      	movs	r1, #64	; 0x40
 80140ba:	f7fc fbfb 	bl	80108b4 <_malloc_r>
 80140be:	6020      	str	r0, [r4, #0]
 80140c0:	6120      	str	r0, [r4, #16]
 80140c2:	b928      	cbnz	r0, 80140d0 <_svfiprintf_r+0x30>
 80140c4:	230c      	movs	r3, #12
 80140c6:	f8c8 3000 	str.w	r3, [r8]
 80140ca:	f04f 30ff 	mov.w	r0, #4294967295
 80140ce:	e0c8      	b.n	8014262 <_svfiprintf_r+0x1c2>
 80140d0:	2340      	movs	r3, #64	; 0x40
 80140d2:	6163      	str	r3, [r4, #20]
 80140d4:	2300      	movs	r3, #0
 80140d6:	9309      	str	r3, [sp, #36]	; 0x24
 80140d8:	2320      	movs	r3, #32
 80140da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140de:	2330      	movs	r3, #48	; 0x30
 80140e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140e4:	9503      	str	r5, [sp, #12]
 80140e6:	f04f 0b01 	mov.w	fp, #1
 80140ea:	4637      	mov	r7, r6
 80140ec:	463d      	mov	r5, r7
 80140ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140f2:	b10b      	cbz	r3, 80140f8 <_svfiprintf_r+0x58>
 80140f4:	2b25      	cmp	r3, #37	; 0x25
 80140f6:	d13e      	bne.n	8014176 <_svfiprintf_r+0xd6>
 80140f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80140fc:	d00b      	beq.n	8014116 <_svfiprintf_r+0x76>
 80140fe:	4653      	mov	r3, sl
 8014100:	4632      	mov	r2, r6
 8014102:	4621      	mov	r1, r4
 8014104:	4640      	mov	r0, r8
 8014106:	f7ff ff70 	bl	8013fea <__ssputs_r>
 801410a:	3001      	adds	r0, #1
 801410c:	f000 80a4 	beq.w	8014258 <_svfiprintf_r+0x1b8>
 8014110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014112:	4453      	add	r3, sl
 8014114:	9309      	str	r3, [sp, #36]	; 0x24
 8014116:	783b      	ldrb	r3, [r7, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 809d 	beq.w	8014258 <_svfiprintf_r+0x1b8>
 801411e:	2300      	movs	r3, #0
 8014120:	f04f 32ff 	mov.w	r2, #4294967295
 8014124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014128:	9304      	str	r3, [sp, #16]
 801412a:	9307      	str	r3, [sp, #28]
 801412c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014130:	931a      	str	r3, [sp, #104]	; 0x68
 8014132:	462f      	mov	r7, r5
 8014134:	2205      	movs	r2, #5
 8014136:	f817 1b01 	ldrb.w	r1, [r7], #1
 801413a:	4850      	ldr	r0, [pc, #320]	; (801427c <_svfiprintf_r+0x1dc>)
 801413c:	f7ec f860 	bl	8000200 <memchr>
 8014140:	9b04      	ldr	r3, [sp, #16]
 8014142:	b9d0      	cbnz	r0, 801417a <_svfiprintf_r+0xda>
 8014144:	06d9      	lsls	r1, r3, #27
 8014146:	bf44      	itt	mi
 8014148:	2220      	movmi	r2, #32
 801414a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801414e:	071a      	lsls	r2, r3, #28
 8014150:	bf44      	itt	mi
 8014152:	222b      	movmi	r2, #43	; 0x2b
 8014154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014158:	782a      	ldrb	r2, [r5, #0]
 801415a:	2a2a      	cmp	r2, #42	; 0x2a
 801415c:	d015      	beq.n	801418a <_svfiprintf_r+0xea>
 801415e:	9a07      	ldr	r2, [sp, #28]
 8014160:	462f      	mov	r7, r5
 8014162:	2000      	movs	r0, #0
 8014164:	250a      	movs	r5, #10
 8014166:	4639      	mov	r1, r7
 8014168:	f811 3b01 	ldrb.w	r3, [r1], #1
 801416c:	3b30      	subs	r3, #48	; 0x30
 801416e:	2b09      	cmp	r3, #9
 8014170:	d94d      	bls.n	801420e <_svfiprintf_r+0x16e>
 8014172:	b1b8      	cbz	r0, 80141a4 <_svfiprintf_r+0x104>
 8014174:	e00f      	b.n	8014196 <_svfiprintf_r+0xf6>
 8014176:	462f      	mov	r7, r5
 8014178:	e7b8      	b.n	80140ec <_svfiprintf_r+0x4c>
 801417a:	4a40      	ldr	r2, [pc, #256]	; (801427c <_svfiprintf_r+0x1dc>)
 801417c:	1a80      	subs	r0, r0, r2
 801417e:	fa0b f000 	lsl.w	r0, fp, r0
 8014182:	4318      	orrs	r0, r3
 8014184:	9004      	str	r0, [sp, #16]
 8014186:	463d      	mov	r5, r7
 8014188:	e7d3      	b.n	8014132 <_svfiprintf_r+0x92>
 801418a:	9a03      	ldr	r2, [sp, #12]
 801418c:	1d11      	adds	r1, r2, #4
 801418e:	6812      	ldr	r2, [r2, #0]
 8014190:	9103      	str	r1, [sp, #12]
 8014192:	2a00      	cmp	r2, #0
 8014194:	db01      	blt.n	801419a <_svfiprintf_r+0xfa>
 8014196:	9207      	str	r2, [sp, #28]
 8014198:	e004      	b.n	80141a4 <_svfiprintf_r+0x104>
 801419a:	4252      	negs	r2, r2
 801419c:	f043 0302 	orr.w	r3, r3, #2
 80141a0:	9207      	str	r2, [sp, #28]
 80141a2:	9304      	str	r3, [sp, #16]
 80141a4:	783b      	ldrb	r3, [r7, #0]
 80141a6:	2b2e      	cmp	r3, #46	; 0x2e
 80141a8:	d10c      	bne.n	80141c4 <_svfiprintf_r+0x124>
 80141aa:	787b      	ldrb	r3, [r7, #1]
 80141ac:	2b2a      	cmp	r3, #42	; 0x2a
 80141ae:	d133      	bne.n	8014218 <_svfiprintf_r+0x178>
 80141b0:	9b03      	ldr	r3, [sp, #12]
 80141b2:	1d1a      	adds	r2, r3, #4
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	9203      	str	r2, [sp, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	bfb8      	it	lt
 80141bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80141c0:	3702      	adds	r7, #2
 80141c2:	9305      	str	r3, [sp, #20]
 80141c4:	4d2e      	ldr	r5, [pc, #184]	; (8014280 <_svfiprintf_r+0x1e0>)
 80141c6:	7839      	ldrb	r1, [r7, #0]
 80141c8:	2203      	movs	r2, #3
 80141ca:	4628      	mov	r0, r5
 80141cc:	f7ec f818 	bl	8000200 <memchr>
 80141d0:	b138      	cbz	r0, 80141e2 <_svfiprintf_r+0x142>
 80141d2:	2340      	movs	r3, #64	; 0x40
 80141d4:	1b40      	subs	r0, r0, r5
 80141d6:	fa03 f000 	lsl.w	r0, r3, r0
 80141da:	9b04      	ldr	r3, [sp, #16]
 80141dc:	4303      	orrs	r3, r0
 80141de:	3701      	adds	r7, #1
 80141e0:	9304      	str	r3, [sp, #16]
 80141e2:	7839      	ldrb	r1, [r7, #0]
 80141e4:	4827      	ldr	r0, [pc, #156]	; (8014284 <_svfiprintf_r+0x1e4>)
 80141e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141ea:	2206      	movs	r2, #6
 80141ec:	1c7e      	adds	r6, r7, #1
 80141ee:	f7ec f807 	bl	8000200 <memchr>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d038      	beq.n	8014268 <_svfiprintf_r+0x1c8>
 80141f6:	4b24      	ldr	r3, [pc, #144]	; (8014288 <_svfiprintf_r+0x1e8>)
 80141f8:	bb13      	cbnz	r3, 8014240 <_svfiprintf_r+0x1a0>
 80141fa:	9b03      	ldr	r3, [sp, #12]
 80141fc:	3307      	adds	r3, #7
 80141fe:	f023 0307 	bic.w	r3, r3, #7
 8014202:	3308      	adds	r3, #8
 8014204:	9303      	str	r3, [sp, #12]
 8014206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014208:	444b      	add	r3, r9
 801420a:	9309      	str	r3, [sp, #36]	; 0x24
 801420c:	e76d      	b.n	80140ea <_svfiprintf_r+0x4a>
 801420e:	fb05 3202 	mla	r2, r5, r2, r3
 8014212:	2001      	movs	r0, #1
 8014214:	460f      	mov	r7, r1
 8014216:	e7a6      	b.n	8014166 <_svfiprintf_r+0xc6>
 8014218:	2300      	movs	r3, #0
 801421a:	3701      	adds	r7, #1
 801421c:	9305      	str	r3, [sp, #20]
 801421e:	4619      	mov	r1, r3
 8014220:	250a      	movs	r5, #10
 8014222:	4638      	mov	r0, r7
 8014224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014228:	3a30      	subs	r2, #48	; 0x30
 801422a:	2a09      	cmp	r2, #9
 801422c:	d903      	bls.n	8014236 <_svfiprintf_r+0x196>
 801422e:	2b00      	cmp	r3, #0
 8014230:	d0c8      	beq.n	80141c4 <_svfiprintf_r+0x124>
 8014232:	9105      	str	r1, [sp, #20]
 8014234:	e7c6      	b.n	80141c4 <_svfiprintf_r+0x124>
 8014236:	fb05 2101 	mla	r1, r5, r1, r2
 801423a:	2301      	movs	r3, #1
 801423c:	4607      	mov	r7, r0
 801423e:	e7f0      	b.n	8014222 <_svfiprintf_r+0x182>
 8014240:	ab03      	add	r3, sp, #12
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	4622      	mov	r2, r4
 8014246:	4b11      	ldr	r3, [pc, #68]	; (801428c <_svfiprintf_r+0x1ec>)
 8014248:	a904      	add	r1, sp, #16
 801424a:	4640      	mov	r0, r8
 801424c:	f7fc fc20 	bl	8010a90 <_printf_float>
 8014250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014254:	4681      	mov	r9, r0
 8014256:	d1d6      	bne.n	8014206 <_svfiprintf_r+0x166>
 8014258:	89a3      	ldrh	r3, [r4, #12]
 801425a:	065b      	lsls	r3, r3, #25
 801425c:	f53f af35 	bmi.w	80140ca <_svfiprintf_r+0x2a>
 8014260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014262:	b01d      	add	sp, #116	; 0x74
 8014264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014268:	ab03      	add	r3, sp, #12
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	4622      	mov	r2, r4
 801426e:	4b07      	ldr	r3, [pc, #28]	; (801428c <_svfiprintf_r+0x1ec>)
 8014270:	a904      	add	r1, sp, #16
 8014272:	4640      	mov	r0, r8
 8014274:	f7fc fec2 	bl	8010ffc <_printf_i>
 8014278:	e7ea      	b.n	8014250 <_svfiprintf_r+0x1b0>
 801427a:	bf00      	nop
 801427c:	08016114 	.word	0x08016114
 8014280:	0801611a 	.word	0x0801611a
 8014284:	0801611e 	.word	0x0801611e
 8014288:	08010a91 	.word	0x08010a91
 801428c:	08013feb 	.word	0x08013feb

08014290 <_sungetc_r>:
 8014290:	b538      	push	{r3, r4, r5, lr}
 8014292:	1c4b      	adds	r3, r1, #1
 8014294:	4614      	mov	r4, r2
 8014296:	d103      	bne.n	80142a0 <_sungetc_r+0x10>
 8014298:	f04f 35ff 	mov.w	r5, #4294967295
 801429c:	4628      	mov	r0, r5
 801429e:	bd38      	pop	{r3, r4, r5, pc}
 80142a0:	8993      	ldrh	r3, [r2, #12]
 80142a2:	f023 0320 	bic.w	r3, r3, #32
 80142a6:	8193      	strh	r3, [r2, #12]
 80142a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142aa:	6852      	ldr	r2, [r2, #4]
 80142ac:	b2cd      	uxtb	r5, r1
 80142ae:	b18b      	cbz	r3, 80142d4 <_sungetc_r+0x44>
 80142b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80142b2:	4293      	cmp	r3, r2
 80142b4:	dd08      	ble.n	80142c8 <_sungetc_r+0x38>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	1e5a      	subs	r2, r3, #1
 80142ba:	6022      	str	r2, [r4, #0]
 80142bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80142c0:	6863      	ldr	r3, [r4, #4]
 80142c2:	3301      	adds	r3, #1
 80142c4:	6063      	str	r3, [r4, #4]
 80142c6:	e7e9      	b.n	801429c <_sungetc_r+0xc>
 80142c8:	4621      	mov	r1, r4
 80142ca:	f000 fbb3 	bl	8014a34 <__submore>
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d0f1      	beq.n	80142b6 <_sungetc_r+0x26>
 80142d2:	e7e1      	b.n	8014298 <_sungetc_r+0x8>
 80142d4:	6921      	ldr	r1, [r4, #16]
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	b151      	cbz	r1, 80142f0 <_sungetc_r+0x60>
 80142da:	4299      	cmp	r1, r3
 80142dc:	d208      	bcs.n	80142f0 <_sungetc_r+0x60>
 80142de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80142e2:	42a9      	cmp	r1, r5
 80142e4:	d104      	bne.n	80142f0 <_sungetc_r+0x60>
 80142e6:	3b01      	subs	r3, #1
 80142e8:	3201      	adds	r2, #1
 80142ea:	6023      	str	r3, [r4, #0]
 80142ec:	6062      	str	r2, [r4, #4]
 80142ee:	e7d5      	b.n	801429c <_sungetc_r+0xc>
 80142f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80142f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142f8:	6363      	str	r3, [r4, #52]	; 0x34
 80142fa:	2303      	movs	r3, #3
 80142fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80142fe:	4623      	mov	r3, r4
 8014300:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014304:	6023      	str	r3, [r4, #0]
 8014306:	2301      	movs	r3, #1
 8014308:	e7dc      	b.n	80142c4 <_sungetc_r+0x34>

0801430a <__ssrefill_r>:
 801430a:	b510      	push	{r4, lr}
 801430c:	460c      	mov	r4, r1
 801430e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014310:	b169      	cbz	r1, 801432e <__ssrefill_r+0x24>
 8014312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014316:	4299      	cmp	r1, r3
 8014318:	d001      	beq.n	801431e <__ssrefill_r+0x14>
 801431a:	f7fc fa7d 	bl	8010818 <_free_r>
 801431e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014320:	6063      	str	r3, [r4, #4]
 8014322:	2000      	movs	r0, #0
 8014324:	6360      	str	r0, [r4, #52]	; 0x34
 8014326:	b113      	cbz	r3, 801432e <__ssrefill_r+0x24>
 8014328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801432a:	6023      	str	r3, [r4, #0]
 801432c:	bd10      	pop	{r4, pc}
 801432e:	6923      	ldr	r3, [r4, #16]
 8014330:	6023      	str	r3, [r4, #0]
 8014332:	2300      	movs	r3, #0
 8014334:	6063      	str	r3, [r4, #4]
 8014336:	89a3      	ldrh	r3, [r4, #12]
 8014338:	f043 0320 	orr.w	r3, r3, #32
 801433c:	81a3      	strh	r3, [r4, #12]
 801433e:	f04f 30ff 	mov.w	r0, #4294967295
 8014342:	e7f3      	b.n	801432c <__ssrefill_r+0x22>

08014344 <__ssvfiscanf_r>:
 8014344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014348:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801434c:	460c      	mov	r4, r1
 801434e:	2100      	movs	r1, #0
 8014350:	9144      	str	r1, [sp, #272]	; 0x110
 8014352:	9145      	str	r1, [sp, #276]	; 0x114
 8014354:	499f      	ldr	r1, [pc, #636]	; (80145d4 <__ssvfiscanf_r+0x290>)
 8014356:	91a0      	str	r1, [sp, #640]	; 0x280
 8014358:	f10d 0804 	add.w	r8, sp, #4
 801435c:	499e      	ldr	r1, [pc, #632]	; (80145d8 <__ssvfiscanf_r+0x294>)
 801435e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80145dc <__ssvfiscanf_r+0x298>
 8014362:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014366:	4606      	mov	r6, r0
 8014368:	4692      	mov	sl, r2
 801436a:	91a1      	str	r1, [sp, #644]	; 0x284
 801436c:	9300      	str	r3, [sp, #0]
 801436e:	270a      	movs	r7, #10
 8014370:	f89a 3000 	ldrb.w	r3, [sl]
 8014374:	2b00      	cmp	r3, #0
 8014376:	f000 812a 	beq.w	80145ce <__ssvfiscanf_r+0x28a>
 801437a:	4655      	mov	r5, sl
 801437c:	f7ff f9f6 	bl	801376c <__locale_ctype_ptr>
 8014380:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014384:	4458      	add	r0, fp
 8014386:	7843      	ldrb	r3, [r0, #1]
 8014388:	f013 0308 	ands.w	r3, r3, #8
 801438c:	d01c      	beq.n	80143c8 <__ssvfiscanf_r+0x84>
 801438e:	6863      	ldr	r3, [r4, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	dd12      	ble.n	80143ba <__ssvfiscanf_r+0x76>
 8014394:	f7ff f9ea 	bl	801376c <__locale_ctype_ptr>
 8014398:	6823      	ldr	r3, [r4, #0]
 801439a:	781a      	ldrb	r2, [r3, #0]
 801439c:	4410      	add	r0, r2
 801439e:	7842      	ldrb	r2, [r0, #1]
 80143a0:	0712      	lsls	r2, r2, #28
 80143a2:	d401      	bmi.n	80143a8 <__ssvfiscanf_r+0x64>
 80143a4:	46aa      	mov	sl, r5
 80143a6:	e7e3      	b.n	8014370 <__ssvfiscanf_r+0x2c>
 80143a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143aa:	3201      	adds	r2, #1
 80143ac:	9245      	str	r2, [sp, #276]	; 0x114
 80143ae:	6862      	ldr	r2, [r4, #4]
 80143b0:	3301      	adds	r3, #1
 80143b2:	3a01      	subs	r2, #1
 80143b4:	6062      	str	r2, [r4, #4]
 80143b6:	6023      	str	r3, [r4, #0]
 80143b8:	e7e9      	b.n	801438e <__ssvfiscanf_r+0x4a>
 80143ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143bc:	4621      	mov	r1, r4
 80143be:	4630      	mov	r0, r6
 80143c0:	4798      	blx	r3
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d0e6      	beq.n	8014394 <__ssvfiscanf_r+0x50>
 80143c6:	e7ed      	b.n	80143a4 <__ssvfiscanf_r+0x60>
 80143c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80143cc:	f040 8082 	bne.w	80144d4 <__ssvfiscanf_r+0x190>
 80143d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80143d2:	9341      	str	r3, [sp, #260]	; 0x104
 80143d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80143d8:	2b2a      	cmp	r3, #42	; 0x2a
 80143da:	d103      	bne.n	80143e4 <__ssvfiscanf_r+0xa0>
 80143dc:	2310      	movs	r3, #16
 80143de:	9341      	str	r3, [sp, #260]	; 0x104
 80143e0:	f10a 0502 	add.w	r5, sl, #2
 80143e4:	46aa      	mov	sl, r5
 80143e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80143ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80143ee:	2a09      	cmp	r2, #9
 80143f0:	d922      	bls.n	8014438 <__ssvfiscanf_r+0xf4>
 80143f2:	2203      	movs	r2, #3
 80143f4:	4879      	ldr	r0, [pc, #484]	; (80145dc <__ssvfiscanf_r+0x298>)
 80143f6:	f7eb ff03 	bl	8000200 <memchr>
 80143fa:	b138      	cbz	r0, 801440c <__ssvfiscanf_r+0xc8>
 80143fc:	eba0 0309 	sub.w	r3, r0, r9
 8014400:	2001      	movs	r0, #1
 8014402:	4098      	lsls	r0, r3
 8014404:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014406:	4318      	orrs	r0, r3
 8014408:	9041      	str	r0, [sp, #260]	; 0x104
 801440a:	46aa      	mov	sl, r5
 801440c:	f89a 3000 	ldrb.w	r3, [sl]
 8014410:	2b67      	cmp	r3, #103	; 0x67
 8014412:	f10a 0501 	add.w	r5, sl, #1
 8014416:	d82b      	bhi.n	8014470 <__ssvfiscanf_r+0x12c>
 8014418:	2b65      	cmp	r3, #101	; 0x65
 801441a:	f080 809f 	bcs.w	801455c <__ssvfiscanf_r+0x218>
 801441e:	2b47      	cmp	r3, #71	; 0x47
 8014420:	d810      	bhi.n	8014444 <__ssvfiscanf_r+0x100>
 8014422:	2b45      	cmp	r3, #69	; 0x45
 8014424:	f080 809a 	bcs.w	801455c <__ssvfiscanf_r+0x218>
 8014428:	2b00      	cmp	r3, #0
 801442a:	d06c      	beq.n	8014506 <__ssvfiscanf_r+0x1c2>
 801442c:	2b25      	cmp	r3, #37	; 0x25
 801442e:	d051      	beq.n	80144d4 <__ssvfiscanf_r+0x190>
 8014430:	2303      	movs	r3, #3
 8014432:	9347      	str	r3, [sp, #284]	; 0x11c
 8014434:	9742      	str	r7, [sp, #264]	; 0x108
 8014436:	e027      	b.n	8014488 <__ssvfiscanf_r+0x144>
 8014438:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801443a:	fb07 1303 	mla	r3, r7, r3, r1
 801443e:	3b30      	subs	r3, #48	; 0x30
 8014440:	9343      	str	r3, [sp, #268]	; 0x10c
 8014442:	e7cf      	b.n	80143e4 <__ssvfiscanf_r+0xa0>
 8014444:	2b5b      	cmp	r3, #91	; 0x5b
 8014446:	d06a      	beq.n	801451e <__ssvfiscanf_r+0x1da>
 8014448:	d80c      	bhi.n	8014464 <__ssvfiscanf_r+0x120>
 801444a:	2b58      	cmp	r3, #88	; 0x58
 801444c:	d1f0      	bne.n	8014430 <__ssvfiscanf_r+0xec>
 801444e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014454:	9241      	str	r2, [sp, #260]	; 0x104
 8014456:	2210      	movs	r2, #16
 8014458:	9242      	str	r2, [sp, #264]	; 0x108
 801445a:	2b6e      	cmp	r3, #110	; 0x6e
 801445c:	bf8c      	ite	hi
 801445e:	2304      	movhi	r3, #4
 8014460:	2303      	movls	r3, #3
 8014462:	e010      	b.n	8014486 <__ssvfiscanf_r+0x142>
 8014464:	2b63      	cmp	r3, #99	; 0x63
 8014466:	d065      	beq.n	8014534 <__ssvfiscanf_r+0x1f0>
 8014468:	2b64      	cmp	r3, #100	; 0x64
 801446a:	d1e1      	bne.n	8014430 <__ssvfiscanf_r+0xec>
 801446c:	9742      	str	r7, [sp, #264]	; 0x108
 801446e:	e7f4      	b.n	801445a <__ssvfiscanf_r+0x116>
 8014470:	2b70      	cmp	r3, #112	; 0x70
 8014472:	d04b      	beq.n	801450c <__ssvfiscanf_r+0x1c8>
 8014474:	d826      	bhi.n	80144c4 <__ssvfiscanf_r+0x180>
 8014476:	2b6e      	cmp	r3, #110	; 0x6e
 8014478:	d062      	beq.n	8014540 <__ssvfiscanf_r+0x1fc>
 801447a:	d84c      	bhi.n	8014516 <__ssvfiscanf_r+0x1d2>
 801447c:	2b69      	cmp	r3, #105	; 0x69
 801447e:	d1d7      	bne.n	8014430 <__ssvfiscanf_r+0xec>
 8014480:	2300      	movs	r3, #0
 8014482:	9342      	str	r3, [sp, #264]	; 0x108
 8014484:	2303      	movs	r3, #3
 8014486:	9347      	str	r3, [sp, #284]	; 0x11c
 8014488:	6863      	ldr	r3, [r4, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	dd68      	ble.n	8014560 <__ssvfiscanf_r+0x21c>
 801448e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014490:	0659      	lsls	r1, r3, #25
 8014492:	d407      	bmi.n	80144a4 <__ssvfiscanf_r+0x160>
 8014494:	f7ff f96a 	bl	801376c <__locale_ctype_ptr>
 8014498:	6823      	ldr	r3, [r4, #0]
 801449a:	781a      	ldrb	r2, [r3, #0]
 801449c:	4410      	add	r0, r2
 801449e:	7842      	ldrb	r2, [r0, #1]
 80144a0:	0712      	lsls	r2, r2, #28
 80144a2:	d464      	bmi.n	801456e <__ssvfiscanf_r+0x22a>
 80144a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	dc73      	bgt.n	8014592 <__ssvfiscanf_r+0x24e>
 80144aa:	466b      	mov	r3, sp
 80144ac:	4622      	mov	r2, r4
 80144ae:	a941      	add	r1, sp, #260	; 0x104
 80144b0:	4630      	mov	r0, r6
 80144b2:	f000 f897 	bl	80145e4 <_scanf_chars>
 80144b6:	2801      	cmp	r0, #1
 80144b8:	f000 8089 	beq.w	80145ce <__ssvfiscanf_r+0x28a>
 80144bc:	2802      	cmp	r0, #2
 80144be:	f47f af71 	bne.w	80143a4 <__ssvfiscanf_r+0x60>
 80144c2:	e01d      	b.n	8014500 <__ssvfiscanf_r+0x1bc>
 80144c4:	2b75      	cmp	r3, #117	; 0x75
 80144c6:	d0d1      	beq.n	801446c <__ssvfiscanf_r+0x128>
 80144c8:	2b78      	cmp	r3, #120	; 0x78
 80144ca:	d0c0      	beq.n	801444e <__ssvfiscanf_r+0x10a>
 80144cc:	2b73      	cmp	r3, #115	; 0x73
 80144ce:	d1af      	bne.n	8014430 <__ssvfiscanf_r+0xec>
 80144d0:	2302      	movs	r3, #2
 80144d2:	e7d8      	b.n	8014486 <__ssvfiscanf_r+0x142>
 80144d4:	6863      	ldr	r3, [r4, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	dd0c      	ble.n	80144f4 <__ssvfiscanf_r+0x1b0>
 80144da:	6823      	ldr	r3, [r4, #0]
 80144dc:	781a      	ldrb	r2, [r3, #0]
 80144de:	455a      	cmp	r2, fp
 80144e0:	d175      	bne.n	80145ce <__ssvfiscanf_r+0x28a>
 80144e2:	3301      	adds	r3, #1
 80144e4:	6862      	ldr	r2, [r4, #4]
 80144e6:	6023      	str	r3, [r4, #0]
 80144e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80144ea:	3a01      	subs	r2, #1
 80144ec:	3301      	adds	r3, #1
 80144ee:	6062      	str	r2, [r4, #4]
 80144f0:	9345      	str	r3, [sp, #276]	; 0x114
 80144f2:	e757      	b.n	80143a4 <__ssvfiscanf_r+0x60>
 80144f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144f6:	4621      	mov	r1, r4
 80144f8:	4630      	mov	r0, r6
 80144fa:	4798      	blx	r3
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d0ec      	beq.n	80144da <__ssvfiscanf_r+0x196>
 8014500:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014502:	2800      	cmp	r0, #0
 8014504:	d159      	bne.n	80145ba <__ssvfiscanf_r+0x276>
 8014506:	f04f 30ff 	mov.w	r0, #4294967295
 801450a:	e05c      	b.n	80145c6 <__ssvfiscanf_r+0x282>
 801450c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801450e:	f042 0220 	orr.w	r2, r2, #32
 8014512:	9241      	str	r2, [sp, #260]	; 0x104
 8014514:	e79b      	b.n	801444e <__ssvfiscanf_r+0x10a>
 8014516:	2308      	movs	r3, #8
 8014518:	9342      	str	r3, [sp, #264]	; 0x108
 801451a:	2304      	movs	r3, #4
 801451c:	e7b3      	b.n	8014486 <__ssvfiscanf_r+0x142>
 801451e:	4629      	mov	r1, r5
 8014520:	4640      	mov	r0, r8
 8014522:	f000 f9b7 	bl	8014894 <__sccl>
 8014526:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801452c:	9341      	str	r3, [sp, #260]	; 0x104
 801452e:	4605      	mov	r5, r0
 8014530:	2301      	movs	r3, #1
 8014532:	e7a8      	b.n	8014486 <__ssvfiscanf_r+0x142>
 8014534:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801453a:	9341      	str	r3, [sp, #260]	; 0x104
 801453c:	2300      	movs	r3, #0
 801453e:	e7a2      	b.n	8014486 <__ssvfiscanf_r+0x142>
 8014540:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014542:	06c3      	lsls	r3, r0, #27
 8014544:	f53f af2e 	bmi.w	80143a4 <__ssvfiscanf_r+0x60>
 8014548:	9b00      	ldr	r3, [sp, #0]
 801454a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801454c:	1d19      	adds	r1, r3, #4
 801454e:	9100      	str	r1, [sp, #0]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	07c0      	lsls	r0, r0, #31
 8014554:	bf4c      	ite	mi
 8014556:	801a      	strhmi	r2, [r3, #0]
 8014558:	601a      	strpl	r2, [r3, #0]
 801455a:	e723      	b.n	80143a4 <__ssvfiscanf_r+0x60>
 801455c:	2305      	movs	r3, #5
 801455e:	e792      	b.n	8014486 <__ssvfiscanf_r+0x142>
 8014560:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014562:	4621      	mov	r1, r4
 8014564:	4630      	mov	r0, r6
 8014566:	4798      	blx	r3
 8014568:	2800      	cmp	r0, #0
 801456a:	d090      	beq.n	801448e <__ssvfiscanf_r+0x14a>
 801456c:	e7c8      	b.n	8014500 <__ssvfiscanf_r+0x1bc>
 801456e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014570:	3201      	adds	r2, #1
 8014572:	9245      	str	r2, [sp, #276]	; 0x114
 8014574:	6862      	ldr	r2, [r4, #4]
 8014576:	3a01      	subs	r2, #1
 8014578:	2a00      	cmp	r2, #0
 801457a:	6062      	str	r2, [r4, #4]
 801457c:	dd02      	ble.n	8014584 <__ssvfiscanf_r+0x240>
 801457e:	3301      	adds	r3, #1
 8014580:	6023      	str	r3, [r4, #0]
 8014582:	e787      	b.n	8014494 <__ssvfiscanf_r+0x150>
 8014584:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014586:	4621      	mov	r1, r4
 8014588:	4630      	mov	r0, r6
 801458a:	4798      	blx	r3
 801458c:	2800      	cmp	r0, #0
 801458e:	d081      	beq.n	8014494 <__ssvfiscanf_r+0x150>
 8014590:	e7b6      	b.n	8014500 <__ssvfiscanf_r+0x1bc>
 8014592:	2b04      	cmp	r3, #4
 8014594:	dc06      	bgt.n	80145a4 <__ssvfiscanf_r+0x260>
 8014596:	466b      	mov	r3, sp
 8014598:	4622      	mov	r2, r4
 801459a:	a941      	add	r1, sp, #260	; 0x104
 801459c:	4630      	mov	r0, r6
 801459e:	f000 f885 	bl	80146ac <_scanf_i>
 80145a2:	e788      	b.n	80144b6 <__ssvfiscanf_r+0x172>
 80145a4:	4b0e      	ldr	r3, [pc, #56]	; (80145e0 <__ssvfiscanf_r+0x29c>)
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f43f aefc 	beq.w	80143a4 <__ssvfiscanf_r+0x60>
 80145ac:	466b      	mov	r3, sp
 80145ae:	4622      	mov	r2, r4
 80145b0:	a941      	add	r1, sp, #260	; 0x104
 80145b2:	4630      	mov	r0, r6
 80145b4:	f7fc fe34 	bl	8011220 <_scanf_float>
 80145b8:	e77d      	b.n	80144b6 <__ssvfiscanf_r+0x172>
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80145c0:	bf18      	it	ne
 80145c2:	f04f 30ff 	movne.w	r0, #4294967295
 80145c6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80145ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80145d0:	e7f9      	b.n	80145c6 <__ssvfiscanf_r+0x282>
 80145d2:	bf00      	nop
 80145d4:	08014291 	.word	0x08014291
 80145d8:	0801430b 	.word	0x0801430b
 80145dc:	0801611a 	.word	0x0801611a
 80145e0:	08011221 	.word	0x08011221

080145e4 <_scanf_chars>:
 80145e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e8:	4615      	mov	r5, r2
 80145ea:	688a      	ldr	r2, [r1, #8]
 80145ec:	4680      	mov	r8, r0
 80145ee:	460c      	mov	r4, r1
 80145f0:	b932      	cbnz	r2, 8014600 <_scanf_chars+0x1c>
 80145f2:	698a      	ldr	r2, [r1, #24]
 80145f4:	2a00      	cmp	r2, #0
 80145f6:	bf14      	ite	ne
 80145f8:	f04f 32ff 	movne.w	r2, #4294967295
 80145fc:	2201      	moveq	r2, #1
 80145fe:	608a      	str	r2, [r1, #8]
 8014600:	6822      	ldr	r2, [r4, #0]
 8014602:	06d1      	lsls	r1, r2, #27
 8014604:	bf5f      	itttt	pl
 8014606:	681a      	ldrpl	r2, [r3, #0]
 8014608:	1d11      	addpl	r1, r2, #4
 801460a:	6019      	strpl	r1, [r3, #0]
 801460c:	6817      	ldrpl	r7, [r2, #0]
 801460e:	2600      	movs	r6, #0
 8014610:	69a3      	ldr	r3, [r4, #24]
 8014612:	b1db      	cbz	r3, 801464c <_scanf_chars+0x68>
 8014614:	2b01      	cmp	r3, #1
 8014616:	d107      	bne.n	8014628 <_scanf_chars+0x44>
 8014618:	682b      	ldr	r3, [r5, #0]
 801461a:	6962      	ldr	r2, [r4, #20]
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	5cd3      	ldrb	r3, [r2, r3]
 8014620:	b9a3      	cbnz	r3, 801464c <_scanf_chars+0x68>
 8014622:	2e00      	cmp	r6, #0
 8014624:	d132      	bne.n	801468c <_scanf_chars+0xa8>
 8014626:	e006      	b.n	8014636 <_scanf_chars+0x52>
 8014628:	2b02      	cmp	r3, #2
 801462a:	d007      	beq.n	801463c <_scanf_chars+0x58>
 801462c:	2e00      	cmp	r6, #0
 801462e:	d12d      	bne.n	801468c <_scanf_chars+0xa8>
 8014630:	69a3      	ldr	r3, [r4, #24]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d12a      	bne.n	801468c <_scanf_chars+0xa8>
 8014636:	2001      	movs	r0, #1
 8014638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463c:	f7ff f896 	bl	801376c <__locale_ctype_ptr>
 8014640:	682b      	ldr	r3, [r5, #0]
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	4418      	add	r0, r3
 8014646:	7843      	ldrb	r3, [r0, #1]
 8014648:	071b      	lsls	r3, r3, #28
 801464a:	d4ef      	bmi.n	801462c <_scanf_chars+0x48>
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	06da      	lsls	r2, r3, #27
 8014650:	bf5e      	ittt	pl
 8014652:	682b      	ldrpl	r3, [r5, #0]
 8014654:	781b      	ldrbpl	r3, [r3, #0]
 8014656:	703b      	strbpl	r3, [r7, #0]
 8014658:	682a      	ldr	r2, [r5, #0]
 801465a:	686b      	ldr	r3, [r5, #4]
 801465c:	f102 0201 	add.w	r2, r2, #1
 8014660:	602a      	str	r2, [r5, #0]
 8014662:	68a2      	ldr	r2, [r4, #8]
 8014664:	f103 33ff 	add.w	r3, r3, #4294967295
 8014668:	f102 32ff 	add.w	r2, r2, #4294967295
 801466c:	606b      	str	r3, [r5, #4]
 801466e:	f106 0601 	add.w	r6, r6, #1
 8014672:	bf58      	it	pl
 8014674:	3701      	addpl	r7, #1
 8014676:	60a2      	str	r2, [r4, #8]
 8014678:	b142      	cbz	r2, 801468c <_scanf_chars+0xa8>
 801467a:	2b00      	cmp	r3, #0
 801467c:	dcc8      	bgt.n	8014610 <_scanf_chars+0x2c>
 801467e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014682:	4629      	mov	r1, r5
 8014684:	4640      	mov	r0, r8
 8014686:	4798      	blx	r3
 8014688:	2800      	cmp	r0, #0
 801468a:	d0c1      	beq.n	8014610 <_scanf_chars+0x2c>
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	f013 0310 	ands.w	r3, r3, #16
 8014692:	d105      	bne.n	80146a0 <_scanf_chars+0xbc>
 8014694:	68e2      	ldr	r2, [r4, #12]
 8014696:	3201      	adds	r2, #1
 8014698:	60e2      	str	r2, [r4, #12]
 801469a:	69a2      	ldr	r2, [r4, #24]
 801469c:	b102      	cbz	r2, 80146a0 <_scanf_chars+0xbc>
 801469e:	703b      	strb	r3, [r7, #0]
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	441e      	add	r6, r3
 80146a4:	6126      	str	r6, [r4, #16]
 80146a6:	2000      	movs	r0, #0
 80146a8:	e7c6      	b.n	8014638 <_scanf_chars+0x54>
	...

080146ac <_scanf_i>:
 80146ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b0:	469a      	mov	sl, r3
 80146b2:	4b74      	ldr	r3, [pc, #464]	; (8014884 <_scanf_i+0x1d8>)
 80146b4:	460c      	mov	r4, r1
 80146b6:	4683      	mov	fp, r0
 80146b8:	4616      	mov	r6, r2
 80146ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146be:	b087      	sub	sp, #28
 80146c0:	ab03      	add	r3, sp, #12
 80146c2:	68a7      	ldr	r7, [r4, #8]
 80146c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80146c8:	4b6f      	ldr	r3, [pc, #444]	; (8014888 <_scanf_i+0x1dc>)
 80146ca:	69a1      	ldr	r1, [r4, #24]
 80146cc:	4a6f      	ldr	r2, [pc, #444]	; (801488c <_scanf_i+0x1e0>)
 80146ce:	2903      	cmp	r1, #3
 80146d0:	bf08      	it	eq
 80146d2:	461a      	moveq	r2, r3
 80146d4:	1e7b      	subs	r3, r7, #1
 80146d6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80146da:	bf84      	itt	hi
 80146dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146e0:	60a3      	strhi	r3, [r4, #8]
 80146e2:	6823      	ldr	r3, [r4, #0]
 80146e4:	9200      	str	r2, [sp, #0]
 80146e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80146ea:	bf88      	it	hi
 80146ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80146f0:	f104 091c 	add.w	r9, r4, #28
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	bf8c      	ite	hi
 80146f8:	197f      	addhi	r7, r7, r5
 80146fa:	2700      	movls	r7, #0
 80146fc:	464b      	mov	r3, r9
 80146fe:	f04f 0800 	mov.w	r8, #0
 8014702:	9301      	str	r3, [sp, #4]
 8014704:	6831      	ldr	r1, [r6, #0]
 8014706:	ab03      	add	r3, sp, #12
 8014708:	2202      	movs	r2, #2
 801470a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801470e:	7809      	ldrb	r1, [r1, #0]
 8014710:	f7eb fd76 	bl	8000200 <memchr>
 8014714:	9b01      	ldr	r3, [sp, #4]
 8014716:	b330      	cbz	r0, 8014766 <_scanf_i+0xba>
 8014718:	f1b8 0f01 	cmp.w	r8, #1
 801471c:	d15a      	bne.n	80147d4 <_scanf_i+0x128>
 801471e:	6862      	ldr	r2, [r4, #4]
 8014720:	b92a      	cbnz	r2, 801472e <_scanf_i+0x82>
 8014722:	6822      	ldr	r2, [r4, #0]
 8014724:	2108      	movs	r1, #8
 8014726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801472a:	6061      	str	r1, [r4, #4]
 801472c:	6022      	str	r2, [r4, #0]
 801472e:	6822      	ldr	r2, [r4, #0]
 8014730:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014734:	6022      	str	r2, [r4, #0]
 8014736:	68a2      	ldr	r2, [r4, #8]
 8014738:	1e51      	subs	r1, r2, #1
 801473a:	60a1      	str	r1, [r4, #8]
 801473c:	b19a      	cbz	r2, 8014766 <_scanf_i+0xba>
 801473e:	6832      	ldr	r2, [r6, #0]
 8014740:	1c51      	adds	r1, r2, #1
 8014742:	6031      	str	r1, [r6, #0]
 8014744:	7812      	ldrb	r2, [r2, #0]
 8014746:	701a      	strb	r2, [r3, #0]
 8014748:	1c5d      	adds	r5, r3, #1
 801474a:	6873      	ldr	r3, [r6, #4]
 801474c:	3b01      	subs	r3, #1
 801474e:	2b00      	cmp	r3, #0
 8014750:	6073      	str	r3, [r6, #4]
 8014752:	dc07      	bgt.n	8014764 <_scanf_i+0xb8>
 8014754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014758:	4631      	mov	r1, r6
 801475a:	4658      	mov	r0, fp
 801475c:	4798      	blx	r3
 801475e:	2800      	cmp	r0, #0
 8014760:	f040 8086 	bne.w	8014870 <_scanf_i+0x1c4>
 8014764:	462b      	mov	r3, r5
 8014766:	f108 0801 	add.w	r8, r8, #1
 801476a:	f1b8 0f03 	cmp.w	r8, #3
 801476e:	d1c8      	bne.n	8014702 <_scanf_i+0x56>
 8014770:	6862      	ldr	r2, [r4, #4]
 8014772:	b90a      	cbnz	r2, 8014778 <_scanf_i+0xcc>
 8014774:	220a      	movs	r2, #10
 8014776:	6062      	str	r2, [r4, #4]
 8014778:	6862      	ldr	r2, [r4, #4]
 801477a:	4945      	ldr	r1, [pc, #276]	; (8014890 <_scanf_i+0x1e4>)
 801477c:	6960      	ldr	r0, [r4, #20]
 801477e:	9301      	str	r3, [sp, #4]
 8014780:	1a89      	subs	r1, r1, r2
 8014782:	f000 f887 	bl	8014894 <__sccl>
 8014786:	9b01      	ldr	r3, [sp, #4]
 8014788:	f04f 0800 	mov.w	r8, #0
 801478c:	461d      	mov	r5, r3
 801478e:	68a3      	ldr	r3, [r4, #8]
 8014790:	6822      	ldr	r2, [r4, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d03a      	beq.n	801480c <_scanf_i+0x160>
 8014796:	6831      	ldr	r1, [r6, #0]
 8014798:	6960      	ldr	r0, [r4, #20]
 801479a:	f891 c000 	ldrb.w	ip, [r1]
 801479e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d032      	beq.n	801480c <_scanf_i+0x160>
 80147a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80147aa:	d121      	bne.n	80147f0 <_scanf_i+0x144>
 80147ac:	0510      	lsls	r0, r2, #20
 80147ae:	d51f      	bpl.n	80147f0 <_scanf_i+0x144>
 80147b0:	f108 0801 	add.w	r8, r8, #1
 80147b4:	b117      	cbz	r7, 80147bc <_scanf_i+0x110>
 80147b6:	3301      	adds	r3, #1
 80147b8:	3f01      	subs	r7, #1
 80147ba:	60a3      	str	r3, [r4, #8]
 80147bc:	6873      	ldr	r3, [r6, #4]
 80147be:	3b01      	subs	r3, #1
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	6073      	str	r3, [r6, #4]
 80147c4:	dd1b      	ble.n	80147fe <_scanf_i+0x152>
 80147c6:	6833      	ldr	r3, [r6, #0]
 80147c8:	3301      	adds	r3, #1
 80147ca:	6033      	str	r3, [r6, #0]
 80147cc:	68a3      	ldr	r3, [r4, #8]
 80147ce:	3b01      	subs	r3, #1
 80147d0:	60a3      	str	r3, [r4, #8]
 80147d2:	e7dc      	b.n	801478e <_scanf_i+0xe2>
 80147d4:	f1b8 0f02 	cmp.w	r8, #2
 80147d8:	d1ad      	bne.n	8014736 <_scanf_i+0x8a>
 80147da:	6822      	ldr	r2, [r4, #0]
 80147dc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80147e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80147e4:	d1bf      	bne.n	8014766 <_scanf_i+0xba>
 80147e6:	2110      	movs	r1, #16
 80147e8:	6061      	str	r1, [r4, #4]
 80147ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80147ee:	e7a1      	b.n	8014734 <_scanf_i+0x88>
 80147f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80147f4:	6022      	str	r2, [r4, #0]
 80147f6:	780b      	ldrb	r3, [r1, #0]
 80147f8:	702b      	strb	r3, [r5, #0]
 80147fa:	3501      	adds	r5, #1
 80147fc:	e7de      	b.n	80147bc <_scanf_i+0x110>
 80147fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014802:	4631      	mov	r1, r6
 8014804:	4658      	mov	r0, fp
 8014806:	4798      	blx	r3
 8014808:	2800      	cmp	r0, #0
 801480a:	d0df      	beq.n	80147cc <_scanf_i+0x120>
 801480c:	6823      	ldr	r3, [r4, #0]
 801480e:	05d9      	lsls	r1, r3, #23
 8014810:	d50c      	bpl.n	801482c <_scanf_i+0x180>
 8014812:	454d      	cmp	r5, r9
 8014814:	d908      	bls.n	8014828 <_scanf_i+0x17c>
 8014816:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801481a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801481e:	4632      	mov	r2, r6
 8014820:	4658      	mov	r0, fp
 8014822:	4798      	blx	r3
 8014824:	1e6f      	subs	r7, r5, #1
 8014826:	463d      	mov	r5, r7
 8014828:	454d      	cmp	r5, r9
 801482a:	d029      	beq.n	8014880 <_scanf_i+0x1d4>
 801482c:	6822      	ldr	r2, [r4, #0]
 801482e:	f012 0210 	ands.w	r2, r2, #16
 8014832:	d113      	bne.n	801485c <_scanf_i+0x1b0>
 8014834:	702a      	strb	r2, [r5, #0]
 8014836:	6863      	ldr	r3, [r4, #4]
 8014838:	9e00      	ldr	r6, [sp, #0]
 801483a:	4649      	mov	r1, r9
 801483c:	4658      	mov	r0, fp
 801483e:	47b0      	blx	r6
 8014840:	f8da 3000 	ldr.w	r3, [sl]
 8014844:	6821      	ldr	r1, [r4, #0]
 8014846:	1d1a      	adds	r2, r3, #4
 8014848:	f8ca 2000 	str.w	r2, [sl]
 801484c:	f011 0f20 	tst.w	r1, #32
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	d010      	beq.n	8014876 <_scanf_i+0x1ca>
 8014854:	6018      	str	r0, [r3, #0]
 8014856:	68e3      	ldr	r3, [r4, #12]
 8014858:	3301      	adds	r3, #1
 801485a:	60e3      	str	r3, [r4, #12]
 801485c:	eba5 0509 	sub.w	r5, r5, r9
 8014860:	44a8      	add	r8, r5
 8014862:	6925      	ldr	r5, [r4, #16]
 8014864:	4445      	add	r5, r8
 8014866:	6125      	str	r5, [r4, #16]
 8014868:	2000      	movs	r0, #0
 801486a:	b007      	add	sp, #28
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014870:	f04f 0800 	mov.w	r8, #0
 8014874:	e7ca      	b.n	801480c <_scanf_i+0x160>
 8014876:	07ca      	lsls	r2, r1, #31
 8014878:	bf4c      	ite	mi
 801487a:	8018      	strhmi	r0, [r3, #0]
 801487c:	6018      	strpl	r0, [r3, #0]
 801487e:	e7ea      	b.n	8014856 <_scanf_i+0x1aa>
 8014880:	2001      	movs	r0, #1
 8014882:	e7f2      	b.n	801486a <_scanf_i+0x1be>
 8014884:	08015f48 	.word	0x08015f48
 8014888:	08012469 	.word	0x08012469
 801488c:	08014a11 	.word	0x08014a11
 8014890:	08016135 	.word	0x08016135

08014894 <__sccl>:
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	780b      	ldrb	r3, [r1, #0]
 8014898:	2b5e      	cmp	r3, #94	; 0x5e
 801489a:	bf13      	iteet	ne
 801489c:	1c4a      	addne	r2, r1, #1
 801489e:	1c8a      	addeq	r2, r1, #2
 80148a0:	784b      	ldrbeq	r3, [r1, #1]
 80148a2:	2100      	movne	r1, #0
 80148a4:	bf08      	it	eq
 80148a6:	2101      	moveq	r1, #1
 80148a8:	1e44      	subs	r4, r0, #1
 80148aa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80148ae:	f804 1f01 	strb.w	r1, [r4, #1]!
 80148b2:	42ac      	cmp	r4, r5
 80148b4:	d1fb      	bne.n	80148ae <__sccl+0x1a>
 80148b6:	b913      	cbnz	r3, 80148be <__sccl+0x2a>
 80148b8:	3a01      	subs	r2, #1
 80148ba:	4610      	mov	r0, r2
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
 80148be:	f081 0401 	eor.w	r4, r1, #1
 80148c2:	54c4      	strb	r4, [r0, r3]
 80148c4:	1c51      	adds	r1, r2, #1
 80148c6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80148ca:	2d2d      	cmp	r5, #45	; 0x2d
 80148cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80148d0:	460a      	mov	r2, r1
 80148d2:	d006      	beq.n	80148e2 <__sccl+0x4e>
 80148d4:	2d5d      	cmp	r5, #93	; 0x5d
 80148d6:	d0f0      	beq.n	80148ba <__sccl+0x26>
 80148d8:	b90d      	cbnz	r5, 80148de <__sccl+0x4a>
 80148da:	4632      	mov	r2, r6
 80148dc:	e7ed      	b.n	80148ba <__sccl+0x26>
 80148de:	462b      	mov	r3, r5
 80148e0:	e7ef      	b.n	80148c2 <__sccl+0x2e>
 80148e2:	780e      	ldrb	r6, [r1, #0]
 80148e4:	2e5d      	cmp	r6, #93	; 0x5d
 80148e6:	d0fa      	beq.n	80148de <__sccl+0x4a>
 80148e8:	42b3      	cmp	r3, r6
 80148ea:	dcf8      	bgt.n	80148de <__sccl+0x4a>
 80148ec:	3301      	adds	r3, #1
 80148ee:	429e      	cmp	r6, r3
 80148f0:	54c4      	strb	r4, [r0, r3]
 80148f2:	dcfb      	bgt.n	80148ec <__sccl+0x58>
 80148f4:	3102      	adds	r1, #2
 80148f6:	e7e6      	b.n	80148c6 <__sccl+0x32>

080148f8 <strncmp>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	b16a      	cbz	r2, 8014918 <strncmp+0x20>
 80148fc:	3901      	subs	r1, #1
 80148fe:	1884      	adds	r4, r0, r2
 8014900:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014904:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014908:	4293      	cmp	r3, r2
 801490a:	d103      	bne.n	8014914 <strncmp+0x1c>
 801490c:	42a0      	cmp	r0, r4
 801490e:	d001      	beq.n	8014914 <strncmp+0x1c>
 8014910:	2b00      	cmp	r3, #0
 8014912:	d1f5      	bne.n	8014900 <strncmp+0x8>
 8014914:	1a98      	subs	r0, r3, r2
 8014916:	bd10      	pop	{r4, pc}
 8014918:	4610      	mov	r0, r2
 801491a:	e7fc      	b.n	8014916 <strncmp+0x1e>

0801491c <_strtoul_l.isra.0>:
 801491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014920:	4680      	mov	r8, r0
 8014922:	4689      	mov	r9, r1
 8014924:	4692      	mov	sl, r2
 8014926:	461e      	mov	r6, r3
 8014928:	460f      	mov	r7, r1
 801492a:	463d      	mov	r5, r7
 801492c:	9808      	ldr	r0, [sp, #32]
 801492e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014932:	f7fe ff17 	bl	8013764 <__locale_ctype_ptr_l>
 8014936:	4420      	add	r0, r4
 8014938:	7843      	ldrb	r3, [r0, #1]
 801493a:	f013 0308 	ands.w	r3, r3, #8
 801493e:	d130      	bne.n	80149a2 <_strtoul_l.isra.0+0x86>
 8014940:	2c2d      	cmp	r4, #45	; 0x2d
 8014942:	d130      	bne.n	80149a6 <_strtoul_l.isra.0+0x8a>
 8014944:	787c      	ldrb	r4, [r7, #1]
 8014946:	1cbd      	adds	r5, r7, #2
 8014948:	2101      	movs	r1, #1
 801494a:	2e00      	cmp	r6, #0
 801494c:	d05c      	beq.n	8014a08 <_strtoul_l.isra.0+0xec>
 801494e:	2e10      	cmp	r6, #16
 8014950:	d109      	bne.n	8014966 <_strtoul_l.isra.0+0x4a>
 8014952:	2c30      	cmp	r4, #48	; 0x30
 8014954:	d107      	bne.n	8014966 <_strtoul_l.isra.0+0x4a>
 8014956:	782b      	ldrb	r3, [r5, #0]
 8014958:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801495c:	2b58      	cmp	r3, #88	; 0x58
 801495e:	d14e      	bne.n	80149fe <_strtoul_l.isra.0+0xe2>
 8014960:	786c      	ldrb	r4, [r5, #1]
 8014962:	2610      	movs	r6, #16
 8014964:	3502      	adds	r5, #2
 8014966:	f04f 32ff 	mov.w	r2, #4294967295
 801496a:	2300      	movs	r3, #0
 801496c:	fbb2 f2f6 	udiv	r2, r2, r6
 8014970:	fb06 fc02 	mul.w	ip, r6, r2
 8014974:	ea6f 0c0c 	mvn.w	ip, ip
 8014978:	4618      	mov	r0, r3
 801497a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801497e:	2f09      	cmp	r7, #9
 8014980:	d817      	bhi.n	80149b2 <_strtoul_l.isra.0+0x96>
 8014982:	463c      	mov	r4, r7
 8014984:	42a6      	cmp	r6, r4
 8014986:	dd23      	ble.n	80149d0 <_strtoul_l.isra.0+0xb4>
 8014988:	2b00      	cmp	r3, #0
 801498a:	db1e      	blt.n	80149ca <_strtoul_l.isra.0+0xae>
 801498c:	4282      	cmp	r2, r0
 801498e:	d31c      	bcc.n	80149ca <_strtoul_l.isra.0+0xae>
 8014990:	d101      	bne.n	8014996 <_strtoul_l.isra.0+0x7a>
 8014992:	45a4      	cmp	ip, r4
 8014994:	db19      	blt.n	80149ca <_strtoul_l.isra.0+0xae>
 8014996:	fb00 4006 	mla	r0, r0, r6, r4
 801499a:	2301      	movs	r3, #1
 801499c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149a0:	e7eb      	b.n	801497a <_strtoul_l.isra.0+0x5e>
 80149a2:	462f      	mov	r7, r5
 80149a4:	e7c1      	b.n	801492a <_strtoul_l.isra.0+0xe>
 80149a6:	2c2b      	cmp	r4, #43	; 0x2b
 80149a8:	bf04      	itt	eq
 80149aa:	1cbd      	addeq	r5, r7, #2
 80149ac:	787c      	ldrbeq	r4, [r7, #1]
 80149ae:	4619      	mov	r1, r3
 80149b0:	e7cb      	b.n	801494a <_strtoul_l.isra.0+0x2e>
 80149b2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80149b6:	2f19      	cmp	r7, #25
 80149b8:	d801      	bhi.n	80149be <_strtoul_l.isra.0+0xa2>
 80149ba:	3c37      	subs	r4, #55	; 0x37
 80149bc:	e7e2      	b.n	8014984 <_strtoul_l.isra.0+0x68>
 80149be:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80149c2:	2f19      	cmp	r7, #25
 80149c4:	d804      	bhi.n	80149d0 <_strtoul_l.isra.0+0xb4>
 80149c6:	3c57      	subs	r4, #87	; 0x57
 80149c8:	e7dc      	b.n	8014984 <_strtoul_l.isra.0+0x68>
 80149ca:	f04f 33ff 	mov.w	r3, #4294967295
 80149ce:	e7e5      	b.n	801499c <_strtoul_l.isra.0+0x80>
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	da09      	bge.n	80149e8 <_strtoul_l.isra.0+0xcc>
 80149d4:	2322      	movs	r3, #34	; 0x22
 80149d6:	f8c8 3000 	str.w	r3, [r8]
 80149da:	f04f 30ff 	mov.w	r0, #4294967295
 80149de:	f1ba 0f00 	cmp.w	sl, #0
 80149e2:	d107      	bne.n	80149f4 <_strtoul_l.isra.0+0xd8>
 80149e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149e8:	b101      	cbz	r1, 80149ec <_strtoul_l.isra.0+0xd0>
 80149ea:	4240      	negs	r0, r0
 80149ec:	f1ba 0f00 	cmp.w	sl, #0
 80149f0:	d0f8      	beq.n	80149e4 <_strtoul_l.isra.0+0xc8>
 80149f2:	b10b      	cbz	r3, 80149f8 <_strtoul_l.isra.0+0xdc>
 80149f4:	f105 39ff 	add.w	r9, r5, #4294967295
 80149f8:	f8ca 9000 	str.w	r9, [sl]
 80149fc:	e7f2      	b.n	80149e4 <_strtoul_l.isra.0+0xc8>
 80149fe:	2430      	movs	r4, #48	; 0x30
 8014a00:	2e00      	cmp	r6, #0
 8014a02:	d1b0      	bne.n	8014966 <_strtoul_l.isra.0+0x4a>
 8014a04:	2608      	movs	r6, #8
 8014a06:	e7ae      	b.n	8014966 <_strtoul_l.isra.0+0x4a>
 8014a08:	2c30      	cmp	r4, #48	; 0x30
 8014a0a:	d0a4      	beq.n	8014956 <_strtoul_l.isra.0+0x3a>
 8014a0c:	260a      	movs	r6, #10
 8014a0e:	e7aa      	b.n	8014966 <_strtoul_l.isra.0+0x4a>

08014a10 <_strtoul_r>:
 8014a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a12:	4c06      	ldr	r4, [pc, #24]	; (8014a2c <_strtoul_r+0x1c>)
 8014a14:	4d06      	ldr	r5, [pc, #24]	; (8014a30 <_strtoul_r+0x20>)
 8014a16:	6824      	ldr	r4, [r4, #0]
 8014a18:	6a24      	ldr	r4, [r4, #32]
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	bf08      	it	eq
 8014a1e:	462c      	moveq	r4, r5
 8014a20:	9400      	str	r4, [sp, #0]
 8014a22:	f7ff ff7b 	bl	801491c <_strtoul_l.isra.0>
 8014a26:	b003      	add	sp, #12
 8014a28:	bd30      	pop	{r4, r5, pc}
 8014a2a:	bf00      	nop
 8014a2c:	20000e34 	.word	0x20000e34
 8014a30:	20000e98 	.word	0x20000e98

08014a34 <__submore>:
 8014a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a38:	460c      	mov	r4, r1
 8014a3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a40:	4299      	cmp	r1, r3
 8014a42:	d11d      	bne.n	8014a80 <__submore+0x4c>
 8014a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a48:	f7fb ff34 	bl	80108b4 <_malloc_r>
 8014a4c:	b918      	cbnz	r0, 8014a56 <__submore+0x22>
 8014a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8014a5c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014a60:	6360      	str	r0, [r4, #52]	; 0x34
 8014a62:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014a66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014a6a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014a6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014a72:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014a76:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014a7a:	6020      	str	r0, [r4, #0]
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e7e8      	b.n	8014a52 <__submore+0x1e>
 8014a80:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014a82:	0077      	lsls	r7, r6, #1
 8014a84:	463a      	mov	r2, r7
 8014a86:	f000 f81c 	bl	8014ac2 <_realloc_r>
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	2800      	cmp	r0, #0
 8014a8e:	d0de      	beq.n	8014a4e <__submore+0x1a>
 8014a90:	eb00 0806 	add.w	r8, r0, r6
 8014a94:	4601      	mov	r1, r0
 8014a96:	4632      	mov	r2, r6
 8014a98:	4640      	mov	r0, r8
 8014a9a:	f7fb fe91 	bl	80107c0 <memcpy>
 8014a9e:	f8c4 8000 	str.w	r8, [r4]
 8014aa2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014aa6:	e7e9      	b.n	8014a7c <__submore+0x48>

08014aa8 <__ascii_wctomb>:
 8014aa8:	b149      	cbz	r1, 8014abe <__ascii_wctomb+0x16>
 8014aaa:	2aff      	cmp	r2, #255	; 0xff
 8014aac:	bf85      	ittet	hi
 8014aae:	238a      	movhi	r3, #138	; 0x8a
 8014ab0:	6003      	strhi	r3, [r0, #0]
 8014ab2:	700a      	strbls	r2, [r1, #0]
 8014ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ab8:	bf98      	it	ls
 8014aba:	2001      	movls	r0, #1
 8014abc:	4770      	bx	lr
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4770      	bx	lr

08014ac2 <_realloc_r>:
 8014ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac4:	4607      	mov	r7, r0
 8014ac6:	4614      	mov	r4, r2
 8014ac8:	460e      	mov	r6, r1
 8014aca:	b921      	cbnz	r1, 8014ad6 <_realloc_r+0x14>
 8014acc:	4611      	mov	r1, r2
 8014ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ad2:	f7fb beef 	b.w	80108b4 <_malloc_r>
 8014ad6:	b922      	cbnz	r2, 8014ae2 <_realloc_r+0x20>
 8014ad8:	f7fb fe9e 	bl	8010818 <_free_r>
 8014adc:	4625      	mov	r5, r4
 8014ade:	4628      	mov	r0, r5
 8014ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ae2:	f000 f814 	bl	8014b0e <_malloc_usable_size_r>
 8014ae6:	42a0      	cmp	r0, r4
 8014ae8:	d20f      	bcs.n	8014b0a <_realloc_r+0x48>
 8014aea:	4621      	mov	r1, r4
 8014aec:	4638      	mov	r0, r7
 8014aee:	f7fb fee1 	bl	80108b4 <_malloc_r>
 8014af2:	4605      	mov	r5, r0
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d0f2      	beq.n	8014ade <_realloc_r+0x1c>
 8014af8:	4631      	mov	r1, r6
 8014afa:	4622      	mov	r2, r4
 8014afc:	f7fb fe60 	bl	80107c0 <memcpy>
 8014b00:	4631      	mov	r1, r6
 8014b02:	4638      	mov	r0, r7
 8014b04:	f7fb fe88 	bl	8010818 <_free_r>
 8014b08:	e7e9      	b.n	8014ade <_realloc_r+0x1c>
 8014b0a:	4635      	mov	r5, r6
 8014b0c:	e7e7      	b.n	8014ade <_realloc_r+0x1c>

08014b0e <_malloc_usable_size_r>:
 8014b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b12:	1f18      	subs	r0, r3, #4
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	bfbc      	itt	lt
 8014b18:	580b      	ldrlt	r3, [r1, r0]
 8014b1a:	18c0      	addlt	r0, r0, r3
 8014b1c:	4770      	bx	lr
	...

08014b20 <ceilf>:
 8014b20:	ee10 3a10 	vmov	r3, s0
 8014b24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014b28:	0dca      	lsrs	r2, r1, #23
 8014b2a:	3a7f      	subs	r2, #127	; 0x7f
 8014b2c:	2a16      	cmp	r2, #22
 8014b2e:	dc2a      	bgt.n	8014b86 <ceilf+0x66>
 8014b30:	2a00      	cmp	r2, #0
 8014b32:	da11      	bge.n	8014b58 <ceilf+0x38>
 8014b34:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014b98 <ceilf+0x78>
 8014b38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b44:	dd05      	ble.n	8014b52 <ceilf+0x32>
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	db23      	blt.n	8014b92 <ceilf+0x72>
 8014b4a:	2900      	cmp	r1, #0
 8014b4c:	bf18      	it	ne
 8014b4e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8014b52:	ee00 3a10 	vmov	s0, r3
 8014b56:	4770      	bx	lr
 8014b58:	4910      	ldr	r1, [pc, #64]	; (8014b9c <ceilf+0x7c>)
 8014b5a:	4111      	asrs	r1, r2
 8014b5c:	420b      	tst	r3, r1
 8014b5e:	d0fa      	beq.n	8014b56 <ceilf+0x36>
 8014b60:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014b98 <ceilf+0x78>
 8014b64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b70:	ddef      	ble.n	8014b52 <ceilf+0x32>
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	bfc2      	ittt	gt
 8014b76:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8014b7a:	fa40 f202 	asrgt.w	r2, r0, r2
 8014b7e:	189b      	addgt	r3, r3, r2
 8014b80:	ea23 0301 	bic.w	r3, r3, r1
 8014b84:	e7e5      	b.n	8014b52 <ceilf+0x32>
 8014b86:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b8a:	d3e4      	bcc.n	8014b56 <ceilf+0x36>
 8014b8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b90:	4770      	bx	lr
 8014b92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b96:	e7dc      	b.n	8014b52 <ceilf+0x32>
 8014b98:	7149f2ca 	.word	0x7149f2ca
 8014b9c:	007fffff 	.word	0x007fffff

08014ba0 <cosf>:
 8014ba0:	ee10 3a10 	vmov	r3, s0
 8014ba4:	b507      	push	{r0, r1, r2, lr}
 8014ba6:	4a1c      	ldr	r2, [pc, #112]	; (8014c18 <cosf+0x78>)
 8014ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bac:	4293      	cmp	r3, r2
 8014bae:	dc04      	bgt.n	8014bba <cosf+0x1a>
 8014bb0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8014c1c <cosf+0x7c>
 8014bb4:	f000 faa6 	bl	8015104 <__kernel_cosf>
 8014bb8:	e004      	b.n	8014bc4 <cosf+0x24>
 8014bba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014bbe:	db04      	blt.n	8014bca <cosf+0x2a>
 8014bc0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014bc4:	b003      	add	sp, #12
 8014bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bca:	4668      	mov	r0, sp
 8014bcc:	f000 f96a 	bl	8014ea4 <__ieee754_rem_pio2f>
 8014bd0:	f000 0003 	and.w	r0, r0, #3
 8014bd4:	2801      	cmp	r0, #1
 8014bd6:	d007      	beq.n	8014be8 <cosf+0x48>
 8014bd8:	2802      	cmp	r0, #2
 8014bda:	d00e      	beq.n	8014bfa <cosf+0x5a>
 8014bdc:	b9a0      	cbnz	r0, 8014c08 <cosf+0x68>
 8014bde:	eddd 0a01 	vldr	s1, [sp, #4]
 8014be2:	ed9d 0a00 	vldr	s0, [sp]
 8014be6:	e7e5      	b.n	8014bb4 <cosf+0x14>
 8014be8:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bec:	ed9d 0a00 	vldr	s0, [sp]
 8014bf0:	f000 fd68 	bl	80156c4 <__kernel_sinf>
 8014bf4:	eeb1 0a40 	vneg.f32	s0, s0
 8014bf8:	e7e4      	b.n	8014bc4 <cosf+0x24>
 8014bfa:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bfe:	ed9d 0a00 	vldr	s0, [sp]
 8014c02:	f000 fa7f 	bl	8015104 <__kernel_cosf>
 8014c06:	e7f5      	b.n	8014bf4 <cosf+0x54>
 8014c08:	2001      	movs	r0, #1
 8014c0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c0e:	ed9d 0a00 	vldr	s0, [sp]
 8014c12:	f000 fd57 	bl	80156c4 <__kernel_sinf>
 8014c16:	e7d5      	b.n	8014bc4 <cosf+0x24>
 8014c18:	3f490fd8 	.word	0x3f490fd8
 8014c1c:	00000000 	.word	0x00000000

08014c20 <sinf>:
 8014c20:	ee10 3a10 	vmov	r3, s0
 8014c24:	b507      	push	{r0, r1, r2, lr}
 8014c26:	4a1d      	ldr	r2, [pc, #116]	; (8014c9c <sinf+0x7c>)
 8014c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	dc05      	bgt.n	8014c3c <sinf+0x1c>
 8014c30:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8014ca0 <sinf+0x80>
 8014c34:	2000      	movs	r0, #0
 8014c36:	f000 fd45 	bl	80156c4 <__kernel_sinf>
 8014c3a:	e004      	b.n	8014c46 <sinf+0x26>
 8014c3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c40:	db04      	blt.n	8014c4c <sinf+0x2c>
 8014c42:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014c46:	b003      	add	sp, #12
 8014c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c4c:	4668      	mov	r0, sp
 8014c4e:	f000 f929 	bl	8014ea4 <__ieee754_rem_pio2f>
 8014c52:	f000 0003 	and.w	r0, r0, #3
 8014c56:	2801      	cmp	r0, #1
 8014c58:	d008      	beq.n	8014c6c <sinf+0x4c>
 8014c5a:	2802      	cmp	r0, #2
 8014c5c:	d00d      	beq.n	8014c7a <sinf+0x5a>
 8014c5e:	b9b0      	cbnz	r0, 8014c8e <sinf+0x6e>
 8014c60:	2001      	movs	r0, #1
 8014c62:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c66:	ed9d 0a00 	vldr	s0, [sp]
 8014c6a:	e7e4      	b.n	8014c36 <sinf+0x16>
 8014c6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c70:	ed9d 0a00 	vldr	s0, [sp]
 8014c74:	f000 fa46 	bl	8015104 <__kernel_cosf>
 8014c78:	e7e5      	b.n	8014c46 <sinf+0x26>
 8014c7a:	2001      	movs	r0, #1
 8014c7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c80:	ed9d 0a00 	vldr	s0, [sp]
 8014c84:	f000 fd1e 	bl	80156c4 <__kernel_sinf>
 8014c88:	eeb1 0a40 	vneg.f32	s0, s0
 8014c8c:	e7db      	b.n	8014c46 <sinf+0x26>
 8014c8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c92:	ed9d 0a00 	vldr	s0, [sp]
 8014c96:	f000 fa35 	bl	8015104 <__kernel_cosf>
 8014c9a:	e7f5      	b.n	8014c88 <sinf+0x68>
 8014c9c:	3f490fd8 	.word	0x3f490fd8
 8014ca0:	00000000 	.word	0x00000000

08014ca4 <atan2f>:
 8014ca4:	f000 b850 	b.w	8014d48 <__ieee754_atan2f>

08014ca8 <sqrtf>:
 8014ca8:	b510      	push	{r4, lr}
 8014caa:	ed2d 8b02 	vpush	{d8}
 8014cae:	b08a      	sub	sp, #40	; 0x28
 8014cb0:	eeb0 8a40 	vmov.f32	s16, s0
 8014cb4:	f000 fa22 	bl	80150fc <__ieee754_sqrtf>
 8014cb8:	4b21      	ldr	r3, [pc, #132]	; (8014d40 <sqrtf+0x98>)
 8014cba:	f993 4000 	ldrsb.w	r4, [r3]
 8014cbe:	1c63      	adds	r3, r4, #1
 8014cc0:	d02c      	beq.n	8014d1c <sqrtf+0x74>
 8014cc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8014cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cca:	d627      	bvs.n	8014d1c <sqrtf+0x74>
 8014ccc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd4:	d522      	bpl.n	8014d1c <sqrtf+0x74>
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	4b1a      	ldr	r3, [pc, #104]	; (8014d44 <sqrtf+0x9c>)
 8014cdc:	9301      	str	r3, [sp, #4]
 8014cde:	ee18 0a10 	vmov	r0, s16
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	9308      	str	r3, [sp, #32]
 8014ce6:	f7eb fc3f 	bl	8000568 <__aeabi_f2d>
 8014cea:	2200      	movs	r2, #0
 8014cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	b9ac      	cbnz	r4, 8014d24 <sqrtf+0x7c>
 8014cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014cfc:	4668      	mov	r0, sp
 8014cfe:	f000 fd29 	bl	8015754 <matherr>
 8014d02:	b1b8      	cbz	r0, 8014d34 <sqrtf+0x8c>
 8014d04:	9b08      	ldr	r3, [sp, #32]
 8014d06:	b11b      	cbz	r3, 8014d10 <sqrtf+0x68>
 8014d08:	f7fb fd20 	bl	801074c <__errno>
 8014d0c:	9b08      	ldr	r3, [sp, #32]
 8014d0e:	6003      	str	r3, [r0, #0]
 8014d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d14:	f7eb ff78 	bl	8000c08 <__aeabi_d2f>
 8014d18:	ee00 0a10 	vmov	s0, r0
 8014d1c:	b00a      	add	sp, #40	; 0x28
 8014d1e:	ecbd 8b02 	vpop	{d8}
 8014d22:	bd10      	pop	{r4, pc}
 8014d24:	4610      	mov	r0, r2
 8014d26:	4619      	mov	r1, r3
 8014d28:	f7eb fda0 	bl	800086c <__aeabi_ddiv>
 8014d2c:	2c02      	cmp	r4, #2
 8014d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014d32:	d1e3      	bne.n	8014cfc <sqrtf+0x54>
 8014d34:	f7fb fd0a 	bl	801074c <__errno>
 8014d38:	2321      	movs	r3, #33	; 0x21
 8014d3a:	6003      	str	r3, [r0, #0]
 8014d3c:	e7e2      	b.n	8014d04 <sqrtf+0x5c>
 8014d3e:	bf00      	nop
 8014d40:	20001004 	.word	0x20001004
 8014d44:	080162a4 	.word	0x080162a4

08014d48 <__ieee754_atan2f>:
 8014d48:	ee10 2a90 	vmov	r2, s1
 8014d4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014d50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014d54:	b510      	push	{r4, lr}
 8014d56:	eef0 7a40 	vmov.f32	s15, s0
 8014d5a:	dc06      	bgt.n	8014d6a <__ieee754_atan2f+0x22>
 8014d5c:	ee10 0a10 	vmov	r0, s0
 8014d60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014d64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d68:	dd04      	ble.n	8014d74 <__ieee754_atan2f+0x2c>
 8014d6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8014d72:	bd10      	pop	{r4, pc}
 8014d74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014d78:	d103      	bne.n	8014d82 <__ieee754_atan2f+0x3a>
 8014d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d7e:	f000 bceb 	b.w	8015758 <atanf>
 8014d82:	1794      	asrs	r4, r2, #30
 8014d84:	f004 0402 	and.w	r4, r4, #2
 8014d88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014d8c:	b943      	cbnz	r3, 8014da0 <__ieee754_atan2f+0x58>
 8014d8e:	2c02      	cmp	r4, #2
 8014d90:	d06e      	beq.n	8014e70 <__ieee754_atan2f+0x128>
 8014d92:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014e78 <__ieee754_atan2f+0x130>
 8014d96:	2c03      	cmp	r4, #3
 8014d98:	bf08      	it	eq
 8014d9a:	eef0 7a47 	vmoveq.f32	s15, s14
 8014d9e:	e7e6      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014da0:	b941      	cbnz	r1, 8014db4 <__ieee754_atan2f+0x6c>
 8014da2:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014e7c <__ieee754_atan2f+0x134>
 8014da6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014e80 <__ieee754_atan2f+0x138>
 8014daa:	2800      	cmp	r0, #0
 8014dac:	bfb8      	it	lt
 8014dae:	eef0 7a47 	vmovlt.f32	s15, s14
 8014db2:	e7dc      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014db4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014db8:	d122      	bne.n	8014e00 <__ieee754_atan2f+0xb8>
 8014dba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014dbe:	d112      	bne.n	8014de6 <__ieee754_atan2f+0x9e>
 8014dc0:	2c02      	cmp	r4, #2
 8014dc2:	d00a      	beq.n	8014dda <__ieee754_atan2f+0x92>
 8014dc4:	2c03      	cmp	r4, #3
 8014dc6:	d00b      	beq.n	8014de0 <__ieee754_atan2f+0x98>
 8014dc8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014e84 <__ieee754_atan2f+0x13c>
 8014dcc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8014e88 <__ieee754_atan2f+0x140>
 8014dd0:	2c01      	cmp	r4, #1
 8014dd2:	bf18      	it	ne
 8014dd4:	eef0 7a47 	vmovne.f32	s15, s14
 8014dd8:	e7c9      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014dda:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014e8c <__ieee754_atan2f+0x144>
 8014dde:	e7c6      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014de0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014e90 <__ieee754_atan2f+0x148>
 8014de4:	e7c3      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014de6:	2c02      	cmp	r4, #2
 8014de8:	d042      	beq.n	8014e70 <__ieee754_atan2f+0x128>
 8014dea:	2c03      	cmp	r4, #3
 8014dec:	d005      	beq.n	8014dfa <__ieee754_atan2f+0xb2>
 8014dee:	2c01      	cmp	r4, #1
 8014df0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014e94 <__ieee754_atan2f+0x14c>
 8014df4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014e98 <__ieee754_atan2f+0x150>
 8014df8:	e7eb      	b.n	8014dd2 <__ieee754_atan2f+0x8a>
 8014dfa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014e78 <__ieee754_atan2f+0x130>
 8014dfe:	e7b6      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014e00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e04:	d0cd      	beq.n	8014da2 <__ieee754_atan2f+0x5a>
 8014e06:	1a5b      	subs	r3, r3, r1
 8014e08:	15db      	asrs	r3, r3, #23
 8014e0a:	2b3c      	cmp	r3, #60	; 0x3c
 8014e0c:	dc1a      	bgt.n	8014e44 <__ieee754_atan2f+0xfc>
 8014e0e:	2a00      	cmp	r2, #0
 8014e10:	da01      	bge.n	8014e16 <__ieee754_atan2f+0xce>
 8014e12:	333c      	adds	r3, #60	; 0x3c
 8014e14:	db19      	blt.n	8014e4a <__ieee754_atan2f+0x102>
 8014e16:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014e1a:	f000 fd71 	bl	8015900 <fabsf>
 8014e1e:	f000 fc9b 	bl	8015758 <atanf>
 8014e22:	eef0 7a40 	vmov.f32	s15, s0
 8014e26:	2c01      	cmp	r4, #1
 8014e28:	d012      	beq.n	8014e50 <__ieee754_atan2f+0x108>
 8014e2a:	2c02      	cmp	r4, #2
 8014e2c:	d017      	beq.n	8014e5e <__ieee754_atan2f+0x116>
 8014e2e:	2c00      	cmp	r4, #0
 8014e30:	d09d      	beq.n	8014d6e <__ieee754_atan2f+0x26>
 8014e32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014e9c <__ieee754_atan2f+0x154>
 8014e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e3a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014ea0 <__ieee754_atan2f+0x158>
 8014e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e42:	e794      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014e44:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e7c <__ieee754_atan2f+0x134>
 8014e48:	e7ed      	b.n	8014e26 <__ieee754_atan2f+0xde>
 8014e4a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014e98 <__ieee754_atan2f+0x150>
 8014e4e:	e7ea      	b.n	8014e26 <__ieee754_atan2f+0xde>
 8014e50:	ee17 3a90 	vmov	r3, s15
 8014e54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014e58:	ee07 3a90 	vmov	s15, r3
 8014e5c:	e787      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014e5e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014e9c <__ieee754_atan2f+0x154>
 8014e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e66:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014ea0 <__ieee754_atan2f+0x158>
 8014e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e6e:	e77e      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014e70:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014ea0 <__ieee754_atan2f+0x158>
 8014e74:	e77b      	b.n	8014d6e <__ieee754_atan2f+0x26>
 8014e76:	bf00      	nop
 8014e78:	c0490fdb 	.word	0xc0490fdb
 8014e7c:	3fc90fdb 	.word	0x3fc90fdb
 8014e80:	bfc90fdb 	.word	0xbfc90fdb
 8014e84:	bf490fdb 	.word	0xbf490fdb
 8014e88:	3f490fdb 	.word	0x3f490fdb
 8014e8c:	4016cbe4 	.word	0x4016cbe4
 8014e90:	c016cbe4 	.word	0xc016cbe4
 8014e94:	80000000 	.word	0x80000000
 8014e98:	00000000 	.word	0x00000000
 8014e9c:	33bbbd2e 	.word	0x33bbbd2e
 8014ea0:	40490fdb 	.word	0x40490fdb

08014ea4 <__ieee754_rem_pio2f>:
 8014ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ea6:	ee10 6a10 	vmov	r6, s0
 8014eaa:	4b86      	ldr	r3, [pc, #536]	; (80150c4 <__ieee754_rem_pio2f+0x220>)
 8014eac:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8014eb0:	429c      	cmp	r4, r3
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	4605      	mov	r5, r0
 8014eb6:	dc05      	bgt.n	8014ec4 <__ieee754_rem_pio2f+0x20>
 8014eb8:	2300      	movs	r3, #0
 8014eba:	ed85 0a00 	vstr	s0, [r5]
 8014ebe:	6043      	str	r3, [r0, #4]
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	e020      	b.n	8014f06 <__ieee754_rem_pio2f+0x62>
 8014ec4:	4b80      	ldr	r3, [pc, #512]	; (80150c8 <__ieee754_rem_pio2f+0x224>)
 8014ec6:	429c      	cmp	r4, r3
 8014ec8:	dc38      	bgt.n	8014f3c <__ieee754_rem_pio2f+0x98>
 8014eca:	2e00      	cmp	r6, #0
 8014ecc:	f024 040f 	bic.w	r4, r4, #15
 8014ed0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80150cc <__ieee754_rem_pio2f+0x228>
 8014ed4:	4b7e      	ldr	r3, [pc, #504]	; (80150d0 <__ieee754_rem_pio2f+0x22c>)
 8014ed6:	dd18      	ble.n	8014f0a <__ieee754_rem_pio2f+0x66>
 8014ed8:	429c      	cmp	r4, r3
 8014eda:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014ede:	bf09      	itett	eq
 8014ee0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80150d4 <__ieee754_rem_pio2f+0x230>
 8014ee4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80150d8 <__ieee754_rem_pio2f+0x234>
 8014ee8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014eec:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80150dc <__ieee754_rem_pio2f+0x238>
 8014ef0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014ef4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014ef8:	edc0 6a00 	vstr	s13, [r0]
 8014efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f00:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f04:	2001      	movs	r0, #1
 8014f06:	b007      	add	sp, #28
 8014f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f0a:	429c      	cmp	r4, r3
 8014f0c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014f10:	bf09      	itett	eq
 8014f12:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80150d4 <__ieee754_rem_pio2f+0x230>
 8014f16:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80150d8 <__ieee754_rem_pio2f+0x234>
 8014f1a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014f1e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80150dc <__ieee754_rem_pio2f+0x238>
 8014f22:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014f26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014f2a:	edc0 6a00 	vstr	s13, [r0]
 8014f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f32:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f36:	f04f 30ff 	mov.w	r0, #4294967295
 8014f3a:	e7e4      	b.n	8014f06 <__ieee754_rem_pio2f+0x62>
 8014f3c:	4b68      	ldr	r3, [pc, #416]	; (80150e0 <__ieee754_rem_pio2f+0x23c>)
 8014f3e:	429c      	cmp	r4, r3
 8014f40:	dc71      	bgt.n	8015026 <__ieee754_rem_pio2f+0x182>
 8014f42:	f000 fcdd 	bl	8015900 <fabsf>
 8014f46:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80150e4 <__ieee754_rem_pio2f+0x240>
 8014f4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014f4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f56:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014f5a:	ee17 0a90 	vmov	r0, s15
 8014f5e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80150cc <__ieee754_rem_pio2f+0x228>
 8014f62:	eeb1 7a46 	vneg.f32	s14, s12
 8014f66:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014f6a:	281f      	cmp	r0, #31
 8014f6c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80150d8 <__ieee754_rem_pio2f+0x234>
 8014f70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014f74:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014f78:	ee16 3a90 	vmov	r3, s13
 8014f7c:	dc1c      	bgt.n	8014fb8 <__ieee754_rem_pio2f+0x114>
 8014f7e:	1e47      	subs	r7, r0, #1
 8014f80:	4959      	ldr	r1, [pc, #356]	; (80150e8 <__ieee754_rem_pio2f+0x244>)
 8014f82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014f86:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8014f8a:	428a      	cmp	r2, r1
 8014f8c:	d014      	beq.n	8014fb8 <__ieee754_rem_pio2f+0x114>
 8014f8e:	602b      	str	r3, [r5, #0]
 8014f90:	ed95 7a00 	vldr	s14, [r5]
 8014f94:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014f98:	2e00      	cmp	r6, #0
 8014f9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f9e:	ed85 0a01 	vstr	s0, [r5, #4]
 8014fa2:	dab0      	bge.n	8014f06 <__ieee754_rem_pio2f+0x62>
 8014fa4:	eeb1 7a47 	vneg.f32	s14, s14
 8014fa8:	eeb1 0a40 	vneg.f32	s0, s0
 8014fac:	ed85 7a00 	vstr	s14, [r5]
 8014fb0:	ed85 0a01 	vstr	s0, [r5, #4]
 8014fb4:	4240      	negs	r0, r0
 8014fb6:	e7a6      	b.n	8014f06 <__ieee754_rem_pio2f+0x62>
 8014fb8:	15e4      	asrs	r4, r4, #23
 8014fba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014fbe:	1aa2      	subs	r2, r4, r2
 8014fc0:	2a08      	cmp	r2, #8
 8014fc2:	dde4      	ble.n	8014f8e <__ieee754_rem_pio2f+0xea>
 8014fc4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80150d4 <__ieee754_rem_pio2f+0x230>
 8014fc8:	eef0 6a40 	vmov.f32	s13, s0
 8014fcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014fd0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014fd4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014fd8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80150dc <__ieee754_rem_pio2f+0x238>
 8014fdc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8014fe0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8014fe4:	eef0 7a40 	vmov.f32	s15, s0
 8014fe8:	ee15 3a90 	vmov	r3, s11
 8014fec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ff0:	1aa4      	subs	r4, r4, r2
 8014ff2:	2c19      	cmp	r4, #25
 8014ff4:	dc04      	bgt.n	8015000 <__ieee754_rem_pio2f+0x15c>
 8014ff6:	edc5 5a00 	vstr	s11, [r5]
 8014ffa:	eeb0 0a66 	vmov.f32	s0, s13
 8014ffe:	e7c7      	b.n	8014f90 <__ieee754_rem_pio2f+0xec>
 8015000:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80150ec <__ieee754_rem_pio2f+0x248>
 8015004:	eeb0 0a66 	vmov.f32	s0, s13
 8015008:	eea7 0a25 	vfma.f32	s0, s14, s11
 801500c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015010:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015014:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80150f0 <__ieee754_rem_pio2f+0x24c>
 8015018:	eed6 7a07 	vfnms.f32	s15, s12, s14
 801501c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015020:	ed85 7a00 	vstr	s14, [r5]
 8015024:	e7b4      	b.n	8014f90 <__ieee754_rem_pio2f+0xec>
 8015026:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801502a:	db06      	blt.n	801503a <__ieee754_rem_pio2f+0x196>
 801502c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015030:	edc0 7a01 	vstr	s15, [r0, #4]
 8015034:	edc0 7a00 	vstr	s15, [r0]
 8015038:	e742      	b.n	8014ec0 <__ieee754_rem_pio2f+0x1c>
 801503a:	15e2      	asrs	r2, r4, #23
 801503c:	3a86      	subs	r2, #134	; 0x86
 801503e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8015042:	ee07 3a90 	vmov	s15, r3
 8015046:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801504a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80150f4 <__ieee754_rem_pio2f+0x250>
 801504e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015056:	ed8d 7a03 	vstr	s14, [sp, #12]
 801505a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801505e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015062:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801506a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801506e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015072:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507a:	edcd 7a05 	vstr	s15, [sp, #20]
 801507e:	d11e      	bne.n	80150be <__ieee754_rem_pio2f+0x21a>
 8015080:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015088:	bf0c      	ite	eq
 801508a:	2301      	moveq	r3, #1
 801508c:	2302      	movne	r3, #2
 801508e:	491a      	ldr	r1, [pc, #104]	; (80150f8 <__ieee754_rem_pio2f+0x254>)
 8015090:	9101      	str	r1, [sp, #4]
 8015092:	2102      	movs	r1, #2
 8015094:	9100      	str	r1, [sp, #0]
 8015096:	a803      	add	r0, sp, #12
 8015098:	4629      	mov	r1, r5
 801509a:	f000 f891 	bl	80151c0 <__kernel_rem_pio2f>
 801509e:	2e00      	cmp	r6, #0
 80150a0:	f6bf af31 	bge.w	8014f06 <__ieee754_rem_pio2f+0x62>
 80150a4:	edd5 7a00 	vldr	s15, [r5]
 80150a8:	eef1 7a67 	vneg.f32	s15, s15
 80150ac:	edc5 7a00 	vstr	s15, [r5]
 80150b0:	edd5 7a01 	vldr	s15, [r5, #4]
 80150b4:	eef1 7a67 	vneg.f32	s15, s15
 80150b8:	edc5 7a01 	vstr	s15, [r5, #4]
 80150bc:	e77a      	b.n	8014fb4 <__ieee754_rem_pio2f+0x110>
 80150be:	2303      	movs	r3, #3
 80150c0:	e7e5      	b.n	801508e <__ieee754_rem_pio2f+0x1ea>
 80150c2:	bf00      	nop
 80150c4:	3f490fd8 	.word	0x3f490fd8
 80150c8:	4016cbe3 	.word	0x4016cbe3
 80150cc:	3fc90f80 	.word	0x3fc90f80
 80150d0:	3fc90fd0 	.word	0x3fc90fd0
 80150d4:	37354400 	.word	0x37354400
 80150d8:	37354443 	.word	0x37354443
 80150dc:	2e85a308 	.word	0x2e85a308
 80150e0:	43490f80 	.word	0x43490f80
 80150e4:	3f22f984 	.word	0x3f22f984
 80150e8:	080162ac 	.word	0x080162ac
 80150ec:	2e85a300 	.word	0x2e85a300
 80150f0:	248d3132 	.word	0x248d3132
 80150f4:	43800000 	.word	0x43800000
 80150f8:	0801632c 	.word	0x0801632c

080150fc <__ieee754_sqrtf>:
 80150fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015100:	4770      	bx	lr
	...

08015104 <__kernel_cosf>:
 8015104:	ee10 3a10 	vmov	r3, s0
 8015108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801510c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015114:	da05      	bge.n	8015122 <__kernel_cosf+0x1e>
 8015116:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801511a:	ee17 2a90 	vmov	r2, s15
 801511e:	2a00      	cmp	r2, #0
 8015120:	d03b      	beq.n	801519a <__kernel_cosf+0x96>
 8015122:	ee20 6a00 	vmul.f32	s12, s0, s0
 8015126:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801512a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80151a0 <__kernel_cosf+0x9c>
 801512e:	4a1d      	ldr	r2, [pc, #116]	; (80151a4 <__kernel_cosf+0xa0>)
 8015130:	ee66 7a07 	vmul.f32	s15, s12, s14
 8015134:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80151a8 <__kernel_cosf+0xa4>
 8015138:	eea6 7a25 	vfma.f32	s14, s12, s11
 801513c:	4293      	cmp	r3, r2
 801513e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80151ac <__kernel_cosf+0xa8>
 8015142:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015146:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80151b0 <__kernel_cosf+0xac>
 801514a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801514e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80151b4 <__kernel_cosf+0xb0>
 8015152:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015156:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80151b8 <__kernel_cosf+0xb4>
 801515a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801515e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8015162:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015166:	eee6 0a07 	vfma.f32	s1, s12, s14
 801516a:	dc04      	bgt.n	8015176 <__kernel_cosf+0x72>
 801516c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8015170:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8015174:	4770      	bx	lr
 8015176:	4a11      	ldr	r2, [pc, #68]	; (80151bc <__kernel_cosf+0xb8>)
 8015178:	4293      	cmp	r3, r2
 801517a:	bfda      	itte	le
 801517c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015180:	ee07 3a10 	vmovle	s14, r3
 8015184:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8015188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801518c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8015190:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015194:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015198:	4770      	bx	lr
 801519a:	eeb0 0a66 	vmov.f32	s0, s13
 801519e:	4770      	bx	lr
 80151a0:	ad47d74e 	.word	0xad47d74e
 80151a4:	3e999999 	.word	0x3e999999
 80151a8:	310f74f6 	.word	0x310f74f6
 80151ac:	b493f27c 	.word	0xb493f27c
 80151b0:	37d00d01 	.word	0x37d00d01
 80151b4:	bab60b61 	.word	0xbab60b61
 80151b8:	3d2aaaab 	.word	0x3d2aaaab
 80151bc:	3f480000 	.word	0x3f480000

080151c0 <__kernel_rem_pio2f>:
 80151c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c4:	ed2d 8b04 	vpush	{d8-d9}
 80151c8:	b0d7      	sub	sp, #348	; 0x15c
 80151ca:	469b      	mov	fp, r3
 80151cc:	460e      	mov	r6, r1
 80151ce:	4bbe      	ldr	r3, [pc, #760]	; (80154c8 <__kernel_rem_pio2f+0x308>)
 80151d0:	9964      	ldr	r1, [sp, #400]	; 0x190
 80151d2:	9002      	str	r0, [sp, #8]
 80151d4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80151d8:	9865      	ldr	r0, [sp, #404]	; 0x194
 80151da:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80154d8 <__kernel_rem_pio2f+0x318>
 80151de:	1ed1      	subs	r1, r2, #3
 80151e0:	2308      	movs	r3, #8
 80151e2:	fb91 f1f3 	sdiv	r1, r1, r3
 80151e6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80151ea:	f10b 3aff 	add.w	sl, fp, #4294967295
 80151ee:	1c4c      	adds	r4, r1, #1
 80151f0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80151f4:	eba1 050a 	sub.w	r5, r1, sl
 80151f8:	aa1a      	add	r2, sp, #104	; 0x68
 80151fa:	eb09 070a 	add.w	r7, r9, sl
 80151fe:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8015202:	4696      	mov	lr, r2
 8015204:	2300      	movs	r3, #0
 8015206:	42bb      	cmp	r3, r7
 8015208:	dd0f      	ble.n	801522a <__kernel_rem_pio2f+0x6a>
 801520a:	af42      	add	r7, sp, #264	; 0x108
 801520c:	2200      	movs	r2, #0
 801520e:	454a      	cmp	r2, r9
 8015210:	dc27      	bgt.n	8015262 <__kernel_rem_pio2f+0xa2>
 8015212:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8015216:	eb0b 0302 	add.w	r3, fp, r2
 801521a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801521e:	9d02      	ldr	r5, [sp, #8]
 8015220:	eddf 7aad 	vldr	s15, [pc, #692]	; 80154d8 <__kernel_rem_pio2f+0x318>
 8015224:	f04f 0c00 	mov.w	ip, #0
 8015228:	e015      	b.n	8015256 <__kernel_rem_pio2f+0x96>
 801522a:	42dd      	cmn	r5, r3
 801522c:	bf5d      	ittte	pl
 801522e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8015232:	ee07 2a90 	vmovpl	s15, r2
 8015236:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801523a:	eef0 7a47 	vmovmi.f32	s15, s14
 801523e:	ecee 7a01 	vstmia	lr!, {s15}
 8015242:	3301      	adds	r3, #1
 8015244:	e7df      	b.n	8015206 <__kernel_rem_pio2f+0x46>
 8015246:	ecf5 6a01 	vldmia	r5!, {s13}
 801524a:	ed33 7a01 	vldmdb	r3!, {s14}
 801524e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015252:	f10c 0c01 	add.w	ip, ip, #1
 8015256:	45d4      	cmp	ip, sl
 8015258:	ddf5      	ble.n	8015246 <__kernel_rem_pio2f+0x86>
 801525a:	ece7 7a01 	vstmia	r7!, {s15}
 801525e:	3201      	adds	r2, #1
 8015260:	e7d5      	b.n	801520e <__kernel_rem_pio2f+0x4e>
 8015262:	ab06      	add	r3, sp, #24
 8015264:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015268:	9304      	str	r3, [sp, #16]
 801526a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80154d4 <__kernel_rem_pio2f+0x314>
 801526e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80154d0 <__kernel_rem_pio2f+0x310>
 8015272:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8015276:	9303      	str	r3, [sp, #12]
 8015278:	464d      	mov	r5, r9
 801527a:	ab56      	add	r3, sp, #344	; 0x158
 801527c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8015280:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8015284:	3f01      	subs	r7, #1
 8015286:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801528a:	00bf      	lsls	r7, r7, #2
 801528c:	ab56      	add	r3, sp, #344	; 0x158
 801528e:	19da      	adds	r2, r3, r7
 8015290:	3a4c      	subs	r2, #76	; 0x4c
 8015292:	2300      	movs	r3, #0
 8015294:	1ae9      	subs	r1, r5, r3
 8015296:	2900      	cmp	r1, #0
 8015298:	dc4c      	bgt.n	8015334 <__kernel_rem_pio2f+0x174>
 801529a:	4620      	mov	r0, r4
 801529c:	f000 fb7a 	bl	8015994 <scalbnf>
 80152a0:	eeb0 8a40 	vmov.f32	s16, s0
 80152a4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80152a8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80152ac:	f000 fb30 	bl	8015910 <floorf>
 80152b0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80152b4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80152b8:	2c00      	cmp	r4, #0
 80152ba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80152be:	edcd 7a01 	vstr	s15, [sp, #4]
 80152c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80152ca:	dd48      	ble.n	801535e <__kernel_rem_pio2f+0x19e>
 80152cc:	1e69      	subs	r1, r5, #1
 80152ce:	ab06      	add	r3, sp, #24
 80152d0:	f1c4 0008 	rsb	r0, r4, #8
 80152d4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80152d8:	9a01      	ldr	r2, [sp, #4]
 80152da:	fa4c f300 	asr.w	r3, ip, r0
 80152de:	441a      	add	r2, r3
 80152e0:	4083      	lsls	r3, r0
 80152e2:	9201      	str	r2, [sp, #4]
 80152e4:	ebac 0203 	sub.w	r2, ip, r3
 80152e8:	ab06      	add	r3, sp, #24
 80152ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80152ee:	f1c4 0307 	rsb	r3, r4, #7
 80152f2:	fa42 f803 	asr.w	r8, r2, r3
 80152f6:	f1b8 0f00 	cmp.w	r8, #0
 80152fa:	dd41      	ble.n	8015380 <__kernel_rem_pio2f+0x1c0>
 80152fc:	9b01      	ldr	r3, [sp, #4]
 80152fe:	2000      	movs	r0, #0
 8015300:	3301      	adds	r3, #1
 8015302:	9301      	str	r3, [sp, #4]
 8015304:	4601      	mov	r1, r0
 8015306:	4285      	cmp	r5, r0
 8015308:	dc6d      	bgt.n	80153e6 <__kernel_rem_pio2f+0x226>
 801530a:	2c00      	cmp	r4, #0
 801530c:	dd04      	ble.n	8015318 <__kernel_rem_pio2f+0x158>
 801530e:	2c01      	cmp	r4, #1
 8015310:	d07e      	beq.n	8015410 <__kernel_rem_pio2f+0x250>
 8015312:	2c02      	cmp	r4, #2
 8015314:	f000 8086 	beq.w	8015424 <__kernel_rem_pio2f+0x264>
 8015318:	f1b8 0f02 	cmp.w	r8, #2
 801531c:	d130      	bne.n	8015380 <__kernel_rem_pio2f+0x1c0>
 801531e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015322:	ee30 8a48 	vsub.f32	s16, s0, s16
 8015326:	b359      	cbz	r1, 8015380 <__kernel_rem_pio2f+0x1c0>
 8015328:	4620      	mov	r0, r4
 801532a:	f000 fb33 	bl	8015994 <scalbnf>
 801532e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015332:	e025      	b.n	8015380 <__kernel_rem_pio2f+0x1c0>
 8015334:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015338:	a806      	add	r0, sp, #24
 801533a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801533e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015342:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015346:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801534a:	ee10 1a10 	vmov	r1, s0
 801534e:	ed32 0a01 	vldmdb	r2!, {s0}
 8015352:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8015356:	ee37 0a80 	vadd.f32	s0, s15, s0
 801535a:	3301      	adds	r3, #1
 801535c:	e79a      	b.n	8015294 <__kernel_rem_pio2f+0xd4>
 801535e:	d106      	bne.n	801536e <__kernel_rem_pio2f+0x1ae>
 8015360:	1e6b      	subs	r3, r5, #1
 8015362:	aa06      	add	r2, sp, #24
 8015364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015368:	ea4f 2822 	mov.w	r8, r2, asr #8
 801536c:	e7c3      	b.n	80152f6 <__kernel_rem_pio2f+0x136>
 801536e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015372:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	da31      	bge.n	80153e0 <__kernel_rem_pio2f+0x220>
 801537c:	f04f 0800 	mov.w	r8, #0
 8015380:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015388:	f040 80a8 	bne.w	80154dc <__kernel_rem_pio2f+0x31c>
 801538c:	1e6b      	subs	r3, r5, #1
 801538e:	4618      	mov	r0, r3
 8015390:	2200      	movs	r2, #0
 8015392:	4548      	cmp	r0, r9
 8015394:	da4d      	bge.n	8015432 <__kernel_rem_pio2f+0x272>
 8015396:	2a00      	cmp	r2, #0
 8015398:	f000 8087 	beq.w	80154aa <__kernel_rem_pio2f+0x2ea>
 801539c:	aa06      	add	r2, sp, #24
 801539e:	3c08      	subs	r4, #8
 80153a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80153a4:	2900      	cmp	r1, #0
 80153a6:	f000 808d 	beq.w	80154c4 <__kernel_rem_pio2f+0x304>
 80153aa:	4620      	mov	r0, r4
 80153ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80153b0:	9302      	str	r3, [sp, #8]
 80153b2:	f000 faef 	bl	8015994 <scalbnf>
 80153b6:	9b02      	ldr	r3, [sp, #8]
 80153b8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80154d4 <__kernel_rem_pio2f+0x314>
 80153bc:	0099      	lsls	r1, r3, #2
 80153be:	aa42      	add	r2, sp, #264	; 0x108
 80153c0:	1850      	adds	r0, r2, r1
 80153c2:	1d05      	adds	r5, r0, #4
 80153c4:	461c      	mov	r4, r3
 80153c6:	2c00      	cmp	r4, #0
 80153c8:	f280 80b8 	bge.w	801553c <__kernel_rem_pio2f+0x37c>
 80153cc:	2500      	movs	r5, #0
 80153ce:	1b5c      	subs	r4, r3, r5
 80153d0:	2c00      	cmp	r4, #0
 80153d2:	f2c0 80d8 	blt.w	8015586 <__kernel_rem_pio2f+0x3c6>
 80153d6:	4f3d      	ldr	r7, [pc, #244]	; (80154cc <__kernel_rem_pio2f+0x30c>)
 80153d8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80154d8 <__kernel_rem_pio2f+0x318>
 80153dc:	2400      	movs	r4, #0
 80153de:	e0c6      	b.n	801556e <__kernel_rem_pio2f+0x3ae>
 80153e0:	f04f 0802 	mov.w	r8, #2
 80153e4:	e78a      	b.n	80152fc <__kernel_rem_pio2f+0x13c>
 80153e6:	ab06      	add	r3, sp, #24
 80153e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153ec:	b949      	cbnz	r1, 8015402 <__kernel_rem_pio2f+0x242>
 80153ee:	b12b      	cbz	r3, 80153fc <__kernel_rem_pio2f+0x23c>
 80153f0:	aa06      	add	r2, sp, #24
 80153f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80153f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80153fa:	2301      	movs	r3, #1
 80153fc:	3001      	adds	r0, #1
 80153fe:	4619      	mov	r1, r3
 8015400:	e781      	b.n	8015306 <__kernel_rem_pio2f+0x146>
 8015402:	aa06      	add	r2, sp, #24
 8015404:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015408:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801540c:	460b      	mov	r3, r1
 801540e:	e7f5      	b.n	80153fc <__kernel_rem_pio2f+0x23c>
 8015410:	1e68      	subs	r0, r5, #1
 8015412:	ab06      	add	r3, sp, #24
 8015414:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801541c:	aa06      	add	r2, sp, #24
 801541e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015422:	e779      	b.n	8015318 <__kernel_rem_pio2f+0x158>
 8015424:	1e68      	subs	r0, r5, #1
 8015426:	ab06      	add	r3, sp, #24
 8015428:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801542c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015430:	e7f4      	b.n	801541c <__kernel_rem_pio2f+0x25c>
 8015432:	a906      	add	r1, sp, #24
 8015434:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015438:	3801      	subs	r0, #1
 801543a:	430a      	orrs	r2, r1
 801543c:	e7a9      	b.n	8015392 <__kernel_rem_pio2f+0x1d2>
 801543e:	f10c 0c01 	add.w	ip, ip, #1
 8015442:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015446:	2a00      	cmp	r2, #0
 8015448:	d0f9      	beq.n	801543e <__kernel_rem_pio2f+0x27e>
 801544a:	eb0b 0305 	add.w	r3, fp, r5
 801544e:	aa1a      	add	r2, sp, #104	; 0x68
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	1898      	adds	r0, r3, r2
 8015454:	3004      	adds	r0, #4
 8015456:	1c69      	adds	r1, r5, #1
 8015458:	3704      	adds	r7, #4
 801545a:	2200      	movs	r2, #0
 801545c:	4465      	add	r5, ip
 801545e:	9005      	str	r0, [sp, #20]
 8015460:	428d      	cmp	r5, r1
 8015462:	f6ff af0a 	blt.w	801527a <__kernel_rem_pio2f+0xba>
 8015466:	a81a      	add	r0, sp, #104	; 0x68
 8015468:	eb02 0c03 	add.w	ip, r2, r3
 801546c:	4484      	add	ip, r0
 801546e:	9803      	ldr	r0, [sp, #12]
 8015470:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015474:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015478:	9001      	str	r0, [sp, #4]
 801547a:	ee07 0a90 	vmov	s15, r0
 801547e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015482:	9805      	ldr	r0, [sp, #20]
 8015484:	edcc 7a00 	vstr	s15, [ip]
 8015488:	eddf 7a13 	vldr	s15, [pc, #76]	; 80154d8 <__kernel_rem_pio2f+0x318>
 801548c:	eb00 0802 	add.w	r8, r0, r2
 8015490:	f04f 0c00 	mov.w	ip, #0
 8015494:	45d4      	cmp	ip, sl
 8015496:	dd0c      	ble.n	80154b2 <__kernel_rem_pio2f+0x2f2>
 8015498:	eb02 0c07 	add.w	ip, r2, r7
 801549c:	a842      	add	r0, sp, #264	; 0x108
 801549e:	4484      	add	ip, r0
 80154a0:	edcc 7a01 	vstr	s15, [ip, #4]
 80154a4:	3101      	adds	r1, #1
 80154a6:	3204      	adds	r2, #4
 80154a8:	e7da      	b.n	8015460 <__kernel_rem_pio2f+0x2a0>
 80154aa:	9b04      	ldr	r3, [sp, #16]
 80154ac:	f04f 0c01 	mov.w	ip, #1
 80154b0:	e7c7      	b.n	8015442 <__kernel_rem_pio2f+0x282>
 80154b2:	ecfe 6a01 	vldmia	lr!, {s13}
 80154b6:	ed38 7a01 	vldmdb	r8!, {s14}
 80154ba:	f10c 0c01 	add.w	ip, ip, #1
 80154be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80154c2:	e7e7      	b.n	8015494 <__kernel_rem_pio2f+0x2d4>
 80154c4:	3b01      	subs	r3, #1
 80154c6:	e769      	b.n	801539c <__kernel_rem_pio2f+0x1dc>
 80154c8:	08016670 	.word	0x08016670
 80154cc:	08016644 	.word	0x08016644
 80154d0:	43800000 	.word	0x43800000
 80154d4:	3b800000 	.word	0x3b800000
 80154d8:	00000000 	.word	0x00000000
 80154dc:	4260      	negs	r0, r4
 80154de:	eeb0 0a48 	vmov.f32	s0, s16
 80154e2:	f000 fa57 	bl	8015994 <scalbnf>
 80154e6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80154d0 <__kernel_rem_pio2f+0x310>
 80154ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80154ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f2:	db1a      	blt.n	801552a <__kernel_rem_pio2f+0x36a>
 80154f4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80154d4 <__kernel_rem_pio2f+0x314>
 80154f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80154fc:	aa06      	add	r2, sp, #24
 80154fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015502:	a906      	add	r1, sp, #24
 8015504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015508:	3408      	adds	r4, #8
 801550a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801550e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015512:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015516:	ee10 3a10 	vmov	r3, s0
 801551a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801551e:	1c6b      	adds	r3, r5, #1
 8015520:	ee17 2a90 	vmov	r2, s15
 8015524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015528:	e73f      	b.n	80153aa <__kernel_rem_pio2f+0x1ea>
 801552a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801552e:	aa06      	add	r2, sp, #24
 8015530:	ee10 3a10 	vmov	r3, s0
 8015534:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015538:	462b      	mov	r3, r5
 801553a:	e736      	b.n	80153aa <__kernel_rem_pio2f+0x1ea>
 801553c:	aa06      	add	r2, sp, #24
 801553e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8015542:	9202      	str	r2, [sp, #8]
 8015544:	ee07 2a90 	vmov	s15, r2
 8015548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801554c:	3c01      	subs	r4, #1
 801554e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015552:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015556:	ed65 7a01 	vstmdb	r5!, {s15}
 801555a:	e734      	b.n	80153c6 <__kernel_rem_pio2f+0x206>
 801555c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8015560:	ecf7 6a01 	vldmia	r7!, {s13}
 8015564:	ed9c 7a00 	vldr	s14, [ip]
 8015568:	eee6 7a87 	vfma.f32	s15, s13, s14
 801556c:	3401      	adds	r4, #1
 801556e:	454c      	cmp	r4, r9
 8015570:	dc01      	bgt.n	8015576 <__kernel_rem_pio2f+0x3b6>
 8015572:	42a5      	cmp	r5, r4
 8015574:	daf2      	bge.n	801555c <__kernel_rem_pio2f+0x39c>
 8015576:	aa56      	add	r2, sp, #344	; 0x158
 8015578:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 801557c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8015580:	3501      	adds	r5, #1
 8015582:	3804      	subs	r0, #4
 8015584:	e723      	b.n	80153ce <__kernel_rem_pio2f+0x20e>
 8015586:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015588:	2a03      	cmp	r2, #3
 801558a:	d84d      	bhi.n	8015628 <__kernel_rem_pio2f+0x468>
 801558c:	e8df f002 	tbb	[pc, r2]
 8015590:	021f1f3e 	.word	0x021f1f3e
 8015594:	aa56      	add	r2, sp, #344	; 0x158
 8015596:	4411      	add	r1, r2
 8015598:	399c      	subs	r1, #156	; 0x9c
 801559a:	4608      	mov	r0, r1
 801559c:	461c      	mov	r4, r3
 801559e:	2c00      	cmp	r4, #0
 80155a0:	dc5f      	bgt.n	8015662 <__kernel_rem_pio2f+0x4a2>
 80155a2:	4608      	mov	r0, r1
 80155a4:	461c      	mov	r4, r3
 80155a6:	2c01      	cmp	r4, #1
 80155a8:	dc6b      	bgt.n	8015682 <__kernel_rem_pio2f+0x4c2>
 80155aa:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80154d8 <__kernel_rem_pio2f+0x318>
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	dc77      	bgt.n	80156a2 <__kernel_rem_pio2f+0x4e2>
 80155b2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80155b6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80155ba:	f1b8 0f00 	cmp.w	r8, #0
 80155be:	d176      	bne.n	80156ae <__kernel_rem_pio2f+0x4ee>
 80155c0:	edc6 6a00 	vstr	s13, [r6]
 80155c4:	ed86 7a01 	vstr	s14, [r6, #4]
 80155c8:	edc6 7a02 	vstr	s15, [r6, #8]
 80155cc:	e02c      	b.n	8015628 <__kernel_rem_pio2f+0x468>
 80155ce:	aa56      	add	r2, sp, #344	; 0x158
 80155d0:	4411      	add	r1, r2
 80155d2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80154d8 <__kernel_rem_pio2f+0x318>
 80155d6:	399c      	subs	r1, #156	; 0x9c
 80155d8:	4618      	mov	r0, r3
 80155da:	2800      	cmp	r0, #0
 80155dc:	da32      	bge.n	8015644 <__kernel_rem_pio2f+0x484>
 80155de:	f1b8 0f00 	cmp.w	r8, #0
 80155e2:	d035      	beq.n	8015650 <__kernel_rem_pio2f+0x490>
 80155e4:	eef1 7a47 	vneg.f32	s15, s14
 80155e8:	edc6 7a00 	vstr	s15, [r6]
 80155ec:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80155f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80155f4:	a82f      	add	r0, sp, #188	; 0xbc
 80155f6:	2101      	movs	r1, #1
 80155f8:	428b      	cmp	r3, r1
 80155fa:	da2c      	bge.n	8015656 <__kernel_rem_pio2f+0x496>
 80155fc:	f1b8 0f00 	cmp.w	r8, #0
 8015600:	d001      	beq.n	8015606 <__kernel_rem_pio2f+0x446>
 8015602:	eef1 7a67 	vneg.f32	s15, s15
 8015606:	edc6 7a01 	vstr	s15, [r6, #4]
 801560a:	e00d      	b.n	8015628 <__kernel_rem_pio2f+0x468>
 801560c:	aa56      	add	r2, sp, #344	; 0x158
 801560e:	4411      	add	r1, r2
 8015610:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80154d8 <__kernel_rem_pio2f+0x318>
 8015614:	399c      	subs	r1, #156	; 0x9c
 8015616:	2b00      	cmp	r3, #0
 8015618:	da0e      	bge.n	8015638 <__kernel_rem_pio2f+0x478>
 801561a:	f1b8 0f00 	cmp.w	r8, #0
 801561e:	d001      	beq.n	8015624 <__kernel_rem_pio2f+0x464>
 8015620:	eef1 7a67 	vneg.f32	s15, s15
 8015624:	edc6 7a00 	vstr	s15, [r6]
 8015628:	9b01      	ldr	r3, [sp, #4]
 801562a:	f003 0007 	and.w	r0, r3, #7
 801562e:	b057      	add	sp, #348	; 0x15c
 8015630:	ecbd 8b04 	vpop	{d8-d9}
 8015634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015638:	ed31 7a01 	vldmdb	r1!, {s14}
 801563c:	3b01      	subs	r3, #1
 801563e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015642:	e7e8      	b.n	8015616 <__kernel_rem_pio2f+0x456>
 8015644:	ed71 7a01 	vldmdb	r1!, {s15}
 8015648:	3801      	subs	r0, #1
 801564a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801564e:	e7c4      	b.n	80155da <__kernel_rem_pio2f+0x41a>
 8015650:	eef0 7a47 	vmov.f32	s15, s14
 8015654:	e7c8      	b.n	80155e8 <__kernel_rem_pio2f+0x428>
 8015656:	ecb0 7a01 	vldmia	r0!, {s14}
 801565a:	3101      	adds	r1, #1
 801565c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015660:	e7ca      	b.n	80155f8 <__kernel_rem_pio2f+0x438>
 8015662:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015666:	ed70 6a01 	vldmdb	r0!, {s13}
 801566a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801566e:	3c01      	subs	r4, #1
 8015670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015674:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801567c:	edc0 7a00 	vstr	s15, [r0]
 8015680:	e78d      	b.n	801559e <__kernel_rem_pio2f+0x3de>
 8015682:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015686:	ed70 6a01 	vldmdb	r0!, {s13}
 801568a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801568e:	3c01      	subs	r4, #1
 8015690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015694:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801569c:	edc0 7a00 	vstr	s15, [r0]
 80156a0:	e781      	b.n	80155a6 <__kernel_rem_pio2f+0x3e6>
 80156a2:	ed31 7a01 	vldmdb	r1!, {s14}
 80156a6:	3b01      	subs	r3, #1
 80156a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156ac:	e77f      	b.n	80155ae <__kernel_rem_pio2f+0x3ee>
 80156ae:	eef1 6a66 	vneg.f32	s13, s13
 80156b2:	eeb1 7a47 	vneg.f32	s14, s14
 80156b6:	edc6 6a00 	vstr	s13, [r6]
 80156ba:	ed86 7a01 	vstr	s14, [r6, #4]
 80156be:	eef1 7a67 	vneg.f32	s15, s15
 80156c2:	e781      	b.n	80155c8 <__kernel_rem_pio2f+0x408>

080156c4 <__kernel_sinf>:
 80156c4:	ee10 3a10 	vmov	r3, s0
 80156c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80156d0:	da04      	bge.n	80156dc <__kernel_sinf+0x18>
 80156d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80156d6:	ee17 3a90 	vmov	r3, s15
 80156da:	b35b      	cbz	r3, 8015734 <__kernel_sinf+0x70>
 80156dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80156e0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015738 <__kernel_sinf+0x74>
 80156e4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801573c <__kernel_sinf+0x78>
 80156e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80156ec:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015740 <__kernel_sinf+0x7c>
 80156f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80156f4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015744 <__kernel_sinf+0x80>
 80156f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80156fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015748 <__kernel_sinf+0x84>
 8015700:	ee60 6a07 	vmul.f32	s13, s0, s14
 8015704:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015708:	b930      	cbnz	r0, 8015718 <__kernel_sinf+0x54>
 801570a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801574c <__kernel_sinf+0x88>
 801570e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015712:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015716:	4770      	bx	lr
 8015718:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801571c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015720:	eee0 7a86 	vfma.f32	s15, s1, s12
 8015724:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8015728:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015750 <__kernel_sinf+0x8c>
 801572c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8015730:	ee30 0a60 	vsub.f32	s0, s0, s1
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop
 8015738:	2f2ec9d3 	.word	0x2f2ec9d3
 801573c:	b2d72f34 	.word	0xb2d72f34
 8015740:	3638ef1b 	.word	0x3638ef1b
 8015744:	b9500d01 	.word	0xb9500d01
 8015748:	3c088889 	.word	0x3c088889
 801574c:	be2aaaab 	.word	0xbe2aaaab
 8015750:	3e2aaaab 	.word	0x3e2aaaab

08015754 <matherr>:
 8015754:	2000      	movs	r0, #0
 8015756:	4770      	bx	lr

08015758 <atanf>:
 8015758:	b538      	push	{r3, r4, r5, lr}
 801575a:	ee10 5a10 	vmov	r5, s0
 801575e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015762:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015766:	eef0 7a40 	vmov.f32	s15, s0
 801576a:	db10      	blt.n	801578e <atanf+0x36>
 801576c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015770:	dd04      	ble.n	801577c <atanf+0x24>
 8015772:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015776:	eeb0 0a67 	vmov.f32	s0, s15
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80158b4 <atanf+0x15c>
 8015780:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80158b8 <atanf+0x160>
 8015784:	2d00      	cmp	r5, #0
 8015786:	bfd8      	it	le
 8015788:	eef0 7a47 	vmovle.f32	s15, s14
 801578c:	e7f3      	b.n	8015776 <atanf+0x1e>
 801578e:	4b4b      	ldr	r3, [pc, #300]	; (80158bc <atanf+0x164>)
 8015790:	429c      	cmp	r4, r3
 8015792:	dc10      	bgt.n	80157b6 <atanf+0x5e>
 8015794:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015798:	da0a      	bge.n	80157b0 <atanf+0x58>
 801579a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80158c0 <atanf+0x168>
 801579e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80157a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80157a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80157aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ae:	dce2      	bgt.n	8015776 <atanf+0x1e>
 80157b0:	f04f 33ff 	mov.w	r3, #4294967295
 80157b4:	e013      	b.n	80157de <atanf+0x86>
 80157b6:	f000 f8a3 	bl	8015900 <fabsf>
 80157ba:	4b42      	ldr	r3, [pc, #264]	; (80158c4 <atanf+0x16c>)
 80157bc:	429c      	cmp	r4, r3
 80157be:	dc4f      	bgt.n	8015860 <atanf+0x108>
 80157c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80157c4:	429c      	cmp	r4, r3
 80157c6:	dc41      	bgt.n	801584c <atanf+0xf4>
 80157c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80157cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80157d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80157d4:	2300      	movs	r3, #0
 80157d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80157da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80157e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80158c8 <atanf+0x170>
 80157e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80158cc <atanf+0x174>
 80157ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80158d0 <atanf+0x178>
 80157f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80157f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80157f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80158d4 <atanf+0x17c>
 80157fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015800:	eddf 5a35 	vldr	s11, [pc, #212]	; 80158d8 <atanf+0x180>
 8015804:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015808:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80158dc <atanf+0x184>
 801580c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015810:	eddf 5a33 	vldr	s11, [pc, #204]	; 80158e0 <atanf+0x188>
 8015814:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015818:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80158e4 <atanf+0x18c>
 801581c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015820:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80158e8 <atanf+0x190>
 8015824:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015828:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80158ec <atanf+0x194>
 801582c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015830:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80158f0 <atanf+0x198>
 8015834:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015838:	ee27 7a26 	vmul.f32	s14, s14, s13
 801583c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015844:	d121      	bne.n	801588a <atanf+0x132>
 8015846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801584a:	e794      	b.n	8015776 <atanf+0x1e>
 801584c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015850:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015854:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015858:	2301      	movs	r3, #1
 801585a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801585e:	e7be      	b.n	80157de <atanf+0x86>
 8015860:	4b24      	ldr	r3, [pc, #144]	; (80158f4 <atanf+0x19c>)
 8015862:	429c      	cmp	r4, r3
 8015864:	dc0b      	bgt.n	801587e <atanf+0x126>
 8015866:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801586a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801586e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015872:	2302      	movs	r3, #2
 8015874:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801587c:	e7af      	b.n	80157de <atanf+0x86>
 801587e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015882:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015886:	2303      	movs	r3, #3
 8015888:	e7a9      	b.n	80157de <atanf+0x86>
 801588a:	4a1b      	ldr	r2, [pc, #108]	; (80158f8 <atanf+0x1a0>)
 801588c:	491b      	ldr	r1, [pc, #108]	; (80158fc <atanf+0x1a4>)
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	441a      	add	r2, r3
 8015892:	440b      	add	r3, r1
 8015894:	edd3 6a00 	vldr	s13, [r3]
 8015898:	ee37 7a66 	vsub.f32	s14, s14, s13
 801589c:	2d00      	cmp	r5, #0
 801589e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158a2:	ed92 7a00 	vldr	s14, [r2]
 80158a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158aa:	bfb8      	it	lt
 80158ac:	eef1 7a67 	vneglt.f32	s15, s15
 80158b0:	e761      	b.n	8015776 <atanf+0x1e>
 80158b2:	bf00      	nop
 80158b4:	bfc90fdb 	.word	0xbfc90fdb
 80158b8:	3fc90fdb 	.word	0x3fc90fdb
 80158bc:	3edfffff 	.word	0x3edfffff
 80158c0:	7149f2ca 	.word	0x7149f2ca
 80158c4:	3f97ffff 	.word	0x3f97ffff
 80158c8:	3c8569d7 	.word	0x3c8569d7
 80158cc:	3d4bda59 	.word	0x3d4bda59
 80158d0:	bd6ef16b 	.word	0xbd6ef16b
 80158d4:	3d886b35 	.word	0x3d886b35
 80158d8:	3dba2e6e 	.word	0x3dba2e6e
 80158dc:	3e124925 	.word	0x3e124925
 80158e0:	3eaaaaab 	.word	0x3eaaaaab
 80158e4:	bd15a221 	.word	0xbd15a221
 80158e8:	bd9d8795 	.word	0xbd9d8795
 80158ec:	bde38e38 	.word	0xbde38e38
 80158f0:	be4ccccd 	.word	0xbe4ccccd
 80158f4:	401bffff 	.word	0x401bffff
 80158f8:	0801667c 	.word	0x0801667c
 80158fc:	0801668c 	.word	0x0801668c

08015900 <fabsf>:
 8015900:	ee10 3a10 	vmov	r3, s0
 8015904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015908:	ee00 3a10 	vmov	s0, r3
 801590c:	4770      	bx	lr
	...

08015910 <floorf>:
 8015910:	ee10 3a10 	vmov	r3, s0
 8015914:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015918:	0dca      	lsrs	r2, r1, #23
 801591a:	3a7f      	subs	r2, #127	; 0x7f
 801591c:	2a16      	cmp	r2, #22
 801591e:	dc2a      	bgt.n	8015976 <floorf+0x66>
 8015920:	2a00      	cmp	r2, #0
 8015922:	da11      	bge.n	8015948 <floorf+0x38>
 8015924:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015988 <floorf+0x78>
 8015928:	ee30 0a27 	vadd.f32	s0, s0, s15
 801592c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015934:	dd05      	ble.n	8015942 <floorf+0x32>
 8015936:	2b00      	cmp	r3, #0
 8015938:	da23      	bge.n	8015982 <floorf+0x72>
 801593a:	4a14      	ldr	r2, [pc, #80]	; (801598c <floorf+0x7c>)
 801593c:	2900      	cmp	r1, #0
 801593e:	bf18      	it	ne
 8015940:	4613      	movne	r3, r2
 8015942:	ee00 3a10 	vmov	s0, r3
 8015946:	4770      	bx	lr
 8015948:	4911      	ldr	r1, [pc, #68]	; (8015990 <floorf+0x80>)
 801594a:	4111      	asrs	r1, r2
 801594c:	420b      	tst	r3, r1
 801594e:	d0fa      	beq.n	8015946 <floorf+0x36>
 8015950:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015988 <floorf+0x78>
 8015954:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015958:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015960:	ddef      	ble.n	8015942 <floorf+0x32>
 8015962:	2b00      	cmp	r3, #0
 8015964:	bfbe      	ittt	lt
 8015966:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801596a:	fa40 f202 	asrlt.w	r2, r0, r2
 801596e:	189b      	addlt	r3, r3, r2
 8015970:	ea23 0301 	bic.w	r3, r3, r1
 8015974:	e7e5      	b.n	8015942 <floorf+0x32>
 8015976:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801597a:	d3e4      	bcc.n	8015946 <floorf+0x36>
 801597c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015980:	4770      	bx	lr
 8015982:	2300      	movs	r3, #0
 8015984:	e7dd      	b.n	8015942 <floorf+0x32>
 8015986:	bf00      	nop
 8015988:	7149f2ca 	.word	0x7149f2ca
 801598c:	bf800000 	.word	0xbf800000
 8015990:	007fffff 	.word	0x007fffff

08015994 <scalbnf>:
 8015994:	b508      	push	{r3, lr}
 8015996:	ee10 2a10 	vmov	r2, s0
 801599a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801599e:	ed2d 8b02 	vpush	{d8}
 80159a2:	eef0 0a40 	vmov.f32	s1, s0
 80159a6:	d004      	beq.n	80159b2 <scalbnf+0x1e>
 80159a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80159ac:	d306      	bcc.n	80159bc <scalbnf+0x28>
 80159ae:	ee70 0a00 	vadd.f32	s1, s0, s0
 80159b2:	ecbd 8b02 	vpop	{d8}
 80159b6:	eeb0 0a60 	vmov.f32	s0, s1
 80159ba:	bd08      	pop	{r3, pc}
 80159bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80159c0:	d21c      	bcs.n	80159fc <scalbnf+0x68>
 80159c2:	4b1f      	ldr	r3, [pc, #124]	; (8015a40 <scalbnf+0xac>)
 80159c4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015a44 <scalbnf+0xb0>
 80159c8:	4298      	cmp	r0, r3
 80159ca:	ee60 0a27 	vmul.f32	s1, s0, s15
 80159ce:	db10      	blt.n	80159f2 <scalbnf+0x5e>
 80159d0:	ee10 2a90 	vmov	r2, s1
 80159d4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80159d8:	3b19      	subs	r3, #25
 80159da:	4403      	add	r3, r0
 80159dc:	2bfe      	cmp	r3, #254	; 0xfe
 80159de:	dd0f      	ble.n	8015a00 <scalbnf+0x6c>
 80159e0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015a48 <scalbnf+0xb4>
 80159e4:	eeb0 0a48 	vmov.f32	s0, s16
 80159e8:	f000 f834 	bl	8015a54 <copysignf>
 80159ec:	ee60 0a08 	vmul.f32	s1, s0, s16
 80159f0:	e7df      	b.n	80159b2 <scalbnf+0x1e>
 80159f2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015a4c <scalbnf+0xb8>
 80159f6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80159fa:	e7da      	b.n	80159b2 <scalbnf+0x1e>
 80159fc:	0ddb      	lsrs	r3, r3, #23
 80159fe:	e7ec      	b.n	80159da <scalbnf+0x46>
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	dd06      	ble.n	8015a12 <scalbnf+0x7e>
 8015a04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015a08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015a0c:	ee00 3a90 	vmov	s1, r3
 8015a10:	e7cf      	b.n	80159b2 <scalbnf+0x1e>
 8015a12:	f113 0f16 	cmn.w	r3, #22
 8015a16:	da06      	bge.n	8015a26 <scalbnf+0x92>
 8015a18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015a1c:	4298      	cmp	r0, r3
 8015a1e:	dcdf      	bgt.n	80159e0 <scalbnf+0x4c>
 8015a20:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8015a4c <scalbnf+0xb8>
 8015a24:	e7de      	b.n	80159e4 <scalbnf+0x50>
 8015a26:	3319      	adds	r3, #25
 8015a28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015a2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015a30:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015a50 <scalbnf+0xbc>
 8015a34:	ee07 3a10 	vmov	s14, r3
 8015a38:	ee67 0a27 	vmul.f32	s1, s14, s15
 8015a3c:	e7b9      	b.n	80159b2 <scalbnf+0x1e>
 8015a3e:	bf00      	nop
 8015a40:	ffff3cb0 	.word	0xffff3cb0
 8015a44:	4c000000 	.word	0x4c000000
 8015a48:	7149f2ca 	.word	0x7149f2ca
 8015a4c:	0da24260 	.word	0x0da24260
 8015a50:	33000000 	.word	0x33000000

08015a54 <copysignf>:
 8015a54:	ee10 3a10 	vmov	r3, s0
 8015a58:	ee10 2a90 	vmov	r2, s1
 8015a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015a64:	4313      	orrs	r3, r2
 8015a66:	ee00 3a10 	vmov	s0, r3
 8015a6a:	4770      	bx	lr

08015a6c <_init>:
 8015a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a6e:	bf00      	nop
 8015a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a72:	bc08      	pop	{r3}
 8015a74:	469e      	mov	lr, r3
 8015a76:	4770      	bx	lr

08015a78 <_fini>:
 8015a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7a:	bf00      	nop
 8015a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a7e:	bc08      	pop	{r3}
 8015a80:	469e      	mov	lr, r3
 8015a82:	4770      	bx	lr
